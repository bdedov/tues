"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
var UserInventoryRoleService_1 = require("./UserInventoryRoleService");
/**
 * @description
 * This service allows for managing users.
 */
var UserService = /** @class */ (function (_super) {
    __extends(UserService, _super);
    function UserService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseUrl = 'user';
        _this.currentUserUrl = 'currentUser';
        _this.passwordResetUrl = 'passwordReset';
        _this.currentUserPhoneUrl = 'currentUserPhone';
        _this.verifyTFACodeUrl = 'pin';
        _this.totpCurrentUserURL = _this.currentUserUrl + "/totpSecret";
        _this.verifyTOTPCodeUrl = _this.totpCurrentUserURL + "/verify";
        _this.activateTOTPCodeUrl = _this.totpCurrentUserURL + "/activity";
        _this.revokeTOTPSecretUrl = 'totpSecret/revoke';
        _this.propertyName = 'users';
        return _this;
    }
    Object.defineProperty(UserService.prototype, "listUrl", {
        get: function () {
            return this.client.tenant + "/users";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the details of given user.
     *
     * @param {string | number | IUser} entityOrId User's id or user object.
     *
     * @returns Returns promise object that is resolved with the IUser wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const userId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await userService.detail(userId);
     *   })();
     * ```
     * User password is never returned in GET response. Authentication mechanism is provided by another interface.
     */
    UserService.prototype.detail = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, entityOrId)];
            });
        });
    };
    /**
     * Creates a new user.
     *
     * @param {IUser} entity User object.
     *
     * @returns {IResult<IUser>} Returns promise object that is resolved with the details of newly created user.
     *
     * **Example**
     * ```typescript
     *
     *  const userObject: IUser = {
     *    userName: "newUser",
     *    password: "userPassword12!@"
     *  };
     *
     *  (async () => {
     *    const {data, res} = await userService.create(userObject);
     *  })();
     * ```
     */
    UserService.prototype.create = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.create.call(this, entity)];
            });
        });
    };
    /**
     * Updates user data.
     *
     * @param {Partial<IUser>} entity User is partially updatable.
     *
     * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user object.
     *
     * **Example**
     * ```typescript
     *
     *  const partialUpdateObject: Partial<IUser> = {
     *     "id" : "myuser",
     *     "userName" : "newUserName",
     *     "email": "newUserEmail@example.com"
     *     ...
     *   }
     *
     *  (async () => {
     *    const {data, res} = await userService.update(partialUpdateObject);
     *  })();
     * ```
     * When user is updated with changed permissions or groups, suitable audit record is created with type
     * 'User' and activity 'User updated'.
     */
    UserService.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, entity)];
            });
        });
    };
    /**
     * Gets the list of users filtered by parameters.
     *
     * @param {object} filter Object containing filters for querying users.
     *
     * @returns Returns promise object that is resolved with the IUser wrapped by IResultList.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await userService.list(filter);
     *   })();
     * ```
     */
    UserService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = userInventoryRoleService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    UserService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    /**
     * Removes user.
     *
     * @param {number|IIdentified} entityOrId User's id or user object.
     *
     * @returns Returns promise object that is resolved with the IResult of null.
     *
     * **Example**
     * ```typescript
     *
     *    const userId: string = "uniqueUserId";
     *
     *    (async () => {
     *      const {data, res} = await userService.delete(userGroupId);
     *   })();
     * ```
     */
    UserService.prototype.delete = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, entityOrId)];
            });
        });
    };
    /**
     * Create instance of User Inventory Role Service related with given User.
     *
     * @param {string|number|IUser} entityOrId User's id or user object.
     *
     * @returns Returns UserInventoryRoleService object that is related with given User.
     *
     * **Example**
     * ```typescript
     *
     *    const userId: string = "uniqueUserId";
     *
     *    const userInventoryRoleService = userService.inventoryAssignment(userGroupId);
     *    (async () => {
     *      const {data, res} = await userInventoryRoleService.create(...);
     *   })();
     * ```
     */
    UserService.prototype.inventoryAssignment = function (entityOrId) {
        return new UserInventoryRoleService_1.UserInventoryRoleService(this.getDetailUrl(entityOrId), this.client);
    };
    /**
     * Gets user that is currently logged in.
     *
     * @returns Returns promise object that is resolved with the IUser wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.current();
     *   })();
     * ```
     */
    UserService.prototype.current = function () {
        return __awaiter(this, void 0, void 0, function () {
            var headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = {
                            'content-type': 'application/json',
                            Accept: 'application/vnd.com.nsn.cumulocity.user+json;'
                        };
                        return [4 /*yield*/, this.fetch(this.currentUserUrl, { headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Gets user that is currently logged in with the list of all roles assigned.
     *
     * @returns Returns promise object that is resolved with the ICurrenUser wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.currentWithEffectiveRoles();
     *   })();
     * ```
     */
    UserService.prototype.currentWithEffectiveRoles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = {
                            'content-type': 'application/json',
                            Accept: 'application/vnd.com.nsn.cumulocity.currentUser+json;'
                        };
                        return [4 /*yield*/, this.fetch(this.currentUserUrl, { headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Updates the current user
     *
     * @param {IUser} user The user object with the properties to be updated
     *
     * @return Returns promise object resolved with the IUser wrapped by IResult
     */
    UserService.prototype.updateCurrent = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var mimeType, headers, body, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mimeType = 'application/vnd.com.nsn.cumulocity.user+json';
                        headers = { 'content-type': mimeType, Accept: mimeType };
                        body = JSON.stringify(this.onBeforeUpdate(user));
                        return [4 /*yield*/, this.fetch(this.currentUserUrl, { headers: headers, body: body, method: 'PUT' })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Sends an email message with a link allowing user to reset their password.
     *
     * @param {string} email The email address to send the message to.
     * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).
     *
     * @returns Returns a request result object.
     *
     * **Example**
     * ```typescript
     *   const email = 'user@example.com';
     *   const tenantId = 't123456';
     *
     *   (async () => {
     *     const { res, data } = await userService.sendPasswordResetMail(email, tenantId);
     *   })();
     * ```
     */
    UserService.prototype.sendPasswordResetMail = function (email, tenantId) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, method, url, params, body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        method = 'POST';
                        url = this.passwordResetUrl;
                        params = tenantId ? { tenantId: tenantId } : {};
                        body = JSON.stringify({ email: email });
                        return [4 /*yield*/, this.fetch(url, { headers: headers, method: method, params: params, body: body })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Resets user's password to a new one.
     *
     * @param {IResetPassword} newPassword Object with token, user's email, new password and its strength indicator.
     * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).
     *
     * @returns Returns a request result object.
     *
     * **Example**
     * ```typescript
     *   const newPassword: IResetPassword = {
     *     token: '123123ASDAWERER@#!WEDS$@#!WADA#A#EA#EA#EA',
     *     email: 'user@example.com',
     *     newPassword: 'myNewPassword',
     *     passwordStrength: PasswordStrength.GREEN
     *   };
     *   const tenantId = 't123456';
     *
     *   (async () => {
     *     const { res, data } = await userService.resetPassword(newPassword, tenantId);
     *   })();
     * ```
     */
    UserService.prototype.resetPassword = function (newPassword, tenantId) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, method, url, params, body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        method = 'PUT';
                        url = this.passwordResetUrl;
                        params = tenantId ? { tenantId: tenantId } : {};
                        body = JSON.stringify(newPassword);
                        return [4 /*yield*/, this.fetch(url, { headers: headers, method: method, params: params, body: body })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Verifies TFA code which is sent via SMS. If invoked with string '0', new TFA code will be sent.
     *
     * @param {string} pin The code to verify.
     *
     * @returns Returns a status object.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.verifyTFACode('123123');
     *   })();
     * ```
     */
    UserService.prototype.verifyTFACode = function (pin) {
        return __awaiter(this, void 0, void 0, function () {
            var method, body, headers, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'POST';
                        body = JSON.stringify({ pin: pin });
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(this.verifyTFACodeUrl, { headers: headers, body: body, method: method })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Verifies TFA code which is generated by a TOTP app.
     *
     * @param {string} code The code to verify.
     *
     * @returns Returns a status object.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.verifyTotpCode('123123');
     *   })();
     * ```
     */
    UserService.prototype.verifyTotpCode = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var method, headers, body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'POST';
                        headers = { 'content-type': 'application/json' };
                        body = JSON.stringify({ code: code });
                        return [4 /*yield*/, this.fetch(this.verifyTOTPCodeUrl, { headers: headers, body: body, method: method })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Verifies TFA code which is generated by a TOTP app.
     *
     * @returns Returns a status object.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.activateTotp();
     *   })();
     * ```
     */
    UserService.prototype.activateTotp = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, headers, body, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'POST';
                        headers = { 'content-type': 'application/json' };
                        body = JSON.stringify({ isActive: true });
                        return [4 /*yield*/, this.fetch(this.activateTOTPCodeUrl, { headers: headers, body: body, method: method })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Checks if TOTP is activated and enforced.
     *
     * @returns Returns an object of ITotpStatus if it is active.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.getActivityTotp();
     *      console.log(data.isActive);
     *   })();
     * ```
     */
    UserService.prototype.getActivityTotp = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'GET';
                        headers = { 'content-type': 'application/json' };
                        return [4 /*yield*/, this.fetch(this.activateTOTPCodeUrl, { headers: headers, method: method })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Generates a secret which can be used to setup two-factor authentication with TOTP.
     *
     * @returns Returns the secret and an URL to a QR Code.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await userService.generateTotpSecret();
     *      console.log(secret);
     *   })();
     * ```
     */
    UserService.prototype.generateTotpSecret = function () {
        return __awaiter(this, void 0, void 0, function () {
            var method, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'POST';
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(this.totpCurrentUserURL, { headers: headers, method: method })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Revokes a specific user's TOTP secret.
     *
     * @param {IUser} user User whose TOTP secret to revoke.
     *
     * @returns Status object
     */
    UserService.prototype.totpRevokeSecret = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, headers, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getDetailUrl(user) + "/" + this.revokeTOTPSecretUrl;
                        method = 'DELETE';
                        headers = { accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, { headers: headers, method: method })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    /**
     * Saves phone number for the current user.
     * @param phoneNumber Phone number to save.
     * @returns Server response and data with updated current user object.
     */
    UserService.prototype.savePhoneNumber = function (phoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var url, options, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.currentUserPhoneUrl;
                        options = {
                            method: 'PUT',
                            headers: { 'content-type': 'application/json', accept: 'application/json' },
                            body: JSON.stringify({
                                phone: phoneNumber
                            })
                        };
                        return [4 /*yield*/, this.fetch(url, options)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    UserService.prototype.hasRole = function (user, roleId) {
        return this.hasRoleInUser(user, roleId) || this.hasRoleInGroups(user, roleId);
    };
    UserService.prototype.hasAllRoles = function (user, roleIds) {
        var _this = this;
        return roleIds.every(function (roleId) { return _this.hasRole(user, roleId); });
    };
    UserService.prototype.hasAnyRole = function (user, roleIds) {
        var _this = this;
        return roleIds.some(function (roleId) { return _this.hasRole(user, roleId); });
    };
    UserService.prototype.onBeforeUpdate = function (user) {
        var obj = Object.assign({}, user);
        delete obj.id;
        delete obj.userName;
        return obj;
    };
    UserService.prototype.getDetailUrl = function (entityOrId) {
        var id;
        if (typeof entityOrId === 'object' && entityOrId.id) {
            id = entityOrId.id;
        }
        else if (typeof entityOrId === 'object' && entityOrId.userName) {
            id = entityOrId.userName;
        }
        else {
            id = entityOrId;
        }
        return this.listUrl + "/" + encodeURIComponent(String(id));
    };
    UserService.prototype.hasRoleInUser = function (user, roleId) {
        var effectiveRoles = user.effectiveRoles || [];
        return (this.hasRoleInReferences((user && user.roles && user.roles.references) || [], roleId) ||
            effectiveRoles.some(function (_a) {
                var id = _a.id;
                return roleId === id;
            }));
    };
    UserService.prototype.hasRoleInGroups = function (user, roleId) {
        var _this = this;
        var groupReferences = (user && user.groups && user.groups.references) || [];
        return groupReferences.some(function (groupRef) {
            return _this.hasRoleInReferences(groupRef.group.roles.references, roleId);
        });
    };
    UserService.prototype.hasRoleInReferences = function (references, roleId) {
        return references.some(function (ref) { return ref.role.id === roleId; });
    };
    return UserService;
}(core_1.Service));
exports.UserService = UserService;
//# sourceMappingURL=UserService.js.map