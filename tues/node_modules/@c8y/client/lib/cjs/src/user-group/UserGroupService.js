"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
var ChildType;
(function (ChildType) {
    ChildType["ROLES"] = "roles";
    ChildType["USERS"] = "users";
})(ChildType || (ChildType = {}));
/**
 * @description
 * This service allows for managing user groups.
 */
var UserGroupService = /** @class */ (function (_super) {
    __extends(UserGroupService, _super);
    function UserGroupService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseUrl = 'user';
        _this.propertyName = 'groups';
        return _this;
    }
    Object.defineProperty(UserGroupService.prototype, "listUrl", {
        get: function () {
            return this.client.tenant + "/groups";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the details of given user group.
     *
     * @param {string|number|IUserGroup} entityOrId Group's id or role object.
     *
     * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const groupId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.detail(roleId);
     *   })();
     * ```
     */
    UserGroupService.prototype.detail = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, entityOrId)];
            });
        });
    };
    /**
     * Creates a new user group.
     *
     * @param {IUserGroup} entity User Group object.
     *
     * @returns {IResult<IUserGroup>} Returns promise object that is resolved with
     * the details of newly created user group.
     *
     * **Example**
     * ```typescript
     *
     *  const userGroupObject: IUserGroup = {
     *    name: "new user group"
     *  };
     *
     *  (async () => {
     *    const {data, res} = await userGroupService.create(userGroupObject);
     *  })();
     * ```
     */
    UserGroupService.prototype.create = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.create.call(this, entity)];
            });
        });
    };
    /**
     * Updates user group data.
     *
     * @param {Partial<IUserGroup>} entity User group is partially updatable.
     *
     * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user group object.
     *
     * **Example**
     * ```typescript
     *
     *  const partialUpdateObject: Partial<IUserGroup> = {
     *     "id" : 1,
     *     "self" : "[URL to this resource]",
     *     "name" : "PlatformAdministrators",
     *     ...
     *   }
     *
     *  (async () => {
     *    const {data, res} = await userGroupService.update(partialUpdateObject);
     *  })();
     * ```
     */
    UserGroupService.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, entity)];
            });
        });
    };
    /**
     * Gets the list of user groups filtered by parameters.
     *
     * @param {object} filter Object containing filters for querying User Groups.
     *
     * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResultList.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     severity: Severity.MAJOR,
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await userGroupService.list(filter);
     *   })();
     * ```
     */
    UserGroupService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = userGroupService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    UserGroupService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    /**
     * Removes user group.
     *
     * @param {number | IIdentified} entityOrId User group's id or user group object.
     *
     * @returns Returns promise object that is resolved with the IResult of null.
     *
     * **Example**
     * ```typescript
     *
     *    const userGroupId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.delete(userGroupId);
     *   })();
     * ```
     * When group is removed, suitable audit records are created with type 'User'
     * and activity 'User updated' with information that user has been removed from group.
     *
     * Please, note that the ADMINS and DEVICES groups can not be deleted.
     */
    UserGroupService.prototype.delete = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, entityOrId)];
            });
        });
    };
    /**
     * Assign role to user group.
     *
     * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.
     * @param {string | Partial<ISource>} childEntityOrSelf Url to role resource or IRoleReference object.
     *
     * @returns Returns promise object that is resolved with the IRoleReference wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const userGroupId: number = 1;
     *    const roleResource: string = "[URL to the Role resource]";
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.addRoleToGroup(userGroupId, roleResource);
     *   })();
     * ```
     * When role is assigned to user, suitable audit record is created with type 'User' and activity 'User updated'.
     */
    UserGroupService.prototype.addRoleToGroup = function (entityOrId, childEntityOrSelf) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.addChild(ChildType.ROLES, entityOrId, childEntityOrSelf)];
            });
        });
    };
    /**
     * Unassign role from user
     *
     * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.
     * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IRoleReference object.
     *
     * @returns Returns promise object that is resolved with the IResult of null.
     *
     * **Example**
     * ```typescript
     *
     *    const userGroupId: number = 1;
     *    const userResource: string = "[URL to the Role resource]";
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.removeRoleFromGroup(userGroupId, userResource);
     *   })();
     * ```
     */
    UserGroupService.prototype.removeRoleFromGroup = function (entityOrId, childEntityOrSelf) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.removeChild(ChildType.ROLES, entityOrId, childEntityOrSelf)];
            });
        });
    };
    /**
     * Assign user to user group.
     *
     * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.
     * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.
     *
     * @returns Returns promise object that is resolved with the IUserReference wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const userGroupId: number = 1;
     *    const userResource: string = "[URL to the User resource]";
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.addUserToGroup(userGroupId, userResource);
     *   })();
     * ```
     * When user is added to group, suitable audit record is created with type 'User' and activity 'User updated'.
     */
    UserGroupService.prototype.addUserToGroup = function (entityOrId, childEntityOrSelf) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.addChild(ChildType.USERS, entityOrId, childEntityOrSelf)];
            });
        });
    };
    /**
     * Remove user from a group
     *
     * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.
     * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.
     *
     * @returns Returns promise object that is resolved with the IResult of null.
     *
     * **Example**
     * ```typescript
     *
     *    const userGroupId: number = 1;
     *    const userResource: string = "[URL to the User resource]";
     *
     *    (async () => {
     *      const {data, res} = await userGroupService.removeUserFromGroup(userGroupId, userResource);
     *   })();
     * ```
     * When user is removed from group, suitable audit record is created with type 'User' and activity 'User updated'.
     */
    UserGroupService.prototype.removeUserFromGroup = function (entityOrId, childEntityOrSelf) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.removeChild(ChildType.USERS, entityOrId, childEntityOrSelf)];
            });
        });
    };
    UserGroupService.prototype.getSelf = function (childReference) {
        if (typeof childReference === 'object' && childReference.self) {
            return childReference.self;
        }
        else {
            return childReference;
        }
    };
    UserGroupService.prototype.getChildUrl = function (type, userGroupOrId) {
        return this.getDetailUrl(userGroupOrId) + "/" + type;
    };
    UserGroupService.prototype.getChildReferenceAsBody = function (type, childReference) {
        var childSelf = this.getSelf(childReference);
        switch (type) {
            case ChildType.ROLES:
                return JSON.stringify({ role: { self: String(childSelf) } });
            case ChildType.USERS:
                return JSON.stringify({ user: { self: String(childSelf) } });
        }
        throw new Error('UserGroupService -> getChild -> unsupported child type');
    };
    UserGroupService.prototype.addChild = function (type, userGroupOrId, childReference) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getChildUrl(type, userGroupOrId);
                        method = 'POST';
                        body = this.getChildReferenceAsBody(type, childReference);
                        headers = {
                            accept: 'application/json',
                            'content-type': 'application/json'
                        };
                        return [4 /*yield*/, this.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        data = data.managedObject;
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    UserGroupService.prototype.removeChild = function (type, userGroupOrId, childReference) {
        return __awaiter(this, void 0, void 0, function () {
            var childId, url, method, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        childId = this.getIdString(childReference);
                        url = this.getChildUrl(type, userGroupOrId) + "/" + encodeURIComponent(String(childId));
                        method = 'DELETE';
                        headers = { accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, { method: method, headers: headers })];
                    case 1:
                        res = _a.sent();
                        data = null;
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    return UserGroupService;
}(core_1.Service));
exports.UserGroupService = UserGroupService;
//# sourceMappingURL=UserGroupService.js.map