"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var QueriesUtil = /** @class */ (function () {
    function QueriesUtil() {
        var _this = this;
        this.operatorFns = {
            __not: function (operand) {
                return "not(" + _this.buildQueryFilter(operand, null) + ")";
            },
            __and: function (operand) {
                return _this.buildQueryFilter(operand, null, 'and');
            },
            __or: function (operand) {
                return _this.buildQueryFilter(operand, null, 'or');
            },
            __eq: function (operand, contextKey) {
                if (typeof operand === 'object' && operand !== null) {
                    return _this.buildQueryFilter(operand, contextKey);
                }
                return contextKey + " eq " + _this.quoteString(operand);
            },
            __gt: function (operand, contextKey) {
                return contextKey + " gt " + _this.quoteString(operand);
            },
            __ge: function (operand, contextKey) {
                return contextKey + " ge " + _this.quoteString(operand);
            },
            __lt: function (operand, contextKey) {
                return contextKey + " lt " + _this.quoteString(operand);
            },
            __le: function (operand, contextKey) {
                return contextKey + " le " + _this.quoteString(operand);
            },
            __in: function (operand, contextKey) {
                var stmts = operand
                    .filter(function (op) { return !!op; })
                    .map(function (op) {
                    return contextKey + " eq " + _this.quoteString(op);
                });
                return _this.glue(stmts, 'or');
            },
            __bygroupid: function (operand) {
                return "bygroupid(" + operand + ")";
            },
            __has: function (operand) {
                return "has(" + operand + ")";
            },
            __useFilterQueryString: function (queryString) {
                // match everything inside the most exterior parentheses, including them
                var query = queryString.match(/\(.*\)/)[0];
                // get rid of the most exterior parentheses
                return query.substring(1, query.length - 1);
            }
        };
    }
    /**
     * Builds query string from provided query object.
     *
     * @param query Object containing filters and sort order for querying managed objects. Supported filters are:
     * - **__and** - Specifies conditions, e.g. {__and: [{__has: 'c8y_IsDevice'}, {'count': {__gt: 0}}]}.
     * - **__or** - Specifies alternative conditions, e.g. {__or: [{__bygroupid: 10300}, {__bygroupid: 10400}]}.
     * - **__eq** - Specified fragment must be equal to given value, e.g. {'status': 'AVAILABLE'} (no nested object required).
     * - **__lt** - Specified fragment must be less then given value, e.g. {'count': {__lt: 10}}.
     * - **__gt** - Specified fragment must be greater then given value, e.g. {'count': {__gt: 0}}.
     * - **__in** - Specified fragment must be equal to one of values in the list, e.g. {'status': {__in: ['AVAILABLE', 'UNAVAILABLE']}}.
     * - **__not** - Negates condition, e.g. {__not: {'status': 'AVAILABLE'}}.
     * - **__bygroupid** - True if filtered managed object is assigned to given group, e.g. {__bygroupid: 10300}.
     * - **__has** - Specified fragment must have a value defined, e.g. {__has: 'c8y_IsDevice'}.
     * - **__useFilterQueryString** - Gets rid of the '$filter=()… $orderby=…' parts of a query and keeps only what's between the most
     *                                exterior parentheses of the $filter.
     *                                EXAMPLE: takes a query of the form
     *                                "$filter=(name eq 'RaspPi*') $orderby=name asc"
     *                                and turns it into
     *                                "name eq 'RaspPi*'"
     *                                This is necessary for searching for smart groups, which are identified by their own query
     *                                that needs to be passed through.
     *
     *
     * The order is specified by an array of field paths and sort direction (1 for ascending, -1 for descending), e.g.:
     * - {__orderby: [{'creationTime': -1}, {'name': 1}], __filter: {...}}
     *
     * @returns {string} Returns a query string ready to be sent in request params to backend.
     *
     * **Example**
     * <pre>
     *   const query = {
     *     __filter: {
     *       'name': 'My Device*',
     *       'c8y_Availability.status': {
     *         __in: ['AVAILABLE', 'UNAVAILABLE']
     *       },
     *       'creationTime': {
     *         __lt: '2015-11-30T13:28:123Z'
     *       },
     *       'c8y_ActiveAlarmsStatus.critical': {
     *         __gt: 0
     *       },
     *       __or: [
     *         {__not: {__has: 'c8y_ActiveAlarmsStatus.major'}},
     *         {
     *           __or: [
     *             {__bygroupid: 10300},
     *             {__bygroupid: 10400}
     *           ]
     *         }
     *       ]
     *     },
     *     __orderby: [
     *       {'name': 1},
     *       {'creationTime': -1},
     *       {'c8y_ActiveAlarmsStatus.critical': -1}
     *     ]
     *   };
     *
     *   const params = {
     *     query: queriesUtil.buildQuery(query)
     *   };
     * </pre>
     */
    QueriesUtil.prototype.buildQuery = function (query) {
        var q = [];
        var filter = this.buildQueryFilter(query.__filter || query);
        var orderBy = this.buildQueryOrderby(query.__orderby);
        if (filter) {
            q.push("$filter=(" + filter + ")");
        }
        if (orderBy) {
            q.push("$orderby=" + orderBy);
        }
        return q.join(' ');
    };
    QueriesUtil.prototype.buildQueryFilter = function (queryFilter, _queryKey, _glueType) {
        var _this = this;
        var queryKey = _queryKey || null;
        var glueType = _glueType || 'and';
        var q = [];
        if (Array.isArray(queryFilter)) {
            queryFilter.forEach(function (qFilter) {
                var _q = _this.buildQueryFilter(qFilter, null, glueType);
                if (_q) {
                    q.push(_q);
                }
            });
        }
        else {
            var _q_1;
            Object.keys(queryFilter).forEach(function (k) {
                if (_this.operatorFns[k] !== undefined) {
                    _q_1 = _this.operatorFns[k](queryFilter[k], queryKey);
                    if (_q_1) {
                        q.push(_q_1);
                    }
                }
                else {
                    _q_1 = _this.operatorFns.__eq(queryFilter[k], k);
                    if (_q_1) {
                        q.push(_q_1);
                    }
                }
            });
        }
        return this.glue(q, glueType);
    };
    QueriesUtil.prototype.buildQueryOrderby = function (queryOrderbys) {
        var o = [];
        if (queryOrderbys) {
            queryOrderbys.forEach(function (q) {
                Object.keys(q).forEach(function (k) {
                    if (q[k] !== 0) {
                        o.push(k + " " + (q[k] > 0 ? 'asc' : 'desc'));
                    }
                });
            });
        }
        return o.join(',');
    };
    QueriesUtil.prototype.addAndFilter = function (query, filter) {
        return this.addFilter(query, filter, 'and');
    };
    QueriesUtil.prototype.addOrFilter = function (query, filter) {
        return this.addFilter(query, filter, 'or');
    };
    QueriesUtil.prototype.addFilter = function (query, filter, operator) {
        var _a;
        var oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;
        var newFilter = (_a = {}, _a["__" + operator] = this.skipEmptyObjects([oldFilter, filter]), _a);
        if (!query.__filter && !query.__orderby) {
            return newFilter;
        }
        query.__filter = newFilter;
        return query;
    };
    QueriesUtil.prototype.prependOrderbys = function (query, orderbys) {
        return this.addOrderbys(query, orderbys, 'prepend');
    };
    QueriesUtil.prototype.appendOrderbys = function (query, orderbys) {
        return this.addOrderbys(query, orderbys, 'append');
    };
    QueriesUtil.prototype.addOrderbys = function (query, orderbys, how) {
        var oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;
        var oldOrderbys = query.__orderby || [];
        var newOrderbys = how === 'prepend' ? orderbys.concat(oldOrderbys) : oldOrderbys.concat(orderbys);
        var newQuery = {
            __orderby: this.skipEmptyObjects(newOrderbys)
        };
        if (!this.isEmptyObject(oldFilter)) {
            newQuery.__filter = oldFilter;
        }
        return newQuery;
    };
    QueriesUtil.prototype.glue = function (stmts, type) {
        return stmts.length > 1 ? "(" + stmts.join(") " + type + " (") + ")" : stmts[0];
    };
    QueriesUtil.prototype.quoteString = function (s) {
        return typeof s === 'string' ? "'" + s + "'" : s;
    };
    QueriesUtil.prototype.skipEmptyObjects = function (objs) {
        var _this = this;
        return objs.filter(function (obj) { return !_this.isEmptyObject(obj); });
    };
    QueriesUtil.prototype.isEmptyObject = function (obj) {
        return Object.keys(obj).length === 0;
    };
    return QueriesUtil;
}());
exports.QueriesUtil = QueriesUtil;
//# sourceMappingURL=QueriesUtil.js.map