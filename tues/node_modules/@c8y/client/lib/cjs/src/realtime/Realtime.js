"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var isomorphic_cometd_1 = require("isomorphic-cometd");
var MetaChannel_1 = require("./MetaChannel");
var Realtime = /** @class */ (function () {
    /**
     * Allows to set up a realtime (websocket or long-polling) connection to the platform.
     * @param client The fetch client instance to use
     * @param url The URL to connect to
     * @param handshakeCallback A function which is called on succeeded or failed handshake
     */
    function Realtime(client, url, handshakeCallback) {
        if (url === void 0) { url = '/notification/realtime'; }
        this.client = client;
        this.url = url;
        this.cometd = new isomorphic_cometd_1.CometD();
        this.metaHandshake = function (msg) {
            if (!msg.successful) {
                throw new Error('Handshake failed');
            }
        };
        this.cometd.websocketEnabled = true;
        this.cometd.addListener(MetaChannel_1.MetaChannel.HANDSHAKE, handshakeCallback || this.metaHandshake);
    }
    /**
     * Subscribes to a realtime channel to listen for data.
     * @param channel The channel to connect to
     * @param callback A function to call when data is received
     */
    Realtime.prototype.subscribe = function (channel, callback) {
        this.checkConnection();
        return this.cometd.subscribe(channel, callback);
    };
    /**
     * Cancels the listening to a channel.
     * @param subscription The subscription object returned by subscribe()
     */
    Realtime.prototype.unsubscribe = function (subscription) {
        return this.cometd.unsubscribe(subscription);
    };
    /**
     * Returns an observable which subscribes/unsubscribes automatically.
     * @param channel The name of the channel you want to connect to.
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use rxjs `new Observable()`, `defer()` or `from()`
     * to composite an observable on your own:
     * ```typescript
     * return new Observable<any>((observer) => {
     *   const subscription = this.subscribe(channel, (msg) => {
     *     const data = {
     *       channel: msg.channel,
     *       data: msg.data.data,
     *       id: msg.id,
     *       realtimeAction: msg.data.realtimeAction,
     *     };
     *     return observer.next(data);
     *   });
     *   return () => this.unsubscribe(subscription);
     * });
     * ```
     */
    Realtime.prototype.observable = function (channel) {
        var _this = this;
        return new rxjs_1.Observable(function (observer) {
            var subscription = _this.subscribe(channel, function (msg) {
                var data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                return observer.next(data);
            });
            return function () { return _this.unsubscribe(subscription); };
        });
    };
    /**
     * Disconnects the current connection.
     */
    Realtime.prototype.disconnect = function () {
        this.cometd.disconnect();
    };
    Realtime.prototype.checkConnection = function () {
        var _a = this, cometd = _a.cometd, client = _a.client, url = _a.url;
        if (cometd.isDisconnected()) {
            var headers = client.getFetchOptions().headers;
            var config = {
                url: client.getUrl(url),
                requestHeaders: headers
            };
            cometd.configure(config);
            this.handshake(client.getCometdHandshake());
        }
    };
    Realtime.prototype.handshake = function (config) {
        this.cometd.handshake(config);
    };
    return Realtime;
}());
exports.Realtime = Realtime;
//# sourceMappingURL=Realtime.js.map