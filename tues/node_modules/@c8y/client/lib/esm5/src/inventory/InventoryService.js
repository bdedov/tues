"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
var InventoryBinaryService_1 = require("./InventoryBinaryService");
/**
 * Possible types of a child.
 */
var ChildType;
(function (ChildType) {
    ChildType["ASSETS"] = "childAssets";
    ChildType["DEVICES"] = "childDevices";
    ChildType["ADDITIONS"] = "childAdditions";
})(ChildType = exports.ChildType || (exports.ChildType = {}));
/**
 * This class allows for managing managed objects and different child types, see [[ChildType]].
 */
var InventoryService = /** @class */ (function (_super) {
    __extends(InventoryService, _super);
    function InventoryService(client, realtime) {
        var _this = _super.call(this, client, realtime) || this;
        _this.baseUrl = 'inventory';
        _this.listUrl = 'managedObjects';
        _this.propertyName = 'managedObjects';
        _this.channel = '/managedobjects/*';
        _this.inventoriesQueryParamName = 'query';
        _this.devicesQueryParamName = 'q';
        _this.queriesUtil = new core_1.QueriesUtil();
        _this.binary = new InventoryBinaryService_1.InventoryBinaryService(client);
        return _this;
    }
    /**
     * Gets the details of managed object
     *
     * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.
     * @param {object} filter Filter object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const managedObjId: number = 1;
     *    const filter = { withChildren: false };
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.detail(managedObjId, filter);
     *   })();
     * ```
     */
    InventoryService.prototype.detail = function (managedObjectOrId, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, managedObjectOrId, filter)];
            });
        });
    };
    /**
     * Gets the details of managed object as observable
     *
     * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.
     * @param {IObservableOptions} options The observable options.
     *
     * @returns Data wrapped as Observable
     *
     * **Example**
     * ```typescript
     *
     *   const managedObjId: number = 1;
     *
     *   const detail$ = inventoryService.detail$(managedObjId);
     *   detail$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    InventoryService.prototype.detail$ = function (entityOrId, options) {
        return _super.prototype.detail$.call(this, entityOrId, options);
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = inventoryService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    InventoryService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    /**
     * Creates a new managed object.
     *
     * @param {Partial<IManagedObject>} managedObject
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const partialManagedObj: Partial<IManagedObject> = {
     *    customFragment: 'yourData'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await inventoryService.create(partialManagedObj);
     *  })();
     * ```
     */
    InventoryService.prototype.create = function (managedObject) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.create.call(this, managedObject)];
            });
        });
    };
    /**
     * Updates managed object data.
     *
     * @param {Partial<IManagedObject>} managedObject Managed object is partially updatable.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const partialUpdateObject: Partial<IManagedObject> = {
     *    customFragment: 'Changed data',
     *    name: 'Name'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await inventoryService.update(partialUpdateObject);
     *  })();
     * ```
     */
    InventoryService.prototype.update = function (managedObject) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, managedObject)];
            });
        });
    };
    /**
     * Gets the list of managed objects filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying managed objects.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await inventoryService.list(filter);
     *   })();
     * ```
     */
    InventoryService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets the list of all managed objects filtered and sorted by given query.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying managed objects.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *  const query = {
     *      name: 'MY-NAM*'
     *  }
     *
     *   (async () => {
     *     const {data, res, paging} = await inventoryService.listQuery(query, filter);
     *   })();
     * ```
     */
    InventoryService.prototype.listQuery = function (query, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                filter[this.inventoriesQueryParamName] = this.queriesUtil.buildQuery(query);
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets the list of all devices filtered and sorted by given query.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying devices.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *  const query = {
     *      name: 'MY-NAM*'
     *  }
     *
     *   (async () => {
     *     const {data, res, paging} = await inventoryService.listQueryDevices(query, filter);
     *   })();
     * ```
     */
    InventoryService.prototype.listQueryDevices = function (query, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                filter[this.devicesQueryParamName] = this.queriesUtil.buildQuery(query);
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Removes managed object with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.
     * @param {object} params Additional query params.
     *
     * **Example**
     * ```typescript
     *
     *   const managedObjectId: number = 1;
     *   const params: any = {
     *     cascade: true
     *   }
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.delete(managedObjectId, params);
     *   })();
     * ```
     */
    InventoryService.prototype.delete = function (managedObjectOrId, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, managedObjectOrId, params)];
            });
        });
    };
    /**
     * Gets a list of child additions from a given managed object (parent)
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {IdReference} parentReference
     * @param {object} filter
     *
     * **Example**
     * ```typescript
     *    const parentReferenceId: IdReference = 1;
     *
     *    const filter: object = {
     *      pageSize: 100,
     *      withTotalPages: true
     *    };
     *
     *    (async () => {
     *      const {data, res, paging} = await inventoryService.childAdditionsList(parentReferenceId, filter);
     *    })();
     * ```
     */
    InventoryService.prototype.childAdditionsList = function (parentReference, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.listChildren(ChildType.ADDITIONS, parentReference, filter)];
            });
        });
    };
    /**
     * Creates a new managed object as child addition to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {Partial<IManagedObject>} managedObject
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const mOAsChildAddition: Partial<IManagedObject> = {
     *      name: 'Child addition MO',
     *      type: 'new type',
     *      ...
     *    };
     *
     *    // This is the identifier of the managed object which should be the parent of
     *    // mOAsChildAddition, see above.
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAdditionsCreate = function (managedObject, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createChild(ChildType.ADDITIONS, managedObject, parentReference)];
            });
        });
    };
    /**
     * Adds an existing managed object as child addition to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAdditionsCreate(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAdditionsAdd = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.addChild(ChildType.ADDITIONS, childReference, parentReference)];
            });
        });
    };
    /**
     * Removes an existing managed object as child addition from another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAdditionsRemove(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAdditionsRemove = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.removeChild(ChildType.ADDITIONS, childReference, parentReference)];
            });
        });
    };
    /**
     * Gets a list of child assets from a given managed object (parent)
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {IdReference} parentReference
     * @param {object} filter
     *
     * **Example**
     * ```typescript
     *
     *    const parentReferenceId: IdReference = 1;
     *
     *    const filter: object = {
     *      pageSize: 100,
     *      withTotalPages: true
     *    };
     *
     *    (async () => {
     *      const {data, res, paging} = await inventoryService.childAssetsList(parentReferenceId, filter);
     *    })();
     * ```
     */
    InventoryService.prototype.childAssetsList = function (parentReference, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.listChildren(ChildType.ASSETS, parentReference, filter)];
            });
        });
    };
    /**
     * Creates a new managed object as child asset to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {Partial<IManagedObject>} managedObject
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const mOAsChildAsset: Partial<IManagedObject> = {
     *      name: 'Child asset MO',
     *      type: 'new type',
     *      ...
     *    };
     *
     *    // This is the identifier of the managed object which should be the parent of
     *    // mOAsChildAsset, see above.
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAssetsCreate = function (managedObject, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createChild(ChildType.ASSETS, managedObject, parentReference)];
            });
        });
    };
    /**
     * Adds an existing managed object as child asset to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAssetsAdd(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAssetsAdd = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.addChild(ChildType.ASSETS, childReference, parentReference)];
            });
        });
    };
    /**
     * Removes an existing managed object as child asset from another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childAssetsRemove(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childAssetsRemove = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.removeChild(ChildType.ASSETS, childReference, parentReference)];
            });
        });
    };
    /**
     * Gets a list of child devices from a given managed object (parent)
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {IdReference} parentReference
     * @param {object} filter
     *
     * **Example**
     * ```typescript
     *
     *    const parentReferenceId: IdReference = 1;
     *
     *    const filter: object = {
     *      pageSize: 100,
     *      withTotalPages: true
     *    };
     *
     *    (async () => {
     *      const {data, res, paging} = await inventoryService.childDevicesList(parentReferenceId, filter);
     *    })();
     * ```
     */
    InventoryService.prototype.childDevicesList = function (parentReference, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.listChildren(ChildType.DEVICES, parentReference, filter)];
            });
        });
    };
    /**
     * Creates a new managed object as child device to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {Partial<IManagedObject>} managedObject
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const mOAsChildDevice: Partial<IManagedObject> = {
     *      name: 'Child device MO',
     *      type: 'new type',
     *      ...
     *    };
     *
     *    // This is the identifier of the managed object which should be the parent of
     *    // mOAsChildDevice, see above.
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childDevicesCreate(mOAsChildDevice, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childDevicesCreate = function (managedObject, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createChild(ChildType.DEVICES, managedObject, parentReference)];
            });
        });
    };
    /**
     * Adds an existing managed object as child device to another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childDevicesAdd(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childDevicesAdd = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.addChild(ChildType.DEVICES, childReference, parentReference)];
            });
        });
    };
    /**
     * Removes an existing managed object as child device from another managed object (parent)
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {IdReference} childReference
     * @param {IdReference} parentReference
     *
     * **Example**
     * ```typescript
     *
     *    const childRef: number = 2;
     *    const parentReferenceId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await inventoryService.childDevicesRemove(childRef, parentReferenceId);
     *    })();
     * ```
     */
    InventoryService.prototype.childDevicesRemove = function (childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.removeChild(ChildType.DEVICES, childReference, parentReference)];
            });
        });
    };
    InventoryService.prototype.onBeforeUpdate = function (objWithId) {
        delete objWithId.lastUpdated;
        return objWithId;
    };
    InventoryService.prototype.onBeforeCreate = function (managedObject) {
        delete managedObject.id;
        delete managedObject.lastUpdated;
        return managedObject;
    };
    InventoryService.prototype.getChildrenUrl = function (type, parentReference) {
        return this.getDetailUrl(parentReference) + "/" + type;
    };
    InventoryService.prototype.getChildUrl = function (type, childReference, parentReference) {
        var typeofChildReference = typeof childReference;
        var childId = this.getIdString(childReference);
        return this.getChildrenUrl(type, parentReference) + "/" + childId;
    };
    InventoryService.prototype.listChildren = function (type, parentReference, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, url, res, json, data, paging;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { 'content-type': 'application/json' };
                        url = this.getChildrenUrl(type, parentReference);
                        return [4 /*yield*/, this.fetch(url, { headers: headers, params: filter })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        data = json.references.map(function (ref) { return ref.managedObject; });
                        paging = this.getPaging(json, filter);
                        paging.list = function (pagingFilter) { return _this.listChildren(type, parentReference, pagingFilter); };
                        return [2 /*return*/, { res: res, data: data, paging: paging }];
                }
            });
        });
    };
    InventoryService.prototype.createChild = function (type, managedObject, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getChildrenUrl(type, parentReference);
                        method = 'POST';
                        body = JSON.stringify(this.onBeforeCreate(managedObject));
                        headers = { 'content-type': this.mimeType('managedObject'), accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    InventoryService.prototype.addChild = function (type, childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, childId, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getChildrenUrl(type, parentReference);
                        method = 'POST';
                        childId = this.getIdString(childReference);
                        body = JSON.stringify({ managedObject: { id: String(childId) } });
                        headers = {
                            accept: 'application/json',
                            'content-type': this.mimeType('managedObjectReference')
                        };
                        return [4 /*yield*/, this.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        data = data.managedObject;
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    InventoryService.prototype.removeChild = function (type, childReference, parentReference) {
        return __awaiter(this, void 0, void 0, function () {
            var childId, url, method, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        childId = this.getIdString(childReference);
                        url = this.getChildrenUrl(type, parentReference) + "/" + childId;
                        method = 'DELETE';
                        headers = { accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, { method: method, headers: headers })];
                    case 1:
                        res = _a.sent();
                        data = null;
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    return InventoryService;
}(core_1.Service));
exports.InventoryService = InventoryService;
//# sourceMappingURL=InventoryService.js.map