"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var form_data_1 = __importDefault(require("form-data"));
var core_1 = require("../core");
var InventoryBinaryService = /** @class */ (function (_super) {
    __extends(InventoryBinaryService, _super);
    function InventoryBinaryService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseUrl = 'inventory';
        _this.listUrl = 'binaries';
        _this.propertyName = 'managedObjects';
        return _this;
    }
    /**
     * Uploads a file and creates a managed object with its metadata.
     * @param file A file to be uploaded.
     * @param managedObject An object containing metadata about the file.
     * Note that you can specify `fileType` and `fileName` in case `file` does not define them
     * but these two properties will be removed from `managedObject` before saving.
     */
    InventoryBinaryService.prototype.create = function (file, managedObject) {
        if (managedObject === void 0) { managedObject = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var method, url, body, fileName, fileType, bodyHeaders, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'POST';
                        url = this.listUrl;
                        body = new form_data_1.default();
                        if (managedObject.fileName) {
                            fileName = managedObject.fileName;
                            delete managedObject.fileName;
                        }
                        if (managedObject.fileType) {
                            fileType = managedObject.fileType;
                            delete managedObject.fileType;
                        }
                        if (!fileName) {
                            fileName = 'bin';
                        }
                        if (typeof (File) !== 'undefined' && file instanceof File) {
                            fileName = file.name;
                            fileType = file.type;
                        }
                        if (!managedObject.name) {
                            managedObject.name = fileName;
                        }
                        if (!managedObject.type) {
                            managedObject.type = fileType || 'c8y_upload';
                        }
                        body.append('file', file, fileName);
                        body.append('object', JSON.stringify(managedObject));
                        if (typeof body.getHeaders === 'function') {
                            bodyHeaders = body.getHeaders();
                        }
                        headers = Object.assign({
                            accept: 'application/json'
                        }, bodyHeaders);
                        return [4 /*yield*/, this.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    InventoryBinaryService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as [[ObservableList]]
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = InventoryBinaryService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * @deprecated This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    InventoryBinaryService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    InventoryBinaryService.prototype.delete = function (managedObjectOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, managedObjectOrId)];
            });
        });
    };
    InventoryBinaryService.prototype.download = function (managedObjectOrId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getDetailUrl(managedObjectOrId);
                        return [4 /*yield*/, this.fetch(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets binary managed object's id from its download or self URL.
     *
     * @param {string} url URL string.
     *
     * @returns {number} Binary managed object's id.
     *
     * **Example**
     * ```typescript
     *
     *   const id = InventoryBinaryService.getIdFromUrl('http://mytenant.cumulocity.com/inventory/binaries/12345');
     * ```
     */
    InventoryBinaryService.prototype.getIdFromUrl = function (url) {
        var regexp = new RegExp('\\/inventory\\/binaries\\/(\\d+)|\\/inventory\\/managedObjects\\/(\\d+)');
        var matches = url.match(regexp);
        return matches && (matches[1] || matches[2]);
    };
    return InventoryBinaryService;
}(core_1.Service));
exports.InventoryBinaryService = InventoryBinaryService;
//# sourceMappingURL=InventoryBinaryService.js.map