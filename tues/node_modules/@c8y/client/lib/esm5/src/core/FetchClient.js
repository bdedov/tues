"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cross_fetch_1 = __importDefault(require("cross-fetch"));
var auths = new WeakMap(); // tslint:disable-line
var FetchClient = /** @class */ (function () {
    function FetchClient(authOrBaseUrl, baseUrl) {
        this.baseUrl = baseUrl;
        this.tenant = '';
        this.defaultHeaders = {};
        if (typeof authOrBaseUrl === 'string') {
            baseUrl = authOrBaseUrl;
        }
        else {
            this.setAuth(authOrBaseUrl);
        }
        this.baseUrl = this.resolveServerUrl(baseUrl);
    }
    FetchClient.prototype.setAuth = function (auth) {
        auths.set(this, auth);
    };
    FetchClient.prototype.fetch = function (url, init) {
        return __awaiter(this, void 0, void 0, function () {
            var fetchFn, fullUrl, options;
            return __generator(this, function (_a) {
                fetchFn = cross_fetch_1.default;
                try {
                    fetchFn = window.fetch || fetchFn;
                }
                catch (e) { /* do nothing */ }
                fullUrl = this.getUrl(url, init);
                options = this.getFetchOptions(init);
                return [2 /*return*/, fetchFn(fullUrl, options)];
            });
        });
    };
    FetchClient.prototype.getUrl = function (url, options) {
        if (url === void 0) { url = ''; }
        var params = options && options.params;
        var paramPart = '';
        if (params && Object.keys(params).length) {
            paramPart = Object.keys(params)
                .map(function (k) {
                var vals = params[k];
                var encodedKey = encodeURIComponent(k);
                if (!Array.isArray(vals)) {
                    vals = [vals];
                }
                return vals.map(function (v) { return encodedKey + "=" + encodeURIComponent(v); }).join('&');
            })
                .join('&');
            paramPart = "?" + paramPart;
        }
        var baseUrl = this.baseUrl.replace(/\/+$/, '').replace(/^\/+/, '');
        var partialUrl = url.replace(/\/+$/, '').replace(/^\/+/, '');
        return baseUrl + "/" + partialUrl + paramPart;
    };
    FetchClient.prototype.getFetchOptions = function (options) {
        if (options === void 0) { options = {}; }
        var auth = auths.get(this);
        options.headers = Object.assign({}, this.defaultHeaders, options.headers, { UseXBasic: true });
        delete options.params;
        options = auth ? auth.getFetchOptions(options) : options;
        return options;
    };
    FetchClient.prototype.getCometdHandshake = function (config) {
        if (config === void 0) { config = {}; }
        var auth = auths.get(this);
        return auth ? auth.getCometdHandshake(config) : config;
    };
    FetchClient.prototype.resolveServerUrl = function (baseUrl) {
        if (baseUrl === void 0) { baseUrl = ''; }
        if (baseUrl && baseUrl.startsWith('http')) {
            return baseUrl.replace(/\/+$/, '');
        }
        try {
            var location_1 = window.location;
            return location_1.protocol + "//" + location_1.host + "/" + baseUrl.replace(/\/+$/, '');
        }
        catch (ex) {
            throw Error('Your environment does not support relative URLs. Please provide a base URL.');
        }
    };
    return FetchClient;
}());
exports.FetchClient = FetchClient;
//# sourceMappingURL=FetchClient.js.map