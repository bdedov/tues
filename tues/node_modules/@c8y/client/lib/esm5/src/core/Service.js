"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Paging_1 = require("./Paging");
var ObservableList_1 = require("./ObservableList");
var Service = /** @class */ (function () {
    function Service(client, realtime) {
        var _this = this;
        this.client = client;
        this.realtime = realtime;
        this.cache = new Map();
        var methodsToHide = ['list', 'create', 'update', 'detail', 'delete', 'detail$', 'list$'];
        var prototype = Object.getPrototypeOf(this);
        methodsToHide.forEach(function (method) {
            if (!prototype.hasOwnProperty(method)) {
                Object.defineProperty(_this, method, {
                    get: function () {
                        return undefined;
                    }
                });
            }
        });
    }
    Service.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, url, res, json, data, paging;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { accept: 'application/json' };
                        url = this.listUrl;
                        return [4 /*yield*/, this.fetch(url, this.changeFetchOptions({ headers: headers, params: filter }, url))];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        data = this.propertyName ? json[this.propertyName] : json;
                        paging = this.getPaging(json, filter);
                        return [2 /*return*/, { res: res, data: data, paging: paging }];
                }
            });
        });
    };
    Service.prototype.list$ = function (filter, options) {
        var _this = this;
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        var source = filter.source;
        return new ObservableList_1.ObservableList(function () { return _this.list(filter); }, this.getRealtime(source), options, filter).source;
    };
    Service.prototype.detail = function (entityOrId, filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, url, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { accept: 'application/json' };
                        url = this.getDetailUrl(entityOrId);
                        return [4 /*yield*/, this.fetch(url, this.changeFetchOptions({ headers: headers, params: __assign({}, filter) }, url))];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    Service.prototype.detail$ = function (entityOrId, options) {
        var _this = this;
        if (options === void 0) { options = { pagingStrategy: ObservableList_1.PagingStrategy.NONE }; }
        var obsList$ = new ObservableList_1.ObservableList(function () { return _this.detail(entityOrId); }, this.getRealtime(entityOrId), options);
        return obsList$.composeDetail().source;
    };
    Service.prototype.create = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.listUrl;
                        method = 'POST';
                        body = JSON.stringify(this.onBeforeCreate(entity));
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, this.changeFetchOptions({ method: method, body: body, headers: headers }, url))];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    Service.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getDetailUrl(entity);
                        method = 'PUT';
                        body = JSON.stringify(this.onBeforeUpdate(entity));
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, this.changeFetchOptions({ method: method, body: body, headers: headers }, url))];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    Service.prototype.delete = function (entityOrId, params) {
        return __awaiter(this, void 0, void 0, function () {
            var method, url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = 'DELETE';
                        url = this.getDetailUrl(entityOrId);
                        return [4 /*yield*/, this.fetch(url, this.changeFetchOptions({ method: method, params: params }, url))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, { res: res, data: null }];
                }
            });
        });
    };
    Service.prototype.onBeforeCreate = function (obj) {
        delete obj.id;
        return obj;
    };
    Service.prototype.onBeforeUpdate = function (objWithId) {
        return objWithId;
    };
    Service.prototype.changeFetchOptions = function (options, url) {
        return options;
    };
    Service.prototype.getUrl = function (url) {
        if (url === void 0) { url = ''; }
        var baseUrl = this.baseUrl.replace(/\/+$/, '');
        var partialUrl = url.replace(/^\/+/, '');
        return baseUrl + "/" + partialUrl;
    };
    Service.prototype.getDetailUrl = function (entityOrId) {
        var id;
        if (typeof entityOrId === 'object' && entityOrId.id) {
            id = entityOrId.id;
        }
        else {
            id = entityOrId;
        }
        return this.listUrl + "/" + id;
    };
    Service.prototype.fetch = function (url, init) {
        return __awaiter(this, void 0, void 0, function () {
            var fullUrl, res, data, ex_1, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fullUrl = this.getUrl(url);
                        return [4 /*yield*/, this.client.fetch(fullUrl, init)];
                    case 1:
                        res = _a.sent();
                        if (!(res.status >= 400)) return [3 /*break*/, 10];
                        data = null;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 9]);
                        return [4 /*yield*/, res.json()];
                    case 3:
                        data = _a.sent();
                        return [3 /*break*/, 9];
                    case 4:
                        ex_1 = _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, res.text()];
                    case 6:
                        data = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8: return [3 /*break*/, 9];
                    case 9: throw { res: res, data: data };
                    case 10: return [2 /*return*/, res];
                }
            });
        });
    };
    Service.prototype.mimeType = function (type) {
        return "application/vnd.com.nsn.cumulocity." + type + "+json";
    };
    Service.prototype.getIdString = function (reference) {
        var id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    };
    Service.prototype.getChannel = function (entityOrId) {
        return entityOrId ? this.channel.replace('*', this.getIdString(entityOrId)) : this.channel;
    };
    Service.prototype.getRealtime = function (entityOrId) {
        if (this.realtime) {
            return this.realtime.observable(this.getChannel(entityOrId));
        }
    };
    Service.prototype.getPaging = function (json, filter) {
        if (json.statistics) {
            var statistics = __assign({}, json.statistics, { nextPage: this.getCurrentPageFromLink(json.next), prevPage: this.getCurrentPageFromLink(json.prev) });
            return new Paging_1.Paging(this, statistics, filter);
        }
        return null;
    };
    Service.prototype.getCurrentPageFromLink = function (link) {
        if (link === void 0) { link = ''; }
        var matches = link.match(/currentPage=(-{0,1}\d+)/);
        return matches && parseInt(matches[1], 10);
    };
    return Service;
}());
exports.Service = Service;
//# sourceMappingURL=Service.js.map