"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var realtime_1 = require("./realtime");
var services_1 = require("./services");
var Client = /** @class */ (function () {
    /**
     * Initializes a new Client, which allows to request data from the API. Differently
     * to Client.authenticate([...]) it needs a tenant given and does not verify if the
     * login is correct.
     *
     * **Example**
     * ```typescript
     *
     * const auth = new BasicAuth({
     *   user: 'youruser',
     *   password: 'yourpassword',
     *   tenant: 'acme'
     * }); // use CookieAuth() if your platform uses oauth (only in browser!)
     *
     * const baseUrl = 'https://acme.cumulocity.com';
     * const client = new Client(auth, baseUrl);
     * (async () => {
     *   const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });
     * })();
     * ```
     *
     * @param auth The Authentication strategy to use (e.g. new BasicAuth())
     * @param baseUrl The URL to request (optional in browser, mandatory in node)
     */
    function Client(auth, baseUrl) {
        var client = new services_1.FetchClient(auth, baseUrl);
        this.realtime = new realtime_1.Realtime(client);
        this.alarm = new services_1.AlarmService(client, this.realtime);
        this.application = new services_1.ApplicationService(client, this.realtime);
        this.audit = new services_1.AuditService(client);
        this.core = client;
        this.deviceRegistration = new services_1.DeviceRegistrationService(client);
        this.deviceRegistrationBulk = new services_1.DeviceRegistrationBulkService(client);
        this.event = new services_1.EventService(client, this.realtime);
        this.inventory = new services_1.InventoryService(client, this.realtime);
        this.inventoryBinary = new services_1.InventoryBinaryService(client);
        this.inventoryRole = new services_1.InventoryRoleService(client);
        this.measurement = new services_1.MeasurementService(client, this.realtime);
        this.operation = new services_1.OperationService(client);
        this.operationBulk = new services_1.OperationBulkService(client);
        this.options = {
            security: new services_1.TenantSecurityOptionsService(client),
            system: new services_1.SystemOptionsService(client),
            login: new services_1.TenantLoginOptionsService(client),
            tenant: new services_1.TenantOptionsService(client),
        };
        this.role = new services_1.InventoryRoleService(client);
        this.tenant = new services_1.TenantService(client);
        this.user = new services_1.UserService(client);
        this.userGroup = new services_1.UserGroupService(client);
        this.userRole = new services_1.UserRoleService(client);
        this.identity = new services_1.IdentityService(client);
    }
    /**
     * Authenticates the given user. Determines the tenant by itself via a call to tenant/currentTenant.
     *
     * **Example**
     * ```typescript
     *
     * let client: Client;
     * (async () => {
     *  client = await Client.authenticate({
     *    user: 'testuser',
     *    password: 'password1337!'
     *  }, 'https://acme.cumulocity.com');
     *
     *  //you have access to the client api now
     *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });
     * })();
     * ```
     */
    Client.authenticate = function (credentials, baseUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, clientCore, res, name, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth = new services_1.BasicAuth(credentials);
                        clientCore = new services_1.FetchClient(auth, baseUrl);
                        return [4 /*yield*/, clientCore.fetch('/tenant/currentTenant', { method: 'GET' })];
                    case 1:
                        res = _a.sent();
                        if (res.status !== 200) {
                            throw { res: res };
                        }
                        return [4 /*yield*/, res.json()];
                    case 2:
                        name = (_a.sent()).name;
                        client = new Client(auth, baseUrl);
                        client.core.tenant = name;
                        return [2 /*return*/, client];
                }
            });
        });
    };
    /**
     * Allows to use http to register a device on the platform.
     *
     * **Deprecated** Please use MQTT to bootstrap a device.
     */
    Client.deviceBootstrap = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var deviceId, timeout, baseUrl, basicAuthToken, expire, clientCore, deviceRegistration, client, data, username, password, tenantId, auth, error_1, retry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceId = options.deviceId, timeout = options.timeout, baseUrl = options.baseUrl, basicAuthToken = options.basicAuthToken;
                        expire = options.expire;
                        if (timeout && !expire) {
                            expire = Date.now() + timeout;
                        }
                        clientCore = new services_1.FetchClient(undefined, baseUrl);
                        deviceRegistration = new services_1.DeviceRegistrationService(clientCore);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deviceRegistration.bootstrap(deviceId, { basicAuthToken: basicAuthToken })];
                    case 2:
                        data = (_a.sent()).data;
                        username = data.username, password = data.password, tenantId = data.tenantId;
                        auth = new services_1.BasicAuth({ user: username, tenant: tenantId, password: password });
                        client = new Client(auth, baseUrl);
                        client.core.tenant = tenantId;
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        retry = (!expire || Date.now() < expire) && error_1.res.status === 404;
                        if (retry) {
                            return [2 /*return*/, Client.deviceBootstrap(Object.assign({ expire: expire }, options))];
                        }
                        else {
                            throw error_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, client];
                }
            });
        });
    };
    /**
     * Retrieves microservice credentials for the subscribed tenants
     * using provided bootstrap credentials
     *
     * **Example**
     * ```typescript
     *
     * (async () => {
     *  const subscriptions = await Client.getMicroserviceSubscriptions({
     *    tenant: process.env.C8Y_BOOTSTRAP_TENANT,
     *    user: process.env.C8Y_BOOTSTRAP_USER,
     *    password: process.env.C8Y_BOOTSTRAP_PASSWORD
     *  }, process.env.C8Y_BASEURL);
     *
     *  const clients = subscriptions.map(subscription => new Client(new BasicAuth(subscription), process.env.C8Y_BASEURL));
     *  // you have access to the client api now
     *  const promiseArray = clients.map(client => client.options.tenant.detail({
     *    category: process.env.APPLICATION_KEY,
     *    key: 'someSetting'
     *  }));
     * })();
     * ```
     */
    Client.getMicroserviceSubscriptions = function (bootstrapCredentials, baseUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var microserviceSubscriptionsEndpoint, clientCore, res, users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        microserviceSubscriptionsEndpoint = '/application/currentApplication/subscriptions';
                        clientCore = new services_1.FetchClient(new services_1.BasicAuth(bootstrapCredentials), baseUrl);
                        return [4 /*yield*/, clientCore.fetch(microserviceSubscriptionsEndpoint)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        users = (_a.sent()).users;
                        return [2 /*return*/, users.map(function (_a) {
                                var tenant = _a.tenant, name = _a.name, password = _a.password;
                                return {
                                    tenant: tenant,
                                    user: name,
                                    password: password
                                };
                            })];
                }
            });
        });
    };
    /**
     * Allows to change the current Authentication
     * @param auth The new Authentication information.
     */
    Client.prototype.setAuth = function (auth) {
        this.core.setAuth(auth);
        this.realtime.disconnect();
    };
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=Client.js.map