"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var form_data_1 = __importDefault(require("form-data"));
/**
 * This class allows for bulk registering devices.
 */
var DeviceRegistrationBulkService = /** @class */ (function () {
    /**
     * Instantiate class and assign client
     * @param {IFetchClient} client
     */
    function DeviceRegistrationBulkService(client) {
        this.client = client;
    }
    /**
     * A new device registration as bulk.
     *
     * @param {Stream | Buffer} csv
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const csvString = `
     *  ID,CREDENTIALS,TENANT,TYPE,NAME,ICCID,IDTYPE,PATH,SHELL
     *  e2eDeviceRegistrationId,e2epassword123!,e2edocker,c8y_e2eDevice,e2eDevice,123456789,89456,e2eDeviceGroup,1
     *  900001,e2epassword123!,e2edocker,c8y_e2eDevice1,e2eDevice1,123456789,89456,e2eDeviceGroup,1
     *  900002,e2epassword123!,e2edocker,c8y_e2eDevice2,e2eDevice2,123456789,89456,e2eDeviceGroup,1`.trim();
     *
     *  const csvBuffer = Buffer.from(csvString):
     *
     *  (async () => {
     *    const {data, res} = await deviceRegistrationBulkService.create(csvBuffer);
     *  })();
     * ```
     */
    DeviceRegistrationBulkService.prototype.create = function (csv) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, fileName, bodyHeaders, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/devicecontrol/bulkNewDeviceRequests';
                        method = 'POST';
                        body = new form_data_1.default();
                        fileName = 'bulk-registration.csv';
                        if (typeof (File) !== 'undefined' && csv instanceof File) {
                            fileName = csv.name;
                        }
                        body.append('file', csv, fileName);
                        if (typeof body.getHeaders === 'function') {
                            bodyHeaders = body.getHeaders();
                        }
                        headers = Object.assign({
                            accept: 'application/json'
                        }, bodyHeaders);
                        return [4 /*yield*/, this.client.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    return DeviceRegistrationBulkService;
}());
exports.DeviceRegistrationBulkService = DeviceRegistrationBulkService;
//# sourceMappingURL=DeviceRegistrationBulkService.js.map