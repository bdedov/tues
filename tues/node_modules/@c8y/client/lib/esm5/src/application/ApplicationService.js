"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
var tenant_1 = require("../tenant");
var user_1 = require("../user");
var ApplicationBinaryService_1 = require("./ApplicationBinaryService");
var ApplicationType_1 = require("./ApplicationType");
var ApplicationService = /** @class */ (function (_super) {
    __extends(ApplicationService, _super);
    function ApplicationService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseUrl = 'application';
        _this.listUrl = 'applications';
        _this.propertyName = 'applications';
        _this.channel = '/applications/*';
        return _this;
    }
    /**
     * Creates a new application.
     *
     * @param {IIdentified} entity Application object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const newApp = {
     *    name: 'New application',
     *    type: 'EXTERNAL',
     *    key: 'new-app'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await applicationService.create(newApp);
     *  })();
     * ```
     */
    ApplicationService.prototype.create = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.create.call(this, entity)];
            });
        });
    };
    ApplicationService.prototype.clone = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            var url, method, body, headers, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.getDetailUrl(entity) + "/clone";
                        method = 'POST';
                        body = '';
                        headers = { 'content-type': 'application/json', accept: 'application/json' };
                        return [4 /*yield*/, this.fetch(url, { method: method, body: body, headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    /**
     * Gets the list of existing applications filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying applications.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await applicationService.list(filter);
     *   })();
     * ```
     */
    ApplicationService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as [[ObservableList]]
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = alarmService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    ApplicationService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    /**
     * Gets the details of selected application.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const applicationId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await applicationService.detail(applicationId);
     *   })();
     * ```
     */
    ApplicationService.prototype.detail = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, entityOrId)];
            });
        });
    };
    /**
     * Updates existing application.
     * Make sure that you specifiy the application id within the update object.
     *
     * @param {IIdentified} entity Application object.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const updateApp = {
     *    id: 38
     *    name: 'Updated application'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await applicationService.update(updateApp);
     *  })();
     * ```
     */
    ApplicationService.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, entity)];
            });
        });
    };
    /**
     * Removes an application with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId entity or id of the application.
     *
     * **Example**
     * ```typescript
     *
     *  const removeApp: object = {
     *     id: 38
     *   };
     *
     *   (async () => {
     *     const {data, res} = await applicationService.delete(removeApp);
     *     // data will be null
     *   })();
     * ```
     */
    ApplicationService.prototype.delete = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, entityOrId)];
            });
        });
    };
    ApplicationService.prototype.listByName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, url, res, json, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = { 'content-type': 'application/json' };
                        url = "applicationsByName/" + encodeURIComponent(name);
                        return [4 /*yield*/, this.fetch(url, { headers: headers })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        data = json[this.propertyName];
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    ApplicationService.prototype.listByTenant = function (tenantOrName, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, tenantService, tenantName, _a, _b, url, res, json, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        headers = { 'content-type': 'application/json' };
                        tenantService = new tenant_1.TenantService(this.client);
                        _a = this.getIdString;
                        _b = tenantOrName;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, tenantService.current()];
                    case 1:
                        _b = (_c.sent()).data.name;
                        _c.label = 2;
                    case 2:
                        tenantName = _a.apply(this, [_b]);
                        url = "applicationsByTenant/" + encodeURIComponent(tenantName);
                        return [4 /*yield*/, this.fetch(url, { headers: headers, params: params })];
                    case 3:
                        res = _c.sent();
                        return [4 /*yield*/, res.json()];
                    case 4:
                        json = _c.sent();
                        data = json[this.propertyName];
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    ApplicationService.prototype.listByOwner = function (tenantOrName, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, tenantService, tenantName, _a, _b, url, res, json, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        headers = { 'content-type': 'application/json' };
                        tenantService = new tenant_1.TenantService(this.client);
                        _a = this.getIdString;
                        _b = tenantOrName;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, tenantService.current()];
                    case 1:
                        _b = (_c.sent()).data.name;
                        _c.label = 2;
                    case 2:
                        tenantName = _a.apply(this, [_b]);
                        url = "applicationsByOwner/" + encodeURIComponent(tenantName);
                        return [4 /*yield*/, this.fetch(url, { headers: headers, params: params })];
                    case 3:
                        res = _c.sent();
                        return [4 /*yield*/, res.json()];
                    case 4:
                        json = _c.sent();
                        data = json[this.propertyName];
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    ApplicationService.prototype.listByUser = function (userOrId, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, userService, userId, _a, _b, url, res, json, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        headers = { 'content-type': 'application/json' };
                        userService = new user_1.UserService(this.client);
                        _a = this.getIdString;
                        _b = userOrId;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, userService.current()];
                    case 1:
                        _b = (_c.sent()).data;
                        _c.label = 2;
                    case 2:
                        userId = _a.apply(this, [_b]);
                        url = "applicationsByUser/" + encodeURIComponent(userId);
                        return [4 /*yield*/, this.fetch(url, { headers: headers, params: params })];
                    case 3:
                        res = _c.sent();
                        return [4 /*yield*/, res.json()];
                    case 4:
                        json = _c.sent();
                        data = json[this.propertyName];
                        return [2 /*return*/, { res: res, data: data }];
                }
            });
        });
    };
    ApplicationService.prototype.binary = function (application) {
        return new ApplicationBinaryService_1.ApplicationBinaryService(this.client, application);
    };
    ApplicationService.prototype.getHref = function (application) {
        if (application.type === ApplicationType_1.ApplicationType.EXTERNAL) {
            return application.externalUrl;
        }
        return "/apps/" + (application.public ? 'public/' : '') + application.contextPath;
    };
    /**
     * Checks if current user can access specified application.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | IApplication} application Application name or contextPath as a
     * string or Application object.
     *
     * **Example**
     * ```typescript
     *
     *  const checkApp: object = {
     *    name: 'myApplication'
     *  };
     *
     *  (async () => {
     *    const {data, res} = await applicationService.isAvailable(checkApp);
     *  })();
     * ```
     */
    ApplicationService.prototype.isAvailable = function (application) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, res, data, available;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.listByUser(undefined, {
                            dropOverwrittenApps: true,
                            noPaging: true
                        })];
                    case 1:
                        _a = _b.sent(), res = _a.res, data = _a.data;
                        available = (data || []).some(function (availableApp) {
                            return typeof application === 'string'
                                ? availableApp.name === application || availableApp.contextPath === application
                                : _this.isMatch(availableApp, application);
                        });
                        return [2 /*return*/, { data: available, res: res }];
                }
            });
        });
    };
    ApplicationService.prototype.isMatch = function (object, source) {
        var _this = this;
        return Object.keys(source).every(function (key) {
            if (Array.isArray(object[key]) && Array.isArray(source[key])) {
                return source[key].every(function (el) { return object[key].includes(el); });
            }
            else if (typeof object[key] === 'object' &&
                object[key] !== null &&
                typeof source[key] === 'object' &&
                source[key] !== null) {
                return _this.isMatch(object[key], source[key]);
            }
            else {
                return object[key] === source[key];
            }
        });
    };
    return ApplicationService;
}(core_1.Service));
exports.ApplicationService = ApplicationService;
//# sourceMappingURL=ApplicationService.js.map