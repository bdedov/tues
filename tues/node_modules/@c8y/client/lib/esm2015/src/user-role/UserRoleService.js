var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Service } from '../core';
/**
 * @description
 * This service allows for fetch user roles.
 */
export class UserRoleService extends Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'user';
        this.listUrl = 'roles';
        this.propertyName = 'roles';
    }
    /**
     * Gets the details of given role.
     *
     * @param {string|number|IRole} entityOrId Roles's id or role object.
     *
     * @returns Returns promise object that is resolved with the IRole wrapped by IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const roleId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await userRoleService.detail(roleId);
     *   })();
     * ```
     */
    detail(entityOrId) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, entityOrId);
        });
    }
    /**
     * Gets the list of user roles filtered by parameters.
     *
     * @param {object} filter Object containing filters for querying roles.
     *
     * @returns Returns promise object that is resolved with the IRole wrapped by IResultList.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     severity: Severity.MAJOR,
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await userRoleService.list(filter);
     *   })();
     * ```
     */
    list(filter = {}) {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this, filter);
        });
    }
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = userRoleService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    list$(filter = {}, options = {}) {
        return super.list$(filter, options);
    }
}
//# sourceMappingURL=UserRoleService.js.map