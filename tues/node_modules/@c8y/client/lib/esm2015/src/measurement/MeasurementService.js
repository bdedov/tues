var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Service } from '../core';
/**
 * This class allows for managing measurements.
 */
export class MeasurementService extends Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'measurement';
        this.listUrl = 'measurements';
        this.propertyName = 'measurements';
        this.channel = '/measurements/*';
    }
    /**
     * Gets the details of selected measurement.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const measurementId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await measurementService.detail(measurementId);
     *   })();
     * ```
     */
    detail(entityOrId) {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, entityOrId);
        });
    }
    /**
     * Creates a new measurement.
     *
     * @param {Partial<IMeasurementCreate>} entity At least sourceId is mandantory.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const mandantoryObject: Partial<IMeasurementCreate> = {
     *    sourceId: device.id,
     *    fragment: { series: { unit: '%', value: 51 } },
     *  };
     *
     *  (async () => {
     *    const {data, res} = await measurementService.create(mandantoryObject);
     *  })();
     * ```
     */
    create(entity) {
        const _super = Object.create(null, {
            create: { get: () => super.create }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.create.call(this, this.onBeforeCreate(entity));
        });
    }
    /**
     * Gets the list of measurements filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying measurements.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await measurementService.list(filter);
     *   })();
     * ```
     */
    list(filter = {}) {
        const _super = Object.create(null, {
            list: { get: () => super.list }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.list.call(this, filter);
        });
    }
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = measurementService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    list$(filter = {}, options = {}) {
        return super.list$(filter, options);
    }
    /**
     * List all events by a given source.
     *
     * @param {string | number | IIdentified} sourceOrId The source of the event.
     * @param {object} filter Object containing filters for querying.
     * @param {object} options To configure the observable.
     *
     * @returns Data wrapped as [[ObservableList]]
     *
     * **Example**
     * ```typescript
     *
     *   const listBySource$ = measurementService.listBySource$(11);
     *   listBySource$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    listBySource$(sourceOrId, filter = {}, options = {}) {
        Object.assign(filter, {
            source: this.getIdString(sourceOrId)
        });
        return super.list$(filter, options);
    }
    /**
     * Removes a measurement with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId
     *
     * **Example**
     * ```typescript
     *
     *   const id: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await measurementService.delete(id);
     *   })();
     * ```
     */
    delete(entityOrId) {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, entityOrId);
        });
    }
    /**
     * Gets the list of series in a measurement filtered by parameters.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {object} filter Object containing filters for querying measurements.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *    dateFrom: '2018-02-06T10:43:55.077Z',
     *    dateTo: '2018-02-06T10:50:55.077Z',
     *    source: device.id
     *  };
     *
     *   (async () => {
     *     const {data, res} = await measurementService.listSeries(filter);
     *   })();
     * ```
     */
    listSeries(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUrl}/${this.listUrl}/series`;
            const res = yield this.client.fetch(url, { params });
            const data = yield res.json();
            return { res, data };
        });
    }
    onBeforeCreate(entity) {
        if (!entity.time) {
            entity.time = new Date();
        }
        if (!entity.type) {
            entity.type = 'c8y_Measurement';
        }
        if (entity.sourceId) {
            const { sourceId } = entity;
            delete entity.sourceId;
            if (!entity.source) {
                entity.source = {
                    id: String(sourceId),
                };
            }
        }
        return entity;
    }
}
//# sourceMappingURL=MeasurementService.js.map