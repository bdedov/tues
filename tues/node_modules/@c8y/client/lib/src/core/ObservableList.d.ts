import { Observable } from 'rxjs';
import { IResultBase } from './IResultBase';
/**
 * Creates an observable list (or detail) from a promise-callback.
 *
 * **Deprecated** This class will be removed soon in favor of decoupling
 * this library from rxjs. Use [[Realtime]] for realtime connection and
 * rxjs `defer()` or `from()` to composite an observable on your own.
 */
export declare class ObservableList<TData> {
    private realtimeFilter;
    /**
     * The inner source for the list observable
     */
    source: Observable<TData[]>;
    private options;
    private seed;
    private pagingDriver;
    private specialRealtimeFilter;
    private defaultObservableOptions;
    /**
     * Creates a observable list with optional paging and realtime configuration.
     *
     * @param {Promise<IResultBase<TData>>} request List (or detail) from a promise-callback
     * @param {any} realtime$ Observable realtime object (optional)
     * @param {IObservableOptions} options The observable configuration
     */
    constructor(request: () => Promise<IResultBase<TData>>, realtime$?: any, options?: IObservableOptions, realtimeFilter?: any);
    /**
     * Load more data from this service (next page).
     */
    more(): any;
    composeDetail(): Observable<TData>;
    /**
     * Creates a observable with the given paging strategy.
     *
     * @param {Promise<IResultBase<TData>>} request List (or detail) from a promise-callback
     * @param {PagingStrategy} pagingStrategy The paging strategy to use.
     * @param {number} pagingDelay If all pages are loaded, the paging is delayed by x ms.
     */
    compose(request: () => Promise<IResultBase<TData>>, pagingStrategy?: PagingStrategy, pagingDelay?: number): Observable<TData[]>;
    composeRealtime(realtime$: any, action?: RealtimeAction): any;
    composeHot(): Observable<TData[]>;
    private fetchNextPage;
    private composeAllOrNone;
    private composeProgressive;
    private shouldUsePaging;
    private accumulator;
    private filterAction;
    private filterRealtime;
    private mapData;
}
export interface IObservableOptions {
    hot?: boolean;
    pagingStrategy?: PagingStrategy;
    realtime?: boolean;
    realtimeAction?: RealtimeAction;
    pagingDelay?: number;
    realtimeFilter?: (result: any) => any;
}
export declare enum RealtimeAction {
    UPDATE = "UPDATE",
    DELETE = "DELETE",
    CREATE = "CREATE",
    FULL = "FULL"
}
export declare enum PagingStrategy {
    ALL = "ALL",
    PROGRESSIVE = "PROGRESSIVE",
    NONE = "NONE"
}
