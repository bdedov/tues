import { IIdentified, Service, IResult, IResultList, IObservableOptions } from '../core';
import { IMeasurement, IMeasurementCreate } from './IMeasurement';
import { ISeriesFilter } from './ISeriesFilter';
import { ISeries } from './ISeries';
/**
 * This class allows for managing measurements.
 */
export declare class MeasurementService extends Service<IMeasurement> {
    protected baseUrl: string;
    protected listUrl: string;
    protected propertyName: string;
    protected channel: string;
    /**
     * Gets the details of selected measurement.
     *
     * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *    const measurementId: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await measurementService.detail(measurementId);
     *   })();
     * ```
     */
    detail(entityOrId: string | number | IIdentified): Promise<IResult<IMeasurement>>;
    /**
     * Creates a new measurement.
     *
     * @param {Partial<IMeasurementCreate>} entity At least sourceId is mandantory.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * **Example**
     * ```typescript
     *
     *  const mandantoryObject: Partial<IMeasurementCreate> = {
     *    sourceId: device.id,
     *    fragment: { series: { unit: '%', value: 51 } },
     *  };
     *
     *  (async () => {
     *    const {data, res} = await measurementService.create(mandantoryObject);
     *  })();
     * ```
     */
    create(entity: Partial<IMeasurementCreate>): Promise<IResult<IMeasurement>>;
    /**
     * Gets the list of measurements filtered by parameters.
     *
     * @returns Response wrapped in [[IResultList]]
     *
     * @param {object} filter Object containing filters for querying measurements.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await measurementService.list(filter);
     *   })();
     * ```
     */
    list(filter?: object): Promise<IResultList<IMeasurement>>;
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = measurementService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    list$(filter?: object, options?: IObservableOptions): import("rxjs").Observable<IMeasurement[]>;
    /**
     * List all events by a given source.
     *
     * @param {string | number | IIdentified} sourceOrId The source of the event.
     * @param {object} filter Object containing filters for querying.
     * @param {object} options To configure the observable.
     *
     * @returns Data wrapped as [[ObservableList]]
     *
     * **Example**
     * ```typescript
     *
     *   const listBySource$ = measurementService.listBySource$(11);
     *   listBySource$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    listBySource$(sourceOrId: string | number | IIdentified, filter?: object, options?: IObservableOptions): import("rxjs").Observable<IMeasurement[]>;
    /**
     * Removes a measurement with given id.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {string | number | IIdentified} entityOrId
     *
     * **Example**
     * ```typescript
     *
     *   const id: number = 1;
     *
     *    (async () => {
     *      const {data, res} = await measurementService.delete(id);
     *   })();
     * ```
     */
    delete(entityOrId: string | number | IIdentified): Promise<IResult<null>>;
    /**
     * Gets the list of series in a measurement filtered by parameters.
     *
     * @returns Response wrapped in [[IResult]]
     *
     * @param {object} filter Object containing filters for querying measurements.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *    dateFrom: '2018-02-06T10:43:55.077Z',
     *    dateTo: '2018-02-06T10:50:55.077Z',
     *    source: device.id
     *  };
     *
     *   (async () => {
     *     const {data, res} = await measurementService.listSeries(filter);
     *   })();
     * ```
     */
    listSeries(params: ISeriesFilter): Promise<IResult<ISeries>>;
    protected onBeforeCreate(entity: Partial<IMeasurementCreate>): Partial<IMeasurementCreate>;
}
