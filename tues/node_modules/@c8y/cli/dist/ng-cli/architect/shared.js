"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const translation_1 = require("../../webpack/config/translation");
const favicon_1 = require("../../webpack/config/favicon");
const plugin_1 = require("../../webpack/config/plugin");
const options_1 = require("../../options");
const core_1 = require("@angular-devkit/core");
const webpackMerge = require("webpack-merge");
function webpackConfigurationTransformer(webpackConfig) {
    const translationConfig = translation_1.config(webpackConfig);
    const faviconConfig = favicon_1.config(webpackConfig);
    const c8yOptions = getC8YOptions(webpackConfig);
    const c8yWebpackConfig = webpackMerge([webpackConfig, c8yOptions]);
    const pluginConfig = plugin_1.config(c8yWebpackConfig);
    const { entry } = webpackConfig;
    entry.main = [core_1.getSystemPath(core_1.join(webpackConfig.context, 'node_modules', '@c8y', 'cli', 'dist', 'app-bootstrap', 'index.js'))];
    const finalConfig = webpackMerge([
        webpackConfig,
        translationConfig,
        faviconConfig,
        pluginConfig,
        {
            stats: {
                chunks: true,
                excludeAssets: [/locales.angular/],
                excludeModules: [/locales.angular/]
            }
        }
    ]);
    finalConfig.module.rules.forEach((rule) => {
        if (rule.test.test('.less') && rule.include) {
            rule.include.push(/@c8y.style/);
            rule.include.push(c8yOptions.branding);
        }
    });
    return new Promise(resolve => {
        resolve(finalConfig);
    });
}
exports.webpackConfigurationTransformer = webpackConfigurationTransformer;
function getC8YOptions(webpackConfig) {
    const { app, cli } = c8yConfig(webpackConfig.context);
    const indexTemplate = getIndexTemplatePath(webpackConfig.context);
    return Object.assign({ mode: webpackConfig.mode, entry: Array.isArray(webpackConfig.entry.main) ? webpackConfig.entry.main[0] : webpackConfig.entry.main, app: Object.assign({}, app, { indexTemplate }) }, (cli || {}), { branding: branding(webpackConfig.context) });
}
exports.getC8YOptions = getC8YOptions;
function branding(root) {
    const { app, cli } = c8yConfig(root);
    let paths;
    if (app.brandingEntry || cli.branding) {
        paths = [app.brandingEntry || cli.branding];
    }
    else {
        paths = ['node_modules', options_1.options['BUILD.BRANDING_PATH']];
    }
    return core_1.getSystemPath(core_1.join(root, ...paths));
}
exports.branding = branding;
function cliPath(root, ...paths) {
    return core_1.getSystemPath(core_1.join(root, 'node_modules', '@c8y', 'cli', 'dist', ...paths));
}
exports.cliPath = cliPath;
function c8yConfig(root) {
    const pkg = require(core_1.getSystemPath(core_1.join(root, 'package.json')));
    const { application: app, cli = {} } = pkg.c8y;
    return { app, cli };
}
exports.c8yConfig = c8yConfig;
function getIndexTemplatePath(root) {
    const workspace = require(core_1.getSystemPath(core_1.join(root, 'angular.json')));
    return workspace.projects[workspace.defaultProject].architect.build.options.index || 'src/index.html';
}
exports.getIndexTemplatePath = getIndexTemplatePath;
//# sourceMappingURL=shared.js.map