import * as tslib_1 from "tslib";
import { Component, Optional } from '@angular/core';
import { AlertService, ContextRouteComponent, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { OpcuaService } from './opcuaService';
let OpcuaServersComponent = class OpcuaServersComponent {
    constructor(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.moId = this.opcuaService.getMoId();
            if (this.moId && this.moId.length > 0) {
                const res = yield this.opcuaService.getServers(this.moId);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                }
                else {
                    this.serverObjectList = (yield res.json());
                    this.serverObjectList.map(server => this.setQuickInfo(server));
                }
            }
        });
    }
    localServerObjectExist() {
        return !!this.serverObjectList.find(server => server.id === this.NEW_SERVER_ID);
    }
    addServer() {
        const server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    }
    onSaved(server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    }
    reloadTabs() {
        if (this.context) {
            this.context.refreshTabs();
        }
    }
    onCanceled(server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(item => {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    }
    onRemoved(server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    }
    getKeystore(binaryId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.opcuaService.getKeystore(binaryId);
            return data;
        });
    }
    onPresent(server) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (server &&
                server.id !== this.NEW_SERVER_ID &&
                server.config &&
                server.config.keystoreBinaryId) {
                try {
                    const mo = yield this.getKeystore(server.config.keystoreBinaryId);
                    server.config.keystoreFilename = mo.name;
                }
                catch (ex) {
                    this.server = Object.assign({}, server);
                    console.log('Could not get existing keystore:', ex);
                }
            }
            if (this.serverObjectList.length > 0) {
                this.serverObjectList.forEach(item => {
                    item.active = false;
                    if (item.id === server.id) {
                        item.active = true;
                        server.active = item.active;
                    }
                });
                this.setQuickInfo(server);
                this.server = Object.assign({}, server);
            }
        });
    }
    createServer(server) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.opcuaService.createServer(server);
            const svr = (yield response.json());
            this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
            this.reloadTabs();
        });
    }
    updateServer(server) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const updatedServer = (yield this.opcuaService.updateServer(server));
            if (updatedServer) {
                this.updateServerObjectListById(updatedServer.id, updatedServer);
            }
        });
    }
    removeServer(server) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.opcuaService.removeServer(server);
                this.removeServerObjectListById(server.id);
                this.reloadTabs();
            }
            catch (ex) {
                console.log('Could not remove OPC UA server:', ex);
            }
        });
    }
    removeServerObjectListById(id) {
        this.serverObjectList.forEach((item, index) => {
            if (item.id === id) {
                this.serverObjectList.splice(index, 1);
                delete this.server;
            }
        });
    }
    updateServerObjectListById(id, server) {
        const idx = this.serverObjectList.findIndex(item => item.id === id);
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    }
    setQuickInfo(server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    }
};
OpcuaServersComponent.ctorParameters = () => [
    { type: OpcuaService },
    { type: AlertService },
    { type: TranslateService },
    { type: ContextRouteComponent, decorators: [{ type: Optional }] }
];
OpcuaServersComponent = tslib_1.__decorate([
    Component({
        selector: 'opcua-servers',
        template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-6 scroll-column has-footer\">\n    <div class=\"c8y-nav-stacked inner-scroll\">\n      <h4 class=\"bottom-m-sm\" translate>OPC UA servers</h4>\n      <p class=\"bottom-m-lg\" translate>\n        Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to \"connected\".\n      </p>\n      <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n      </opcua-server-list>\n    </div>\n    <div class=\"scroll-column-footer\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-add-block\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"col-md-6 scroll-column fast animated\"\n    [ngClass]=\"{ slideInRight: server, slideOutRight: !server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"
    }),
    tslib_1.__param(3, Optional())
], OpcuaServersComponent);
export { OpcuaServersComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtc2VydmVycy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3Byb3RvY29sLW9wY3VhLyIsInNvdXJjZXMiOlsib3BjdWEtc2VydmVycy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTTlDLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBK0JoQyxZQUNVLFlBQTBCLEVBQzFCLFlBQTBCLEVBQzFCLGdCQUFrQyxFQUN0QixPQUE4QjtRQUgxQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ3RCLFlBQU8sR0FBUCxPQUFPLENBQXVCO1FBbENwRCxxQkFBZ0IsR0FBa0IsRUFBRSxDQUFDO1FBQ3JDLHdCQUFtQixHQUFnQjtZQUNqQyxFQUFFLEVBQUUsRUFBRTtZQUNOLElBQUksRUFBRSxZQUFZO1lBQ2xCLE1BQU0sRUFBRTtnQkFDTixZQUFZLEVBQUUsTUFBTTtnQkFDcEIsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLGdCQUFnQixFQUFFLEVBQUU7Z0JBQ3BCLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixTQUFTLEVBQUUsRUFBRTtnQkFDYixRQUFRLEVBQUUsRUFBRTtnQkFDWixZQUFZLEVBQUUsRUFBRTtnQkFDaEIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxJ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QUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDckM7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVPLFlBQVksQ0FBQyxNQUFtQjtRQUN0QyxNQUFNLENBQUMsU0FBUyxHQUFHO1lBQ2pCLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFVBQVUsRUFBRSxFQUFFO1NBQ2YsQ0FBQztRQUVGLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDM0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtnQkFDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztnQkFDckYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDekQsT0FBTyxDQUFDLDBDQUEwQyxDQUFDLEVBQ25ELEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQ3RDLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBdEt5QixZQUFZO1lBQ1osWUFBWTtZQUNSLGdCQUFnQjtZQUNiLHFCQUFxQix1QkFBakQsUUFBUTs7QUFuQ0EscUJBQXFCO0lBSmpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxlQUFlO1FBQ3pCLHd1Q0FBNkM7S0FDOUMsQ0FBQztJQW9DRyxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtHQW5DRixxQkFBcUIsQ0FzTWpDO1NBdE1ZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBDb250ZXh0Um91dGVDb21wb25lbnQsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE9wY3VhU2VydmVyIH0gZnJvbSAnLi9vcGN1YS1zZXJ2ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IE9wY3VhU2VydmljZSB9IGZyb20gJy4vb3BjdWFTZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnb3BjdWEtc2VydmVycycsXG4gIHRlbXBsYXRlVXJsOiAnLi9vcGN1YS1zZXJ2ZXJzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBPcGN1YVNlcnZlcnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBzZXJ2ZXJPYmplY3RMaXN0OiBPcGN1YVNlcnZlcltdID0gW107XG4gIGluaXRpYWxTZXJ2ZXJPYmplY3Q6IE9wY3VhU2VydmVyID0ge1xuICAgIGlkOiAnJyxcbiAgICBuYW1lOiAnTmV3IFNlcnZlcicsXG4gICAgY29uZmlnOiB7XG4gICAgICBzZWN1cml0eU1vZGU6ICdOT05FJyxcbiAgICAgIGtleXN0b3JlUGFzczogbnVsbCxcbiAgICAgIGtleXN0b3JlQmluYXJ5SWQ6IG51bGwsXG4gICAgICBrZXlzdG9yZUZpbGVuYW1lOiAnJyxcbiAgICAgIGNlcnRpZmljYXRlUGFzczogbnVsbCxcbiAgICAgIHNlcnZlclVybDogJycsXG4gICAgICB1c2VyTmFtZTogJycsXG4gICAgICB1c2VyUGFzc3dvcmQ6ICcnLFxuICAgICAgcmVzY2FuQ3JvbjogbnVsbCxcbiAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICBhdXRvUmVjb25uZWN0OiB0cnVlLFxuICAgICAgc3RhdHVzQ2hlY2tJbnRlcnZhbDogbnVsbCxcbiAgICAgIHZhbGlkOiB0cnVlXG4gICAgfSxcbiAgICBxdWlja0luZm86IHtcbiAgICAgIHBhZGxvY2s6ICd1bmxvY2snLFxuICAgICAgcGFkbG9ja01zZzogJydcbiAgICB9LFxuICAgIGFjdGl2ZTogdHJ1ZVxuICB9O1xuICBzZXJ2ZXI6IE9wY3VhU2VydmVyO1xuICBhY3RpdmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBtb0lkOiBzdHJpbmc7XG4gIHByaXZhdGUgTkVXX1NFUlZFUl9JRDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb3BjdWFTZXJ2aWNlOiBPcGN1YVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250ZXh0OiBDb250ZXh0Um91dGVDb21wb25lbnRcbiAgKSB7XG4gICAgdGhpcy5tb0lkID0gJyc7XG4gICAgdGhpcy5ORVdfU0VSVkVSX0lEID0gJ25ldyc7XG4gICAgdGhpcy5pbml0aWFsU2VydmVyT2JqZWN0LmlkID0gdGhpcy5ORVdfU0VSVkVSX0lEO1xuICB9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tb0lkID0gdGhpcy5vcGN1YVNlcnZpY2UuZ2V0TW9JZCgpO1xuICAgIGlmICh0aGlzLm1vSWQgJiYgdGhpcy5tb0lkLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMub3BjdWFTZXJ2aWNlLmdldFNlcnZlcnModGhpcy5tb0lkKTtcbiAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXMuanNvbiA/IGF3YWl0IHJlcy5qc29uKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoeyBkYXRhLCByZXMgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlcnZlck9iamVjdExpc3QgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgT3BjdWFTZXJ2ZXJbXTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJPYmplY3RMaXN0Lm1hcChzZXJ2ZXIgPT4gdGhpcy5zZXRRdWlja0luZm8oc2VydmVyKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbG9jYWxTZXJ2ZXJPYmplY3RFeGlzdCgpIHtcbiAgICByZXR1cm4gISF0aGlzLnNlcnZlck9iamVjdExpc3QuZmluZChzZXJ2ZXIgPT4gc2VydmVyLmlkID09PSB0aGlzLk5FV19TRVJWRVJfSUQpO1xuICB9XG5cbiAgYWRkU2VydmVyKCkge1xuICAgIGNvbnN0IHNlcnZlcjogT3BjdWFTZXJ2ZXIgPSB0aGlzLmluaXRpYWxTZXJ2ZXJPYmplY3Q7XG4gICAgdGhpcy5zZXJ2ZXJPYmplY3RMaXN0LnB1c2goc2VydmVyKTtcbiAgICB0aGlzLm9uUHJlc2VudChzZXJ2ZXIpO1xuICB9XG5cbiAgb25TYXZlZChzZXJ2ZXI6IE9wY3VhU2VydmVyKSB7XG4gICAgaWYgKHNlcnZlciAmJiBzZXJ2ZXIuaWQpIHtcbiAgICAgIHNlcnZlci5nYXRld2F5SWQgPSB0aGlzLm1vSWQ7XG4gICAgICBpZiAoc2VydmVyLmlkID09PSB0aGlzLk5FV19TRVJWRVJfSUQpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVTZXJ2ZXIoc2VydmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBkYXRlU2VydmVyKHNlcnZlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVsb2FkVGFicygpIHtcbiAgICBpZiAodGhpcy5jb250ZXh0KSB7XG4gICAgICB0aGlzLmNvbnRleHQucmVmcmVzaFRhYnMoKTtcbiAgICB9XG4gIH1cblxuICBvbkNhbmNlbGVkKHNlcnZlcjogT3BjdWFTZXJ2ZXIpIHtcbiAgICBpZiAoc2VydmVyICYmIHNlcnZlci5pZCAmJiBzZXJ2ZXIuaWQgPT09IHRoaXMuTkVXX1NFUlZFUl9JRCkge1xuICAgICAgdGhpcy5yZW1vdmVTZXJ2ZXJPYmplY3RMaXN0QnlJZChzZXJ2ZXIuaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgYWN0aXZpdHkgc3RhdHVzIGZvciBVSVxuICAgICAgdGhpcy5zZXJ2ZXJPYmplY3RMaXN0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09PSBzZXJ2ZXIuaWQpIHtcbiAgICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFdoZW4gc2VydmVyIGlkIGlzIG5vdCAnbmV3JyB3ZSBqdXN0IGNsb3NlIHRoZSBkZXRhaWxzXG4gICAgICBkZWxldGUgdGhpcy5zZXJ2ZXI7XG4gICAgfVxuICB9XG5cbiAgb25SZW1vdmVkKHNlcnZlcjogT3BjdWFTZXJ2ZXIpIHtcbiAgICBpZiAoc2VydmVyLmlkID09PSB0aGlzLk5FV19TRVJWRVJfSUQpIHtcbiAgICAgIHRoaXMub25DYW5jZWxlZChzZXJ2ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZVNlcnZlcihzZXJ2ZXIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEtleXN0b3JlKGJpbmFyeUlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMub3BjdWFTZXJ2aWNlLmdldEtleXN0b3JlKGJpbmFyeUlkKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGFzeW5jIG9uUHJlc2VudChzZXJ2ZXI6IE9wY3VhU2VydmVyKSB7XG4gICAgaWYgKFxuICAgICAgc2VydmVyICYmXG4gICAgICBzZXJ2ZXIuaWQgIT09IHRoaXMuTkVXX1NFUlZFUl9JRCAmJlxuICAgICAgc2VydmVyLmNvbmZpZyAmJlxuICAgICAgc2VydmVyLmNvbmZpZy5rZXlzdG9yZUJpbmFyeUlkXG4gICAgKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtbyA9IGF3YWl0IHRoaXMuZ2V0S2V5c3RvcmUoc2VydmVyLmNvbmZpZy5rZXlzdG9yZUJpbmFyeUlkKTtcbiAgICAgICAgc2VydmVyLmNvbmZpZy5rZXlzdG9yZUZpbGVuYW1lID0gbW8ubmFtZTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gT2JqZWN0LmFzc2lnbih7fSwgc2VydmVyKTtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBnZXQgZXhpc3Rpbmcga2V5c3RvcmU6JywgZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5zZXJ2ZXJPYmplY3RMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2VydmVyT2JqZWN0TGlzdC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpdGVtLmlkID09PSBzZXJ2ZXIuaWQpIHtcbiAgICAgICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgc2VydmVyLmFjdGl2ZSA9IGl0ZW0uYWN0aXZlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0UXVpY2tJbmZvKHNlcnZlcik7XG4gICAgICB0aGlzLnNlcnZlciA9IE9iamVjdC5hc3NpZ24oe30sIHNlcnZlcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVTZXJ2ZXIoc2VydmVyOiBPcGN1YVNlcnZlcikge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5vcGN1YVNlcnZpY2UuY3JlYXRlU2VydmVyKHNlcnZlcik7XG4gICAgY29uc3Qgc3ZyID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgT3BjdWFTZXJ2ZXI7XG4gICAgdGhpcy51cGRhdGVTZXJ2ZXJPYmplY3RMaXN0QnlJZCh0aGlzLk5FV19TRVJWRVJfSUQsIHN2cik7XG4gICAgdGhpcy5yZWxvYWRUYWJzKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZVNlcnZlcihzZXJ2ZXI6IE9wY3VhU2VydmVyKSB7XG4gICAgY29uc3QgdXBkYXRlZFNlcnZlciA9IChhd2FpdCB0aGlzLm9wY3VhU2VydmljZS51cGRhdGVTZXJ2ZXIoc2VydmVyKSkgYXMgT3BjdWFTZXJ2ZXI7XG4gICAgaWYgKHVwZGF0ZWRTZXJ2ZXIpIHtcbiAgICAgIHRoaXMudXBkYXRlU2VydmVyT2JqZWN0TGlzdEJ5SWQodXBkYXRlZFNlcnZlci5pZCwgdXBkYXRlZFNlcnZlcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZW1vdmVTZXJ2ZXIoc2VydmVyOiBPcGN1YVNlcnZlcikge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm9wY3VhU2VydmljZS5yZW1vdmVTZXJ2ZXIoc2VydmVyKTtcbiAgICAgIHRoaXMucmVtb3ZlU2VydmVyT2JqZWN0TGlzdEJ5SWQoc2VydmVyLmlkKTtcbiAgICAgIHRoaXMucmVsb2FkVGFicygpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHJlbW92ZSBPUEMgVUEgc2VydmVyOicsIGV4KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVNlcnZlck9iamVjdExpc3RCeUlkKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlcnZlck9iamVjdExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpdGVtLmlkID09PSBpZCkge1xuICAgICAgICB0aGlzLnNlcnZlck9iamVjdExpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc2VydmVyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTZXJ2ZXJPYmplY3RMaXN0QnlJZChpZDogc3RyaW5nLCBzZXJ2ZXI6IE9wY3VhU2VydmVyKSB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5zZXJ2ZXJPYmplY3RMaXN0LmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgIHRoaXMuc2V0UXVpY2tJbmZvKHNlcnZlcik7XG4gICAgICB0aGlzLnNlcnZlck9iamVjdExpc3RbaWR4XSA9IHNlcnZlcjtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuc2VydmVyO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRRdWlja0luZm8oc2VydmVyOiBPcGN1YVNlcnZlcikge1xuICAgIHNlcnZlci5xdWlja0luZm8gPSB7XG4gICAgICBwYWRsb2NrOiAndW5sb2NrJyxcbiAgICAgIHBhZGxvY2tNc2c6ICcnXG4gICAgfTtcblxuICAgIGlmIChzZXJ2ZXIgJiYgc2VydmVyLmNvbmZpZykge1xuICAgICAgaWYgKHNlcnZlci5jb25maWcuc2VjdXJpdHlNb2RlKSB7XG4gICAgICAgIHNlcnZlci5xdWlja0luZm8ucGFkbG9jayA9IHNlcnZlci5jb25maWcuc2VjdXJpdHlNb2RlICE9PSAnTk9ORScgPyAnbG9jaycgOiAndW5sb2NrJztcbiAgICAgICAgc2VydmVyLnF1aWNrSW5mby5wYWRsb2NrTXNnID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgICAgZ2V0dGV4dCgnVGhlIHNlY3VyaXR5IHBvbGljeSBpcyBzZXQgdG8ge3twYXJhbX19LicpLFxuICAgICAgICAgIHsgcGFyYW06IHNlcnZlci5jb25maWcuc2VjdXJpdHlNb2RlIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==