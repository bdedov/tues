import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AddressSpaceNode, AddressSpaceService, NodeNavigationData } from './address-space.service';
import { OpcuaService } from './opcuaService';
import { AlertService } from '@c8y/ngx-components';
import { DynamicDataSource } from './dynamic-data-source';
import { NestedTreeControl } from '@angular/cdk/tree';
import { clone } from 'lodash';
let OpcuaAddressSpaceTreeComponent = class OpcuaAddressSpaceTreeComponent {
    constructor(addressSpaceService, opcuaService, alertService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.getChildren = (node) => (node.expanded ? node.children : []);
        this.hasChild = (_, _nodeData) => this.addressSpaceService.childrenAvailable(_nodeData.references);
    }
    set moId(id) {
        this._moId = id || undefined;
    }
    ngOnInit() {
        this.initializeDataSet();
    }
    ngOnChanges(changes) {
        if (changes.moId && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    }
    initializeDataSet() {
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .subscribe(nodeNavData => this.openNode(nodeNavData));
        this.subscriptionRef = this.focusEmitter.subscribe(node => {
            this.focused = this.isFocusedNode(node) ? undefined : node;
        });
    }
    ngOnDestroy() {
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    }
    openNode(nodeNavData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { node, selectedAncestorIds } = nodeNavData;
            let nodeId;
            // We just set the nodeId when the selectedAncestorIds variable an empty array.
            // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
            // from the root node.
            if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                nodeId = node.nodeId;
            }
            // Always recreate the tree when routing to a specific nested node,
            // because previous modifications to the tree-structure could cause errors
            // while traversing with 'old' tree-data
            // -----------------
            // setupTree is able to handle nodeId = undefined
            yield this.setupTree(nodeId);
            if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                return;
            }
            if (nodeNavData && this.dataSource) {
                const clonedAncestors = clone(selectedAncestorIds);
                clonedAncestors.shift();
                const n = yield this.dataSource.toggleNode(this.dataSource.data[0], true);
                this.setChildNodes(n.children, clonedAncestors);
                this.toggleFocusedNode(node);
            }
        });
    }
    setChildNodes(nodes, ids) {
        if (nodes) {
            ids.forEach((id) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const match = nodes.find(n => n.nodeId === id);
                if (match && ids.length > 0) {
                    const idx = ids.findIndex(value => value === id);
                    if (idx >= 0) {
                        ids.splice(idx, 1);
                    }
                    const toggledNode = yield this.dataSource.toggleNode(match, true);
                    this.setChildNodes(toggledNode.children, ids);
                }
            }));
        }
    }
    setupTree(nodeId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            if (!this._moId || this._moId.length === 0) {
                this._moId = this.opcuaService.getMoId();
            }
            // addressSpaceService.getNode returns either the root node of the server (moId)
            // or if nodeId !== undefined the node with given nodeId
            const res = yield this.addressSpaceService.getNode(this._moId, nodeId);
            if (res) {
                if (res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.dataSource = undefined;
                }
                else {
                    const rootNode = (yield res.json());
                    this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                    this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                    this.dataSource.data = [rootNode];
                }
                this.loading = false;
            }
            else {
                this.loading = false;
            }
        });
    }
    getMoId() {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    toggleFocusedNode(node) {
        const relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    }
    isFocusedNode(node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    }
    getRelativePath(node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    }
};
OpcuaAddressSpaceTreeComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "moId", null);
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "node", void 0);
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "focusEmitter", void 0);
tslib_1.__decorate([
    Output()
], OpcuaAddressSpaceTreeComponent.prototype, "selectedNode", void 0);
OpcuaAddressSpaceTreeComponent = tslib_1.__decorate([
    Component({
        selector: 'opcua-address-space-tree',
        template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" (click)=\"toggleFocusedNode(node)\"\n    [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\">\n      <span>\n        <i class=\"right-m-xs\" \n        [c8yIcon]=\"getIcon(node.nodeClassName)\" \n        [ngClass]=\"{'strong':isFocusedNode(node)}\" \n        style=\"cursor: pointer\"></i>\n        {{node.displayName}}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button cdkTreeNodeToggle class=\"btn-clean text-primary right-m-xs\" [disabled]=\"node.currentlyLoadingChildren\">\n          <i class=\"fa\" [ngClass]=\"{'fa-plus-square': !node.expanded, 'fa-minus-square': node.expanded}\"></i>\n        </button>\n        <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(node.nodeClassName)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"></i>\n        <span (click)=\"toggleFocusedNode(node)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"> {{node.displayName}} </span>\n        <span class=\"left-m-xs\" [style.visibility]=\"node.currentlyLoadingChildren ? 'visible': 'hidden'\">\n          <i class=\"fa fa-circle-o-notch fa-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div style=\"padding: 8px;\" *ngIf=\"loading\">\n  <div class=\"spinner\" style=\"position: relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>"
    })
], OpcuaAddressSpaceTreeComponent);
export { OpcuaAddressSpaceTreeComponent };
//# sourceMappingURL=data:application/json;base64,