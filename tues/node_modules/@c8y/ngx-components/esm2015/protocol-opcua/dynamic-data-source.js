import * as tslib_1 from "tslib";
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
export class DynamicDataSource {
    constructor(treeControl, addressSpaceService, serverId) {
        this.treeControl = treeControl;
        this.addressSpaceService = addressSpaceService;
        this.serverId = serverId;
        this.dataChange = new BehaviorSubject([]);
        this.treeControl.isExpanded = (node) => node.expanded;
    }
    get data() {
        return this.dataChange.value;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.treeControl.expansionModel.onChange.subscribe((change) => {
            if (change.added || change.removed) {
                this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    /** Handle expand/collapse behaviors */
    handleTreeControl(change) {
        if (change.added) {
            change.added.forEach(node => this.toggleNode(node, true));
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(node => this.toggleNode(node, false));
        }
    }
    /**
     * Toggle the node, remove from display list
     */
    toggleNode(addressSpaceNode, expand) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!addressSpaceNode.children || addressSpaceNode.children.length === 0) {
                addressSpaceNode.currentlyLoadingChildren = true;
                const res = yield this.addressSpaceService.getChildrenOf(addressSpaceNode, this.serverId);
                const children = (yield res.json());
                addressSpaceNode.children = children || [];
                addressSpaceNode.children = addressSpaceNode.children.map((node) => {
                    node.parentNode = addressSpaceNode;
                    return node;
                });
                addressSpaceNode.currentlyLoadingChildren = false;
                this.treeControl.expand(addressSpaceNode);
            }
            addressSpaceNode.expanded = expand && addressSpaceNode.children.length > 0;
            this.refreshNestedTree(this.data);
            return Promise.resolve(addressSpaceNode);
        });
    }
    catch() {
        // do nothing
    }
    refreshNestedTree(treeData) {
        // necessary to rerender tree, otherwise new nodes will not
        // appear, but they are added to the list.
        this.data = [];
        this.dataChange.next(treeData);
        this.triggerResize(); // to resize the modal window when creating a new device protocol
    }
    triggerResize() {
        setTimeout(() => {
            try {
                window.dispatchEvent(new Event('resize'));
            }
            catch (error) {
                // do nothing
            }
        }, 200);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1kYXRhLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvcHJvdG9jb2wtb3BjdWEvIiwic291cmNlcyI6WyJkeW5hbWljLWRhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFjLEtBQUssRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFJeEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sT0FBTyxpQkFBaUI7SUFXNUIsWUFDUyxXQUFnRCxFQUMvQyxtQkFBd0MsRUFDeEMsUUFBZ0I7UUFGakIsZ0JBQVcsR0FBWCxXQUFXLENBQXFDO1FBQy9DLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQWIxQixlQUFVLEdBQUcsSUFBSSxlQUFlLENBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBZXZELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMxRSxDQUFDO0lBZEQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsS0FBeUI7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFVRCxPQUFPLENBQUMsZ0JBQWtDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQ2hELENBQUMsTUFBeUMsRUFBRSxFQUFFO1lBQzVDLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO2dC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LENBQUM7SUFDVixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG1lcmdlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5lc3RlZFRyZWVDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RyZWUnO1xuaW1wb3J0IHsgQ29sbGVjdGlvblZpZXdlciwgU2VsZWN0aW9uQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IEFkZHJlc3NTcGFjZVNlcnZpY2UsIEFkZHJlc3NTcGFjZU5vZGUgfSBmcm9tICcuL2FkZHJlc3Mtc3BhY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBEeW5hbWljRGF0YVNvdXJjZSB7XG4gIGRhdGFDaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFkZHJlc3NTcGFjZU5vZGVbXT4oW10pO1xuXG4gIGdldCBkYXRhKCk6IEFkZHJlc3NTcGFjZU5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YUNoYW5nZS52YWx1ZTtcbiAgfVxuICBzZXQgZGF0YSh2YWx1ZTogQWRkcmVzc1NwYWNlTm9kZVtdKSB7XG4gICAgdGhpcy50cmVlQ29udHJvbC5kYXRhTm9kZXMgPSB2YWx1ZTtcbiAgICB0aGlzLmRhdGFDaGFuZ2UubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgdHJlZUNvbnRyb2w6IE5lc3RlZFRyZWVDb250cm9sPEFkZHJlc3NTcGFjZU5vZGU+LFxuICAgIHByaXZhdGUgYWRkcmVzc1NwYWNlU2VydmljZTogQWRkcmVzc1NwYWNlU2VydmljZSxcbiAgICBwcml2YXRlIHNlcnZlcklkOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy50cmVlQ29udHJvbC5pc0V4cGFuZGVkID0gKG5vZGU6IEFkZHJlc3NTcGFjZU5vZGUpID0+IG5vZGUuZXhwYW5kZWQ7XG4gIH1cblxuICBjb25uZWN0KGNvbGxlY3Rpb25WaWV3ZXI6IENvbGxlY3Rpb25WaWV3ZXIpOiBPYnNlcnZhYmxlPEFkZHJlc3NTcGFjZU5vZGVbXT4ge1xuICAgIHRoaXMudHJlZUNvbnRyb2wuZXhwYW5zaW9uTW9kZWwub25DaGFuZ2Uuc3Vic2NyaWJlKFxuICAgICAgKGNoYW5nZTogU2VsZWN0aW9uQ2hhbmdlPEFkZHJlc3NTcGFjZU5vZGU+KSA9PiB7XG4gICAgICAgIGlmIChjaGFuZ2UuYWRkZWQgfHwgY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZVRyZWVDb250cm9sKGNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBtZXJnZShjb2xsZWN0aW9uVmlld2VyLnZpZXdDaGFuZ2UsIHRoaXMuZGF0YUNoYW5nZSkucGlwZShtYXAoKCkgPT4gdGhpcy5kYXRhKSk7XG4gIH1cblxuICAvKiogSGFuZGxlIGV4cGFuZC9jb2xsYXBzZSBiZWhhdmlvcnMgKi9cbiAgaGFuZGxlVHJlZUNvbnRyb2woY2hhbmdlOiBTZWxlY3Rpb25DaGFuZ2U8QWRkcmVzc1NwYWNlTm9kZT4pIHtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBjaGFuZ2UuYWRkZWQuZm9yRWFjaChub2RlID0+IHRoaXMudG9nZ2xlTm9kZShub2RlLCB0cnVlKSk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2UucmVtb3ZlZCkge1xuICAgICAgY2hhbmdlLnJlbW92ZWRcbiAgICAgICAgLnNsaWNlKClcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuZm9yRWFjaChub2RlID0+IHRoaXMudG9nZ2xlTm9kZShub2RlLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIG5vZGUsIHJlbW92ZSBmcm9tIGRpc3BsYXkgbGlzdFxuICAgKi9cbiAgYXN5bmMgdG9nZ2xlTm9kZShhZGRyZXNzU3BhY2VOb2RlOiBBZGRyZXNzU3BhY2VOb2RlLCBleHBhbmQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoIWFkZHJlc3NTcGFjZU5vZGUuY2hpbGRyZW4gfHwgYWRkcmVzc1NwYWNlTm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIGFkZHJlc3NTcGFjZU5vZGUuY3VycmVudGx5TG9hZGluZ0NoaWxkcmVuID0gdHJ1ZTtcblxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5hZGRyZXNzU3BhY2VTZXJ2aWNlLmdldENoaWxkcmVuT2YoYWRkcmVzc1NwYWNlTm9kZSwgdGhpcy5zZXJ2ZXJJZCk7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IChhd2FpdCByZXMuanNvbigpKSBhcyBBZGRyZXNzU3BhY2VOb2RlW107XG5cbiAgICAgIGFkZHJlc3NTcGFjZU5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICAgIGFkZHJlc3NTcGFjZU5vZGUuY2hpbGRyZW4gPSBhZGRyZXNzU3BhY2VOb2RlLmNoaWxkcmVuLm1hcCgobm9kZTogQWRkcmVzc1NwYWNlTm9kZSkgPT4ge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUgPSBhZGRyZXNzU3BhY2VOb2RlO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgYWRkcmVzc1NwYWNlTm9kZS5jdXJyZW50bHlMb2FkaW5nQ2hpbGRyZW4gPSBmYWxzZTtcblxuICAgICAgdGhpcy50cmVlQ29udHJvbC5leHBhbmQoYWRkcmVzc1NwYWNlTm9kZSk7XG4gICAgfVxuXG4gICAgYWRkcmVzc1NwYWNlTm9kZS5leHBhbmRlZCA9IGV4cGFuZCAmJiBhZGRyZXNzU3BhY2VOb2RlLmNoaWxkcmVuLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5yZWZyZXNoTmVzdGVkVHJlZSh0aGlzLmRhdGEpO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhZGRyZXNzU3BhY2VOb2RlKTtcbiAgfVxuICBjYXRjaCgpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2hOZXN0ZWRUcmVlKHRyZWVEYXRhOiBBZGRyZXNzU3BhY2VOb2RlW10pIHtcbiAgICAvLyBuZWNlc3NhcnkgdG8gcmVyZW5kZXIgdHJlZSwgb3RoZXJ3aXNlIG5ldyBub2RlcyB3aWxsIG5vdFxuICAgIC8vIGFwcGVhciwgYnV0IHRoZXkgYXJlIGFkZGVkIHRvIHRoZSBsaXN0LlxuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuZGF0YUNoYW5nZS5uZXh0KHRyZWVEYXRhKTtcbiAgICB0aGlzLnRyaWdnZXJSZXNpemUoKTsgLy8gdG8gcmVzaXplIHRoZSBtb2RhbCB3aW5kb3cgd2hlbiBjcmVhdGluZyBhIG5ldyBkZXZpY2UgcHJvdG9jb2xcbiAgfVxuXG4gIHByaXZhdGUgdHJpZ2dlclJlc2l6ZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgfVxuICAgIH0sIDIwMCk7XG4gIH1cbn1cbiJdfQ==