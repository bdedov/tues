var OpcuaDeviceProtocolBrowsePathValidation_1;
import * as tslib_1 from "tslib";
import { Directive, forwardRef, ElementRef, Input, HostListener } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { some, isEqual, isEmpty } from 'lodash-es';
let OpcuaDeviceProtocolBrowsePathValidation = OpcuaDeviceProtocolBrowsePathValidation_1 = class OpcuaDeviceProtocolBrowsePathValidation {
    constructor(el) {
        this.el = el;
    }
    validate(control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    }
    isValidJson(value) {
        try {
            const browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    }
    toArray(str) {
        return JSON.parse(str);
    }
    isBrowsePathUnique(value) {
        const mappings = this.getMappings();
        const found = some(mappings, item => {
            if (isEqual(item.browsePath, this.toArray(value)) && item.id !== this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    }
};
OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolBrowsePathValidation.prototype, "getMappings", void 0);
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolBrowsePathValidation.prototype, "model", void 0);
OpcuaDeviceProtocolBrowsePathValidation = OpcuaDeviceProtocolBrowsePathValidation_1 = tslib_1.__decorate([
    Directive({
        selector: '[c8yBrowsePathValidator][ngModel]',
        providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => OpcuaDeviceProtocolBrowsePathValidation_1),
                multi: true
            }
        ]
    })
], OpcuaDeviceProtocolBrowsePathValidation);
export { OpcuaDeviceProtocolBrowsePathValidation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1vcGN1YS8iLCJzb3VyY2VzIjpbIm9wY3VhLWRldmljZS1wcm90b2NvbC1icm93c2UtcGF0aC12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBc0MsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkYsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBWW5ELElBQWEsdUNBQXVDLCtDQUFwRCxNQUFhLHVDQUF1QztJQUlsRCxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFHLENBQUM7SUFFdEMsUUFBUSxDQUFDLE9BQXdCO1FBQy9CLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQzFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDdEM7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQUs7UUFDZixJQUFJO1lBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFLO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQzlFLE9BQU8sSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0NBQ0YsQ0FBQTs7WUFyQ3lCLFVBQVU7O0FBSHpCO0lBQVIsS0FBSyxFQUFFOzRFQUF1QjtBQUN0QjtJQUFSLEtBQUssRUFBRTtzRUFBWTtBQUZULHVDQUF1QztJQVZuRCxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUNBQW1DO1FBQzdDLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlDQUF1QyxDQUFDO2dCQUN0RSxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7S0FDRixDQUFDO0dBQ1csdUNBQXVDLENBeUNuRDtTQXpDWSx1Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRm9ybSwgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBzb21lLCBpc0VxdWFsLCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUJyb3dzZVBhdGhWYWxpZGF0b3JdW25nTW9kZWxdJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE9wY3VhRGV2aWNlUHJvdG9jb2xCcm93c2VQYXRoVmFsaWRhdGlvbiksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBPcGN1YURldmljZVByb3RvY29sQnJvd3NlUGF0aFZhbGlkYXRpb24gaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBASW5wdXQoKSBnZXRNYXBwaW5nczogKCkgPT4gW107XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICBpZiAoY29udHJvbC52YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRKc29uKGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGludmFsaWRCcm93c2VQYXRoTm90YXRpb246IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzQnJvd3NlUGF0aFVuaXF1ZShjb250cm9sLnZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB7IGJyb3dzZVBhdGhOb3RVbmlxdWU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlzVmFsaWRKc29uKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJyb3dzZVBhdGggPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIHJldHVybiAhaXNFbXB0eShicm93c2VQYXRoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRvQXJyYXkoc3RyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfVxuXG4gIGlzQnJvd3NlUGF0aFVuaXF1ZSh2YWx1ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5nZXRNYXBwaW5ncygpO1xuICAgIGNvbnN0IGZvdW5kID0gc29tZShtYXBwaW5ncywgaXRlbSA9PiB7XG4gICAgICBpZiAoaXNFcXVhbChpdGVtLmJyb3dzZVBhdGgsIHRoaXMudG9BcnJheSh2YWx1ZSkpICYmIGl0ZW0uaWQgIT09IHRoaXMubW9kZWwuaWQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG59XG4iXX0=