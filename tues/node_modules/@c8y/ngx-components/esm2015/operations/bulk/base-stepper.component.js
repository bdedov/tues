import * as tslib_1 from "tslib";
import { ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BulkOperationStepper } from './creation/bulk-operation-stepper.component';
export class BaseStepperComponent {
    constructor() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    set deviceTypes(deviceTypes) {
        if (this.operationStepper) {
            this.operationStepper.changeDeviceTypes(deviceTypes);
        }
    }
    ngOnInit() {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    onSelectionChange(event) {
        const { selectedIndex, previouslySelectedIndex } = event;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    }
    getStepDataKeyByIndex(index) {
        return Object.keys(this.stepData)[index];
    }
}
tslib_1.__decorate([
    ViewChild(BulkOperationStepper, { static: true })
], BaseStepperComponent.prototype, "operationStepper", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdGVwcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImJ1bGsvYmFzZS1zdGVwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFxQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFHbkYsTUFBTSxPQUFnQixvQkFBb0I7SUFBMUM7UUFTRTs7OztXQUlHO1FBQ0gsYUFBUSxHQUFzQyxFQUFFLENBQUM7UUFFekMscUJBQWdCLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7SUErQjFELENBQUM7SUE1Q0MsSUFBSSxXQUFXLENBQUMsV0FBOEI7UUFDNUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztJQVdELFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZTthQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3RDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFJUyxpQkFBaUIsQ0FBQyxLQUE0QjtRQUN0RCxNQUFNLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3pELElBQ0UsYUFBYSxHQUFHLHVCQUF1QjtZQUN2QyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUNqRDtZQUNBLHdEQUF3RDtZQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxLQUFhO1FBQ3pDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBOUNvRDtJQUFsRCxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OERBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcHBlclNlbGVjdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uU3RlcHBlciB9IGZyb20gJy4vY3JlYXRpb24vYnVsay1vcGVyYXRpb24tc3RlcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3BlcmF0aW9uRGV0YWlscyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZChCdWxrT3BlcmF0aW9uU3RlcHBlciwgeyBzdGF0aWM6IHRydWUgfSkgb3BlcmF0aW9uU3RlcHBlcjogQnVsa09wZXJhdGlvblN0ZXBwZXI7XG5cbiAgc2V0IGRldmljZVR5cGVzKGRldmljZVR5cGVzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGlmICh0aGlzLm9wZXJhdGlvblN0ZXBwZXIpIHtcbiAgICAgIHRoaXMub3BlcmF0aW9uU3RlcHBlci5jaGFuZ2VEZXZpY2VUeXBlcyhkZXZpY2VUeXBlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgbWFwIGhvbGRpbmcgc3RlcCBkYXRhLiBUaGUgb3JkZXIgb2YgcHJvcGVydGllcyBuZWVkIHRvIG1hdGNoIHRoZSBvcmRlciBvZlxuICAgKiB0aGUgc3RlcHMgdGhleSBob2xkIGRhdGEgZm9yIGFzIHRoZSBpbmRleCBvZiB0aGUgcHJvcGVydHkgaXMgdXNlZCB0byBjbGVhclxuICAgKiBzdGVwIGRhdGEgd2hlbiBuYXZpZ2F0aW5nIGZvcnRoIGFmdGVyIGNoYW5naW5nIGRhdGEgYXQgYW4gZWFybGllciBzdGVwLlxuICAgKi9cbiAgc3RlcERhdGE6IHsgW2tleTogc3RyaW5nXTogSU1hbmFnZWRPYmplY3QgfSA9IHt9O1xuXG4gIHByaXZhdGUgZW5kU3Vic2NyaXB0aW9uczogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5vcGVyYXRpb25TdGVwcGVyLnJldHJpZXZlT3BlcmF0aW9uRGV0YWlscyA9IHRoaXMucmV0cmlldmVPcGVyYXRpb25Qcm90b3R5cGUuYmluZCh0aGlzKTtcblxuICAgIHRoaXMub3BlcmF0aW9uU3RlcHBlci5zZWxlY3Rpb25DaGFuZ2VcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmVuZFN1YnNjcmlwdGlvbnMpKVxuICAgICAgLnN1YnNjcmliZSh0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5lbmRTdWJzY3JpcHRpb25zLm5leHQoKTtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbnMuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZXRyaWV2ZU9wZXJhdGlvblByb3RvdHlwZSgpOiBPcGVyYXRpb25EZXRhaWxzIHwgUHJvbWlzZTxPcGVyYXRpb25EZXRhaWxzPjtcblxuICBwcm90ZWN0ZWQgb25TZWxlY3Rpb25DaGFuZ2UoZXZlbnQ6IFN0ZXBwZXJTZWxlY3Rpb25FdmVudCkge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgcHJldmlvdXNseVNlbGVjdGVkSW5kZXggfSA9IGV2ZW50O1xuICAgIGlmIChcbiAgICAgIHNlbGVjdGVkSW5kZXggPiBwcmV2aW91c2x5U2VsZWN0ZWRJbmRleCAmJlxuICAgICAgc2VsZWN0ZWRJbmRleCA8IE9iamVjdC5rZXlzKHRoaXMuc3RlcERhdGEpLmxlbmd0aFxuICAgICkge1xuICAgICAgLy8gVE9ETyBjbGVhciBzdGVwIGRhdGEgb25seSBpZiBwcmV2aW91cyBzdGVwIGlzIFwiZGlydHlcIlxuICAgICAgdGhpcy5zdGVwRGF0YVt0aGlzLmdldFN0ZXBEYXRhS2V5QnlJbmRleChzZWxlY3RlZEluZGV4KV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRTdGVwRGF0YUtleUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc3RlcERhdGEpW2luZGV4XTtcbiAgfVxufVxuIl19