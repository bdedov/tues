import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Subject } from 'rxjs';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
let BulkOperationsRescheduleModalComponent = class BulkOperationsRescheduleModalComponent {
    constructor(bsModalRef, bulkOperationsService, alert) {
        this.bsModalRef = bsModalRef;
        this.bulkOperationsService = bulkOperationsService;
        this.alert = alert;
        this.closeSubject = new Subject();
    }
    ngOnInit() {
        this.modalTitle = this.getTitle();
    }
    onDateAndDelaySelect($event) {
        this.dateAndDelay = $event;
    }
    getTitle() {
        return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');
    }
    onCancel() {
        this.bsModalRef.hide();
    }
    onSave() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let newBulkOperation;
            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
            if (this.isRetryOperation) {
                try {
                    newBulkOperation = yield this.bulkOperationsService.createBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled for a retry.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            else {
                try {
                    newBulkOperation = yield this.bulkOperationsService.updateBulkOperation(this.bulkOperation);
                    this.alert.success(gettext('Successfully rescheduled.'));
                }
                catch (er) {
                    this.alert.addServerFailure(er);
                }
            }
            // send back to component from which modal was called
            this.closeSubject.next(newBulkOperation.data);
            this.bsModalRef.hide();
        });
    }
};
BulkOperationsRescheduleModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: BulkOperationsService },
    { type: AlertService }
];
BulkOperationsRescheduleModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-bulk-operations-reschedule-modal',
        template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
    })
], BulkOperationsRescheduleModalComponent);
export { BulkOperationsRescheduleModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb25zLXJlc2NoZWR1bGUtbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zLyIsInNvdXJjZXMiOlsiYnVsay1vcGVyYXRpb25zLWxpc3QvbW9kYWxzL2J1bGstb3BlcmF0aW9ucy1yZXNjaGVkdWxlLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBTS9GLElBQWEsc0NBQXNDLEdBQW5ELE1BQWEsc0NBQXNDO0lBT2pELFlBQ1MsVUFBc0IsRUFDckIscUJBQTRDLEVBQzVDLEtBQW1CO1FBRnBCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDckIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxVQUFLLEdBQUwsS0FBSyxDQUFjO1FBVDdCLGlCQUFZLEdBQTRCLElBQUksT0FBTyxFQUFFLENBQUM7SUFVbkQsQ0FBQztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsb0JBQW9CLENBQUMsTUFBTTtRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUssTUFBTTs7WUFDVixJQUFJLGdCQUFnQixDQUFDO1lBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO1lBRW5FLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUN6QixJQUFJO29CQUNGLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDNUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUMsQ0FBQztpQkFDdEU7Z0JBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDakM7YUFDRjtpQkFBTTtnQkFDTCxJQUFJO29CQUNGLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDNUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQztpQkFDMUQ7Z0JBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDakM7YUFDRjtZQUVELHFEQUFxRDtZQUNyRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLENBQUM7S0FBQTtDQUNGLENBQUE7O1lBOUNzQixVQUFVO1lBQ0UscUJBQXFCO1lBQ3JDLFlBQVk7O0FBVmxCLHNDQUFzQztJQUpsRCxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsc0NBQXNDO1FBQ2hELHlzQ0FBOEQ7S0FDL0QsQ0FBQztHQUNXLHNDQUFzQyxDQXNEbEQ7U0F0RFksc0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPcGVyYXRpb25CdWxrIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCc01vZGFsUmVmIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPcGVyYXRpb25TY2hlZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zY2hlZHVsZXInO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWJ1bGstb3BlcmF0aW9ucy1yZXNjaGVkdWxlLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICdidWxrLW9wZXJhdGlvbnMtcmVzY2hlZHVsZS1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQnVsa09wZXJhdGlvbnNSZXNjaGVkdWxlTW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBjbG9zZVN1YmplY3Q6IFN1YmplY3Q8SU9wZXJhdGlvbkJ1bGs+ID0gbmV3IFN1YmplY3QoKTtcbiAgZGF0ZUFuZERlbGF5OiBPcGVyYXRpb25TY2hlZHVsZTtcbiAgYnVsa09wZXJhdGlvbjogUGFydGlhbDxJT3BlcmF0aW9uQnVsaz47XG4gIGlzUmV0cnlPcGVyYXRpb246IGJvb2xlYW47XG4gIG1vZGFsVGl0bGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgYnNNb2RhbFJlZjogQnNNb2RhbFJlZixcbiAgICBwcml2YXRlIGJ1bGtPcGVyYXRpb25zU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tb2RhbFRpdGxlID0gdGhpcy5nZXRUaXRsZSgpO1xuICB9XG5cbiAgb25EYXRlQW5kRGVsYXlTZWxlY3QoJGV2ZW50KSB7XG4gICAgdGhpcy5kYXRlQW5kRGVsYXkgPSAkZXZlbnQ7XG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1JldHJ5T3BlcmF0aW9uID8gZ2V0dGV4dCgnUmV0cnkgb3BlcmF0aW9uJykgOiBnZXR0ZXh0KCdFZGl0IHNjaGVkdWxlJyk7XG4gIH1cblxuICBvbkNhbmNlbCgpIHtcbiAgICB0aGlzLmJzTW9kYWxSZWYuaGlkZSgpO1xuICB9XG5cbiAgYXN5bmMgb25TYXZlKCkge1xuICAgIGxldCBuZXdCdWxrT3BlcmF0aW9uO1xuICAgIHRoaXMuYnVsa09wZXJhdGlvbi5zdGFydERhdGUgPSB0aGlzLmRhdGVBbmREZWxheS5zY2hlZHVsZWREYXRlLnRvSVNPU3RyaW5nKCk7XG4gICAgdGhpcy5idWxrT3BlcmF0aW9uLmNyZWF0aW9uUmFtcCA9IHRoaXMuZGF0ZUFuZERlbGF5LmRlbGF5SW5TZWNvbmRzO1xuXG4gICAgaWYgKHRoaXMuaXNSZXRyeU9wZXJhdGlvbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3QnVsa09wZXJhdGlvbiA9IGF3YWl0IHRoaXMuYnVsa09wZXJhdGlvbnNTZXJ2aWNlLmNyZWF0ZUJ1bGtPcGVyYXRpb24odGhpcy5idWxrT3BlcmF0aW9uKTtcbiAgICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ1N1Y2Nlc3NmdWxseSByZXNjaGVkdWxlZCBmb3IgYSByZXRyeS4nKSk7XG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXdCdWxrT3BlcmF0aW9uID0gYXdhaXQgdGhpcy5idWxrT3BlcmF0aW9uc1NlcnZpY2UudXBkYXRlQnVsa09wZXJhdGlvbih0aGlzLmJ1bGtPcGVyYXRpb24pO1xuICAgICAgICB0aGlzLmFsZXJ0LnN1Y2Nlc3MoZ2V0dGV4dCgnU3VjY2Vzc2Z1bGx5IHJlc2NoZWR1bGVkLicpKTtcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2VuZCBiYWNrIHRvIGNvbXBvbmVudCBmcm9tIHdoaWNoIG1vZGFsIHdhcyBjYWxsZWRcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5uZXh0KG5ld0J1bGtPcGVyYXRpb24uZGF0YSk7XG4gICAgdGhpcy5ic01vZGFsUmVmLmhpZGUoKTtcbiAgfVxufVxuIl19