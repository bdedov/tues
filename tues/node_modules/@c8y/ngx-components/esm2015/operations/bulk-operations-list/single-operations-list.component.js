import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { StatusFilterComponent } from '@c8y/ngx-components/operations/status-filter';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';
let SingleOperationsListComponent = class SingleOperationsListComponent {
    constructor(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
    }
    ngAfterViewInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.statusFilter) {
                this.filterOperationsByType();
            }
        });
    }
    ngOnChanges(changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    }
    filterOperationsByType() {
        if (this.statusFilter) {
            const typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.singleOperationStatusNames.ALL
                ? []
                : [{ label: typeFilter }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    }
    getFilterTypeOfSingleOperations() {
        const progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.singleOperationStatusNames.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.singleOperationStatusNames.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.SUCCESSFUL;
        }
        return this.singleOperationStatusNames.ALL;
    }
    getOperationsByStatus(filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.singleOperations = yield this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id);
        });
    }
    retryBulkOperation() {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    }
};
SingleOperationsListComponent.ctorParameters = () => [
    { type: BulkOperationsService }
];
tslib_1.__decorate([
    Input()
], SingleOperationsListComponent.prototype, "bulkOperation", void 0);
tslib_1.__decorate([
    Input()
], SingleOperationsListComponent.prototype, "readOnly", void 0);
tslib_1.__decorate([
    Output()
], SingleOperationsListComponent.prototype, "onRetryFailedOperations", void 0);
tslib_1.__decorate([
    ViewChild(StatusFilterComponent, { static: false })
], SingleOperationsListComponent.prototype, "statusFilter", void 0);
SingleOperationsListComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-single-operations-list',
        template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block\" translate>\n    Operations\n  </div>\n  <div class=\"flex-row p-b-8\">\n    <div class=\"flex-grow p-b-8\">\n      <span class=\"m-r-4\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"singleOperationStatusProperties\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i class=\"fa fa-repeat m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item\n          [operation]=\"operation\"\n          [readOnly]=\"readOnly\"\n          style=\"display: contents;\"\n        >\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
    })
], SingleOperationsListComponent);
export { SingleOperationsListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbnMtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvIiwic291cmNlcyI6WyJidWxrLW9wZXJhdGlvbnMtbGlzdC9zaW5nbGUtb3BlcmF0aW9ucy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFpQixNQUFNLDhDQUE4QyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQy9GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTXBHLElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0lBY3hDLFlBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBVmhFLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDaEIsNEJBQXVCLEdBQTBDLElBQUksWUFBWSxFQUFFLENBQUM7UUFLOUYsb0NBQStCLEdBQUcsMkJBQTJCLENBQUM7UUFDOUQsK0JBQTBCLEdBQUcsc0JBQXNCLENBQUM7SUFHZSxDQUFDO0lBRTlELGVBQWU7O1lBQ25CLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDckIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7YUFDL0I7UUFDSCxDQUFDO0tBQUE7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7WUFDL0QsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsc0JBQXNCO1FBQ3BCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsK0JBQStCLEVBQUUsQ0FBQztZQUUxRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FDdEIsVUFBVSxLQUFLLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxHQUFHO2dCQUNoRCxDQUFDLENBQUMsRUFBRTtnQkFDSixDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQW1CLENBQUMsQ0FDN0MsQ0FBQztTQUNIO2FBQU07WUFDTCxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQUVELCtCQUErQjtRQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQztTQUMvQzthQUFNLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDdkYsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsU0FBUyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsU0FBUyxLQUFLLENBQUMsRUFBRTtZQUN6RixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUM7U0FDaEQ7YUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFFO1lBQ3RGLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQztTQUNuRDtRQUVELE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLEdBQUcsQ0FBQztJQUM3QyxDQUFDO0lBRUsscUJBQXFCLENBQUMsTUFBdUI7O1lBQ2pELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FDbEYsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUN0QixDQUFDO1FBQ0osQ0FBQztLQUFBO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRixDQUFBOztZQXRENEMscUJBQXFCOztBQVpoRTtJQURDLEtBQUssRUFBRTtvRUFDK0I7QUFFdkM7SUFEQyxLQUFLLEVBQUU7K0RBQ2tCO0FBQ2hCO0lBQVQsTUFBTSxFQUFFOzhFQUFxRjtBQUc5RjtJQURDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQzttRUFDaEI7QUFSekIsNkJBQTZCO0lBSnpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsbzREQUFzRDtLQUN2RCxDQUFDO0dBQ1csNkJBQTZCLENBb0V6QztTQXBFWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJT3BlcmF0aW9uLCBJT3BlcmF0aW9uQnVsaywgSVJlc3VsdExpc3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdGF0dXNGaWx0ZXJDb21wb25lbnQsIElTdGF0dXNPcHRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvc3RhdHVzLWZpbHRlcic7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuaW1wb3J0IHsgU0lOR0xFX09QX1NUQVRVU19OQU1FUywgU0lOR0xFX09QX1NUQVRVU19QUk9QRVJUSUVTIH0gZnJvbSAnLi9zaW5nbGUtb3BlcmF0aW9uLWl0ZW0ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2luZ2xlLW9wZXJhdGlvbnMtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaW5nbGUtb3BlcmF0aW9ucy1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTaW5nbGVPcGVyYXRpb25zTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIGJ1bGtPcGVyYXRpb246IFBhcnRpYWw8SU9wZXJhdGlvbkJ1bGs+O1xuICBASW5wdXQoKVxuICByZWFkT25seTogYm9vbGVhbiA9IGZhbHNlO1xuICBAT3V0cHV0KCkgb25SZXRyeUZhaWxlZE9wZXJhdGlvbnM6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsPElPcGVyYXRpb25CdWxrPj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQFZpZXdDaGlsZChTdGF0dXNGaWx0ZXJDb21wb25lbnQsIHsgc3RhdGljOiBmYWxzZSB9KVxuICBzdGF0dXNGaWx0ZXI6IFN0YXR1c0ZpbHRlckNvbXBvbmVudDtcblxuICBzaW5nbGVPcGVyYXRpb25TdGF0dXNQcm9wZXJ0aWVzID0gU0lOR0xFX09QX1NUQVRVU19QUk9QRVJUSUVTO1xuICBzaW5nbGVPcGVyYXRpb25TdGF0dXNOYW1lcyA9IFNJTkdMRV9PUF9TVEFUVVNfTkFNRVM7XG4gIHNpbmdsZU9wZXJhdGlvbnM6IElSZXN1bHRMaXN0PElPcGVyYXRpb24+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnVsa09wZXJhdGlvbnNTZXJ2aWNlOiBCdWxrT3BlcmF0aW9uc1NlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLnN0YXR1c0ZpbHRlcikge1xuICAgICAgdGhpcy5maWx0ZXJPcGVyYXRpb25zQnlUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmJ1bGtPcGVyYXRpb24gJiYgIWNoYW5nZXMuYnVsa09wZXJhdGlvbi5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5maWx0ZXJPcGVyYXRpb25zQnlUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyT3BlcmF0aW9uc0J5VHlwZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0dXNGaWx0ZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVGaWx0ZXIgPSB0aGlzLmdldEZpbHRlclR5cGVPZlNpbmdsZU9wZXJhdGlvbnMoKTtcblxuICAgICAgdGhpcy5zdGF0dXNGaWx0ZXIucHJlc2V0KFxuICAgICAgICB0eXBlRmlsdGVyID09PSB0aGlzLnNpbmdsZU9wZXJhdGlvblN0YXR1c05hbWVzLkFMTFxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IFt7IGxhYmVsOiB0eXBlRmlsdGVyIH0gYXMgSVN0YXR1c09wdGlvbl1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5maWx0ZXJPcGVyYXRpb25zQnlUeXBlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIGdldEZpbHRlclR5cGVPZlNpbmdsZU9wZXJhdGlvbnMoKSB7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB0aGlzLmJ1bGtPcGVyYXRpb24ucHJvZ3Jlc3M7XG5cbiAgICBpZiAocHJvZ3Jlc3MuZmFpbGVkID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMuRkFJTEVEO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MuZmFpbGVkID09PSAwICYmIHByb2dyZXNzLnN1Y2Nlc3NmdWwgPT09IDAgJiYgcHJvZ3Jlc3MucGVuZGluZyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMuRVhFQ1VUSU5HO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MuZmFpbGVkID09PSAwICYmIHByb2dyZXNzLnN1Y2Nlc3NmdWwgPT09IDAgJiYgcHJvZ3Jlc3MuZXhlY3V0aW5nID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaW5nbGVPcGVyYXRpb25TdGF0dXNOYW1lcy5QRU5ESU5HO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MuZmFpbGVkID09PSAwICYmIHByb2dyZXNzLnBlbmRpbmcgPT09IDAgJiYgcHJvZ3Jlc3MuZXhlY3V0aW5nID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaW5nbGVPcGVyYXRpb25TdGF0dXNOYW1lcy5TVUNDRVNTRlVMO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNpbmdsZU9wZXJhdGlvblN0YXR1c05hbWVzLkFMTDtcbiAgfVxuXG4gIGFzeW5jIGdldE9wZXJhdGlvbnNCeVN0YXR1cyhmaWx0ZXI6IElTdGF0dXNPcHRpb25bXSkge1xuICAgIHRoaXMuc2luZ2xlT3BlcmF0aW9ucyA9IGF3YWl0IHRoaXMuYnVsa09wZXJhdGlvbnNTZXJ2aWNlLmdldFNpbmdsZU9wZXJhdGlvbnNCeVN0YXR1cyhcbiAgICAgIGZpbHRlclswXSAmJiBmaWx0ZXJbMF0ubGFiZWwsXG4gICAgICB0aGlzLmJ1bGtPcGVyYXRpb24uaWRcbiAgICApO1xuICB9XG5cbiAgcmV0cnlCdWxrT3BlcmF0aW9uKCkge1xuICAgIHRoaXMub25SZXRyeUZhaWxlZE9wZXJhdGlvbnMuZW1pdCh0aGlzLmJ1bGtPcGVyYXRpb24pO1xuICB9XG59XG4iXX0=