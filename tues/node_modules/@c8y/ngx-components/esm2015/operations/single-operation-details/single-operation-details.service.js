import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { IOperation, OperationService } from '@c8y/client';
import { SingleOperationModalComponent } from './single-operation-modal.component';
let SingleOperationDetailsService = class SingleOperationDetailsService {
    constructor(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    openDetails(operationOrOperationId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const operation = operationOrOperationId.id
                ? operationOrOperationId
                : (yield this.operationService.detail(operationOrOperationId)).data;
            const initialState = Object.assign({ operation }, options);
            this.modalService.show(SingleOperationModalComponent, {
                initialState,
                class: 'modal-lg'
            });
        });
    }
};
SingleOperationDetailsService.ctorParameters = () => [
    { type: OperationService },
    { type: BsModalService }
];
SingleOperationDetailsService = tslib_1.__decorate([
    Injectable()
], SingleOperationDetailsService);
export { SingleOperationDetailsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvIiwic291cmNlcyI6WyJzaW5nbGUtb3BlcmF0aW9uLWRldGFpbHMvc2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0QsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFHbkYsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7SUFDeEMsWUFBb0IsZ0JBQWtDLEVBQVUsWUFBNEI7UUFBeEUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUFHLENBQUM7SUFFaEc7Ozs7OztPQU1HO0lBQ0csV0FBVyxDQUNmLHNCQUFvRCxFQUNwRCxPQUFxRDs7WUFFckQsTUFBTSxTQUFTLEdBQWdCLHNCQUFxQyxDQUFDLEVBQUU7Z0JBQ3JFLENBQUMsQ0FBRSxzQkFBcUM7Z0JBQ3hDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3RFLE1BQU0sWUFBWSxtQkFBSyxTQUFTLElBQUssT0FBTyxDQUFFLENBQUM7WUFFL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUU7Z0JBQ3BELFlBQVk7Z0JBQ1osS0FBSyxFQUFFLFVBQVU7YUFDbEIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUF2QnVDLGdCQUFnQjtZQUF3QixjQUFjOztBQURqRiw2QkFBNkI7SUFEekMsVUFBVSxFQUFFO0dBQ0EsNkJBQTZCLENBd0J6QztTQXhCWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgSU9wZXJhdGlvbiwgT3BlcmF0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IFNpbmdsZU9wZXJhdGlvbk1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9zaW5nbGUtb3BlcmF0aW9uLW1vZGFsLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTaW5nbGVPcGVyYXRpb25EZXRhaWxzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3BlcmF0aW9uU2VydmljZTogT3BlcmF0aW9uU2VydmljZSwgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIG1vZGFsIHdpbmRvdyB3aXRoIHRoZSBkZXRhaWxzIG9mIGdpdmVuIHNpbmdsZSBvcGVyYXRpb24uXG4gICAqIEBwYXJhbSBvcGVyYXRpb25Pck9wZXJhdGlvbklkIE9wZXJhdGlvbidzIG9iamVjdCBvciBpZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zOlxuICAgKiAtIGBjb2xsYXBzZWRgOiBib29sZWFuIC0gd2hldGhlciB0aGUgZGV0YWlscyBwYW5lIHNob3VsZCBiZSBpbml0aWFsbHkgY29sbGFwc2VkXG4gICAqIC0gYHJlYWRPbmx5YDogYm9vbGVhbiAtIHdoZXRoZXIgdGhlIGRldGFpbHMgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiByZWFkLW9ubHkgbW9kZVxuICAgKi9cbiAgYXN5bmMgb3BlbkRldGFpbHMoXG4gICAgb3BlcmF0aW9uT3JPcGVyYXRpb25JZDogSU9wZXJhdGlvbiB8IHN0cmluZyB8IG51bWJlcixcbiAgICBvcHRpb25zPzogeyBjb2xsYXBzZWQ/OiBib29sZWFuOyByZWFkT25seT86IGJvb2xlYW4gfVxuICApIHtcbiAgICBjb25zdCBvcGVyYXRpb246IElPcGVyYXRpb24gPSAob3BlcmF0aW9uT3JPcGVyYXRpb25JZCBhcyBJT3BlcmF0aW9uKS5pZFxuICAgICAgPyAob3BlcmF0aW9uT3JPcGVyYXRpb25JZCBhcyBJT3BlcmF0aW9uKVxuICAgICAgOiAoYXdhaXQgdGhpcy5vcGVyYXRpb25TZXJ2aWNlLmRldGFpbChvcGVyYXRpb25Pck9wZXJhdGlvbklkKSkuZGF0YTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7IG9wZXJhdGlvbiwgLi4ub3B0aW9ucyB9O1xuXG4gICAgdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhTaW5nbGVPcGVyYXRpb25Nb2RhbENvbXBvbmVudCwge1xuICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgY2xhc3M6ICdtb2RhbC1sZydcbiAgICB9KTtcbiAgfVxufVxuIl19