import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { GroupFragment } from './group-fragment.model';
let DeviceGroupService = class DeviceGroupService {
    constructor() {
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'circle',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = `_${GroupFragment.dataBrokerSourceFragment}`;
    }
    isGroup(mo) {
        return !!mo[GroupFragment.groupFragmentType] || mo.type === GroupFragment.groupType || mo.type === GroupFragment.subGroupType;
    }
    isDynamicGroup(mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    }
    isDataBroker(mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive];
    }
    isDataBrokerActive(mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive];
    }
    icon(mo, open) {
        let type = 'other';
        if (this.isDynamicGroup(mo)) {
            type = 'dynamicGroup';
        }
        else if (this.isDataBrokerActive(mo)) {
            type = 'brokerSource';
        }
        else if (this.isDataBroker(mo)) {
            type = 'brokerSourceInactive';
        }
        else if (this.isGroup(mo)) {
            type = 'group';
        }
        const icon = this.icons[type];
        return (open && icon.iconOpen) || icon.icon;
    }
};
DeviceGroupService = tslib_1.__decorate([
    Injectable()
], DeviceGroupService);
export { DeviceGroupService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvci8iLCJzb3VyY2VzIjpbImdyb3VwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR3ZELElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBRC9CO1FBRUUsVUFBSyxHQUFHO1lBQ04sb0JBQW9CLEVBQUU7Z0JBQ3BCLElBQUksRUFBRSwyQkFBMkI7YUFDbEM7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLGtCQUFrQjtnQkFDeEIsUUFBUSxFQUFFLHVCQUF1QjthQUNsQztZQUNELEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsV0FBVztnQkFDakIsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjtZQUNELFlBQVksRUFBRTtnQkFDWixJQUFJLEVBQUUsaUJBQWlCO2dCQUN2QixRQUFRLEVBQUUsc0JBQXNCO2FBQ2pDO1lBQ0QsS0FBSyxFQUFFO2dCQUNMLElBQUksRUFBRSxRQUFRO2dCQUNkLFNBQVMsRUFBRSxlQUFlO2FBQzNCO1NBQ0YsQ0FBQztRQUNGLHFDQUFnQyxHQUFHLElBQUksYUFBYSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFnQ2xGLENBQUM7SUE5QkMsT0FBTyxDQUFDLEVBQUU7UUFDUixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNoSSxDQUFDO0lBRUQsY0FBYyxDQUFDLEVBQUU7UUFDZixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7SUFDaEcsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFFO1FBQ2IsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDckcsQ0FBQztJQUVELGtCQUFrQixDQUFDLEVBQUU7UUFDbkIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRCxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUk7UUFDWCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzNCLElBQUksR0FBRyxjQUFjLENBQUM7U0FDdkI7YUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QyxJQUFJLEdBQUcsY0FBYyxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hDLElBQUksR0FBRyxzQkFBc0IsQ0FBQztTQUMvQjthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQixJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzlDLENBQUM7Q0FDRixDQUFBO0FBdERZLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7R0FDQSxrQkFBa0IsQ0FzRDlCO1NBdERZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyb3VwRnJhZ21lbnQgfSBmcm9tICcuL2dyb3VwLWZyYWdtZW50Lm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZUdyb3VwU2VydmljZSB7XG4gIGljb25zID0ge1xuICAgIGJyb2tlclNvdXJjZUluYWN0aXZlOiB7XG4gICAgICBpY29uOiAnYzh5LWdyb3VwLXJlbW90ZS1pbmFjdGl2ZSdcbiAgICB9LFxuICAgIGJyb2tlclNvdXJjZToge1xuICAgICAgaWNvbjogJ2M4eS1ncm91cC1yZW1vdGUnLFxuICAgICAgaWNvbk9wZW46ICdjOHktZ3JvdXAtcmVtb3RlLW9wZW4nXG4gICAgfSxcbiAgICBncm91cDoge1xuICAgICAgaWNvbjogJ2M4eS1ncm91cCcsXG4gICAgICBpY29uT3BlbjogJ2M4eS1ncm91cC1vcGVuJ1xuICAgIH0sXG4gICAgZHluYW1pY0dyb3VwOiB7XG4gICAgICBpY29uOiAnYzh5LWdyb3VwLXNtYXJ0JyxcbiAgICAgIGljb25PcGVuOiAnYzh5LWdyb3VwLXNtYXJ0LW9wZW4nXG4gICAgfSxcbiAgICBvdGhlcjoge1xuICAgICAgaWNvbjogJ2NpcmNsZScsXG4gICAgICBpY29uQ2xhc3M6ICdzdGF0dXNVbmtub3duJ1xuICAgIH1cbiAgfTtcbiAgZGF0YUJyb2tlclNvdXJjZUZyYWdtZW50SW5hY3RpdmUgPSBgXyR7R3JvdXBGcmFnbWVudC5kYXRhQnJva2VyU291cmNlRnJhZ21lbnR9YDtcblxuICBpc0dyb3VwKG1vKSB7XG4gICAgcmV0dXJuICEhbW9bR3JvdXBGcmFnbWVudC5ncm91cEZyYWdtZW50VHlwZV0gfHwgbW8udHlwZSA9PT0gR3JvdXBGcmFnbWVudC5ncm91cFR5cGUgfHwgbW8udHlwZSA9PT0gR3JvdXBGcmFnbWVudC5zdWJHcm91cFR5cGU7XG4gIH1cblxuICBpc0R5bmFtaWNHcm91cChtbykge1xuICAgIHJldHVybiAhIW1vW0dyb3VwRnJhZ21lbnQuZHluYW1pY0dyb3VwRnJhZ21lbnRdIHx8IG1vLnR5cGUgPT09IEdyb3VwRnJhZ21lbnQuZHluYW1pY0dyb3VwVHlwZTtcbiAgfVxuXG4gIGlzRGF0YUJyb2tlcihtbykge1xuICAgIHJldHVybiAhIW1vW0dyb3VwRnJhZ21lbnQuZGF0YUJyb2tlclNvdXJjZUZyYWdtZW50XSB8fCAhIW1vW3RoaXMuZGF0YUJyb2tlclNvdXJjZUZyYWdtZW50SW5hY3RpdmVdO1xuICB9XG5cbiAgaXNEYXRhQnJva2VyQWN0aXZlKG1vKSB7XG4gICAgcmV0dXJuICEhbW9bR3JvdXBGcmFnbWVudC5kYXRhQnJva2VyU291cmNlRnJhZ21lbnRdICYmICFtb1t0aGlzLmRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudEluYWN0aXZlXTtcbiAgfVxuXG4gIGljb24obW8sIG9wZW4pIHtcbiAgICBsZXQgdHlwZSA9ICdvdGhlcic7XG4gICAgaWYgKHRoaXMuaXNEeW5hbWljR3JvdXAobW8pKSB7XG4gICAgICB0eXBlID0gJ2R5bmFtaWNHcm91cCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzRGF0YUJyb2tlckFjdGl2ZShtbykpIHtcbiAgICAgIHR5cGUgPSAnYnJva2VyU291cmNlJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNEYXRhQnJva2VyKG1vKSkge1xuICAgICAgdHlwZSA9ICdicm9rZXJTb3VyY2VJbmFjdGl2ZSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzR3JvdXAobW8pKSB7XG4gICAgICB0eXBlID0gJ2dyb3VwJztcbiAgICB9XG4gICAgY29uc3QgaWNvbiA9IHRoaXMuaWNvbnNbdHlwZV07XG4gICAgcmV0dXJuIChvcGVuICYmIGljb24uaWNvbk9wZW4pIHx8IGljb24uaWNvbjtcbiAgfVxufVxuIl19