import * as tslib_1 from "tslib";
import { gettext, NavigatorNode, DeviceStatusComponent } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { Subject } from 'rxjs';
import { LoadMoreNode } from './load-more-node';
import { GroupFragment } from './group-fragment.model';
import { Action } from './action.enum';
export class AssetNode extends NavigatorNode {
    constructor(service, config = {}) {
        super(config);
        this.service = service;
        this.root = this.root || false;
        this.mo = this.mo || {};
        this.path = this.root
            ? 'group'
            : this.isDeviceOrProbablyChildDevice
                ? `device/${this.mo.id}`
                : `group/${this.mo.id}`;
        this.draggable = !this.service.moduleConfig.disableDragAndDrop && !this.root;
        this.droppable =
            !this.service.moduleConfig.disableDragAndDrop && !this.isDeviceOrProbablyChildDevice;
        this.routerLinkExact = this.root;
        this.updateIcon(false);
        this.onUpdateSubscription = this.service
            .onUpdate(this)
            .subscribe(({ data, method }) => this.refresh(data, method));
    }
    get label() {
        return (this.root && gettext('Groups')) || this.mo.name || '--';
    }
    get hasChildren() {
        return this.root || this.service.groups.isGroup(this.mo);
    }
    get iconComponent() {
        return this.isDeviceOrProbablyChildDevice ? DeviceStatusComponent : undefined;
    }
    get isDevice() {
        return !!this.mo.c8y_IsDevice;
    }
    get isDeviceOrProbablyChildDevice() {
        return this.isDevice || this.isNeitherDeviceOrGroup;
    }
    get isNeitherDeviceOrGroup() {
        const { isGroup, isDynamicGroup } = this.service.groups;
        return !isGroup(this.mo) && !isDynamicGroup(this.mo) && !this.isDevice && !this.root;
    }
    openOnStart(url) {
        const urlRegex = /^\/group\//;
        if (this.root) {
            if (this.service.moduleConfig.openOnStart || urlRegex.test(url)) {
                return true;
            }
        }
        const matches = url.match(/\/(group)\/(\d+)/);
        let isMatch = false;
        if (matches) {
            const id = matches[2];
            isMatch = []
                .concat(get(this.mo, 'childAssets.references', []))
                .some(({ managedObject }) => managedObject.id === id);
            return isMatch;
        }
        return false;
    }
    refresh(mo = {}, method = 'GET') {
        if (mo.id === this.mo.id) {
            this.mo = mo;
        }
        else if (method === 'DELETE') {
            this.parents.forEach((node) => node.refresh());
            return;
        }
        if (this.events) {
            this.events.next(Action.REFRESH);
        }
    }
    click(options = {}) {
        if (this.isDeviceOrProbablyChildDevice) {
            this.service.preferBreadcrumb(this.parents);
            return;
        }
        this.hookEvents();
        this.updateIcon(options.open);
        if (options.open) {
            this.events.next(Action.FETCH);
        }
    }
    sort() {
        this.children.sort((a, b) => {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    addManagedObject(mo) {
        const { childAdditions } = this.mo;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode(mo));
        }
    }
    isChildAddition(childAdditions, mo) {
        return (childAdditions && childAdditions.references.some(({ managedObject: { id } }) => id === mo.id));
    }
    destroy() {
        this.onUpdateSubscription.unsubscribe();
    }
    get canDrop() {
        const nodeToMove = this.service.draggedData;
        if (nodeToMove) {
            const shouldGetChildOfItsOwn = !!nodeToMove.find(child => child === this);
            const isAlreadyChild = this.children.some(child => child.mo && child.mo.id === nodeToMove.mo.id);
            const preventMove = this === nodeToMove || shouldGetChildOfItsOwn || isAlreadyChild;
            return this.droppable && !preventMove;
        }
        return this.droppable;
    }
    dragStart($event) {
        super.dragStart($event);
        this.service.draggedData = this;
        this.service.rootNode.droppable = !this.isDeviceOrProbablyChildDevice;
    }
    dragEnd($event) {
        super.dragEnd($event);
    }
    drop($event) {
        const _super = Object.create(null, {
            drop: { get: () => super.drop }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            _super.drop.call(this, $event);
            const nodeToMove = this.service.draggedData;
            if (this.canDrop) {
                yield this.moveNode(nodeToMove);
            }
            else {
                this.draggedHover = false;
                this.service.draggedData = undefined;
            }
        });
    }
    hookEvents() {
        if (!this.events) {
            this.events = new Subject();
            this.events.subscribe(evt => {
                if (!this.loading) {
                    this.handleEvent(evt);
                }
            });
        }
    }
    fetch() {
        return this.root ? this.service.getRootNodes() : this.service.getGroupItems(this.mo.id);
    }
    handleEvent(evt) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.children.length && evt === Action.FETCH) {
                this.loading = true;
                this.addNodes(yield this.fetch());
                this.loading = false;
            }
            else if (evt === Action.NEXT) {
                this.loadMoreNode.loading = true;
                this.addNodes(yield this.paging.next());
                this.loadMoreNode.loading = false;
            }
            else if (evt === Action.REFRESH) {
                this.loading = false;
                this.paging = undefined;
                this.loadMoreNode = undefined;
                this.empty();
                this.events.next(Action.FETCH);
            }
        });
    }
    addNodes(res) {
        if (res.paging) {
            const { currentPage, nextPage, pageSize } = (this.paging = res.paging);
            if (currentPage === 1) {
                this.empty();
            }
            const itemsCount = res.data.length;
            const moreItemsAvailable = !!nextPage && itemsCount === pageSize;
            this.toggleLoadMore(moreItemsAvailable);
        }
        (res.data || res).map(mo => this.addManagedObject(mo));
        this.events.next(Action.LOADING_DONE);
    }
    toggleLoadMore(show) {
        if (!this.loadMoreNode && show) {
            this.loadMoreNode = new LoadMoreNode();
            this.add(this.loadMoreNode);
            this.loadMoreNode.click = () => this.events.next(Action.NEXT);
        }
        if (this.loadMoreNode) {
            this.loadMoreNode.hidden = !show;
        }
    }
    moveNode(nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const isCopy = yield this.showDropConfirm(nodeToMove);
                yield this.verifyNodeAccess(nodeToMove);
                yield this.addMovedNode(nodeToMove);
                if (!isCopy) {
                    yield this.removeMovedNode(nodeToMove);
                }
                this.expand();
            }
            catch (ex) {
                if (ex) {
                    this.service.alert.addServerFailure(ex);
                }
            }
            finally {
                this.draggedHover = false;
                this.service.draggedData = undefined;
            }
        });
    }
    showDropConfirm(nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.confirm.title = gettext('Move');
            this.confirm.message = gettext('Do you want to move the group?');
            const buttons = [
                {
                    label: gettext('Cancel'),
                    action: () => Promise.reject()
                },
                {
                    label: gettext('Move'),
                    status: 'default',
                    action: () => Promise.resolve(false)
                }
            ];
            if (nodeToMove.isDeviceOrProbablyChildDevice) {
                this.confirm.title = gettext('Move or add');
                this.confirm.message = gettext('Do you want to move or add the device?');
                buttons.push({
                    label: gettext('Add'),
                    status: 'primary',
                    action: () => Promise.resolve(true)
                });
            }
            return this.confirm.show(buttons);
        });
    }
    verifyNodeAccess(nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.service.inventory.update({ id: nodeToMove.mo.id });
        });
    }
    addMovedNode(nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let mo;
            if (this.root) {
                const { data } = yield this.service.inventory.update({
                    id: nodeToMove.mo.id,
                    type: GroupFragment.groupType
                });
                mo = data;
            }
            else {
                const { data } = yield this.service.inventory.childAssetsAdd(nodeToMove.mo, this.mo);
                mo = data;
            }
            this.addManagedObject(mo);
        });
    }
    removeMovedNode(nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const parent of nodeToMove.parents) {
                if (parent.mo && parent.mo.type === GroupFragment.dynamicGroupType) {
                    break; // smart groups don't need to be changed
                }
                if (parent.root) {
                    yield this.service.inventory.update({
                        id: nodeToMove.mo.id,
                        type: GroupFragment.subGroupType
                    });
                }
                else {
                    yield this.service.inventory.childAssetsRemove(nodeToMove.mo, parent.mo);
                }
                parent.remove(nodeToMove);
            }
        });
    }
    updateIcon(open) {
        this.icon = this.service.groups.icon(
        // if it's root we are going to pass a fake mo to get the same icon as groups
        this.root ? { type: GroupFragment.groupType } : this.mo, open);
    }
}
//# sourceMappingURL=data:application/json;base64,