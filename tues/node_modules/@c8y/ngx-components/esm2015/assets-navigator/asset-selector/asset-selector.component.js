import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter } from '@angular/core';
import { GroupNodeService } from './group-node.service';
/**
 * Displays a hierarchical tree selector for assets.
 */
let AssetSelectorComponent = class AssetSelectorComponent {
    /**
     * @ignore only DI
     */
    constructor(groupNodeService) {
        this.groupNodeService = groupNodeService;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onChange = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.rootNode = this.groupNodeService.createGroupNode({ root: true });
    }
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    select(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(selectedMo);
        }
        this.onChange.emit(this.selected);
    }
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    deselect(selectedMo) {
        const index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.onChange.emit(this.selected);
    }
    getIndexOfSelected(selected, selectedMo) {
        return selected.findIndex(mo => mo.id === selectedMo.id);
    }
};
AssetSelectorComponent.ctorParameters = () => [
    { type: GroupNodeService }
];
tslib_1.__decorate([
    Input()
], AssetSelectorComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Output()
], AssetSelectorComponent.prototype, "onChange", void 0);
AssetSelectorComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-asset-selector',
        template: "<c8y-asset-selector-node [node]=\"rootNode\" [preselected]=\"selected\"></c8y-asset-selector-node>\n"
    })
], AssetSelectorComponent);
export { AssetSelectorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yLyIsInNvdXJjZXMiOlsiYXNzZXQtc2VsZWN0b3IvYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhEOztHQUVHO0FBS0gsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFjakM7O09BRUc7SUFDSCxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWhCdEQ7O1dBRUc7UUFDTSxhQUFRLEdBQXFCLEVBQUUsQ0FBQztRQUN6Qzs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztJQVNELENBQUM7SUFFMUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxVQUEwQjtRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNoQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLFVBQTBCO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxRQUF3QyxFQUFFLFVBQTBCO1FBQ3JGLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRixDQUFBOztZQXBDdUMsZ0JBQWdCOztBQWI3QztJQUFSLEtBQUssRUFBRTt3REFBaUM7QUFJL0I7SUFBVCxNQUFNLEVBQUU7d0RBQWlEO0FBUi9DLHNCQUFzQjtJQUpsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLGdIQUE4QztLQUMvQyxDQUFDO0dBQ1csc0JBQXNCLENBcURsQztTQXJEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cE5vZGVTZXJ2aWNlIH0gZnJvbSAnLi9ncm91cC1ub2RlLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JvdXBOb2RlIH0gZnJvbSAnLi9ncm91cC1ub2RlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG4vKipcbiAqIERpc3BsYXlzIGEgaGllcmFyY2hpY2FsIHRyZWUgc2VsZWN0b3IgZm9yIGFzc2V0cy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFzc2V0LXNlbGVjdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Fzc2V0LXNlbGVjdG9yLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBc3NldFNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIHByZWRlZmluZWQgbm9kZXMuXG4gICAqL1xuICBASW5wdXQoKSBzZWxlY3RlZDogSU1hbmFnZWRPYmplY3RbXSA9IFtdO1xuICAvKipcbiAgICogRW1pdHMgaWYgb25lIGl0ZW0gd2FzIHNlbGVjdGVkIChhbGwgY3VycmVudGx5IHNlbGVjdGVkIG5vZGVzKS5cbiAgICovXG4gIEBPdXRwdXQoKSBvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8SU1hbmFnZWRPYmplY3RbXT4oKTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvb3ROb2RlOiBHcm91cE5vZGU7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgb25seSBESVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBncm91cE5vZGVTZXJ2aWNlOiBHcm91cE5vZGVTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJvb3ROb2RlID0gdGhpcy5ncm91cE5vZGVTZXJ2aWNlLmNyZWF0ZUdyb3VwTm9kZSh7IHJvb3Q6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBtYW5hZ2VkIG9iamVjdCB0byB0aGUgc2VsZWN0ZWQgYXJyYXkgYW5kIGVtaXRzIHRoZSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1vIFRoZSBzZWxlY3RlZCBhc3NldC5cbiAgICovXG4gIHNlbGVjdChzZWxlY3RlZE1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleE9mU2VsZWN0ZWQodGhpcy5zZWxlY3RlZCwgc2VsZWN0ZWRNbyk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZC5wdXNoKHNlbGVjdGVkTW8pO1xuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIG1hbmFnZWQgb2JqZWN0IGZyb20gdGhlIHNlbGVjdGVkIGFycmF5IGFuZCBlbWl0cyB0aGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRNbyBUaGUgc2VsZWN0ZWQgYXNzZXQuXG4gICAqL1xuICBkZXNlbGVjdChzZWxlY3RlZE1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleE9mU2VsZWN0ZWQodGhpcy5zZWxlY3RlZCwgc2VsZWN0ZWRNbyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICB9XG5cbiAgZ2V0SW5kZXhPZlNlbGVjdGVkKHNlbGVjdGVkOiBBcnJheTxQYXJ0aWFsPElNYW5hZ2VkT2JqZWN0Pj4sIHNlbGVjdGVkTW86IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkLmZpbmRJbmRleChtbyA9PiBtby5pZCA9PT0gc2VsZWN0ZWRNby5pZCk7XG4gIH1cbn1cbiJdfQ==