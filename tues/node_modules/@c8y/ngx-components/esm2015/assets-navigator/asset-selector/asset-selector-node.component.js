import * as tslib_1 from "tslib";
import { Component, Input, OnInit, ChangeDetectorRef } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { GroupNode } from './group-node';
import { Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';
import { Action } from '../action.enum';
import { AssetSelectorComponent } from './asset-selector.component';
let AssetSelectorNodeComponent = class AssetSelectorNodeComponent {
    /**
     * @ignore only di
     */
    constructor(translateService, cd, parentNode) {
        this.translateService = translateService;
        this.cd = cd;
        this.parentNode = parentNode;
        /**
         * All preselected items
         */
        this.preselected = [];
        /**
         *  Should the path be shown
         */
        this.showPath = false;
        /**
         * @ignore
         */
        this.level = 0;
        /**
         * The selection status of the node
         */
        this.checked = false;
        /**
         * @ignore
         */
        this.unsubscribe$ = new Subject();
    }
    /**
     * @ignore
     */
    get expandTitle() {
        return !this.node.open ? gettext('Expand') : gettext('Collapse');
    }
    /**
     * @ignore
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.breadcrumb = this.node.label;
            this.setupBreadcrumbsAndLevel(this.node);
            if (this.node instanceof GroupNode) {
                this.node.hookEvents();
            }
            // open on startup
            if (this.node.root) {
                this.click();
            }
            if (this.node.events) {
                this.node.events
                    .pipe(takeUntil(this.unsubscribe$), filter((a) => a === Action.LOADING_DONE))
                    .subscribe(() => {
                    this.cd.markForCheck();
                });
            }
            this.checked = this.isPreselected();
        });
    }
    /**
     * Opens a node.
     */
    click() {
        this.node.open = !this.node.open;
        this.node.click({ open: this.node.open });
    }
    /**
     * TODO: Only level used. Breadcrumbs needs to be implemented.
     */
    setupBreadcrumbsAndLevel(node) {
        if (node.parents && node.parents.length) {
            const parent = node.parents[0];
            this.breadcrumb = this.translateService.instant(parent.label) + ' > ' + this.breadcrumb;
            this.level++;
            this.setupBreadcrumbsAndLevel(parent);
        }
    }
    /**
     * Selects the node and emits a change on the parent component.
     * @param node The node to select.
     */
    selected(node) {
        this.checked = !this.checked;
        this.updateSelection(node.mo);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    }
    isPreselected() {
        if (this.node.root || !this.node.mo) {
            return false;
        }
        return this.parentNode.getIndexOfSelected(this.preselected, this.node.mo) > -1;
    }
    updateSelection(selectedMo) {
        if (this.checked) {
            this.parentNode.select(selectedMo);
            return;
        }
        this.parentNode.deselect(selectedMo);
    }
};
AssetSelectorNodeComponent.ctorParameters = () => [
    { type: TranslateService },
    { type: ChangeDetectorRef },
    { type: AssetSelectorComponent }
];
tslib_1.__decorate([
    Input()
], AssetSelectorNodeComponent.prototype, "node", void 0);
tslib_1.__decorate([
    Input()
], AssetSelectorNodeComponent.prototype, "preselected", void 0);
tslib_1.__decorate([
    Input()
], AssetSelectorNodeComponent.prototype, "showPath", void 0);
AssetSelectorNodeComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-asset-selector-node',
        template: "<div\n  class=\"d-flex collapsible\"\n  [ngClass]=\"{ 'expanded separator-top': node.open }\"\n  title=\"{{ breadcrumb | translate }}\"\n  *ngIf=\"!node.root && !node.hidden\"\n>\n  <div\n    class=\"p-t-8 p-b-8 m-r-8\"\n    [ngStyle]=\"{ 'padding-left': level < 6 ? (level - 1) * 8 + 'px' : '24px' }\"\n    [style.visibility]=\"node.routerLinkExact ? 'hidden' : 'visible'\"\n  >\n    <label class=\"c8y-checkbox\" style=\"margin-top: 1px;\">\n      <input type=\"checkbox\" (change)=\"selected(node)\" [checked]=\"checked\" />\n      <span></span>\n    </label>\n  </div>\n  <div\n    class=\"flex-grow flex-item-middle p-t-8 p-b-8 text-truncate p-r-8\"\n    [style.cursor]=\"node.routerLinkExact ? 'pointer' : 'normal'\"\n    (click)=\"node.routerLinkExact ? node.click() : ''\"\n  >\n    <i\n      [c8yIcon]=\"node.icon\"\n      *ngIf=\"node.icon === 'c8y-group-smart'\"\n      [title]=\"'Smart group' | translate\"\n      class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n    ></i>\n    <i\n      [c8yIcon]=\"node.icon\"\n      *ngIf=\"node.icon !== 'c8y-group-smart'\"\n      [title]=\"'Group' | translate\"\n      class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n    ></i>\n    <span title=\"{{ breadcrumb }}\">\n      {{ node.label | translate }}\n      <!-- use just for search results to display the path -->\n      <p *ngIf=\"showPath\" class=\"text-truncate\">\n        <small class=\"text-muted\" title=\"{{ breadcrumb }}\">\n          <em>{{ breadcrumb }}</em>\n        </small>\n      </p>\n      <!-- up to here -->\n    </span>\n  </div>\n  <div>\n    <button\n      [title]=\"expandTitle\"\n      class=\"collapse-btn btn\"\n      (click)=\"click()\"\n      [attr.aria-expanded]=\"!node.open\"\n    >\n      <i c8yIcon=\"angle-down\" [ngClass]=\"{ 'text-primary': node.open }\"></i>\n    </button>\n  </div>\n</div>\n<div class=\"collapse\" [ngClass]=\"{ 'separator-bottom': node.open }\" [collapse]=\"!node.open\">\n  <c8y-asset-selector-node\n    *ngFor=\"let childNode of node.children\"\n    [node]=\"childNode\"\n    [preselected]=\"preselected || []\"\n  ></c8y-asset-selector-node>\n</div>\n"
    })
], AssetSelectorNodeComponent);
export { AssetSelectorNodeComponent };
//# sourceMappingURL=data:application/json;base64,