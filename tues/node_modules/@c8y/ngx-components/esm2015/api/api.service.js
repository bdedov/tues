import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions } from '@c8y/client';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
let ApiService = class ApiService {
    constructor(client) {
        this.client = client;
        this.callsSubject = new Subject();
        this.calls = this.callsSubject.asObservable();
        this.hookIntoClientFetch();
    }
    hookResponse(hookFilter) {
        return this.callsSubject.pipe(filter(({ phase }) => phase === 'finish'), filter(hookFilter));
    }
    hookRequest(hookFilter) {
        return this.callsSubject.pipe(filter(({ phase }) => phase === 'start'), filter(hookFilter));
    }
    onFinish(call) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.callsSubject.next(Object.assign({ phase: 'finish' }, call));
        });
    }
    onStart(call) {
        this.callsSubject.next(Object.assign({ phase: 'start' }, call));
    }
    resolveData(call) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { response, method } = call;
            if ('data' in response) {
                return Promise.resolve({ data: response.data, method });
            }
            else {
                const cb = (data) => ({ data, method });
                return response.clone().json().then(cb, cb);
            }
        });
    }
    hookIntoClientFetch() {
        const fetch = this.client.fetch.bind(this.client);
        this.client.fetch = (url, options = { method: 'GET' }) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { method } = options;
            this.onStart({ options, method, url });
            let fetchPromise = fetch(url, options);
            if (typeof options.responseInterceptor === 'function') {
                fetchPromise = fetchPromise.then(options.responseInterceptor);
            }
            fetchPromise.then((response) => this.onFinish({ response, url, options, method }), (response) => this.onFinish({ response, url, options, method }));
            return fetchPromise;
        });
    }
};
ApiService.ctorParameters = () => [
    { type: FetchClient }
];
ApiService = tslib_1.__decorate([
    Injectable()
], ApiService);
export { ApiService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXBpL2FwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3hDLElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7SUFJckIsWUFBb0IsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUYvQixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFHNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZLENBQUMsVUFBc0M7UUFDakQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDM0IsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUFDLFVBQXNDO1FBQ2hELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxPQUFPLENBQUMsRUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUNuQixDQUFDO0lBQ0osQ0FBQztJQUVLLFFBQVEsQ0FBQyxJQUFhOztZQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksaUJBQUcsS0FBSyxFQUFFLFFBQVEsSUFBSyxJQUFJLEVBQUcsQ0FBQztRQUN2RCxDQUFDO0tBQUE7SUFFRCxPQUFPLENBQUMsSUFBYTtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksaUJBQUcsS0FBSyxFQUFFLE9BQU8sSUFBSyxJQUFJLEVBQUcsQ0FBQztJQUN0RCxDQUFDO0lBRUssV0FBVyxDQUFDLElBQWE7O1lBQzdCLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ2xDLElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRTtnQkFDdEIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUN6RDtpQkFBTTtnQkFDTCxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFRLFFBQXFCLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUM7S0FBQTtJQUVPLG1CQUFtQjtRQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQU8sR0FBRyxFQUFFLFVBQTBDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7WUFDNUYsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxtQkFBbUIsS0FBSyxVQUFVLEVBQUU7Z0JBQ3JELFlBQVksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQy9EO1lBQ0QsWUFBWSxDQUFDLElBQUksQ0FDZixDQUFDLFFBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUN6RSxDQUFDLFFBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUMxRSxDQUFDO1lBQ0YsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxDQUFBLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTs7WUFyRDZCLFdBQVc7O0FBSjVCLFVBQVU7SUFEdEIsVUFBVSxFQUFFO0dBQ0EsVUFBVSxDQXlEdEI7U0F6RFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJRmV0Y2hPcHRpb25zIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBpQ2FsbCwgQXBpQ2FsbE9wdGlvbnMgfSBmcm9tICcuL2FwaS5tb2RlbCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcGlTZXJ2aWNlIHtcbiAgY2FsbHM6IE9ic2VydmFibGU8QXBpQ2FsbD47XG4gIHByaXZhdGUgY2FsbHNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8QXBpQ2FsbD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQpIHtcbiAgICB0aGlzLmNhbGxzID0gdGhpcy5jYWxsc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5ob29rSW50b0NsaWVudEZldGNoKCk7XG4gIH1cblxuICBob29rUmVzcG9uc2UoaG9va0ZpbHRlcjogKGNhbGw6IEFwaUNhbGwpID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsc1N1YmplY3QucGlwZShcbiAgICAgIGZpbHRlcigoeyBwaGFzZSB9KSA9PiBwaGFzZSA9PT0gJ2ZpbmlzaCcpLFxuICAgICAgZmlsdGVyKGhvb2tGaWx0ZXIpXG4gICAgKTtcbiAgfVxuXG4gIGhvb2tSZXF1ZXN0KGhvb2tGaWx0ZXI6IChjYWxsOiBBcGlDYWxsKSA9PiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbHNTdWJqZWN0LnBpcGUoXG4gICAgICBmaWx0ZXIoKHsgcGhhc2UgfSkgPT4gcGhhc2UgPT09ICdzdGFydCcpLFxuICAgICAgZmlsdGVyKGhvb2tGaWx0ZXIpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG9uRmluaXNoKGNhbGw6IEFwaUNhbGwpIHtcbiAgICB0aGlzLmNhbGxzU3ViamVjdC5uZXh0KHsgcGhhc2U6ICdmaW5pc2gnLCAuLi5jYWxsIH0pO1xuICB9XG5cbiAgb25TdGFydChjYWxsOiBBcGlDYWxsKSB7XG4gICAgdGhpcy5jYWxsc1N1YmplY3QubmV4dCh7IHBoYXNlOiAnc3RhcnQnLCAuLi5jYWxsIH0pO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZURhdGEoY2FsbDogQXBpQ2FsbCk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyByZXNwb25zZSwgbWV0aG9kIH0gPSBjYWxsO1xuICAgIGlmICgnZGF0YScgaW4gcmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiByZXNwb25zZS5kYXRhLCBtZXRob2QgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNiID0gKGRhdGEpID0+ICh7IGRhdGEsIG1ldGhvZH0pO1xuICAgICAgcmV0dXJuIChyZXNwb25zZSBhcyBSZXNwb25zZSkuY2xvbmUoKS5qc29uKCkudGhlbihjYiwgY2IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaG9va0ludG9DbGllbnRGZXRjaCgpIHtcbiAgICBjb25zdCBmZXRjaCA9IHRoaXMuY2xpZW50LmZldGNoLmJpbmQodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuY2xpZW50LmZldGNoID0gYXN5bmMgKHVybCwgb3B0aW9uczogQXBpQ2FsbE9wdGlvbnMgJiBJRmV0Y2hPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnfSkgPT4ge1xuICAgICAgY29uc3QgeyBtZXRob2QgfSA9IG9wdGlvbnM7XG4gICAgICB0aGlzLm9uU3RhcnQoeyBvcHRpb25zLCBtZXRob2QsIHVybCB9KTtcbiAgICAgIGxldCBmZXRjaFByb21pc2UgPSBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlc3BvbnNlSW50ZXJjZXB0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmV0Y2hQcm9taXNlID0gZmV0Y2hQcm9taXNlLnRoZW4ob3B0aW9ucy5yZXNwb25zZUludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIGZldGNoUHJvbWlzZS50aGVuKFxuICAgICAgICAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB0aGlzLm9uRmluaXNoKHsgcmVzcG9uc2UsIHVybCwgb3B0aW9ucywgbWV0aG9kIH0pLFxuICAgICAgICAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB0aGlzLm9uRmluaXNoKHsgcmVzcG9uc2UsIHVybCwgb3B0aW9ucywgbWV0aG9kIH0pXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZldGNoUHJvbWlzZTtcbiAgICB9O1xuICB9XG59XG4iXX0=