import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { SensorPhoneModalComponent } from './sensor-phone-modal.component';
import { AppStateService } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { head } from 'lodash-es';
import { gettext } from '@c8y/ngx-components';
let SensorPhoneService = class SensorPhoneService {
    constructor(bsModalService, ui, inventoryService) {
        this.bsModalService = bsModalService;
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    createModal() {
        this.bsModalService.show(SensorPhoneModalComponent, {
            backdrop: 'static',
            class: 'lg'
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
};
SensorPhoneService.ctorParameters = () => [
    { type: BsModalService },
    { type: AppStateService },
    { type: InventoryService }
];
SensorPhoneService = tslib_1.__decorate([
    Injectable()
], SensorPhoneService);
export { SensorPhoneService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3NlbnNvci1waG9uZS8iLCJzb3VyY2VzIjpbInNlbnNvci1waG9uZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzlDLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBVTdCLFlBQ1UsY0FBOEIsRUFDOUIsRUFBbUIsRUFDbkIsZ0JBQWtDO1FBRmxDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWm5DLHFCQUFnQixHQUFHO1lBQzFCLEVBQUUsRUFBRSxHQUFHO1lBQ1AsT0FBTyxFQUFFLEdBQUc7U0FDYixDQUFDO1FBR00seUJBQW9CLEdBQUcsd0JBQXdCLENBQUM7UUFDdkMscUJBQWdCLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBT3BELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQyxJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNsRCxRQUFRLEVBQUUsUUFBUTtZQUNsQixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVLLHFCQUFxQjs7WUFDekIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JELFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CO2FBQ3hDLENBQUMsQ0FBQztZQUNILElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25CO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQUE7SUFFSyxhQUFhOztZQUNqQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQ2pELElBQUksS0FBSyxFQUFFO2dCQUNULE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDdkMsQ0FBQztLQUFBO0lBRUssZ0JBQWdCOztZQUNwQixNQUFNLGFBQWEsR0FBRztnQkFDcEIsVUFBVSxFQUFFLEVBQUU7Z0JBQ2QsaUJBQWlCLEVBQUUsRUFBRTtnQkFDckIsSUFBSSxFQUFFLGlCQUFpQjtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQzNCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFBRTthQUNoQyxDQUFDO1lBRUYsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDeEUsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtnQkFDL0QsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUFBO0lBRUQsd0JBQXdCLENBQUMsUUFBUTtRQUMvQixNQUFNLEdBQUcsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsYUFBYSxHQUFHLFFBQVEsQ0FBQztRQUM5RixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRixDQUFBOztZQXJFMkIsY0FBYztZQUMxQixlQUFlO1lBQ0QsZ0JBQWdCOztBQWJqQyxrQkFBa0I7SUFEOUIsVUFBVSxFQUFFO0dBQ0Esa0JBQWtCLENBZ0Y5QjtTQWhGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgU2Vuc29yUGhvbmVNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vc2Vuc29yLXBob25lLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEludmVudG9yeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBoZWFkIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlbnNvclBob25lU2VydmljZSB7XG4gIHJlYWRvbmx5IEhUVFBfU1RBVFVTX0NPREUgPSB7XG4gICAgT0s6IDIwMCxcbiAgICBDUkVBVEVEOiAyMDFcbiAgfTtcbiAgcHJpdmF0ZSBkb21haW5OYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgdGVuYW50SWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBQSE9ORV9HUk9VUF9GUkFHTUVOVCA9ICdjOHlfSXNTZW5zb3JQaG9uZUdyb3VwJztcbiAgcHJpdmF0ZSByZWFkb25seSBQSE9ORV9HUk9VUF9OQU1FID0gZ2V0dGV4dCgnUGhvbmVzJyk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBic01vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB1aTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZVxuICApIHtcbiAgICB0aGlzLnVpLmN1cnJlbnRUZW5hbnQuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kb21haW5OYW1lID0gZGF0YS5kb21haW5OYW1lO1xuICAgICAgICB0aGlzLnRlbmFudElkID0gZGF0YS5uYW1lO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlTW9kYWwoKSB7XG4gICAgdGhpcy5ic01vZGFsU2VydmljZS5zaG93KFNlbnNvclBob25lTW9kYWxDb21wb25lbnQsIHtcbiAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgIGNsYXNzOiAnbGcnXG4gICAgfSk7XG4gIH1cblxuICBnZXRIb3N0KCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3Vic3RyaW5nKHRoaXMuZG9tYWluTmFtZS5pbmRleE9mKCcuJykgKyAxKTtcbiAgfVxuXG4gIGdldFRlbmFudE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tYWluTmFtZS5zcGxpdCgnLicpWzBdO1xuICB9XG5cbiAgZ2V0VGVuYW50SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVuYW50SWQ7XG4gIH1cblxuICBhc3luYyBjaGVja1Bob25lR3JvdXBFeGlzdHMoKSB7XG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KHtcbiAgICAgIGZyYWdtZW50VHlwZTogdGhpcy5QSE9ORV9HUk9VUF9GUkFHTUVOVFxuICAgIH0pO1xuICAgIGlmIChkYXRhICYmIHJlcyAmJiByZXMuc3RhdHVzID09PSB0aGlzLkhUVFBfU1RBVFVTX0NPREUuT0spIHtcbiAgICAgIHJldHVybiBoZWFkKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGFkZFBob25lR3JvdXAoKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCB0aGlzLmNoZWNrUGhvbmVHcm91cEV4aXN0cygpO1xuICAgIGlmIChncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVQaG9uZUdyb3VwKCk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IG5ld1Bob25lR3JvdXAgPSB7XG4gICAgICBjOHlfR2xvYmFsOiB7fSxcbiAgICAgIGM4eV9Jc0RldmljZUdyb3VwOiB7fSxcbiAgICAgIHR5cGU6ICdjOHlfRGV2aWNlR3JvdXAnLFxuICAgICAgbmFtZTogdGhpcy5QSE9ORV9HUk9VUF9OQU1FLFxuICAgICAgW3RoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRdOiB7fVxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIHJlcyB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmNyZWF0ZShuZXdQaG9uZUdyb3VwKTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLkNSRUFURUQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdlbmVyYXRlUmVnaXN0cmF0aW9uRGF0YShkZXZpY2VJZCkge1xuICAgIGNvbnN0IHJlcyA9ICdjOHk6Ly8nICsgdGhpcy5nZXRUZW5hbnROYW1lKCkgKyAnLicgKyB0aGlzLmdldEhvc3QoKSArICcvP2RldmljZUlkPScgKyBkZXZpY2VJZDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG4iXX0=