import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { IManagedObject, InventoryService, IResultList, UserService } from '@c8y/client';
import { AppStateService, getActivatedRoute, gettext, ModalService, NavigatorNode, NavigatorService, Status, TabsService, ViewContext, Widget, Permissions } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { assign, pick, some, keys, keyBy, has, get, forEach, cloneDeep } from 'lodash-es';
import { from, of } from 'rxjs';
import { catchError, filter, map, mergeAll, mergeMap, tap, toArray, throwIfEmpty } from 'rxjs/operators';
import { ContextDashboardType } from './context-dashboard.model';
let ContextDashboardService = class ContextDashboardService {
    constructor(inventory, tabs, modal, translateService, router, user, appState, navigator, permissions) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.user = user;
        this.appState = appState;
        this.navigator = navigator;
        this.permissions = permissions;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    get formDisabled() {
        return this._formDisabled;
    }
    set formDisabled(value) {
        this._formDisabled = value;
    }
    create(dashboardCfg, contextOrName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let id;
            let dashboardType;
            if (typeof contextOrName === 'string') {
                id = contextOrName;
                dashboardType = ContextDashboardType.Named;
            }
            else {
                id = contextOrName.contextData.id;
                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, contextOrName);
            }
            const dashboard = {};
            assign(dashboard, { c8y_Dashboard: dashboardCfg });
            const value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : id;
            const fragmentKey = this.createFragmentKey(dashboardType, value);
            dashboard[fragmentKey] = {};
            if (this.shouldSetGlobal(dashboard)) {
                assign(dashboard, { c8y_Global: {} });
            }
            dashboard.name = dashboard.c8y_Dashboard.name;
            const { data } = dashboardType === ContextDashboardType.Group || dashboardType === ContextDashboardType.Device
                ? yield this.inventory.childAdditionsCreate(dashboard, id)
                : yield this.inventory.create(dashboard);
            return data;
        });
    }
    detail(dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventory.detail(dashboardMO);
            this.cache.set(dashboardMO.id, data);
            return data;
        });
    }
    update(dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            dashboard.name = dashboard.c8y_Dashboard.name;
            const keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
            keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
            const { data } = yield this.inventory.update(keepFragments);
            this.cache.set(dashboard.id, data);
            return data;
        });
    }
    delete(dashboard, withConfirmation = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (withConfirmation) {
                    let msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}". Do you want to proceed?`);
                    if (this.isDeviceType(dashboard)) {
                        msg = gettext(`You are about to delete the dashboard "{{ dashboardName }}" from all devices of the type "{{ deviceType }}".
           Do you want to proceed?`);
                    }
                    yield this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                        dashboardName: dashboard.c8y_Dashboard.name,
                        deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                    }), Status.DANGER, {
                        ok: gettext('Delete'),
                        cancel: gettext('Cancel')
                    });
                }
                yield this.inventory.delete(dashboard);
                const tabToRemove = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboard.id}`));
                this.tabs.remove(tabToRemove);
                this.tabs.refresh();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    activateDashboards(route, types) {
        const { dashboardId } = route.params;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(dashboard => {
                route.data = { dashboard };
            }), map(() => true), catchError(() => {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    }
    getNamedDashboardOrCreate(name, defaultWidgets) {
        const children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(() => from(this.create({
            children,
            widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
        }, name))));
    }
    refreshTabs(dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.isNamed(dashboardMO)) {
                const tabToUpdate = Array.from(this.tabs.state).find(tab => tab.path.endsWith(`${this.DASHBOARD_ROUTE_PATH}/${dashboardMO.id}`));
                const data = yield this.detail(dashboardMO);
                if (tabToUpdate) {
                    const { icon, priority, name } = data.c8y_Dashboard;
                    tabToUpdate.icon = icon;
                    tabToUpdate.priority = priority;
                    tabToUpdate.label = name;
                }
                this.tabs.refresh();
            }
        });
    }
    updateNavigatorItem(mo) {
        this.navigator.state.forEach(node => {
            if (node.path === `reports/${mo.id}`) {
                this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            const nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: `reports/${mo.id}`,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    }
    navigateToDashboard(dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (/dashboard/.test(this.router.url)) {
                this.router.navigate(['..', dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
            else {
                this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                    relativeTo: getActivatedRoute(this.router)
                });
            }
        });
    }
    canEditDashboard(mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    }
    isNamed(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}`).test(prop));
    }
    isReport(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${this.REPORT_PARTIAL_NAME}`).test(prop));
    }
    isDeviceType(dashboard) {
        return some(keys(dashboard), prop => new RegExp(`^${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.DeviceType}${this.INDEX_SPLIT}`).test(prop));
    }
    getStyling(styleList, styleName, defaultValue) {
        const styling = styleList.find(style => style && new RegExp(styleName, 'i').test(style.class));
        return styling ? styling.class : defaultValue;
    }
    mapWidgets(widgets) {
        return keyBy(widgets.map(widget => {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    }
    getDashboard$(dashboardIdOrName, dashboardType, mo) {
        const cache = this.cache.get(dashboardIdOrName);
        const dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        const cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(dashboard => this.cacheDashboard(dashboard)), filter(dashboard => dashboard.id === dashboardIdOrName ||
            has(dashboard, `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${dashboardIdOrName}`)));
        return cache ? of(cache) : cacheRefresh;
    }
    getTabs$(mo, dashboardType) {
        const dashboards = this.getContextDashboards(mo, dashboardType);
        this.setBaseContextRoute(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(map(dashboard => this.removeDashboardMoProperty(dashboard)), tap(dashboard => this.cacheDashboard(dashboard)), map(dashboard => this.createDashboardTab(dashboard)), toArray());
    }
    getContextDashboards$(requests) {
        return from(requests).pipe(mergeAll(), mergeMap(response => response.data));
    }
    setBaseContextRoute(mo, dashboardType) {
        const type = dashboardType.includes(ContextDashboardType.Device)
            ? ContextDashboardType.Device
            : ContextDashboardType.Group;
        this.currentContextRoute = `${type}/${mo.id}`;
    }
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    removeDashboardMoProperty(dashboard) {
        const dashboardCopy = cloneDeep(dashboard);
        const children = get(dashboardCopy, 'c8y_Dashboard.children');
        let updateDashboard = false;
        forEach(children, child => {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            this.update(dashboardCopy);
        }
        return dashboardCopy;
    }
    cacheDashboard(dashboard) {
        this.cache.set(dashboard.id, dashboard);
    }
    createDashboardTab(dashboard) {
        const { c8y_Dashboard: _dashboard, id } = dashboard;
        return {
            icon: _dashboard.icon,
            path: `${this.DASHBOARD_ROUTE_PATH}/${id}`,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    }
    clean(dashboard) {
        const jsonString = JSON.stringify(dashboard, (key, value) => {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    }
    getNamedDashboard(name) {
        return this.inventory.list({
            fragmentType: `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${ContextDashboardType.Named}${this.INDEX_SPLIT}${name}`,
            pageSize: 1
        });
    }
    getContextDashboards(mo, dashboardType) {
        return dashboardType.map((type) => this.inventory.list({
            fragmentType: this.createDashboardFragment(mo, type),
            pageSize: this.DEFAULT_PAGESIZE
        }));
    }
    createDashboardFragment(mo, type) {
        let value;
        if (mo.c8y_Report) {
            value = `${this.REPORT_PARTIAL_NAME}${mo.id}`;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return `${this.FRAGMENT_NAME}${this.INDEX_SPLIT}${type}${this.INDEX_SPLIT}${value}`;
    }
    getDashboardTypeFromViewContext(dashboardCfg, context) {
        let dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    }
    createFragmentKey(contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    }
    shouldSetGlobal(dashboard) {
        if ((this.isNamed(dashboard) && !this.isReport(dashboard)) || this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    }
};
ContextDashboardService.ctorParameters = () => [
    { type: InventoryService },
    { type: TabsService },
    { type: ModalService },
    { type: TranslateService },
    { type: Router },
    { type: UserService },
    { type: AppStateService },
    { type: NavigatorService },
    { type: Permissions }
];
ContextDashboardService = tslib_1.__decorate([
    Injectable()
], ContextDashboardService);
export { ContextDashboardService };
//# sourceMappingURL=data:application/json;base64,