import { BaseDeviceGridColumn } from './base.device-grid-column';
import { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
export class SerialNumberDeviceGridColumn extends BaseDeviceGridColumn {
    constructor() {
        super();
        const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        const vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        this.name = 'serialNumber';
        this.header = gettext('Serial number');
        this.cellRendererComponent = SerialNumberCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'serialNumbers',
                    title: gettext('Show devices with serial number'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter(model) {
                const filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = {
                        [hardwareSerialNumberPath]: { __in: model.serialNumbers },
                        [vendingSerialNumberPath]: { __in: model.serialNumbers }
                    };
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsLW51bWJlci5kZXZpY2UtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkLyIsInNvdXJjZXMiOlsiY29sdW1ucy9zZXJpYWwtbnVtYmVyLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsTUFBTSxPQUFPLDRCQUE2QixTQUFRLG9CQUFvQjtJQUNwRTtRQUNFLEtBQUssRUFBRSxDQUFDO1FBRVIsTUFBTSx3QkFBd0IsR0FBRywyQkFBMkIsQ0FBQztRQUM3RCxNQUFNLHVCQUF1QixHQUMzQixpRUFBaUUsQ0FBQztRQUVwRSxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsaUNBQWlDLENBQUM7UUFFL0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLGFBQWEsRUFBRTt3QkFDYixJQUFJLEVBQUUsT0FBTzt3QkFDYixLQUFLLEVBQUU7NEJBQ0wsSUFBSSxFQUFFLFFBQVE7eUJBQ2Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSjtvQkFDRSxHQUFHLEVBQUUsZUFBZTtvQkFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDakQsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLEtBQUssRUFBRTt3QkFDTDs0QkFDRSxHQUFHLEVBQUUsaUJBQWlCOzRCQUN0QixPQUFPLEVBQUUsSUFBSTs0QkFDYixXQUFXLEVBQUUsT0FBTyxDQUNsQixtRUFBbUUsQ0FDcEU7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELFNBQVMsQ0FBQyxLQUFVO2dCQUNsQixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7b0JBQzlCLE1BQU0sQ0FBQyxJQUFJLEdBQUc7d0JBQ1osQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7d0JBQ3pELENBQUMsdUJBQXVCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFO3FCQUN6RCxDQUFDO2lCQUNIO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztTQUM1RixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2Jhc2UuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vc2VyaWFsLW51bWJlci5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbmV4cG9ydCBjbGFzcyBTZXJpYWxOdW1iZXJEZXZpY2VHcmlkQ29sdW1uIGV4dGVuZHMgQmFzZURldmljZUdyaWRDb2x1bW4ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgY29uc3QgaGFyZHdhcmVTZXJpYWxOdW1iZXJQYXRoID0gJ2M4eV9IYXJkd2FyZS5zZXJpYWxOdW1iZXInO1xuICAgIGNvbnN0IHZlbmRpbmdTZXJpYWxOdW1iZXJQYXRoID1cbiAgICAgICdjb21fbnNuX3N0YXJ0dXBzX3ZlbmRtZV9mcmFnbWVudHNfVmVuZGluZ01hY2hpbmVUeXBlSW5mby5zZXJpYWwnO1xuXG4gICAgdGhpcy5uYW1lID0gJ3NlcmlhbE51bWJlcic7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdTZXJpYWwgbnVtYmVyJyk7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc2VyaWFsTnVtYmVyczoge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZm9ybTogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnc2VyaWFsTnVtYmVycycsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1Nob3cgZGV2aWNlcyB3aXRoIHNlcmlhbCBudW1iZXInKSxcbiAgICAgICAgICBhZGQ6IGdldHRleHQoJ09yJyksXG4gICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAga2V5OiAnc2VyaWFsTnVtYmVyc1tdJyxcbiAgICAgICAgICAgICAgbm90aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGdldHRleHQoXG4gICAgICAgICAgICAgICAgJ2UuZy4gNTQzMjEtMTIzLCB5b3UgY2FuIHVzZSBhbiBhc3RlcmlzayAoKikgYXMgd2lsZGNhcmQgY2hhcmFjdGVyJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyKG1vZGVsOiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBpZiAobW9kZWwuc2VyaWFsTnVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IHtcbiAgICAgICAgICAgIFtoYXJkd2FyZVNlcmlhbE51bWJlclBhdGhdOiB7IF9faW46IG1vZGVsLnNlcmlhbE51bWJlcnMgfSxcbiAgICAgICAgICAgIFt2ZW5kaW5nU2VyaWFsTnVtYmVyUGF0aF06IHsgX19pbjogbW9kZWwuc2VyaWFsTnVtYmVycyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IGhhcmR3YXJlU2VyaWFsTnVtYmVyUGF0aCB9LCB7IHBhdGg6IHZlbmRpbmdTZXJpYWxOdW1iZXJQYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19