import { Subject, defer, of } from 'rxjs';
import { merge } from 'rxjs/operators';
import { pick, map, property, some, every } from 'lodash-es';
import { NavigatorNodeRootLegacy } from './navigator-node-root-legacy';
// Just to hook into the bridge service
export function c8yNavigatorProvider() {
    const root = new NavigatorNodeRootLegacy();
    const rootNodesSubject = new Subject();
    const conditionalNodes = [];
    const rootNodes$ = rootNodesSubject.pipe(merge(defer(() => of(root.children))));
    function addNavigation(nodes) {
        const nodeList = (Array.isArray(nodes) ? nodes : [nodes]);
        nodeList.forEach((node) => {
            if (isConditional(node)) {
                node.hidden = undefined;
                conditionalNodes.push(node);
            }
            node.navNode = root.addRoot(node);
        });
        rootNodesSubject.next(root.children);
    }
    function removeNavigation(node) {
        const found = root.find((n) => n === node);
        if (found) {
            found.parents.forEach((p) => p.remove(found));
            rootNodesSubject.next(root.children);
        }
    }
    function findNode(node) {
        return root.find(node);
    }
    function isConditional(node) {
        return node.showIf || node.showIfPermissions || node.showIfContainsVisibleViews;
    }
    function $get($q, $injector) {
        'ngInject';
        // This avoids the circular dependency
        setTimeout(() => conditionalNodes.forEach(processShowIf));
        function processShowIf(node) {
            const c8yUiUtil = $injector.get('c8yUiUtil');
            const visibilityPromises = [];
            const { showIf, showIfPermissions, showIfContainsVisibleViews } = node;
            if (showIf) {
                visibilityPromises.push($injector.invoke(showIf));
            }
            if (showIfContainsVisibleViews) {
                visibilityPromises.push(viewsConditionalVisibility(node));
            }
            c8yUiUtil.configureVisibility({
                showIf: () => $q.all(visibilityPromises).then(every),
                showIfPermissions
            }, 'visible')
                .then(({ visible }) => {
                if (visible) {
                    node.navNode.update({
                        hidden: false,
                        showIf: null,
                        showIfPermission: null,
                        showIfContainsVisibleViews: null
                    });
                }
                else {
                    node.navNode.update({
                        hidden: true
                    });
                }
            });
        }
        function viewsConditionalVisibility(node) {
            const c8yUiUtil = $injector.get('c8yUiUtil');
            const c8yViews = $injector.get('c8yViews');
            const views = c8yViews.getByPath(node.path);
            return $q.all(map(views, (view) => c8yUiUtil
                .configureVisibility(pick(view, ['showIf', 'showIfPermissions']), 'show', false)
                .then(property('show'))))
                .then(some);
        }
        return {
            rootNodes() {
                return root.children;
            },
            findNode,
            addNavigation,
            removeNavigation,
            rootNodes$
        };
    }
    return {
        $get,
        addNavigation,
        removeNavigation
    };
}
//# sourceMappingURL=data:application/json;base64,