const rootComponent = {
    template: `
  <c8y-bootstrap>
    <div id="c8y-legacy-view">
      <div ng-view ng-if="vm.widthSet && vm.authState.hasAuth"></div>
    </div>
  </c8y-bootstrap>`,
    controller: c8yUiRootController,
    controllerAs: 'vm'
};
function c8yUiRootController($rootScope, $timeout, c8yBase, c8yNavigator, c8yApplication, c8yHeaderService) {
    'ngInject';
    const vm = this;
    Object.assign(vm, {
        $onInit,
        navOpen: false
    });
    ////////////
    function $onInit() {
        c8yHeaderService.map((states) => states.nav.open).subscribe((isOpen) => {
            vm.navOpen = isOpen;
        });
        c8yHeaderService.configNavigator({ canToggle: true });
        $rootScope.$on('authStateChange', onAuthStateChange);
        vm.rootNodes = c8yNavigator.rootNodes;
        c8yApplication.currentAppCached().then(onAppInfo);
        vm.navHiddenOnStartup = c8yBase.appOption('hide_navigator');
        checkReady();
    }
    function onAuthStateChange(evt, data) {
        vm.authState = data;
    }
    function onAppInfo() {
        vm.tabsHorizontal = c8yBase.appOption('tabsHorizontal');
    }
    function checkReady() {
        const element = document.querySelector('#c8y-legacy-view');
        const hasWidth = element && element.clientWidth;
        if (hasWidth) {
            vm.widthSet = true;
        }
        else {
            $timeout(checkReady);
        }
    }
}
export { rootComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvcm9vdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxhQUFhLEdBQUc7SUFDcEIsUUFBUSxFQUFFOzs7OzttQkFLTztJQUNqQixVQUFVLEVBQUUsbUJBQW1CO0lBQy9CLFlBQVksRUFBRSxJQUFJO0NBQ25CLENBQUM7QUFFRixTQUFTLG1CQUFtQixDQUMxQixVQUFVLEVBQ1YsUUFBUSxFQUNSLE9BQU8sRUFDUCxZQUFZLEVBQ1osY0FBYyxFQUNkLGdCQUFnQjtJQUVoQixVQUFVLENBQUM7SUFDWCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDaEIsT0FBTztRQUNQLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsWUFBWTtJQUVaLFNBQVMsT0FBTztRQUNkLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNyRSxFQUFFLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUNILGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3BELFVBQVUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxFQUFFLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDdEMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsVUFBVSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSTtRQUNsQyxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxTQUFTO1FBQ2hCLEVBQUUsQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxTQUFTLFVBQVU7UUFDakIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNELE1BQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksUUFBUSxFQUFFO1lBQ1osRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDcEI7YUFBTTtZQUNMLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7QUFDSCxDQUFDO0FBQ0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgcm9vdENvbXBvbmVudCA9IHtcbiAgdGVtcGxhdGU6IGBcbiAgPGM4eS1ib290c3RyYXA+XG4gICAgPGRpdiBpZD1cImM4eS1sZWdhY3ktdmlld1wiPlxuICAgICAgPGRpdiBuZy12aWV3IG5nLWlmPVwidm0ud2lkdGhTZXQgJiYgdm0uYXV0aFN0YXRlLmhhc0F1dGhcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9jOHktYm9vdHN0cmFwPmAsXG4gIGNvbnRyb2xsZXI6IGM4eVVpUm9vdENvbnRyb2xsZXIsXG4gIGNvbnRyb2xsZXJBczogJ3ZtJ1xufTtcblxuZnVuY3Rpb24gYzh5VWlSb290Q29udHJvbGxlcihcbiAgJHJvb3RTY29wZSxcbiAgJHRpbWVvdXQsXG4gIGM4eUJhc2UsXG4gIGM4eU5hdmlnYXRvcixcbiAgYzh5QXBwbGljYXRpb24sXG4gIGM4eUhlYWRlclNlcnZpY2Vcbikge1xuICAnbmdJbmplY3QnO1xuICBjb25zdCB2bSA9IHRoaXM7XG5cbiAgT2JqZWN0LmFzc2lnbih2bSwge1xuICAgICRvbkluaXQsXG4gICAgbmF2T3BlbjogZmFsc2VcbiAgfSk7XG5cbiAgLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gJG9uSW5pdCgpIHtcbiAgICBjOHlIZWFkZXJTZXJ2aWNlLm1hcCgoc3RhdGVzKSA9PiBzdGF0ZXMubmF2Lm9wZW4pLnN1YnNjcmliZSgoaXNPcGVuKSA9PiB7XG4gICAgICB2bS5uYXZPcGVuID0gaXNPcGVuO1xuICAgIH0pO1xuICAgIGM4eUhlYWRlclNlcnZpY2UuY29uZmlnTmF2aWdhdG9yKHtjYW5Ub2dnbGU6IHRydWV9KTtcbiAgICAkcm9vdFNjb3BlLiRvbignYXV0aFN0YXRlQ2hhbmdlJywgb25BdXRoU3RhdGVDaGFuZ2UpO1xuICAgIHZtLnJvb3ROb2RlcyA9IGM4eU5hdmlnYXRvci5yb290Tm9kZXM7XG4gICAgYzh5QXBwbGljYXRpb24uY3VycmVudEFwcENhY2hlZCgpLnRoZW4ob25BcHBJbmZvKTtcbiAgICB2bS5uYXZIaWRkZW5PblN0YXJ0dXAgPSBjOHlCYXNlLmFwcE9wdGlvbignaGlkZV9uYXZpZ2F0b3InKTtcbiAgICBjaGVja1JlYWR5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkF1dGhTdGF0ZUNoYW5nZShldnQsIGRhdGEpIHtcbiAgICB2bS5hdXRoU3RhdGUgPSBkYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gb25BcHBJbmZvKCkge1xuICAgIHZtLnRhYnNIb3Jpem9udGFsID0gYzh5QmFzZS5hcHBPcHRpb24oJ3RhYnNIb3Jpem9udGFsJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1JlYWR5KCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYzh5LWxlZ2FjeS12aWV3Jyk7XG4gICAgY29uc3QgaGFzV2lkdGggPSBlbGVtZW50ICYmIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgaWYgKGhhc1dpZHRoKSB7XG4gICAgICB2bS53aWR0aFNldCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0aW1lb3V0KGNoZWNrUmVhZHkpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IHsgcm9vdENvbXBvbmVudCB9O1xuIl19