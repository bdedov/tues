import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { appLogsAutoRefreshComponent, bootstrapComponent, dataGridComponent, impactProviderSettingsComponent, userTotpComponent } from './downgraded.components';
import { alertsService, apiService, appStateService, bridgeService, authBridgeService, bulkOperationDetailsService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService, cachedLocaleDictionaryService } from './downgraded.services';
import { QueriesUtil } from '@c8y/client';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
const NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    .config($httpProvider => {
    'ngInject';
    const ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAuthBridgeService', authBridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    .service('c8yQueriesUtil', () => new QueriesUtil())
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService);
angular
    .module('c8y.ui')
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yImpactProviderSettings', impactProviderSettingsComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .factory('c8yTranslate', translateService)
    .factory('c8yCachedLocaleDictionaryService', cachedLocaleDictionaryService)
    .factory('c8yBulkOperationDetailsService', bulkOperationDetailsService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export const ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsK0JBQStCLEVBQy9CLGlCQUFpQixFQUNsQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFDTCxhQUFhLEVBQ2IsVUFBVSxFQUNWLGVBQWUsRUFDZixhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLDJCQUEyQixFQUMzQixXQUFXLEVBQ1gsYUFBYSxFQUNiLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZiw2QkFBNkIsRUFDOUIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxNQUFNLElBQUksR0FBRyxhQUFhLENBQUM7QUFDMUIsTUFBYyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztBQUUzQyxPQUFPO0tBQ0osTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7S0FDaEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO0lBQ3RCLFVBQVUsQ0FBQztJQUVYLE1BQU0sbUJBQW1CLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN0RixJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQzVCLGFBQWEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNEO0lBQ0QsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUN6RCxDQUFDLENBQUM7S0FDRCxTQUFTLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQztLQUNyQyxTQUFTLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDO0tBQzdDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7S0FDMUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLGlCQUFpQixDQUFDO0tBQ2xELE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUM7S0FDOUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztLQUMxQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQzlDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDO0tBQ2xELFNBQVMsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7S0FDeEMsT0FBTyxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUM7S0FDbEMsU0FBUyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQztLQUN4QyxTQUFTLENBQUMsOEJBQThCLEVBQUUscUNBQXFDLENBQUMsQ0FBQyw4QkFBOEI7S0FDL0csT0FBTyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUM7S0FDcEMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUM7S0FDL0IsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRWxELE9BQU87S0FDSixNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ2hCLFFBQVEsQ0FBQyxjQUFjLEVBQUUsb0JBQW9CLENBQUM7S0FDOUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQztLQUN0QyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUM7S0FDakQsU0FBUyxDQUFDLHVCQUF1QixFQUFFLDJCQUEyQixDQUFDO0tBQy9ELFNBQVMsQ0FBQywyQkFBMkIsRUFBRSwrQkFBK0IsQ0FBQztLQUN2RSxTQUFTLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDO0tBQzNDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUM7S0FDekMsT0FBTyxDQUFDLGtDQUFrQyxFQUFFLDZCQUE2QixDQUFDO0tBQzFFLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSwyQkFBMkIsQ0FBQztLQUN0RSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsdUJBQXVCLENBQUM7S0FDcEQsT0FBTyxDQUFDLG1CQUFtQixFQUFFLHFCQUFxQixDQUFDO0tBQ25ELE9BQU8sQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUVsRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRvd25ncmFkZUluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci91cGdyYWRlL3N0YXRpYyc7XG5pbXBvcnQgKiBhcyBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IHsgYzh5QWxlcnREZWNvcmF0b3IgfSBmcm9tICcuL2FsZXJ0LmRlY29yYXRvcic7XG5pbXBvcnQge1xuICBhcHBMb2dzQXV0b1JlZnJlc2hDb21wb25lbnQsXG4gIGJvb3RzdHJhcENvbXBvbmVudCxcbiAgZGF0YUdyaWRDb21wb25lbnQsXG4gIGltcGFjdFByb3ZpZGVyU2V0dGluZ3NDb21wb25lbnQsXG4gIHVzZXJUb3RwQ29tcG9uZW50XG59IGZyb20gJy4vZG93bmdyYWRlZC5jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIGFsZXJ0c1NlcnZpY2UsXG4gIGFwaVNlcnZpY2UsXG4gIGFwcFN0YXRlU2VydmljZSxcbiAgYnJpZGdlU2VydmljZSxcbiAgYXV0aEJyaWRnZVNlcnZpY2UsXG4gIGJ1bGtPcGVyYXRpb25EZXRhaWxzU2VydmljZSxcbiAgZG9jc1NlcnZpY2UsXG4gIGhlYWRlclNlcnZpY2UsXG4gIHBhc3N3b3JkU2VydmljZSxcbiAgc2VydmVyTWVzc2FnZXNTZXJ2aWNlLFxuICB0cmFuc2xhdGVTZXJ2aWNlLFxuICB1c2VyTWVudVNlcnZpY2UsXG4gIGNhY2hlZExvY2FsZURpY3Rpb25hcnlTZXJ2aWNlXG59IGZyb20gJy4vZG93bmdyYWRlZC5zZXJ2aWNlcyc7XG5pbXBvcnQgeyBRdWVyaWVzVXRpbCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHRDYXRhbG9nRGVjb3JhdG9yIH0gZnJvbSAnLi9nZXR0ZXh0Q2F0YWxvZy5kZWNvcmF0b3InO1xuaW1wb3J0IHsgZ3JvdXBUeXBlc0hpZXJhcmNoeU5hdmlnYXRvckRlY29yYXRvciB9IGZyb20gJy4vZ3JvdXBzSGllcmFyY2h5TmF2aWdhdG9yLmRlY29yYXRvcic7XG5pbXBvcnQgeyBjOHlOZzFIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHAuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgYzh5TmF2aWdhdG9yUHJvdmlkZXIgfSBmcm9tICcuL25hdmlnYXRvci5wcm92aWRlcic7XG5pbXBvcnQgeyByb290Q29tcG9uZW50IH0gZnJvbSAnLi9yb290LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBjOHlUaXRsZURlY29yYXRvciB9IGZyb20gJy4vdGl0bGUuZGVjb3JhdG9yJztcbmltcG9ydCB7IGM4eVZpZXdzUHJvdmlkZXIgfSBmcm9tICcuL3ZpZXdzLnByb3ZpZGVyJztcblxuY29uc3QgTkFNRSA9ICdjOHkudXBncmFkZSc7XG4od2luZG93IGFzIGFueSkucHJldmVudE5nMUJvb3RzdHJhcCA9IHRydWU7XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZShOQU1FLCBbXSlcbiAgLmNvbmZpZygkaHR0cFByb3ZpZGVyID0+IHtcbiAgICAnbmdJbmplY3QnO1xuXG4gICAgY29uc3QgbmcxSW50ZXJjZXB0b3JJbmRleCA9ICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLmluZGV4T2YoJ2M4eUxvYWRpbmdJbmRpY2F0b3InKTtcbiAgICBpZiAobmcxSW50ZXJjZXB0b3JJbmRleCA+IC0xKSB7XG4gICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5zcGxpY2UobmcxSW50ZXJjZXB0b3JJbmRleCwgMSk7XG4gICAgfVxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goYzh5TmcxSHR0cEludGVyY2VwdG9yKTtcbiAgfSlcbiAgLmNvbXBvbmVudCgnYzh5VWlSb290Jywgcm9vdENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5Qm9vdHN0cmFwJywgYm9vdHN0cmFwQ29tcG9uZW50KVxuICAuZmFjdG9yeSgnYzh5QnJpZGdlU2VydmljZScsIGJyaWRnZVNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlBdXRoQnJpZGdlU2VydmljZScsIGF1dGhCcmlkZ2VTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5QXBwU3RhdGVTZXJ2aWNlJywgYXBwU3RhdGVTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5SGVhZGVyU2VydmljZScsIGhlYWRlclNlcnZpY2UpXG4gIC5mYWN0b3J5KCdjOHlVc2VyTWVudVNlcnZpY2UnLCB1c2VyTWVudVNlcnZpY2UpXG4gIC5zZXJ2aWNlKCdjOHlRdWVyaWVzVXRpbCcsICgpID0+IG5ldyBRdWVyaWVzVXRpbCgpKVxuICAuZGVjb3JhdG9yKCdjOHlUaXRsZScsIGM4eVRpdGxlRGVjb3JhdG9yKVxuICAuZmFjdG9yeSgnYzh5QWxlcnQnLCBhbGVydHNTZXJ2aWNlKVxuICAuZGVjb3JhdG9yKCdjOHlBbGVydCcsIGM4eUFsZXJ0RGVjb3JhdG9yKVxuICAuZGVjb3JhdG9yKCdncm91cFR5cGVzSGllcmFyY2h5TmF2aWdhdG9yJywgZ3JvdXBUeXBlc0hpZXJhcmNoeU5hdmlnYXRvckRlY29yYXRvcikgLy8gcHJldmVudHMgbG9hZGluZyB0aGUgZ3JvdXBzXG4gIC5mYWN0b3J5KCdjOHlBcGlTZXJ2aWNlJywgYXBpU2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eURvY3MnLCBkb2NzU2VydmljZSlcbiAgLnNlcnZpY2UoJ2M4eVBhc3N3b3JkQ29uZmlybScsIHBhc3N3b3JkU2VydmljZSk7XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnYzh5LnVpJylcbiAgLnByb3ZpZGVyKCdjOHlOYXZpZ2F0b3InLCBjOHlOYXZpZ2F0b3JQcm92aWRlcilcbiAgLnByb3ZpZGVyKCdjOHlWaWV3cycsIGM4eVZpZXdzUHJvdmlkZXIpXG4gIC5kaXJlY3RpdmUoJ2M4eVVzZXJUb3RwUmV2b2tlJywgdXNlclRvdHBDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eUFwcExvZ3NBdXRvUmVmcmVzaCcsIGFwcExvZ3NBdXRvUmVmcmVzaENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5SW1wYWN0UHJvdmlkZXJTZXR0aW5ncycsIGltcGFjdFByb3ZpZGVyU2V0dGluZ3NDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eURhdGFHcmlkJywgZGF0YUdyaWRDb21wb25lbnQpXG4gIC5mYWN0b3J5KCdjOHlUcmFuc2xhdGUnLCB0cmFuc2xhdGVTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5Q2FjaGVkTG9jYWxlRGljdGlvbmFyeVNlcnZpY2UnLCBjYWNoZWRMb2NhbGVEaWN0aW9uYXJ5U2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eUJ1bGtPcGVyYXRpb25EZXRhaWxzU2VydmljZScsIGJ1bGtPcGVyYXRpb25EZXRhaWxzU2VydmljZSlcbiAgLmRlY29yYXRvcignZ2V0dGV4dENhdGFsb2cnLCBnZXR0ZXh0Q2F0YWxvZ0RlY29yYXRvcilcbiAgLmZhY3RvcnkoJ2M4eVNlcnZlck1lc3NhZ2VzJywgc2VydmVyTWVzc2FnZXNTZXJ2aWNlKVxuICAuZmFjdG9yeSgnbmdab25lJywgZG93bmdyYWRlSW5qZWN0YWJsZShOZ1pvbmUpKTtcblxuZXhwb3J0IGNvbnN0IG5nMU1vZHVsZXMgPSBbJ2FwcCcsIE5BTUVdO1xuIl19