import { NavigatorNodeRoot } from '@c8y/ngx-components';
import { assign } from 'lodash-es';
export class NavigatorNodeRootLegacy extends NavigatorNodeRoot {
    addRoot(nodeData) {
        let duplicate;
        if (nodeData.path === '') {
            nodeData.path = '/';
        }
        nodeData.label = nodeData.name;
        if (typeof nodeData.parent === 'object') {
            nodeData.parent.label = nodeData.parent.name;
        }
        if (nodeData.preventDuplicates) {
            duplicate = this.find(({ path, parents, label }) => {
                return path === nodeData.path &&
                    (label === nodeData.label) &&
                    parents.some((p) => p.label === nodeData.parent);
            });
            if (duplicate) {
                duplicate.routerLinkExact = false;
            }
        }
        return duplicate || super.addRoot(nodeData);
    }
    createNode(node) {
        const newNode = super.createNode(node);
        const update = newNode.update.bind(newNode);
        const root = this;
        return Object.defineProperties(assign(newNode, {
            realName: newNode.name || newNode.label,
            _parent: true,
            update(data) {
                if (this._parent === undefined) {
                    // _parent was deleted somene instead to put this in root
                    root.addRoot(this);
                    // put it back so it can be deleted again
                    this._parent = true;
                }
                update(data);
            },
            addChild(nodeChild) {
                this.add(root.createNode(nodeChild));
            }
        }), {
            label: {
                get() {
                    return this.realName || '';
                },
                set(name) {
                    this.realName = name;
                }
            },
            name: {
                get() {
                    return this.realName || '';
                },
                set(name) {
                    this.realName = name;
                }
            },
            show: {
                get() {
                    return !this.hidden;
                },
                set(show) {
                    this.hidden = !show;
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC1sZWdhY3kuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvbmF2aWdhdG9yLW5vZGUtcm9vdC1sZWdhY3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFpQixNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGlCQUFpQjtJQUU1RCxPQUFPLENBQUMsUUFBUTtRQUNkLElBQUksU0FBUyxDQUFDO1FBQ2QsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUN4QixRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUNyQjtRQUNELFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLE9BQU8sUUFBUSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDdkMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDOUM7UUFFRCxJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtZQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFO2dCQUNoRCxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsSUFBSTtvQkFDM0IsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLEtBQUssQ0FBQztvQkFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLFNBQVMsRUFBRTtnQkFDYixTQUFTLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQzthQUNuQztTQUNGO1FBRUQsT0FBTyxTQUFTLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsVUFBVSxDQUFDLElBQUk7UUFDYixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQzdDLFFBQVEsRUFBRyxPQUFlLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLO1lBQ2hELE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxDQUFDLElBQUk7Z0JBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtvQkFDOUIseURBQXlEO29CQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQix5Q0FBeUM7b0JBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2lCQUNyQjtnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDZixDQUFDO1lBQ0QsUUFBUSxDQUFDLFNBQVM7Z0JBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7U0FDRixDQUFDLEVBQUU7WUFDRixLQUFLLEVBQUU7Z0JBQ0wsR0FBRztvQkFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO2dCQUM3QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxJQUFJO29CQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixDQUFDO2FBQ0Y7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osR0FBRztvQkFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO2dCQUM3QixDQUFDO2dCQUNELEdBQUcsQ0FBQyxJQUFJO29CQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixDQUFDO2FBQ0Y7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osR0FBRztvQkFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQztnQkFDRCxHQUFHLENBQUMsSUFBSTtvQkFDTixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUN0QixDQUFDO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYXZpZ2F0b3JOb2RlUm9vdCwgTmF2aWdhdG9yTm9kZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuZXhwb3J0IGNsYXNzIE5hdmlnYXRvck5vZGVSb290TGVnYWN5IGV4dGVuZHMgTmF2aWdhdG9yTm9kZVJvb3Qge1xuXG4gIGFkZFJvb3Qobm9kZURhdGEpOiBOYXZpZ2F0b3JOb2RlIHtcbiAgICBsZXQgZHVwbGljYXRlO1xuICAgIGlmIChub2RlRGF0YS5wYXRoID09PSAnJykge1xuICAgICAgbm9kZURhdGEucGF0aCA9ICcvJztcbiAgICB9XG4gICAgbm9kZURhdGEubGFiZWwgPSBub2RlRGF0YS5uYW1lO1xuICAgIGlmICh0eXBlb2Ygbm9kZURhdGEucGFyZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgbm9kZURhdGEucGFyZW50LmxhYmVsID0gbm9kZURhdGEucGFyZW50Lm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGVEYXRhLnByZXZlbnREdXBsaWNhdGVzKSB7XG4gICAgICBkdXBsaWNhdGUgPSB0aGlzLmZpbmQoKHsgcGF0aCwgcGFyZW50cywgbGFiZWx9KSA9PiB7XG4gICAgICAgIHJldHVybiBwYXRoID09PSBub2RlRGF0YS5wYXRoICYmXG4gICAgICAgICAgKGxhYmVsID09PSBub2RlRGF0YS5sYWJlbCkgJiZcbiAgICAgICAgICBwYXJlbnRzLnNvbWUoKHApID0+IHAubGFiZWwgPT09IG5vZGVEYXRhLnBhcmVudCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgZHVwbGljYXRlLnJvdXRlckxpbmtFeGFjdCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkdXBsaWNhdGUgfHwgc3VwZXIuYWRkUm9vdChub2RlRGF0YSk7XG4gIH1cblxuICBjcmVhdGVOb2RlKG5vZGUpIHtcbiAgICBjb25zdCBuZXdOb2RlID0gc3VwZXIuY3JlYXRlTm9kZShub2RlKTtcbiAgICBjb25zdCB1cGRhdGUgPSBuZXdOb2RlLnVwZGF0ZS5iaW5kKG5ld05vZGUpO1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzO1xuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhc3NpZ24obmV3Tm9kZSwge1xuICAgICAgcmVhbE5hbWU6IChuZXdOb2RlIGFzIGFueSkubmFtZSB8fCBuZXdOb2RlLmxhYmVsLFxuICAgICAgX3BhcmVudDogdHJ1ZSwgLy8ganVzdCB1c2UgaXQgdG8gZGV0ZWN0IGlmIGl0IGhhcyBiZWVuIGRlbGV0ZWRcbiAgICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIF9wYXJlbnQgd2FzIGRlbGV0ZWQgc29tZW5lIGluc3RlYWQgdG8gcHV0IHRoaXMgaW4gcm9vdFxuICAgICAgICAgIHJvb3QuYWRkUm9vdCh0aGlzKTtcbiAgICAgICAgICAvLyBwdXQgaXQgYmFjayBzbyBpdCBjYW4gYmUgZGVsZXRlZCBhZ2FpblxuICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlKGRhdGEpO1xuICAgICAgfSxcbiAgICAgIGFkZENoaWxkKG5vZGVDaGlsZCkge1xuICAgICAgICB0aGlzLmFkZChyb290LmNyZWF0ZU5vZGUobm9kZUNoaWxkKSk7XG4gICAgICB9XG4gICAgfSksIHtcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWFsTmFtZSB8fCAnJztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KG5hbWUpIHtcbiAgICAgICAgICB0aGlzLnJlYWxOYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlYWxOYW1lIHx8ICcnO1xuICAgICAgICB9LFxuICAgICAgICBzZXQobmFtZSkge1xuICAgICAgICAgIHRoaXMucmVhbE5hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2hvdzoge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuICF0aGlzLmhpZGRlbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHNob3cpIHtcbiAgICAgICAgICB0aGlzLmhpZGRlbiA9ICFzaG93O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==