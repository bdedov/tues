import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AlertService } from '@c8y/ngx-components';
import { orderBy, isEqual, remove, some } from 'lodash-es';
import { InventoryService, IdReference } from '@c8y/client';
import { FetchClient, IFetchOptions } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
let ReportsService = class ReportsService {
    constructor(alertService, inventoryService, client) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.ERROR_MESSAGES = {
            pattern_multiEmail: gettext('Invalid email addresses.'),
            pattern_singleEmail: gettext('Invalid email address.')
        };
        this.microserviceUrl = '/service/reporting/schedule';
        this.headers = { 'Content-Type': 'application/json' };
    }
    getExport(exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let exp;
            const exportDetail = yield this.inventoryService.detail(exportId);
            const { data, res } = exportDetail;
            if (res.status !== 200) {
                this.alertService.addServerFailure({ data, res });
            }
            else {
                exp = data ? data : {};
            }
            return exp;
        });
    }
    getScheduleList(exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const exp = yield this.getExport(exportId);
            return this.extractScheduleListFromExport(exp);
        });
    }
    extractScheduleListFromExport(exp) {
        let scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    }
    addSchedule(schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [], [schedule]);
        });
    }
    updateSchedule(oldSchedule, schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [oldSchedule], [schedule]);
        });
    }
    updateSchedules(exportId, schedulesToRemove = [], schedulesToAdd = []) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let success = false;
            const exp = yield this.getExport(exportId);
            const schedules = this.extractScheduleListFromExport(exp);
            remove(schedules, (schedule) => some(schedulesToRemove, (scheduleToRemove) => isEqual(schedule, scheduleToRemove)));
            schedules.push.apply(schedules, schedulesToAdd);
            exp.c8y_ScheduleConfiguration = schedules;
            const { data, res } = yield this.inventoryService.update(exp);
            if (res.status === 200) {
                success = yield this.reschedule(exportId);
            }
            else {
                this.alertService.addServerFailure({ data, res });
            }
            return success;
        });
    }
    reschedule(exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.headers
            };
            const rescheduling = yield this.client.fetch(`${this.microserviceUrl}/${exportId}`, options);
            return rescheduling.status === 200;
        });
    }
    deleteSchedule(schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [schedule], []);
        });
    }
};
ReportsService.ctorParameters = () => [
    { type: AlertService },
    { type: InventoryService },
    { type: FetchClient }
];
ReportsService = tslib_1.__decorate([
    Injectable()
], ReportsService);
export { ReportsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvcnRzLyIsInNvdXJjZXMiOlsicmVwb3J0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzlDLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFRekIsWUFDVSxZQUEwQixFQUMxQixnQkFBa0MsRUFDbEMsTUFBbUI7UUFGbkIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxXQUFNLEdBQU4sTUFBTSxDQUFhO1FBVjdCLG1CQUFjLEdBQUc7WUFDZixrQkFBa0IsRUFBRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7WUFDdkQsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLHdCQUF3QixDQUFDO1NBQ3ZELENBQUM7UUFTQSxJQUFJLENBQUMsZUFBZSxHQUFHLDZCQUE2QixDQUFDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUssU0FBUyxDQUFDLFFBQXFCOztZQUNuQyxJQUFJLEdBQVcsQ0FBQztZQUNoQixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxn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QUFNLE9BQU8sR0FBa0I7Z0JBQzdCLE1BQU0sRUFBRSxLQUFLO2dCQUNiLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDO1lBQ0YsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLElBQUksUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0YsT0FBTyxZQUFZLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztRQUNyQyxDQUFDO0tBQUE7SUFFSyxjQUFjLENBQUMsUUFBa0IsRUFBRSxRQUFxQjs7WUFDNUQsT0FBTyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUEvRXlCLFlBQVk7WUFDUixnQkFBZ0I7WUFDMUIsV0FBVzs7QUFYbEIsY0FBYztJQUQxQixVQUFVLEVBQUU7R0FDQSxjQUFjLENBd0YxQjtTQXhGWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXhwb3J0LCBTY2hlZHVsZSB9IGZyb20gJy4vZXhwb3J0LXNjaGVkdWxlcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBvcmRlckJ5LCBpc0VxdWFsLCByZW1vdmUsIHNvbWUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgSW52ZW50b3J5U2VydmljZSwgSWRSZWZlcmVuY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBGZXRjaENsaWVudCwgSUZldGNoT3B0aW9ucyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9ydHNTZXJ2aWNlIHtcbiAgRVJST1JfTUVTU0FHRVMgPSB7XG4gICAgcGF0dGVybl9tdWx0aUVtYWlsOiBnZXR0ZXh0KCdJbnZhbGlkIGVtYWlsIGFkZHJlc3Nlcy4nKSxcbiAgICBwYXR0ZXJuX3NpbmdsZUVtYWlsOiBnZXR0ZXh0KCdJbnZhbGlkIGVtYWlsIGFkZHJlc3MuJylcbiAgfTtcbiAgbWljcm9zZXJ2aWNlVXJsOiBzdHJpbmc7XG4gIGhlYWRlcnM6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5taWNyb3NlcnZpY2VVcmwgPSAnL3NlcnZpY2UvcmVwb3J0aW5nL3NjaGVkdWxlJztcbiAgICB0aGlzLmhlYWRlcnMgPSB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgfVxuXG4gIGFzeW5jIGdldEV4cG9ydChleHBvcnRJZDogSWRSZWZlcmVuY2UpIHtcbiAgICBsZXQgZXhwOiBFeHBvcnQ7XG4gICAgY29uc3QgZXhwb3J0RGV0YWlsID0gYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmRldGFpbChleHBvcnRJZCk7XG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGV4cG9ydERldGFpbDtcbiAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKHsgZGF0YSwgcmVzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHAgPSBkYXRhID8gKChkYXRhIGFzIHVua25vd24pIGFzIEV4cG9ydCkgOiAoe30gYXMgRXhwb3J0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwO1xuICB9XG5cbiAgYXN5bmMgZ2V0U2NoZWR1bGVMaXN0KGV4cG9ydElkOiBJZFJlZmVyZW5jZSkge1xuICAgIGNvbnN0IGV4cCA9IGF3YWl0IHRoaXMuZ2V0RXhwb3J0KGV4cG9ydElkKTtcblxuICAgIHJldHVybiB0aGlzLmV4dHJhY3RTY2hlZHVsZUxpc3RGcm9tRXhwb3J0KGV4cCk7XG4gIH1cblxuICBleHRyYWN0U2NoZWR1bGVMaXN0RnJvbUV4cG9ydChleHA6IEV4cG9ydCkge1xuICAgIGxldCBzY2hlZHVsZUxpc3Q6IFNjaGVkdWxlW107XG4gICAgaWYgKGV4cCkge1xuICAgICAgc2NoZWR1bGVMaXN0ID0gZXhwLmM4eV9TY2hlZHVsZUNvbmZpZ3VyYXRpb24gPyBleHAuYzh5X1NjaGVkdWxlQ29uZmlndXJhdGlvbiA6IFtdO1xuICAgIH1cbiAgICByZXR1cm4gb3JkZXJCeShzY2hlZHVsZUxpc3QsIFsndGltZXN0YW1wJ10sIFsnZGVzYyddKTtcbiAgfVxuXG4gIGFzeW5jIGFkZFNjaGVkdWxlKHNjaGVkdWxlOiBTY2hlZHVsZSwgZXhwb3J0SWQ6IElkUmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlU2NoZWR1bGVzKGV4cG9ydElkLCBbXSwgW3NjaGVkdWxlXSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVTY2hlZHVsZShvbGRTY2hlZHVsZTogU2NoZWR1bGUsIHNjaGVkdWxlOiBTY2hlZHVsZSwgZXhwb3J0SWQ6IElkUmVmZXJlbmNlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlU2NoZWR1bGVzKGV4cG9ydElkLCBbb2xkU2NoZWR1bGVdLCBbc2NoZWR1bGVdKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVNjaGVkdWxlcyhcbiAgICBleHBvcnRJZDogSWRSZWZlcmVuY2UsXG4gICAgc2NoZWR1bGVzVG9SZW1vdmU6IFNjaGVkdWxlW10gPSBbXSxcbiAgICBzY2hlZHVsZXNUb0FkZDogU2NoZWR1bGVbXSA9IFtdXG4gICkge1xuICAgIGxldCBzdWNjZXNzOiBib29sZWFuID0gZmFsc2U7XG4gICAgY29uc3QgZXhwID0gYXdhaXQgdGhpcy5nZXRFeHBvcnQoZXhwb3J0SWQpO1xuICAgIGNvbnN0IHNjaGVkdWxlcyA9IHRoaXMuZXh0cmFjdFNjaGVkdWxlTGlzdEZyb21FeHBvcnQoZXhwKTtcblxuICAgIHJlbW92ZShzY2hlZHVsZXMsIChzY2hlZHVsZTogU2NoZWR1bGUpID0+XG4gICAgICBzb21lKHNjaGVkdWxlc1RvUmVtb3ZlLCAoc2NoZWR1bGVUb1JlbW92ZTogU2NoZWR1bGUpID0+IGlzRXF1YWwoc2NoZWR1bGUsIHNjaGVkdWxlVG9SZW1vdmUpKVxuICAgICk7XG4gICAgc2NoZWR1bGVzLnB1c2guYXBwbHkoc2NoZWR1bGVzLCBzY2hlZHVsZXNUb0FkZCk7XG4gICAgZXhwLmM4eV9TY2hlZHVsZUNvbmZpZ3VyYXRpb24gPSBzY2hlZHVsZXM7XG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS51cGRhdGUoZXhwKTtcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBzdWNjZXNzID0gYXdhaXQgdGhpcy5yZXNjaGVkdWxlKGV4cG9ydElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlcyB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2VzcztcbiAgfVxuXG4gIGFzeW5jIHJlc2NoZWR1bGUoZXhwb3J0SWQ6IElkUmVmZXJlbmNlKSB7XG4gICAgY29uc3Qgb3B0aW9uczogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnNcbiAgICB9O1xuICAgIGNvbnN0IHJlc2NoZWR1bGluZyA9IGF3YWl0IHRoaXMuY2xpZW50LmZldGNoKGAke3RoaXMubWljcm9zZXJ2aWNlVXJsfS8ke2V4cG9ydElkfWAsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXNjaGVkdWxpbmcuc3RhdHVzID09PSAyMDA7XG4gIH1cblxuICBhc3luYyBkZWxldGVTY2hlZHVsZShzY2hlZHVsZTogU2NoZWR1bGUsIGV4cG9ydElkOiBJZFJlZmVyZW5jZSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZVNjaGVkdWxlcyhleHBvcnRJZCwgW3NjaGVkdWxlXSwgW10pO1xuICB9XG59XG4iXX0=