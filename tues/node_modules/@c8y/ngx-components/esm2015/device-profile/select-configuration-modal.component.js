import * as tslib_1 from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { QueriesUtil } from '@c8y/client';
import { Subject } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';
let SelectConfigurationModalComponent = class SelectConfigurationModalComponent {
    constructor(repositoryService) {
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(() => this.getItems()), map(({ data }) => this.aggregate(data)));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    search(searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: `*${searchTerm}*` }, { configurationType: `*${searchTerm}*` });
        }
        this.load.next();
    }
    result(selectedItems) {
        this.resultEmitter.emit(selectedItems);
    }
    getItems() {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    }
    aggregate(mos) {
        const selectedItems = this.selected;
        return mos.reduce((acc, curr) => {
            curr.configurationType = curr.configurationType || curr.name;
            const selected = selectedItems && selectedItems.filter(val => val.url === curr.url).length > 0;
            const selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected
            };
            let selectModalObject = acc.find(val => val.body[0].value === curr.configurationType);
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    }
};
SelectConfigurationModalComponent.ctorParameters = () => [
    { type: RepositoryService }
];
SelectConfigurationModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-select-configuration-modal',
        template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
    })
], SelectConfigurationModalComponent);
export { SelectConfigurationModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtcHJvZmlsZS8iLCJzb3VyY2VzIjpbInNlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBdUQsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRyxPQUFPLEVBQWtCLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBT25GLElBQWEsaUNBQWlDLEdBQTlDLE1BQWEsaUNBQWlDO0lBYzVDLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBYnhELFVBQUssR0FBVyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNoRCxTQUFJLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDcEMsbUJBQWMsR0FBc0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2hELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDaEMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN4QyxDQUFDO1FBQ0Ysa0JBQWEsR0FBd0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU3RCxvQkFBZSxHQUFRLEVB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S0FDM0QsQ0FBQztHQUNXLGlDQUFpQyxDQW9FN0M7U0FwRVksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIElTZWxlY3RNb2RhbE9iamVjdCwgSVNlbGVjdE1vZGFsT3B0aW9uLCBNb2RhbExhYmVscyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VydmljZSwgUmVwb3NpdG9yeVR5cGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnknO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb25maWd1cmF0aW9uTW9kYWxDb21wb25lbnQge1xuICB0aXRsZTogc3RyaW5nID0gZ2V0dGV4dCgnU2VsZWN0IGNvbmZpZ3VyYXRpb24nKTtcbiAgbG9hZDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGNvbmZpZ3VyYXRpb25zOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMubG9hZC5waXBlKFxuICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEl0ZW1zKCkpLFxuICAgIG1hcCgoeyBkYXRhIH0pID0+IHRoaXMuYWdncmVnYXRlKGRhdGEpKVxuICApO1xuICByZXN1bHRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHNlbGVjdGVkOiBbXTtcbiAgZGV2aWNlVHlwZVF1ZXJ5OiBhbnkgPSB7fTtcbiAgc2VhcmNoUXVlcnk6IGFueSA9IHt9O1xuICBsYWJlbHM6IE1vZGFsTGFiZWxzID0geyBvazogZ2V0dGV4dCgnU2F2ZScpIH07XG4gIHByaXZhdGUgcXVlcmllc1V0aWw6IFF1ZXJpZXNVdGlsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVwb3NpdG9yeVNlcnZpY2U6IFJlcG9zaXRvcnlTZXJ2aWNlKSB7XG4gICAgdGhpcy5xdWVyaWVzVXRpbCA9IG5ldyBRdWVyaWVzVXRpbCgpO1xuICB9XG5cbiAgc2VhcmNoKHNlYXJjaFRlcm0pIHtcbiAgICBpZiAoIXNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMuc2VhcmNoUXVlcnkgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWFyY2hRdWVyeSA9IHRoaXMucXVlcmllc1V0aWwuYWRkT3JGaWx0ZXIoXG4gICAgICAgIHsgbmFtZTogYCoke3NlYXJjaFRlcm19KmAgfSxcbiAgICAgICAgeyBjb25maWd1cmF0aW9uVHlwZTogYCoke3NlYXJjaFRlcm19KmAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2FkLm5leHQoKTtcbiAgfVxuXG4gIHJlc3VsdChzZWxlY3RlZEl0ZW1zKSB7XG4gICAgdGhpcy5yZXN1bHRFbWl0dGVyLmVtaXQoc2VsZWN0ZWRJdGVtcyk7XG4gIH1cblxuICBnZXRJdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0UmVwb3NpdG9yeUVudHJpZXMoUmVwb3NpdG9yeVR5cGUuQ09ORklHVVJBVElPTiwge1xuICAgICAgcXVlcnk6IHRoaXMucXVlcmllc1V0aWwuYWRkT3JGaWx0ZXIodGhpcy5kZXZpY2VUeXBlUXVlcnksIHRoaXMuc2VhcmNoUXVlcnkpLFxuICAgICAgcGFyYW1zOiB7IHBhZ2VTaXplOiAxMDAgfVxuICAgIH0pO1xuICB9XG5cbiAgYWdncmVnYXRlKG1vczogSU1hbmFnZWRPYmplY3RbXSk6IElTZWxlY3RNb2RhbE9iamVjdFtdIHtcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW1zOiBhbnlbXSA9IHRoaXMuc2VsZWN0ZWQ7XG4gICAgcmV0dXJuIG1vcy5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgY3Vyci5jb25maWd1cmF0aW9uVHlwZSA9IGN1cnIuY29uZmlndXJhdGlvblR5cGUgfHwgY3Vyci5uYW1lO1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPVxuICAgICAgICBzZWxlY3RlZEl0ZW1zICYmIHNlbGVjdGVkSXRlbXMuZmlsdGVyKHZhbCA9PiB2YWwudXJsID09PSBjdXJyLnVybCkubGVuZ3RoID4gMDtcbiAgICAgIGNvbnN0IHNlbGVjdE1vZGFsT3B0aW9uOiBJU2VsZWN0TW9kYWxPcHRpb24gPSB7XG4gICAgICAgIGJvZHk6IFt7IHZhbHVlOiBjdXJyLm5hbWUgfV0sXG4gICAgICAgIG9iajogY3VycixcbiAgICAgICAgc2VsZWN0ZWRcbiAgICAgIH07XG4gICAgICBsZXQgc2VsZWN0TW9kYWxPYmplY3Q6IElTZWxlY3RNb2RhbE9iamVjdCA9IGFjYy5maW5kKFxuICAgICAgICB2YWwgPT4gdmFsLmJvZHlbMF0udmFsdWUgPT09IGN1cnIuY29uZmlndXJhdGlvblR5cGVcbiAgICAgICkgYXMgSVNlbGVjdE1vZGFsT2JqZWN0O1xuICAgICAgaWYgKHNlbGVjdE1vZGFsT2JqZWN0KSB7XG4gICAgICAgIHNlbGVjdE1vZGFsT2JqZWN0Lm9wdGlvbnMucHVzaChzZWxlY3RNb2RhbE9wdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RNb2RhbE9iamVjdCA9IHtcbiAgICAgICAgICBncm91cElkOiBjdXJyLmlkLFxuICAgICAgICAgIGJvZHk6IFt7IHZhbHVlOiBjdXJyLmNvbmZpZ3VyYXRpb25UeXBlIH1dLFxuICAgICAgICAgIG9wdGlvbnM6IFtzZWxlY3RNb2RhbE9wdGlvbl1cbiAgICAgICAgfTtcbiAgICAgICAgYWNjLnB1c2goc2VsZWN0TW9kYWxPYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIH1cbn1cbiJdfQ==