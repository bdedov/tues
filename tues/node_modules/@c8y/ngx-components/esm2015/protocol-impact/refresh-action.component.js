import * as tslib_1 from "tslib";
import { Component, OnInit, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService, gettext } from '@c8y/ngx-components';
import { ImpactSubscriptionService } from './impact-subscription.service';
let RefreshActionComponent = class RefreshActionComponent {
    constructor(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templateCopy);
    }
    refresh() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // TODO This is only a dirty hack to retrieve deviceId from URL;
            // In fact contextData should be provided for this component by a resolver?
            const url = this.router &&
                this.router.routerState &&
                this.router.routerState.snapshot &&
                this.router.routerState.snapshot.url;
            const deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
            if (deviceId) {
                this.requestInProgress = true;
                try {
                    const res = yield this.impactService.refreshDeviceResources(deviceId);
                    if (res && res.status !== 200) {
                        const data = res.json ? yield res.json() : undefined;
                        this.alert.addServerFailure({ data, res });
                    }
                    else {
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                    }
                }
                catch (ex) {
                    this.alert.addServerFailure(ex);
                }
                this.requestInProgress = false;
            }
            else {
                this.alert.danger(gettext('Could not find device ID in URL.'));
            }
        });
    }
};
RefreshActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router },
    { type: ImpactSubscriptionService },
    { type: AlertService }
];
tslib_1.__decorate([
    ViewChild('templateCopy', { read: TemplateRef, static: true })
], RefreshActionComponent.prototype, "templateCopy", void 0);
RefreshActionComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-impact-refresh-action',
        template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i class=\"fa fa-refresh\" [ngClass]=\"{ 'fa-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
    })
], RefreshActionComponent);
export { RefreshActionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1pbXBhY3QvIiwic291cmNlcyI6WyJyZWZyZXNoLWFjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNMUUsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFJakMsWUFDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsYUFBd0MsRUFDeEMsS0FBbUI7UUFIbkIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQzFCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVLLE9BQU87O1lBQ1gsZ0VBQWdFO1lBQ2hFLDJFQUEyRTtZQUMzRSxNQUFNLEdBQUcsR0FDUCxJQUFJLENBQUMsTUFBTTtnQkFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVE7Z0JBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDdkMsTUFBTSxRQUFRLEdBQVcsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRS9FLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7Z0JBQzlCLElBQUk7b0JBQ0YsTUFBTSxHQUFHLEdBQW1CLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDdEYsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7d0JBQzdCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztxQkFDNUM7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztxQkFDbkU7aUJBQ0Y7Z0JBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDakM7Z0JBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQzthQUNoQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUF0Q2tCLGdCQUFnQjtZQUNmLE1BQU07WUFDQyx5QkFBeUI7WUFDakMsWUFBWTs7QUFQbUM7SUFBL0QsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzREQUFjO0FBRGxFLHNCQUFzQjtJQUpsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkJBQTJCO1FBQ3JDLDRZQUE4QztLQUMvQyxDQUFDO0dBQ1csc0JBQXNCLENBMkNsQztTQTNDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElGZXRjaFJlc3BvbnNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJbXBhY3RTdWJzY3JpcHRpb25TZXJ2aWNlIH0gZnJvbSAnLi9pbXBhY3Qtc3Vic2NyaXB0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktaW1wYWN0LXJlZnJlc2gtYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JlZnJlc2gtYWN0aW9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVDb3B5JywgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pIHRlbXBsYXRlQ29weTtcbiAgcmVxdWVzdEluUHJvZ3Jlc3M6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgaW1wYWN0U2VydmljZTogSW1wYWN0U3Vic2NyaXB0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmNSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVDb3B5KTtcbiAgfVxuXG4gIGFzeW5jIHJlZnJlc2goKSB7XG4gICAgLy8gVE9ETyBUaGlzIGlzIG9ubHkgYSBkaXJ0eSBoYWNrIHRvIHJldHJpZXZlIGRldmljZUlkIGZyb20gVVJMO1xuICAgIC8vIEluIGZhY3QgY29udGV4dERhdGEgc2hvdWxkIGJlIHByb3ZpZGVkIGZvciB0aGlzIGNvbXBvbmVudCBieSBhIHJlc29sdmVyP1xuICAgIGNvbnN0IHVybDogc3RyaW5nID1cbiAgICAgIHRoaXMucm91dGVyICYmXG4gICAgICB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZSAmJlxuICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QgJiZcbiAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnVybDtcbiAgICBjb25zdCBkZXZpY2VJZDogc3RyaW5nID0gdXJsICYmICgvXlxcL2RldmljZVxcLyhcXGQrKVxcLy4qJC9naS5leGVjKHVybCkgfHwgW10pWzFdO1xuXG4gICAgaWYgKGRldmljZUlkKSB7XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlczogSUZldGNoUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmltcGFjdFNlcnZpY2UucmVmcmVzaERldmljZVJlc291cmNlcyhkZXZpY2VJZCk7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uID8gYXdhaXQgcmVzLmpzb24oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoeyBkYXRhLCByZXMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGVydC5zdWNjZXNzKGdldHRleHQoJ0RldmljZSByZXNvdXJjZSByZWZyZXNoIHNjaGVkdWxlZC4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWxlcnQuZGFuZ2VyKGdldHRleHQoJ0NvdWxkIG5vdCBmaW5kIGRldmljZSBJRCBpbiBVUkwuJykpO1xuICAgIH1cbiAgfVxufVxuIl19