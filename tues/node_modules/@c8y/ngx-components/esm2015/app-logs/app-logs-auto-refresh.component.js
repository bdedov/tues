import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { AppLogsService } from './app-logs.service';
import { fromEvent, Subject, of, interval, NEVER } from 'rxjs';
import { filter, catchError, tap, debounce, switchMap, takeUntil, finalize, delay, repeat, merge, scan } from 'rxjs/operators';
let AppLogsAutoRefreshComponent = class AppLogsAutoRefreshComponent {
    constructor(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = true;
        this.onNewLogs = new EventEmitter();
        this.toggleState = currentState => !currentState;
    }
    set buttonsDisabled(areDisabled) {
        this.isAutoRefreshDisabled = areDisabled;
        if (areDisabled && this.isAutoRefreshOn) {
            this.isAutoRefreshOn = false;
            this.cancel$.next(false);
        }
    }
    ngAfterViewInit() {
        const clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(() => interval(300)), scan(this.toggleState, false), tap(isAutoRefreshOn => this.setButtonState(isAutoRefreshOn)), switchMap(isOn => (isOn ? this.watchForNewLogs() : NEVER)));
        this.subscription = clicks$.subscribe();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    setButtonState(isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
    }
    watchForNewLogs() {
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(isAutoRefreshOn => isAutoRefreshOn === false))), finalize(() => {
            this.isAutoRefreshOn = false;
        }));
    }
    startPolling() {
        return of(1).pipe(switchMap(() => this.getNewLogs().pipe(catchError(er => of(this.getEmptyLogsJson())))), tap(logs => this.updateLogsToOutput(logs)), delay(10000), repeat());
    }
    getNewLogs() {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    }
    getAppId() {
        return this.mo.applicationId;
    }
    getInstanceName() {
        return this.selectedInstance.name;
    }
    updateLogsToOutput(newLogs) {
        const { dateFrom, dateTo } = newLogs;
        if (dateFrom && dateTo) {
            this.logsToOutput = Object.assign({}, newLogs);
            this.onNewLogs.emit(this.logsToOutput);
        }
    }
    getEmptyLogsJson() {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    }
};
AppLogsAutoRefreshComponent.ctorParameters = () => [
    { type: AppLogsService }
];
tslib_1.__decorate([
    Input()
], AppLogsAutoRefreshComponent.prototype, "selectedInstance", void 0);
tslib_1.__decorate([
    Input()
], AppLogsAutoRefreshComponent.prototype, "mo", void 0);
tslib_1.__decorate([
    Input()
], AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", null);
tslib_1.__decorate([
    Output()
], AppLogsAutoRefreshComponent.prototype, "onNewLogs", void 0);
tslib_1.__decorate([
    ViewChild('autoRefresh', { static: true })
], AppLogsAutoRefreshComponent.prototype, "button", void 0);
AppLogsAutoRefreshComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-app-logs-auto-refresh',
        template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
    })
], AppLogsAutoRefreshComponent);
export { AppLogsAutoRefreshComponent };
//# sourceMappingURL=data:application/json;base64,