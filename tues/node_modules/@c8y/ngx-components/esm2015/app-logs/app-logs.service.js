import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions } from '@c8y/client';
import { from } from 'rxjs';
import { flatMap } from 'rxjs/operators';
let AppLogsService = class AppLogsService {
    constructor(client) {
        this.client = client;
        this.BASE_PATH_APPLICATION = 'application/applications';
        this.header = {
            Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
        };
    }
    getLogs$(appId, instanceName, params = {}) {
        const url = `${this.BASE_PATH_APPLICATION}/${appId}/logs/${instanceName}`;
        const defaultConfig = {
            headers: this.header,
            method: 'GET'
        };
        const formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        const formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        const modifiedParams = Object.assign({}, params, (formattedDateFrom && { dateFrom: formattedDateFrom }), (formattedDateTo && { dateTo: formattedDateTo }));
        const config = params ? Object.assign({}, defaultConfig, { params: modifiedParams }) : Object.assign({}, defaultConfig);
        return from(this.client.fetch(url, config)).pipe(flatMap(res => res.json()));
    }
    formatDate(dateToFormat) {
        return new Date(dateToFormat).toISOString();
    }
};
AppLogsService.ctorParameters = () => [
    { type: FetchClient }
];
AppLogsService = tslib_1.__decorate([
    Injectable()
], AppLogsService);
export { AppLogsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXBwLWxvZ3MvIiwic291cmNlcyI6WyJhcHAtbG9ncy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pELE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBU3pDLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFJekIsWUFBb0IsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUgvQiwwQkFBcUIsR0FBVywwQkFBMEIsQ0FBQztRQUlqRSxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osTUFBTSxFQUFFLCtFQUErRTtTQUN4RixDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhLEVBQUUsWUFBb0IsRUFBRSxTQUF3QixFQUFFO1FBQ3RFLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixJQUFJLEtBQUssU0FBUyxZQUFZLEVBQUUsQ0FBQztRQUMxRSxNQUFNLGFBQWEsR0FBa0I7WUFDbkMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUNGLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlFLE1BQU0sY0FBYyxxQkFDZixNQUFNLEVBQ04sQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLEVBQ3RELENBQUMsZUFBZSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQ3BELENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxtQkFBTSxhQUFhLElBQUUsTUFBTSxFQUFFLGNBQWMsSUFBRyxDQUFDLG1CQUFNLGFBQWEsQ0FBRSxDQUFDO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxVQUFVLENBQUMsWUFBb0I7UUFDN0IsT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0NBQ0YsQ0FBQTs7WUEzQjZCLFdBQVc7O0FBSjVCLGNBQWM7SUFEMUIsVUFBVSxFQUFFO0dBQ0EsY0FBYyxDQStCMUI7U0EvQlksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ3NKU09OIH0gZnJvbSAnLi9sb2dzLm1vZGVsJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJRmV0Y2hPcHRpb25zIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmxhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW50ZXJmYWNlIFJlcXVlc3RQYXJhbXMge1xuICBkYXRlRnJvbT87XG4gIGRhdGVUbz87XG4gIGxpbWl0Pztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcExvZ3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBCQVNFX1BBVEhfQVBQTElDQVRJT046IHN0cmluZyA9ICdhcHBsaWNhdGlvbi9hcHBsaWNhdGlvbnMnO1xuICBwcml2YXRlIGhlYWRlcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudCkge1xuICAgIHRoaXMuaGVhZGVyID0ge1xuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vdm5kLmNvbS5uc24uY3VtdWxvY2l0eS5hcHBsaWNhdGlvbkxvZ3MranNvbjtjaGFyc2V0PVVURi04O3Zlcj0wLjknXG4gICAgfTtcbiAgfVxuXG4gIGdldExvZ3MkKGFwcElkOiBzdHJpbmcsIGluc3RhbmNlTmFtZTogc3RyaW5nLCBwYXJhbXM6IFJlcXVlc3RQYXJhbXMgPSB7fSk6IE9ic2VydmFibGU8TG9nc0pTT04+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLkJBU0VfUEFUSF9BUFBMSUNBVElPTn0vJHthcHBJZH0vbG9ncy8ke2luc3RhbmNlTmFtZX1gO1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWc6IElGZXRjaE9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICB9O1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGVGcm9tID0gcGFyYW1zLmRhdGVGcm9tID8gdGhpcy5mb3JtYXREYXRlKHBhcmFtcy5kYXRlRnJvbSkgOiBudWxsO1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGVUbyA9IHBhcmFtcy5kYXRlVG8gPyB0aGlzLmZvcm1hdERhdGUocGFyYW1zLmRhdGVUbykgOiBudWxsO1xuICAgIGNvbnN0IG1vZGlmaWVkUGFyYW1zID0ge1xuICAgICAgLi4ucGFyYW1zLFxuICAgICAgLi4uKGZvcm1hdHRlZERhdGVGcm9tICYmIHsgZGF0ZUZyb206IGZvcm1hdHRlZERhdGVGcm9tIH0pLFxuICAgICAgLi4uKGZvcm1hdHRlZERhdGVUbyAmJiB7IGRhdGVUbzogZm9ybWF0dGVkRGF0ZVRvIH0pXG4gICAgfTtcblxuICAgIGNvbnN0IGNvbmZpZyA9IHBhcmFtcyA/IHsgLi4uZGVmYXVsdENvbmZpZywgcGFyYW1zOiBtb2RpZmllZFBhcmFtcyB9IDogeyAuLi5kZWZhdWx0Q29uZmlnIH07XG4gICAgcmV0dXJuIGZyb20odGhpcy5jbGllbnQuZmV0Y2godXJsLCBjb25maWcpKS5waXBlKGZsYXRNYXAocmVzID0+IHJlcy5qc29uKCkpKTtcbiAgfVxuXG4gIGZvcm1hdERhdGUoZGF0ZVRvRm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlVG9Gb3JtYXQpLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn1cbiJdfQ==