import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { RepositoryType } from '../repository.model';
import { AlertService, gettext } from '@c8y/ngx-components';
import { RepositoryService } from '../repository.service';
let SaveToRepositoryComponent = class SaveToRepositoryComponent {
    constructor(modal, alertService, repositoryService) {
        this.modal = modal;
        this.alertService = alertService;
        this.repositoryService = repositoryService;
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    save() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            {
                try {
                    const configSnapshotData = {
                        selected: {
                            configurationType: this.configSnapshot.configurationType
                        },
                        version: this.configSnapshot.name,
                        deviceType: this.configSnapshot.deviceType,
                        description: this.configSnapshot.description,
                        binary: {
                            file: new File([this.configSnapshot.binary], this.configSnapshot.name)
                        }
                    };
                    yield this.repositoryService.save(configSnapshotData, RepositoryType.CONFIGURATION);
                    this.alertService.success(gettext('Configuration saved.'));
                    this._save();
                }
                catch (ex) {
                    this.alertService.addServerFailure(ex);
                }
            }
        });
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
};
SaveToRepositoryComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: AlertService },
    { type: RepositoryService }
];
SaveToRepositoryComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-save-config-to-configuration-repository',
        template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"description\">Description</label>\n      <input\n        type=\"text\"\n        id=\"description\"\n        class=\"form-control\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        name=\"description\"\n        [(ngModel)]=\"configSnapshot.description\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Save configuration to repository' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
    })
], SaveToRepositoryComponent);
export { SaveToRepositoryComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS10by1yZXBvc2l0b3J5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS8iLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb24tZGV2aWNlLXRhYi9zYXZlLXRvLXJlcG9zaXRvcnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQXlCLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFNMUQsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFTcEMsWUFDVSxLQUFpQixFQUNqQixZQUEwQixFQUMxQixpQkFBb0M7UUFGcEMsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUNqQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBVjlDLFdBQU0sR0FBaUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFRQSxDQUFDO0lBRUUsSUFBSTs7WUFDUjtnQkFDRSxJQUFJO29CQUNGLE1BQU0sa0JBQWtCLEdBQUc7d0JBQ3pCLFFBQVEsRUFBRTs0QkFDUixpQkFBaUIsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLGlCQUFpQjt5QkFDekQ7d0JBQ0QsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSTt3QkFDakMsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVTt3QkFDMUMsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVzt3QkFDNUMsTUFBTSxFQUFFOzRCQUNOLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7eUJBQ3ZFO3FCQUNGLENBQUM7b0JBQ0YsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDcEYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztvQkFDM0QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNkO2dCQUFDLE9BQU8sRUFBRSxFQUFFO29CQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2FBQ0Y7UUFDSCxDQUFDO0tBQUE7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQ0YsQ0FBQTs7WUFoQ2tCLFVBQVU7WUFDSCxZQUFZO1lBQ1AsaUJBQWlCOztBQVpuQyx5QkFBeUI7SUFKckMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZDQUE2QztRQUN2RCw0L0RBQWdEO0tBQ2pELENBQUM7R0FDVyx5QkFBeUIsQ0EwQ3JDO1NBMUNZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNuYXBzaG90LCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJy4uL3JlcG9zaXRvcnkubW9kZWwnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VydmljZSB9IGZyb20gJy4uL3JlcG9zaXRvcnkuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zYXZlLWNvbmZpZy10by1jb25maWd1cmF0aW9uLXJlcG9zaXRvcnknLFxuICB0ZW1wbGF0ZVVybDogJ3NhdmUtdG8tcmVwb3NpdG9yeS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2F2ZVRvUmVwb3NpdG9yeUNvbXBvbmVudCB7XG4gIGNvbmZpZ1NuYXBzaG90OiBDb25maWd1cmF0aW9uU25hcHNob3Q7XG4gIHJlc3VsdDogUHJvbWlzZTxhbnk+ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRoaXMuX3NhdmUgPSByZXNvbHZlO1xuICAgIHRoaXMuX2NhbmNlbCA9IHJlamVjdDtcbiAgfSk7XG4gIHByaXZhdGUgX3NhdmU7XG4gIHByaXZhdGUgX2NhbmNlbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG1vZGFsOiBCc01vZGFsUmVmLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZXBvc2l0b3J5U2VydmljZTogUmVwb3NpdG9yeVNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uZmlnU25hcHNob3REYXRhID0ge1xuICAgICAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uVHlwZTogdGhpcy5jb25maWdTbmFwc2hvdC5jb25maWd1cmF0aW9uVHlwZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmVyc2lvbjogdGhpcy5jb25maWdTbmFwc2hvdC5uYW1lLFxuICAgICAgICAgIGRldmljZVR5cGU6IHRoaXMuY29uZmlnU25hcHNob3QuZGV2aWNlVHlwZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5jb25maWdTbmFwc2hvdC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBiaW5hcnk6IHtcbiAgICAgICAgICAgIGZpbGU6IG5ldyBGaWxlKFt0aGlzLmNvbmZpZ1NuYXBzaG90LmJpbmFyeV0sIHRoaXMuY29uZmlnU25hcHNob3QubmFtZSlcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeVNlcnZpY2Uuc2F2ZShjb25maWdTbmFwc2hvdERhdGEsIFJlcG9zaXRvcnlUeXBlLkNPTkZJR1VSQVRJT04pO1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0NvbmZpZ3VyYXRpb24gc2F2ZWQuJykpO1xuICAgICAgICB0aGlzLl9zYXZlKCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9jYW5jZWwoKTtcbiAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgfVxufVxuIl19