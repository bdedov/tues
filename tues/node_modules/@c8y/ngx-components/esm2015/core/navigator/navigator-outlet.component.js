import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { HeaderService } from '../header/index';
import { BehaviorSubject } from 'rxjs';
let NavigatorOutletComponent = class NavigatorOutletComponent {
    constructor(headerService) {
        this.headerService = headerService;
        this.open = true;
        this.isShown$ = new BehaviorSubject(false);
    }
    ngOnChanges() {
        this.isShown$.next(this.nodes && this.nodes.length > 0);
    }
    /**
     * Closes the navigator on click if the window is small.
     */
    collapseNavigator(from) {
        if (from === 'link' && !this.headerService.largeWidth) {
            this.headerService.closeNavigator();
        }
    }
    trackByPathOrLabel(index, node) {
        return node.path ? node.path : node.label;
    }
};
NavigatorOutletComponent.ctorParameters = () => [
    { type: HeaderService }
];
tslib_1.__decorate([
    Input()
], NavigatorOutletComponent.prototype, "nodes", void 0);
tslib_1.__decorate([
    Input()
], NavigatorOutletComponent.prototype, "open", void 0);
NavigatorOutletComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-navigator-outlet, c8y-ui-navigator',
        template: "<nav class=\"navigator\" *ngIf=\"isShown$ | async\" [ngClass]=\"{ open: open }\">\n  <ng-content select=\".navigator-slot-top\"></ng-content>\n  <ul class=\"navigatorContent\">\n    <c8y-navigator-node-display (nodeClick)=\"collapseNavigator($event)\" [node]=\"node\" *ngFor=\"let node of nodes trackBy trackByPathOrLabel\" [isRoot]=\"true\"></c8y-navigator-node-display>\n  </ul>\n  <ng-content select=\".navigator-slot-bottom\"></ng-content>\n</nav>\n"
    })
], NavigatorOutletComponent);
export { NavigatorOutletComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW91dGxldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9uYXZpZ2F0b3IvbmF2aWdhdG9yLW91dGxldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVoRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBTSxNQUFNLE1BQU0sQ0FBQztBQU8zQyxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUtuQyxZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUh2QyxTQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLGFBQVEsR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7SUFFdEIsQ0FBQztJQUVwRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FBQyxJQUFrQztRQUNsRCxJQUFJLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRTtZQUNyRCxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQUssRUFBRSxJQUFJO1FBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM1QyxDQUFDO0NBQ0YsQ0FBQTs7WUFsQm9DLGFBQWE7O0FBSnZDO0lBQVIsS0FBSyxFQUFFO3VEQUF3QjtBQUN2QjtJQUFSLEtBQUssRUFBRTtzREFBYTtBQUZWLHdCQUF3QjtJQUpwQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0NBQXdDO1FBQ2xELGlkQUErQztLQUNoRCxDQUFDO0dBQ1csd0JBQXdCLENBdUJwQztTQXZCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0b3JOb2RlIH0gZnJvbSAnLi9uYXZpZ2F0b3Itbm9kZSc7XG5pbXBvcnQgeyBIZWFkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vaGVhZGVyL2luZGV4JztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbmF2aWdhdG9yLW91dGxldCwgYzh5LXVpLW5hdmlnYXRvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXZpZ2F0b3Itb3V0bGV0LnRlbXBsYXRlLmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBOYXZpZ2F0b3JPdXRsZXRDb21wb25lbnQge1xuICBASW5wdXQoKSBub2RlczogTmF2aWdhdG9yTm9kZVtdO1xuICBASW5wdXQoKSBvcGVuID0gdHJ1ZTtcbiAgaXNTaG93biQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaGVhZGVyU2VydmljZTogSGVhZGVyU2VydmljZSkge31cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLmlzU2hvd24kLm5leHQodGhpcy5ub2RlcyAmJiB0aGlzLm5vZGVzLmxlbmd0aCA+IDApO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgbmF2aWdhdG9yIG9uIGNsaWNrIGlmIHRoZSB3aW5kb3cgaXMgc21hbGwuXG4gICAqL1xuICBjb2xsYXBzZU5hdmlnYXRvcihmcm9tOiAnaWNvbicgfCAnZXhwYW5kZXInIHwgJ2xpbmsnKSB7XG4gICAgaWYgKGZyb20gPT09ICdsaW5rJyAmJiAhdGhpcy5oZWFkZXJTZXJ2aWNlLmxhcmdlV2lkdGgpIHtcbiAgICAgIHRoaXMuaGVhZGVyU2VydmljZS5jbG9zZU5hdmlnYXRvcigpO1xuICAgIH1cbiAgfVxuXG4gIHRyYWNrQnlQYXRoT3JMYWJlbChpbmRleCwgbm9kZSkge1xuICAgIHJldHVybiBub2RlLnBhdGggPyBub2RlLnBhdGggOiBub2RlLmxhYmVsO1xuICB9XG59XG4iXX0=