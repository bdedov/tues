import { matches, snakeCase } from 'lodash-es';
export class NavigatorNode {
    constructor(data) {
        this.children = [];
        this.parents = [];
        this.routerLinkExact = true;
        this.open = false;
        this.hidden = false;
        this.draggable = false;
        this.droppable = false;
        this.dragged = false;
        this.draggedHover = false;
        this.confirm = undefined;
        this._priority = 0;
        this.update(data);
    }
    get hasChildren() {
        return this.children.length > 0;
    }
    get id() {
        return 'navigator_node_' + snakeCase(this.label);
    }
    get priority() {
        if (this._priority) {
            return this._priority;
        }
        else {
            const childrenPriorities = this.children.map(({ priority }) => priority || 0);
            if (childrenPriorities.length) {
                return childrenPriorities.length ? Math.max(...childrenPriorities) : 0;
            }
            return 0;
        }
    }
    set priority(priority) {
        this._priority = priority;
    }
    openOnStart(url) {
        return false;
    }
    add(node) {
        if (node === this) {
            throw new Error('Adding node to itself');
        }
        if (this.children.indexOf(node) === -1) {
            this.children.push(node);
        }
        if (node.parents.indexOf(this) === -1) {
            node.parents.push(this);
        }
        this.updateChildren();
    }
    remove(node) {
        const ix = this.children.indexOf(node);
        const pix = node.parents.indexOf(this);
        if (ix > -1) {
            this.children.splice(ix, 1);
        }
        if (pix > -1) {
            node.parents.splice(pix, 1);
        }
        this.updateChildren();
    }
    update(data) {
        if (data) {
            Object.assign(this, data);
            if (data.hidden !== undefined) {
                this.parents.forEach(p => {
                    p.updateHidden();
                });
            }
        }
    }
    find(predicate) {
        if (typeof predicate === 'string') {
            const compareLabel = predicate.toLocaleLowerCase();
            predicate = ({ label }) => compareLabel === label.toLowerCase();
        }
        if (typeof predicate === 'object') {
            predicate = matches(predicate);
        }
        if (typeof predicate !== 'function') {
            throw new Error('Invalid search predicate');
        }
        return this.children.reduce((found, child) => found || child.find(predicate), this.children.find(predicate));
    }
    empty() {
        this.children.length = 0;
    }
    click(options = {}) {
        // do nothing
    }
    drop($event) {
        $event.stopPropagation();
        clearTimeout(this.expandDragTimeout);
    }
    dragStart($event) {
        $event.stopPropagation();
        // we can't pass a object to setData, so we do it via service
        // set data is still needed, to make the drag&drop work
        $event.dataTransfer.setData('node', 'node');
        this.dragged = true;
    }
    dragEnd($event) {
        $event.stopPropagation();
        this.dragged = false;
        $event.dataTransfer.clearData();
    }
    get canDrop() {
        return this.droppable;
    }
    get canNavigate() {
        return typeof this.path !== 'undefined';
    }
    dragEnter($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = true;
        if (!this.open) {
            this.expandDragTimeout = setTimeout(() => this.expand(), 1000);
        }
    }
    dragLeave($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = false;
        clearTimeout(this.expandDragTimeout);
    }
    expand() {
        if (!this.open) {
            this.open = true;
            this.click({ open: true, expander: true });
        }
    }
    traverse(callback) {
        if (this.children) {
            this.children.forEach(child => {
                callback(child);
                child.traverse(callback);
            });
        }
    }
    destroy() {
        // nothing todo here
    }
    updateChildren() {
        this.sort();
        this.updateHidden();
    }
    sort() {
        this.children.sort((a, b) => {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                return -1;
            }
            else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    updateHidden() {
        if (typeof this.path === 'undefined') {
            this.hidden = !this.children.some(({ hidden }) => !hidden);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,