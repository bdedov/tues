import * as tslib_1 from "tslib";
import { Component, ViewChild, Input } from '@angular/core';
import { NavigatorNode } from './navigator-node';
import { NavigatorService } from './navigator.service';
let NavigatorItemComponent = class NavigatorItemComponent {
    constructor(service) {
        this.service = service;
        this.priority = 0;
        this.nodeData = new NavigatorNode();
    }
    ngOnInit() {
        this.ngOnChanges();
        setTimeout(() => this.service.add(this.nodeData));
    }
    ngOnChanges() {
        this.nodeData.icon = this.icon;
        this.nodeData.label = this.label;
        this.nodeData.path = this.path;
        this.nodeData.priority = this.priority;
        this.nodeData.iconTemplate = !this.icon ? this.template : undefined;
        this.nodeData.icon = this.icon;
    }
    ngOnDestroy() {
        this.service.remove(this.nodeData);
    }
};
NavigatorItemComponent.ctorParameters = () => [
    { type: NavigatorService }
];
tslib_1.__decorate([
    ViewChild('iconTpl', { static: true })
], NavigatorItemComponent.prototype, "template", void 0);
tslib_1.__decorate([
    Input()
], NavigatorItemComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input()
], NavigatorItemComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input()
], NavigatorItemComponent.prototype, "path", void 0);
tslib_1.__decorate([
    Input()
], NavigatorItemComponent.prototype, "priority", void 0);
NavigatorItemComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-navigator-item',
        template: '<ng-template #iconTpl><ng-content></ng-content></ng-template>'
    })
], NavigatorItemComponent);
export { NavigatorItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLWVudHJ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL25hdmlnYXRvci9uYXZpZ2F0b3ItZW50cnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFlLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTXZELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBT2pDLFlBQ1UsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFIMUIsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUtwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDRixDQUFBOztZQXRCb0IsZ0JBQWdCOztBQVBHO0lBQXJDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7d0RBQTRCO0FBQ3hEO0lBQVIsS0FBSyxFQUFFO3FEQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7b0RBQWM7QUFDYjtJQUFSLEtBQUssRUFBRTtvREFBYztBQUNiO0lBQVIsS0FBSyxFQUFFO3dEQUFjO0FBTFgsc0JBQXNCO0lBSmxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFLCtEQUErRDtLQUMxRSxDQUFDO0dBQ1csc0JBQXNCLENBOEJsQztTQTlCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGUgfSBmcm9tICcuL25hdmlnYXRvci1ub2RlJztcbmltcG9ydCB7IE5hdmlnYXRvclNlcnZpY2UgfSBmcm9tICcuL25hdmlnYXRvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW5hdmlnYXRvci1pdGVtJyxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI2ljb25UcGw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbmctdGVtcGxhdGU+Jyxcbn0pXG5leHBvcnQgY2xhc3MgTmF2aWdhdG9ySXRlbUNvbXBvbmVudCAge1xuICBAVmlld0NoaWxkKCdpY29uVHBsJywge3N0YXRpYzogdHJ1ZX0pIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBpY29uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBhdGg6IHN0cmluZztcbiAgQElucHV0KCkgcHJpb3JpdHkgPSAwO1xuICBub2RlRGF0YTogTmF2aWdhdG9yTm9kZTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBOYXZpZ2F0b3JTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMubm9kZURhdGEgPSBuZXcgTmF2aWdhdG9yTm9kZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uZ09uQ2hhbmdlcygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXJ2aWNlLmFkZCh0aGlzLm5vZGVEYXRhKSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLm5vZGVEYXRhLmljb24gPSB0aGlzLmljb247XG4gICAgdGhpcy5ub2RlRGF0YS5sYWJlbCA9IHRoaXMubGFiZWw7XG4gICAgdGhpcy5ub2RlRGF0YS5wYXRoID0gdGhpcy5wYXRoO1xuICAgIHRoaXMubm9kZURhdGEucHJpb3JpdHkgPSB0aGlzLnByaW9yaXR5O1xuICAgIHRoaXMubm9kZURhdGEuaWNvblRlbXBsYXRlID0gIXRoaXMuaWNvbiA/IHRoaXMudGVtcGxhdGUgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5ub2RlRGF0YS5pY29uID0gdGhpcy5pY29uO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zZXJ2aWNlLnJlbW92ZSh0aGlzLm5vZGVEYXRhKTtcbiAgfVxufVxuIl19