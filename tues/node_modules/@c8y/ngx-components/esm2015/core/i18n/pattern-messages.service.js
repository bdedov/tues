import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { mapValues, each } from 'lodash-es';
import { HOOK_PATTERN_MESSAGES } from './patterns-message.hook';
import { formatDate } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./patterns-message.hook";
/**
 * A service to translate messages by using regexp patterns.
 */
let PatternMessagesService = class PatternMessagesService {
    constructor(patterns) {
        this.patterns = {};
        this.pipes = {
            absoluteDate: (date) => formatDate(date, 'medium', this.translateService.currentLang),
            translate: (key) => this.translateService.instant(key)
        };
        each(patterns, (pattern) => {
            Object.assign(this.patterns, pattern);
        });
    }
    translate(message) {
        const translation = this.translateWithPatterns(message);
        return (translation !== message) ? translation : '';
    }
    translateWithPatterns(message, patterns = this.patterns) {
        let translatedMessage = message;
        each(patterns, (patternCfg, pattern) => {
            const globalRegExp = new RegExp(pattern, 'g');
            let globalMatch;
            if (!globalRegExp.test(translatedMessage)) {
                return;
            }
            globalRegExp.test(''); // reset the regexp
            globalMatch = globalRegExp.exec(translatedMessage);
            while (globalMatch !== null) {
                const [localMatch] = globalMatch;
                const placeholderValues = mapValues(patternCfg.placeholders, (placeholder) => {
                    const expr = placeholder.capture || placeholder;
                    let replacement = localMatch.replace(new RegExp(pattern, 'g'), expr);
                    if (placeholder.translate) {
                        replacement = this.translateWithPatterns(replacement, placeholder.translate);
                    }
                    return replacement;
                });
                translatedMessage = translatedMessage.replace(localMatch, this.translateWithParams(patternCfg, placeholderValues));
                globalMatch = globalRegExp.exec(translatedMessage);
            }
        });
        return translatedMessage;
    }
    translateWithParams(patternCfg, params = {}) {
        const { defaultLang, currentLang, compiler } = this.translateService;
        const translations = this.translateService.store.translations[currentLang];
        const defaultTranslations = this.translateService.store.translations[defaultLang];
        const originalKey = patternCfg.gettext;
        let originalValue = originalKey;
        if (translations) {
            if (translations[originalKey]) {
                originalValue = translations[originalKey];
            }
            else if (defaultTranslations) {
                if (defaultTranslations[originalKey]) {
                    originalValue = defaultTranslations[originalKey];
                }
            }
        }
        let key = originalKey;
        let value = originalValue;
        const interpolateParams = Object.assign({}, params, { noPatternMessages: true });
        let match;
        const pipeRegex = RegExp('{{\\s*([^\\s]+)\\s*\\|\\s*([^\\s]+)\\s*}}', 'g');
        // tslint:disable-next-line:no-conditional-assignment
        while ((match = pipeRegex.exec(originalKey)) !== null) {
            const [placeholder, paramName, pipeName] = match;
            if (this.pipes[pipeName]) {
                key = key.replace(placeholder, `{{${paramName}}}`);
                value = value.replace(placeholder, `{{${paramName}}}`);
                interpolateParams[paramName] = this.pipes[pipeName](params[paramName]);
            }
        }
        if (translations) {
            translations[key] = compiler.compile(value, currentLang);
        }
        return this.translateService.instant(key, interpolateParams);
    }
};
PatternMessagesService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HOOK_PATTERN_MESSAGES,] }] }
];
PatternMessagesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PatternMessagesService_Factory() { return new PatternMessagesService(i0.ɵɵinject(i1.HOOK_PATTERN_MESSAGES)); }, token: PatternMessagesService, providedIn: "root" });
PatternMessagesService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(0, Inject(HOOK_PATTERN_MESSAGES))
], PatternMessagesService);
export { PatternMessagesService };
//# sourceMappingURL=data:application/json;base64,