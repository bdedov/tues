import * as tslib_1 from "tslib";
import { DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent } from '@ngx-translate/core';
import { AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnDestroy } from '@angular/core';
import { isEqual } from 'lodash-es';
/**
 * This is temporary fallback directive that is used to handle HTML blocks translation on maintenance versions
 * in version 10.9.4 and later, this is replaced by default translate directive.
 */
let ForceHtmlTranslateDirective = class ForceHtmlTranslateDirective {
    constructor(translateService, element, _ref) {
        this.translateService = translateService;
        this.element = element;
        this._ref = _ref;
        /**
         * Used to trigger events when html is replaced by directive.
         */
        this.htmlUpdateEvent = new EventEmitter();
        // subscribe to onTranslationChange event, in case the translations of the current lang change
        if (!this.onTranslationChangeSub) {
            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {
                if (event.lang === this.translateService.currentLang) {
                    this.checkNodes();
                }
            });
        }
        // subscribe to onLangChange event, in case the language changes
        if (!this.onLangChangeSub) {
            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {
                this.checkNodes();
            });
        }
        // subscribe to onDefaultLangChange event, in case the default language changes
        if (!this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {
                this.checkNodes();
            });
        }
    }
    set translateParams(params) {
        if (!isEqual(this.currentParams, params)) {
            this.currentParams = params;
            this.checkNodes();
        }
    }
    ngAfterViewChecked() {
        this.checkNodes();
    }
    checkNodes() {
        if (this.isLookupKeyMissing()) {
            this.element.nativeElement.lookupKey = this.getLookupKey();
        }
        this.translateAndUpdateHtmlContent();
        this.htmlUpdateEvent.emit();
    }
    ngOnDestroy() {
        if (this.onLangChangeSub) {
            this.onLangChangeSub.unsubscribe();
        }
        if (this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub.unsubscribe();
        }
        if (this.onTranslationChangeSub) {
            this.onTranslationChangeSub.unsubscribe();
        }
        this.htmlUpdateEvent.complete();
    }
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    getLookupKey() {
        return this.element.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    }
    isLookupKeyMissing() {
        return !this.element.nativeElement.lookupKey;
    }
    lookupKeyExist() {
        return this.element.nativeElement.lookupKey;
    }
    translateAndUpdateHtmlContent() {
        if (this.lookupKeyExist()) {
            this.element.nativeElement.innerHTML = this.translateService.instant(this.element.nativeElement.lookupKey, this.currentParams || {});
        }
    }
};
ForceHtmlTranslateDirective.ctorParameters = () => [
    { type: TranslateService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input()
], ForceHtmlTranslateDirective.prototype, "translateParams", null);
ForceHtmlTranslateDirective = tslib_1.__decorate([
    Directive({
        selector: '[forceHtmlTranslate]'
    })
], ForceHtmlTranslateDirective);
export { ForceHtmlTranslateDirective };
//# sourceMappingURL=data:application/json;base64,