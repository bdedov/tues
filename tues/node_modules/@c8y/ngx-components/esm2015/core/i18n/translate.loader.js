import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';
import { Inject, Injectable } from '@angular/core';
import { LOCALE_PATH } from './locale.path';
import { LANGUAGES } from './languages';
import { OptionsService } from '../common/options.service';
import { mapKeys } from 'lodash-es';
import { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';
let TranslateCustomLoader = class TranslateCustomLoader {
    constructor(http, optionsService, cachedLocaleDictionaryService, path = null, languages = null) {
        this.http = http;
        this.optionsService = optionsService;
        this.cachedLocaleDictionaryService = cachedLocaleDictionaryService;
        this.path = path;
        this.languages = languages;
    }
    getTranslation(lang) {
        const path = this.path || '';
        let url = `${path}${lang}.json`;
        if (this.languages && this.languages[lang] && this.languages[lang].url) {
            url = this.languages[lang].url;
        }
        return this.http.get(url).pipe(map(d => {
            if (this.optionsService.langsDetails && this.optionsService.langsDetails[lang]) {
                return Object.assign({}, d[lang], this.optionsService.langsDetails[lang]);
            }
            return d[lang];
        }), tap(dictionary => {
            this.cachedLocaleDictionaryService.cachedDictionary[lang] = dictionary;
        }), map(dictionary => this.getDictionaryWithTrimmedKeys(dictionary)), catchError(() => of({})));
    }
    /**
     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
     */
    getDictionaryWithTrimmedKeys(dictionary) {
        return mapKeys(dictionary, (value, key) => trimTranslationKey(key));
    }
};
TranslateCustomLoader.ctorParameters = () => [
    { type: HttpClient },
    { type: OptionsService },
    { type: CachedLocaleDictionaryService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_PATH,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LANGUAGES,] }] }
];
TranslateCustomLoader = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(3, Inject(LOCALE_PATH)),
    tslib_1.__param(4, Inject(LANGUAGES))
], TranslateCustomLoader);
export { TranslateCustomLoader };
export function trimTranslationKey(key) {
    return key.replace(/(\r\n|\n|\r)/gm, '').replace(/\s{2,}/g, ' ').trim();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2kxOG4vdHJhbnNsYXRlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBR25GLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBQ2hDLFlBQ1UsSUFBZ0IsRUFDaEIsY0FBOEIsRUFDOUIsNkJBQTRELEVBQ3ZDLE9BQWUsSUFBSSxFQUNyQixZQUFpQixJQUFJO1FBSnhDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBK0I7UUFDdkMsU0FBSSxHQUFKLElBQUksQ0FBZTtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFZO0lBQy9DLENBQUM7SUFFSixjQUFjLENBQUMsSUFBWTtRQUN6QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUN0RSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7U0FDaEM7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ04sSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDOUUseUJBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFHO2FBQ2xFO1lBQ0QsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLDZCQUE2QixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUN6RSxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLENBQUMsRUFDaEUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUN6QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILDRCQUE0QixDQUFDLFVBQWtCO1FBQzdDLE9BQU8sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUN4QyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FDeEIsQ0FBQztJQUNKLENBQUM7Q0FFRixDQUFBOztZQXZDaUIsVUFBVTtZQUNBLGNBQWM7WUFDQyw2QkFBNkI7eUNBQ25FLE1BQU0sU0FBQyxXQUFXOzRDQUNsQixNQUFNLFNBQUMsU0FBUzs7QUFOUixxQkFBcUI7SUFEakMsVUFBVSxFQUFFO0lBTVIsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ25CLG1CQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtHQU5ULHFCQUFxQixDQXlDakM7U0F6Q1kscUJBQXFCO0FBMkNsQyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBRztJQUNwQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMT0NBTEVfUEFUSCB9IGZyb20gJy4vbG9jYWxlLnBhdGgnO1xuaW1wb3J0IHsgTEFOR1VBR0VTIH0gZnJvbSAnLi9sYW5ndWFnZXMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcEtleXMgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQ2FjaGVkTG9jYWxlRGljdGlvbmFyeVNlcnZpY2UgfSBmcm9tICcuL2NhY2hlZC1sb2NhbGUtZGljdGlvbmFyeS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUN1c3RvbUxvYWRlciBpbXBsZW1lbnRzIFRyYW5zbGF0ZUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIG9wdGlvbnNTZXJ2aWNlOiBPcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIGNhY2hlZExvY2FsZURpY3Rpb25hcnlTZXJ2aWNlOiBDYWNoZWRMb2NhbGVEaWN0aW9uYXJ5U2VydmljZSxcbiAgICBASW5qZWN0KExPQ0FMRV9QQVRIKSBwcml2YXRlIHBhdGg6IHN0cmluZyA9IG51bGwsXG4gICAgQEluamVjdChMQU5HVUFHRVMpIHByaXZhdGUgbGFuZ3VhZ2VzOiBhbnkgPSBudWxsXG4gICkge31cblxuICBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhdGggfHwgJyc7XG4gICAgbGV0IHVybCA9IGAke3BhdGh9JHtsYW5nfS5qc29uYDtcbiAgICBpZiAodGhpcy5sYW5ndWFnZXMgJiYgdGhpcy5sYW5ndWFnZXNbbGFuZ10gJiYgdGhpcy5sYW5ndWFnZXNbbGFuZ10udXJsKSB7XG4gICAgICB1cmwgPSB0aGlzLmxhbmd1YWdlc1tsYW5nXS51cmw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKFxuICAgICAgbWFwKGQgPT4ge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zU2VydmljZS5sYW5nc0RldGFpbHMgJiYgdGhpcy5vcHRpb25zU2VydmljZS5sYW5nc0RldGFpbHNbbGFuZ10pIHtcbiAgICAgICAgICByZXR1cm4geyAuLi5kW2xhbmddLCAuLi50aGlzLm9wdGlvbnNTZXJ2aWNlLmxhbmdzRGV0YWlsc1tsYW5nXSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkW2xhbmddO1xuICAgICAgfSksXG4gICAgICB0YXAoZGljdGlvbmFyeSA9PiB7XG4gICAgICAgIHRoaXMuY2FjaGVkTG9jYWxlRGljdGlvbmFyeVNlcnZpY2UuY2FjaGVkRGljdGlvbmFyeVtsYW5nXSA9IGRpY3Rpb25hcnk7XG4gICAgICB9KSxcbiAgICAgIG1hcChkaWN0aW9uYXJ5ID0+IHRoaXMuZ2V0RGljdGlvbmFyeVdpdGhUcmltbWVkS2V5cyhkaWN0aW9uYXJ5KSksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IG9mKHt9KSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFdlIHdhbnQgdG8gaGF2ZSB0cmFuc2xhdGlvbiBrZXlzIHVuaWZpZWQsIHNvIHRoZXkgZG9uJ3QgY29udGFpbiB1bm5lY2Vzc2FyeSBzcGFjZXMgYW5kIGxpbmUgYnJlYWtzLlxuICAgKiBUaGlzIHdheSB3ZSBjYW4gZHluYW1pY2FsbHkgYnVpbGQga2V5cyBmcm9tIEhUTUwsIGFuZCBtYXRjaCB0aGVtIHRvIGV4dHJhY3RlZCBzdHJpbmcsIHRoYXQgbWlnaHQgYmUgSFRNTCBhcyB3ZWxsLlxuICAgKi9cbiAgZ2V0RGljdGlvbmFyeVdpdGhUcmltbWVkS2V5cyhkaWN0aW9uYXJ5OiBvYmplY3QpIHtcbiAgICByZXR1cm4gbWFwS2V5cyhkaWN0aW9uYXJ5LCAodmFsdWUsIGtleSkgPT5cbiAgICAgIHRyaW1UcmFuc2xhdGlvbktleShrZXkpXG4gICAgKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmltVHJhbnNsYXRpb25LZXkoa2V5KSB7XG4gIHJldHVybiBrZXkucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSwgJycpLnJlcGxhY2UoL1xcc3syLH0vZywgJyAnKS50cmltKCk7XG59XG4iXX0=