import { combineLatest, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { gettext } from '../../i18n';
export class TranslateExtension {
    constructor(translate, parser) {
        this.translate = translate;
        this.parser = parser;
    }
    prePopulate(field) {
        const to = field.templateOptions || {};
        if (!to.label || to._translated) {
            return;
        }
        to._translated = true;
        field.expressionProperties = Object.assign({}, (field.expressionProperties || {}), { 'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label, 'templateOptions.description': to.description
                ? this.translate.stream(to.description)
                : to.description, 'templateOptions.placeholder': to.placeholder
                ? combineLatest([
                    this.translate.stream(to.placeholder),
                    this.translate.stream(gettext('e.g. {{ example }}'))
                ]).pipe(map(([placeholder, expression]) => this.parser.interpolate(expression, { example: placeholder })))
                : to.placeholder, 'templateOptions.options': (isObservable(to.options) ? to.options : of(to.options)).pipe(map((options) => (options || []).map(option => (Object.assign({}, option, { label: this.translate.instant(option.label) }))))) });
    }
}
export function registerTranslateExtension(translate, parser) {
    return {
        extensions: [
            {
                name: 'translate',
                extension: new TranslateExtension(translate, parser)
            }
        ]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2R5bmFtaWMtZm9ybXMvaTE4bi90cmFuc2xhdGUuZXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQW9CLFNBQTJCLEVBQVUsTUFBdUI7UUFBNUQsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFpQjtJQUFHLENBQUM7SUFDcEYsV0FBVyxDQUFDLEtBQXdCO1FBQ2xDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsT0FBTztTQUNSO1FBRUQsRUFBRSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdEIsS0FBSyxDQUFDLG9CQUFvQixxQkFDckIsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDLElBQ3JDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFDOUUsNkJBQTZCLEVBQUUsRUFBRSxDQUFDLFdBQVc7Z0JBQzNDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO2dCQUN2QyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFDbEIsNkJBQTZCLEVBQUUsRUFBRSxDQUFDLFdBQVc7Z0JBQzNDLENBQUMsQ0FBQyxhQUFhLENBQUM7b0JBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztvQkFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7aUJBQ3JELENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQ2xHO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUNsQix5QkFBeUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RGLEdBQUcsQ0FBQyxDQUFDLE9BQWlDLEVBQUUsRUFBRSxDQUN4QyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxtQkFDekIsTUFBTSxJQUNULEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQzNDLENBQUMsQ0FDSixDQUNGLEdBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxTQUEyQixFQUFFLE1BQXVCO0lBQzdGLE9BQU87UUFDTCxVQUFVLEVBQUU7WUFDVjtnQkFDRSxJQUFJLEVBQUUsV0FBVztnQkFDakIsU0FBUyxFQUFFLElBQUksa0JBQWtCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQzthQUNyRDtTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlUGFyc2VyLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBpc09ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vLi4vaTE4bic7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVFeHRlbnNpb24ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSwgcHJpdmF0ZSBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlcikge31cbiAgcHJlUG9wdWxhdGUoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgY29uc3QgdG8gPSBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307XG4gICAgaWYgKCF0by5sYWJlbCB8fCB0by5fdHJhbnNsYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvLl90cmFuc2xhdGVkID0gdHJ1ZTtcbiAgICBmaWVsZC5leHByZXNzaW9uUHJvcGVydGllcyA9IHtcbiAgICAgIC4uLihmaWVsZC5leHByZXNzaW9uUHJvcGVydGllcyB8fCB7fSksXG4gICAgICAndGVtcGxhdGVPcHRpb25zLmxhYmVsJzogdG8ubGFiZWwgPyB0aGlzLnRyYW5zbGF0ZS5zdHJlYW0odG8ubGFiZWwpIDogdG8ubGFiZWwsXG4gICAgICAndGVtcGxhdGVPcHRpb25zLmRlc2NyaXB0aW9uJzogdG8uZGVzY3JpcHRpb25cbiAgICAgICAgPyB0aGlzLnRyYW5zbGF0ZS5zdHJlYW0odG8uZGVzY3JpcHRpb24pXG4gICAgICAgIDogdG8uZGVzY3JpcHRpb24sXG4gICAgICAndGVtcGxhdGVPcHRpb25zLnBsYWNlaG9sZGVyJzogdG8ucGxhY2Vob2xkZXJcbiAgICAgICAgPyBjb21iaW5lTGF0ZXN0KFtcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlLnN0cmVhbSh0by5wbGFjZWhvbGRlciksXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZS5zdHJlYW0oZ2V0dGV4dCgnZS5nLiB7eyBleGFtcGxlIH19JykpXG4gICAgICAgICAgXSkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW3BsYWNlaG9sZGVyLCBleHByZXNzaW9uXSkgPT4gdGhpcy5wYXJzZXIuaW50ZXJwb2xhdGUoZXhwcmVzc2lvbiwgeyBleGFtcGxlOiBwbGFjZWhvbGRlciB9KSlcbiAgICAgICAgICApXG4gICAgICAgIDogdG8ucGxhY2Vob2xkZXIsXG4gICAgICAndGVtcGxhdGVPcHRpb25zLm9wdGlvbnMnOiAoaXNPYnNlcnZhYmxlKHRvLm9wdGlvbnMpID8gdG8ub3B0aW9ucyA6IG9mKHRvLm9wdGlvbnMpKS5waXBlKFxuICAgICAgICBtYXAoKG9wdGlvbnM6IEFycmF5PHsgbGFiZWw6IHN0cmluZyB9PikgPT5cbiAgICAgICAgICAob3B0aW9ucyB8fCBbXSkubWFwKG9wdGlvbiA9PiAoe1xuICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgbGFiZWw6IHRoaXMudHJhbnNsYXRlLmluc3RhbnQob3B0aW9uLmxhYmVsKVxuICAgICAgICAgIH0pKVxuICAgICAgICApXG4gICAgICApXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2xhdGVFeHRlbnNpb24odHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlcikge1xuICByZXR1cm4ge1xuICAgIGV4dGVuc2lvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3RyYW5zbGF0ZScsXG4gICAgICAgIGV4dGVuc2lvbjogbmV3IFRyYW5zbGF0ZUV4dGVuc2lvbih0cmFuc2xhdGUsIHBhcnNlcilcbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG4iXX0=