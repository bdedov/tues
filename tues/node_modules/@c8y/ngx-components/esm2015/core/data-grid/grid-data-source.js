import { chunk, flow, get, isNil, mapValues, omitBy, orderBy, pick } from 'lodash-es';
import { BehaviorSubject, defer, from, isObservable, of, Subject } from 'rxjs';
import { catchError, finalize, map, switchMap, tap } from 'rxjs/operators';
export class GridDataSource {
    constructor() {
        this.loadingSubject = new BehaviorSubject(false);
        this.dataSourceSubject = new BehaviorSubject([]);
        this.dataStatsSubject = new BehaviorSubject({
            size: 0,
            filteredSize: 0,
            currentPage: 0,
            currentPageSize: 0,
            firstPageSize: 0
        });
        this.dataSelectionSubject = new BehaviorSubject({
            filteredDataIds: []
        });
        this.resultListSubject = new Subject();
        this.loading$ = this.loadingSubject.asObservable();
        this.data$ = this.dataSourceSubject.asObservable();
        this.stats$ = this.dataStatsSubject.asObservable();
        this.selection$ = this.dataSelectionSubject.asObservable();
        this.resultList$ = this.resultListSubject.asObservable();
    }
    connect(collectionViewer) {
        return this.data$;
    }
    disconnect(collectionViewer) {
        this.loadingSubject.complete();
        this.dataSourceSubject.complete();
        this.dataStatsSubject.complete();
        this.dataSelectionSubject.complete();
    }
    loadData({ rows, columns, pagination, searchText, serverSideDataCallback, selectable, selectionPrimaryKey, infiniteScroll, reload = false }) {
        const clientSideData$ = this.toObservable(rows).pipe(map(initialData => {
            let filteredSize = 0;
            let filteredDataIds = [];
            const transformedData = flow(data => this.doClientSideSearch({ data, columns, searchText }), data => this.doClientSideFiltering({ data, columns }), data => this.doClientSideSorting({ data, columns }), data => {
                filteredSize = data.length;
                filteredDataIds = selectable
                    ? data.map(item => item[selectionPrimaryKey])
                    : filteredDataIds;
                return data;
            }, data => this.doClientSidePagination({ data, pagination }))(initialData);
            this.dataStatsSubject.next({
                size: initialData.length,
                filteredSize,
                currentPage: pagination.currentPage,
                currentPageSize: transformedData.length,
                firstPageSize: pagination.pageSize
            });
            this.dataSelectionSubject.next({ filteredDataIds });
            return transformedData;
        }));
        const serverSideData$ = defer(() => this.toObservable(serverSideDataCallback({
            columns,
            searchText,
            pagination,
            selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
        }))).pipe(map((result) => {
            const { data, paging, size, filteredSize, filteredDataIds } = result;
            this.dataStatsSubject.next({
                size,
                filteredSize,
                currentPage: paging.currentPage,
                currentPageSize: data.length,
                nextPage: paging.nextPage,
                firstPageSize: paging.pageSize
            });
            this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
            this.resultListSubject.next(result);
            return data;
        }));
        const data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
        of([])
            .pipe(tap(() => this.loadingSubject.next(true)), switchMap(() => data$), catchError(err => {
            this.dataStatsSubject.next({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            this.dataSelectionSubject.next({ filteredDataIds: [] });
            return of([]);
        }), finalize(() => this.loadingSubject.next(false)))
            .subscribe(result => {
            const data = infiniteScroll && !reload ? [...this.dataSourceSubject.value, ...result] : result;
            this.dataSourceSubject.next(data);
        });
    }
    resolveValue(x, path) {
        return get(x, path);
    }
    resolveFunction(x) {
        return typeof x === 'function' ? x() : x;
    }
    normalizeNil(x) {
        return isNil(x) ? '' : x;
    }
    doClientSideFiltering({ data, columns }) {
        return columns.reduce((result, column) => {
            const { filterPredicate } = column;
            if (typeof filterPredicate === 'string') {
                return this.doClientSideSearch({
                    data: result,
                    columns: [column],
                    searchText: filterPredicate
                });
            }
            if (typeof filterPredicate === 'function') {
                return result.filter(item => filterPredicate(item, column.path));
            }
            return result;
        }, data);
    }
    doClientSideSearch({ data, columns, searchText }) {
        const propPaths = columns.map(({ path }) => path).filter(column => !isNil(column));
        const regexSearch = this.createRegexSearch(searchText);
        return data.filter(item => {
            const itemWithResolvedValues = flow(x => pick(x, propPaths), x => mapValues(x, this.resolveFunction), x => omitBy(x, isNil))(item);
            const cellValues = Object.values(itemWithResolvedValues);
            return cellValues.some(cellValue => regexSearch.test(cellValue.toString()));
        });
    }
    doClientSideSorting({ data, columns }) {
        const actives = columns.filter(({ sortOrder }) => !!sortOrder);
        const sortingState = {
            paths: actives.map(({ path }) => path),
            orders: actives.map(({ sortOrder }) => sortOrder)
        };
        return orderBy(data, sortingState.paths, sortingState.orders);
    }
    doClientSidePagination({ data, pagination }) {
        return pagination
            ? get(chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
            : data;
    }
    createRegexSearch(filterValue) {
        return RegExp(escapeRegExpPattern(filterValue), 'i');
    }
    toObservable(x) {
        return isObservable(x) ? x : x instanceof Promise ? from(x) : of(x);
    }
}
/**
 *
 * @param string pattern Regex pattern.
 * @return string The escaped regex.
 * @see https://stackoverflow.com/a/3561711/2013891
 */
function escapeRegExpPattern(pattern = '') {
    return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
//# sourceMappingURL=data:application/json;base64,