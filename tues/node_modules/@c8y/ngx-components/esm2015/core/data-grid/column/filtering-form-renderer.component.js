import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, Injector, Input, OnChanges, TemplateRef, Type } from '@angular/core';
import { FilteringFormRendererContext } from './filtering-form-renderer';
let FilteringFormRendererComponent = class FilteringFormRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.defaultRendererFilterText = '';
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        const { renderer, context } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
        const { filterPredicate } = context.property;
        if (typeof filterPredicate === 'string') {
            this.defaultRendererFilterText = filterPredicate;
        }
    }
};
FilteringFormRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('spec')
], FilteringFormRendererComponent.prototype, "_spec", null);
FilteringFormRendererComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-filtering-form-renderer',
        template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group\">\n    <label translate>Filter text</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    />\n  </div>\n  <div class=\"flex-row\">\n    <button\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n      translate\n    >\n      Reset\n    </button>\n    <button\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n      translate\n    >\n      Apply\n    </button>\n  </div>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], FilteringFormRendererComponent);
export { FilteringFormRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZGF0YS1ncmlkL2NvbHVtbi9maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxPQUFPLEVBQ1AsUUFBUSxFQUNSLEtBQUssRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksRUFDTCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsNEJBQTRCLEVBQTZCLE1BQU0sMkJBQTJCLENBQUM7QUFPcEcsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFXekMsWUFBb0IsUUFBa0IsRUFBVSxFQUFxQjtRQUFqRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFGckUsOEJBQXlCLEdBQUcsRUFBRSxDQUFDO0lBRXlDLENBQUM7SUFSekUsSUFBSSxLQUFLLENBQUMsSUFBK0I7UUFDdkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQVFELFdBQVc7UUFDVCxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFeEMsSUFBSSxRQUFRLFlBQVksV0FBVyxFQUFFO1lBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDO1NBQ2hDO2FBQU0sSUFBSSxRQUFRLFlBQVksSUFBSSxFQUFFO1lBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1lBRWhDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUN0QyxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDbkYsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDN0MsSUFBSSxPQUFPLGVBQWUsS0FBSyxRQUFRLEVBQUU7WUFDdkMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLGVBQWUsQ0FBQztTQUNsRDtJQUNILENBQUM7Q0FDRixDQUFBOztZQXJCK0IsUUFBUTtZQUFjLGlCQUFpQjs7QUFSckU7SUFEQyxLQUFLLENBQUMsTUFBTSxDQUFDOzJEQUdiO0FBTFUsOEJBQThCO0lBTDFDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMscXhDQUF1RDtRQUN2RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csOEJBQThCLENBZ0MxQztTQWhDWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRG9DaGVjayxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmltcG9ydCB7IEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHQsIEZpbHRlcmluZ0Zvcm1SZW5kZXJlclNwZWMgfSBmcm9tICcuL2ZpbHRlcmluZy1mb3JtLXJlbmRlcmVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWZpbHRlcmluZy1mb3JtLXJlbmRlcmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgc3BlYzogRmlsdGVyaW5nRm9ybVJlbmRlcmVyU3BlYztcbiAgQElucHV0KCdzcGVjJylcbiAgc2V0IF9zcGVjKHNwZWM6IEZpbHRlcmluZ0Zvcm1SZW5kZXJlclNwZWMpIHtcbiAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICB9XG5cbiAgcmVuZGVyZXJUeXBlOiAnVEVNUExBVEUnIHwgJ0NPTVBPTkVOVCc7XG4gIHJlbmRlcmVySW5qZWN0b3I6IEluamVjdG9yO1xuICBkZWZhdWx0UmVuZGVyZXJGaWx0ZXJUZXh0ID0gJyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGNvbnN0IHsgcmVuZGVyZXIsIGNvbnRleHQgfSA9IHRoaXMuc3BlYztcblxuICAgIGlmIChyZW5kZXJlciBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdURU1QTEFURSc7XG4gICAgfSBlbHNlIGlmIChyZW5kZXJlciBpbnN0YW5jZW9mIFR5cGUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ0NPTVBPTkVOVCc7XG5cbiAgICAgIHRoaXMucmVuZGVyZXJJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7XG4gICAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCwgdXNlVmFsdWU6IHRoaXMuc3BlYy5jb250ZXh0IH1dLFxuICAgICAgICBwYXJlbnQ6IHRoaXMuaW5qZWN0b3JcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZmlsdGVyUHJlZGljYXRlIH0gPSBjb250ZXh0LnByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZmlsdGVyUHJlZGljYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5kZWZhdWx0UmVuZGVyZXJGaWx0ZXJUZXh0ID0gZmlsdGVyUHJlZGljYXRlO1xuICAgIH1cbiAgfVxufVxuIl19