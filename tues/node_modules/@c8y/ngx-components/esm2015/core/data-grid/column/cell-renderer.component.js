import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, Injector, Input, OnChanges, TemplateRef, Type } from '@angular/core';
import { CellRendererContext } from './cell-renderer';
let CellRendererComponent = class CellRendererComponent {
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
    }
    set _spec(spec) {
        this.spec = spec;
    }
    ngOnChanges() {
        if (!this.prevSpec) {
            this.prevSpec = this.spec;
        }
        const { renderer } = this.spec;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
    }
    ngDoCheck() {
        if (!this.spec.context.value === this.prevSpec.context.value) {
            this.prevSpec = this.spec;
            this.cd.markForCheck();
        }
    }
};
CellRendererComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('spec')
], CellRendererComponent.prototype, "_spec", null);
CellRendererComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-cell-renderer',
        template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  {{ spec.context.value }}\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], CellRendererComponent);
export { CellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kYXRhLWdyaWQvY29sdW1uL2NlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsT0FBTyxFQUNQLFFBQVEsRUFDUixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxJQUFJLEVBQ0wsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBT3hFLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBV2hDLFlBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQUcsQ0FBQztJQVJ6RSxJQUFJLEtBQUssQ0FBQyxJQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBUUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMzQjtRQUVELE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRS9CLElBQUksUUFBUSxZQUFZLFdBQVcsRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztTQUNoQzthQUFNLElBQUksUUFBUSxZQUFZLElBQUksRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztZQUVoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTthQUN0QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUEzQitCLFFBQVE7WUFBYyxpQkFBaUI7O0FBUnJFO0lBREMsS0FBSyxDQUFDLE1BQU0sQ0FBQztrREFHYjtBQUxVLHFCQUFxQjtJQUxqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLGtoQkFBNkM7UUFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLHFCQUFxQixDQXNDakM7U0F0Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIERvQ2hlY2ssXG4gIEluamVjdG9yLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2VsbFJlbmRlcmVyQ29udGV4dCwgQ2VsbFJlbmRlcmVyU3BlYyB9IGZyb20gJy4vY2VsbC1yZW5kZXJlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1jZWxsLXJlbmRlcmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBDZWxsUmVuZGVyZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIERvQ2hlY2sge1xuICBzcGVjOiBDZWxsUmVuZGVyZXJTcGVjO1xuICBASW5wdXQoJ3NwZWMnKVxuICBzZXQgX3NwZWMoc3BlYzogQ2VsbFJlbmRlcmVyU3BlYykge1xuICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gIH1cbiAgcHJldlNwZWM6IENlbGxSZW5kZXJlclNwZWM7XG5cbiAgcmVuZGVyZXJUeXBlOiAnVEVNUExBVEUnIHwgJ0NPTVBPTkVOVCc7XG4gIHJlbmRlcmVySW5qZWN0b3I6IEluamVjdG9yO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICBpZiAoIXRoaXMucHJldlNwZWMpIHtcbiAgICAgIHRoaXMucHJldlNwZWMgPSB0aGlzLnNwZWM7XG4gICAgfVxuXG4gICAgY29uc3QgeyByZW5kZXJlciB9ID0gdGhpcy5zcGVjO1xuXG4gICAgaWYgKHJlbmRlcmVyIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ1RFTVBMQVRFJztcbiAgICB9IGVsc2UgaWYgKHJlbmRlcmVyIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnQ09NUE9ORU5UJztcblxuICAgICAgdGhpcy5yZW5kZXJlckluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHtcbiAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBDZWxsUmVuZGVyZXJDb250ZXh0LCB1c2VWYWx1ZTogdGhpcy5zcGVjLmNvbnRleHQgfV0sXG4gICAgICAgIHBhcmVudDogdGhpcy5pbmplY3RvclxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIGlmICghdGhpcy5zcGVjLmNvbnRleHQudmFsdWUgPT09IHRoaXMucHJldlNwZWMuY29udGV4dC52YWx1ZSkge1xuICAgICAgdGhpcy5wcmV2U3BlYyA9IHRoaXMuc3BlYztcbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG59XG4iXX0=