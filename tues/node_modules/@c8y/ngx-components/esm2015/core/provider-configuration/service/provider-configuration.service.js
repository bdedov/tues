var ProviderConfigurationService_1;
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FetchClient, IIdentified, IResult, Service } from '@c8y/client';
import { get } from 'lodash-es';
let ProviderConfigurationService = ProviderConfigurationService_1 = class ProviderConfigurationService extends Service {
    constructor(client, activatedRoute) {
        super(client);
        this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
        this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
    }
    detail() {
        const _super = Object.create(null, {
            detail: { get: () => super.detail }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.detail.call(this, ProviderConfigurationService_1.NO_DETAIL_ID);
        });
    }
    update(entity) {
        const _super = Object.create(null, {
            update: { get: () => super.update }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.update.call(this, entity);
        });
    }
    delete() {
        const _super = Object.create(null, {
            delete: { get: () => super.delete }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.delete.call(this, ProviderConfigurationService_1.NO_DETAIL_ID);
        });
    }
    /** There is a single provider configuration per tenant and detail URL is not needed */
    getDetailUrl(_) {
        return this.listUrl;
    }
};
ProviderConfigurationService.NO_DETAIL_ID = null;
ProviderConfigurationService.ctorParameters = () => [
    { type: FetchClient },
    { type: ActivatedRoute }
];
ProviderConfigurationService = ProviderConfigurationService_1 = tslib_1.__decorate([
    Injectable()
], ProviderConfigurationService);
export { ProviderConfigurationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvcHJvdmlkZXItY29uZmlndXJhdGlvbi9zZXJ2aWNlL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUloQyxJQUFhLDRCQUE0QixvQ0FBekMsTUFBYSw0QkFBNkIsU0FBUSxPQUEyQjtJQU0zRSxZQUFZLE1BQW1CLEVBQUUsY0FBOEI7UUFDN0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLHNEQUFzRCxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLHNEQUFzRCxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVLLE1BQU07Ozs7O1lBQ1YsT0FBTyxPQUFNLE1BQU0sWUFBQyw4QkFBNEIsQ0FBQyxZQUFZLEVBQUU7UUFDakUsQ0FBQztLQUFBO0lBRUssTUFBTSxDQUFDLE1BQW1DOzs7OztZQUM5QyxPQUFPLE9BQU0sTUFBTSxZQUFDLE1BQU0sRUFBRTtRQUM5QixDQUFDO0tBQUE7SUFFSyxNQUFNOzs7OztZQUNWLE9BQU8sT0FBTSxNQUFNLFlBQUMsOEJBQTRCLENBQUMsWUFBWSxFQUFFO1FBQ2pFLENBQUM7S0FBQTtJQUVELHVGQUF1RjtJQUM3RSxZQUFZLENBQUMsQ0FBZ0M7UUFDckQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FDRixDQUFBO0FBM0J5Qix5Q0FBWSxHQUFXLElBQUksQ0FBQzs7WUFLaEMsV0FBVztZQUFrQixjQUFjOztBQU5wRCw0QkFBNEI7SUFEeEMsVUFBVSxFQUFFO0dBQ0EsNEJBQTRCLENBNEJ4QztTQTVCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGZXRjaENsaWVudCwgSUlkZW50aWZpZWQsIElSZXN1bHQsIFNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUHJvdmlkZXJQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vbW9kZWwvcHJvdmlkZXItcHJvcGVydGllcy5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlIGV4dGVuZHMgU2VydmljZTxQcm92aWRlclByb3BlcnRpZXM+IHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTk9fREVUQUlMX0lEOiBzdHJpbmcgPSBudWxsO1xuXG4gIHByb3RlY3RlZCBiYXNlVXJsOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBsaXN0VXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBGZXRjaENsaWVudCwgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgc3VwZXIoY2xpZW50KTtcbiAgICB0aGlzLmJhc2VVcmwgPSBnZXQoYWN0aXZhdGVkUm91dGUsICdzbmFwc2hvdC5kYXRhLmVuZHBvaW50LmNvbmZpZ3VyYXRpb25FbmRwb2ludC5iYXNlVXJsJyk7XG4gICAgdGhpcy5saXN0VXJsID0gZ2V0KGFjdGl2YXRlZFJvdXRlLCAnc25hcHNob3QuZGF0YS5lbmRwb2ludC5jb25maWd1cmF0aW9uRW5kcG9pbnQubGlzdFVybCcpO1xuICB9XG5cbiAgYXN5bmMgZGV0YWlsKCk6IFByb21pc2U8SVJlc3VsdDxQcm92aWRlclByb3BlcnRpZXM+PiB7XG4gICAgcmV0dXJuIHN1cGVyLmRldGFpbChQcm92aWRlckNvbmZpZ3VyYXRpb25TZXJ2aWNlLk5PX0RFVEFJTF9JRCk7XG4gIH1cblxuICBhc3luYyB1cGRhdGUoZW50aXR5OiBQYXJ0aWFsPFByb3ZpZGVyUHJvcGVydGllcz4pOiBQcm9taXNlPElSZXN1bHQ8UHJvdmlkZXJQcm9wZXJ0aWVzPj4ge1xuICAgIHJldHVybiBzdXBlci51cGRhdGUoZW50aXR5KTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZSgpOiBQcm9taXNlPElSZXN1bHQ8bnVsbD4+IHtcbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKFByb3ZpZGVyQ29uZmlndXJhdGlvblNlcnZpY2UuTk9fREVUQUlMX0lEKTtcbiAgfVxuXG4gIC8qKiBUaGVyZSBpcyBhIHNpbmdsZSBwcm92aWRlciBjb25maWd1cmF0aW9uIHBlciB0ZW5hbnQgYW5kIGRldGFpbCBVUkwgaXMgbm90IG5lZWRlZCAqL1xuICBwcm90ZWN0ZWQgZ2V0RGV0YWlsVXJsKF86IHN0cmluZyB8IG51bWJlciB8IElJZGVudGlmaWVkKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5saXN0VXJsO1xuICB9XG59XG4iXX0=