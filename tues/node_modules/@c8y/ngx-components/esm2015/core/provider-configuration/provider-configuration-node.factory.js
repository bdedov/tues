import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { forkJoin, from, isObservable, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { NavigatorNode } from '../navigator';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
let ProviderConfigurationNodeFactory = class ProviderConfigurationNodeFactory {
    constructor(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            const canActivate = this.config
                .map(c => c.navigation.canActivate && c.navigation.canActivate.length
                ? c.navigation.canActivate.map(ca => this.injector.get(ca))
                : undefined)
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map((canActivateResult) => this.config
                .map((c, index) => canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined)
                .filter(el => !!el)), tap(nodes => (this.nodes = nodes)));
        }
        return this.nodes;
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(this.wrapIntoObservable.bind(this));
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
    }
    wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    }
};
ProviderConfigurationNodeFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Injector }
];
ProviderConfigurationNodeFactory = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Optional()),
    tslib_1.__param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
], ProviderConfigurationNodeFactory);
export { ProviderConfigurationNodeFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tbm9kZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0sY0FBYyxDQUFDO0FBRW5FLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRzdFLElBQWEsZ0NBQWdDLEdBQTdDLE1BQWEsZ0NBQWdDO0lBSTNDLFlBR0UsTUFBaUMsRUFDekIsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsR0FBRztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdkMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixNQUFNLFdBQVcsR0FBK0IsSUFBSSxDQUFDLE1BQU07aUJBQ3hELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNQLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQ3pELENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDM0QsQ0FBQyxDQUFDLFNBQVMsQ0FDZDtpQkFDQSxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRXpDLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDL0IsR0FBRyxDQUFDLENBQUMsaUJBQTRCLEVBQUUsRUFBRSxDQUNuQyxJQUFJLENBQUMsTUFBTTtpQkFDUixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FDaEIsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUN2RTtpQkFDQSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3RCLEVBQ0QsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQ25DLENBQUM7U0FDSDtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsRUFBaUI7UUFDeEMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDckIsTUFBTSxpQkFBaUIsR0FBK0IsRUFBRTtpQkFDckQsR0FBRyxDQUFDLENBQUMsV0FBd0IsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7aUJBQ2hGLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFM0MsT0FBTyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ3JDLEdBQUcsQ0FBQyxDQUFDLFFBQW1CLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FDMUUsQ0FBQztTQUNIO1FBQ0QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVPLFNBQVMsQ0FBVSxHQUFRO1FBQ2pDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0lBQ2pELENBQUM7SUFFTyxrQkFBa0IsQ0FBSSxLQUFxQztRQUNqRSxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUE7O3dDQWpFSSxRQUFRLFlBQ1IsTUFBTSxTQUFDLDRCQUE0QjtZQUVsQixRQUFROztBQVJqQixnQ0FBZ0M7SUFENUMsVUFBVSxFQUFFO0lBTVIsbUJBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixtQkFBQSxNQUFNLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtHQU41QixnQ0FBZ0MsQ0FzRTVDO1NBdEVZLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGZvcmtKb2luLCBmcm9tLCBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvck5vZGVGYWN0b3J5IH0gZnJvbSAnLi4vbmF2aWdhdG9yJztcbmltcG9ydCB7IER5bmFtaWNQcm92aWRlckNvbmZpZyB9IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRyB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5IGltcGxlbWVudHMgTmF2aWdhdG9yTm9kZUZhY3Rvcnkge1xuICBwcml2YXRlIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW107XG4gIHByaXZhdGUgbm9kZXM6IE5hdmlnYXRvck5vZGVbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRylcbiAgICBjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdW10sXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSBmbGF0dGVuKGNvbmZpZyk7XG4gIH1cblxuICBnZXQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZyB8fCAhdGhpcy5jb25maWcubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB7XG4gICAgICBjb25zdCBjYW5BY3RpdmF0ZTogQXJyYXk8T2JzZXJ2YWJsZTxib29sZWFuPj4gPSB0aGlzLmNvbmZpZ1xuICAgICAgICAubWFwKGMgPT5cbiAgICAgICAgICBjLm5hdmlnYXRpb24uY2FuQWN0aXZhdGUgJiYgYy5uYXZpZ2F0aW9uLmNhbkFjdGl2YXRlLmxlbmd0aFxuICAgICAgICAgICAgPyBjLm5hdmlnYXRpb24uY2FuQWN0aXZhdGUubWFwKGNhID0+IHRoaXMuaW5qZWN0b3IuZ2V0KGNhKSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgIClcbiAgICAgICAgLm1hcCh0aGlzLmNoZWNrQ2FuQWN0aXZhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAgIHJldHVybiBmb3JrSm9pbihjYW5BY3RpdmF0ZSkucGlwZShcbiAgICAgICAgbWFwKChjYW5BY3RpdmF0ZVJlc3VsdDogYm9vbGVhbltdKSA9PlxuICAgICAgICAgIHRoaXMuY29uZmlnXG4gICAgICAgICAgICAubWFwKChjLCBpbmRleCkgPT5cbiAgICAgICAgICAgICAgY2FuQWN0aXZhdGVSZXN1bHRbaW5kZXhdID8gbmV3IE5hdmlnYXRvck5vZGUoYy5uYXZpZ2F0aW9uKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmZpbHRlcihlbCA9PiAhIWVsKVxuICAgICAgICApLFxuICAgICAgICB0YXAobm9kZXMgPT4gKHRoaXMubm9kZXMgPSBub2RlcykpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0NhbkFjdGl2YXRlKGNhOiBDYW5BY3RpdmF0ZVtdKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgaWYgKCEhY2EgJiYgY2EubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjYW5BY3RpdmF0ZVJlc3VsdDogQXJyYXk8T2JzZXJ2YWJsZTxib29sZWFuPj4gPSBjYVxuICAgICAgICAubWFwKChjYW5BY3RpdmF0ZTogQ2FuQWN0aXZhdGUpID0+IGNhbkFjdGl2YXRlLmNhbkFjdGl2YXRlKHVuZGVmaW5lZCwgdW5kZWZpbmVkKSlcbiAgICAgICAgLm1hcCh0aGlzLndyYXBJbnRvT2JzZXJ2YWJsZS5iaW5kKHRoaXMpKTtcblxuICAgICAgcmV0dXJuIGZvcmtKb2luKGNhbkFjdGl2YXRlUmVzdWx0KS5waXBlKFxuICAgICAgICBtYXAoKGNhUmVzdWx0OiBib29sZWFuW10pID0+IGNhUmVzdWx0LnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgJiYgY3VycikpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIGlzUHJvbWlzZTxUID0gYW55PihvYmo6IGFueSk6IG9iaiBpcyBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgcHJpdmF0ZSB3cmFwSW50b09ic2VydmFibGU8VD4odmFsdWU6IFQgfCBQcm9taXNlPFQ+IHwgT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8VD4ge1xuICAgIGlmIChpc09ic2VydmFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQcm9taXNlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBvZih2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==