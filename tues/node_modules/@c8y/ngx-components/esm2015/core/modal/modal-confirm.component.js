import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Status, statusIcons, statusAlert } from '../common/status.model';
let ConfirmModalComponent = class ConfirmModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.status = Status.INFO;
        this._labels = {
            ok: 'OK',
            cancel: 'Cancel'
        };
        this.result = new Promise((resolve, reject) => {
            this.dismiss = () => {
                reject();
                this.modal.hide();
            };
            this.close = () => {
                resolve(true);
                this.modal.hide();
            };
        });
    }
    set labels(labels) {
        const { ok = 'OK', cancel = 'Cancel' } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() { return this._labels; }
    get classIcon() {
        return `fa-${statusIcons[this.status]}`;
    }
    get classAlert() {
        return statusAlert[this.status];
    }
    ngOnDestroy() {
        this.dismiss();
    }
};
ConfirmModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "body", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "status", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "labels", null);
ConfirmModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-confirm-modal',
        template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"bottom-m-md\" *ngIf=\"title\">\n    <i class=\"fa fw\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-wrap\" style=\"word-wrap:break-word;\">{{ body | translate }}</p>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button title=\"{{ labels.ok | translate }}\" class=\"btn btn-primary\" (click)=\"close()\">\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
    })
], ConfirmModalComponent);
export { ConfirmModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9tb2RhbC9tb2RhbC1jb25maXJtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBYyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBY3RGLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBd0JoQyxZQUFvQixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBbEI1QixXQUFNLEdBQWUsTUFBTSxDQUFDLElBQUksQ0FBQztRQW1CeEMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLEVBQUUsRUFBRSxJQUFJO1lBQ1IsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7Z0JBQ2xCLE1BQU0sRUFBRSxDQUFDO2dCQUNULElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUU7Z0JBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BCLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQWhDUSxJQUFJLE1BQU0sQ0FBQyxNQUFtQjtRQUNyQyxNQUFNLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxNQUFNLEdBQUcsUUFBUSxFQUFFLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLE1BQU0sS0FBa0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVsRCxJQUFJLFNBQVM7UUFDWCxPQUFPLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQXFCRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFBOztZQXBCNEIsVUFBVTs7QUFwQjVCO0lBQVIsS0FBSyxFQUFFO29EQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7bURBQWM7QUFDYjtJQUFSLEtBQUssRUFBRTtxREFBa0M7QUFDakM7SUFBUixLQUFLLEVBQUU7bURBR1A7QUFWVSxxQkFBcUI7SUFKakMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtRQUM3Qiwwd0JBQTZDO0tBQzlDLENBQUM7R0FDVyxxQkFBcUIsQ0E0Q2pDO1NBNUNZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFJlZiB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgU3RhdHVzVHlwZSwgU3RhdHVzLCBzdGF0dXNJY29ucywgc3RhdHVzQWxlcnQgfSBmcm9tICcuLi9jb21tb24vc3RhdHVzLm1vZGVsJztcbmltcG9ydCB7IE1vZGFsTGFiZWxzIH0gZnJvbSAnLi4vc2VsZWN0LW1vZGFsL3NlbGVjdC1tb2RhbC5tb2RlbCc7XG5cbi8qKlxuICogTGFiZWxzIHRvIGJlIHVzZWQgaW4gdGhlIHNlbGVjdGlvbiBtb2RhbC5cbiAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZ29pbmcgdG8gYmUgcmVtb3ZlZCBhZnRlciAxMDA3LjcuMC4gVXNlIE1vZGFsTGFiZWxzIGluc3RlYWQuXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIElMYWJlbHMgZXh0ZW5kcyBNb2RhbExhYmVscyB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktY29uZmlybS1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tb2RhbC1jb25maXJtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBDb25maXJtTW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICByZXN1bHQ6IFByb21pc2U8Ym9vbGVhbj47XG4gIGRpc21pc3M6ICgpID0+IHZvaWQ7XG4gIGNsb3NlOiAoKSA9PiB2b2lkO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBib2R5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPO1xuICBASW5wdXQoKSBzZXQgbGFiZWxzKGxhYmVsczogTW9kYWxMYWJlbHMpIHtcbiAgICBjb25zdCB7IG9rID0gJ09LJywgY2FuY2VsID0gJ0NhbmNlbCcgfSA9IGxhYmVscyB8fCB7fTtcbiAgICB0aGlzLl9sYWJlbHMgPSB7IG9rLCBjYW5jZWwgfTtcbiAgfVxuXG4gIGdldCBsYWJlbHMoKTogTW9kYWxMYWJlbHMgeyByZXR1cm4gdGhpcy5fbGFiZWxzOyB9XG5cbiAgZ2V0IGNsYXNzSWNvbigpIHtcbiAgICByZXR1cm4gYGZhLSR7c3RhdHVzSWNvbnNbdGhpcy5zdGF0dXNdfWA7XG4gIH1cblxuICBnZXQgY2xhc3NBbGVydCgpIHtcbiAgICByZXR1cm4gc3RhdHVzQWxlcnRbdGhpcy5zdGF0dXNdO1xuICB9XG5cbiAgcHJpdmF0ZSBfbGFiZWxzOiBNb2RhbExhYmVscztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsOiBCc01vZGFsUmVmKSB7XG4gICAgdGhpcy5fbGFiZWxzID0ge1xuICAgICAgb2s6ICdPSycsXG4gICAgICBjYW5jZWw6ICdDYW5jZWwnXG4gICAgfTtcbiAgICB0aGlzLnJlc3VsdCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZGlzbWlzcyA9ICgpID0+IHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGlzbWlzcygpO1xuICB9XG59XG4iXX0=