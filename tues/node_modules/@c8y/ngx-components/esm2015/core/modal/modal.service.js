import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ConfirmModalComponent } from './modal-confirm.component';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to shiow a modal.
 */
let ModalService = class ModalService {
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     */
    confirm(title, body, status = Status.INFO, labels = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels: modalLabels, status } });
            return yield modalRef.content.result;
        });
    }
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    acknowledge(title, body, status = Status.INFO, acknowledgeLabel = gettext('Confirm')) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const labels = { ok: acknowledgeLabel, cancel: null };
            const modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title, body, labels, status } });
            return yield modalRef.content.result;
        });
    }
};
ModalService.ctorParameters = () => [
    { type: BsModalService }
];
ModalService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
ModalService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], ModalService);
export { ModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL21vZGFsL21vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUUxQzs7R0FFRztBQUlILElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFFdkIsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQUcsQ0FBQztJQUVwRDs7Ozs7O09BTUc7SUFDRyxPQUFPLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxTQUFxQixNQUFNLENBQUMsSUFBSSxFQUFHLFNBQWMsRUFBRTs7WUFDNUYsTUFBTSxXQUFXLEdBQUcsRUFBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUM7WUFDdEcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQzNILE9BQU8sTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFFRDs7Ozs7O09BTUc7SUFDRyxXQUFXLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxTQUFxQixNQUFNLENBQUMsSUFBSSxFQUFFLG1CQUEyQixPQUFPLENBQUMsU0FBUyxDQUFDOztZQUM1SCxNQUFNLE1BQU0sR0FBRyxFQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7WUFDcEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsRUFBQyxDQUFDLENBQUM7WUFDOUcsT0FBTyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLENBQUM7S0FBQTtDQUNGLENBQUE7O1lBM0JtQyxjQUFjOzs7QUFGckMsWUFBWTtJQUh4QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csWUFBWSxDQTZCeEI7U0E3QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBDb25maXJtTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFsLWNvbmZpcm0uY29tcG9uZW50JztcbmltcG9ydCB7IFN0YXR1c1R5cGUsIFN0YXR1cyB9IGZyb20gJy4uL2NvbW1vbi9zdGF0dXMubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbi8qKlxuICogU2VydmljZSB0byBzaGlvdyBhIG1vZGFsLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb2RhbFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSkge31cblxuICAvKipcbiAgICogU2hvd3MgYSBxdWljayBjb25maXJtIG1lc3NhZ2UgbW9kYWwuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgdGl0bGUgb2YgdGhhdCBtb2RhbC5cbiAgICogQHBhcmFtIGJvZHkgVGhlIHRleHQgYm9keSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMuXG4gICAqIEBwYXJhbSBsYWJlbHMgVGhlIGxhYmVscyB0byB1c2UuIERlZmF1bHQ6IHsgb2s6ICdDb25maXJtJywgY2FuY2VsOiAnQ2FuY2VsJ31cbiAgICovXG4gIGFzeW5jIGNvbmZpcm0odGl0bGU6IHN0cmluZywgYm9keTogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTywgIGxhYmVsczogYW55ID0ge30pIHtcbiAgICBjb25zdCBtb2RhbExhYmVscyA9IHtvazogbGFiZWxzLm9rIHx8IGdldHRleHQoJ0NvbmZpcm0nKSwgY2FuY2VsOiBsYWJlbHMuY2FuY2VsIHx8IGdldHRleHQoJ0NhbmNlbCcpfTtcbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coQ29uZmlybU1vZGFsQ29tcG9uZW50LCB7aW5pdGlhbFN0YXRlOiB7dGl0bGUsIGJvZHksIGxhYmVsczogbW9kYWxMYWJlbHMsIHN0YXR1c319KTtcbiAgICByZXR1cm4gYXdhaXQgbW9kYWxSZWYuY29udGVudC5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgYSBxdWljayBhY2tub3dsZWRnZSBtZXNzYWdlIG1vZGFsLlxuICAgKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoYXQgbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gYWNrbm93bGVkZ2VMYWJlbCBUaGUgbGFiZWwgdG8gdXNlLlxuICAgKi9cbiAgYXN5bmMgYWNrbm93bGVkZ2UodGl0bGU6IHN0cmluZywgYm9keTogc3RyaW5nLCBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTywgYWNrbm93bGVkZ2VMYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnQ29uZmlybScpICkge1xuICAgIGNvbnN0IGxhYmVscyA9IHtvazogYWNrbm93bGVkZ2VMYWJlbCwgY2FuY2VsOiBudWxsfTtcbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coQ29uZmlybU1vZGFsQ29tcG9uZW50LCB7aW5pdGlhbFN0YXRlOiB7dGl0bGUsIGJvZHksIGxhYmVscywgc3RhdHVzfX0pO1xuICAgIHJldHVybiBhd2FpdCBtb2RhbFJlZi5jb250ZW50LnJlc3VsdDtcbiAgfVxufVxuIl19