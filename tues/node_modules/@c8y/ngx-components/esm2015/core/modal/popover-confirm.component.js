import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { PopoverDirective } from 'ngx-bootstrap/popover';
import { gettext } from '../i18n/gettext';
/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
let PopoverConfirmComponent = class PopoverConfirmComponent {
    /**
     * A component to show a popover right next to the
     * user action. Add this component where the confirm modal
     * should be shown and toggle isOpen to display it. You
     * can use `await isShow()` to wait for a result on the
     * click action.
     */
    constructor() {
        this.buttons = [{ label: gettext('cancel'), action: () => Promise.reject() }];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    show(buttons) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.buttons = buttons || this.buttons;
            this.isOpen = true;
            let result;
            try {
                result = yield new Promise((resolve, reject) => {
                    return this.click = (action) => action().then(resolve).catch(reject);
                });
            }
            catch (ex) {
                throw (ex);
            }
            finally {
                this.isOpen = false;
            }
            return result;
        });
    }
    buttonStatus(status) {
        if (status) {
            return `btn-${status}`;
        }
        return 'btn-link btn-clean';
    }
    handleOutsideClick() {
        this.click(() => Promise.reject());
    }
};
tslib_1.__decorate([
    ViewChild(PopoverDirective, { static: false })
], PopoverConfirmComponent.prototype, "popover", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "buttons", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "message", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "isOpen", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "containerClass", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "placement", void 0);
tslib_1.__decorate([
    Input()
], PopoverConfirmComponent.prototype, "outsideClick", void 0);
PopoverConfirmComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-popover-confirm',
        template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"bottom-m\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm right-m-md\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
    })
], PopoverConfirmComponent);
export { PopoverConfirmComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL21vZGFsL3BvcG92ZXItY29uZmlybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFpQjFDOzs7Ozs7R0FNRztBQUtILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBWHBDOzs7Ozs7T0FNRztJQUNIO1FBTVcsWUFBTyxHQUE0QixDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLENBQUMsQ0FBQztRQUdqRyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2YsbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFDcEIsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUNwQixpQkFBWSxHQUFHLEtBQUssQ0FBQztJQWlDaEMsQ0FBQztJQTdCQzs7T0FFRztJQUNHLElBQUksQ0FBQyxPQUFpQzs7WUFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLE1BQU0sQ0FBQztZQUNYLElBQUk7Z0JBQ0YsTUFBTSxHQUFHLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQzdDLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQTBCLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNGLENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxNQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDWDtvQkFBUztnQkFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUNyQjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVELFlBQVksQ0FBQyxNQUFNO1FBQ2pCLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxPQUFPLE1BQU0sRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGLENBQUE7QUF4QytDO0lBQTdDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQzt3REFBMkI7QUFDL0Q7SUFBUixLQUFLLEVBQUU7d0RBQWtHO0FBQ2pHO0lBQVIsS0FBSyxFQUFFO3dEQUFpQjtBQUNoQjtJQUFSLEtBQUssRUFBRTtzREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFO3VEQUFnQjtBQUNmO0lBQVIsS0FBSyxFQUFFOytEQUFxQjtBQUNwQjtJQUFSLEtBQUssRUFBRTswREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7NkRBQXNCO0FBUm5CLHVCQUF1QjtJQUpuQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLGl3QkFBK0M7S0FDaEQsQ0FBQztHQUNXLHVCQUF1QixDQXlDbkM7U0F6Q1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvcG92ZXJEaXJlY3RpdmUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgU3RhdHVzVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9zdGF0dXMubW9kZWwnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9wb3ZlckNvbmZpcm1CdXR0b25zIHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgYnV0dG9uXG4gICAqL1xuICBsYWJlbDogc3RyaW5nO1xuICAvKipcbiAgICogV2hpY2ggYWN0aW9uIHRvIHBlcmZvcm0uXG4gICAqL1xuICBhY3Rpb246ICgpID0+IFByb21pc2U8YW55PjtcbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgY2xhc3MgYXR0YWNoZWQgdG8gdGhlIGJ1dHRvbi5cbiAgICovXG4gIHN0YXR1cz86IFN0YXR1c1R5cGUgfCAncHJpbWFyeSc7XG59XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gc2hvdyBhIHBvcG92ZXIgcmlnaHQgbmV4dCB0byB0aGVcbiAqIHVzZXIgYWN0aW9uLiBBZGQgdGhpcyBjb21wb25lbnQgd2hlcmUgdGhlIGNvbmZpcm0gbW9kYWxcbiAqIHNob3VsZCBiZSBzaG93biBhbmQgdG9nZ2xlIGlzT3BlbiB0byBkaXNwbGF5IGl0LiBZb3VcbiAqIGNhbiB1c2UgYGF3YWl0IGlzU2hvdygpYCB0byB3YWl0IGZvciBhIHJlc3VsdCBvbiB0aGVcbiAqIGNsaWNrIGFjdGlvbi5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXBvcG92ZXItY29uZmlybScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wb3BvdmVyLWNvbmZpcm0uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvcG92ZXJDb25maXJtQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZChQb3BvdmVyRGlyZWN0aXZlLCB7c3RhdGljOiBmYWxzZX0pIHBvcG92ZXI6IFBvcG92ZXJEaXJlY3RpdmU7XG4gIEBJbnB1dCgpIGJ1dHRvbnM6IFBvcG92ZXJDb25maXJtQnV0dG9uc1tdID0gW3sgbGFiZWw6IGdldHRleHQoJ2NhbmNlbCcpLCBhY3Rpb246ICgpID0+IFByb21pc2UucmVqZWN0KCl9XTtcbiAgQElucHV0KCkgbWVzc2FnZTogc3RyaW5nO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBpc09wZW4gPSBmYWxzZTtcbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3MgPSAnJztcbiAgQElucHV0KCkgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgQElucHV0KCkgb3V0c2lkZUNsaWNrID0gZmFsc2U7XG5cbiAgY2xpY2s6IChhY3Rpb246ICgpID0+IFByb21pc2U8YW55PikgPT4gdm9pZDtcblxuICAvKipcbiAgICogU2hvdyB0aGUgcG9wb3Zlci4gV2FpdCB1bnRpbCBhbiBhY3Rpb24gaXMgcGVyZm9ybWVkIG9uIGl0LlxuICAgKi9cbiAgYXN5bmMgc2hvdyhidXR0b25zPzogUG9wb3ZlckNvbmZpcm1CdXR0b25zW10pIHtcbiAgICB0aGlzLmJ1dHRvbnMgPSBidXR0b25zIHx8IHRoaXMuYnV0dG9ucztcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGljayA9IChhY3Rpb246ICgpID0+IFByb21pc2U8YW55PikgPT4gYWN0aW9uKCkudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHRocm93KGV4KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGJ1dHRvblN0YXR1cyhzdGF0dXMpIHtcbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICByZXR1cm4gYGJ0bi0ke3N0YXR1c31gO1xuICAgIH1cbiAgICByZXR1cm4gJ2J0bi1saW5rIGJ0bi1jbGVhbic7XG4gIH1cblxuICBoYW5kbGVPdXRzaWRlQ2xpY2soKSB7XG4gICAgdGhpcy5jbGljaygoKSA9PiBQcm9taXNlLnJlamVjdCgpKTtcbiAgfVxufVxuIl19