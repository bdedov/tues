import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { CommonModule } from '../common/common.module';
import { ActionBarItemComponent } from './action-bar-item.component';
import { ActionBarComponent } from './action-bar.component';
/**
 * An action bar can be added with content projection or multi provider
 * extension. It allows to show them in three positions (left, right
 * or more). The actions placed here are always local actions to the
 * current route like "add device" or "lock dashboard".
 *
 * @example
 * ```html
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
 * </c8y-action-bar-item>
 * ```
 * @exports ActionBarComponent The outlet component
 * @exports ActionBarItemComponent The items to add with cp.
 */
let ActionBarModule = class ActionBarModule {
};
ActionBarModule = tslib_1.__decorate([
    NgModule({
        declarations: [ActionBarComponent, ActionBarItemComponent],
        imports: [BsDropdownModule, CommonModule, CollapseModule, RouterModule.forChild([])],
        exports: [ActionBarComponent, ActionBarItemComponent]
    })
], ActionBarModule);
export { ActionBarModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hY3Rpb24tYmFyL2FjdGlvbi1iYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBTUgsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtDQUFHLENBQUE7QUFBbEIsZUFBZTtJQUwzQixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxzQkFBc0IsQ0FBQztRQUMxRCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEYsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLENBQUM7S0FDdEQsQ0FBQztHQUNXLGVBQWUsQ0FBRztTQUFsQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb2xsYXBzZU1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvY29sbGFwc2UnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQWN0aW9uQmFySXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYWN0aW9uLWJhci1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb25CYXJDb21wb25lbnQgfSBmcm9tICcuL2FjdGlvbi1iYXIuY29tcG9uZW50JztcblxuLyoqXG4gKiBBbiBhY3Rpb24gYmFyIGNhbiBiZSBhZGRlZCB3aXRoIGNvbnRlbnQgcHJvamVjdGlvbiBvciBtdWx0aSBwcm92aWRlclxuICogZXh0ZW5zaW9uLiBJdCBhbGxvd3MgdG8gc2hvdyB0aGVtIGluIHRocmVlIHBvc2l0aW9ucyAobGVmdCwgcmlnaHRcbiAqIG9yIG1vcmUpLiBUaGUgYWN0aW9ucyBwbGFjZWQgaGVyZSBhcmUgYWx3YXlzIGxvY2FsIGFjdGlvbnMgdG8gdGhlXG4gKiBjdXJyZW50IHJvdXRlIGxpa2UgXCJhZGQgZGV2aWNlXCIgb3IgXCJsb2NrIGRhc2hib2FyZFwiLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8Yzh5LWFjdGlvbi1iYXItaXRlbSBbcGxhY2VtZW50XT1cIidyaWdodCdcIj5cbiAqICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGlua1wiIChjbGljayk9XCJhZGRSYW5kb20oKVwiPjxpIGNsYXNzPVwiZmEgZmEtcGx1c1wiPjwvaT4gQWRkIHJhbmRvbTwvYnV0dG9uPlxuICogPC9jOHktYWN0aW9uLWJhci1pdGVtPlxuICogYGBgXG4gKiBAZXhwb3J0cyBBY3Rpb25CYXJDb21wb25lbnQgVGhlIG91dGxldCBjb21wb25lbnRcbiAqIEBleHBvcnRzIEFjdGlvbkJhckl0ZW1Db21wb25lbnQgVGhlIGl0ZW1zIHRvIGFkZCB3aXRoIGNwLlxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtBY3Rpb25CYXJDb21wb25lbnQsIEFjdGlvbkJhckl0ZW1Db21wb25lbnRdLFxuICBpbXBvcnRzOiBbQnNEcm9wZG93bk1vZHVsZSwgQ29tbW9uTW9kdWxlLCBDb2xsYXBzZU1vZHVsZSwgUm91dGVyTW9kdWxlLmZvckNoaWxkKFtdKV0sXG4gIGV4cG9ydHM6IFtBY3Rpb25CYXJDb21wb25lbnQsIEFjdGlvbkJhckl0ZW1Db21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIEFjdGlvbkJhck1vZHVsZSB7fVxuIl19