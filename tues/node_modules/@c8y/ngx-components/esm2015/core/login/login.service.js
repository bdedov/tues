import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { BasicAuth, CookieAuth, FetchClient, IAuthentication, ICredentials, ITenantLoginOption, Realtime, TenantService, UserService } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
import { ApiService } from '@c8y/ngx-components/api';
import { switchMap } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
import { LocationStrategy } from '@angular/common';
import { get, isString } from 'lodash-es';
/**
 * Service to manage the login.
 */
let LoginService = class LoginService {
    constructor(client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, location) {
        this.client = client;
        this.basicAuth = basicAuth;
        this.cookieAuth = cookieAuth;
        this.ui = ui;
        this.user = user;
        this.tenant = tenant;
        this.realtime = realtime;
        this.alert = alert;
        this.api = api;
        this.location = location;
        this.rememberMe = false;
        this.TOKEN_KEY = '_tcy8';
        this.TFATOKEN_KEY = 'TFAToken';
        this.OAUTH2_INTERNAL_TYPE = 'OAUTH2_INTERNAL';
        this.isFirstLogin = true;
        this.GREEN_MIN_LENGTH_DEFAULT = 8;
        // tslint:disable:max-line-length
        this.ERROR_MESSAGES = {
            minlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_missmatch: gettext('Password confirmation does not match.'),
            maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
            remote_error: gettext('Server error occurred.'),
            email: gettext('Invalid email address.'),
            password_change: gettext('Your password is expired. Please set a new password.'),
            password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
            tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
            pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            pattern_newPassword: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
            international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
            phone_number_error: gettext('Could not update phone number.'),
            pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
            passwordConfirm: gettext('Password confirmation does not match.'),
            tfaExpired: gettext('Two-factor authentication token expired.')
        };
        // tslint:enable:max-line-length
        this.SUCCESS_MESSAGES = {
            password_changed: gettext('Password changed. You can now log in using new password.'),
            password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
            resend_sms: gettext('Verification code SMS resent.'),
            send_sms: gettext('Verification code SMS sent.')
        };
        this.passwordStrengthSetting = {
            enforcePasswordStrength: false,
            greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT,
            passwordStrengthValidity: false
        };
        this.localhostRegExp = new RegExp('localhost');
        this.localhostIpRegExp = new RegExp('127.0.0.1');
        this.showTenantRegExp = new RegExp('showTenant');
        this.autoLogout();
        this.initLoginOptions();
    }
    /**
     * Returns the current tenant.
     * @return The tenant name.
     */
    getTenant() {
        return this.client.tenant;
    }
    initLoginOptions() {
        const loginOptions = this.ui.state.loginOptions || [];
        const isOAuth2 = ({ type, grantType }) => type === 'OAUTH2' && grantType === 'AUTHORIZATION_CODE';
        this.loginMode = loginOptions.find(({ type }) => type === 'OAUTH2_INTERNAL') ||
            loginOptions.find(({ type }) => type === 'BASIC') ||
            loginOptions.find(isOAuth2) || { type: 'BASIC' };
        this.oauthOptions = loginOptions.find(isOAuth2) || {};
    }
    redirectToOauth() {
        const { initRequest } = this.oauthOptions;
        const fullPath = (this.location ? this.location._platformLocation : window).location
            .href;
        const redirectUrl = encodeURIComponent(fullPath);
        const originUriParam = `${initRequest.includes('?') ? '&' : '?'}originUri=${redirectUrl}`;
        window.location.href = `${initRequest}${originUriParam}`;
    }
    autoLogout() {
        const errorPattern = /invalid\scredentials.*pin.*generate/i;
        const isTfaExpired = data => data && typeof data.message === 'string' && errorPattern.test(data.message);
        this.ui.currentUser
            .pipe(switchMap(u => u ? this.api.hookResponse(({ response }) => response.status === 401) : EMPTY))
            .subscribe((apiCall) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { response } = apiCall;
            let willLogout = false;
            if (isTfaExpired(response.data)) {
                willLogout = true;
            }
            else {
                if (typeof response.json === 'function') {
                    const data = yield response.clone().json();
                    if (isTfaExpired(data)) {
                        willLogout = true;
                    }
                }
            }
            if (willLogout) {
                this.logout(false);
                setTimeout(() => this.alert.danger(this.ERROR_MESSAGES.tfaExpired), 500);
            }
        }));
    }
    /**
     * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
     * @return The min length for password or default value.
     */
    getGreenMinLength() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { greenMinLength } = (yield this.getBasicAuthLoginOption()) || { greenMinLength: null };
            this.passwordStrengthSetting.greenMinLength = greenMinLength || this.GREEN_MIN_LENGTH_DEFAULT;
            return this.passwordStrengthSetting.greenMinLength;
        });
    }
    /**
     * Checks if password strength is enforced for system
     * by retrieving value of `enforceStrength` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    getEnforcePasswordStrength(refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getBasicAuthLoginOption(refresh).then((loginOption) => {
                const enforcePasswordStrength = get(loginOption, 'enforceStrength');
                if (isString(enforcePasswordStrength)) {
                    this.passwordStrengthSetting.enforcePasswordStrength = enforcePasswordStrength === 'true' ? true : false;
                }
                else {
                    this.passwordStrengthSetting.enforcePasswordStrength = !!enforcePasswordStrength;
                }
                return this.passwordStrengthSetting.enforcePasswordStrength;
            });
        });
    }
    /**
     * Checks if password strength is enforced for particular tenant
     * by retrieving value of `strengthValidity` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    getPasswordStrengthValidity(refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getBasicAuthLoginOption(refresh).then((loginOption) => {
                const strengthValidity = get(loginOption, 'strengthValidity');
                if (isString(strengthValidity)) {
                    this.passwordStrengthSetting.passwordStrengthValidity = strengthValidity === 'true' ? true : false;
                }
                else {
                    this.passwordStrengthSetting.passwordStrengthValidity = !!strengthValidity;
                }
                return this.passwordStrengthSetting.passwordStrengthValidity;
            });
        });
    }
    /**
     * Function determines if enforced strength checks should be enabled for current tenant
     * based on properties retrieved from loginOptions
     * @param options object containing specific options:
     *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call
     * @return boolean value, true if strength is enforced for tenant, false otherwise.
     */
    getPasswordStrengthEnforced(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const refresh = options && options.refresh;
            return Promise.all([this.getEnforcePasswordStrength(refresh), this.getPasswordStrengthValidity(refresh)]).then((values) => {
                const [enforcePasswordStrength, passwordStrengthValidity] = values;
                return enforcePasswordStrength || passwordStrengthValidity;
            });
        });
    }
    /**
     * Clears all backend errors.
     */
    cleanMessages() {
        this.alert.clearAll();
    }
    /**
     * Adds a new success message
     * @param successKey The key of the success message as used in SUCCESS_MESSAGES
     */
    addSuccessMessage(successKey) {
        const successMessage = this.SUCCESS_MESSAGES[successKey];
        if (successMessage) {
            this.alert.add({
                text: successMessage,
                type: 'success',
                timeout: 0
            });
        }
    }
    /**
     * Returns the current strategy. Defaults to cookie, if a token
     * is found in local or session storage we switch to basic auth.
     * @returns The current auth strategy.
     */
    getAuthStrategy() {
        let authStrategy = this.cookieAuth;
        const token = this.getStoredToken();
        const tfa = this.getStoredTfaToken();
        if (token) {
            authStrategy = this.basicAuth;
            this.setCredentials({ token, tfa }, this.basicAuth);
        }
        return authStrategy;
    }
    /**
     * Forces the use of basic auth as strategy with this credentials.
     * @param credentials The credentials to use.
     */
    useBasicAuth(credentials) {
        this.setCredentials(credentials, this.basicAuth);
        return this.basicAuth;
    }
    /**
     * Tries to login a user with the given credentials.
     * If successful, the current tenant and user is set. If not an error
     * is thrown. It also verifies if the user is allowed to open the
     * current app.
     * @param auth The authentication strategy used.
     * @param credentials The credentials to try to login.
     */
    login(auth = this.getAuthStrategy(), credentials) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.client.setAuth(auth);
            const tenantRes = yield this.tenant.current();
            const tenant = tenantRes.data;
            if (yield this.switchLoginMode(credentials)) {
                auth = this.cookieAuth;
            }
            const userRes = yield this.user.current();
            const user = userRes.data;
            yield this.verifyAppAccess();
            const supportUserName = this.getSupportUserName(credentials);
            const token = this.setCredentials({
                tenant: tenant.name,
                user: (supportUserName ? `${supportUserName}$` : '') + user.userName
            }, auth);
            if (token) {
                this.storeBasicAuthToken(token);
            }
            yield this.authFulfilled(tenant, user, supportUserName);
        });
    }
    /**
     * Saves tenant, user and support user info to the app state.
     * @param tenant The current tenant object.
     * @param user The current user object.
     * @param supportUserName The current support user name.
     */
    authFulfilled(tenant, user, supportUserName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!tenant) {
                const { data } = yield this.tenant.current();
                tenant = data;
                this.client.tenant = tenant.name;
            }
            if (!user) {
                const { data } = yield this.user.current();
                user = data;
            }
            if (!supportUserName) {
                supportUserName = null;
            }
            this.ui.setUser({ user, supportUserName });
            this.ui.currentTenant.next(tenant);
        });
    }
    /**
     * Switch the login mode to CookieAuth if the
     * user has configured to use it in loginOptions.
     * @param credentials The credentials for that login
     */
    switchLoginMode(credentials) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const isPasswordGrantLogin = this.isPasswordGrantLogin(credentials);
            if (isPasswordGrantLogin && credentials) {
                const params = new URLSearchParams({
                    grant_type: 'PASSWORD',
                    username: credentials.user,
                    password: credentials.password,
                    tfa_code: credentials.tfa
                });
                const urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
                credentials.tenant = urlParams.get('tenant_id');
                const res = yield this.client.fetch(`tenant/oauth?${urlParams.toString()}`, {
                    method: 'POST',
                    body: params.toString(),
                    headers: {
                        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    }
                });
                if (!res.ok) {
                    try {
                        const data = yield res.json();
                        throw { res, data };
                    }
                    catch (ex) {
                        throw ex;
                    }
                }
                this.client.setAuth(this.cookieAuth);
                this.cleanLocalStorage();
                this.basicAuth.logout();
            }
            return isPasswordGrantLogin;
        });
    }
    isPasswordGrantLogin(credentials) {
        return !!(!this.isSupportUser(credentials) &&
            this.loginMode &&
            this.loginMode.type === this.OAUTH2_INTERNAL_TYPE);
    }
    /**
     * Verifies if the provided credentials use a support user to log in or not.
     * @param credentials Credentials to check.
     * @returns True if user is a support user.
     */
    isSupportUser(credentials) {
        return credentials && credentials.user.includes('$');
    }
    /**
     * Verifies if the tenant input field should be shown
     * or not.
     * @returns If true, show the tenant input.
     */
    showTenant() {
        return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
    }
    /**
     * Logs the user out
     * @param reload If set to false, the page will not reload
     */
    logout(reload = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let resData = null;
            try {
                const [basicRes, cookieRes] = yield this.reset();
                resData = yield cookieRes.json();
            }
            catch (ex) {
                this.alert.removeLastDanger();
            }
            finally {
                if (resData && resData.url) {
                    this.redirect(resData.url);
                }
                else if (reload) {
                    this.location.replaceState({}, '', '', '');
                    window.location.reload();
                }
            }
        });
    }
    /**
     * Resets the stored auth-data
     */
    reset() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.cleanLocalStorage();
            this.cleanSessionStorage();
            this.realtime.disconnect();
            this.ui.currentUser.next(null);
            return Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()]);
        });
    }
    /**
     * Saves the TFA token to local or session storage.
     * @param tfaToken The tfa token to save.
     * @param storage The storage to use (local or session).
     */
    saveTFAToken(tfaToken, storage) {
        storage.setItem(this.TFATOKEN_KEY, tfaToken);
    }
    /**
     * Request the manifest -> on 401 user has no access to that application
     * and we throw the error up to the login form.
     */
    verifyAppAccess() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.ui.loadManifest();
            }
            catch (ex) {
                if (!(ex.res && ex.res.status === 404 && this.isLocal())) {
                    throw ex;
                }
            }
        });
    }
    /**
     * Sets the tenant to the client and updates the credentials on the
     * auth strategy.
     * @param credentials The name of the tenant.
     * @param authStrategy The authentication strategy used.
     * @return Returns the token if basic auth, otherwise undefined.
     */
    setCredentials(credentials, authStrategy) {
        if (credentials.tenant) {
            this.client.tenant = credentials.tenant;
        }
        // Check if a token is already set (case for support user login)
        // if yes -> we just need to update the user, and reuse the token
        // of the support user.
        // Therefore we need to pass user and tenant, to get
        // just the stored token and nothing else (see BasicAuth.ts:31).
        const token = this.basicAuth.updateCredentials({
            tenant: credentials.tenant,
            user: credentials.user
        });
        const newCredentials = Object.assign({ token }, credentials);
        return authStrategy.updateCredentials(newCredentials);
    }
    /**
     * Verifies if the current user is a developer or not.
     * Running on localhost means development mode.
     */
    isLocal() {
        const hostname = window.location.hostname;
        return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
    }
    /**
     * Save the token to local or session storage.
     * @param token The token to save.
     * @param storage The storage to use (local or session).
     */
    saveToken(token, storage) {
        storage.setItem(this.TOKEN_KEY, token);
    }
    storeBasicAuthToken(token) {
        this.saveToken(token, sessionStorage);
        if (this.rememberMe) {
            this.saveToken(token, localStorage);
        }
    }
    cleanLocalStorage() {
        localStorage.removeItem(this.TOKEN_KEY);
        localStorage.removeItem(this.TFATOKEN_KEY);
    }
    cleanSessionStorage() {
        sessionStorage.removeItem(this.TOKEN_KEY);
        sessionStorage.removeItem(this.TFATOKEN_KEY);
    }
    isShowTenant() {
        return this.showTenantRegExp.test(window.location.href);
    }
    redirect(url) {
        window.location.href = url;
    }
    getBasicAuthLoginOption(refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (refresh) {
                yield this.ui.refreshLoginOptions();
            }
            const loginOptions = this.ui.state.loginOptions || [];
            const basicAuthLoginOption = loginOptions.find(({ type }) => type === 'BASIC');
            return Promise.resolve(basicAuthLoginOption);
        });
    }
    /**
     * Gets support user name from credentials.
     * @param credentials Credentials object (defaults to the stored one).
     * @returns Support user name.
     */
    getSupportUserName(credentials = this.getStoredCredentials()) {
        if (!credentials) {
            return null;
        }
        const supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
        return supportUserName;
    }
    /**
     * Gets credentials object from the stored token.
     * @returns Credentials object.
     */
    getStoredCredentials() {
        const token = this.getStoredToken();
        if (!token) {
            return null;
        }
        return this.decodeToken(token);
    }
    /**
     * Gets stored token from local storage or session storage.
     * @returns Stored token.
     */
    getStoredToken() {
        return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
    }
    /**
     * Gets stored TFA token from local storage or session storage.
     * @returns Stored TFA token.
     */
    getStoredTfaToken() {
        return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
    }
    /**
     * Decodes token to credentials object.
     * @param token Token to decode.
     * @returns Credentials object.
     */
    decodeToken(token) {
        const decoded = decodeURIComponent(escape(window.atob(token)));
        const split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
        return {
            tenant: split[2],
            user: split[3],
            password: split[4]
        };
    }
};
LoginService.ctorParameters = () => [
    { type: FetchClient },
    { type: BasicAuth },
    { type: CookieAuth },
    { type: AppStateService },
    { type: UserService },
    { type: TenantService },
    { type: Realtime },
    { type: AlertService },
    { type: ApiService },
    { type: LocationStrategy, decorators: [{ type: Optional }] }
];
LoginService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(9, Optional())
], LoginService);
export { LoginService };
//# sourceMappingURL=data:application/json;base64,