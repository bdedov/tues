var LoginModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { FormsModule as C8yFormsModule } from '../forms/forms.module';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CommonModule } from '../common/common.module';
import { ChangePasswordComponent } from './change-password.component';
import { CredentialsComponent } from './credentials.component';
import { LoginComponent } from './login.component';
import { LoginService } from './login.service';
import { RecoverPasswordComponent } from './recover-password.component';
import { AuthenticationModule } from '../authentication/authentication.module';
import { AlertModule } from '../alert/alert.module';
import { TotpAuthComponent } from './totp-auth.component';
import { PasswordStrengthValidatorDirective } from './password-strength-validator.directive';
/**
 * The angular module definition for the login.
 * @exports LoginComponent
 */
let LoginModule = LoginModule_1 = class LoginModule {
    static forRoot() {
        return {
            ngModule: LoginModule_1,
            providers: LoginModule_1.providers()
        };
    }
    static providers() {
        return [LoginService];
    }
};
LoginModule = LoginModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [
            LoginComponent,
            RecoverPasswordComponent,
            ChangePasswordComponent,
            CredentialsComponent,
            TotpAuthComponent,
            PasswordStrengthValidatorDirective
        ],
        imports: [
            FormsModule,
            TooltipModule,
            CommonModule,
            AuthenticationModule,
            AlertModule,
            C8yFormsModule
        ],
        exports: [LoginComponent]
    })
], LoginModule);
export { LoginModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvbG9naW4vbG9naW4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsSUFBSSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRTdGOzs7R0FHRztBQW9CSCxJQUFhLFdBQVcsbUJBQXhCLE1BQWEsV0FBVztJQUN0QixNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsYUFBVztZQUNyQixTQUFTLEVBQUUsYUFBVyxDQUFDLFNBQVMsRUFBRTtTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTO1FBQ2QsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDRixDQUFBO0FBVlksV0FBVztJQW5CdkIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osY0FBYztZQUNkLHdCQUF3QjtZQUN4Qix1QkFBdUI7WUFDdkIsb0JBQW9CO1lBQ3BCLGlCQUFpQjtZQUNqQixrQ0FBa0M7U0FDbkM7UUFDRCxPQUFPLEVBQUU7WUFDUCxXQUFXO1lBQ1gsYUFBYTtZQUNiLFlBQVk7WUFDWixvQkFBb0I7WUFDcEIsV0FBVztZQUNYLGNBQWM7U0FDZjtRQUNELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztLQUMxQixDQUFDO0dBQ1csV0FBVyxDQVV2QjtTQVZZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSBhcyBDOHlGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2Zvcm1zL2Zvcm1zLm1vZHVsZSc7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IENoYW5nZVBhc3N3b3JkQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFuZ2UtcGFzc3dvcmQuY29tcG9uZW50JztcbmltcG9ydCB7IENyZWRlbnRpYWxzQ29tcG9uZW50IH0gZnJvbSAnLi9jcmVkZW50aWFscy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTG9naW5Db21wb25lbnQgfSBmcm9tICcuL2xvZ2luLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVjb3ZlclBhc3N3b3JkQ29tcG9uZW50IH0gZnJvbSAnLi9yZWNvdmVyLXBhc3N3b3JkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbk1vZHVsZSB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBBbGVydE1vZHVsZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0Lm1vZHVsZSc7XG5pbXBvcnQgeyBUb3RwQXV0aENvbXBvbmVudCB9IGZyb20gJy4vdG90cC1hdXRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoVmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9wYXNzd29yZC1zdHJlbmd0aC12YWxpZGF0b3IuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBUaGUgYW5ndWxhciBtb2R1bGUgZGVmaW5pdGlvbiBmb3IgdGhlIGxvZ2luLlxuICogQGV4cG9ydHMgTG9naW5Db21wb25lbnRcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTG9naW5Db21wb25lbnQsXG4gICAgUmVjb3ZlclBhc3N3b3JkQ29tcG9uZW50LFxuICAgIENoYW5nZVBhc3N3b3JkQ29tcG9uZW50LFxuICAgIENyZWRlbnRpYWxzQ29tcG9uZW50LFxuICAgIFRvdHBBdXRoQ29tcG9uZW50LFxuICAgIFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3JEaXJlY3RpdmVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIEZvcm1zTW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEF1dGhlbnRpY2F0aW9uTW9kdWxlLFxuICAgIEFsZXJ0TW9kdWxlLFxuICAgIEM4eUZvcm1zTW9kdWxlXG4gIF0sXG4gIGV4cG9ydHM6IFtMb2dpbkNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTG9naW5Nb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IExvZ2luTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBMb2dpbk1vZHVsZS5wcm92aWRlcnMoKVxuICAgIH07XG4gIH1cbiAgc3RhdGljIHByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gW0xvZ2luU2VydmljZV07XG4gIH1cbn1cbiJdfQ==