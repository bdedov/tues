import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter } from '@angular/core';
import { LoginService } from './login.service';
import { PasswordService } from '../authentication/password.service';
import { IResetPassword, ICredentials, UserService } from '@c8y/client';
import { OptionsService } from '../common/options.service';
import { AlertService } from '../alert/alert.service';
import { LoginViews } from './login.model';
let ChangePasswordComponent = class ChangePasswordComponent {
    constructor(loginService, users, passwordStrengthCheckerService, options, alert) {
        this.loginService = loginService;
        this.users = users;
        this.passwordStrengthCheckerService = passwordStrengthCheckerService;
        this.options = options;
        this.alert = alert;
        this.onChangeView = new EventEmitter();
        this.passwordPattern = /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/;
        this.isLoading = false;
        this.model = {
            tenantId: '',
            email: '',
            newPassword: '',
            newPasswordConfirm: ''
        };
        this.emailReadOnly = false;
        this.passwordStrengthEnforced = false;
        this.TOKEN_PARAM = 'token';
        this.EMAIL_PARAM = 'email';
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.model.tenantId = this.loginService.getTenant();
            this.model.email = this.options.get(this.EMAIL_PARAM, '');
            this.emailReadOnly = !!this.model.email;
            this.passwordStrengthEnforced = yield this.loginService.getPasswordStrengthEnforced();
        });
    }
    changePassword() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const passwordStrengthColor = this.passwordStrengthCheckerService.getStrengthColor(this.model.newPassword);
            const resetPassword = {
                token: this.credentials.token,
                email: this.model.email,
                newPassword: this.model.newPassword,
                passwordStrength: passwordStrengthColor.passwordStrength
            };
            try {
                this.isLoading = true;
                const { res } = yield this.users.resetPassword(resetPassword, this.model.tenantId);
                if (res.status === 200) {
                    this.loginService.addSuccessMessage('password_changed');
                    this.credentials.token = undefined;
                    this.options.set(this.TOKEN_PARAM, undefined);
                    this.onChangeView.emit({ view: LoginViews.Credentials });
                }
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
            finally {
                this.loginService.reset();
                this.isLoading = false;
            }
        });
    }
};
ChangePasswordComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: PasswordService },
    { type: OptionsService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], ChangePasswordComponent.prototype, "credentials", void 0);
tslib_1.__decorate([
    Output()
], ChangePasswordComponent.prototype, "onChangeView", void 0);
ChangePasswordComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-change-password',
        template: "<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"changePassword()\"\n  #changePasswordForm=\"ngForm\"\n  novalidate\n>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n      [readonly]=\"emailReadOnly\"\n    />\n  </c8y-form-group>\n\n  <div class=\"row content-flex-50\">\n    <div class=\"col-7\">\n      <c8y-form-group>\n        <label translate>New password</label>\n        <input\n          [(ngModel)]=\"model.newPassword\"\n          #newPassword=\"ngModel\"\n          type=\"password\"\n          name=\"newPassword\"\n          class=\"form-control\"\n          placeholder=\"{{ 'New password' | translate }}\"\n          [pattern]=\"passwordPattern\"\n          autocomplete=\"new-password\"\n          [passwordStrengthEnforced]='passwordStrengthEnforced'\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"pattern\"\n            [text]=\"loginService.ERROR_MESSAGES.pattern_newPassword\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label translate>Confirm password</label>\n        <input\n          [(ngModel)]=\"model.newPasswordConfirm\"\n          #newPasswordConfirm=\"ngModel\"\n          type=\"password\"\n          name=\"newPasswordConfirm\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Confirm password' | translate }}\"\n          passwordConfirm=\"newPassword\"\n          autocomplete=\"new-password\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"passwordConfirm\"\n            [text]=\"loginService.ERROR_MESSAGES.passwordConfirm\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"col-5\">\n      <c8y-password-strength\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword\"\n      ></c8y-password-strength>\n      <c8y-password-check-list\n        class=\"m-t-32\"\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword || !passwordStrengthEnforced\"\n      ></c8y-password-check-list>\n    </div>\n  </div>\n\n  <button\n    title=\"{{ 'Set password' | translate }}\"\n    [disabled]=\"!changePasswordForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Set password\n  </button>\n</form>\n"
    })
], ChangePasswordComponent);
export { ChangePasswordComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xvZ2luL2NoYW5nZS1wYXNzd29yZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzNDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBa0JsQyxZQUNTLFlBQTBCLEVBQ3pCLEtBQWtCLEVBQ2xCLDhCQUErQyxFQUMvQyxPQUF1QixFQUN2QixLQUFtQjtRQUpwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLG1DQUE4QixHQUE5Qiw4QkFBOEIsQ0FBaUI7UUFDL0MsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQXJCbkIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTVDLG9CQUFlLEdBQUcsd0RBQXdELENBQUM7UUFDM0UsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixVQUFLLEdBQUc7WUFDTixRQUFRLEVBQUUsRUFBRTtZQUNaLEtBQUssRUFBRSxFQUFFO1lBQ1QsV0FBVyxFQUFFLEVBQUU7WUFDZixrQkFBa0IsRUFBRSxFQUFFO1NBQ3ZCLENBQUM7UUFDRixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0Qiw2QkFBd0IsR0FBRyxLQUFLLENBQUM7UUFFekIsZ0JBQVcsR0FBRyxPQUFPLENBQUM7UUFDdEIsZ0JBQVcsR0FBRyxPQUFPLENBQUM7SUFRMUIsQ0FBQztJQUVDLFFBQVE7O1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3hDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUN4RixDQUFDO0tBQUE7SUFFSyxjQUFjOztZQUNsQixNQUFNLHFCQUFxQixHQUFRLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FDckYsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3ZCLENBQUM7WUFDRixNQUFNLGFBQWEsR0FBbUI7Z0JBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7Z0JBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVc7Z0JBQ25DLGdCQUFnQixFQUFFLHFCQUFxQixDQUFDLGdCQUFnQjthQUN6RCxDQUFDO1lBQ0YsSUFBSTtnQkFDRixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDdEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ25GLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztvQkFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO29CQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO29CQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztpQkFDMUQ7YUFDRjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEM7b0JBQVM7Z0JBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDeEI7UUFDSCxDQUFDO0tBQUE7Q0FDRixDQUFBOztZQXhDd0IsWUFBWTtZQUNsQixXQUFXO1lBQ2MsZUFBZTtZQUN0QyxjQUFjO1lBQ2hCLFlBQVk7O0FBdEJwQjtJQUFSLEtBQUssRUFBRTs0REFBMkI7QUFDekI7SUFBVCxNQUFNLEVBQUU7NkRBQW1DO0FBRmpDLHVCQUF1QjtJQUxuQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLG1uR0FBK0M7S0FFaEQsQ0FBQztHQUNXLHVCQUF1QixDQTJEbkM7U0EzRFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgSW5wdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3N3b3JkU2VydmljZSB9IGZyb20gJy4uL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVJlc2V0UGFzc3dvcmQsIElDcmVkZW50aWFscywgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi9sb2dpbi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1jaGFuZ2UtcGFzc3dvcmQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hhbmdlLXBhc3N3b3JkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBDaGFuZ2VQYXNzd29yZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHM7XG4gIEBPdXRwdXQoKSBvbkNoYW5nZVZpZXcgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcGFzc3dvcmRQYXR0ZXJuID0gL15bYS16QS1aMC05YH4hQCMkJV4mKigpX3wrXFwtPT87OidcIiwuPD57fVtcXF1cXFxcL117OCwzMn0kLztcbiAgaXNMb2FkaW5nID0gZmFsc2U7XG4gIG1vZGVsID0ge1xuICAgIHRlbmFudElkOiAnJyxcbiAgICBlbWFpbDogJycsXG4gICAgbmV3UGFzc3dvcmQ6ICcnLFxuICAgIG5ld1Bhc3N3b3JkQ29uZmlybTogJydcbiAgfTtcbiAgZW1haWxSZWFkT25seSA9IGZhbHNlO1xuICBwYXNzd29yZFN0cmVuZ3RoRW5mb3JjZWQgPSBmYWxzZTtcblxuICBwcml2YXRlIFRPS0VOX1BBUkFNID0gJ3Rva2VuJztcbiAgcHJpdmF0ZSBFTUFJTF9QQVJBTSA9ICdlbWFpbCc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgdXNlcnM6IFVzZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGFzc3dvcmRTdHJlbmd0aENoZWNrZXJTZXJ2aWNlOiBQYXNzd29yZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7IH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1vZGVsLnRlbmFudElkID0gdGhpcy5sb2dpblNlcnZpY2UuZ2V0VGVuYW50KCk7XG4gICAgdGhpcy5tb2RlbC5lbWFpbCA9IHRoaXMub3B0aW9ucy5nZXQodGhpcy5FTUFJTF9QQVJBTSwgJycpO1xuICAgIHRoaXMuZW1haWxSZWFkT25seSA9ICEhdGhpcy5tb2RlbC5lbWFpbDtcbiAgICB0aGlzLnBhc3N3b3JkU3RyZW5ndGhFbmZvcmNlZCA9IGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLmdldFBhc3N3b3JkU3RyZW5ndGhFbmZvcmNlZCgpO1xuICB9XG5cbiAgYXN5bmMgY2hhbmdlUGFzc3dvcmQoKSB7XG4gICAgY29uc3QgcGFzc3dvcmRTdHJlbmd0aENvbG9yOiBhbnkgPSB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyU2VydmljZS5nZXRTdHJlbmd0aENvbG9yKFxuICAgICAgdGhpcy5tb2RlbC5uZXdQYXNzd29yZFxuICAgICk7XG4gICAgY29uc3QgcmVzZXRQYXNzd29yZDogSVJlc2V0UGFzc3dvcmQgPSB7XG4gICAgICB0b2tlbjogdGhpcy5jcmVkZW50aWFscy50b2tlbixcbiAgICAgIGVtYWlsOiB0aGlzLm1vZGVsLmVtYWlsLFxuICAgICAgbmV3UGFzc3dvcmQ6IHRoaXMubW9kZWwubmV3UGFzc3dvcmQsXG4gICAgICBwYXNzd29yZFN0cmVuZ3RoOiBwYXNzd29yZFN0cmVuZ3RoQ29sb3IucGFzc3dvcmRTdHJlbmd0aFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHsgcmVzIH0gPSBhd2FpdCB0aGlzLnVzZXJzLnJlc2V0UGFzc3dvcmQocmVzZXRQYXNzd29yZCwgdGhpcy5tb2RlbC50ZW5hbnRJZCk7XG4gICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHRoaXMubG9naW5TZXJ2aWNlLmFkZFN1Y2Nlc3NNZXNzYWdlKCdwYXNzd29yZF9jaGFuZ2VkJyk7XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMudG9rZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zZXQodGhpcy5UT0tFTl9QQVJBTSwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZVZpZXcuZW1pdCh7IHZpZXc6IExvZ2luVmlld3MuQ3JlZGVudGlhbHMgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxvZ2luU2VydmljZS5yZXNldCgpO1xuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==