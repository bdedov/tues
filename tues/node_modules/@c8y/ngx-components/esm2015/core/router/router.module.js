var RouterModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule as NgRouterModule } from '@angular/router';
import { RouterService } from './router.service';
import { ContextRouteComponent } from './context-route.component';
import { HeaderModule } from '../header/header.module';
import { CommonModule } from '../common/common.module';
import { ContextRouteGuard } from './context-route.guard';
import { ViewContext } from './router.models';
import { RouterTabsResolver } from './router-tabs.resolver';
import { EmptyComponent } from './empty.component';
export const routes = [{
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }];
// tslint:disable-next-line: forin
for (const key in ViewContext) {
    const context = ViewContext[key];
    routes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver,
        }
    });
}
let RouterModule = RouterModule_1 = class RouterModule {
    constructor(routerService) {
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    static providers() {
        return [
            ContextRouteGuard,
            RouterTabsResolver,
            RouterService
        ];
    }
    static forRoot() {
        return {
            ngModule: RouterModule_1,
            providers: RouterModule_1.providers()
        };
    }
};
RouterModule.ctorParameters = () => [
    { type: RouterService }
];
RouterModule = RouterModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [ContextRouteComponent, EmptyComponent],
        imports: [
            NgRouterModule.forRoot(routes),
            HeaderModule,
            CommonModule
        ],
        entryComponents: [ContextRouteComponent, EmptyComponent]
    })
], RouterModule);
export { RouterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9yb3V0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxJQUFJLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQVMsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFZLENBQUM7UUFDOUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsU0FBUyxFQUFFLGNBQWM7S0FDMUI7SUFDRDtRQUNFLElBQUksRUFBRSxhQUFhO1FBQ25CLFNBQVMsRUFBRSxjQUFjO0tBQzFCLENBQUMsQ0FBQztBQUNILGtDQUFrQztBQUNsQyxLQUFLLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRTtJQUM3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNWLElBQUksRUFBRSxPQUFPO1FBQ2IsU0FBUyxFQUFFLHFCQUFxQjtRQUNoQyxXQUFXLEVBQUUsQ0FBRSxpQkFBaUIsQ0FBRTtRQUNsQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsa0JBQWtCO1NBQ3pCO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7QUFXRCxJQUFhLFlBQVksb0JBQXpCLE1BQWEsWUFBWTtJQWdCdkIsWUFBWSxhQUE0QjtRQUN0QyxtRkFBbUY7SUFDckYsQ0FBQztJQWpCRCxNQUFNLENBQUMsU0FBUztRQUNkLE9BQU87WUFDTCxpQkFBaUI7WUFDakIsa0JBQWtCO1lBQ2xCLGFBQWE7U0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFZO1lBQ3RCLFNBQVMsRUFBRSxjQUFZLENBQUMsU0FBUyxFQUFFO1NBQ3BDLENBQUM7SUFDSixDQUFDO0NBS0YsQ0FBQTs7WUFINEIsYUFBYTs7QUFoQjdCLFlBQVk7SUFUeEIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUUscUJBQXFCLEVBQUUsY0FBYyxDQUFDO1FBQ3RELE9BQU8sRUFBRTtZQUNQLGNBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQzlCLFlBQVk7WUFDWixZQUFZO1NBQ2I7UUFDRCxlQUFlLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxjQUFjLENBQUM7S0FDekQsQ0FBQztHQUNXLFlBQVksQ0FtQnhCO1NBbkJZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIGFzIE5nUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJvdXRlclNlcnZpY2UgfSBmcm9tICcuL3JvdXRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRleHRSb3V0ZUNvbXBvbmVudCB9IGZyb20gJy4vY29udGV4dC1yb3V0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGVhZGVyTW9kdWxlIH0gZnJvbSAnLi4vaGVhZGVyL2hlYWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ29udGV4dFJvdXRlR3VhcmQgfSBmcm9tICcuL2NvbnRleHQtcm91dGUuZ3VhcmQnO1xuaW1wb3J0IHsgVmlld0NvbnRleHQsIFJvdXRlIH0gZnJvbSAnLi9yb3V0ZXIubW9kZWxzJztcbmltcG9ydCB7IFJvdXRlclRhYnNSZXNvbHZlciB9IGZyb20gJy4vcm91dGVyLXRhYnMucmVzb2x2ZXInO1xuaW1wb3J0IHsgRW1wdHlDb21wb25lbnQgfSBmcm9tICcuL2VtcHR5LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCByb3V0ZXM6IFJvdXRlW10gPSBbe1xuICBwYXRoOiAndXNlcnMvbmV3JyxcbiAgY29tcG9uZW50OiBFbXB0eUNvbXBvbmVudFxufSxcbntcbiAgcGF0aDogJ3RlbmFudHMvbmV3JyxcbiAgY29tcG9uZW50OiBFbXB0eUNvbXBvbmVudFxufV07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXG5mb3IgKGNvbnN0IGtleSBpbiBWaWV3Q29udGV4dCkge1xuICBjb25zdCBjb250ZXh0ID0gVmlld0NvbnRleHRba2V5XTtcbiAgcm91dGVzLnB1c2goe1xuICAgIHBhdGg6IGNvbnRleHQsXG4gICAgY29tcG9uZW50OiBDb250ZXh0Um91dGVDb21wb25lbnQsXG4gICAgY2FuQWN0aXZhdGU6IFsgQ29udGV4dFJvdXRlR3VhcmQgXSxcbiAgICBkYXRhOiB7IGNvbnRleHQsIGNvbnRleHREYXRhOiB7fSB9LFxuICAgIHJlc29sdmU6IHtcbiAgICAgIHRhYnM6IFJvdXRlclRhYnNSZXNvbHZlcixcbiAgICB9XG4gIH0pO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgQ29udGV4dFJvdXRlQ29tcG9uZW50LCBFbXB0eUNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtcbiAgICBOZ1JvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcyksXG4gICAgSGVhZGVyTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtDb250ZXh0Um91dGVDb21wb25lbnQsIEVtcHR5Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJNb2R1bGUge1xuICBzdGF0aWMgcHJvdmlkZXJzKCkge1xuICAgIHJldHVybiBbXG4gICAgICBDb250ZXh0Um91dGVHdWFyZCxcbiAgICAgIFJvdXRlclRhYnNSZXNvbHZlcixcbiAgICAgIFJvdXRlclNlcnZpY2VcbiAgICBdO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFJvdXRlck1vZHVsZS5wcm92aWRlcnMoKVxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihyb3V0ZXJTZXJ2aWNlOiBSb3V0ZXJTZXJ2aWNlKSB7XG4gICAgLy8gRGVjbGFyZWQgYnV0IG5ldmVyIHVzZWQgaXMgaW50ZW5kZWQ6IHRvIGFsd2F5cyBoYXZlIGEgaW5zdGFuY2Ugb2YgUm91dGVyU2VydmljZS5cbiAgfVxufVxuIl19