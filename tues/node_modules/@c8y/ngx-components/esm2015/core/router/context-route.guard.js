import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
import { InventoryService } from '../../api';
let ContextRouteGuard = class ContextRouteGuard {
    constructor(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    canActivate(route) {
        const id = route.paramMap.get('id');
        const service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(contextData => (route.data = Object.assign({}, route.data, { contextData }))), map(() => true), catchError(ex => of(false)));
    }
    service(route) {
        const serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    }
    detailCached(service, id) {
        const cache = this.getCache(service);
        let cached = cache[id];
        if (!cached) {
            const params = service instanceof InventoryService ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(({ data }) => data), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    }
    clearDetailCached(service, id) {
        const cache = this.getCache(service);
        delete cache[id];
    }
    getCache(service) {
        let cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    }
};
ContextRouteGuard.ctorParameters = () => [
    { type: Injector }
];
ContextRouteGuard = tslib_1.__decorate([
    Injectable()
], ContextRouteGuard);
export { ContextRouteGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9jb250ZXh0LXJvdXRlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRzdDLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBRTVCLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFEOUIsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDYyxDQUFDO0lBRTFDLFdBQVcsQ0FBQyxLQUE2QjtRQUN2QyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3hDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUkscUJBQVEsS0FBSyxDQUFDLElBQUksSUFBRSxXQUFXLEdBQUUsQ0FBQyxDQUFDLEVBQ2pFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDZixVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBSztRQUNuQixNQUFNLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxNQUFNLEdBQUcsT0FBTyxZQUFZLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3pGLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN2QixXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztZQUNGLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDcEI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8saUJBQWlCLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxLQUFLLEdBQWtCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxPQUFPO1FBQ3RCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQTs7WUE3QytCLFFBQVE7O0FBRjNCLGlCQUFpQjtJQUQ3QixVQUFVLEVBQUU7R0FDQSxpQkFBaUIsQ0ErQzdCO1NBL0NZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzaGFyZVJlcGxheSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVmlld0NvbnRleHRTZXJ2aWNlcyB9IGZyb20gJy4vdmlldy1jb250ZXh0LnNlcnZpY2UnO1xuaW1wb3J0IHsgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJy4uLy4uL2FwaSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb250ZXh0Um91dGVHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgcHJpdmF0ZSBjYWNoZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KSB7XG4gICAgY29uc3QgaWQgPSByb3V0ZS5wYXJhbU1hcC5nZXQoJ2lkJyk7XG4gICAgY29uc3Qgc2VydmljZSA9IHRoaXMuc2VydmljZShyb3V0ZSk7XG4gICAgdGhpcy5jbGVhckRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCk7XG4gICAgcmV0dXJuIHRoaXMuZGV0YWlsQ2FjaGVkKHNlcnZpY2UsIGlkKS5waXBlKFxuICAgICAgdGFwKGNvbnRleHREYXRhID0+IChyb3V0ZS5kYXRhID0geyAuLi5yb3V0ZS5kYXRhLCBjb250ZXh0RGF0YSB9KSksXG4gICAgICBtYXAoKCkgPT4gdHJ1ZSksXG4gICAgICBjYXRjaEVycm9yKGV4ID0+IG9mKGZhbHNlKSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXJ2aWNlKHJvdXRlKSB7XG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gVmlld0NvbnRleHRTZXJ2aWNlcy5jb250ZXh0VG9TZXJ2aWNlKHJvdXRlLmRhdGEuY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KHNlcnZpY2VJbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIGRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGVbaWRdO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBzZXJ2aWNlIGluc3RhbmNlb2YgSW52ZW50b3J5U2VydmljZSA/IHsgd2l0aENoaWxkcmVuOiBmYWxzZSB9IDogdW5kZWZpbmVkO1xuICAgICAgY2FjaGVkID0gZnJvbShzZXJ2aWNlLmRldGFpbChpZCwgcGFyYW1zKSkucGlwZShcbiAgICAgICAgbWFwKCh7IGRhdGEgfSkgPT4gZGF0YSksXG4gICAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgICApO1xuICAgICAgY2FjaGVbaWRdID0gY2FjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlOiBNYXA8YW55LCBhbnk+ID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBkZWxldGUgY2FjaGVbaWRdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZShzZXJ2aWNlKSB7XG4gICAgbGV0IGNhY2hlID0gdGhpcy5jYWNoZXMuZ2V0KHNlcnZpY2UpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgIGNhY2hlID0ge307XG4gICAgICB0aGlzLmNhY2hlcy5zZXQoc2VydmljZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbn1cbiJdfQ==