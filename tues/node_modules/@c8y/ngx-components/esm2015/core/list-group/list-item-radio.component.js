var ListItemRadioComponent_1;
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
let ListItemRadioComponent = ListItemRadioComponent_1 = class ListItemRadioComponent {
    /**
     * A component to display a radio button in a c8y-li. Use it with content projection. It
     * can be used standalone or with an ngModel.
     *
     * @example
     * ```html
     * <c8y-li>
     *   <c8y-li-radio></c8y-li-radio>
     * </c8y-li>
     * ```
     */
    constructor() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    /**
     * Resets the native radio element.
     */
    reset() {
        this.radio.nativeElement.checked = false;
    }
    /**
     * @ignore
     */
    ngOnChanges(changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    }
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    change(checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }
    /**
     * Registers an onChange event.
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers an onTouch event.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @ignore
     */
    writeValue(value) {
        this.model = value;
    }
};
tslib_1.__decorate([
    ViewChild('radio', { static: true })
], ListItemRadioComponent.prototype, "radio", void 0);
tslib_1.__decorate([
    Input()
], ListItemRadioComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Input()
], ListItemRadioComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input()
], ListItemRadioComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Output()
], ListItemRadioComponent.prototype, "onSelect", void 0);
tslib_1.__decorate([
    Input()
], ListItemRadioComponent.prototype, "value", void 0);
ListItemRadioComponent = ListItemRadioComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'c8y-list-item-radio, c8y-li-radio',
        template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
        host: {
            class: 'c8y-list__item__radio'
        },
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => ListItemRadioComponent_1)
            }
        ]
    })
], ListItemRadioComponent);
export { ListItemRadioComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBRU4sU0FBUyxFQUNULFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekU7Ozs7Ozs7Ozs7R0FVRztBQWVILElBQWEsc0JBQXNCLDhCQUFuQyxNQUFhLHNCQUFzQjtJQXpCbkM7Ozs7Ozs7Ozs7T0FVRztJQUNIO1FBbUJFOztXQUVHO1FBRUgsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQjs7V0FFRztRQUVILFNBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUN6Qjs7V0FFRztRQUVILGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFFSCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQXFFekMsQ0FBQztJQW5EQzs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxPQUFPO1FBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUFDLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVSxDQUFDLEtBQWM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUE7QUF6RnVDO0lBQXJDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7cURBQW1CO0FBS3hEO0lBREMsS0FBSyxFQUFFO3dEQUNTO0FBS2pCO0lBREMsS0FBSyxFQUFFO29EQUNpQjtBQUt6QjtJQURDLEtBQUssRUFBRTt3REFDa0I7QUFLMUI7SUFEQyxNQUFNLEVBQUU7d0RBQzhCO0FBSTlCO0lBQVIsS0FBSyxFQUFFO3FEQUFZO0FBNUJULHNCQUFzQjtJQWRsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUNBQW1DO1FBQzdDLHNSQUErQztRQUMvQyxJQUFJLEVBQUU7WUFDSixLQUFLLEVBQUUsdUJBQXVCO1NBQy9CO1FBQ0QsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBc0IsQ0FBQzthQUN0RDtTQUNGO0tBQ0YsQ0FBQztHQUNXLHNCQUFzQixDQTZGbEM7U0E3Rlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZCxcbiAgZm9yd2FyZFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB0byBkaXNwbGF5IGEgcmFkaW8gYnV0dG9uIGluIGEgYzh5LWxpLiBVc2UgaXQgd2l0aCBjb250ZW50IHByb2plY3Rpb24uIEl0XG4gKiBjYW4gYmUgdXNlZCBzdGFuZGFsb25lIG9yIHdpdGggYW4gbmdNb2RlbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1saT5cbiAqICAgPGM4eS1saS1yYWRpbz48L2M4eS1saS1yYWRpbz5cbiAqIDwvYzh5LWxpPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWl0ZW0tcmFkaW8sIGM4eS1saS1yYWRpbycsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LWl0ZW0tcmFkaW8uY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdjOHktbGlzdF9faXRlbV9fcmFkaW8nXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMaXN0SXRlbVJhZGlvQ29tcG9uZW50KVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMaXN0SXRlbVJhZGlvQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQFZpZXdDaGlsZCgncmFkaW8nLCB7IHN0YXRpYzogdHJ1ZSB9KSByYWRpbzogRWxlbWVudFJlZjtcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgcmFkaW8gaXMgc2VsZWN0ZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZWxlY3RlZCA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHJhZGlvICh1c2UgZGlmZmVyZW50IG5hbWVzIGZvciBkaWZmZXJlbnQgcmFkaW8gZ3JvdXBzKS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIG5hbWUgPSAnbGlzdF9pdGVtX3JhZGlvJztcbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgcmFkaW8gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAvKipcbiAgICogQW4gZXZlbnQgZW1pdHRlZCBhcyBzb29uIGFzIHRoZSByYWRpbyBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBvblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgQElucHV0KCkgdmFsdWU6IGFueTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG1vZGVsOiBhbnk7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgbmF0aXZlIHJhZGlvIGVsZW1lbnQuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLnJhZGlvLm5hdGl2ZUVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5zZWxlY3RlZCAmJiAhY2hhbmdlcy5zZWxlY3RlZC5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5vblNlbGVjdC5lbWl0KGNoYW5nZXMuc2VsZWN0ZWQuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIHJhZGlvIGlzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSBjaGVja2VkIFNob3VsZCBpdCBiZSBjaGVja2VkIG9yIG5vdD9cbiAgICovXG4gIGNoYW5nZShjaGVja2VkKSB7XG4gICAgdGhpcy5vblNlbGVjdC5lbWl0KGNoZWNrZWQpO1xuICAgIHRoaXMubW9kZWwgPSB0aGlzLnZhbHVlO1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMubW9kZWwpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vblRvdWNoZWQpIHtcbiAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhbiBvbkNoYW5nZSBldmVudC5cbiAgICovXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYW4gb25Ub3VjaCBldmVudC5cbiAgICovXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLm1vZGVsID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==