import * as tslib_1 from "tslib";
import { Component, ContentChild, ElementRef, ContentChildren, HostBinding, Input, Output, EventEmitter, QueryList } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, filter, tap, delay } from 'rxjs/operators';
import { ListItemActionComponent } from './list-item-action.component';
import { ListItemCollapseComponent } from './list-item-collapse.component';
import { ListItemFooterComponent } from './list-item-footer.component';
/**
 * A list item is a representation of an item inside a list and
 * can be used to compose different styles in a list (mainly in a
 * <c8y-group-list>-component but also in others like the
 * <c8y-typeahead>-component):
 *  - a list with a footer
 *  - a list with one or multiple actions
 *  - an icon
 *  - a checkbox or radio input
 *
 * The item can be composed via content projection. The following
 * example shows a radio list with an icon, two actions
 * and a footer:
 * ```html
 * <c8y-list-group>
 *   <c8y-li
 *     *c8yFor="
 *       let device of devices;
 *       let i = index;
 *     "
 *   >
 *     <c8y-li-radio (onSelect)="updateSelected($event, device)"></c8y-li-radio>
 *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
 *     {{ i + 1 }}. {{ device.name || '-' }}
 *     <c8y-li-footer>
 *       Device id: <a [routerLink]="['/device', device.id]">{{ device.id }}</a>
 *     </c8y-li-footer>
 *     <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *       Delete
 *     </c8y-li-action>
 *     <c8y-li-action (click)="(false)" icon="rocket">
 *       Launch to space
 *     </c8y-li-action>
 *   </c8y-li>
 * </c8y-list-group>
 * ```
 */
let ListItemComponent = class ListItemComponent {
    /**
     * @ignore
     */
    constructor(element) {
        this.element = element;
        /**
         * If set to true, the class "active" is added which
         * indicates that the current row is active.
         */
        this.active = false;
        /**
         * Indicates if the current list item is collapsed. You can trigger the collapsing from
         * any element event by toggling this value.
         *
         * @example
         * ```html
         * <c8y-li #li (click)="li.collapsed = !li.collapsed">
         *  Toggle
         *  <c8y-li-collapse>
         *    I can be toggled by clicking on the row.
         *  </c8y-li-collapse
         * </c8y-li>
         * ``
         */
        this.collapsed = true;
        /**
         * An event emitter which is triggered when the user collapses the content
         * via the chevron on the right.
         */
        this.collapsedChange = new EventEmitter();
        /**
         * @ignore
         */
        this.showFooter = false;
        /**
         * @ignore
         */
        this.showActions = false;
        /**
         * @ignore
         */
        this.showCollapse = false;
        /**
         * @ignore
         */
        this.dropdownUp = false;
        this.pulse$ = new Subject();
        this.destroy$ = new Subject();
        this.ACTION_ITEM_HEIGHT = 40;
    }
    /**
     * @ignore
     */
    ngOnInit() {
        this.pulse$
            .pipe(filter(apply => !!apply), tap(() => this.element.nativeElement.classList.remove('c8y-list--pulse')), delay(100), tap(() => this.element.nativeElement.classList.add('c8y-list--pulse')), takeUntil(this.destroy$))
            .subscribe();
    }
    /**
     * @ignore
     */
    ngAfterContentChecked() {
        this.actions = this.itemActions.toArray();
        this.showFooter = this.itemFooter != null;
        this.showActions = this.itemActions.length > 0;
        this.showCollapse = this.itemCollapse != null;
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * A helper function which helps to determine if the dropdown
     * should toggle up.
     */
    showDropdownUp() {
        const listItemRect = this.element.nativeElement.getBoundingClientRect();
        const dropdownTop = listItemRect.top;
        const dropdownHeightWithToggle = (1 + this.itemActions.length) * this.ACTION_ITEM_HEIGHT;
        const availableHeight = window.innerHeight;
        const dropdownDownFits = dropdownTop + dropdownHeightWithToggle <= availableHeight;
        this.dropdownUp = !dropdownDownFits;
    }
    /**
     * Toggles the collapse state and emits this state as
     * collapsedChange output as boolean.
     * @param $event Pass optional an event to stop propagation.
     */
    toggleCollapsed($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.collapsed = !this.collapsed;
        this.collapsedChange.emit(this.collapsed);
    }
    /**
     * Highlights the list-item. This method should be used to show the
     * user that something within this item was changed.
     */
    pulse() {
        this.pulse$.next(true);
    }
};
ListItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input(),
    HostBinding('class.active')
], ListItemComponent.prototype, "active", void 0);
tslib_1.__decorate([
    Input()
], ListItemComponent.prototype, "collapsed", void 0);
tslib_1.__decorate([
    Output()
], ListItemComponent.prototype, "collapsedChange", void 0);
tslib_1.__decorate([
    ContentChild(ListItemFooterComponent, { static: false })
], ListItemComponent.prototype, "itemFooter", void 0);
tslib_1.__decorate([
    ContentChildren(ListItemActionComponent)
], ListItemComponent.prototype, "itemActions", void 0);
tslib_1.__decorate([
    ContentChild(ListItemCollapseComponent, { static: false })
], ListItemComponent.prototype, "itemCollapse", void 0);
ListItemComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-list-item, c8y-li',
        template: "<div [ngClass]=\"{ 'expanded': !collapsed, interact: (itemCollapse && itemCollapse.collapseWay === 'row')}\">\n  <div class=\"c8y-list__item__block\">\n    <ng-content select=\"c8y-list-item-radio, c8y-li-radio\"></ng-content>\n    <ng-content select=\"c8y-list-item-checkbox, c8y-li-checkbox\"></ng-content>\n\n    <ng-content select=\"c8y-list-item-icon, c8y-li-icon\"></ng-content>\n\n    <div class=\"c8y-list__item__body text-truncate-wrap\" (click)=\"(itemCollapse && itemCollapse.collapseWay === 'row') && toggleCollapsed()\">\n      <ng-content select=\"c8y-list-item-body, c8y-li-body\"></ng-content>\n      <ng-content></ng-content>\n      <div class=\"c8y-list__item__footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"c8y-list-item-footer, c8y-li-footer\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"c8y-list__item__actions\" *ngIf=\"(showCollapse && (itemCollapse && itemCollapse.collapseWay === 'button')) || showActions\">\n      <button\n        class=\"collapse-btn\"\n        title=\"{{ 'Expand' | translate }}\"\n        type=\"button\"\n        (click)=\"toggleCollapsed($event)\"\n        [attr.aria-expanded]=\"!collapsed\"\n        *ngIf=\"showCollapse && itemCollapse.collapseWay === 'button'\"\n      >\n        <i [c8yIcon]=\"'chevron-down'\"></i>\n      </button>\n      <div\n        class=\"dropdown\"\n        dropdown\n        [dropup]=\"dropdownUp\"\n        *ngIf=\"showActions\"\n        (onShown)=\"showDropdownUp()\"\n      >\n        <button\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          title=\"{{ 'Actions' | translate }}\"\n          type=\"button\"\n          aria-haspopup=\"true\"\n        >\n          <i [c8yIcon]=\"'ellipsis-v'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-content select=\"c8y-list-item-action, c8y-li-action\"></ng-content>\n          <ng-container *ngFor=\"let action of actions\">\n            <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n\n      <ng-content select=\"c8y-list-item-action, c8y-li-action\" *ngIf=\"showActions\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"showCollapse\" [collapse]=\"collapsed\" [isAnimated]=\"true\">\n    <div class=\"c8y-list__item__collapse--container\">\n      <ng-content select=\"c8y-list-item-collapse, c8y-li-collapse\"></ng-content>\n    </div>\n  </div>\n</div>\n",
        host: {
            class: 'c8y-list__item'
        }
    })
], ListItemComponent);
export { ListItemComponent };
//# sourceMappingURL=data:application/json;base64,