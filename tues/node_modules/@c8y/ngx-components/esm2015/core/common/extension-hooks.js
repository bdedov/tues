import { NavigationEnd } from '@angular/router';
import { flatten, isFunction, sortBy } from 'lodash-es';
import { combineLatest, defer, from, isObservable, of, race } from 'rxjs';
import { filter, map, merge, startWith, switchMap } from 'rxjs/operators';
export function fromTrigger(router, refresh, factories) {
    return router.events.pipe(filter(evt => evt instanceof NavigationEnd), merge(refresh), startWith(1), switchMap(() => fromFactories(factories, router)));
}
export function fromFactories(factories, router, withFirstEmpty = true) {
    return !Array.isArray(factories) || factories.length < 1
        ? of([])
        : defer(() => {
            const factoryObservables = resolveInjectedFactories(factories).map(f => {
                return toObservable(Array.isArray(f) ? f : f && isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
            });
            return combineLatest(...factoryObservables);
        }).pipe(map(results => sortByPriority([].concat(...results))));
}
export function resolveInjectedFactories(factories) {
    return flatten(factories.map(f => (isFunction(f) ? f() : [f])));
}
export function stateToFactory(componentsState) {
    const components$ = componentsState.pipe(map((componentSet) => Array.from(componentSet)));
    return { get: () => components$ };
}
export function sortByPriority(items) {
    return sortBy(items, 'priority');
}
function toObservable(factoryResult, withFirstEmpty) {
    let observable;
    if (!factoryResult) {
        return of([]);
    }
    else if (typeof factoryResult.then === 'function' || isObservable(factoryResult)) {
        if (withFirstEmpty) {
            const forceObservable = from(factoryResult);
            const withEmptyFirst = forceObservable.pipe(startWith([]));
            observable = race(forceObservable, withEmptyFirst);
        }
        else {
            observable = from(factoryResult);
        }
    }
    else {
        observable = of(factoryResult);
    }
    return observable.pipe(map(result => (Array.isArray(result) ? result : [result]).filter(item => !!item)));
}
/**
 * Helper function to get the activated route in
 * a service (as ActivatedRoute injection only
 * works in components). Works as long as we only use
 * a tree and no child is active at the same time.
 *
 * @param router The current router
 */
export function getActivatedRoute(router) {
    if (router && router.routerState && router.routerState.root) {
        let route = router.routerState.root;
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
}
//# sourceMappingURL=data:application/json;base64,