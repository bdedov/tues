import * as tslib_1 from "tslib";
import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';
import { camelCase, isUndefined } from 'lodash-es';
import { ApplicationOptions } from './ApplicationOptions';
import { SystemOptionsService, TenantOptionsService } from '@c8y/ngx-components/api';
export const HOOK_OPTIONS = new InjectionToken('App options');
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
let OptionsService = class OptionsService extends ApplicationOptions {
    constructor(options, systemOptionsService, tenantOptionService) {
        super();
        this.systemOptionsService = systemOptionsService;
        this.tenantOptionService = tenantOptionService;
        this.setupOptions(options);
    }
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     */
    get(optionKey, defaultValue) {
        let value = this[optionKey];
        if (typeof value === 'undefined') {
            value = this[camelCase(optionKey)];
        }
        return typeof value !== 'undefined' ? value : defaultValue;
    }
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    set(key, value) {
        this[camelCase(key)] = value;
    }
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    getSupportUrl() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let url = yield this.getTenantOption('configuration', 'system.support.url');
            if (isUndefined(url)) {
                url = this.supportUrl;
            }
            this.supportUrl = isUndefined(url) ? (yield this.getSystemOption('support', 'url')) || false : url;
            return this.supportUrl;
        });
    }
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    getActivateSupportUser() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const option = yield this.getSystemOption('support-user', 'enabled', true);
            return !option;
        });
    }
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getSystemOption(category, key, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.systemOptionsService, defaultValue);
        });
    }
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    getTenantOption(category, key, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getOptionFromService(category, key, this.tenantOptionService, defaultValue);
        });
    }
    setupOptions(options) {
        if (options) {
            if (!Array.isArray(options)) {
                options = [options];
            }
            options.forEach(optionMap => {
                if (optionMap) {
                    Object.keys(optionMap).forEach(key => {
                        this[camelCase(key)] = optionMap[key];
                    });
                }
            });
        }
    }
    getOptionFromService(category, key, service, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield service.detail({ category, key });
                return this.parseOptionRawValue(data.value, defaultValue);
            }
            catch (ex) {
                return defaultValue;
            }
        });
    }
    parseOptionRawValue(rawValue, defaultValue) {
        let value;
        try {
            value = JSON.parse(rawValue);
        }
        catch (e) {
            value = isUndefined(rawValue) ? defaultValue : rawValue;
        }
        return value;
    }
};
OptionsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_OPTIONS,] }] },
    { type: SystemOptionsService },
    { type: TenantOptionsService }
];
OptionsService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(HOOK_OPTIONS))
], OptionsService);
export { OptionsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvY29tbW9uL29wdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVyRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQXVDLGFBQWEsQ0FBQyxDQUFDO0FBRXBHOzs7R0FHRztBQUVILElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWUsU0FBUSxrQkFBa0I7SUFFcEQsWUFDb0MsT0FBTyxFQUNqQyxvQkFBMEMsRUFDMUMsbUJBQXlDO1FBRWpELEtBQUssRUFBRSxDQUFDO1FBSEEseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBR2pELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxHQUFHLENBQUMsU0FBK0IsRUFBRSxZQUFrQjtRQUNyRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUIsSUFBSSxPQUFPLEtBQUssS0FBSyxXQUFXLEVBQUU7WUFDaEMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDLENBQUMs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LENBQUMsQ0FBQztTQUM5QjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsS0FBSyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDekQ7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFBOzs0Q0EvR0ksUUFBUSxZQUFJLE1BQU0sU0FBQyxZQUFZO1lBQ0Ysb0JBQW9CO1lBQ3JCLG9CQUFvQjs7QUFMeEMsY0FBYztJQUQxQixVQUFVLEVBQUU7SUFJUixtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtHQUh4QixjQUFjLENBa0gxQjtTQWxIWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNhbWVsQ2FzZSwgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25PcHRpb25zIH0gZnJvbSAnLi9BcHBsaWNhdGlvbk9wdGlvbnMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uRmFjdG9yeSB9IGZyb20gJy4vZXh0ZW5zaW9uLWhvb2tzJztcbmltcG9ydCB7IFN5c3RlbU9wdGlvbnNTZXJ2aWNlLCBUZW5hbnRPcHRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXBpJztcblxuZXhwb3J0IGNvbnN0IEhPT0tfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxFeHRlbnNpb25GYWN0b3J5PEFwcGxpY2F0aW9uT3B0aW9ucz4+KCdBcHAgb3B0aW9ucycpO1xuXG4vKipcbiAqIEEgc2VydmljZSB0aGF0IGFsbG93cyB0byBzZXQgb3IgZ2V0IGFwcGxpY2F0aW9uIG9wdGlvbnNcbiAqIHdoaWNoIGNvbmZpZ3VyZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgVUkuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcHRpb25zU2VydmljZSBleHRlbmRzIEFwcGxpY2F0aW9uT3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChIT09LX09QVElPTlMpIG9wdGlvbnMsXG4gICAgcHJpdmF0ZSBzeXN0ZW1PcHRpb25zU2VydmljZTogU3lzdGVtT3B0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSB0ZW5hbnRPcHRpb25TZXJ2aWNlOiBUZW5hbnRPcHRpb25zU2VydmljZVxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2V0dXBPcHRpb25zKG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXBwbGljYXRpb24gb3B0aW9uIHVzZWQgdG8gY29uZmlndXJlIHRoZSBVSS5cbiAgICogQHBhcmFtIG9wdGlvbktleSBUaGUgYXBwbGljYXRpb24gb3B0aW9ucyBrZXkuXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQSB2YWx1ZSB0byByZXR1cm4gaWYgbm9uIGlzIHNldC5cbiAgICovXG4gIGdldChvcHRpb25LZXk6IGtleW9mIE9wdGlvbnNTZXJ2aWNlLCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzW29wdGlvbktleV07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlID0gdGhpc1tjYW1lbENhc2Uob3B0aW9uS2V5KV07XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBhcHBsaWNhdGlvbiBvcHRpb24uXG4gICAqIEBwYXJhbSBrZXkgVGhlIGtleSB0byBzZXQuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgKi9cbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgdGhpc1tjYW1lbENhc2Uoa2V5KV0gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHN1cHBvcnQgdXJsIGZyb20gdGVuYW50IG9wdGlvbnMuXG4gICAqIElmIHJlc3BvbnNlIHJldHVybnMgJzQwNCBub3QgZm91bmQnIGl0IGdldHMgdGhlIHN1cHBvcnQgdXJsIGZyb20gYXBwbGljYXRpb24gb3B0aW9ucy5cbiAgICogSWYgdGhlIHN1cHBvcnQgbGluayB3aXRoaW4gYXBwbGljYXRpb24gb3B0aW9ucyBpcyBub3QgcHJvdmlkZWQgdGhlIFVJIHdpbGwgdXNlIHRoZSBzeXN0ZW0gb3B0aW9ucy5cbiAgICogSXMgdGhlIHN1cHBvcnQgbGluayBleHBsaWNpdGx5IHNldCB0byBmYWxzZSBpdCB3aWxsIGJlIGhpZGRlbi5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBzdXBwb3J0IHVybCBvciBmYWxzZS5cbiAgICovXG4gIGFzeW5jIGdldFN1cHBvcnRVcmwoKSB7XG4gICAgbGV0IHVybCA9IGF3YWl0IHRoaXMuZ2V0VGVuYW50T3B0aW9uKCdjb25maWd1cmF0aW9uJywgJ3N5c3RlbS5zdXBwb3J0LnVybCcpO1xuICAgIGlmIChpc1VuZGVmaW5lZCh1cmwpKSB7XG4gICAgICB1cmwgPSB0aGlzLnN1cHBvcnRVcmw7XG4gICAgfVxuICAgIHRoaXMuc3VwcG9ydFVybCA9IGlzVW5kZWZpbmVkKHVybCkgPyAoYXdhaXQgdGhpcy5nZXRTeXN0ZW1PcHRpb24oJ3N1cHBvcnQnLCAndXJsJykpIHx8IGZhbHNlIDogdXJsO1xuICAgIHJldHVybiB0aGlzLnN1cHBvcnRVcmw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpZiB0aGUgdGVuYW50IGFsbG93cyB0byBzaG93IHRoZSBhY3RpdmF0ZS1zdXBwb3J0IHVzZXIgbWVudSBlbnRyeS5cbiAgICogTm90ZTogT25seSBpZiBzeXN0ZW0tbGV2ZWwgc3VwcG9ydC11c2VyL2VuYWJsZWQgaXMgZmFsc2Ugd2UgY2FuIGFjdGl2YXRlIGl0IGF0IHRlbmFudCBsZXZlbC5cbiAgICovXG4gIGFzeW5jIGdldEFjdGl2YXRlU3VwcG9ydFVzZXIoKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gYXdhaXQgdGhpcy5nZXRTeXN0ZW1PcHRpb24oJ3N1cHBvcnQtdXNlcicsICdlbmFibGVkJywgdHJ1ZSk7XG4gICAgcmV0dXJuICFvcHRpb247XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHN5c3RlbSBzZXJ2aWNlIGFuZCBwYXJzZXMgaXQuXG4gICAqXG4gICAqIEBwYXJhbSBjYXRlZ29yeSBUaGUgY2F0ZWdvcnkgZm9yIHRoaXMgb3B0aW9uLlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgZm9yIHRoYXQgb3B0aW9uLlxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IGlmIHRoZSBvcHRpb24gd2FzIG5vdCBmb3VuZC5cbiAgICovXG4gIGFzeW5jIGdldFN5c3RlbU9wdGlvbihjYXRlZ29yeTogc3RyaW5nLCBrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9uRnJvbVNlcnZpY2UoY2F0ZWdvcnksIGtleSwgdGhpcy5zeXN0ZW1PcHRpb25zU2VydmljZSwgZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgdmFsdWUgZnJvbSB0aGUgdGVuYW50IHNlcnZpY2UgYW5kIHBhcnNlcyBpdC5cbiAgICpcbiAgICogQHBhcmFtIGNhdGVnb3J5IFRoZSBjYXRlZ29yeSBmb3IgdGhpcyBvcHRpb24uXG4gICAqIEBwYXJhbSBrZXkgVGhlIGtleSBmb3IgdGhhdCBvcHRpb24uXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgaWYgdGhlIG9wdGlvbiB3YXMgbm90IGZvdW5kLlxuICAgKi9cbiAgYXN5bmMgZ2V0VGVuYW50T3B0aW9uKGNhdGVnb3J5OiBzdHJpbmcsIGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRPcHRpb25Gcm9tU2VydmljZShjYXRlZ29yeSwga2V5LCB0aGlzLnRlbmFudE9wdGlvblNlcnZpY2UsIGRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwT3B0aW9ucyhvcHRpb25zOiBhbnlbXSB8IG51bGwpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBbb3B0aW9uc107XG4gICAgICB9XG4gICAgICBvcHRpb25zLmZvckVhY2gob3B0aW9uTWFwID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbk1hcCkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbk1hcCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpc1tjYW1lbENhc2Uoa2V5KV0gPSBvcHRpb25NYXBba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRPcHRpb25Gcm9tU2VydmljZShjYXRlZ29yeSwga2V5LCBzZXJ2aWNlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBzZXJ2aWNlLmRldGFpbCh7IGNhdGVnb3J5LCBrZXkgfSk7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU9wdGlvblJhd1ZhbHVlKGRhdGEudmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZU9wdGlvblJhd1ZhbHVlKHJhd1ZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHZhbHVlID0gSlNPTi5wYXJzZShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdmFsdWUgPSBpc1VuZGVmaW5lZChyYXdWYWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiByYXdWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iXX0=