import * as tslib_1 from "tslib";
import { Directive, Renderer2, Input, ElementRef } from '@angular/core';
/**
 * Allows to set a icon. Switches between c8y default icons
 * and font awesome icons
 * @example <i [c8yIcon]="'rocket'">
 */
let IconDirective = class IconDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.c8yMatch = /^c8y-/;
        this.klasses = [];
        this.currentClasses = '';
    }
    set c8yIcon(icon) {
        this.updateIcon(icon);
    }
    isC8y(icon) {
        return this.c8yMatch.test(icon);
    }
    getClasses(icon = '') {
        let classes = '';
        if (icon) {
            const _icon = icon.trim();
            const isC8y = this.isC8y(_icon);
            const iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : `fa-${_icon}`;
            classes = `${isC8y ? 'c8y-icon' : 'fa fw'} ${iconClass}`;
        }
        return classes;
    }
    updateIcon(icon) {
        const newClasses = this.getClasses(icon);
        if (newClasses !== this.currentClasses) {
            this.currentClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.removeClass(this.el.nativeElement, klass);
            });
            newClasses.split(/\s/).filter((c) => c).forEach((klass) => {
                this.renderer.addClass(this.el.nativeElement, klass);
            });
            this.currentClasses = newClasses;
        }
    }
};
IconDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input()
], IconDirective.prototype, "c8yIcon", null);
IconDirective = tslib_1.__decorate([
    Directive({
        selector: '[c8yIcon]',
    })
], IconDirective);
export { IconDirective };
export const ICONS = [
    'home',
    'th',
    'bar-chart-o',
    'tasks',
    'tachometer',
    'bell',
    'puzzle-piece',
    'map-marker',
    'location-arrow',
    'globe',
    'power-off',
    'desktop',
    'laptop',
    'mobile',
    'signal',
    'qrcode',
    'file',
    'file-text',
    'folder',
    'folder-open',
    'archive',
    'hdd-o',
    'book',
    'bookmark',
    'tag',
    'flag',
    'search',
    'heart',
    'star',
    'bolt',
    'rocket',
    'cog',
    'cogs',
    'wrench',
    'ban',
    'user',
    'users',
    'sign-in',
    'sign-out',
    'upload',
    'download',
    'cloud-upload',
    'cloud-download',
    'cloud',
    'spinner',
    'refresh',
    'repeat',
    'undo',
    'lock',
    'unlock',
    'info',
    'question',
    'exclamation',
    'bug',
    'calendar',
    'random',
    'asterisk',
    'key',
    'link',
    'chain-broken',
    'external-link',
    'picture-o',
    'comment',
    'bullhorn',
    'phone',
    'lightbulb-o',
    'flask',
    'sitemap',
    'exchange',
    'code-fork',
    'keyboard-o',
    'terminal',
    'code',
    'clipboard',
    'pencil',
    'envelope',
    'inbox',
    'reply',
    'share',
    'thumbs-up',
    'thumbs-down',
    'check',
    'plus',
    'expand',
    'compress',
    'arrows',
    'arrow-up',
    'arrow-down',
    'arrow-left',
    'arrow-right',
    'th-list',
    'bars',
    'table',
    'columns',
    'filter',
    'sort',
    'sort-up',
    'sort-down',
    'ellipsis-h',
    'ellipsis-v',
    'rss',
    'apple',
    'windows',
    'android',
    'linux'
];
//# sourceMappingURL=data:application/json;base64,