import * as tslib_1 from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ComponentFactory, ComponentFactoryResolver, Directive, EmbeddedViewRef, Input, SimpleChanges, TemplateRef, ViewContainerRef, ViewRef } from '@angular/core';
import { assign, get } from 'lodash-es';
import { isObservable, of, pipe, Subject } from 'rxjs';
import { map, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from './load-more.component';
/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 */
let ForOfDirective = class ForOfDirective {
    constructor(tpl, vcr, componentFactoryResolver) {
        this.tpl = tpl;
        this.vcr = vcr;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cachedData = [];
        this.loadMoreMode = 'auto';
        this.dataPipe = pipe(tap());
        this.maxIterations = 10;
        this.unsubscribe$ = new Subject();
    }
    get shouldUseLoadMoreButton() {
        return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
    }
    get hasMoreData() {
        return this.loadMore && this.loadMore.hasMore;
    }
    get length() {
        return this.cachedData.length;
    }
    /**
     * The data setter. Must be a response from @c8y/data or an observable.
     * You can pass an observable with null to explicitly clear the list.
     */
    set c8yForOf(fetchData) {
        if (fetchData) {
            this.obs$ = (isObservable(fetchData) ? fetchData : of(fetchData)).pipe(map(result => {
                if (result === null) {
                    this.paging = null;
                    return [];
                }
                const { paging, data } = result;
                this.paging = paging;
                return data;
            }));
        }
    }
    /**
     * The mode setter:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     */
    set c8yForLoadMore(type) {
        this.loadMoreMode = type;
    }
    /**
     * The pipe setter to attach any rxjs pipe to the current and more loaded data.
     */
    set c8yForPipe(dataPipe) {
        if (dataPipe) {
            this.dataPipe = dataPipe;
        }
    }
    /**
     * A template to use if no data is found at all (e.g. if you apply a filter pipe).
     */
    set c8yForNotFound(notFoundTemplate) {
        this.notFoundTemplate = notFoundTemplate;
        if (this.loadMore) {
            this.loadMore.noMoreDataHint = notFoundTemplate;
        }
    }
    /**
     * The maximum numbers of iterations to call data from the api.
     */
    set c8yForMaxIterations(maxIterations) {
        this.maxIterations = maxIterations;
    }
    /**
     * A RealtimeService instance.
     */
    set c8yForRealtime(source) {
        this.realtime = source;
    }
    /**
     * A comparator function for comparing list items. Used to determine
     * the position at which a new element should be added to the list.
     */
    set c8yForComparator(comparator) {
        this.comparator = comparator;
    }
    ngOnInit() {
        this.handleRealtime();
    }
    ngOnChanges(changes) {
        if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
            this.unsubscribePaging();
            // only re-rendering  on filtering if all data is already loaded
            // from the backend
            const reRender = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
            if (reRender) {
                this.obs$ = of(this.cachedData);
            }
            this.pagingSub = this.obs$
                .pipe(tap(data => {
                if (!reRender) {
                    this.cachedData = data;
                }
            }))
                .pipe(src => this.dataPipe(src))
                .subscribe((data) => {
                this.render(data, reRender);
            });
        }
    }
    ngOnDestroy() {
        this.unsubscribePaging();
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    handleRealtime() {
        if (this.realtime) {
            this.realtime
                .onCreate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(item => this.insert(item));
            this.realtime
                .onUpdate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(item => this.update(item));
            this.realtime
                .onDelete$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(id => this.remove(coerceNumberProperty(id)));
        }
    }
    render(data, reRender = false) {
        this.vcr.clear();
        data.forEach((item, index) => {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.vcr.createEmbeddedView(this.tpl, context);
        });
        if (this.shouldUseLoadMoreButton) {
            this.loadMore = this.createLoadMoreButtonComponent(reRender);
        }
    }
    append(data) {
        data.forEach(item => {
            const index = this.shouldUseLoadMoreButton ? this.vcr.length - 1 : this.vcr.length;
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.vcr.createEmbeddedView(this.tpl, context, index);
        });
    }
    loadMoreData(data) {
        if (data.length > 0) {
            this.append(data);
        }
    }
    createLoadMoreButtonComponent(reRender) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
        const componentRef = this.vcr.createComponent(componentFactory);
        const instance = componentRef.instance;
        instance.paging = this.paging;
        instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
        instance.hidden = this.loadMoreMode === 'hidden';
        instance.maxIterations = this.maxIterations;
        instance.noMoreDataHint = this.notFoundTemplate;
        this.pagingSub = instance.onLoad
            .pipe(map((data) => this.checkForDuplicates(data)), tap((data) => {
            this.cachedData = this.cachedData.concat(data);
        }))
            .pipe(src => this.dataPipe(src))
            .subscribe(data => this.loadMoreData(data));
        if (reRender) {
            assign(instance, this.loadMore);
        }
        return instance;
    }
    insert(item) {
        let index = 0;
        if (this.comparator && this.cachedData.length) {
            let comparisionResult;
            do {
                const view = this.vcr.get(index);
                const itemB = get(view, 'context.$implicit');
                comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                if (comparisionResult <= 0) {
                    index++;
                }
            } while (comparisionResult <= 0 && index < this.cachedData.length);
        }
        // Do not append elements after the last one currently loaded,
        // as it may belong further down there on the list and will
        // be eventually loaded with one of the next pages.
        if (index < this.cachedData.length || this.cachedData.length === 0) {
            const context = {
                $implicit: item,
                index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.cachedData.splice(index, 0, item);
            const viewRef = this.tpl.createEmbeddedView(context);
            this.vcr.insert(viewRef, index);
        }
    }
    update(updatedItem) {
        this.forMatchingEmbeddedViewRef((item) => item && updatedItem && item.id === updatedItem.id, (view) => {
            view.context.$implicit = updatedItem;
            view.markForCheck();
        });
    }
    remove(idToRemove) {
        this.forMatchingEmbeddedViewRef((item) => item && coerceNumberProperty(item.id, NaN) === idToRemove, (view) => view.destroy());
    }
    forMatchingEmbeddedViewRef(filter, callback) {
        for (let i = 0; i < this.vcr.length; i++) {
            const view = this.vcr.get(i);
            const item = get(view, 'context.$implicit');
            if (filter(item)) {
                callback(view);
            }
        }
    }
    checkForDuplicates(data) {
        return this.realtime
            ? data.filter(item => !this.cachedData.some(cached => cached.id === item.id))
            : data;
    }
    unsubscribePaging() {
        if (this.pagingSub) {
            this.pagingSub.unsubscribe();
        }
    }
};
ForOfDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForOf", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForLoadMore", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForPipe", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForNotFound", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForMaxIterations", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForRealtime", null);
tslib_1.__decorate([
    Input()
], ForOfDirective.prototype, "c8yForComparator", null);
ForOfDirective = tslib_1.__decorate([
    Directive({
        selector: '[c8yFor]'
    })
], ForOfDirective);
export { ForOfDirective };
//# sourceMappingURL=data:application/json;base64,