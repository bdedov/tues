import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash';
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
let HumanizeAppNamePipe = class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    transform(appNameOrApp = 'Cumulocity') {
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || appName;
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    }
};
HumanizeAppNamePipe.ctorParameters = () => [
    { type: TranslateService }
];
HumanizeAppNamePipe = tslib_1.__decorate([
    Pipe({ name: 'humanizeAppName' })
], HumanizeAppNamePipe);
export { HumanizeAppNamePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2NvbW1vbi9odW1hbml6ZS1hcHAtbmFtZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUd4RDs7OztFQUlFO0FBRUYsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFROUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFOOUMsaUJBQVksR0FBRztZQUNyQixjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtTQUN0QyxDQUFDO0lBRXVELENBQUM7SUFFMUQsU0FBUyxDQUFDLGVBQW9CLFlBQVk7UUFDeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5QyxJQUFJLElBQUksQ0FBQztRQUNULElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNsQyxJQUFJLEdBQUcsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNMLElBQUksR0FBRyxPQUFPLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sVUFBVSxDQUFDLFlBQVk7UUFDN0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUNuQyxHQUFHLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUN6QixHQUFHLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQztZQUNoQyxZQUFZO1NBQ2IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNULE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUM7SUFDL0MsQ0FBQztJQUVPLGVBQWUsQ0FBQyxNQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sV0FBVyxDQUFDLFlBQVk7UUFDOUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRixDQUFBOztZQTlCdUMsZ0JBQWdCOztBQVIzQyxtQkFBbUI7SUFEL0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7R0FDckIsbUJBQW1CLENBc0MvQjtTQXRDWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IGdldCwgZmluZCwgbmVnYXRlLCBpc1VuZGVmaW5lZCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBIdW1hbml6ZVBpcGUgfSBmcm9tICcuL2h1bWFuaXplLnBpcGUnO1xuXG4vKlxuICogSHVtYW5pemUgYW4gYXBwbGljYXRpb24gbmFtZSBhbmQgdHJhbnNsYXRlcyBpdC5cbiAqIFVzYWdlOlxuICogICBhcHBOYW1lT3JBcHAgfCBodW1hbml6ZUFwcE5hbWUgfCBhc3luY1xuKi9cbkBQaXBlKHsgbmFtZTogJ2h1bWFuaXplQXBwTmFtZScgfSlcbmV4cG9ydCBjbGFzcyBIdW1hbml6ZUFwcE5hbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgcHJpdmF0ZSBpbnRlcm5hbEFwcHMgPSB7XG4gICAgYWRtaW5pc3RyYXRpb246ICdBZG1pbmlzdHJhdGlvbicsXG4gICAgY29ja3BpdDogJ0NvY2twaXQnLFxuICAgIGRldmljZW1hbmFnZW1lbnQ6ICdEZXZpY2UgbWFuYWdlbWVudCdcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgdHJhbnNmb3JtKGFwcE5hbWVPckFwcDogYW55ID0gJ0N1bXVsb2NpdHknKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRBcHBOYW1lKGFwcE5hbWVPckFwcCk7XG5cbiAgICBsZXQgdGV4dDtcbiAgICBpZiAodGhpcy5pc1B1YmxpY0FwcChhcHBOYW1lT3JBcHApKSB7XG4gICAgICB0ZXh0ID0gZ2V0dGV4dCgne3sgYXBwTmFtZSB8IHRyYW5zbGF0ZSB9fSAocHVibGljKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gYXBwTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5zdHJlYW0odGV4dCwgeyBhcHBOYW1lIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBcHBOYW1lKGFwcE5hbWVPckFwcCkge1xuICAgIGNvbnN0IGFwcE5hbWUgPSB0aGlzLmdldEZpcnN0RGVmaW5lZChbXG4gICAgICBnZXQoYXBwTmFtZU9yQXBwLCAnbmFtZScpLFxuICAgICAgZ2V0KGFwcE5hbWVPckFwcCwgJ2NvbnRleHRQYXRoJyksXG4gICAgICBhcHBOYW1lT3JBcHBcbiAgICBdKSB8fCAnJztcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEFwcHNbYXBwTmFtZV0gfHwgYXBwTmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rmlyc3REZWZpbmVkKHZhbHVlcykge1xuICAgIHJldHVybiBmaW5kKHZhbHVlcywgbmVnYXRlKGlzVW5kZWZpbmVkKSk7XG4gIH1cblxuICBwcml2YXRlIGlzUHVibGljQXBwKGFwcE5hbWVPckFwcCkge1xuICAgIHJldHVybiBCb29sZWFuKGdldChhcHBOYW1lT3JBcHAsICdwdWJsaWMnKSk7XG4gIH1cbn1cbiJdfQ==