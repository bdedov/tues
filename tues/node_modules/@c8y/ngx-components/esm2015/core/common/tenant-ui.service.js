import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService, TenantService, IApplication } from '@c8y/client';
/** The helper UI service for tenant related methods built upon client services. */
let TenantUiService = class TenantUiService {
    constructor(tenantService, applicationService) {
        this.tenantService = tenantService;
        this.applicationService = applicationService;
    }
    /**
     * Checks whether current tenant is the management tenant.
     * @returns True if current tenant is the management tenant.
     */
    isManagementTenant() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            return currentTenant.name === 'management';
        });
    }
    /**
     * Checks whether current tenant is an enterprise tenant.
     * An enterprise tenant is a tenant which has subscribed:
     * - `branding` microservice or `feature-branding` feature app,
     * - `sslmanagement` microservice,
     * - `feature-user-hierarchy` feature app,
     * - `feature-broker` feature app.
     *
     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
     *
     * @returns True, if current tenant is an enterprise tenant.
     */
    isEnterpriseTenant() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const hasBranding = (yield this.hasApp({ name: 'branding' })) ||
                (yield this.hasApp({ name: 'feature-branding' }));
            const hasSslManagement = yield this.hasApp({ name: 'sslmanagement' });
            const hasUserHierarchy = yield this.hasApp({ name: 'feature-user-hierarchy' });
            const hasDataBroker = yield this.hasApp({ name: 'feature-broker' });
            return hasBranding && hasSslManagement && hasUserHierarchy && hasDataBroker;
        });
    }
    hasApp(app) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (yield this.applicationService.isAvailable(app)).data;
        });
    }
};
TenantUiService.ctorParameters = () => [
    { type: TenantService },
    { type: ApplicationService }
];
TenantUiService = tslib_1.__decorate([
    Injectable()
], TenantUiService);
export { TenantUiService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LXVpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9jb21tb24vdGVuYW50LXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUUsbUZBQW1GO0FBRW5GLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFDMUIsWUFDVSxhQUE0QixFQUM1QixrQkFBc0M7UUFEdEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUM3QyxDQUFDO0lBRUo7OztPQUdHO0lBQ0csa0JBQWtCOztZQUN0QixNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNoRSxPQUFPLGFBQWEsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDO1FBQzdDLENBQUM7S0FBQTtJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0csa0JBQWtCOztZQUN0QixNQUFNLFdBQVcsR0FDZixDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztZQUMvRSxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBRXBFLE9BQU8sV0FBVyxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixJQUFJLGFBQWEsQ0FBQztRQUM5RSxDQUFDO0tBQUE7SUFFYSxNQUFNLENBQUMsR0FBMEI7O1lBQzdDLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDL0QsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUF2QzBCLGFBQWE7WUFDUixrQkFBa0I7O0FBSHJDLGVBQWU7SUFEM0IsVUFBVSxFQUFFO0dBQ0EsZUFBZSxDQXlDM0I7U0F6Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSwgVGVuYW50U2VydmljZSwgSUFwcGxpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG4vKiogVGhlIGhlbHBlciBVSSBzZXJ2aWNlIGZvciB0ZW5hbnQgcmVsYXRlZCBtZXRob2RzIGJ1aWx0IHVwb24gY2xpZW50IHNlcnZpY2VzLiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRlbmFudFVpU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVuYW50U2VydmljZTogVGVuYW50U2VydmljZSxcbiAgICBwcml2YXRlIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgY3VycmVudCB0ZW5hbnQgaXMgdGhlIG1hbmFnZW1lbnQgdGVuYW50LlxuICAgKiBAcmV0dXJucyBUcnVlIGlmIGN1cnJlbnQgdGVuYW50IGlzIHRoZSBtYW5hZ2VtZW50IHRlbmFudC5cbiAgICovXG4gIGFzeW5jIGlzTWFuYWdlbWVudFRlbmFudCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBjdXJyZW50VGVuYW50ID0gKGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5jdXJyZW50KCkpLmRhdGE7XG4gICAgcmV0dXJuIGN1cnJlbnRUZW5hbnQubmFtZSA9PT0gJ21hbmFnZW1lbnQnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGN1cnJlbnQgdGVuYW50IGlzIGFuIGVudGVycHJpc2UgdGVuYW50LlxuICAgKiBBbiBlbnRlcnByaXNlIHRlbmFudCBpcyBhIHRlbmFudCB3aGljaCBoYXMgc3Vic2NyaWJlZDpcbiAgICogLSBgYnJhbmRpbmdgIG1pY3Jvc2VydmljZSBvciBgZmVhdHVyZS1icmFuZGluZ2AgZmVhdHVyZSBhcHAsXG4gICAqIC0gYHNzbG1hbmFnZW1lbnRgIG1pY3Jvc2VydmljZSxcbiAgICogLSBgZmVhdHVyZS11c2VyLWhpZXJhcmNoeWAgZmVhdHVyZSBhcHAsXG4gICAqIC0gYGZlYXR1cmUtYnJva2VyYCBmZWF0dXJlIGFwcC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vY3VtdWxvY2l0eS5jb20vZ3VpZGVzL3VzZXJzLWd1aWRlL2VudGVycHJpc2UtZWRpdGlvbi8gZm9yIGRldGFpbHMgYWJvdXQgc3VjaCB0ZW5hbnRzLlxuICAgKlxuICAgKiBAcmV0dXJucyBUcnVlLCBpZiBjdXJyZW50IHRlbmFudCBpcyBhbiBlbnRlcnByaXNlIHRlbmFudC5cbiAgICovXG4gIGFzeW5jIGlzRW50ZXJwcmlzZVRlbmFudCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBoYXNCcmFuZGluZyA9XG4gICAgICAoYXdhaXQgdGhpcy5oYXNBcHAoeyBuYW1lOiAnYnJhbmRpbmcnIH0pKSB8fFxuICAgICAgKGF3YWl0IHRoaXMuaGFzQXBwKHsgbmFtZTogJ2ZlYXR1cmUtYnJhbmRpbmcnIH0pKTtcbiAgICBjb25zdCBoYXNTc2xNYW5hZ2VtZW50ID0gYXdhaXQgdGhpcy5oYXNBcHAoeyBuYW1lOiAnc3NsbWFuYWdlbWVudCcgfSk7XG4gICAgY29uc3QgaGFzVXNlckhpZXJhcmNoeSA9IGF3YWl0IHRoaXMuaGFzQXBwKHsgbmFtZTogJ2ZlYXR1cmUtdXNlci1oaWVyYXJjaHknIH0pO1xuICAgIGNvbnN0IGhhc0RhdGFCcm9rZXIgPSBhd2FpdCB0aGlzLmhhc0FwcCh7IG5hbWU6ICdmZWF0dXJlLWJyb2tlcicgfSk7XG5cbiAgICByZXR1cm4gaGFzQnJhbmRpbmcgJiYgaGFzU3NsTWFuYWdlbWVudCAmJiBoYXNVc2VySGllcmFyY2h5ICYmIGhhc0RhdGFCcm9rZXI7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhc0FwcChhcHA6IFBhcnRpYWw8SUFwcGxpY2F0aW9uPik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5hcHBsaWNhdGlvblNlcnZpY2UuaXNBdmFpbGFibGUoYXBwKSkuZGF0YTtcbiAgfVxufVxuIl19