import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ITotp, UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n';
let TotpSetupComponent = class TotpSetupComponent {
    constructor(user, alert) {
        this.user = user;
        this.alert = alert;
    }
    get qrCodeImage() {
        return this.totpSecret ? this.totpSecret.secretQrUrl : '';
    }
    get secret() {
        return this.totpSecret ? this.totpSecret.rawSecret : '';
    }
    get qrData() {
        // TODO: waiting for BE:, now we need extract it from secretQrUrl
        // https://cumulocity.atlassian.net/browse/MTM-36387
        // return this.totpSecret ? this.totpSecret.qrData : '';
        const otpAuth = this.qrCodeImage.split('chl=')[1];
        if (!otpAuth) {
            this.alert.danger(gettext('Failed to generate a QR code.'));
            return '';
        }
        return decodeURIComponent(otpAuth);
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.user.generateTotpSecret();
                this.totpSecret = data;
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
        });
    }
};
TotpSetupComponent.ctorParameters = () => [
    { type: UserService },
    { type: AlertService }
];
TotpSetupComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-totp-setup',
        template: "<div class=\"text-center\">\n  <p\n    class=\"lead bottom-m-md\"\n    translate\n  >\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n\n  <qrcode\n    *ngIf=\"totpSecret\"\n    [width]=\"300\"\n    [qrdata]=\"qrData\"\n    [cssClass]=\"'bottom-m-md'\"\n    [errorCorrectionLevel]=\"'M'\"\n  ></qrcode>\n  <p class=\"text-center text-muted\">\n    {{secret}}\n  </p>\n</div>\n"
    })
], TotpSetupComponent);
export { TotpSetupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1zZXR1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi90b3RwLXNldHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQU1sQyxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQXVCN0IsWUFBb0IsSUFBaUIsRUFBVSxLQUFtQjtRQUE5QyxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBYztJQUFHLENBQUM7SUFwQnRFLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixpRUFBaUU7UUFDakUsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQztZQUM1RCxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBSUssUUFBUTs7WUFDWixJQUFJO2dCQUNGLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7YUFDeEI7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUFWMkIsV0FBVztZQUFpQixZQUFZOztBQXZCdkQsa0JBQWtCO0lBSjlCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxnQkFBZ0I7UUFDMUIsOGFBQTBDO0tBQzNDLENBQUM7R0FDVyxrQkFBa0IsQ0FpQzlCO1NBakNZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJVG90cCwgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXRvdHAtc2V0dXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vdG90cC1zZXR1cC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVG90cFNldHVwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgdG90cFNlY3JldDogSVRvdHA7XG5cbiAgZ2V0IHFyQ29kZUltYWdlKCkge1xuICAgIHJldHVybiB0aGlzLnRvdHBTZWNyZXQgPyB0aGlzLnRvdHBTZWNyZXQuc2VjcmV0UXJVcmwgOiAnJztcbiAgfVxuXG4gIGdldCBzZWNyZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMudG90cFNlY3JldCA/IHRoaXMudG90cFNlY3JldC5yYXdTZWNyZXQgOiAnJztcbiAgfVxuXG4gIGdldCBxckRhdGEoKSB7XG4gICAgLy8gVE9ETzogd2FpdGluZyBmb3IgQkU6LCBub3cgd2UgbmVlZCBleHRyYWN0IGl0IGZyb20gc2VjcmV0UXJVcmxcbiAgICAvLyBodHRwczovL2N1bXVsb2NpdHkuYXRsYXNzaWFuLm5ldC9icm93c2UvTVRNLTM2Mzg3XG4gICAgLy8gcmV0dXJuIHRoaXMudG90cFNlY3JldCA/IHRoaXMudG90cFNlY3JldC5xckRhdGEgOiAnJztcbiAgICBjb25zdCBvdHBBdXRoID0gdGhpcy5xckNvZGVJbWFnZS5zcGxpdCgnY2hsPScpWzFdO1xuICAgIGlmICghb3RwQXV0aCkge1xuICAgICAgdGhpcy5hbGVydC5kYW5nZXIoZ2V0dGV4dCgnRmFpbGVkIHRvIGdlbmVyYXRlIGEgUVIgY29kZS4nKSk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQob3RwQXV0aCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXI6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2UpIHt9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy51c2VyLmdlbmVyYXRlVG90cFNlY3JldCgpO1xuICAgICAgdGhpcy50b3RwU2VjcmV0ID0gZGF0YTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==