import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { UserService, ICredentials } from '@c8y/client';
import { LoginService } from '../login/login.service';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
let SmsChallengeComponent = class SmsChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.model = {
            smsToken: ''
        };
        this.isLoading = false;
        this.resendTfa = '0';
    }
    verifyTFACode() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            if (this.useOAuthInternal()) {
                yield this.verifyCodeWithOauth();
            }
            else {
                yield this.verifyCodeWithBasicAuth();
            }
            this.isLoading = false;
        });
    }
    resendTFASms() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                yield this.users.verifyTFACode(this.resendTfa);
            }
            catch (e) {
                if (e.res.status === 403) {
                    this.loginService.cleanMessages();
                    this.loginService.addSuccessMessage('resend_sms');
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    useOAuthInternal() {
        return this.loginService.isPasswordGrantLogin(this.credentials);
    }
    verifyCodeWithOauth() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { credentials } = this;
                yield this.loginService.switchLoginMode(Object.assign({}, credentials, { tfa: this.model.smsToken }));
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                if (resStatus === 401) {
                    // it is assumed that the user and password are correct so it must be the tfa code
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    verifyCodeWithBasicAuth() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { res } = yield this.users.verifyTFACode(this.model.smsToken);
                const tfaToken = res.headers.get('tfatoken');
                this.credentials.tfa = tfaToken;
                this.loginWithTFA(tfaToken);
            }
            catch (e) {
                const resStatus = e.res && e.res.status;
                // BE returns 403 in case of invalid tfa code
                if (resStatus === 403) {
                    this.alert.danger(gettext('Invalid code'));
                }
                else {
                    this.alert.addServerFailure(e);
                }
            }
        });
    }
    loginWithTFA(tfaToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials);
                this.loginService.saveTFAToken(tfaToken, sessionStorage);
                if (this.loginService.rememberMe) {
                    this.loginService.saveTFAToken(tfaToken, localStorage);
                }
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
        });
    }
};
SmsChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], SmsChallengeComponent.prototype, "credentials", void 0);
tslib_1.__decorate([
    Output()
], SmsChallengeComponent.prototype, "onCancel", void 0);
SmsChallengeComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-sms-challenge',
        template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Insert the code received via SMS</div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Verification code' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"top-m-sm\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"btn btn-link btn-sm pull-right\"\n      (click)=\"onCancel.emit()\"\n      translate\n      >Login</a\n    >\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"resendTFASms()\"\n      translate\n      >Send new code</a\n    >\n  </div>\n</form>\n"
    })
], SmsChallengeComponent);
export { SmsChallengeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21zLWNoYWxsZW5nZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9zbXMtY2hhbGxlbmdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVExQyxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQVloQyxZQUNTLFlBQTBCLEVBQ3pCLEtBQWtCLEVBQ2xCLEtBQW1CO1FBRnBCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ3pCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQVpuQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QyxVQUFLLEdBQUc7WUFDTixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7UUFDRixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBRVYsY0FBUyxHQUFXLEdBQUcsQ0FBQztJQU03QixDQUFDO0lBRUUsYUFBYTs7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDM0IsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzthQUNsQztpQkFBTTtnQkFDTCxNQUFNLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2FB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QyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDakcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFO29CQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7aUJBQ3hEO2FBQ0Y7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUFoRndCLFlBQVk7WUFDbEIsV0FBVztZQUNYLFlBQVk7O0FBYnBCO0lBQVIsS0FBSyxFQUFFOzBEQUEyQjtBQUN6QjtJQUFULE1BQU0sRUFBRTt1REFBK0I7QUFIN0IscUJBQXFCO0lBTmpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsMndDQUE2QztLQUU5QyxDQUFDO0dBRVcscUJBQXFCLENBNkZqQztTQTdGWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UsIElDcmVkZW50aWFscyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWxlcnQvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNtcy1jaGFsbGVuZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vc21zLWNoYWxsZW5nZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5cbmV4cG9ydCBjbGFzcyBTbXNDaGFsbGVuZ2VDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpIGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHM7XG4gIEBPdXRwdXQoKSBvbkNhbmNlbCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBtb2RlbCA9IHtcbiAgICBzbXNUb2tlbjogJydcbiAgfTtcbiAgaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSByZXNlbmRUZmE6IHN0cmluZyA9ICcwJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSB1c2VyczogVXNlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyB2ZXJpZnlURkFDb2RlKCkge1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICBpZiAodGhpcy51c2VPQXV0aEludGVybmFsKCkpIHtcbiAgICAgIGF3YWl0IHRoaXMudmVyaWZ5Q29kZVdpdGhPYXV0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLnZlcmlmeUNvZGVXaXRoQmFzaWNBdXRoKCk7XG4gICAgfVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gIH1cblxuICBhc3luYyByZXNlbmRURkFTbXMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIGF3YWl0IHRoaXMudXNlcnMudmVyaWZ5VEZBQ29kZSh0aGlzLnJlc2VuZFRmYSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUucmVzLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgIHRoaXMubG9naW5TZXJ2aWNlLmNsZWFuTWVzc2FnZXMoKTtcbiAgICAgICAgdGhpcy5sb2dpblNlcnZpY2UuYWRkU3VjY2Vzc01lc3NhZ2UoJ3Jlc2VuZF9zbXMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVzZU9BdXRoSW50ZXJuYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5TZXJ2aWNlLmlzUGFzc3dvcmRHcmFudExvZ2luKHRoaXMuY3JlZGVudGlhbHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB2ZXJpZnlDb2RlV2l0aE9hdXRoKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSB0aGlzO1xuICAgICAgYXdhaXQgdGhpcy5sb2dpblNlcnZpY2Uuc3dpdGNoTG9naW5Nb2RlKHsuLi5jcmVkZW50aWFscywgdGZhOiB0aGlzLm1vZGVsLnNtc1Rva2VufSk7XG4gICAgICBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS52ZXJpZnlBcHBBY2Nlc3MoKTtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLmF1dGhGdWxmaWxsZWQoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCByZXNTdGF0dXMgPSBlLnJlcyAmJiBlLnJlcy5zdGF0dXM7XG4gICAgICBpZiAocmVzU3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgLy8gaXQgaXMgYXNzdW1lZCB0aGF0IHRoZSB1c2VyIGFuZCBwYXNzd29yZCBhcmUgY29ycmVjdCBzbyBpdCBtdXN0IGJlIHRoZSB0ZmEgY29kZVxuICAgICAgICB0aGlzLmFsZXJ0LmRhbmdlcihnZXR0ZXh0KCdJbnZhbGlkIGNvZGUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB2ZXJpZnlDb2RlV2l0aEJhc2ljQXV0aCgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyByZXMgfSA9IGF3YWl0IHRoaXMudXNlcnMudmVyaWZ5VEZBQ29kZSh0aGlzLm1vZGVsLnNtc1Rva2VuKTtcbiAgICAgIGNvbnN0IHRmYVRva2VuID0gcmVzLmhlYWRlcnMuZ2V0KCd0ZmF0b2tlbicpO1xuICAgICAgdGhpcy5jcmVkZW50aWFscy50ZmEgPSB0ZmFUb2tlbjtcbiAgICAgIHRoaXMubG9naW5XaXRoVEZBKHRmYVRva2VuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCByZXNTdGF0dXMgPSBlLnJlcyAmJiBlLnJlcy5zdGF0dXM7XG4gICAgICAvLyBCRSByZXR1cm5zIDQwMyBpbiBjYXNlIG9mIGludmFsaWQgdGZhIGNvZGVcbiAgICAgIGlmIChyZXNTdGF0dXMgPT09IDQwMykge1xuICAgICAgICB0aGlzLmFsZXJ0LmRhbmdlcihnZXR0ZXh0KCdJbnZhbGlkIGNvZGUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2dpbldpdGhURkEodGZhVG9rZW4pIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UubG9naW4odGhpcy5sb2dpblNlcnZpY2UudXNlQmFzaWNBdXRoKHt0ZmE6IHRmYVRva2VufSksIHRoaXMuY3JlZGVudGlhbHMpO1xuICAgICAgdGhpcy5sb2dpblNlcnZpY2Uuc2F2ZVRGQVRva2VuKHRmYVRva2VuLCBzZXNzaW9uU3RvcmFnZSk7XG4gICAgICBpZiAodGhpcy5sb2dpblNlcnZpY2UucmVtZW1iZXJNZSkge1xuICAgICAgICB0aGlzLmxvZ2luU2VydmljZS5zYXZlVEZBVG9rZW4odGZhVG9rZW4sIGxvY2FsU3RvcmFnZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGUpO1xuICAgIH1cbiAgfVxufVxuIl19