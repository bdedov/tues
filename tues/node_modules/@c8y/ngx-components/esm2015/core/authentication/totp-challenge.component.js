import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { LoginService } from '../login/login.service';
import { UserService, ICredentials } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
let TotpChallengeComponent = class TotpChallengeComponent {
    constructor(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        /**
         * Calls the verify endpoint if set to true (default true)
         */
        this.verify = true;
        /**
         * Emits the token on success.
         */
        this.onSuccess = new EventEmitter();
        this.model = {
            token: ''
        };
        this.loading = false;
        this.hasError = false;
    }
    verifyCode() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                if (this.verify) {
                    yield this.users.verifyTotpCode(this.model.token);
                }
                this.onSuccess.emit(this.model.token);
            }
            catch (e) {
                this.hasError = true;
                this.alert.removeLastDanger();
                this.loading = false;
            }
        });
    }
};
TotpChallengeComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], TotpChallengeComponent.prototype, "verify", void 0);
tslib_1.__decorate([
    Output()
], TotpChallengeComponent.prototype, "onSuccess", void 0);
tslib_1.__decorate([
    Input()
], TotpChallengeComponent.prototype, "loading", void 0);
tslib_1.__decorate([
    Input()
], TotpChallengeComponent.prototype, "hasError", void 0);
TotpChallengeComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-totp-challenge',
        template: "<form\n  #totpForm=\"ngForm\"\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"verifyCode()\"\n  novalidate\n>\n\n  <c8y-form-group\n    [hasError]=\"hasError\"\n    [novalidation]=\"true\"\n  >\n    <label\n      translate\n      for=\"totpToken\"\n    >Verification code</label>\n    <input\n      id=\"totpToken\"\n      [(ngModel)]=\"model.token\"\n      name=\"totpToken\"\n      type=\"text\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      autocomplete=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{'Verification code' | translate}}\"\n      required\n    >\n    <c8y-messages>\n      <c8y-message *ngIf=\"hasError\" translate>\n        Invalid verification code. In case of key loss, please contact your platform administrator.\n      </c8y-message>\n    </c8y-messages>\n    <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n      In case of key loss, please contact your platform administrator.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\" \n    [disabled]=\"!totpForm.form.valid || loading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >Verify</button>\n\n</form>\n",
        viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
    })
], TotpChallengeComponent);
export { TotpChallengeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1jaGFsbGVuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYXV0aGVudGljYXRpb24vdG90cC1jaGFsbGVuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBU3RELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBa0JqQyxZQUNTLFlBQTBCLEVBQ3pCLEtBQWtCLEVBQ2xCLEtBQW1CO1FBRnBCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ3pCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQXBCN0I7O1dBRUc7UUFDTSxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCOztXQUVHO1FBQ08sY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFekMsVUFBSyxHQUFHO1lBQ04sS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDO1FBRUYsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVoQixhQUFRLEdBQUcsS0FBSyxDQUFDO0lBTWQsQ0FBQztJQUVFLFVBQVU7O1lBQ2QsSUFBSTtnQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDZixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25EO2dCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN0QjtRQUNILENBQUM7S0FBQTtDQUNGLENBQUE7O1lBbkJ3QixZQUFZO1lBQ2xCLFdBQVc7WUFDWCxZQUFZOztBQWpCcEI7SUFBUixLQUFLLEVBQUU7c0RBQWU7QUFJYjtJQUFULE1BQU0sRUFBRTt5REFBZ0M7QUFNekM7SUFEQyxLQUFLLEVBQUU7dURBQ1E7QUFFaEI7SUFEQyxLQUFLLEVBQUU7d0RBQ1M7QUFoQk4sc0JBQXNCO0lBTmxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsNHRDQUE4QztRQUM5QyxhQUFhLEVBQUUsQ0FBRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUU7S0FDdEUsQ0FBQztHQUVXLHNCQUFzQixDQXNDbEM7U0F0Q1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5ld1Bhc3N3b3JkIH0gZnJvbSAnLi9wYXNzd29yZC5tb2RlbCc7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlLCBJQ3JlZGVudGlhbHMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luVmlld3MgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS10b3RwLWNoYWxsZW5nZScsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLWNoYWxsZW5nZS5jb21wb25lbnQuaHRtbCcsXG4gIHZpZXdQcm92aWRlcnM6IFsgeyBwcm92aWRlOiBDb250cm9sQ29udGFpbmVyLCB1c2VFeGlzdGluZzogTmdGb3JtIH0gXVxufSlcblxuZXhwb3J0IGNsYXNzIFRvdHBDaGFsbGVuZ2VDb21wb25lbnQge1xuICAvKipcbiAgICogQ2FsbHMgdGhlIHZlcmlmeSBlbmRwb2ludCBpZiBzZXQgdG8gdHJ1ZSAoZGVmYXVsdCB0cnVlKVxuICAgKi9cbiAgQElucHV0KCkgdmVyaWZ5ID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEVtaXRzIHRoZSB0b2tlbiBvbiBzdWNjZXNzLlxuICAgKi9cbiAgQE91dHB1dCgpIG9uU3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBtb2RlbCA9IHtcbiAgICB0b2tlbjogJydcbiAgfTtcbiAgQElucHV0KClcbiAgbG9hZGluZyA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBoYXNFcnJvciA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHVzZXJzOiBVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHZlcmlmeUNvZGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy52ZXJpZnkpIHtcbiAgICAgICAgYXdhaXQgdGhpcy51c2Vycy52ZXJpZnlUb3RwQ29kZSh0aGlzLm1vZGVsLnRva2VuKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub25TdWNjZXNzLmVtaXQodGhpcy5tb2RlbC50b2tlbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICB0aGlzLmFsZXJ0LnJlbW92ZUxhc3REYW5nZXIoKTtcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19