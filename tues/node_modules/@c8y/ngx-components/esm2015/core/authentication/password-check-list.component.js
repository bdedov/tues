import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
let PasswordCheckListComponent = class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (e.g. abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (e.g. ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (e.g. 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (e.g. !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: (password) => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.minGreenLength = yield this.loginService.getGreenMinLength();
            if (!this.minGreenLength) {
                this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
            }
        });
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, (requirement) => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
};
PasswordCheckListComponent.ctorParameters = () => [
    { type: LoginService },
    { type: PasswordService },
    { type: PasswordService }
];
tslib_1.__decorate([
    Input('password')
], PasswordCheckListComponent.prototype, "password", null);
PasswordCheckListComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-password-check-list',
        template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
    })
], PasswordCheckListComponent);
export { PasswordCheckListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFRMUMsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUE2Q3JDLFlBQ1MsWUFBMEIsRUFDekIsdUJBQXdDLEVBQ3hDLGVBQWdDO1FBRmpDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ3pCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBaUI7UUFDeEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBdkMxQyxtQkFBYyxHQUFXLENBQUMsQ0FBQztRQUUzQixjQUFTLEdBQUc7WUFDVjtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLDRDQUE0QyxDQUFDO2dCQUM1RCxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVk7Z0JBQ2hELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBRXBCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQztnQkFDNUQsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO2dCQUNoRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsK0JBQStCLENBQUM7Z0JBQy9DLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVTtnQkFDOUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLCtCQUErQixDQUFDO2dCQUMvQyxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGVBQWU7Z0JBQ25ELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQztnQkFDMUQsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjO2dCQUMzRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtTQUNGLENBQUM7SUFNRSxDQUFDO0lBOUNMLElBQUksUUFBUSxDQUFDLFFBQWdCO1FBQzNCLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUE0Q0ssUUFBUTs7WUFDWixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsMkJBQTJCLEVBQUUsQ0FBQzthQUMxRTtRQUNILENBQUM7S0FBQTtJQUVELElBQUksZUFBZTtRQUNqQixPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBUTtRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDbkQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25DLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTthQUM3QyxDQUFDLENBQUM7WUFDSCxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQTVCd0IsWUFBWTtZQUNBLGVBQWU7WUFDdkIsZUFBZTs7QUE3QzFDO0lBREMsS0FBSyxDQUFDLFVBQVUsQ0FBQzswREFLakI7QUFQVSwwQkFBMEI7SUFOdEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHlCQUF5QjtRQUNuQyw4ZUFBbUQ7S0FFcEQsQ0FBQztHQUVXLDBCQUEwQixDQTBFdEM7U0ExRVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQYXNzd29yZFNlcnZpY2UgfSBmcm9tICcuL3Bhc3N3b3JkLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBhc3NpZ24sIG1hcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXBhc3N3b3JkLWNoZWNrLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW11cbn0pXG5cbmV4cG9ydCBjbGFzcyBQYXNzd29yZENoZWNrTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCdwYXNzd29yZCcpXG4gIHNldCBwYXNzd29yZChwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMub25QYXNzd29yZENoYW5nZShwYXNzd29yZCk7XG4gICAgfVxuICB9XG5cbiAgbWluR3JlZW5MZW5ndGg6IG51bWJlciA9IDA7XG5cbiAgY2hlY2tsaXN0ID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIGxvd2VyY2FzZSBjaGFyYWN0ZXJzIChlLmcuIGFiY2RlZiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc0xvd2VyQ2FzZSxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSB1cHBlcmNhc2UgY2hhcmFjdGVycyAoZS5nLiBBQkNERUYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNVcHBlckNhc2UsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIG51bWJlcnMgKGUuZy4gMTIzNDU2KScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTnVtYmVycyxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgc3ltYm9scyAoZS5nLiAhQCMkJV4pJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNTcGVjaWFsQ2hhcnMsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdNdXN0IGhhdmUgYXQgbGVhc3Qge3tsZW5ndGh9fSBjaGFyYWN0ZXJzJyksXG4gICAgICBjaGVjazogKHBhc3N3b3JkKSA9PiBwYXNzd29yZC5sZW5ndGggPj0gdGhpcy5taW5HcmVlbkxlbmd0aCxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH1cbiAgXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwYXNzd29yZFN0cmVuZ3RoQ2hlY2tlcjogUGFzc3dvcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGFzc3dvcmRTZXJ2aWNlOiBQYXNzd29yZFNlcnZpY2VcbiAgKSB7IH1cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1pbkdyZWVuTGVuZ3RoID0gYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuZ2V0R3JlZW5NaW5MZW5ndGgoKTtcbiAgICBpZiAoIXRoaXMubWluR3JlZW5MZW5ndGgpIHtcbiAgICAgIHRoaXMubWluR3JlZW5MZW5ndGggPSB0aGlzLnBhc3N3b3JkU2VydmljZS5nZXREZWZhdWx0UGFzc3dvcmRNaW5MZW5ndGgoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdHJhbnNsYXRlUGFyYW1zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZW5ndGg6IHRoaXMubWluR3JlZW5MZW5ndGhcbiAgICB9O1xuICB9XG5cbiAgb25QYXNzd29yZENoYW5nZShwYXNzd29yZCkge1xuICAgIHRoaXMuY2hlY2tsaXN0ID0gbWFwKHRoaXMuY2hlY2tsaXN0LCAocmVxdWlyZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSByZXF1aXJlbWVudC5jaGVjayhwYXNzd29yZCk7XG4gICAgICBhc3NpZ24ocmVxdWlyZW1lbnQsIHtcbiAgICAgICAgaWNvbjogY2hlY2tlZCA/ICdjaGVjay1jaXJjbGUnIDogJycsXG4gICAgICAgIGNvbnRleHR1YWxDb2xvcjogY2hlY2tlZCA/ICcnIDogJ3RleHQtbXV0ZWQnXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXF1aXJlbWVudDtcbiAgICB9KTtcbiAgfVxufVxuIl19