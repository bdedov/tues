var PasswordConfirm_1;
import * as tslib_1 from "tslib";
import { Directive, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
let PasswordConfirm = PasswordConfirm_1 = class PasswordConfirm {
    constructor(passwordConfirm) {
        this.passwordConfirm = passwordConfirm;
    }
    validate(abControl) {
        const value = abControl.value;
        const controlToCompareWith = abControl.root.get(this.passwordConfirm);
        if (controlToCompareWith && value !== controlToCompareWith.value) {
            return { passwordConfirm: true };
        }
        return null;
    }
};
PasswordConfirm.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['passwordConfirm',] }] }
];
PasswordConfirm = PasswordConfirm_1 = tslib_1.__decorate([
    Directive({
        selector: '[passwordConfirm]',
        providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: PasswordConfirm_1,
                multi: true
            }
        ]
    }),
    tslib_1.__param(0, Attribute('passwordConfirm'))
], PasswordConfirm);
export { PasswordConfirm };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jb25maXJtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxhQUFhLEVBQThCLE1BQU0sZ0JBQWdCLENBQUM7QUFhM0UsSUFBYSxlQUFlLHVCQUE1QixNQUFhLGVBQWU7SUFFMUIsWUFBaUQsZUFBdUI7UUFBdkIsb0JBQWUsR0FBZixlQUFlLENBQVE7SUFDeEUsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUEwQjtRQUNqQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3RFLElBQUksb0JBQW9CLElBQUksS0FBSyxLQUFLLG9CQUFvQixDQUFDLEtBQUssRUFBRTtZQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2xDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTs7eUNBWGMsU0FBUyxTQUFDLGlCQUFpQjs7QUFGN0IsZUFBZTtJQVgzQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsaUJBQWU7Z0JBQzVCLEtBQUssRUFBRSxJQUFJO2FBQ1o7U0FDRjtLQUNGLENBQUM7SUFJYSxtQkFBQSxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtHQUY5QixlQUFlLENBYTNCO1NBYlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbcGFzc3dvcmRDb25maXJtXScsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICAgIHVzZUV4aXN0aW5nOiBQYXNzd29yZENvbmZpcm0sXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9XHJcbiAgXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ29uZmlybSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBBdHRyaWJ1dGUoJ3Bhc3N3b3JkQ29uZmlybScpIHB1YmxpYyBwYXNzd29yZENvbmZpcm06IHN0cmluZykge1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoYWJDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgIGNvbnN0IHZhbHVlID0gYWJDb250cm9sLnZhbHVlO1xyXG4gICAgY29uc3QgY29udHJvbFRvQ29tcGFyZVdpdGggPSBhYkNvbnRyb2wucm9vdC5nZXQodGhpcy5wYXNzd29yZENvbmZpcm0pO1xyXG4gICAgaWYgKGNvbnRyb2xUb0NvbXBhcmVXaXRoICYmIHZhbHVlICE9PSBjb250cm9sVG9Db21wYXJlV2l0aC52YWx1ZSkge1xyXG4gICAgICByZXR1cm4geyBwYXNzd29yZENvbmZpcm06IHRydWUgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG4iXX0=