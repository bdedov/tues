import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { filter, mergeMap, take } from 'rxjs/operators';
import { fromFactories } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { HOOK_COMPONENT, HOOK_COMPONENTS } from './dynamic-component.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
let DynamicComponentService = class DynamicComponentService extends StateService {
    constructor(injector, router) {
        super();
        this.injector = injector;
        this.refreshTrigger = new Subject();
        this.state$ = new BehaviorSubject(new Set());
        this.items$ = fromFactories([() => this.injector.get(HOOK_COMPONENTS, []), () => this.getComponentsViaDeprecatedHook()], router, false);
        this.items$.subscribe(cmps => {
            cmps.forEach(cmp => {
                this.state.add(cmp);
            });
            this.emitNewState();
        });
    }
    getComponentsViaDeprecatedHook() {
        const componentsViaDeprecatedHook = this.injector.get(HOOK_COMPONENT, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_COMPONENT is now deprecated. Use HOOK_COMPONENTS instead.');
        }
        return componentsViaDeprecatedHook;
    }
    refresh() {
        this.refreshTrigger.next(1);
    }
    get state() {
        return this.state$.value;
    }
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    getById$(id) {
        return this.state$.pipe(filter((cmps) => cmps.size > 0), mergeMap((cmps) => of(Array.from(cmps).find(cmp => cmp.id === id))), take(1));
    }
    add(component) {
        this.state.add(component);
        this.emitNewState();
    }
    remove(component) {
        this.state.delete(component);
        this.emitNewState();
    }
};
DynamicComponentService.ctorParameters = () => [
    { type: Injector },
    { type: Router }
];
DynamicComponentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: DynamicComponentService, providedIn: "root" });
DynamicComponentService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], DynamicComponentService);
export { DynamicComponentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2R5bmFtaWMtY29tcG9uZW50L2R5bmFtaWMtY29tcG9uZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEUsT0FBTyxFQUVMLGNBQWMsRUFDZCxlQUFlLEVBQ2hCLE1BQU0sMkJBQTJCLENBQUM7OztBQU9uQyxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF3QixTQUFRLFlBQVk7SUFRdkQsWUFBb0IsUUFBa0IsRUFBRSxNQUFjO1FBQ3BELEtBQUssRUFBRSxDQUFDO1FBRFUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUw3QixtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDL0IsV0FBTSxHQUFHLElBQUksZUFBZSxDQUNuQyxJQUFJLEdBQUcsRUFBOEIsQ0FDdEMsQ0FBQztRQUtBLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUN6QixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxFQUMzRixNQUFNLEVBQ04sS0FBSyxDQUNOLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw4QkFBOEI7UUFDNUIsTUFBTSwyQkFBMkIsR0FBaUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2pGLGNBQWMsRUFDZCxFQUFFLENBQzZCLENBQUM7UUFDbEMsSUFDRSwyQkFBMkI7WUFDM0IsMkJBQTJCLENBQUMsTUFBTTtZQUNsQyxRQUFRLEtBQUssWUFBWSxFQUN6QjtZQUNBLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztTQUNoRjtRQUVELE9BQU8sMkJBQTJCLENBQUM7SUFDckMsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUSxDQUFDLEVBQUU7UUFDVCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixNQUFNLENBQUMsQ0FBQyxJQUFxQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUNoRSxRQUFRLENBQUMsQ0FBQyxJQUFxQyxFQUFFLEVBQUUsQ0FDakQsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUNoRCxFQUNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELEdBQUcsQ0FBQyxTQUFxQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFxQztRQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztDQUNGLENBQUE7O1lBL0QrQixRQUFRO1lBQVUsTUFBTTs7O0FBUjNDLHVCQUF1QjtJQUhuQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0dBQ1csdUJBQXVCLENBdUVuQztTQXZFWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWVyZ2VNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFeHRlbnNpb25Qb2ludCwgZnJvbUZhY3RvcmllcyB9IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXRlLXNlcnZpY2UuYWJzdHJhY3QnO1xuaW1wb3J0IHtcbiAgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24sXG4gIEhPT0tfQ09NUE9ORU5ULFxuICBIT09LX0NPTVBPTkVOVFNcbn0gZnJvbSAnLi9keW5hbWljLWNvbXBvbmVudC5tb2RlbCc7XG5cbmRlY2xhcmUgY29uc3QgX19NT0RFX186IHN0cmluZztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0NvbXBvbmVudFNlcnZpY2UgZXh0ZW5kcyBTdGF0ZVNlcnZpY2VcbiAgaW1wbGVtZW50cyBFeHRlbnNpb25Qb2ludDxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICBpdGVtcyQ6IE9ic2VydmFibGU8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXT47XG4gIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3QoKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTZXQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+PihcbiAgICBuZXcgU2V0PER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uPigpXG4gICk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHJvdXRlcjogUm91dGVyKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuaXRlbXMkID0gZnJvbUZhY3RvcmllcyhcbiAgICAgIFsoKSA9PiB0aGlzLmluamVjdG9yLmdldChIT09LX0NPTVBPTkVOVFMsIFtdKSwgKCkgPT4gdGhpcy5nZXRDb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2soKV0sXG4gICAgICByb3V0ZXIsXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgdGhpcy5pdGVtcyQuc3Vic2NyaWJlKGNtcHMgPT4ge1xuICAgICAgY21wcy5mb3JFYWNoKGNtcCA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUuYWRkKGNtcCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2soKSB7XG4gICAgY29uc3QgY29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rOiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdID0gdGhpcy5pbmplY3Rvci5nZXQoXG4gICAgICBIT09LX0NPTVBPTkVOVCxcbiAgICAgIFtdXG4gICAgKSBhcyBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbltdO1xuICAgIGlmIChcbiAgICAgIGNvbXBvbmVudHNWaWFEZXByZWNhdGVkSG9vayAmJlxuICAgICAgY29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rLmxlbmd0aCAmJlxuICAgICAgX19NT0RFX18gIT09ICdwcm9kdWN0aW9uJ1xuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKCdIT09LX0NPTVBPTkVOVCBpcyBub3cgZGVwcmVjYXRlZC4gVXNlIEhPT0tfQ09NUE9ORU5UUyBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2s7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXIubmV4dCgxKTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGNvbXBvbmVudCBieSBpdCdzIGlkIGFzIGFuIG9ic2VydmFibGUuXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGdldEJ5SWQkKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUkLnBpcGUoXG4gICAgICBmaWx0ZXIoKGNtcHM6IFNldDxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4pID0+IGNtcHMuc2l6ZSA+IDApLFxuICAgICAgbWVyZ2VNYXAoKGNtcHM6IFNldDxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4pID0+XG4gICAgICAgIG9mKEFycmF5LmZyb20oY21wcykuZmluZChjbXAgPT4gY21wLmlkID09PSBpZCkpXG4gICAgICApLFxuICAgICAgdGFrZSgxKVxuICAgICk7XG4gIH1cblxuICBhZGQoY29tcG9uZW50OiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbikge1xuICAgIHRoaXMuc3RhdGUuYWRkKGNvbXBvbmVudCk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIHJlbW92ZShjb21wb25lbnQ6IER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uKSB7XG4gICAgdGhpcy5zdGF0ZS5kZWxldGUoY29tcG9uZW50KTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG59XG4iXX0=