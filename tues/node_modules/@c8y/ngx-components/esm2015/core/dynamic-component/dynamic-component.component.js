import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ComponentFactoryResolver, ViewContainerRef, ComponentRef } from '@angular/core';
import { DynamicComponentService } from './dynamic-component.service';
import { of, isObservable } from 'rxjs';
import { isUndefined } from 'lodash-es';
/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [{
 *      provide: HOOK_COMPONENT,
 *      multi: true,
 *      useValue: [{
 *          id: 'test-component',
 *          label: 'My test component',
 *          description: 'this is test component',
 *          component: TestComponent
 *      }],
 *  ...
 *  }]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
let DynamicComponentComponent = class DynamicComponentComponent {
    /**
     * @ignore only DI
     */
    constructor(componentFactoryResolver, dynamicComponentService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentService = dynamicComponentService;
        /**
         * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
         * By default it is shown in the component mode.
         */
        this.mode = 'component';
        /**
         * Disable this to hide the error that is shown if the component was not found.
         */
        this.notFoundError = true;
        /**
         * @ignore
         */
        this.expandErrorDetails = false;
    }
    /**
     * Calls the dynamic component life cycle hook. Currently only
     * supporting onBeforeSave, a hook which is called before a config component
     * is saved.
     */
    callLifeCycleHooks() {
        return this.callOnBeforeSaveHook();
    }
    /**
     * @ignore
     */
    ngOnChanges() {
        this.dynamicComponentService
            .getById$(this.componentId)
            .subscribe(cmp => this.loadComponent(cmp));
    }
    loadComponent(dynamicComponent) {
        try {
            this.error = undefined;
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
            this.host.clear();
            this.componentRef = this.host.createComponent(componentFactory);
            this.componentRef.instance.config = this.config;
        }
        catch (ex) {
            this.error = ex;
        }
    }
    callOnBeforeSaveHook() {
        if (!this.componentRef) {
            return of(true);
        }
        const hook = this.componentRef.instance.onBeforeSave;
        if (hook) {
            const result = hook.call(this.componentRef.instance, this.config);
            if (isUndefined(result)) {
                return of(true);
            }
            return isObservable(result) ? result : of(result);
        }
        return of(true);
    }
};
DynamicComponentComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: DynamicComponentService }
];
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "componentId", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "config", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "mode", void 0);
tslib_1.__decorate([
    Input()
], DynamicComponentComponent.prototype, "notFoundError", void 0);
tslib_1.__decorate([
    ViewChild('host', { read: ViewContainerRef, static: true })
], DynamicComponentComponent.prototype, "host", void 0);
DynamicComponentComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-dynamic-component',
        template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted top-m-sm\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i class=\"fa fa-chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
    })
], DynamicComponentComponent);
export { DynamicComponentComponent };
//# sourceMappingURL=data:application/json;base64,