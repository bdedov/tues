import * as tslib_1 from "tslib";
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { some, get, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
/**
 * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
 *
 * ## Example:
 *
 * ```html
 *  <div>
 *    <c8y-drop-area
 *      (dropped)="uploadFile($event)"
 *      [icon]="'upload'">
 *    </c8y-drop-area>
 *  </div>
 * ```
 */
let DropAreaComponent = class DropAreaComponent {
    /**
     * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
     *
     * ## Example:
     *
     * ```html
     *  <div>
     *    <c8y-drop-area
     *      (dropped)="uploadFile($event)"
     *      [icon]="'upload'">
     *    </c8y-drop-area>
     *  </div>
     * ```
     */
    constructor() {
        this.title = gettext('Upload file');
        this.message = gettext('Drop file here');
        this.icon = 'plus-square';
        this.loadingMessage = gettext('Uploadingâ€¦');
        /** Affects displaying both the drop zone and the list of dropped files. */
        this.alwaysShow = false;
        this.clickToOpen = true;
        this.loading = false;
        this.progress = -1; // -1 = spinner
        this.dropped = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.isOver = false;
        this.errors = false;
    }
    ngOnInit() {
        this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
        if (this.files && this.files.length > 0) {
            this.onFilesSelected(this.files);
        }
    }
    /**
     * Toggles the style of the drop zone element when a file is dragged over the component.
     */
    toggle($event) {
        this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
        this.onOver();
    }
    /**
     * Shows computer browser with files to drop into drop-area zone.
     */
    showPicker($event) {
        this.preventDefault($event);
        this.picker.nativeElement.value = '';
        this.picker.nativeElement.click();
    }
    /**
     * Triggered when file is on over drop area, but not dropped.
     */
    onOver() {
        if (!this.isOver) {
            this.isOver = true;
            document.addEventListener('dragover', this.preventDefault);
            document.addEventListener('drop', this.preventDefault);
        }
    }
    /**
     * Triggered when file is dropped.
     */
    onPick($event) {
        this.errors = false;
        this.preventDefault($event);
        this.onFilesSelected($event.target.files);
    }
    /**
     * Handle file when it is dropped into drop-area.
     */
    onDrop($event) {
        this.preventDefault($event);
        this.onFilesSelected($event.dataTransfer.files);
        this.stopDragging();
    }
    /**
     * Checks condition what should be displayed: drop-area zone or list of dropped files.
     */
    shouldShowFilesList() {
        return (this.alwaysShow &&
            !this.isFilesArrayEmpty() &&
            !this.hasEmptyFiles() &&
            !this.isTooManyFiles());
    }
    /**
     * Triggered when file is picked over web application.
     */
    stopDragging() {
        document.removeEventListener('dragover', this.preventDefault);
        document.removeEventListener('drop', this.preventDefault);
        this.isOver = false;
    }
    /**
     * Delete files already dropped files.
     */
    onDelete() {
        delete this.files;
        delete this.filesNameString;
        this.clearErrors();
        this.dropped.emit(undefined);
    }
    onFilesSelected(files) {
        this.files = files;
        this.filesNameString = this.getFilesNamesAsString(files);
        this.errors = false;
        if (!this.isFilesArrayEmpty() && !this.isTooManyFiles()) {
            if (this.hasEmptyFiles()) {
                this.errors = true;
                this.errorMessage = gettext('File must not be empty, select another one.');
            }
            else {
                this.dropped.emit(this.compose(files));
            }
        }
        else {
            this.errors = true;
            this.errorMessage = gettext('Too many files selected.');
        }
    }
    getFilesNamesAsString(files) {
        return map(files, ({ name }) => name).join(', ');
    }
    isFilesArrayEmpty() {
        return get(this, 'files.length', 0) === 0;
    }
    isTooManyFiles() {
        return get(this, 'files.length', 0) > this.maxAllowedFiles;
    }
    hasEmptyFiles() {
        let result = true;
        if (!this.isFilesArrayEmpty()) {
            result = this.isAnyFileEmpty();
        }
        return result;
    }
    isAnyFileEmpty() {
        return some(Array.from(this.files), ['size', 0]);
    }
    clearErrors() {
        delete this.errorMessage;
        this.errors = false;
    }
    preventDefault($event) {
        if ($event) {
            $event.preventDefault();
        }
    }
    compose(files) {
        return Array.from(files).map(file => ({
            file,
            readAsJson: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return JSON.parse(yield this.read(file, ReadAsType.TEXT)); }),
            readAsText: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.TEXT); }),
            readAsArrayBuffer: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.ARRAY_BUFFER); }),
            readAsBinaryString: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.BINARY_STRING); }),
            readAsDataURL: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.DATA_URL); })
        }));
    }
    read(file, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                switch (type) {
                    case ReadAsType.TEXT: {
                        reader.readAsText(file);
                        break;
                    }
                    case ReadAsType.ARRAY_BUFFER: {
                        reader.readAsArrayBuffer(file);
                        break;
                    }
                    case ReadAsType.BINARY_STRING: {
                        reader.readAsBinaryString(file);
                        break;
                    }
                    case ReadAsType.DATA_URL: {
                        reader.readAsDataURL(file);
                        break;
                    }
                }
                reader.onload = () => this.onLoad(reader, resolve, reject);
            });
        });
    }
    onLoad(reader, resolve, reject) {
        if (reader.readyState !== 2) {
            return;
        }
        if (reader.error) {
            reject(reader.error);
        }
        resolve(reader.result);
    }
};
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "message", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "loadingMessage", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "alwaysShow", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "clickToOpen", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "loading", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "progress", void 0);
tslib_1.__decorate([
    Output()
], DropAreaComponent.prototype, "dropped", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "maxAllowedFiles", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "files", void 0);
tslib_1.__decorate([
    ViewChild('area', { static: true })
], DropAreaComponent.prototype, "area", void 0);
tslib_1.__decorate([
    ViewChild('zone', { static: false })
], DropAreaComponent.prototype, "zone", void 0);
tslib_1.__decorate([
    ViewChild('picker', { static: false })
], DropAreaComponent.prototype, "picker", void 0);
DropAreaComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-drop-area',
        template: "<div\n  class=\"drop-zone\"\n  *ngIf=\"!shouldShowFilesList()\"\n  [ngClass]=\"{ 'has-errors': errors }\"\n  [style.pointerEvents]=\"loading ? 'none' : 'auto'\"\n  #zone\n  (dragleave)=\"stopDragging()\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onOver()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\"\n>\n  <div class=\"file-placeholder\"  [ngClass]=\"{ 'drag-over': isOver }\">\n    <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n      <p class=\"flex-item-middle m-r-8\">\n        {{ loadingMessage | translate }}\n      </p>\n      <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\"\n          style=\"min-width: 50%; margin: 0;\">\n        <div\n          class=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuenow=\"0\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          [style.width]=\"progress + '%'\"\n        ></div>\n      </div>\n      <div class=\"spinner\" *ngIf=\"progress === -1\" \n        style=\"position: relative; margin: 0;\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder pointer\">\n      <i class=\"fa fw fa-{{ icon }}\"></i>\n      <p *ngIf=\"!errors\">\n        <b>{{ message | translate }}</b>\n        <br />\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate>or click to browse your computer.</span>\n      </p>\n      <div *ngIf=\"errors\" class=\"has-errors\">\n        <p class=\"form-control-feedback-message\">\n          {{ errorMessage | translate }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"drop-zone\" *ngIf=\"shouldShowFilesList()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\">\n  <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n    <p class=\"flex-item-middle m-r-8\">\n      {{ loadingMessage | translate }}\n    </p>\n    <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\"\n      style=\"min-width: 50%; margin:0;\">\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        aria-valuenow=\"0\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </div>\n    <div class=\"spinner\" *ngIf=\"progress === -1\" \n      style=\"position: relative; margin: 0;\">\n      <div class=\"rect1\"></div>\n      <div class=\"rect2\"></div>\n      <div class=\"rect3\"></div>\n      <div class=\"rect4\"></div>\n      <div class=\"rect5\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!loading\" class=\"file-placeholder p-4\">\n    <div class=\"flex-row p-4\">\n      <i c8yIcon=\"file-o\" class=\"m-r-8\"></i>\n      <span title=\"{{ filesNameString }}\" class=\"text-truncate\">\n        {{ filesNameString }}\n      </span>\n      <button\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean showOnHover flex-item-right\"\n        >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n\n<input\n  #picker\n  *ngIf=\"clickToOpen\"\n  (change)=\"onPick($event)\"\n  multiple\n  type=\"file\"\n  style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\"\n/>\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n"
    })
], DropAreaComponent);
export { DropAreaComponent };
var ReadAsType;
(function (ReadAsType) {
    ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
    ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
    ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
    ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
})(ReadAsType || (ReadAsType = {}));
//# sourceMappingURL=data:application/json;base64,