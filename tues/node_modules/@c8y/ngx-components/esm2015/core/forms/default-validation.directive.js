var DefaultValidationDirective_1;
import * as tslib_1 from "tslib";
import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import { ValidationPattern } from './validation-pattern';
let DefaultValidationDirective = DefaultValidationDirective_1 = class DefaultValidationDirective {
    constructor() {
        this.c8yDefaultValidation = '';
    }
    validate(control) {
        if (!control.value) {
            return null;
        }
        const validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error(`Pattern ${this.c8yDefaultValidation} not found.`);
        }
        let valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : { [this.c8yDefaultValidation]: true };
    }
};
tslib_1.__decorate([
    Input()
], DefaultValidationDirective.prototype, "c8yDefaultValidation", void 0);
DefaultValidationDirective = DefaultValidationDirective_1 = tslib_1.__decorate([
    Directive({
        selector: '[c8yDefaultValidation]',
        providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective_1, multi: true }]
    })
], DefaultValidationDirective);
export { DefaultValidationDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2Zvcm1zL2RlZmF1bHQtdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTXpELElBQWEsMEJBQTBCLGtDQUF2QyxNQUFhLDBCQUEwQjtJQUp2QztRQUtXLHlCQUFvQixHQUFXLEVBQUUsQ0FBQztJQXVCN0MsQ0FBQztJQXJCQyxRQUFRLENBQUMsT0FBd0I7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxvQkFBb0IsYUFBYSxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3RCLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUU7WUFDeEIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7U0FDckQ7UUFDRCxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUU7WUFDeEIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUM7U0FDdEQ7UUFDRCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDN0QsQ0FBQztDQUNGLENBQUE7QUF2QlU7SUFBUixLQUFLLEVBQUU7d0VBQW1DO0FBRGhDLDBCQUEwQjtJQUp0QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsNEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO0tBQzVGLENBQUM7R0FDVywwQkFBMEIsQ0F3QnRDO1NBeEJZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblBhdHRlcm4gfSBmcm9tICcuL3ZhbGlkYXRpb24tcGF0dGVybic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjOHlEZWZhdWx0VmFsaWRhdGlvbl0nLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZX1dXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgQElucHV0KCkgYzh5RGVmYXVsdFZhbGlkYXRpb246IHN0cmluZyA9ICcnO1xuXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtba2V5OiBzdHJpbmddOiBhbnl9IHwgbnVsbCB7XG4gICAgaWYgKCFjb250cm9sLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IFZhbGlkYXRpb25QYXR0ZXJuLmdldCh0aGlzLmM4eURlZmF1bHRWYWxpZGF0aW9uKTtcbiAgICBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0dGVybiAke3RoaXMuYzh5RGVmYXVsdFZhbGlkYXRpb259IG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgIGlmICh2YWxpZGF0aW9uLnBhdHRlcm4pIHtcbiAgICAgIHZhbGlkID0gdmFsaWRhdGlvbi5wYXR0ZXJuLnRlc3QoY29udHJvbC52YWx1ZSk7XG4gICAgfVxuICAgIGlmICh2YWxpZGF0aW9uLm1heExlbmd0aCkge1xuICAgICAgdmFsaWQgPSBjb250cm9sLnZhbHVlLmxlbmd0aCA8IHZhbGlkYXRpb24ubWF4TGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGlvbi5taW5MZW5ndGgpIHtcbiAgICAgIHZhbGlkID0gY29udHJvbC52YWx1ZS5sZW5ndGggPj0gdmFsaWRhdGlvbi5taW5MZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB2YWxpZCA/IG51bGwgOiB7W3RoaXMuYzh5RGVmYXVsdFZhbGlkYXRpb25dOiB0cnVlIH07XG4gIH1cbn1cbiJdfQ==