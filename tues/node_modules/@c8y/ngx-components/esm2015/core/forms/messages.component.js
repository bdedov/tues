import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input } from '@angular/core';
import { MessageDirective } from './message.directive';
import { ValidationPattern } from './validation-pattern';
import { TranslateService } from '@ngx-translate/core';
let MessagesComponent = class MessagesComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    ngAfterContentInit() {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce((messages, directive) => {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    }
    changVisibility(show) {
        this.show = show;
        this.ngOnChanges();
    }
    ngOnChanges() {
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map((key) => this.toMessage(key, this.show[key]));
        }
        else {
            this.messages = [];
        }
    }
    toMessage(key, value) {
        return this.translateService.instant(this.messageMap[key], value);
    }
};
MessagesComponent.ctorParameters = () => [
    { type: TranslateService }
];
tslib_1.__decorate([
    Input()
], MessagesComponent.prototype, "show", void 0);
tslib_1.__decorate([
    Input()
], MessagesComponent.prototype, "defaults", void 0);
tslib_1.__decorate([
    ContentChildren(MessageDirective)
], MessagesComponent.prototype, "customMessages", void 0);
MessagesComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-messages',
        template: "<small class=\"form-control-feedback-message\">\n  <div style=\"display:block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
    })
], MessagesComponent);
export { MessagesComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvbWVzc2FnZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNdkQsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFPNUIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFON0MsU0FBSSxHQUFPLEVBQUUsQ0FBQztRQUNkLGFBQVEsR0FBTyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7UUFFbkQsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGVBQVUsR0FBUSxFQUFFLENBQUM7SUFFb0MsQ0FBQztJQUUxRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQ3BHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztZQUMxQyxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNWLENBQUM7SUFFRCxlQUFlLENBQUMsSUFBUTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDbkMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Q0FDRixDQUFBOztZQTFCdUMsZ0JBQWdCOztBQU43QztJQUFSLEtBQUssRUFBRTsrQ0FBZTtBQUNkO0lBQVIsS0FBSyxFQUFFO21EQUEyQztBQUNoQjtJQUFsQyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7eURBQTZDO0FBSHBFLGlCQUFpQjtJQUo3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4Qix1TUFBd0M7S0FDekMsQ0FBQztHQUNXLGlCQUFpQixDQWlDN0I7U0FqQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIElucHV0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTWVzc2FnZURpcmVjdGl2ZSB9IGZyb20gJy4vbWVzc2FnZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblBhdHRlcm4gfSBmcm9tICcuL3ZhbGlkYXRpb24tcGF0dGVybic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW1lc3NhZ2VzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21lc3NhZ2VzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNob3c6IHt9ID0ge307XG4gIEBJbnB1dCgpIGRlZmF1bHRzOiB7fSA9IFZhbGlkYXRpb25QYXR0ZXJuLm1lc3NhZ2VzO1xuICBAQ29udGVudENoaWxkcmVuKE1lc3NhZ2VEaXJlY3RpdmUpIGN1c3RvbU1lc3NhZ2VzOiBRdWVyeUxpc3Q8TWVzc2FnZURpcmVjdGl2ZT47XG4gIG1lc3NhZ2VzID0gW107XG4gIG1lc3NhZ2VNYXA6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5tZXNzYWdlTWFwID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZhdWx0cywgdGhpcy5jdXN0b21NZXNzYWdlcy5yZWR1Y2UoKG1lc3NhZ2VzLCBkaXJlY3RpdmUpID0+IHtcbiAgICAgIG1lc3NhZ2VzW2RpcmVjdGl2ZS5uYW1lXSA9IGRpcmVjdGl2ZS50ZXh0O1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH0sIHt9KSk7XG4gIH1cblxuICBjaGFuZ1Zpc2liaWxpdHkoc2hvdzoge30pIHtcbiAgICB0aGlzLnNob3cgPSBzaG93O1xuICAgIHRoaXMubmdPbkNoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLnNob3cpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNob3cpXG4gICAgICAgIC5tYXAoKGtleSkgPT4gdGhpcy50b01lc3NhZ2Uoa2V5LCB0aGlzLnNob3dba2V5XSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0b01lc3NhZ2Uoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCh0aGlzLm1lc3NhZ2VNYXBba2V5XSwgdmFsdWUpO1xuICB9XG59XG4iXX0=