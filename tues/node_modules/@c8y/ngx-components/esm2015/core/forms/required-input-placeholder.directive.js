import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, AfterViewChecked } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '@ngx-translate/core';
let RequiredInputPlaceholderDirective = class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    ngAfterViewChecked() {
        if (this.el && this.el.nativeElement && this.el.nativeElement.required !== undefined) {
            const required = this.el.nativeElement.required && !this.shouldSkipRequiredHint;
            const placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== required) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, required));
            }
        }
    }
    getTextForPlaceholder(placeholder = '', required = false) {
        this.req = required;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        const requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? `${placeholder} ${requiredText}` : requiredText;
    }
    updatePlaceholder(placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    }
};
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService }
];
RequiredInputPlaceholderDirective = tslib_1.__decorate([
    Directive({
        selector: 'input[required]'
    })
], RequiredInputPlaceholderDirective);
export { RequiredInputPlaceholderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvcmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3ZELElBQWEsaUNBQWlDLEdBQTlDLE1BQWEsaUNBQWlDO0lBSTVDLFlBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLGtCQUFvQztRQUZwQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWtCO1FBTnRDLDJCQUFzQixHQUFZLEtBQUssQ0FBQztRQVE3QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDcEYsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1lBQ2hGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUV0RCxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFO2dCQUM3RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQzNFO1NBQ0Y7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQUMsV0FBVyxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsS0FBSztRQUM5RCxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztRQUNwQixNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNqRixNQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7WUFDekIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxpQkFBaUIsS0FBSyxDQUFDLEVBQUU7WUFDM0IsV0FBVyxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPLFdBQVcsQ0FBQztTQUNwQjtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQzlFLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxXQUFXO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0NBQ0YsQ0FBQTs7WUF0Q2UsVUFBVTtZQUNKLFNBQVM7WUFDQyxnQkFBZ0I7O0FBUG5DLGlDQUFpQztJQUg3QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO0tBQzVCLENBQUM7R0FDVyxpQ0FBaUMsQ0EyQzdDO1NBM0NZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbcmVxdWlyZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkIHtcbiAgcHJpdmF0ZSBzaG91bGRTa2lwUmVxdWlyZWRIaW50OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgcHJpdmF0ZSByZXE6IGJvb2xlYW47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICkge1xuICAgICB0aGlzLnNob3VsZFNraXBSZXF1aXJlZEhpbnQgPSAhIXRoaXMuZWwubmF0aXZlRWxlbWVudC5jbG9zZXN0KCdbcGxhY2Vob2xkZXItbm8tcmVxdWlyZWQtaGludF0nKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbCAmJiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgJiYgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlcXVpcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHJlcXVpcmVkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlcXVpcmVkICYmICF0aGlzLnNob3VsZFNraXBSZXF1aXJlZEhpbnQ7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcjtcblxuICAgICAgaWYgKHRoaXMucGxhY2Vob2xkZXIgIT09IHBsYWNlaG9sZGVyIHx8IHRoaXMucmVxICE9PSByZXF1aXJlZCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVBsYWNlaG9sZGVyKHRoaXMuZ2V0VGV4dEZvclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyLCByZXF1aXJlZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VGV4dEZvclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyID0gJycsIHJlcXVpcmVkID0gZmFsc2UpIHtcbiAgICB0aGlzLnJlcSA9IHJlcXVpcmVkO1xuICAgIGNvbnN0IHJlcXVpcmVkVGV4dCA9IGAoJHt0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KGdldHRleHQoJ3JlcXVpcmVkJykpfSlgO1xuICAgIGNvbnN0IHJlcXVpcmVkVGV4dEluZGV4ID0gcGxhY2Vob2xkZXIubGFzdEluZGV4T2YocmVxdWlyZWRUZXh0KTtcbiAgICBpZiAocmVxdWlyZWRUZXh0SW5kZXggPiAwKSB7XG4gICAgICBwbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyLnNsaWNlKDAsIHJlcXVpcmVkVGV4dEluZGV4IC0gMSk7XG4gICAgfVxuICAgIGlmIChyZXF1aXJlZFRleHRJbmRleCA9PT0gMCkge1xuICAgICAgcGxhY2Vob2xkZXIgPSAnJztcbiAgICB9XG4gICAgaWYgKCFyZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICByZXR1cm4gcGxhY2Vob2xkZXIudHJpbSgpID8gYCR7cGxhY2Vob2xkZXJ9ICR7cmVxdWlyZWRUZXh0fWAgOiByZXF1aXJlZFRleHQ7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlcik7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICB9XG59XG4iXX0=