import * as tslib_1 from "tslib";
import { Directive, ContentChildren } from '@angular/core';
import { InputGroupListComponent } from './input-group-list.component';
let InputGroupListContainerDirective = class InputGroupListContainerDirective {
    ngAfterContentInit() {
        this.listProjections.map(element => {
            if (element !== this.listProjections.last) {
                setTimeout(() => {
                    element.plus = false;
                });
            }
        });
        this.listProjections.changes.subscribe(elements => {
            if (elements.length === 1) {
                setTimeout(() => {
                    elements.first.plus = true;
                    elements.first.minus = false;
                });
                return;
            }
            elements.map(element => {
                setTimeout(() => {
                    element.minus = true;
                });
                if (element !== elements.last) {
                    setTimeout(() => {
                        element.plus = false;
                    });
                }
                if (element === elements.last) {
                    setTimeout(() => {
                        element.plus = true;
                    });
                }
            });
        });
    }
};
tslib_1.__decorate([
    ContentChildren(InputGroupListComponent)
], InputGroupListContainerDirective.prototype, "listProjections", void 0);
InputGroupListContainerDirective = tslib_1.__decorate([
    Directive({
        selector: '[c8yInputGroupListContainer]'
    })
], InputGroupListContainerDirective);
export { InputGroupListContainerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUtULGVBQWUsRUFFaEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFLdkUsSUFBYSxnQ0FBZ0MsR0FBN0MsTUFBYSxnQ0FBZ0M7SUFHM0Msa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2pDLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFO2dCQUN6QyxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEQsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtvQkFDZCxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7b0JBQzNCLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsT0FBTzthQUNSO1lBQ0QsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDckIsVUFBVSxDQUFDLEdBQUcsRUFBRTtvQkFDZCxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtvQkFDN0IsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztvQkFDdkIsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtvQkFDN0IsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDdEIsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUF0QzJDO0lBQXpDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQzt5RUFBcUQ7QUFEbkYsZ0NBQWdDO0lBSDVDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw4QkFBOEI7S0FDekMsQ0FBQztHQUNXLGdDQUFnQyxDQXVDNUM7U0F2Q1ksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IElucHV0R3JvdXBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC1saXN0LmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjOHlJbnB1dEdyb3VwTGlzdENvbnRhaW5lcl0nXG59KVxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBMaXN0Q29udGFpbmVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBDb250ZW50Q2hpbGRyZW4oSW5wdXRHcm91cExpc3RDb21wb25lbnQpIGxpc3RQcm9qZWN0aW9uczogUXVlcnlMaXN0PElucHV0R3JvdXBMaXN0Q29tcG9uZW50PjtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5saXN0UHJvamVjdGlvbnMubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMubGlzdFByb2plY3Rpb25zLmxhc3QpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5wbHVzID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5saXN0UHJvamVjdGlvbnMuY2hhbmdlcy5zdWJzY3JpYmUoZWxlbWVudHMgPT4ge1xuICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBlbGVtZW50cy5maXJzdC5wbHVzID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50cy5maXJzdC5taW51cyA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbGVtZW50cy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnQubWludXMgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZWxlbWVudCAhPT0gZWxlbWVudHMubGFzdCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5wbHVzID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQgPT09IGVsZW1lbnRzLmxhc3QpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQucGx1cyA9IHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=