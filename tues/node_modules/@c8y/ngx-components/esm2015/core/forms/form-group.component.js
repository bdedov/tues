import * as tslib_1 from "tslib";
import { Component, ContentChild, HostBinding, Input } from '@angular/core';
import { NgModel } from '@angular/forms';
import { timer, merge } from 'rxjs';
import { debounce, filter } from 'rxjs/operators';
import { MessagesComponent } from './messages.component';
/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
let FormGroupComponent = class FormGroupComponent {
    /**
     * A form group helps to validate an input of a form element.
     *
     * ## Example:
     *
     * ```html
     *  <c8y-form-group [hasWarning]="user.email.length === 0">
     *   <label translate for="userEmail">Email</label>
     *   <input
     *     id="userEmail"
     *     class="form-control"
     *     type="email"
     *     name="email"
     *     [maxlength]="254"
     *     autocomplete="off"
     *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
     *     [(ngModel)]="user.email"
     *     email
     *     required
     *   >
     *   <c8y-messages>
     *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
     *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
     *   </c8y-messages>
     *  </c8y-form-group>
     * ```
     *
     * @param status The current status could be error, warning or success.
     * @param hasError Set this to true to display a error.
     * @param hasWarning Set this to true to display a warning.
     * @param hasSuccess Set this to true to display a success.
     * @param novalidation Set this to true to disable automatic validation by this component.
     */
    constructor() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    get error() {
        return this.status === 'error' || this.hasError;
    }
    get warning() {
        return this.status === 'warning' || this.hasWarning;
    }
    get success() {
        return this.status === 'success' || this.hasSuccess;
    }
    ngAfterContentInit() {
        this.initNgModel();
    }
    initNgModel() {
        if (this.model) {
            this.model.valueAccessor.registerOnTouched(() => {
                if (this.model.control && !this.model.control.dirty) {
                    this.model.control.markAsDirty();
                    this.model.control.updateValueAndValidity({ onlySelf: true });
                }
            });
            this.subscription = merge(this.model.valueChanges, this.model.statusChanges)
                .pipe(filter(() => this.model.dirty && !this.novalidation), debounce(() => (this.hasError ? timer(10) : timer(this.VALIDATION_DEBOUNCE_MS))))
                .subscribe(() => this.update());
        }
    }
    update() {
        this.hasError = this.model.status === 'INVALID';
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(this.model.errors);
        }
        else {
            this.errors = this.model.errors;
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
};
tslib_1.__decorate([
    Input()
], FormGroupComponent.prototype, "hasError", void 0);
tslib_1.__decorate([
    Input()
], FormGroupComponent.prototype, "hasWarning", void 0);
tslib_1.__decorate([
    Input()
], FormGroupComponent.prototype, "hasSuccess", void 0);
tslib_1.__decorate([
    Input()
], FormGroupComponent.prototype, "novalidation", void 0);
tslib_1.__decorate([
    Input()
], FormGroupComponent.prototype, "status", void 0);
tslib_1.__decorate([
    HostBinding('class.has-error')
], FormGroupComponent.prototype, "error", null);
tslib_1.__decorate([
    HostBinding('class.has-warning')
], FormGroupComponent.prototype, "warning", null);
tslib_1.__decorate([
    HostBinding('class.has-success')
], FormGroupComponent.prototype, "success", null);
tslib_1.__decorate([
    ContentChild(MessagesComponent, { static: false })
], FormGroupComponent.prototype, "customErrorMessage", void 0);
tslib_1.__decorate([
    ContentChild(NgModel, { static: true })
], FormGroupComponent.prototype, "model", void 0);
FormGroupComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-form-group',
        template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
        host: {
            class: 'form-group'
        }
    })
], FormGroupComponent);
export { FormGroupComponent };
//# sourceMappingURL=data:application/json;base64,