// tslint:disable: max-line-length
import { gettext } from '../i18n/gettext';
// @dynamic
export class ValidationPattern {
    static get(key) {
        const pattern = this.rules[key];
        return pattern;
    }
}
ValidationPattern.messages = {
    deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
    domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
        'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
    email: gettext('Invalid email address.'),
    internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
    loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
    max: gettext('Max value: {{ value }}'),
    min: gettext('Min value: {{ value }}'),
    opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
    password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
    passwordConfirm: gettext('Passwords do not match.'),
    passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
    phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
    required: gettext('This field is required.'),
    tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
        'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
    urlSegment: gettext('Slash, single or double dots and white space not allowed'),
    user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
};
ValidationPattern.rules = {
    deviceId: {
        pattern: /^[^\s/]*$/
    },
    domain: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
    },
    groupName: {
        maxLength: 254
    },
    hostname: {
        pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
    },
    ip: {
        pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    },
    opcuaBrowsePath: {
        pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
    },
    password: {
        pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
    },
    phoneNumber: {
        pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
    },
    tenantId: {
        pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
    },
    user: {
        pattern: /^[^\\/\s$:+]*$/
    },
    urlSegment: {
        pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
    },
    loginAlias: {
        pattern: /^[^\\/$:+]*$/
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1wYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvdmFsaWRhdGlvbi1wYXR0ZXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFTMUMsV0FBVztBQUNYLE1BQU0sT0FBTyxpQkFBaUI7SUEyRTVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVztRQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sT0FBMEIsQ0FBQztJQUNwQyxDQUFDOztBQTdFZSwwQkFBUSxHQUFHO0lBQ3pCLFFBQVEsRUFBRSxPQUFPLENBQUMscURBQXFELENBQUM7SUFDeEUsTUFBTSxFQUFFLE9BQU8sQ0FDYixtRkFBbUY7UUFDakYsb0ZBQW9GLENBQ3ZGO0lBQ0QsS0FBSyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztJQUN4Qyx3QkFBd0IsRUFBRSxPQUFPLENBQy9CLHVFQUF1RSxDQUN4RTtJQUNELFVBQVUsRUFBRSxPQUFPLENBQ2pCLGlGQUFpRixDQUNsRjtJQUNELEdBQUcsRUFBRyxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDdkMsR0FBRyxFQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztJQUN2QyxlQUFlLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0lBQy9DLFFBQVEsRUFBRSxPQUFPLENBQ2YsOEpBQThKLENBQy9KO0lBQ0QsZUFBZSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztJQUNuRCxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsOERBQThELENBQUM7SUFDekYsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsMkZBQTJGLENBQzVGO0lBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztJQUM1QyxRQUFRLEVBQUUsT0FBTyxDQUNmLHNEQUFzRDtRQUNwRCxxRkFBcUYsQ0FDeEY7SUFDRCxVQUFVLEVBQUUsT0FBTyxDQUFDLDBEQUEwRCxDQUFDO0lBQy9FLElBQUksRUFBRSxPQUFPLENBQ1gseUZBQXlGLENBQzFGO0NBQ0YsQ0FBQztBQUVjLHVCQUFLLEdBQUc7SUFDdEIsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLFdBQVc7S0FDckI7SUFDRCxNQUFNLEVBQUU7UUFDTixPQUFPLEVBQUUsb0NBQW9DO0tBQzlDO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsU0FBUyxFQUFFLEdBQUc7S0FDZjtJQUNELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSwyR0FBMkc7S0FDckg7SUFDRCxFQUFFLEVBQUU7UUFDRixPQUFPLEVBQUUsNkZBQTZGO0tBQ3ZHO0lBQ0QsZUFBZSxFQUFFO1FBQ2YsT0FBTyxFQUFFLG1DQUFtQztLQUM3QztJQUNELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSx3REFBd0Q7S0FDbEU7SUFDRCxXQUFXLEVBQUU7UUFDWCxPQUFPLEVBQUUsOEJBQThCO0tBQ3hDO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLDZCQUE2QjtLQUN2QztJQUNELElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxnQkFBZ0I7S0FDMUI7SUFDRCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsMkVBQTJFO0tBQ3JGO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGNBQWM7S0FDeEI7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvblJ1bGVzIHtcbiAgcGF0dGVybj86IFJlZ0V4cDtcbiAgbWVzc2FnZT86IHN0cmluZztcbiAgbWF4TGVuZ3RoPzogbnVtYmVyO1xuICBtaW5MZW5ndGg/OiBudW1iZXI7XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvblBhdHRlcm4ge1xuICBzdGF0aWMgcmVhZG9ubHkgbWVzc2FnZXMgPSB7XG4gICAgZGV2aWNlSWQ6IGdldHRleHQoJ0RldmljZSBJRCBtdXN0IG5vdCBjb250YWluIHNwYWNlcyBvciBzbGFzaGVzIChcIi9cIikuJyksXG4gICAgZG9tYWluOiBnZXR0ZXh0KFxuICAgICAgJ09ubHkgbG93ZXJjYXNlIGxldHRlcnMsIGRpZ2l0cyBhbmQgaHlwaGVucyBhbGxvd2VkIGluIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBVUkkuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIG9ubHkgYWxsb3dlZCBpbiB0aGUgbWlkZGxlLiBNdXN0IGJlIGEgdmFsaWQgVVJJLidcbiAgICApLFxuICAgIGVtYWlsOiBnZXR0ZXh0KCdJbnZhbGlkIGVtYWlsIGFkZHJlc3MuJyksXG4gICAgaW50ZXJuYXRpb25hbFBob25lTnVtYmVyOiBnZXR0ZXh0KFxuICAgICAgJ0ludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyIHJlcXVpcmVkLCBpbiB0aGUgZm9ybWF0ICs0OSA5IDg3NiA1NDMgMjEwLidcbiAgICApLFxuICAgIGxvZ2luQWxpYXM6IGdldHRleHQoXG4gICAgICAnTG9naW4gYWxpYXMgbXVzdCBub3QgY29udGFpbiBzbGFzaGVzIChcIi9cIiwgXCJcXFxcXCIpIG5vciAoXCIrXCIpLCAoXCI6XCIpLCAoXCIkXCIpIHNpZ25zLidcbiAgICApLFxuICAgIG1heCA6IGdldHRleHQoJ01heCB2YWx1ZToge3sgdmFsdWUgfX0nKSxcbiAgICBtaW4gOiBnZXR0ZXh0KCdNaW4gdmFsdWU6IHt7IHZhbHVlIH19JyksXG4gICAgb3BjdWFCcm93c2VQYXRoOiBnZXR0ZXh0KCdJbnZhbGlkIE9QQyBVQSBVUkkuJyksXG4gICAgcGFzc3dvcmQ6IGdldHRleHQoXG4gICAgICAnUGFzc3dvcmQgbXVzdCBoYXZlIGF0IGxlYXN0IDggY2hhcmFjdGVycyBhbmQgbm8gbW9yZSB0aGFuIDMyIGFuZCBjYW4gb25seSBjb250YWluIGxldHRlcnMsIG51bWJlcnMgYW5kIGZvbGxvd2luZyBzeW1ib2xzOiBgfiFAIyQlXiYqKClffCstPT87OlxcJ1wiLC48Pnt9W11cXFxcLydcbiAgICApLFxuICAgIHBhc3N3b3JkQ29uZmlybTogZ2V0dGV4dCgnUGFzc3dvcmRzIGRvIG5vdCBtYXRjaC4nKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBnZXR0ZXh0KCdQYXNzd29yZCBub3QgZ29vZCBlbm91Z2gsIHBhc3N3b3JkIG11c3QgYmUgc3Ryb25nZXIgKGdyZWVuKS4nKSxcbiAgICBwaG9uZU51bWJlcjogZ2V0dGV4dChcbiAgICAgICdJbnZhbGlkIHBob25lIG51bWJlciBmb3JtYXQuIE9ubHkgZGlnaXRzLCBzcGFjZXMsIHNsYXNoZXMgKFwiL1wiKSBhbmQgZGFzaGVzIChcIi1cIikgYWxsb3dlZC4nXG4gICAgKSxcbiAgICByZXF1aXJlZDogZ2V0dGV4dCgnVGhpcyBmaWVsZCBpcyByZXF1aXJlZC4nKSxcbiAgICB0ZW5hbnRJZDogZ2V0dGV4dChcbiAgICAgICdNYXkgY29udGFpbiBsb3dlcmNhc2UgbGV0dGVycywgZGlnaXRzLCBhbmQgaHlwaGVucy4gJyArXG4gICAgICAgICdNdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXI7IGh5cGhlbnMgb25seSBhbGxvd2VkIGluIHRoZSBtaWRkbGU7IG1pbmltdW0gMiBjaGFyYWN0ZXJzLidcbiAgICApLFxuICAgIHVybFNlZ21lbnQ6IGdldHRleHQoJ1NsYXNoLCBzaW5nbGUgb3IgZG91YmxlIGRvdHMgYW5kIHdoaXRlIHNwYWNlIG5vdCBhbGxvd2VkJyksXG4gICAgdXNlcjogZ2V0dGV4dChcbiAgICAgICdVc2VybmFtZSBtdXN0IG5vdCBjb250YWluIHNwYWNlcyBub3Igc2xhc2hlcyAoXCIvXCIsIFwiXFxcXFwiKSBub3IgKFwiK1wiKSwgKFwiOlwiKSwgKFwiJFwiKSBzaWducy4nXG4gICAgKVxuICB9O1xuXG4gIHN0YXRpYyByZWFkb25seSBydWxlcyA9IHtcbiAgICBkZXZpY2VJZDoge1xuICAgICAgcGF0dGVybjogL15bXlxccy9dKiQvXG4gICAgfSxcbiAgICBkb21haW46IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOS1dKlthLXowLTldK1xcLnsxfS4rJC9cbiAgICB9LFxuICAgIGdyb3VwTmFtZToge1xuICAgICAgbWF4TGVuZ3RoOiAyNTRcbiAgICB9LFxuICAgIGhvc3RuYW1lOiB7XG4gICAgICBwYXR0ZXJuOiAvXigoW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05LV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05LV0qW0EtWmEtejAtOV0pJC9cbiAgICB9LFxuICAgIGlwOiB7XG4gICAgICBwYXR0ZXJuOiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvXG4gICAgfSxcbiAgICBvcGN1YUJyb3dzZVBhdGg6IHtcbiAgICAgIHBhdHRlcm46IC9eKG9wYy50Y3B8aHR0cHxodHRwcyk6XFwvXFwvW14gXCJdKyQvXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgcGF0dGVybjogL15bYS16QS1aMC05YH4hQCMkJV4mKigpX3wrXFwtPT87OidcIiwuPD57fVtcXF1cXFxcL117OCwzMn0kL1xuICAgIH0sXG4gICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eJHxeKFxcK3wwezJ9KVtcXGRcXHMvLV17MSwzMH0kL1xuICAgIH0sXG4gICAgdGVuYW50SWQ6IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOS1dKlthLXowLTldKyQvXG4gICAgfSxcbiAgICB1c2VyOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxcXC9cXHMkOitdKiQvXG4gICAgfSxcbiAgICB1cmxTZWdtZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXigoWy5dezEsMn0pfChbL10pK3woKFsvXSopKFsuXXsxLDJ9KShbL10qKSl8KCguKikoWy9dfFsgXSspKC4qKSl8KFxccyspKSQvXG4gICAgfSxcbiAgICBsb2dpbkFsaWFzOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxcXC8kOitdKiQvXG4gICAgfVxuICB9O1xuXG4gIHN0YXRpYyBnZXQoa2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5ydWxlc1trZXldO1xuICAgIHJldHVybiBwYXR0ZXJuIGFzIFZhbGlkYXRpb25SdWxlcztcbiAgfVxufVxuIl19