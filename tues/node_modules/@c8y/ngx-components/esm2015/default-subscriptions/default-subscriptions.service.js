import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { isUndefined, sortBy } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { IApplication, ApplicationType, ApplicationService, ISystemOption, TenantService, TenantOptionsService } from '@c8y/client';
import { HumanizeAppNamePipe } from '@c8y/ngx-components';
import { DefaultSubscriptionsContext as DefaultSubscriptionsContextTenant } from './default-subscriptions.model';
let DefaultSubscriptionsService = class DefaultSubscriptionsService {
    constructor(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    getSubscribableTenantApps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            const allApps = (yield this.applicationService.listByTenant(null, { pageSize: 2000 })).data;
            const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);
            const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);
            const filteredApps = [...ownApps];
            inheritedApps.forEach(inheritedApp => {
                if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {
                    filteredApps.push(inheritedApp);
                }
            });
            const filteredAppsWithHumanizedNames = yield Promise.all(filteredApps.map((app) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const humanizedName = yield this.humanizeAppNamePipe
                    .transform(app.name)
                    .pipe(debounceTime(250), take(1))
                    .toPromise();
                return { app, humanizedName };
            })));
            const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
            const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);
            return sortedApps;
        });
    }
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    getDefaultSubscriptionsEvaluatedFromParentTenant() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.PARENT_TENANT);
        });
    }
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    getDefaultSubscriptionsFromCurrentTenant() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.CURRENT_TENANT);
        });
    }
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.saveOnCreationSubscriptions(defaultSubscriptions);
            yield this.saveOnUpgradeSubscriptions(defaultSubscriptions);
        });
    }
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    getDefaultSubscriptions(contextTenant) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let tenantOptionsParams;
            let overridable;
            switch (contextTenant) {
                case DefaultSubscriptionsContextTenant.CURRENT_TENANT:
                    tenantOptionsParams = { evaluate: 'current' };
                    overridable = true;
                    break;
                case DefaultSubscriptionsContextTenant.PARENT_TENANT:
                    tenantOptionsParams = { evaluate: 'inherited' };
                    overridable = false;
                    break;
            }
            const { onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices } = yield this.getTenantOptions(tenantOptionsParams);
            const onCreationSubscriptions = this.namesToPartialApps({
                appsNamesStr: onCreationApps,
                microservicesNamesStr: onCreationMicroservices
            });
            const onUpgradeAppsDefault = overridable ? null : onCreationApps;
            const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
            const onUpgradeSubscriptions = this.namesToPartialApps({
                appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                microservicesNamesStr: onUpgradeMicroservicesEnabled
                    ? onUpgradeMicroservices
                    : onUpgradeMicroservicesDefault
            });
            const defaultSubscriptions = {
                onCreationSubscriptions,
                onUpgradeSubscriptions
            };
            if (overridable) {
                defaultSubscriptions.overrideOnCreationSubscriptions =
                    onCreationApps !== null || onCreationMicroservices !== null;
                defaultSubscriptions.overrideOnUpgradeSubscriptions =
                    onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
            }
            return defaultSubscriptions;
        });
    }
    getTenantOptions(params = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                onCreationApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                }, null, params),
                onCreationMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                }, null, params),
                onUpgradeAppsEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                }, false, params),
                onUpgradeApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                }, null, params),
                onUpgradeMicroservicesEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                }, false, params),
                onUpgradeMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                }, null, params)
            };
        });
    }
    saveOnCreationSubscriptions(defaultSubscriptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnCreationSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                });
            }
        });
    }
    saveOnUpgradeSubscriptions(defaultSubscriptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                });
            }
        });
    }
    getTenantOption(option, defaultValue = null, params = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let value;
            try {
                value = (yield this.tenantOptionsService.detail(option, params)).data.value;
                value = JSON.parse(value);
            }
            catch (ex) {
                value = !isUndefined(value) ? value : defaultValue;
            }
            return value;
        });
    }
    setTenantOption(option) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.tenantOptionsService.update(option);
        });
    }
    unsetTenantOption(option) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.tenantOptionsService.delete(option);
            }
            catch (ex) {
                if (!ex || !ex.res || ex.res.status !== 404) {
                    throw ex;
                }
            }
        });
    }
    namesToPartialApps({ appsNamesStr, microservicesNamesStr }) {
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return [
            ...(appsNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({ name: name.trim() })),
            ...(microservicesNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({
                name: name.trim(),
                type: ApplicationType.MICROSERVICE
            }))
        ];
    }
    partialAppsListToAppsNames(apps) {
        return apps
            .filter(app => app.type !== ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
    partialAppsToMicroservicesNames(apps) {
        return apps
            .filter(app => app.type === ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
};
DefaultSubscriptionsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: TenantService },
    { type: TenantOptionsService },
    { type: HumanizeAppNamePipe }
];
DefaultSubscriptionsService = tslib_1.__decorate([
    Injectable()
], DefaultSubscriptionsService);
export { DefaultSubscriptionsService };
//# sourceMappingURL=data:application/json;base64,