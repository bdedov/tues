import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { DefaultSubscriptionsComponent } from './default-subscriptions.component';
import { DefaultSubscriptionsService } from './default-subscriptions.service';
import { DefaultSubscriptionsGuard } from './default-subscriptions.guard';
import { DefaultSubscriptionsNavigationFactory } from './default-subscriptions-navigation.factory';
const ɵ0 = [
    {
        path: 'default-subscriptions',
        component: DefaultSubscriptionsComponent,
        canActivate: [DefaultSubscriptionsGuard]
    }
];
let DefaultSubscriptionsModule = class DefaultSubscriptionsModule {
};
DefaultSubscriptionsModule = tslib_1.__decorate([
    NgModule({
        imports: [CoreModule, ReactiveFormsModule],
        declarations: [DefaultSubscriptionsComponent],
        entryComponents: [DefaultSubscriptionsComponent],
        exports: [DefaultSubscriptionsComponent],
        providers: [
            DefaultSubscriptionsService,
            DefaultSubscriptionsGuard,
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: DefaultSubscriptionsNavigationFactory,
                multi: true
            },
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            }
        ]
    })
], DefaultSubscriptionsModule);
export { DefaultSubscriptionsModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zdWJzY3JpcHRpb25zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZGVmYXVsdC1zdWJzY3JpcHRpb25zLyIsInNvdXJjZXMiOlsiZGVmYXVsdC1zdWJzY3JpcHRpb25zLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBUyxNQUFNLHFCQUFxQixDQUFDO0FBRS9GLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO1dBaUJuRjtJQUNSO1FBQ0UsSUFBSSxFQUFFLHVCQUF1QjtRQUM3QixTQUFTLEVBQUUsNkJBQTZCO1FBQ3hDLFdBQVcsRUFBRSxDQUFDLHlCQUF5QixDQUFDO0tBQ3pDO0NBQ1M7QUFLbEIsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7Q0FBRyxDQUFBO0FBQTdCLDBCQUEwQjtJQTFCdEMsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDO1FBQzFDLFlBQVksRUFBRSxDQUFDLDZCQUE2QixDQUFDO1FBQzdDLGVBQWUsRUFBRSxDQUFDLDZCQUE2QixDQUFDO1FBQ2hELE9BQU8sRUFBRSxDQUFDLDZCQUE2QixDQUFDO1FBQ3hDLFNBQVMsRUFBRTtZQUNULDJCQUEyQjtZQUMzQix5QkFBeUI7WUFDekI7Z0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLElBTUk7Z0JBQ1osS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztHQUNXLDBCQUEwQixDQUFHO1NBQTdCLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgSE9PS19OQVZJR0FUT1JfTk9ERVMsIEhPT0tfT05DRV9ST1VURSwgUm91dGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgRGVmYXVsdFN1YnNjcmlwdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2RlZmF1bHQtc3Vic2NyaXB0aW9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGVmYXVsdFN1YnNjcmlwdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi9kZWZhdWx0LXN1YnNjcmlwdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBEZWZhdWx0U3Vic2NyaXB0aW9uc0d1YXJkIH0gZnJvbSAnLi9kZWZhdWx0LXN1YnNjcmlwdGlvbnMuZ3VhcmQnO1xuaW1wb3J0IHsgRGVmYXVsdFN1YnNjcmlwdGlvbnNOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vZGVmYXVsdC1zdWJzY3JpcHRpb25zLW5hdmlnYXRpb24uZmFjdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbRGVmYXVsdFN1YnNjcmlwdGlvbnNDb21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtEZWZhdWx0U3Vic2NyaXB0aW9uc0NvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1xuICAgIERlZmF1bHRTdWJzY3JpcHRpb25zU2VydmljZSxcbiAgICBEZWZhdWx0U3Vic2NyaXB0aW9uc0d1YXJkLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICAgICAgdXNlQ2xhc3M6IERlZmF1bHRTdWJzY3JpcHRpb25zTmF2aWdhdGlvbkZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19PTkNFX1JPVVRFLFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdGg6ICdkZWZhdWx0LXN1YnNjcmlwdGlvbnMnLFxuICAgICAgICAgIGNvbXBvbmVudDogRGVmYXVsdFN1YnNjcmlwdGlvbnNDb21wb25lbnQsXG4gICAgICAgICAgY2FuQWN0aXZhdGU6IFtEZWZhdWx0U3Vic2NyaXB0aW9uc0d1YXJkXVxuICAgICAgICB9XG4gICAgICBdIGFzIFJvdXRlW10sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEZWZhdWx0U3Vic2NyaXB0aW9uc01vZHVsZSB7fVxuIl19