import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, IResultList } from '@c8y/client';
let LoraSetDeviceProtocolService = class LoraSetDeviceProtocolService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
    }
    getCurrentProtocol(device) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const protocolId = device.c8y_LpwanDevice.type
                ? device.c8y_LpwanDevice.type.split('/')[2]
                : null;
            if (!protocolId) {
                return null;
            }
            const { data } = yield this.inventoryService.detail(protocolId);
            return data;
        });
    }
    applyProtocol(device, selectedProtocol) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
            device.type = selectedProtocol.name;
            return this.inventoryService.update(device);
        });
    }
    getAvailableProtocols() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const query = {
                type: {
                    __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType']
                }
            };
            return this.inventoryService.listQuery(query);
        });
    }
};
LoraSetDeviceProtocolService.ctorParameters = () => [
    { type: InventoryService }
];
LoraSetDeviceProtocolService = tslib_1.__decorate([
    Injectable()
], LoraSetDeviceProtocolService);
export { LoraSetDeviceProtocolService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9yYS1zZXQtZGV2aWNlLXByb3RvY29sLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3Byb3RvY29sLWxvcmEvIiwic291cmNlcyI6WyJsb3JhLXNldC1kZXZpY2UtcHJvdG9jb2wuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUc1RSxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQUN2QyxZQUNVLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUksQ0FBQztJQUUzQyxrQkFBa0IsQ0FBQyxNQUFzQjs7WUFDN0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJO2dCQUM1QyxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNULElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDaEUsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsTUFBc0IsRUFBRSxnQkFBZ0M7O1lBQzFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLDJCQUEyQixHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUNoRixNQUFNLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUNwQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUMsQ0FBQztLQUFBO0lBRUsscUJBQXFCOztZQUN6QixNQUFNLEtBQUssR0FBRztnQkFDWixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsb0JBQW9CLENBQUM7aUJBQ3ZEO2FBQ0YsQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxDQUFDO0tBQUE7Q0FDRixDQUFBOztZQTNCNkIsZ0JBQWdCOztBQUZqQyw0QkFBNEI7SUFEeEMsVUFBVSxFQUFFO0dBQ0EsNEJBQTRCLENBNkJ4QztTQTdCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSwgSVJlc3VsdExpc3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb3JhU2V0RGV2aWNlUHJvdG9jb2xTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlKSB7IH1cblxuICBhc3luYyBnZXRDdXJyZW50UHJvdG9jb2woZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IHByb3RvY29sSWQgPSBkZXZpY2UuYzh5X0xwd2FuRGV2aWNlLnR5cGVcbiAgICAgID8gZGV2aWNlLmM4eV9McHdhbkRldmljZS50eXBlLnNwbGl0KCcvJylbMl1cbiAgICAgIDogbnVsbDtcbiAgICBpZiAoIXByb3RvY29sSWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwocHJvdG9jb2xJZCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBhc3luYyBhcHBseVByb3RvY29sKGRldmljZTogSU1hbmFnZWRPYmplY3QsIHNlbGVjdGVkUHJvdG9jb2w6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgZGV2aWNlLmM4eV9McHdhbkRldmljZS50eXBlID0gJ2ludmVudG9yeS9tYW5hZ2VkT2JqZWN0cy8nICsgc2VsZWN0ZWRQcm90b2NvbC5pZDtcbiAgICBkZXZpY2UudHlwZSA9IHNlbGVjdGVkUHJvdG9jb2wubmFtZTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLnVwZGF0ZShkZXZpY2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXZhaWxhYmxlUHJvdG9jb2xzKCk6IFByb21pc2U8SVJlc3VsdExpc3Q8SU1hbmFnZWRPYmplY3Q+PiB7XG4gICAgY29uc3QgcXVlcnkgPSB7XG4gICAgICB0eXBlOiB7XG4gICAgICAgIF9faW46IFsnYzh5X0FjdGlsaXR5RGV2aWNlVHlwZScsICdjOHlfTG9yYURldmljZVR5cGUnXVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0UXVlcnkocXVlcnkpO1xuICB9XG59XG4iXX0=