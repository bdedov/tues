import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { IManagedObject, IResultList, InventoryService } from '@c8y/client';
import { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
export declare class VersionOrPatchComponent {
    private repositoryService;
    private inventoryService;
    private bulkOpsService;
    selected: IManagedObject;
    versionOrPatch: EventEmitter<IManagedObject>;
    elementCount: number;
    DD_LOW_COUNT: number;
    firmware$: Observable<IManagedObject>;
    baseVersions$: Observable<IResultList<IManagedObject>>;
    isLegacy$: Observable<boolean>;
    expanded: {
        [id: string]: boolean;
    };
    constructor(repositoryService: RepositoryService, inventoryService: InventoryService, bulkOpsService: BulkOperationsService);
    getBinaryName$(binaryUrl: any): Observable<string>;
    getBaseVersionAndPatches$(baseVersion: any): Observable<IResultList<IManagedObject> | {
        data: ({
            c8y_Firmware: {
                version: any;
                url: any;
            };
        } & IManagedObject)[];
    }>;
    getPatchVersionsCount$(baseVersion: FirmwareBinary): Observable<number>;
    selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject): void;
}
