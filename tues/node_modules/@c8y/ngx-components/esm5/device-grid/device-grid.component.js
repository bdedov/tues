import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DataGridComponent, FilteringActionType, gettext } from '@c8y/ngx-components';
import { DeviceGridService } from './device-grid.service';
var DeviceGridComponent = /** @class */ (function () {
    function DeviceGridComponent(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.title = gettext('Devices');
        this.loadMoreItemsLabel = gettext('Load more devices');
        this.loadingItemsLabel = gettext('Loading devicesâ€¦');
        this.noMatchingItemsLabel = gettext('No matching devices.');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = this.deviceGridService.getDefaultColumns();
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.actionControls = this.deviceGridService.getDefaultActionControls();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    Object.defineProperty(DeviceGridComponent.prototype, "_columns", {
        set: function (value) {
            if (value) {
                this.columns = value;
            }
            else {
                this.columns = this.deviceGridService.getDefaultColumns();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_pagination", {
        set: function (value) {
            if (value) {
                this.pagination = value;
            }
            else {
                this.pagination = this.deviceGridService.getDefaultPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_infiniteScroll", {
        set: function (infiniteScroll) {
            this.infiniteScroll = infiniteScroll;
            this.pagination = this.deviceGridService.getInfiniteScrollPagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_actionControls", {
        set: function (value) {
            if (value) {
                this.actionControls = value;
            }
            else {
                this.actionControls = this.deviceGridService.getDefaultActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_bulkActionControls", {
        set: function (value) {
            if (value) {
                this.bulkActionControls = value;
            }
            else {
                this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    DeviceGridComponent.prototype.trackByName = function (_index, column) {
        return column.name;
    };
    DeviceGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, res, data, paging, filteredSize, size;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.deviceGridService.getDevices(dataSourceModifier.columns, dataSourceModifier.pagination)];
                    case 1:
                        _a = _b.sent(), res = _a.res, data = _a.data, paging = _a.paging;
                        return [4 /*yield*/, this.deviceGridService.getDevicesCount(dataSourceModifier.columns, dataSourceModifier.pagination)];
                    case 2:
                        filteredSize = _b.sent();
                        return [4 /*yield*/, this.deviceGridService.getDevicesTotal()];
                    case 3:
                        size = _b.sent();
                        this.onColumnsChange.emit(dataSourceModifier.columns);
                        this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns));
                        return [2 /*return*/, {
                                res: res,
                                data: data,
                                paging: paging,
                                filteredSize: filteredSize,
                                size: size
                            }];
                }
            });
        });
    };
    DeviceGridComponent.prototype.updateFiltering = function (columnNames, action) {
        var type = action.type;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    };
    DeviceGridComponent.ctorParameters = function () { return [
        { type: DeviceGridService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DeviceGridComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], DeviceGridComponent.prototype, "loadMoreItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DeviceGridComponent.prototype, "loadingItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DeviceGridComponent.prototype, "noMatchingItemsLabel", void 0);
    tslib_1.__decorate([
        Input('columns')
    ], DeviceGridComponent.prototype, "_columns", null);
    tslib_1.__decorate([
        Input('pagination')
    ], DeviceGridComponent.prototype, "_pagination", null);
    tslib_1.__decorate([
        Input('infiniteScroll')
    ], DeviceGridComponent.prototype, "_infiniteScroll", null);
    tslib_1.__decorate([
        Input('actionControls')
    ], DeviceGridComponent.prototype, "_actionControls", null);
    tslib_1.__decorate([
        Input()
    ], DeviceGridComponent.prototype, "selectable", void 0);
    tslib_1.__decorate([
        Input('bulkActionControls')
    ], DeviceGridComponent.prototype, "_bulkActionControls", null);
    tslib_1.__decorate([
        Output()
    ], DeviceGridComponent.prototype, "onColumnsChange", void 0);
    tslib_1.__decorate([
        Output()
    ], DeviceGridComponent.prototype, "onDeviceQueryStringChange", void 0);
    tslib_1.__decorate([
        ViewChild(DataGridComponent, { static: true })
    ], DeviceGridComponent.prototype, "dataGrid", void 0);
    DeviceGridComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-device-grid',
            template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [noMatchingItemsLabel]=\"noMatchingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
        })
    ], DeviceGridComponent);
    return DeviceGridComponent;
}());
export { DeviceGridComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZC8iLCJzb3VyY2VzIjpbImRldmljZS1ncmlkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUdMLGlCQUFpQixFQUVqQixtQkFBbUIsRUFFbkIsT0FBTyxFQUlSLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFNMUQ7SUFxREUsNkJBQW1CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBcEQ5QyxVQUFLLEdBQVcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLHVCQUFrQixHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2xELHNCQUFpQixHQUFXLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3hELHlCQUFvQixHQUFXLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBMkIvRCxlQUFVLEdBQVksS0FBSyxDQUFDO1FBUTNCLG9CQUFlLEdBQXFDLElBQUksWUFBWSxFQUUzRSxDQUFDO1FBQ00sOEJBQXlCLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFFdkYsWUFBTyxHQUF1QixJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6RSxlQUFVLEdBQWUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdkUsbUJBQWMsR0FBb0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDcEYsdUJBQWtCLEdBQXdCLElBQUksQ0FBQyxpQkFBaUIs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dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBY3Rpb25Db250cm9sLFxuICBCdWxrQWN0aW9uQ29udHJvbCxcbiAgRGF0YUdyaWRDb21wb25lbnQsXG4gIERhdGFTb3VyY2VNb2RpZmllcixcbiAgRmlsdGVyaW5nQWN0aW9uVHlwZSxcbiAgRmlsdGVyaW5nTW9kaWZpZXIsXG4gIGdldHRleHQsXG4gIExvYWRNb3JlTW9kZSxcbiAgUGFnaW5hdGlvbixcbiAgU2VydmVyU2lkZURhdGFSZXN1bHRcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9kZXZpY2UtZ3JpZC5tb2RlbHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICcuL2RldmljZS1ncmlkLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZGV2aWNlLWdyaWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2aWNlLWdyaWQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUdyaWRDb21wb25lbnQge1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nID0gZ2V0dGV4dCgnRGV2aWNlcycpO1xuICBASW5wdXQoKSBsb2FkTW9yZUl0ZW1zTGFiZWwgPSBnZXR0ZXh0KCdMb2FkIG1vcmUgZGV2aWNlcycpO1xuICBASW5wdXQoKSBsb2FkaW5nSXRlbXNMYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnTG9hZGluZyBkZXZpY2Vz4oCmJyk7XG4gIEBJbnB1dCgpIG5vTWF0Y2hpbmdJdGVtc0xhYmVsOiBzdHJpbmcgPSBnZXR0ZXh0KCdObyBtYXRjaGluZyBkZXZpY2VzLicpO1xuICBASW5wdXQoJ2NvbHVtbnMnKSBzZXQgX2NvbHVtbnModmFsdWU6IERldmljZUdyaWRDb2x1bW5bXSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5jb2x1bW5zID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KCdwYWdpbmF0aW9uJykgc2V0IF9wYWdpbmF0aW9uKHZhbHVlOiBQYWdpbmF0aW9uKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnBhZ2luYXRpb24gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYWdpbmF0aW9uID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0UGFnaW5hdGlvbigpO1xuICAgIH1cbiAgfVxuICBpbmZpbml0ZVNjcm9sbDogTG9hZE1vcmVNb2RlO1xuICBASW5wdXQoJ2luZmluaXRlU2Nyb2xsJykgc2V0IF9pbmZpbml0ZVNjcm9sbChpbmZpbml0ZVNjcm9sbDogTG9hZE1vcmVNb2RlKSB7XG4gICAgdGhpcy5pbmZpbml0ZVNjcm9sbCA9IGluZmluaXRlU2Nyb2xsO1xuICAgIHRoaXMucGFnaW5hdGlvbiA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0SW5maW5pdGVTY3JvbGxQYWdpbmF0aW9uKCk7XG4gIH1cbiAgQElucHV0KCdhY3Rpb25Db250cm9scycpIHNldCBfYWN0aW9uQ29udHJvbHModmFsdWU6IEFjdGlvbkNvbnRyb2xbXSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5hY3Rpb25Db250cm9scyA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGlvbkNvbnRyb2xzID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0QWN0aW9uQ29udHJvbHMoKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KCkgc2VsZWN0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoJ2J1bGtBY3Rpb25Db250cm9scycpIHNldCBfYnVsa0FjdGlvbkNvbnRyb2xzKHZhbHVlOiBCdWxrQWN0aW9uQ29udHJvbFtdKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmJ1bGtBY3Rpb25Db250cm9scyA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1bGtBY3Rpb25Db250cm9scyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdEJ1bGtBY3Rpb25Db250cm9scygpO1xuICAgIH1cbiAgfVxuICBAT3V0cHV0KCkgb25Db2x1bW5zQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGV2aWNlR3JpZENvbHVtbltdPiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgRGV2aWNlR3JpZENvbHVtbltdXG4gID4oKTtcbiAgQE91dHB1dCgpIG9uRGV2aWNlUXVlcnlTdHJpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0Q29sdW1ucygpO1xuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0UGFnaW5hdGlvbigpO1xuICBhY3Rpb25Db250cm9sczogQWN0aW9uQ29udHJvbFtdID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0QWN0aW9uQ29udHJvbHMoKTtcbiAgYnVsa0FjdGlvbkNvbnRyb2xzOiBCdWxrQWN0aW9uQ29udHJvbFtdID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0QnVsa0FjdGlvbkNvbnRyb2xzKCk7XG4gIHNlcnZlclNpZGVEYXRhQ2FsbGJhY2s6IGFueTtcblxuICBAVmlld0NoaWxkKERhdGFHcmlkQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBkYXRhR3JpZDogRGF0YUdyaWRDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGRldmljZUdyaWRTZXJ2aWNlOiBEZXZpY2VHcmlkU2VydmljZSkge1xuICAgIHRoaXMuc2VydmVyU2lkZURhdGFDYWxsYmFjayA9IHRoaXMub25EYXRhU291cmNlTW9kaWZpZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHRyYWNrQnlOYW1lKF9pbmRleCwgY29sdW1uOiBEZXZpY2VHcmlkQ29sdW1uKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29sdW1uLm5hbWU7XG4gIH1cblxuICBhc3luYyBvbkRhdGFTb3VyY2VNb2RpZmllcihcbiAgICBkYXRhU291cmNlTW9kaWZpZXI6IERhdGFTb3VyY2VNb2RpZmllclxuICApOiBQcm9taXNlPFNlcnZlclNpZGVEYXRhUmVzdWx0PiB7XG4gICAgY29uc3QgeyByZXMsIGRhdGEsIHBhZ2luZyB9ID0gYXdhaXQgdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZXZpY2VzKFxuICAgICAgZGF0YVNvdXJjZU1vZGlmaWVyLmNvbHVtbnMsXG4gICAgICBkYXRhU291cmNlTW9kaWZpZXIucGFnaW5hdGlvblxuICAgICk7XG4gICAgY29uc3QgZmlsdGVyZWRTaXplOiBudW1iZXIgPSBhd2FpdCB0aGlzLmRldmljZUdyaWRTZXJ2aWNlLmdldERldmljZXNDb3VudChcbiAgICAgIGRhdGFTb3VyY2VNb2RpZmllci5jb2x1bW5zLFxuICAgICAgZGF0YVNvdXJjZU1vZGlmaWVyLnBhZ2luYXRpb25cbiAgICApO1xuICAgIGNvbnN0IHNpemU6IG51bWJlciA9IGF3YWl0IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGV2aWNlc1RvdGFsKCk7XG5cbiAgICB0aGlzLm9uQ29sdW1uc0NoYW5nZS5lbWl0KGRhdGFTb3VyY2VNb2RpZmllci5jb2x1bW5zKTtcbiAgICB0aGlzLm9uRGV2aWNlUXVlcnlTdHJpbmdDaGFuZ2UuZW1pdChcbiAgICAgIHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGV2aWNlUXVlcnlTdHJpbmcoZGF0YVNvdXJjZU1vZGlmaWVyLmNvbHVtbnMpXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICByZXMsXG4gICAgICBkYXRhLFxuICAgICAgcGFnaW5nLFxuICAgICAgZmlsdGVyZWRTaXplLFxuICAgICAgc2l6ZVxuICAgIH07XG4gIH1cblxuICB1cGRhdGVGaWx0ZXJpbmcoXG4gICAgY29sdW1uTmFtZXM6IHN0cmluZ1tdLFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogRmlsdGVyaW5nQWN0aW9uVHlwZTtcbiAgICAgIHBheWxvYWQ/OiB7IGZpbHRlcmluZ01vZGlmaWVyOiBGaWx0ZXJpbmdNb2RpZmllciB9O1xuICAgIH1cbiAgKSB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBhY3Rpb247XG4gICAgaWYgKHR5cGUgPT09IEZpbHRlcmluZ0FjdGlvblR5cGUuUmVzZXRGaWx0ZXIpIHtcbiAgICAgIHRoaXMuZGF0YUdyaWQuY2xlYXJGaWx0ZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YUdyaWQudXBkYXRlRmlsdGVyaW5nKGNvbHVtbk5hbWVzLCBhY3Rpb24pO1xuICAgIH1cbiAgfVxufVxuIl19