import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(SerialNumberDeviceGridColumn, _super);
    function SerialNumberDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        _this.name = 'serialNumber';
        _this.header = gettext('Serial number');
        _this.cellRendererComponent = SerialNumberCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'serialNumbers',
                    title: gettext('Show devices with serial number'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = (_a = {},
                        _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                        _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
        return _this;
    }
    return SerialNumberDeviceGridColumn;
}(BaseDeviceGridColumn));
export { SerialNumberDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsLW51bWJlci5kZXZpY2UtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkLyIsInNvdXJjZXMiOlsiY29sdW1ucy9zZXJpYWwtbnVtYmVyLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDNUYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlDO0lBQWtELHdEQUFvQjtJQUNwRTtRQUFBLFlBQ0UsaUJBQU8sU0F1RFI7UUFyREMsSUFBTSx3QkFBd0IsR0FBRywyQkFBMkIsQ0FBQztRQUM3RCxJQUFNLHVCQUF1QixHQUMzQixpRUFBaUUsQ0FBQztRQUVwRSxLQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztRQUMzQixLQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2QyxLQUFJLENBQUMscUJBQXFCLEdBQUcsaUNBQWlDLENBQUM7UUFFL0QsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLGFBQWEsRUFBRTt3QkFDYixJQUFJLEVBQUUsT0FBTzt3QkFDYixLQUFLLEVBQUU7NEJBQ0wsSUFBSSxFQUFFLFFBQVE7eUJBQ2Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSjtvQkFDRSxHQUFHLEVBQUUsZUFBZTtvQkFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDakQsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLEtBQUssRUFBRTt3QkFDTDs0QkFDRSxHQUFHLEVBQUUsaUJBQWlCOzRCQUN0QixPQUFPLEVBQUUsSUFBSTs0QkFDYixXQUFXLEVBQUUsT0FBTyxDQUNsQixtRUFBbUUsQ0FDcEU7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELFNBQVMsRUFBVCxVQUFVLEtBQVU7O2dCQUNsQixJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7b0JBQzlCLE1BQU0sQ0FBQyxJQUFJO3dCQUNULEdBQUMsd0JBQXdCLElBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRTt3QkFDekQsR0FBQyx1QkFBdUIsSUFBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFOzJCQUN6RCxDQUFDO2lCQUNIO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDO1FBRUYsS0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsS0FBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixrQkFBa0IsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztTQUM1RixDQUFDOztJQUNKLENBQUM7SUFDSCxtQ0FBQztBQUFELENBQUMsQUExREQsQ0FBa0Qsb0JBQW9CLEdBMERyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9iYXNlLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL3NlcmlhbC1udW1iZXIuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY2xhc3MgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGNvbnN0IGhhcmR3YXJlU2VyaWFsTnVtYmVyUGF0aCA9ICdjOHlfSGFyZHdhcmUuc2VyaWFsTnVtYmVyJztcbiAgICBjb25zdCB2ZW5kaW5nU2VyaWFsTnVtYmVyUGF0aCA9XG4gICAgICAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8uc2VyaWFsJztcblxuICAgIHRoaXMubmFtZSA9ICdzZXJpYWxOdW1iZXInO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnU2VyaWFsIG51bWJlcicpO1xuICAgIHRoaXMuY2VsbFJlbmRlcmVyQ29tcG9uZW50ID0gU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHNlcmlhbE51bWJlcnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZvcm06IFtcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3NlcmlhbE51bWJlcnMnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdTaG93IGRldmljZXMgd2l0aCBzZXJpYWwgbnVtYmVyJyksXG4gICAgICAgICAgYWRkOiBnZXR0ZXh0KCdPcicpLFxuICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGtleTogJ3NlcmlhbE51bWJlcnNbXScsXG4gICAgICAgICAgICAgIG5vdGl0bGU6IHRydWUsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBnZXR0ZXh0KFxuICAgICAgICAgICAgICAgICdlLmcuIDU0MzIxLTEyMywgeW91IGNhbiB1c2UgYW4gYXN0ZXJpc2sgKCopIGFzIHdpbGRjYXJkIGNoYXJhY3RlcidcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKG1vZGVsLnNlcmlhbE51bWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZmlsdGVyLl9fb3IgPSB7XG4gICAgICAgICAgICBbaGFyZHdhcmVTZXJpYWxOdW1iZXJQYXRoXTogeyBfX2luOiBtb2RlbC5zZXJpYWxOdW1iZXJzIH0sXG4gICAgICAgICAgICBbdmVuZGluZ1NlcmlhbE51bWJlclBhdGhdOiB7IF9faW46IG1vZGVsLnNlcmlhbE51bWJlcnMgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiBoYXJkd2FyZVNlcmlhbE51bWJlclBhdGggfSwgeyBwYXRoOiB2ZW5kaW5nU2VyaWFsTnVtYmVyUGF0aCB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==