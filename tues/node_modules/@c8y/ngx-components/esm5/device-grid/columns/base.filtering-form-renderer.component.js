import * as tslib_1 from "tslib";
import { Component, forwardRef, ViewChild } from '@angular/core';
import { get, cloneDeep } from 'lodash-es';
import { FilteringFormRendererContext } from '@c8y/ngx-components';
import { SchemaFormComponent } from '../schema-form.component';
var BaseFilteringFormRendererComponent = /** @class */ (function () {
    function BaseFilteringFormRendererComponent(context) {
        this.context = context;
    }
    BaseFilteringFormRendererComponent.prototype.ngOnInit = function () {
        var column = this.context.property;
        this.schema = cloneDeep(column.filteringConfig.schema);
        this.form = cloneDeep(column.filteringConfig.form);
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    };
    BaseFilteringFormRendererComponent.prototype.canApply = function () {
        return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
    };
    BaseFilteringFormRendererComponent.prototype.applyFilter = function () {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    };
    BaseFilteringFormRendererComponent.prototype.resetFilter = function () {
        this.context.resetFilter();
    };
    BaseFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: FilteringFormRendererContext }
    ]; };
    tslib_1.__decorate([
        ViewChild(forwardRef(function () { return SchemaFormComponent; }), { static: false })
    ], BaseFilteringFormRendererComponent.prototype, "schemaFormComponent", void 0);
    BaseFilteringFormRendererComponent = tslib_1.__decorate([
        Component({
            template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
        })
    ], BaseFilteringFormRendererComponent);
    return BaseFilteringFormRendererComponent;
}());
export { BaseFilteringFormRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5maWx0ZXJpbmctZm9ybS1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkLyIsInNvdXJjZXMiOlsiY29sdW1ucy9iYXNlLmZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBTS9EO0lBUUUsNENBQW1CLE9BQXFDO1FBQXJDLFlBQU8sR0FBUCxPQUFPLENBQThCO0lBQUcsQ0FBQztJQUU1RCxxREFBUSxHQUFSO1FBQ0UsSUFBTSxNQUFNLEdBQXFCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLFlBQVksRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVELHFEQUFRLEdBQVI7UUFDRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsd0RBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ3ZCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx3REFBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDOztnQkF0QjJCLDRCQUE0Qjs7SUFQYTtRQUFwRSxTQUFTLENBQUMsVUFBVSxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO21GQUEwQjtJQURuRixrQ0FBa0M7UUFIOUMsU0FBUyxDQUFDO1lBQ1QsMGxCQUE0RDtTQUM3RCxDQUFDO09BQ1csa0NBQWtDLENBK0I5QztJQUFELHlDQUFDO0NBQUEsQUEvQkQsSUErQkM7U0EvQlksa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBPbkluaXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0LCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL3NjaGVtYS1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi4vZGV2aWNlLWdyaWQubW9kZWxzJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9iYXNlLmZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZChmb3J3YXJkUmVmKCgpID0+IFNjaGVtYUZvcm1Db21wb25lbnQpLCB7IHN0YXRpYzogZmFsc2UgfSkgc2NoZW1hRm9ybUNvbXBvbmVudDogYW55O1xuXG4gIHNjaGVtYTtcbiAgZm9ybTtcbiAgbW9kZWw7XG4gIG9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGNvbnRleHQ6IEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHQpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgY29sdW1uOiBEZXZpY2VHcmlkQ29sdW1uID0gdGhpcy5jb250ZXh0LnByb3BlcnR5O1xuICAgIHRoaXMuc2NoZW1hID0gY2xvbmVEZWVwKGNvbHVtbi5maWx0ZXJpbmdDb25maWcuc2NoZW1hKTtcbiAgICB0aGlzLmZvcm0gPSBjbG9uZURlZXAoY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5mb3JtKTtcbiAgICB0aGlzLm1vZGVsID0gY2xvbmVEZWVwKGNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5IHx8IHt9KTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7IGZvcm1EZWZhdWx0czogeyBuZ01vZGVsT3B0aW9uczogeyBkZWJvdW5jZTogMTAwIH0gfSB9O1xuICB9XG5cbiAgY2FuQXBwbHkoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLnNjaGVtYUZvcm1Db21wb25lbnQsICckY29tcG9uZW50U2NvcGUudm0ubmdGb3JtLiRpbnZhbGlkJyk7XG4gIH1cblxuICBhcHBseUZpbHRlcigpIHtcbiAgICB0aGlzLmNvbnRleHQuYXBwbHlGaWx0ZXIoe1xuICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeTogdGhpcy5tb2RlbFxuICAgIH0pO1xuICB9XG5cbiAgcmVzZXRGaWx0ZXIoKSB7XG4gICAgdGhpcy5jb250ZXh0LnJlc2V0RmlsdGVyKCk7XG4gIH1cbn1cbiJdfQ==