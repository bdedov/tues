import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { assign, forEach, get, identity, map, remove, sortBy, transform } from 'lodash-es';
import { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';
import { GroupDeviceGridColumn } from './columns/group.device-grid-column';
import { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';
import { ModelDeviceGridColumn } from './columns/model.device-grid-column';
import { NameDeviceGridColumn } from './columns/name.device-grid-column';
import { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';
import { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';
import { StatusDeviceGridColumn } from './columns/status.device-grid-column';
import { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';
var DeviceGridService = /** @class */ (function () {
    function DeviceGridService(inventoryService, translateService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.queriesUtil = new QueriesUtil();
    }
    DeviceGridService.prototype.getDefaultColumns = function () {
        return [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
    };
    DeviceGridService.prototype.getDefaultPagination = function () {
        return {
            pageSize: 10,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getInfiniteScrollPagination = function () {
        return {
            pageSize: 50,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getDefaultActionControls = function () {
        var _this = this;
        return [
            {
                type: "DELETE" /* Delete */,
                callback: function (item) { return _this.delete(item); }
            }
        ];
    };
    DeviceGridService.prototype.getDefaultBulkActionControls = function () {
        return [];
    };
    DeviceGridService.prototype.getProperName = function (device) {
        var id = device.id, name = device.name;
        return name ? name : this.translateService.instant('Device {{id}}', { id: id });
    };
    DeviceGridService.prototype.getModel = function (device) {
        var hardware = this.getHardware(device);
        return hardware && hardware.model;
    };
    DeviceGridService.prototype.getSerialNumber = function (device) {
        var hardware = this.getHardware(device);
        var serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    };
    DeviceGridService.prototype.getParentsNames = function (device, featuredParentId) {
        var assetParentsReferences = device.assetParents.references;
        var assetParents = map(assetParentsReferences, 'managedObject');
        var sortedByName = sortBy(assetParents, ['name']);
        var featuredItems = remove(sortedByName, { id: featuredParentId });
        var items = featuredItems.concat(sortedByName);
        var names = map(items, 'name');
        return names.join(', ');
    };
    DeviceGridService.prototype.getDeviceHref = function (device) {
        return "#/device/" + device.id;
    };
    DeviceGridService.prototype.getAlarmsHref = function (device) {
        return this.getDeviceHref(device) + "/alarms";
    };
    DeviceGridService.prototype.delete = function (device) {
        console.log('should delete', device);
    };
    DeviceGridService.prototype.getDevices = function (columns, pagination) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                filters = tslib_1.__assign({}, this.getDevicesFilters(columns, pagination), { withParents: true });
                return [2 /*return*/, this.inventoryService.list(filters)];
            });
        });
    };
    DeviceGridService.prototype.getDevicesCount = function (columns, pagination) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = tslib_1.__assign({}, this.getDevicesFilters(columns, pagination), { pageSize: 1, currentPage: 1 });
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getDevicesTotal = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = {
                            q: '',
                            pageSize: 1,
                            withTotalPages: true
                        };
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getDeviceQueryString = function (columns) {
        return this.queriesUtil.buildQuery(this.getQueryObj(columns));
    };
    DeviceGridService.prototype.getHardware = function (device) {
        var hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    };
    DeviceGridService.prototype.isVendme = function (device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    };
    DeviceGridService.prototype.getDevicesFilters = function (columns, pagination) {
        return {
            q: this.getDeviceQueryString(columns),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    };
    DeviceGridService.prototype.getQueryObj = function (columns) {
        var _this = this;
        return transform(columns, function (query, column) { return _this.extendQueryByColumn(query, column); }, {
            __filter: {},
            __orderby: []
        });
    };
    DeviceGridService.prototype.extendQueryByColumn = function (query, column) {
        if (column.filterable && column.externalFilterQuery) {
            var getFilter = column.filteringConfig.getFilter || identity;
            var queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(function (obj) { return query.__filter.__and.push(obj); });
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            var cs_1 = {};
            forEach(column.sortingConfig.pathSortingConfigs, function (pathSortingConfig) {
                cs_1[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs_1);
        }
        return query;
    };
    DeviceGridService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TranslateService }
    ]; };
    DeviceGridService = tslib_1.__decorate([
        Injectable()
    ], DeviceGridService);
    return DeviceGridService;
}());
export { DeviceGridService };
//# sourceMappingURL=data:application/json;base64,