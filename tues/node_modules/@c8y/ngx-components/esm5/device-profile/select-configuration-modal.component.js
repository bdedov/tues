import * as tslib_1 from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { QueriesUtil } from '@c8y/client';
import { Subject } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';
var SelectConfigurationModalComponent = /** @class */ (function () {
    function SelectConfigurationModalComponent(repositoryService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(function () { return _this.getItems(); }), map(function (_a) {
            var data = _a.data;
            return _this.aggregate(data);
        }));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    SelectConfigurationModalComponent.prototype.search = function (searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: "*" + searchTerm + "*" }, { configurationType: "*" + searchTerm + "*" });
        }
        this.load.next();
    };
    SelectConfigurationModalComponent.prototype.result = function (selectedItems) {
        this.resultEmitter.emit(selectedItems);
    };
    SelectConfigurationModalComponent.prototype.getItems = function () {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    };
    SelectConfigurationModalComponent.prototype.aggregate = function (mos) {
        var selectedItems = this.selected;
        return mos.reduce(function (acc, curr) {
            curr.configurationType = curr.configurationType || curr.name;
            var selected = selectedItems && selectedItems.filter(function (val) { return val.url === curr.url; }).length > 0;
            var selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected: selected
            };
            var selectModalObject = acc.find(function (val) { return val.body[0].value === curr.configurationType; });
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    };
    SelectConfigurationModalComponent.ctorParameters = function () { return [
        { type: RepositoryService }
    ]; };
    SelectConfigurationModalComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-select-configuration-modal',
            template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
        })
    ], SelectConfigurationModalComponent);
    return SelectConfigurationModalComponent;
}());
export { SelectConfigurationModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvbmZpZ3VyYXRpb24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtcHJvZmlsZS8iLCJzb3VyY2VzIjpbInNlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLE9BQU8sRUFBdUQsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRyxPQUFPLEVBQWtCLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBT25GO0lBY0UsMkNBQW9CLGlCQUFvQztRQUF4RCxpQkFFQztRQUZtQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBYnhELFVBQUssR0FBVyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNoRCxTQUFJLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDcEMsbUJBQWMsR0FBc0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2hELFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFFBQVEsRUFBRSxFQUFmLENBQWUsQ0FBQyxFQUNoQyxHQUFHLENBQUMsVUFBQyxFQUFRO2dCQUFOLGNBQUk7WUFBTyxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQXBCLENBQW9CLENBQUMsQ0FDeEMsQ0FBQztRQUNGLGtCQUFhLEdBQXdCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFN0Qsb0JBQWUsR0FBUSxFQUFFLENB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QUFRLEVBQUUsZ0NBQWdDO1lBQzFDLGlSQUEwRDtTQUMzRCxDQUFDO09BQ1csaUNBQWlDLENBb0U3QztJQUFELHdDQUFDO0NBQUEsQUFwRUQsSUFvRUM7U0FwRVksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQsIElTZWxlY3RNb2RhbE9iamVjdCwgSVNlbGVjdE1vZGFsT3B0aW9uLCBNb2RhbExhYmVscyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VydmljZSwgUmVwb3NpdG9yeVR5cGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnknO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlbGVjdC1jb25maWd1cmF0aW9uLW1vZGFsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb25maWd1cmF0aW9uTW9kYWxDb21wb25lbnQge1xuICB0aXRsZTogc3RyaW5nID0gZ2V0dGV4dCgnU2VsZWN0IGNvbmZpZ3VyYXRpb24nKTtcbiAgbG9hZDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGNvbmZpZ3VyYXRpb25zOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMubG9hZC5waXBlKFxuICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEl0ZW1zKCkpLFxuICAgIG1hcCgoeyBkYXRhIH0pID0+IHRoaXMuYWdncmVnYXRlKGRhdGEpKVxuICApO1xuICByZXN1bHRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHNlbGVjdGVkOiBbXTtcbiAgZGV2aWNlVHlwZVF1ZXJ5OiBhbnkgPSB7fTtcbiAgc2VhcmNoUXVlcnk6IGFueSA9IHt9O1xuICBsYWJlbHM6IE1vZGFsTGFiZWxzID0geyBvazogZ2V0dGV4dCgnU2F2ZScpIH07XG4gIHByaXZhdGUgcXVlcmllc1V0aWw6IFF1ZXJpZXNVdGlsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVwb3NpdG9yeVNlcnZpY2U6IFJlcG9zaXRvcnlTZXJ2aWNlKSB7XG4gICAgdGhpcy5xdWVyaWVzVXRpbCA9IG5ldyBRdWVyaWVzVXRpbCgpO1xuICB9XG5cbiAgc2VhcmNoKHNlYXJjaFRlcm0pIHtcbiAgICBpZiAoIXNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMuc2VhcmNoUXVlcnkgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWFyY2hRdWVyeSA9IHRoaXMucXVlcmllc1V0aWwuYWRkT3JGaWx0ZXIoXG4gICAgICAgIHsgbmFtZTogYCoke3NlYXJjaFRlcm19KmAgfSxcbiAgICAgICAgeyBjb25maWd1cmF0aW9uVHlwZTogYCoke3NlYXJjaFRlcm19KmAgfVxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5sb2FkLm5leHQoKTtcbiAgfVxuXG4gIHJlc3VsdChzZWxlY3RlZEl0ZW1zKSB7XG4gICAgdGhpcy5yZXN1bHRFbWl0dGVyLmVtaXQoc2VsZWN0ZWRJdGVtcyk7XG4gIH1cblxuICBnZXRJdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0UmVwb3NpdG9yeUVudHJpZXMoUmVwb3NpdG9yeVR5cGUuQ09ORklHVVJBVElPTiwge1xuICAgICAgcXVlcnk6IHRoaXMucXVlcmllc1V0aWwuYWRkT3JGaWx0ZXIodGhpcy5kZXZpY2VUeXBlUXVlcnksIHRoaXMuc2VhcmNoUXVlcnkpLFxuICAgICAgcGFyYW1zOiB7IHBhZ2VTaXplOiAxMDAgfVxuICAgIH0pO1xuICB9XG5cbiAgYWdncmVnYXRlKG1vczogSU1hbmFnZWRPYmplY3RbXSk6IElTZWxlY3RNb2RhbE9iamVjdFtdIHtcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW1zOiBhbnlbXSA9IHRoaXMuc2VsZWN0ZWQ7XG4gICAgcmV0dXJuIG1vcy5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgY3Vyci5jb25maWd1cmF0aW9uVHlwZSA9IGN1cnIuY29uZmlndXJhdGlvblR5cGUgfHwgY3Vyci5uYW1lO1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPVxuICAgICAgICBzZWxlY3RlZEl0ZW1zICYmIHNlbGVjdGVkSXRlbXMuZmlsdGVyKHZhbCA9PiB2YWwudXJsID09PSBjdXJyLnVybCkubGVuZ3RoID4gMDtcbiAgICAgIGNvbnN0IHNlbGVjdE1vZGFsT3B0aW9uOiBJU2VsZWN0TW9kYWxPcHRpb24gPSB7XG4gICAgICAgIGJvZHk6IFt7IHZhbHVlOiBjdXJyLm5hbWUgfV0sXG4gICAgICAgIG9iajogY3VycixcbiAgICAgICAgc2VsZWN0ZWRcbiAgICAgIH07XG4gICAgICBsZXQgc2VsZWN0TW9kYWxPYmplY3Q6IElTZWxlY3RNb2RhbE9iamVjdCA9IGFjYy5maW5kKFxuICAgICAgICB2YWwgPT4gdmFsLmJvZHlbMF0udmFsdWUgPT09IGN1cnIuY29uZmlndXJhdGlvblR5cGVcbiAgICAgICkgYXMgSVNlbGVjdE1vZGFsT2JqZWN0O1xuICAgICAgaWYgKHNlbGVjdE1vZGFsT2JqZWN0KSB7XG4gICAgICAgIHNlbGVjdE1vZGFsT2JqZWN0Lm9wdGlvbnMucHVzaChzZWxlY3RNb2RhbE9wdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RNb2RhbE9iamVjdCA9IHtcbiAgICAgICAgICBncm91cElkOiBjdXJyLmlkLFxuICAgICAgICAgIGJvZHk6IFt7IHZhbHVlOiBjdXJyLmNvbmZpZ3VyYXRpb25UeXBlIH1dLFxuICAgICAgICAgIG9wdGlvbnM6IFtzZWxlY3RNb2RhbE9wdGlvbl1cbiAgICAgICAgfTtcbiAgICAgICAgYWNjLnB1c2goc2VsZWN0TW9kYWxPYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIH1cbn1cbiJdfQ==