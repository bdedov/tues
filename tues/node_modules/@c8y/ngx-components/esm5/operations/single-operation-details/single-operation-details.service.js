import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { IOperation, OperationService } from '@c8y/client';
import { SingleOperationModalComponent } from './single-operation-modal.component';
var SingleOperationDetailsService = /** @class */ (function () {
    function SingleOperationDetailsService(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    SingleOperationDetailsService.prototype.openDetails = function (operationOrOperationId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation, _a, initialState;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!operationOrOperationId.id) return [3 /*break*/, 1];
                        _a = operationOrOperationId;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.operationService.detail(operationOrOperationId)];
                    case 2:
                        _a = (_b.sent()).data;
                        _b.label = 3;
                    case 3:
                        operation = _a;
                        initialState = tslib_1.__assign({ operation: operation }, options);
                        this.modalService.show(SingleOperationModalComponent, {
                            initialState: initialState,
                            class: 'modal-lg'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationDetailsService.ctorParameters = function () { return [
        { type: OperationService },
        { type: BsModalService }
    ]; };
    SingleOperationDetailsService = tslib_1.__decorate([
        Injectable()
    ], SingleOperationDetailsService);
    return SingleOperationDetailsService;
}());
export { SingleOperationDetailsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvIiwic291cmNlcyI6WyJzaW5nbGUtb3BlcmF0aW9uLWRldGFpbHMvc2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0QsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFHbkY7SUFDRSx1Q0FBb0IsZ0JBQWtDLEVBQVUsWUFBNEI7UUFBeEUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUFHLENBQUM7SUFFaEc7Ozs7OztPQU1HO0lBQ0csbURBQVcsR0FBakIsVUFDRSxzQkFBb0QsRUFDcEQsT0FBcUQ7Ozs7Ozs2QkFFdEIsc0JBQXFDLENBQUMsRUFBRSxFQUF6Qyx3QkFBeUM7d0JBQ25FLEtBQUMsc0JBQXFDLENBQUE7OzRCQUNyQyxxQkFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEVBQUE7O3dCQUEzRCxLQUFBLENBQUMsU0FBMEQsQ0FBQyxDQUFDLElBQUksQ0FBQTs7O3dCQUYvRCxTQUFTLEtBRXNEO3dCQUMvRCxZQUFZLHNCQUFLLFNBQVMsV0FBQSxJQUFLLE9BQU8sQ0FBRSxDQUFDO3dCQUUvQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRTs0QkFDcEQsWUFBWSxjQUFBOzRCQUNaLEtBQUssRUFBRSxVQUFVO3lCQUNsQixDQUFDLENBQUM7Ozs7O0tBQ0o7O2dCQXRCcUMsZ0JBQWdCO2dCQUF3QixjQUFjOztJQURqRiw2QkFBNkI7UUFEekMsVUFBVSxFQUFFO09BQ0EsNkJBQTZCLENBd0J6QztJQUFELG9DQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F4QlksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IElPcGVyYXRpb24sIE9wZXJhdGlvblNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTaW5nbGVPcGVyYXRpb25Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vc2luZ2xlLW9wZXJhdGlvbi1tb2RhbC5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2luZ2xlT3BlcmF0aW9uRGV0YWlsc1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wZXJhdGlvblNlcnZpY2U6IE9wZXJhdGlvblNlcnZpY2UsIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSkge31cblxuICAvKipcbiAgICogT3BlbnMgYSBtb2RhbCB3aW5kb3cgd2l0aCB0aGUgZGV0YWlscyBvZiBnaXZlbiBzaW5nbGUgb3BlcmF0aW9uLlxuICAgKiBAcGFyYW0gb3BlcmF0aW9uT3JPcGVyYXRpb25JZCBPcGVyYXRpb24ncyBvYmplY3Qgb3IgaWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9uczpcbiAgICogLSBgY29sbGFwc2VkYDogYm9vbGVhbiAtIHdoZXRoZXIgdGhlIGRldGFpbHMgcGFuZSBzaG91bGQgYmUgaW5pdGlhbGx5IGNvbGxhcHNlZFxuICAgKiAtIGByZWFkT25seWA6IGJvb2xlYW4gLSB3aGV0aGVyIHRoZSBkZXRhaWxzIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gcmVhZC1vbmx5IG1vZGVcbiAgICovXG4gIGFzeW5jIG9wZW5EZXRhaWxzKFxuICAgIG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQ6IElPcGVyYXRpb24gfCBzdHJpbmcgfCBudW1iZXIsXG4gICAgb3B0aW9ucz86IHsgY29sbGFwc2VkPzogYm9vbGVhbjsgcmVhZE9ubHk/OiBib29sZWFuIH1cbiAgKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uOiBJT3BlcmF0aW9uID0gKG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQgYXMgSU9wZXJhdGlvbikuaWRcbiAgICAgID8gKG9wZXJhdGlvbk9yT3BlcmF0aW9uSWQgYXMgSU9wZXJhdGlvbilcbiAgICAgIDogKGF3YWl0IHRoaXMub3BlcmF0aW9uU2VydmljZS5kZXRhaWwob3BlcmF0aW9uT3JPcGVyYXRpb25JZCkpLmRhdGE7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0geyBvcGVyYXRpb24sIC4uLm9wdGlvbnMgfTtcblxuICAgIHRoaXMubW9kYWxTZXJ2aWNlLnNob3coU2luZ2xlT3BlcmF0aW9uTW9kYWxDb21wb25lbnQsIHtcbiAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgIGNsYXNzOiAnbW9kYWwtbGcnXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==