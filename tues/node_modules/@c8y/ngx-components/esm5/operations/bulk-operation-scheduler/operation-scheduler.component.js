import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, Validators } from '@angular/forms';
import { gettext } from '@c8y/ngx-components';
import { isEmpty } from 'lodash-es';
import { throttleTime } from 'rxjs/operators';
var OperationSchedulerComponent = /** @class */ (function () {
    function OperationSchedulerComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.placeholder = gettext('Start date');
        this.delayErrors = null;
        this.pickerErrors = null;
        this.DELAY_SECONDS_DEFAULT = 1;
        this.DELAY_MILLISECONDS_DEFAULT = 1;
        this.MINUTES_AHEAD_DEFAULT = 5;
        this.delaySeconds = this.DELAY_SECONDS_DEFAULT;
        this.delayMilliseconds = this.DELAY_MILLISECONDS_DEFAULT;
        this.minutesAhead = this.MINUTES_AHEAD_DEFAULT;
        this.currentUnit = 'seconds';
    }
    OperationSchedulerComponent_1 = OperationSchedulerComponent;
    Object.defineProperty(OperationSchedulerComponent.prototype, "_minutesAhead", {
        set: function (minutes) {
            if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {
                this.minutesAhead = minutes;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperationSchedulerComponent.prototype, "_delayConfig", {
        set: function (config) {
            if (config) {
                if (config.seconds > this.DELAY_SECONDS_DEFAULT) {
                    this.delaySeconds = config.seconds;
                }
                if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {
                    this.delayMilliseconds = config.milliseconds;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    OperationSchedulerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.minDate = new Date();
        this.initialDate = new Date(this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead));
        this.minDelay = this.delaySeconds;
        this.fgOperationScheduler = this.formBuilder.group({
            picker: ['', [Validators.required, this.dateValidation]],
            time: ['', [Validators.required, this.timeValidation]],
            delay: ['', [Validators.required, Validators.min(this.minDelay)]],
            unit: ['seconds']
        });
        this.fgOperationScheduler.patchValue({
            picker: this.initialDate,
            time: this.initialDate,
            delay: this.minDelay
        });
        // Due to the validation of picker and time it could be possible that value changes
        // are emitted more than once. Therefore we throttle the emits.
        var valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));
        this.subscription = valueChanges$.subscribe(function (data) {
            _this.delayErrors = _this.fgOperationScheduler.controls.delay.errors;
            _this.pickerErrors = _this.fgOperationScheduler.controls.picker.errors;
            _this.convertDelayHandler(data.unit);
            _this.emitData(data);
        });
    };
    OperationSchedulerComponent.prototype.ngOnDestroy = function () {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    OperationSchedulerComponent.prototype.writeValue = function (value) {
        if (value) {
            this.fgOperationScheduler.patchValue({
                picker: value.scheduledDate,
                time: value.scheduledDate,
                delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,
                unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'
            });
        }
    };
    OperationSchedulerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    OperationSchedulerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    OperationSchedulerComponent.prototype.setDisabledState = function (isDisabled) {
        isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();
    };
    OperationSchedulerComponent.prototype.validate = function () {
        if (this.fgOperationScheduler.invalid) {
            return tslib_1.__assign({}, this.fgOperationScheduler.controls.picker.errors, this.fgOperationScheduler.controls.time.errors, this.fgOperationScheduler.controls.delay.errors);
        }
    };
    OperationSchedulerComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChanged = fn;
    };
    OperationSchedulerComponent.prototype.markAsTouched = function () {
        if (this.onTouched) {
            this.onTouched();
        }
    };
    OperationSchedulerComponent.prototype.convertDelayHandler = function (unit) {
        if (this.currentUnit === unit) {
            return;
        }
        this.currentUnit = unit;
        this.convertDelay(this.currentUnit);
        // update validator on delay control to make sure that
        // switching from minutes to seconds or vice versa does not harm validation.
        this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);
        this.fgOperationScheduler.controls.delay.updateValueAndValidity();
    };
    OperationSchedulerComponent.prototype.emitData = function (data) {
        if (this.onValidatorChanged) {
            this.onValidatorChanged();
        }
        if (data.picker && data.time) {
            data.picker = this.combineDateAndTime(data.picker, data.time);
        }
        this.convertDelay(this.currentUnit);
        data.delayInSeconds = this.delayInSeconds;
        if (this.onChange) {
            this.onChange({
                delayInSeconds: data.delayInSeconds,
                scheduledDate: data.picker
            });
        }
    };
    OperationSchedulerComponent.prototype.convertDelay = function (unit) {
        if (unit && this.fgOperationScheduler.controls.delay.value) {
            this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;
            if (unit === 'milliseconds') {
                this.minDelay =
                    this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT
                        ? this.delayMilliseconds
                        : this.DELAY_MILLISECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;
            }
            else {
                this.delaySeconds = this.fgOperationScheduler.controls.delay.value;
                this.minDelay =
                    this.delaySeconds > this.DELAY_SECONDS_DEFAULT
                        ? this.delaySeconds
                        : this.DELAY_SECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;
            }
        }
    };
    OperationSchedulerComponent.prototype.combineDateAndTime = function (date, time) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
    };
    OperationSchedulerComponent.prototype.dateValidation = function (fControl) {
        if (fControl.value) {
            var date = fControl.value;
            fControl.parent.get('time').setValue(date);
            return date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
        }
        return { dateValidation: true };
    };
    OperationSchedulerComponent.prototype.timeValidation = function (fControl) {
        if (fControl.value) {
            var date = fControl.value;
            var result = date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
            var picker = fControl.parent.get('picker');
            if (result) {
                picker.setErrors(result);
                picker.markAsTouched();
                return result;
            }
            if (picker && picker.errors && picker.errors.dateValidation) {
                delete picker.errors.dateValidation;
                if (isEmpty(picker.errors)) {
                    picker.setErrors(null);
                    return result;
                }
                picker.setErrors(picker.errors);
            }
            return result;
        }
        return { dateValidation: true };
    };
    var OperationSchedulerComponent_1;
    OperationSchedulerComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    tslib_1.__decorate([
        Input('minutesAhead')
    ], OperationSchedulerComponent.prototype, "_minutesAhead", null);
    tslib_1.__decorate([
        Input('delayConfig')
    ], OperationSchedulerComponent.prototype, "_delayConfig", null);
    OperationSchedulerComponent = OperationSchedulerComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'c8y-operation-scheduler',
            template: "<div [formGroup]=\"fgOperationScheduler\">\n  <div class=\"form-group m-0\">\n    <label translate>Start date</label>\n    <div class=\"datetime-picker\">\n      <c8y-form-group class=\"datepicker\">\n        <input\n          formControlName=\"picker\"\n          class=\"form-control\"\n          placeholder=\"{{ placeholder | translate }}\"\n          [bsConfig]=\"{ customTodayClass: 'today' }\"\n          [minDate]=\"minDate\"\n          bsDatepicker\n          required\n          (blur)=\"markAsTouched()\"\n        />\n        <c8y-messages *ngIf=\"pickerErrors\">\n          <c8y-message *ngIf=\"pickerErrors.required\" translate>\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"pickerErrors.dateValidation && !pickerErrors.required\" translate>\n            Select time in the future.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n      <timepicker\n        class=\"form-group\"\n        [showSpinners]=\"false\"\n        [showMeridian]=\"false\"\n        formControlName=\"time\"\n        (blur)=\"markAsTouched()\"\n      ></timepicker>\n    </div>\n  </div>\n  <div class=\"form-group m-0\">\n    <c8y-form-group [hasError]=\"delayErrors\">\n      <label translate>Delay</label>\n      <div class=\"input-group\">\n        <input\n          formControlName=\"delay\"\n          type=\"number\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 15\"\n          required\n          (blur)=\"markAsTouched()\"\n        />\n        <div class=\"input-group-btn\">\n          <div class=\"c8y-select-wrapper\">\n            <select formControlName=\"unit\" class=\"form-control\" (blur)=\"markAsTouched()\">\n              <option value=\"seconds\" translate>Seconds</option>\n              <option value=\"milliseconds\" translate>Milliseconds</option>\n            </select>\n            <span></span>\n          </div>\n        </div>\n      </div>\n      <c8y-messages *ngIf=\"delayErrors\">\n        <c8y-message *ngIf=\"delayErrors.required\" translate>\n          This field is required.\n        </c8y-message>\n        <c8y-message\n          *ngIf=\"delayErrors.min && !delayErrors.required\"\n          translate\n          ngNonBindable\n          [translateParams]=\"{ delay: minDelay }\"\n        >\n          Minimum value is {{ delay }}.\n        </c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n  </div>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return OperationSchedulerComponent_1; })
                },
                {
                    provide: NG_VALIDATORS,
                    multi: true,
                    useExisting: forwardRef(function () { return OperationSchedulerComponent_1; })
                }
            ]
        })
    ], OperationSchedulerComponent);
    return OperationSchedulerComponent;
}());
export { OperationSchedulerComponent };
//# sourceMappingURL=data:application/json;base64,