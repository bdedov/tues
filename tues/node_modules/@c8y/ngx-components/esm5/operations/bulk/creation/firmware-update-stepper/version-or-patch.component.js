import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { of } from 'rxjs';
import { shareReplay, map, switchMap, distinctUntilKeyChanged, distinctUntilChanged, catchError, tap } from 'rxjs/operators';
import { IManagedObject, IResultList, InventoryService } from '@c8y/client';
import { memoize } from '@c8y/ngx-components';
import { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { property } from 'lodash-es';
var VersionOrPatchComponent = /** @class */ (function () {
    function VersionOrPatchComponent(repositoryService, inventoryService, bulkOpsService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(function (id) { return _this.inventoryService.detail$(id).pipe(catchError(function (error) { return of(error); })); }), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) { return _this.repositoryService.listBaseVersions(firmware); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(function (firmware) { return _this.repositoryService.isLegacyEntry(firmware); }), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    VersionOrPatchComponent.prototype.getBinaryName$ = function (binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    };
    VersionOrPatchComponent.prototype.getBaseVersionAndPatches$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) {
            return _this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion);
        }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.getPatchVersionsCount$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function () { return _this.firmware$; }), switchMap(function (firmware) { return _this.repositoryService.getPatchVersionsCount$(firmware, baseVersion); }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.selectVersionOrPatch = function (selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    };
    VersionOrPatchComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: InventoryService },
        { type: BulkOperationsService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], VersionOrPatchComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output()
    ], VersionOrPatchComponent.prototype, "versionOrPatch", void 0);
    tslib_1.__decorate([
        memoize()
    ], VersionOrPatchComponent.prototype, "getBinaryName$", null);
    tslib_1.__decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
    tslib_1.__decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);
    VersionOrPatchComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-version-or-patch-step',
            template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
        })
    ], VersionOrPatchComponent);
    return VersionOrPatchComponent;
}());
export { VersionOrPatchComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1vci1wYXRjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvIiwic291cmNlcyI6WyJidWxrL2NyZWF0aW9uL2Zpcm13YXJlLXVwZGF0ZS1zdGVwcGVyL3ZlcnNpb24tb3ItcGF0Y2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUNMLFdBQVcsRUFDWCxHQUFHLEVBQ0gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixvQkFBb0IsRUFDcEIsVUFBVSxFQUNWLEdBQUcsRUFDSixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDL0YsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1yQztJQTZCRSxpQ0FDVSxpQkFBb0MsRUFDcEMsZ0JBQWtDLEVBQ2xDLGNBQXFDO1FBSC9DLGlCQU1DO1FBTFMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQTlCckMsbUJBQWMsR0FBaUMsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFFNUYsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFD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QUFULE1BQU0sRUFBRTttRUFBbUY7SUFvQzVGO1FBREMsT0FBTyxFQUFFO2lFQUdUO0lBR0Q7UUFEQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDOzRFQVN2QjtJQUdEO1FBREMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzt5RUFRdkI7SUE3RFUsdUJBQXVCO1FBSm5DLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsazhHQUE4QztTQUMvQyxDQUFDO09BQ1csdUJBQXVCLENBb0VuQztJQUFELDhCQUFDO0NBQUEsQUFwRUQsSUFvRUM7U0FwRVksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBzaGFyZVJlcGxheSxcbiAgbWFwLFxuICBzd2l0Y2hNYXAsXG4gIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgY2F0Y2hFcnJvcixcbiAgdGFwXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJUmVzdWx0TGlzdCwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlLCBGaXJtd2FyZUJpbmFyeSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdmVyc2lvbi1vci1wYXRjaC1zdGVwJyxcbiAgdGVtcGxhdGVVcmw6ICd2ZXJzaW9uLW9yLXBhdGNoLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uT3JQYXRjaENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNlbGVjdGVkOiBJTWFuYWdlZE9iamVjdDtcbiAgQE91dHB1dCgpIHZlcnNpb25PclBhdGNoOiBFdmVudEVtaXR0ZXI8SU1hbmFnZWRPYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxJTWFuYWdlZE9iamVjdD4oKTtcblxuICBlbGVtZW50Q291bnQ6IG51bWJlciA9IDA7XG4gIEREX0xPV19DT1VOVDogbnVtYmVyID0gMTA7XG5cbiAgZmlybXdhcmUkOiBPYnNlcnZhYmxlPElNYW5hZ2VkT2JqZWN0PiA9IHRoaXMuYnVsa09wc1NlcnZpY2UuZmlybXdhcmVJZC5waXBlKFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgc3dpdGNoTWFwKGlkID0+IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwkKGlkKS5waXBlKGNhdGNoRXJyb3IoZXJyb3IgPT4gb2YoZXJyb3IpKSkpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG5cbiAgYmFzZVZlcnNpb25zJDogT2JzZXJ2YWJsZTxJUmVzdWx0TGlzdDxJTWFuYWdlZE9iamVjdD4+ID0gdGhpcy5maXJtd2FyZSQucGlwZShcbiAgICBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgnaWQnKSxcbiAgICBzd2l0Y2hNYXAoZmlybXdhcmUgPT4gdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0QmFzZVZlcnNpb25zKGZpcm13YXJlKSksXG4gICAgdGFwKHJlc3AgPT4ge1xuICAgICAgdGhpcy5lbGVtZW50Q291bnQgPSByZXNwLmRhdGEgPyByZXNwLmRhdGEubGVuZ3RoIDogMDtcbiAgICB9KSxcbiAgICBzaGFyZVJlcGxheSgxKVxuICApO1xuXG4gIGlzTGVnYWN5JDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZmlybXdhcmUkLnBpcGUoXG4gICAgbWFwKGZpcm13YXJlID0+IHRoaXMucmVwb3NpdG9yeVNlcnZpY2UuaXNMZWdhY3lFbnRyeShmaXJtd2FyZSkpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG5cbiAgZXhwYW5kZWQ6IHsgW2lkOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBidWxrT3BzU2VydmljZTogQnVsa09wZXJhdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuRERfTE9XX0NPVU5UID0gdGhpcy5idWxrT3BzU2VydmljZS5ERF9MT1dfQ09VTlQ7XG4gIH1cblxuICBAbWVtb2l6ZSgpXG4gIGdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCkge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJpbmFyeU5hbWUkKGJpbmFyeVVybCk7XG4gIH1cblxuICBAbWVtb2l6ZShwcm9wZXJ0eSgnaWQnKSlcbiAgZ2V0QmFzZVZlcnNpb25BbmRQYXRjaGVzJChiYXNlVmVyc2lvbikge1xuICAgIHJldHVybiB0aGlzLmZpcm13YXJlJC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoJ2lkJyksXG4gICAgICBzd2l0Y2hNYXAoZmlybXdhcmUgPT5cbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5U2VydmljZS5saXN0QmFzZVZlcnNpb25BbmRQYXRjaGVzKGZpcm13YXJlLCBiYXNlVmVyc2lvbilcbiAgICAgICksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBAbWVtb2l6ZShwcm9wZXJ0eSgnaWQnKSlcbiAgZ2V0UGF0Y2hWZXJzaW9uc0NvdW50JChiYXNlVmVyc2lvbjogRmlybXdhcmVCaW5hcnkpIHtcbiAgICByZXR1cm4gdGhpcy5maXJtd2FyZSQucGlwZShcbiAgICAgIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKCdpZCcpLFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZmlybXdhcmUkKSxcbiAgICAgIHN3aXRjaE1hcChmaXJtd2FyZSA9PiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldFBhdGNoVmVyc2lvbnNDb3VudCQoZmlybXdhcmUsIGJhc2VWZXJzaW9uKSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBzZWxlY3RWZXJzaW9uT3JQYXRjaChzZWxlY3RlZDogYm9vbGVhbiwgdmVyc2lvbk9yUGF0Y2g6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICB0aGlzLnZlcnNpb25PclBhdGNoLmVtaXQodmVyc2lvbk9yUGF0Y2gpO1xuICAgIH1cbiAgfVxufVxuIl19