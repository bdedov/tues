import * as tslib_1 from "tslib";
import { Component, ViewChild, ViewChildren } from '@angular/core';
import { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';
import { flatten } from 'lodash-es';
import { BehaviorSubject, combineLatest, pipe } from 'rxjs';
import { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';
import { BulkOperationsService, OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationModalsService } from './modals/bulk-operation-modals.service';
import { BulkOperationListItemComponent } from './bulk-operation-list-item.component';
import { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';
var BulkOperationsListComponent = /** @class */ (function () {
    function BulkOperationsListComponent(realtime, bulkOperationsService, bulkOperationModalsService) {
        var _this = this;
        this.realtime = realtime;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.selectedTypeFilters = this.getTypeFilters();
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.typeFilter$ = new BehaviorSubject(null);
        this.timeFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.bulkOperations$ = combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(tap(function () {
            _this.refreshLoading = true;
        }), switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), statusFilters = _b[0], timeFilters = _b[1];
            return _this.filter(statusFilters, timeFilters);
        }), withLatestFrom(this.typeFilter$), map(function (_a) {
            var _b = tslib_1.__read(_a, 2), result = _b[0], typeFilter = _b[1];
            _this.filterPipe = pipe(map(function (data) { return _this.filterByType(data, typeFilter); }));
            return tslib_1.__assign({}, result, { data: _this.filterByType(result.data, typeFilter) });
        }), tap(function () {
            _this.refreshLoading = false;
        }), shareReplay(1));
        this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
    }
    BulkOperationsListComponent.prototype.filterByType = function (bulkOperations, typeFilter) {
        var flattenedFragments = this.flattenFilterFragments(typeFilter);
        if (
        // return data unfiltered if no filters selected...
        !flattenedFragments.length ||
            // ...or when all filters are selected
            this.allFilterFragments.every(function (fragment) { return flattenedFragments.includes(fragment); })) {
            return bulkOperations;
        }
        var filteredData = bulkOperations.filter(function (item) {
            return Object.keys(item.operationPrototype).some(function (key) { return flattenedFragments.includes(key); });
        });
        return filteredData;
    };
    BulkOperationsListComponent.prototype.resetFilter = function () {
        this.statusFilter$.next(null);
        this.timeFilter$.next(null);
        this.typeFilter$.next(null);
        this.datePicker.clearFilter();
        this.selectedTypeFilters = this.getTypeFilters();
        this.statusFilter.statusOptions.map(function (option) {
            option.selected = false;
            return option;
        });
    };
    BulkOperationsListComponent.prototype.isFilterApplied = function () {
        return (this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue());
    };
    BulkOperationsListComponent.prototype.filter = function (statusFilters, timeFilter) {
        var status = statusFilters && statusFilters.length > 0
            ? {
                generalStatus: flatten(statusFilters.map(function (statusFilter) { return statusFilter.generalStatus; }))
            }
            : {};
        var time = timeFilter
            ? tslib_1.__assign({}, (timeFilter.dateFrom && {
                dateFrom: timeFilter.dateFrom.toISOString()
            }), (timeFilter.dateTo && {
                dateTo: timeFilter.dateTo.toISOString()
            })) : {};
        return this.getBulkOperations(tslib_1.__assign({}, status, time));
    };
    BulkOperationsListComponent.prototype.getBulkOperations = function (filter) {
        return this.bulkOperationsService.getBulkOperations(filter);
    };
    BulkOperationsListComponent.prototype.getTypeFilters = function () {
        return this.bulkOperationsService.getBulkTypes();
    };
    BulkOperationsListComponent.prototype.addBulkOperation = function () {
        this.bulkOperationModalsService.showNewBulkOperationModal();
    };
    BulkOperationsListComponent.prototype.openFailedOperation = function (failedParentId) {
        this.listItems.forEach(function (item) {
            if (item.bulkOperation.id === failedParentId) {
                item.listItem.collapsed = false;
                item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    };
    BulkOperationsListComponent.prototype.compareOperations = function (operationA, operationB) {
        return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
    };
    BulkOperationsListComponent.prototype.flattenFilterFragments = function (filters) {
        return (filters || []).reduce(function (flattened, current) { return flattened.concat(current.fragments); }, []);
    };
    BulkOperationsListComponent.ctorParameters = function () { return [
        { type: OperationBulkRealtimeService },
        { type: BulkOperationsService },
        { type: BulkOperationModalsService }
    ]; };
    tslib_1.__decorate([
        ViewChildren(BulkOperationListItemComponent)
    ], BulkOperationsListComponent.prototype, "listItems", void 0);
    tslib_1.__decorate([
        ViewChild('statusFilter', { static: true })
    ], BulkOperationsListComponent.prototype, "statusFilter", void 0);
    tslib_1.__decorate([
        ViewChild(DatePickerComponent, { static: true })
    ], BulkOperationsListComponent.prototype, "datePicker", void 0);
    BulkOperationsListComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-bulk-operations',
            template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate> Operation type</label>\n  <c8y-select\n    style=\"width: 180px;\"\n    [items]=\"getTypeFilters()\"\n    [selected]=\"selectedTypeFilters\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"btn-group\" [placement]=\"'left'\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n  >\n    <i class=\"fa fa-plus-circle\"></i> {{ 'New bulk operation' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': refreshLoading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<!-- Empty state  -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor\"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\n<!-- No results empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon fa fa-search c8y-icon-duocolor\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"fa\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto';\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
            providers: [OperationBulkRealtimeService]
        })
    ], BulkOperationsListComponent);
    return BulkOperationsListComponent;
}());
export { BulkOperationsListComponent };
//# sourceMappingURL=data:application/json;base64,