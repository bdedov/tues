import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { NavigatorNode, NavigatorService } from '@c8y/ngx-components';
var ReportDashboardService = /** @class */ (function () {
    function ReportDashboardService(inventoryService, navigatorService) {
        this.inventoryService = inventoryService;
        this.navigatorService = navigatorService;
        this.queriesUtil = new QueriesUtil();
    }
    ReportDashboardService.prototype.listReports = function (options) {
        if (options === void 0) { options = {}; }
        var query = { __has: 'c8y_Report' };
        if (options.filter) {
            query = this.queriesUtil.addAndFilter(query, options.filter);
        }
        var filters = {
            query: this.queriesUtil.buildQuery(query),
            pageSize: options.pageSize || 50,
            withTotalPages: true
        };
        return this.inventoryService.list(filters);
    };
    ReportDashboardService.prototype.createReport = function (reportCfg) {
        var report = {};
        Object.assign(report, reportCfg);
        Object.assign(report, { c8y_Report: {} });
        return this.inventoryService.create(report);
    };
    ReportDashboardService.prototype.addReportNavigatorNode = function (report) {
        var node = new NavigatorNode({
            label: report.name,
            path: "reports/" + report.id,
            icon: report.icon,
            priority: report.priority
        });
        this.navigatorService.add(node);
    };
    ReportDashboardService.prototype.removeNavigatorNode = function (report) {
        var _this = this;
        this.navigatorService.state.forEach(function (node) {
            if (node.path === "reports/" + report.id) {
                _this.navigatorService.remove(node);
                return;
            }
        });
    };
    ReportDashboardService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: NavigatorService }
    ]; };
    ReportDashboardService = tslib_1.__decorate([
        Injectable()
    ], ReportDashboardService);
    return ReportDashboardService;
}());
export { ReportDashboardService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9jb250ZXh0LWRhc2hib2FyZC8iLCJzb3VyY2VzIjpbInJlcG9ydC1kYXNoYm9hcmQvcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd0RTtJQUVFLGdDQUNVLGdCQUFrQyxFQUNsQyxnQkFBa0M7UUFEbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBRTFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsNENBQVcsR0FBWCxVQUFZLE9BQWlEO1FBQWpELHdCQUFBLEVBQUEsWUFBaUQ7UUFDM0QsSUFBSSxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLENBQUM7UUFDcEMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xCLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsSUFBTSxPQUFPLEdBQUc7WUFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ3pDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUU7WUFDaEMsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsNkNBQVksR0FBWixVQUFhLFNBQWtDO1FBQzdDLElBQU0sTUFBTSxHQUE0QixFQUFFLENBQUM7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELHVEQUFzQixHQUF0QixVQUF1QixNQUFzQjtRQUMzQyxJQUFNLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQztZQUM3QixLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDbEIsSUFBSSxFQUFFLGFBQVcsTUFBTSxDQUFDLEVBQUk7WUFDNUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2pCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtTQUMxQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxvREFBbUIsR0FBbkIsVUFBb0IsTUFBc0I7UUFBMUMsaUJBT0M7UUFOQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDdEMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGFBQVcsTUFBTSxDQUFDLEVBQUksRUFBRTtnQkFDeEMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkMsT0FBTzthQUNSO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkEzQzJCLGdCQUFnQjtnQkFDaEIsZ0JBQWdCOztJQUpqQyxzQkFBc0I7UUFEbEMsVUFBVSxFQUFFO09BQ0Esc0JBQXNCLENBK0NsQztJQUFELDZCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0EvQ1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB7XG4gIHByaXZhdGUgcXVlcmllc1V0aWw6IFF1ZXJpZXNVdGlsO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBuYXZpZ2F0b3JTZXJ2aWNlOiBOYXZpZ2F0b3JTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMucXVlcmllc1V0aWwgPSBuZXcgUXVlcmllc1V0aWwoKTtcbiAgfVxuXG4gIGxpc3RSZXBvcnRzKG9wdGlvbnM6IHsgZmlsdGVyPzogYW55OyBwYWdlU2l6ZT86IG51bWJlciB9ID0ge30pIHtcbiAgICBsZXQgcXVlcnkgPSB7IF9faGFzOiAnYzh5X1JlcG9ydCcgfTtcbiAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRBbmRGaWx0ZXIocXVlcnksIG9wdGlvbnMuZmlsdGVyKTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVycyA9IHtcbiAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJpZXNVdGlsLmJ1aWxkUXVlcnkocXVlcnkpLFxuICAgICAgcGFnZVNpemU6IG9wdGlvbnMucGFnZVNpemUgfHwgNTAsXG4gICAgICB3aXRoVG90YWxQYWdlczogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KGZpbHRlcnMpO1xuICB9XG5cbiAgY3JlYXRlUmVwb3J0KHJlcG9ydENmZzogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4pIHtcbiAgICBjb25zdCByZXBvcnQ6IFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+ID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihyZXBvcnQsIHJlcG9ydENmZyk7XG4gICAgT2JqZWN0LmFzc2lnbihyZXBvcnQsIHsgYzh5X1JlcG9ydDoge30gfSk7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5U2VydmljZS5jcmVhdGUocmVwb3J0KTtcbiAgfVxuXG4gIGFkZFJlcG9ydE5hdmlnYXRvck5vZGUocmVwb3J0OiBJTWFuYWdlZE9iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IG5vZGUgPSBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICBsYWJlbDogcmVwb3J0Lm5hbWUsXG4gICAgICBwYXRoOiBgcmVwb3J0cy8ke3JlcG9ydC5pZH1gLFxuICAgICAgaWNvbjogcmVwb3J0Lmljb24sXG4gICAgICBwcmlvcml0eTogcmVwb3J0LnByaW9yaXR5XG4gICAgfSk7XG4gICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmFkZChub2RlKTtcbiAgfVxuXG4gIHJlbW92ZU5hdmlnYXRvck5vZGUocmVwb3J0OiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5zdGF0ZS5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgaWYgKG5vZGUucGF0aCA9PT0gYHJlcG9ydHMvJHtyZXBvcnQuaWR9YCkge1xuICAgICAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2UucmVtb3ZlKG5vZGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==