import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { NavigatorNode, NavigatorService, gettext } from '@c8y/ngx-components';
import { ReportDashboardService } from './report-dashboard.service';
var ReportDashboardNavigationFactory = /** @class */ (function () {
    function ReportDashboardNavigationFactory(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    ReportDashboardNavigationFactory.prototype.get = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var reports;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.loaded) return [3 /*break*/, 2];
                        this.loaded = true;
                        this.navigatorService.add(new NavigatorNode({
                            label: gettext('Reports'),
                            path: 'reports',
                            icon: 'th',
                            priority: 5
                        }));
                        return [4 /*yield*/, this.reportDashboardService.listReports({
                                filter: { __has: 'c8y_IsNavigatorNode' },
                                pageSize: 2000
                            })];
                    case 1:
                        reports = (_a.sent()).data;
                        reports.forEach(function (report) {
                            var node = new NavigatorNode({
                                label: report.name,
                                path: "reports/" + report.id,
                                icon: report.icon,
                                priority: report.priority
                            });
                            _this.navigatorService.add(node);
                        });
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ReportDashboardNavigationFactory.ctorParameters = function () { return [
        { type: NavigatorService },
        { type: InventoryService },
        { type: ReportDashboardService }
    ]; };
    ReportDashboardNavigationFactory = tslib_1.__decorate([
        Injectable()
    ], ReportDashboardNavigationFactory);
    return ReportDashboardNavigationFactory;
}());
export { ReportDashboardNavigationFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkLyIsInNvdXJjZXMiOlsicmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLW5hdmlnYXRpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3BFO0lBR0UsMENBQ1UsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxzQkFBOEM7UUFGOUMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFMeEQsV0FBTSxHQUFZLEtBQUssQ0FBQztJQU1yQixDQUFDO0lBRUUsOENBQUcsR0FBVDs7Ozs7Ozs2QkFDTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQVosd0JBQVk7d0JBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7d0JBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQ3ZCLElBQUksYUFBYSxDQUFDOzRCQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQzs0QkFDekIsSUFBSSxFQUFFLFNBQVM7NEJBQ2YsSUFBSSxFQUFFLElBQUk7NEJBQ1YsUUFBUSxFQUFFLENBQUM7eUJBQ1osQ0FBQyxDQUNILENBQUM7d0JBRWlDLHFCQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUM7Z0NBQy9FLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtnQ0FDeEMsUUFBUSxFQUFFLElBQUk7NkJBQ2YsQ0FBQyxFQUFBOzt3QkFISSxPQUFPLEdBQXFCLENBQUMsU0FHakMsQ0FBQyxDQUFDLElBQUk7d0JBQ1IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07NEJBQ3BCLElBQU0sSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDO2dDQUM3QixLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUk7Z0NBQ2xCLElBQUksRUFBRSxhQUFXLE1BQU0sQ0FBQyxFQUFJO2dDQUM1QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7Z0NBQ2pCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTs2QkFDMUIsQ0FBQyxDQUFDOzRCQUNILEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ2xDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7S0FFTjs7Z0JBaEMyQixnQkFBZ0I7Z0JBQ2hCLGdCQUFnQjtnQkFDVixzQkFBc0I7O0lBTjdDLGdDQUFnQztRQUQ1QyxVQUFVLEVBQUU7T0FDQSxnQ0FBZ0MsQ0FxQzVDO0lBQUQsdUNBQUM7Q0FBQSxBQXJDRCxJQXFDQztTQXJDWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSwgUXVlcmllc1V0aWwgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBOYXZpZ2F0b3JOb2RlLCBOYXZpZ2F0b3JTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZXBvcnREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9yZXBvcnQtZGFzaGJvYXJkLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3Rvcnkge1xuICBsb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5hdmlnYXRvclNlcnZpY2U6IE5hdmlnYXRvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVwb3J0RGFzaGJvYXJkU2VydmljZTogUmVwb3J0RGFzaGJvYXJkU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGlmICghdGhpcy5sb2FkZWQpIHtcbiAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcblxuICAgICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmFkZChcbiAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdSZXBvcnRzJyksXG4gICAgICAgICAgcGF0aDogJ3JlcG9ydHMnLFxuICAgICAgICAgIGljb246ICd0aCcsXG4gICAgICAgICAgcHJpb3JpdHk6IDVcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydHM6IElNYW5hZ2VkT2JqZWN0W10gPSAoYXdhaXQgdGhpcy5yZXBvcnREYXNoYm9hcmRTZXJ2aWNlLmxpc3RSZXBvcnRzKHtcbiAgICAgICAgZmlsdGVyOiB7IF9faGFzOiAnYzh5X0lzTmF2aWdhdG9yTm9kZScgfSxcbiAgICAgICAgcGFnZVNpemU6IDIwMDBcbiAgICAgIH0pKS5kYXRhO1xuICAgICAgcmVwb3J0cy5mb3JFYWNoKHJlcG9ydCA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgICAgbGFiZWw6IHJlcG9ydC5uYW1lLFxuICAgICAgICAgIHBhdGg6IGByZXBvcnRzLyR7cmVwb3J0LmlkfWAsXG4gICAgICAgICAgaWNvbjogcmVwb3J0Lmljb24sXG4gICAgICAgICAgcHJpb3JpdHk6IHJlcG9ydC5wcmlvcml0eVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0b3JTZXJ2aWNlLmFkZChub2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19