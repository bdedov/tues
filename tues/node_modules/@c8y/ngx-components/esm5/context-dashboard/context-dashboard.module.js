import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { HOOK_ONCE_ROUTE, ViewContext, CoreModule, HOOK_ACTION } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import { DeviceDashboardGuard } from './device-dashboard.guard';
import { ContextDashboardComponent } from './context-dashboard.component';
import { GroupDashboardGuard } from './group-dashboard.guard';
import { CONTEXT_DASHBOARD_CONFIG } from './context-dashboard.model';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { WidgetConfigComponent } from './widget-config.component';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { DashboardActionsFactory } from './dashboard-actions.factory';
import { AppearanceSettingsComponent } from './appearance-settings.component';
import { WidgetPreviewComponent } from './widget-preview.component';
var defaultConfig = {
    allowFullscreen: true,
    widgetFilter: function (_a) {
        var data = _a.data;
        return !(data && data.settings && data.settings.noNewWidgets);
    },
    routes: [
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [DeviceDashboardGuard],
            context: ViewContext.Device
        },
        {
            path: 'dashboard/:dashboardId',
            component: ContextDashboardComponent,
            canActivate: [GroupDashboardGuard],
            context: ViewContext.Group
        }
    ]
};
var ContextDashboardModule = /** @class */ (function () {
    function ContextDashboardModule() {
    }
    ContextDashboardModule_1 = ContextDashboardModule;
    ContextDashboardModule.config = function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: ContextDashboardModule_1,
            providers: [
                {
                    provide: CONTEXT_DASHBOARD_CONFIG,
                    useValue: tslib_1.__assign({}, defaultConfig, config)
                },
                ContextDashboardService,
                DeviceDashboardGuard,
                GroupDashboardGuard,
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: tslib_1.__assign({}, defaultConfig, config).routes,
                    multi: true
                },
                {
                    provide: HOOK_ACTION,
                    useClass: DashboardActionsFactory,
                    multi: true
                }
            ]
        };
    };
    var ContextDashboardModule_1;
    ContextDashboardModule = ContextDashboardModule_1 = tslib_1.__decorate([
        NgModule({
            declarations: [
                AppearanceSettingsComponent,
                ContextDashboardComponent,
                WidgetConfigComponent,
                WidgetPreviewComponent,
                DashboardDetailComponent
            ],
            imports: [CoreModule, TooltipModule, PopoverModule, BsDropdownModule.forRoot()],
            exports: [ContextDashboardComponent, WidgetConfigComponent],
            entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent]
        })
    ], ContextDashboardModule);
    return ContextDashboardModule;
}());
export { ContextDashboardModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1kYXNoYm9hcmQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9jb250ZXh0LWRhc2hib2FyZC8iLCJzb3VyY2VzIjpbImNvbnRleHQtZGFzaGJvYXJkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUNMLGVBQWUsRUFDZixXQUFXLEVBQ1gsVUFBVSxFQUNWLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSx3QkFBd0IsRUFBMEIsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLElBQU0sYUFBYSxHQUFHO0lBQ3BCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLFlBQVksWUFBQyxFQUFRO1lBQU4sY0FBSTtRQUNqQixPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxNQUFNLEVBQUU7UUFDTjtZQUNFLElBQUksRUFBRSx3QkFBd0I7WUFDOUIsU0FBUyxFQUFFLHlCQUF5QjtZQUNwQyxXQUFXLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztZQUNuQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07U0FDNUI7UUFDRDtZQUNFLElBQUksRUFBRSx3QkFBd0I7WUFDOUIsU0FBUyxFQUFFLHlCQUF5QjtZQUNwQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztZQUNsQyxPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7U0FDM0I7S0FDRjtDQUNGLENBQUM7QUFjRjtJQUFBO0lBeUJBLENBQUM7K0JBekJZLHNCQUFzQjtJQUMxQiw2QkFBTSxHQUFiLFVBQWMsTUFBbUM7UUFBbkMsdUJBQUEsRUFBQSxXQUFtQztRQUMvQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUFzQjtZQUNoQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSx1QkFBTyxhQUFhLEVBQUssTUFBTSxDQUFFO2lCQUMxQztnQkFDRCx1QkFBdUI7Z0JBQ3ZCLG9CQUFvQjtnQkFDcEIsbUJBQW1CO2dCQUNuQjtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsUUFBUSxFQUFFLHFCQUFLLGFBQWEsRUFBSyxNQUFNLEVBQUcsTUFBTTtvQkFDaEQsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFdBQVc7b0JBQ3BCLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7SUF4QlUsc0JBQXNCO1FBWmxDLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRTtnQkFDWiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIscUJBQXFCO2dCQUNyQixzQkFBc0I7Z0JBQ3RCLHdCQUF3QjthQUN6QjtZQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9FLE9BQU8sRUFBRSxDQUFDLHlCQUF5QixFQUFFLHFCQUFxQixDQUFDO1lBQzNELGVBQWUsRUFBRSxDQUFDLHlCQUF5QixFQUFFLHFCQUFxQixFQUFFLHdCQUF3QixDQUFDO1NBQzlGLENBQUM7T0FDVyxzQkFBc0IsQ0F5QmxDO0lBQUQsNkJBQUM7Q0FBQSxBQXpCRCxJQXlCQztTQXpCWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSE9PS19PTkNFX1JPVVRFLFxuICBWaWV3Q29udGV4dCxcbiAgQ29yZU1vZHVsZSxcbiAgSE9PS19BQ1RJT05cbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5pbXBvcnQgeyBEZXZpY2VEYXNoYm9hcmRHdWFyZCB9IGZyb20gJy4vZGV2aWNlLWRhc2hib2FyZC5ndWFyZCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBEYXNoYm9hcmRHdWFyZCB9IGZyb20gJy4vZ3JvdXAtZGFzaGJvYXJkLmd1YXJkJztcbmltcG9ydCB7IENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRywgQ29udGV4dERhc2hib2FyZENvbmZpZyB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuaW1wb3J0IHsgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoYm9hcmQtZGV0YWlsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBXaWRnZXRDb25maWdDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC1jb25maWcuY29tcG9uZW50JztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IFRvb2x0aXBNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3Rvb2x0aXAnO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBEYXNoYm9hcmRBY3Rpb25zRmFjdG9yeSB9IGZyb20gJy4vZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBBcHBlYXJhbmNlU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2FwcGVhcmFuY2Utc2V0dGluZ3MuY29tcG9uZW50JztcbmltcG9ydCB7IFdpZGdldFByZXZpZXdDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC1wcmV2aWV3LmNvbXBvbmVudCc7XG5cbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gIGFsbG93RnVsbHNjcmVlbjogdHJ1ZSxcbiAgd2lkZ2V0RmlsdGVyKHsgZGF0YSB9KSB7XG4gICAgcmV0dXJuICEoZGF0YSAmJiBkYXRhLnNldHRpbmdzICYmIGRhdGEuc2V0dGluZ3Mubm9OZXdXaWRnZXRzKTtcbiAgfSxcbiAgcm91dGVzOiBbXG4gICAge1xuICAgICAgcGF0aDogJ2Rhc2hib2FyZC86ZGFzaGJvYXJkSWQnLFxuICAgICAgY29tcG9uZW50OiBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LFxuICAgICAgY2FuQWN0aXZhdGU6IFtEZXZpY2VEYXNoYm9hcmRHdWFyZF0sXG4gICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5EZXZpY2VcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6ICdkYXNoYm9hcmQvOmRhc2hib2FyZElkJyxcbiAgICAgIGNvbXBvbmVudDogQ29udGV4dERhc2hib2FyZENvbXBvbmVudCxcbiAgICAgIGNhbkFjdGl2YXRlOiBbR3JvdXBEYXNoYm9hcmRHdWFyZF0sXG4gICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5Hcm91cFxuICAgIH1cbiAgXVxufTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgQXBwZWFyYW5jZVNldHRpbmdzQ29tcG9uZW50LFxuICAgIENvbnRleHREYXNoYm9hcmRDb21wb25lbnQsXG4gICAgV2lkZ2V0Q29uZmlnQ29tcG9uZW50LFxuICAgIFdpZGdldFByZXZpZXdDb21wb25lbnQsXG4gICAgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBUb29sdGlwTW9kdWxlLCBQb3BvdmVyTW9kdWxlLCBCc0Ryb3Bkb3duTW9kdWxlLmZvclJvb3QoKV0sXG4gIGV4cG9ydHM6IFtDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LCBXaWRnZXRDb25maWdDb21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LCBXaWRnZXRDb25maWdDb21wb25lbnQsIERhc2hib2FyZERldGFpbENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dERhc2hib2FyZE1vZHVsZSB7XG4gIHN0YXRpYyBjb25maWcoY29uZmlnOiBDb250ZXh0RGFzaGJvYXJkQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvbnRleHREYXNoYm9hcmRNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENPTlRFWFRfREFTSEJPQVJEX0NPTkZJRyxcbiAgICAgICAgICB1c2VWYWx1ZTogeyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfVxuICAgICAgICB9LFxuICAgICAgICBDb250ZXh0RGFzaGJvYXJkU2VydmljZSxcbiAgICAgICAgRGV2aWNlRGFzaGJvYXJkR3VhcmQsXG4gICAgICAgIEdyb3VwRGFzaGJvYXJkR3VhcmQsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX09OQ0VfUk9VVEUsXG4gICAgICAgICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH0ucm91dGVzLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIT09LX0FDVElPTixcbiAgICAgICAgICB1c2VDbGFzczogRGFzaGJvYXJkQWN0aW9uc0ZhY3RvcnksXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==