import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { IManagedObject, InventoryService, IResultList, UserService } from '@c8y/client';
import { AppStateService, getActivatedRoute, gettext, ModalService, NavigatorNode, NavigatorService, Status, TabsService, ViewContext, Widget, Permissions } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { assign, pick, some, keys, keyBy, has, get, forEach, cloneDeep } from 'lodash-es';
import { from, of } from 'rxjs';
import { catchError, filter, map, mergeAll, mergeMap, tap, toArray, throwIfEmpty } from 'rxjs/operators';
import { ContextDashboardType } from './context-dashboard.model';
var ContextDashboardService = /** @class */ (function () {
    function ContextDashboardService(inventory, tabs, modal, translateService, router, user, appState, navigator, permissions) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.user = user;
        this.appState = appState;
        this.navigator = navigator;
        this.permissions = permissions;
        this.REPORT_PARTIAL_NAME = 'report_';
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    Object.defineProperty(ContextDashboardService.prototype, "formDisabled", {
        get: function () {
            return this._formDisabled;
        },
        set: function (value) {
            this._formDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    ContextDashboardService.prototype.create = function (dashboardCfg, contextOrName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, dashboardType, dashboard, value, fragmentKey, data, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof contextOrName === 'string') {
                            id = contextOrName;
                            dashboardType = ContextDashboardType.Named;
                        }
                        else {
                            id = contextOrName.contextData.id;
                            dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, contextOrName);
                        }
                        dashboard = {};
                        assign(dashboard, { c8y_Dashboard: dashboardCfg });
                        value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : id;
                        fragmentKey = this.createFragmentKey(dashboardType, value);
                        dashboard[fragmentKey] = {};
                        if (this.shouldSetGlobal(dashboard)) {
                            assign(dashboard, { c8y_Global: {} });
                        }
                        dashboard.name = dashboard.c8y_Dashboard.name;
                        if (!(dashboardType === ContextDashboardType.Group || dashboardType === ContextDashboardType.Device)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.inventory.childAdditionsCreate(dashboard, id)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.inventory.create(dashboard)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        data = (_a).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.detail = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventory.detail(dashboardMO)];
                    case 1:
                        data = (_a.sent()).data;
                        this.cache.set(dashboardMO.id, data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.update = function (dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var keepFragments, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dashboard.name = dashboard.c8y_Dashboard.name;
                        keepFragments = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id', 'name']));
                        keepFragments.c8y_Global = this.shouldSetGlobal(dashboard);
                        return [4 /*yield*/, this.inventory.update(keepFragments)];
                    case 1:
                        data = (_a.sent()).data;
                        this.cache.set(dashboard.id, data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.delete = function (dashboard, withConfirmation) {
        if (withConfirmation === void 0) { withConfirmation = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg, tabToRemove, ex_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        if (!withConfirmation) return [3 /*break*/, 2];
                        msg = gettext("You are about to delete the dashboard \"{{ dashboardName }}\". Do you want to proceed?");
                        if (this.isDeviceType(dashboard)) {
                            msg = gettext("You are about to delete the dashboard \"{{ dashboardName }}\" from all devices of the type \"{{ deviceType }}\".\n           Do you want to proceed?");
                        }
                        return [4 /*yield*/, this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                                dashboardName: dashboard.c8y_Dashboard.name,
                                deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                            }), Status.DANGER, {
                                ok: gettext('Delete'),
                                cancel: gettext('Cancel')
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.inventory.delete(dashboard)];
                    case 3:
                        _a.sent();
                        tabToRemove = Array.from(this.tabs.state).find(function (tab) {
                            return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboard.id);
                        });
                        this.tabs.remove(tabToRemove);
                        this.tabs.refresh();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardService.prototype.activateDashboards = function (route, types) {
        var dashboardId = route.params.dashboardId;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(function (dashboard) {
                route.data = { dashboard: dashboard };
            }), map(function () { return true; }), catchError(function () {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    };
    ContextDashboardService.prototype.getNamedDashboardOrCreate = function (name, defaultWidgets) {
        var _this = this;
        var children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(function () {
            return from(_this.create({
                children: children,
                widgetClasses: { 'dashboard-theme-light': true, 'panel-title-regular': true }
            }, name));
        }));
    };
    ContextDashboardService.prototype.refreshTabs = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tabToUpdate, data, _a, icon, priority, name_1;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.isNamed(dashboardMO)) return [3 /*break*/, 2];
                        tabToUpdate = Array.from(this.tabs.state).find(function (tab) {
                            return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboardMO.id);
                        });
                        return [4 /*yield*/, this.detail(dashboardMO)];
                    case 1:
                        data = _b.sent();
                        if (tabToUpdate) {
                            _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name_1 = _a.name;
                            tabToUpdate.icon = icon;
                            tabToUpdate.priority = priority;
                            tabToUpdate.label = name_1;
                        }
                        this.tabs.refresh();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardService.prototype.updateNavigatorItem = function (mo) {
        var _this = this;
        this.navigator.state.forEach(function (node) {
            if (node.path === "reports/" + mo.id) {
                _this.navigator.remove(node);
            }
        });
        if (mo.c8y_IsNavigatorNode) {
            var nodeToAdd = new NavigatorNode({
                label: mo.name,
                path: "reports/" + mo.id,
                icon: mo.icon,
                priority: mo.priority
            });
            this.navigator.add(nodeToAdd);
        }
    };
    ContextDashboardService.prototype.navigateToDashboard = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (/dashboard/.test(this.router.url)) {
                    this.router.navigate(['..', dashboardMO.id], {
                        relativeTo: getActivatedRoute(this.router)
                    });
                }
                else {
                    this.router.navigate(['..', this.DASHBOARD_ROUTE_PATH, dashboardMO.id], {
                        relativeTo: getActivatedRoute(this.router)
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    ContextDashboardService.prototype.canEditDashboard = function (mo) {
        return this.permissions.canEdit(['ROLE_INVENTORY_ADMIN', 'ROLE_INVENTORY_CREATE'], mo);
    };
    ContextDashboardService.prototype.isNamed = function (dashboard) {
        var _this = this;
        return some(keys(dashboard), function (prop) {
            return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.Named + _this.INDEX_SPLIT).test(prop);
        });
    };
    ContextDashboardService.prototype.isReport = function (dashboard) {
        var _this = this;
        return some(keys(dashboard), function (prop) {
            return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.Named + _this.INDEX_SPLIT + _this.REPORT_PARTIAL_NAME).test(prop);
        });
    };
    ContextDashboardService.prototype.isDeviceType = function (dashboard) {
        var _this = this;
        return some(keys(dashboard), function (prop) {
            return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.DeviceType + _this.INDEX_SPLIT).test(prop);
        });
    };
    ContextDashboardService.prototype.getStyling = function (styleList, styleName, defaultValue) {
        var styling = styleList.find(function (style) { return style && new RegExp(styleName, 'i').test(style.class); });
        return styling ? styling.class : defaultValue;
    };
    ContextDashboardService.prototype.mapWidgets = function (widgets) {
        return keyBy(widgets.map(function (widget) {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    };
    ContextDashboardService.prototype.getDashboard$ = function (dashboardIdOrName, dashboardType, mo) {
        var _this = this;
        var cache = this.cache.get(dashboardIdOrName);
        var dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        var cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), filter(function (dashboard) {
            return dashboard.id === dashboardIdOrName ||
                has(dashboard, "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.Named + _this.INDEX_SPLIT + dashboardIdOrName);
        }));
        return cache ? of(cache) : cacheRefresh;
    };
    ContextDashboardService.prototype.getTabs$ = function (mo, dashboardType) {
        var _this = this;
        var dashboards = this.getContextDashboards(mo, dashboardType);
        this.setBaseContextRoute(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(map(function (dashboard) { return _this.removeDashboardMoProperty(dashboard); }), tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), map(function (dashboard) { return _this.createDashboardTab(dashboard); }), toArray());
    };
    ContextDashboardService.prototype.getContextDashboards$ = function (requests) {
        return from(requests).pipe(mergeAll(), mergeMap(function (response) { return response.data; }));
    };
    ContextDashboardService.prototype.setBaseContextRoute = function (mo, dashboardType) {
        var type = dashboardType.includes(ContextDashboardType.Device)
            ? ContextDashboardType.Device
            : ContextDashboardType.Group;
        this.currentContextRoute = type + "/" + mo.id;
    };
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    ContextDashboardService.prototype.removeDashboardMoProperty = function (dashboard) {
        var dashboardCopy = cloneDeep(dashboard);
        var children = get(dashboardCopy, 'c8y_Dashboard.children');
        var updateDashboard = false;
        forEach(children, function (child) {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            this.update(dashboardCopy);
        }
        return dashboardCopy;
    };
    ContextDashboardService.prototype.cacheDashboard = function (dashboard) {
        this.cache.set(dashboard.id, dashboard);
    };
    ContextDashboardService.prototype.createDashboardTab = function (dashboard) {
        var _dashboard = dashboard.c8y_Dashboard, id = dashboard.id;
        return {
            icon: _dashboard.icon,
            path: this.DASHBOARD_ROUTE_PATH + "/" + id,
            label: _dashboard.name,
            priority: _dashboard.priority,
            hide: this.isReport(dashboard)
        };
    };
    ContextDashboardService.prototype.clean = function (dashboard) {
        var jsonString = JSON.stringify(dashboard, function (key, value) {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    };
    ContextDashboardService.prototype.getNamedDashboard = function (name) {
        return this.inventory.list({
            fragmentType: "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + ContextDashboardType.Named + this.INDEX_SPLIT + name,
            pageSize: 1
        });
    };
    ContextDashboardService.prototype.getContextDashboards = function (mo, dashboardType) {
        var _this = this;
        return dashboardType.map(function (type) {
            return _this.inventory.list({
                fragmentType: _this.createDashboardFragment(mo, type),
                pageSize: _this.DEFAULT_PAGESIZE
            });
        });
    };
    ContextDashboardService.prototype.createDashboardFragment = function (mo, type) {
        var value;
        if (mo.c8y_Report) {
            value = "" + this.REPORT_PARTIAL_NAME + mo.id;
        }
        else {
            value = type === ContextDashboardType.DeviceType ? mo.type : mo.id;
        }
        return "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + type + this.INDEX_SPLIT + value;
    };
    ContextDashboardService.prototype.getDashboardTypeFromViewContext = function (dashboardCfg, context) {
        var dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    };
    ContextDashboardService.prototype.createFragmentKey = function (contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    };
    ContextDashboardService.prototype.shouldSetGlobal = function (dashboard) {
        if ((this.isNamed(dashboard) && !this.isReport(dashboard)) || this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    };
    ContextDashboardService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TabsService },
        { type: ModalService },
        { type: TranslateService },
        { type: Router },
        { type: UserService },
        { type: AppStateService },
        { type: NavigatorService },
        { type: Permissions }
    ]; };
    ContextDashboardService = tslib_1.__decorate([
        Injectable()
    ], ContextDashboardService);
    return ContextDashboardService;
}());
export { ContextDashboardService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1kYXNoYm9hcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQvIiwic291cmNlcyI6WyJjb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekYsT0FBTyxFQUNMLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsT0FBTyxFQUNQLFlBQVksRUFDWixhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLE1BQU0sRUFDTixXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sRUFDTixXQUFXLEVBQ1osTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUYsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUNMLFVBQVUsRUFDVixNQUFNLEVBQ04sR0FBRyxFQUNILFFBQVEsRUFDUixRQUFRLEVBQ1IsR0FBRyxFQUNILE9BQU8sRUFDUCxZQUFZLEVBQ2IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBR0wsb0JBQW9CLEVBQ3JCLE1BQU0sMkJBQTJCLENBQUM7QUFHbkM7SUFrQkUsaUNBQ1UsU0FBMkIsRUFDM0Is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SUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUYsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBdlhvQixnQkFBZ0I7Z0JBQ3JCLFdBQVc7Z0JBQ1YsWUFBWTtnQkFDRCxnQkFBZ0I7Z0JBQzFCLE1BQU07Z0JBQ1IsV0FBVztnQkFDUCxlQUFlO2dCQUNkLGdCQUFnQjtnQkFDZCxXQUFXOztJQTNCdkIsdUJBQXVCO1FBRG5DLFVBQVUsRUFBRTtPQUNBLHVCQUF1QixDQTJZbkM7SUFBRCw4QkFBQztDQUFBLEFBM1lELElBMllDO1NBM1lZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSwgSVJlc3VsdExpc3QsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQXBwU3RhdGVTZXJ2aWNlLFxuICBnZXRBY3RpdmF0ZWRSb3V0ZSxcbiAgZ2V0dGV4dCxcbiAgTW9kYWxTZXJ2aWNlLFxuICBOYXZpZ2F0b3JOb2RlLFxuICBOYXZpZ2F0b3JTZXJ2aWNlLFxuICBTdGF0dXMsXG4gIFRhYnNTZXJ2aWNlLFxuICBWaWV3Q29udGV4dCxcbiAgV2lkZ2V0LFxuICBQZXJtaXNzaW9uc1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGFzc2lnbiwgcGljaywgc29tZSwga2V5cywga2V5QnksIGhhcywgZ2V0LCBmb3JFYWNoLCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZnJvbSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNhdGNoRXJyb3IsXG4gIGZpbHRlcixcbiAgbWFwLFxuICBtZXJnZUFsbCxcbiAgbWVyZ2VNYXAsXG4gIHRhcCxcbiAgdG9BcnJheSxcbiAgdGhyb3dJZkVtcHR5XG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIENvbnRleHREYXNoYm9hcmQsXG4gIENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0LFxuICBDb250ZXh0RGFzaGJvYXJkVHlwZVxufSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIHtcbiAgcmVhZG9ubHkgUkVQT1JUX1BBUlRJQUxfTkFNRSA9ICdyZXBvcnRfJztcbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdD4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBERUZBVUxUX1BBR0VTSVpFID0gMTAwMDtcbiAgcHJpdmF0ZSByZWFkb25seSBGUkFHTUVOVF9OQU1FID0gJ2M4eV9EYXNoYm9hcmQnO1xuICBwcml2YXRlIHJlYWRvbmx5IERBU0hCT0FSRF9ST1VURV9QQVRIID0gJ2Rhc2hib2FyZCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgSU5ERVhfU1BMSVQgPSAnISc7XG4gIHByaXZhdGUgY3VycmVudENvbnRleHRSb3V0ZTogc3RyaW5nO1xuICBwcml2YXRlIF9mb3JtRGlzYWJsZWQgPSB0cnVlO1xuXG4gIGdldCBmb3JtRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1EaXNhYmxlZDtcbiAgfVxuXG4gIHNldCBmb3JtRGlzYWJsZWQodmFsdWUpIHtcbiAgICB0aGlzLl9mb3JtRGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGFiczogVGFic1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBtb2RhbDogTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgdXNlcjogVXNlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgbmF2aWdhdG9yOiBOYXZpZ2F0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zXG4gICkge31cblxuICBhc3luYyBjcmVhdGUoZGFzaGJvYXJkQ2ZnOiBDb250ZXh0RGFzaGJvYXJkLCBjb250ZXh0T3JOYW1lOiB7IGNvbnRleHREYXRhOiBhbnkgfSB8IHN0cmluZykge1xuICAgIGxldCBpZDtcbiAgICBsZXQgZGFzaGJvYXJkVHlwZTtcbiAgICBpZiAodHlwZW9mIGNvbnRleHRPck5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZCA9IGNvbnRleHRPck5hbWUgYXMgc3RyaW5nO1xuICAgICAgZGFzaGJvYXJkVHlwZSA9IENvbnRleHREYXNoYm9hcmRUeXBlLk5hbWVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IGNvbnRleHRPck5hbWUuY29udGV4dERhdGEuaWQgYXMgc3RyaW5nO1xuICAgICAgZGFzaGJvYXJkVHlwZSA9IHRoaXMuZ2V0RGFzaGJvYXJkVHlwZUZyb21WaWV3Q29udGV4dChkYXNoYm9hcmRDZmcsIGNvbnRleHRPck5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGRhc2hib2FyZDogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4gPSB7fTtcbiAgICBhc3NpZ24oZGFzaGJvYXJkLCB7IGM4eV9EYXNoYm9hcmQ6IGRhc2hib2FyZENmZyB9KTtcblxuICAgIGNvbnN0IHZhbHVlID1cbiAgICAgIGRhc2hib2FyZFR5cGUgPT09IENvbnRleHREYXNoYm9hcmRUeXBlLkRldmljZVR5cGUgPyBkYXNoYm9hcmRDZmcuZGV2aWNlVHlwZVZhbHVlIDogaWQ7XG5cbiAgICBjb25zdCBmcmFnbWVudEtleSA9IHRoaXMuY3JlYXRlRnJhZ21lbnRLZXkoZGFzaGJvYXJkVHlwZSwgdmFsdWUpO1xuICAgIGRhc2hib2FyZFtmcmFnbWVudEtleV0gPSB7fTtcblxuICAgIGlmICh0aGlzLnNob3VsZFNldEdsb2JhbChkYXNoYm9hcmQpKSB7XG4gICAgICBhc3NpZ24oZGFzaGJvYXJkLCB7IGM4eV9HbG9iYWw6IHt9IH0pO1xuICAgIH1cbiAgICBkYXNoYm9hcmQubmFtZSA9IGRhc2hib2FyZC5jOHlfRGFzaGJvYXJkLm5hbWU7XG4gICAgY29uc3QgeyBkYXRhIH0gPVxuICAgICAgZGFzaGJvYXJkVHlwZSA9PT0gQ29udGV4dERhc2hib2FyZFR5cGUuR3JvdXAgfHwgZGFzaGJvYXJkVHlwZSA9PT0gQ29udGV4dERhc2hib2FyZFR5cGUuRGV2aWNlXG4gICAgICAgID8gYXdhaXQgdGhpcy5pbnZlbnRvcnkuY2hpbGRBZGRpdGlvbnNDcmVhdGUoZGFzaGJvYXJkLCBpZClcbiAgICAgICAgOiBhd2FpdCB0aGlzLmludmVudG9yeS5jcmVhdGUoZGFzaGJvYXJkKTtcbiAgICByZXR1cm4gZGF0YSBhcyBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdDtcbiAgfVxuXG4gIGFzeW5jIGRldGFpbChkYXNoYm9hcmRNTzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5LmRldGFpbChkYXNoYm9hcmRNTyk7XG4gICAgdGhpcy5jYWNoZS5zZXQoZGFzaGJvYXJkTU8uaWQsIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlKGRhc2hib2FyZDogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QpIHtcbiAgICBkYXNoYm9hcmQubmFtZSA9IGRhc2hib2FyZC5jOHlfRGFzaGJvYXJkLm5hbWU7XG4gICAgY29uc3Qga2VlcEZyYWdtZW50cyA9IHRoaXMuY2xlYW4ocGljayhkYXNoYm9hcmQsIFt0aGlzLkZSQUdNRU5UX05BTUUsICdpZCcsICduYW1lJ10pKTtcbiAgICBrZWVwRnJhZ21lbnRzLmM4eV9HbG9iYWwgPSB0aGlzLnNob3VsZFNldEdsb2JhbChkYXNoYm9hcmQpO1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnkudXBkYXRlKGtlZXBGcmFnbWVudHMpO1xuICAgIHRoaXMuY2FjaGUuc2V0KGRhc2hib2FyZC5pZCwgZGF0YSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBhc3luYyBkZWxldGUoZGFzaGJvYXJkOiBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCwgd2l0aENvbmZpcm1hdGlvbjogYm9vbGVhbiA9IHRydWUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHdpdGhDb25maXJtYXRpb24pIHtcbiAgICAgICAgbGV0IG1zZyA9IGdldHRleHQoXG4gICAgICAgICAgYFlvdSBhcmUgYWJvdXQgdG8gZGVsZXRlIHRoZSBkYXNoYm9hcmQgXCJ7eyBkYXNoYm9hcmROYW1lIH19XCIuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/YFxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy5pc0RldmljZVR5cGUoZGFzaGJvYXJkKSkge1xuICAgICAgICAgIG1zZyA9IGdldHRleHQoXG4gICAgICAgICAgICBgWW91IGFyZSBhYm91dCB0byBkZWxldGUgdGhlIGRhc2hib2FyZCBcInt7IGRhc2hib2FyZE5hbWUgfX1cIiBmcm9tIGFsbCBkZXZpY2VzIG9mIHRoZSB0eXBlIFwie3sgZGV2aWNlVHlwZSB9fVwiLlxuICAgICAgICAgICBEbyB5b3Ugd2FudCB0byBwcm9jZWVkP2BcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMubW9kYWwuY29uZmlybShcbiAgICAgICAgICBnZXR0ZXh0KCdEZWxldGUgZGFzaGJvYXJkJyksXG4gICAgICAgICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQobXNnLCB7XG4gICAgICAgICAgICBkYXNoYm9hcmROYW1lOiBkYXNoYm9hcmQuYzh5X0Rhc2hib2FyZC5uYW1lLFxuICAgICAgICAgICAgZGV2aWNlVHlwZTogZGFzaGJvYXJkLmM4eV9EYXNoYm9hcmQuZGV2aWNlVHlwZVZhbHVlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgU3RhdHVzLkRBTkdFUixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBvazogZ2V0dGV4dCgnRGVsZXRlJyksXG4gICAgICAgICAgICBjYW5jZWw6IGdldHRleHQoJ0NhbmNlbCcpXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5pbnZlbnRvcnkuZGVsZXRlKGRhc2hib2FyZCk7XG4gICAgICBjb25zdCB0YWJUb1JlbW92ZSA9IEFycmF5LmZyb20odGhpcy50YWJzLnN0YXRlKS5maW5kKHRhYiA9PlxuICAgICAgICB0YWIucGF0aC5lbmRzV2l0aChgJHt0aGlzLkRBU0hCT0FSRF9ST1VURV9QQVRIfS8ke2Rhc2hib2FyZC5pZH1gKVxuICAgICAgKTtcbiAgICAgIHRoaXMudGFicy5yZW1vdmUodGFiVG9SZW1vdmUpO1xuICAgICAgdGhpcy50YWJzLnJlZnJlc2goKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gaW50ZW5kZWQgZW1wdHlcbiAgICB9XG4gIH1cblxuICBhY3RpdmF0ZURhc2hib2FyZHMocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHR5cGVzOiBDb250ZXh0RGFzaGJvYXJkVHlwZVtdKSB7XG4gICAgY29uc3QgeyBkYXNoYm9hcmRJZCB9ID0gcm91dGUucGFyYW1zO1xuICAgIGlmIChkYXNoYm9hcmRJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGFzaGJvYXJkJChkYXNoYm9hcmRJZCwgdHlwZXMsIHJvdXRlLnBhcmVudC5kYXRhLmNvbnRleHREYXRhKS5waXBlKFxuICAgICAgICB0YXAoZGFzaGJvYXJkID0+IHtcbiAgICAgICAgICByb3V0ZS5kYXRhID0geyBkYXNoYm9hcmQgfTtcbiAgICAgICAgfSksXG4gICAgICAgIG1hcCgoKSA9PiB0cnVlKSxcbiAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VGFicyQocm91dGUuZGF0YS5jb250ZXh0RGF0YSwgdHlwZXMpO1xuICB9XG5cbiAgZ2V0TmFtZWREYXNoYm9hcmRPckNyZWF0ZShuYW1lOiBzdHJpbmcsIGRlZmF1bHRXaWRnZXRzOiBXaWRnZXRbXSkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5tYXBXaWRnZXRzKGRlZmF1bHRXaWRnZXRzKTtcbiAgICByZXR1cm4gdGhpcy5nZXREYXNoYm9hcmQkKG5hbWUsIFtDb250ZXh0RGFzaGJvYXJkVHlwZS5OYW1lZF0pLnBpcGUoXG4gICAgICB0aHJvd0lmRW1wdHkoKSxcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT5cbiAgICAgICAgZnJvbShcbiAgICAgICAgICB0aGlzLmNyZWF0ZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICAgIHdpZGdldENsYXNzZXM6IHsgJ2Rhc2hib2FyZC10aGVtZS1saWdodCc6IHRydWUsICdwYW5lbC10aXRsZS1yZWd1bGFyJzogdHJ1ZSB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBhc3luYyByZWZyZXNoVGFicyhkYXNoYm9hcmRNTzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QpIHtcbiAgICBpZiAoIXRoaXMuaXNOYW1lZChkYXNoYm9hcmRNTykpIHtcbiAgICAgIGNvbnN0IHRhYlRvVXBkYXRlID0gQXJyYXkuZnJvbSh0aGlzLnRhYnMuc3RhdGUpLmZpbmQodGFiID0+XG4gICAgICAgIHRhYi5wYXRoLmVuZHNXaXRoKGAke3RoaXMuREFTSEJPQVJEX1JPVVRFX1BBVEh9LyR7ZGFzaGJvYXJkTU8uaWR9YClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmRldGFpbChkYXNoYm9hcmRNTyk7XG4gICAgICBpZiAodGFiVG9VcGRhdGUpIHtcbiAgICAgICAgY29uc3QgeyBpY29uLCBwcmlvcml0eSwgbmFtZSB9ID0gZGF0YS5jOHlfRGFzaGJvYXJkO1xuICAgICAgICB0YWJUb1VwZGF0ZS5pY29uID0gaWNvbjtcbiAgICAgICAgdGFiVG9VcGRhdGUucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGFiVG9VcGRhdGUubGFiZWwgPSBuYW1lO1xuICAgICAgfVxuICAgICAgdGhpcy50YWJzLnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVOYXZpZ2F0b3JJdGVtKG1vOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHRoaXMubmF2aWdhdG9yLnN0YXRlLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICBpZiAobm9kZS5wYXRoID09PSBgcmVwb3J0cy8ke21vLmlkfWApIHtcbiAgICAgICAgdGhpcy5uYXZpZ2F0b3IucmVtb3ZlKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChtby5jOHlfSXNOYXZpZ2F0b3JOb2RlKSB7XG4gICAgICBjb25zdCBub2RlVG9BZGQgPSBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgIGxhYmVsOiBtby5uYW1lLFxuICAgICAgICBwYXRoOiBgcmVwb3J0cy8ke21vLmlkfWAsXG4gICAgICAgIGljb246IG1vLmljb24sXG4gICAgICAgIHByaW9yaXR5OiBtby5wcmlvcml0eVxuICAgICAgfSk7XG4gICAgICB0aGlzLm5hdmlnYXRvci5hZGQobm9kZVRvQWRkKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBuYXZpZ2F0ZVRvRGFzaGJvYXJkKGRhc2hib2FyZE1POiBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCkge1xuICAgIGlmICgvZGFzaGJvYXJkLy50ZXN0KHRoaXMucm91dGVyLnVybCkpIHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLi4nLCBkYXNoYm9hcmRNTy5pZF0sIHtcbiAgICAgICAgcmVsYXRpdmVUbzogZ2V0QWN0aXZhdGVkUm91dGUodGhpcy5yb3V0ZXIpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycuLicsIHRoaXMuREFTSEJPQVJEX1JPVVRFX1BBVEgsIGRhc2hib2FyZE1PLmlkXSwge1xuICAgICAgICByZWxhdGl2ZVRvOiBnZXRBY3RpdmF0ZWRSb3V0ZSh0aGlzLnJvdXRlcilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNhbkVkaXREYXNoYm9hcmQobW8pIHtcbiAgICByZXR1cm4gdGhpcy5wZXJtaXNzaW9ucy5jYW5FZGl0KFsnUk9MRV9JTlZFTlRPUllfQURNSU4nLCAnUk9MRV9JTlZFTlRPUllfQ1JFQVRFJ10sIG1vKTtcbiAgfVxuXG4gIGlzTmFtZWQoZGFzaGJvYXJkOiBQYXJ0aWFsPENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0Pikge1xuICAgIHJldHVybiBzb21lKGtleXMoZGFzaGJvYXJkKSwgcHJvcCA9PlxuICAgICAgbmV3IFJlZ0V4cChcbiAgICAgICAgYF4ke3RoaXMuRlJBR01FTlRfTkFNRX0ke3RoaXMuSU5ERVhfU1BMSVR9JHtDb250ZXh0RGFzaGJvYXJkVHlwZS5OYW1lZH0ke3RoaXMuSU5ERVhfU1BMSVR9YFxuICAgICAgKS50ZXN0KHByb3ApXG4gICAgKTtcbiAgfVxuXG4gIGlzUmVwb3J0KGRhc2hib2FyZDogUGFydGlhbDxDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdD4pIHtcbiAgICByZXR1cm4gc29tZShrZXlzKGRhc2hib2FyZCksIHByb3AgPT5cbiAgICAgIG5ldyBSZWdFeHAoXG4gICAgICAgIGBeJHt0aGlzLkZSQUdNRU5UX05BTUV9JHt0aGlzLklOREVYX1NQTElUfSR7Q29udGV4dERhc2hib2FyZFR5cGUuTmFtZWR9JHt0aGlzLklOREVYX1NQTElUfSR7XG4gICAgICAgICAgdGhpcy5SRVBPUlRfUEFSVElBTF9OQU1FXG4gICAgICAgIH1gXG4gICAgICApLnRlc3QocHJvcClcbiAgICApO1xuICB9XG5cbiAgaXNEZXZpY2VUeXBlKGRhc2hib2FyZDogUGFydGlhbDxDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdD4pIHtcbiAgICByZXR1cm4gc29tZShrZXlzKGRhc2hib2FyZCksIHByb3AgPT5cbiAgICAgIG5ldyBSZWdFeHAoXG4gICAgICAgIGBeJHt0aGlzLkZSQUdNRU5UX05BTUV9JHt0aGlzLklOREVYX1NQTElUfSR7Q29udGV4dERhc2hib2FyZFR5cGUuRGV2aWNlVHlwZX0ke1xuICAgICAgICAgIHRoaXMuSU5ERVhfU1BMSVRcbiAgICAgICAgfWBcbiAgICAgICkudGVzdChwcm9wKVxuICAgICk7XG4gIH1cblxuICBnZXRTdHlsaW5nKHN0eWxlTGlzdCwgc3R5bGVOYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBjb25zdCBzdHlsaW5nID0gc3R5bGVMaXN0LmZpbmQoc3R5bGUgPT4gc3R5bGUgJiYgbmV3IFJlZ0V4cChzdHlsZU5hbWUsICdpJykudGVzdChzdHlsZS5jbGFzcykpO1xuICAgIHJldHVybiBzdHlsaW5nID8gc3R5bGluZy5jbGFzcyA6IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIG1hcFdpZGdldHMod2lkZ2V0czogV2lkZ2V0W10pIHtcbiAgICByZXR1cm4ga2V5QnkoXG4gICAgICB3aWRnZXRzLm1hcCh3aWRnZXQgPT4ge1xuICAgICAgICB3aWRnZXQuaWQgPSBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyKDIpO1xuICAgICAgICByZXR1cm4gd2lkZ2V0O1xuICAgICAgfSksXG4gICAgICAnaWQnXG4gICAgKTtcbiAgfVxuXG4gIGdldERhc2hib2FyZCQoZGFzaGJvYXJkSWRPck5hbWUsIGRhc2hib2FyZFR5cGU6IENvbnRleHREYXNoYm9hcmRUeXBlW10sIG1vPzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGUuZ2V0KGRhc2hib2FyZElkT3JOYW1lKTtcblxuICAgIGNvbnN0IGRhc2hib2FyZHMgPSBtb1xuICAgICAgPyB0aGlzLmdldENvbnRleHREYXNoYm9hcmRzKG1vLCBkYXNoYm9hcmRUeXBlKVxuICAgICAgOiBbdGhpcy5nZXROYW1lZERhc2hib2FyZChkYXNoYm9hcmRJZE9yTmFtZSldO1xuXG4gICAgY29uc3QgY2FjaGVSZWZyZXNoID0gdGhpcy5nZXRDb250ZXh0RGFzaGJvYXJkcyQoZGFzaGJvYXJkcykucGlwZShcbiAgICAgIHRhcChkYXNoYm9hcmQgPT4gdGhpcy5jYWNoZURhc2hib2FyZChkYXNoYm9hcmQpKSxcbiAgICAgIGZpbHRlcihcbiAgICAgICAgZGFzaGJvYXJkID0+XG4gICAgICAgICAgZGFzaGJvYXJkLmlkID09PSBkYXNoYm9hcmRJZE9yTmFtZSB8fFxuICAgICAgICAgIGhhcyhcbiAgICAgICAgICAgIGRhc2hib2FyZCxcbiAgICAgICAgICAgIGAke3RoaXMuRlJBR01FTlRfTkFNRX0ke3RoaXMuSU5ERVhfU1BMSVR9JHtDb250ZXh0RGFzaGJvYXJkVHlwZS5OYW1lZH0ke1xuICAgICAgICAgICAgICB0aGlzLklOREVYX1NQTElUXG4gICAgICAgICAgICB9JHtkYXNoYm9hcmRJZE9yTmFtZX1gXG4gICAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIGNhY2hlID8gb2YoY2FjaGUpIDogY2FjaGVSZWZyZXNoO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUYWJzJChtbzogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3QsIGRhc2hib2FyZFR5cGU6IENvbnRleHREYXNoYm9hcmRUeXBlW10pIHtcbiAgICBjb25zdCBkYXNoYm9hcmRzID0gdGhpcy5nZXRDb250ZXh0RGFzaGJvYXJkcyhtbywgZGFzaGJvYXJkVHlwZSk7XG4gICAgdGhpcy5zZXRCYXNlQ29udGV4dFJvdXRlKG1vLCBkYXNoYm9hcmRUeXBlKTtcblxuICAgIHJldHVybiB0aGlzLmdldENvbnRleHREYXNoYm9hcmRzJChkYXNoYm9hcmRzKS5waXBlKFxuICAgICAgbWFwKGRhc2hib2FyZCA9PiB0aGlzLnJlbW92ZURhc2hib2FyZE1vUHJvcGVydHkoZGFzaGJvYXJkKSksXG4gICAgICB0YXAoZGFzaGJvYXJkID0+IHRoaXMuY2FjaGVEYXNoYm9hcmQoZGFzaGJvYXJkKSksXG4gICAgICBtYXAoZGFzaGJvYXJkID0+IHRoaXMuY3JlYXRlRGFzaGJvYXJkVGFiKGRhc2hib2FyZCkpLFxuICAgICAgdG9BcnJheSgpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGV4dERhc2hib2FyZHMkKHJlcXVlc3RzOiBBcnJheTxQcm9taXNlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj4+KSB7XG4gICAgcmV0dXJuIGZyb20ocmVxdWVzdHMpLnBpcGUoXG4gICAgICBtZXJnZUFsbCgpLFxuICAgICAgbWVyZ2VNYXAocmVzcG9uc2UgPT4gcmVzcG9uc2UuZGF0YSBhcyBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdFtdKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldEJhc2VDb250ZXh0Um91dGUobW86IElNYW5hZ2VkT2JqZWN0LCBkYXNoYm9hcmRUeXBlOiBDb250ZXh0RGFzaGJvYXJkVHlwZVtdKSB7XG4gICAgY29uc3QgdHlwZSA9IGRhc2hib2FyZFR5cGUuaW5jbHVkZXMoQ29udGV4dERhc2hib2FyZFR5cGUuRGV2aWNlKVxuICAgICAgPyBDb250ZXh0RGFzaGJvYXJkVHlwZS5EZXZpY2VcbiAgICAgIDogQ29udGV4dERhc2hib2FyZFR5cGUuR3JvdXA7XG4gICAgdGhpcy5jdXJyZW50Q29udGV4dFJvdXRlID0gYCR7dHlwZX0vJHttby5pZH1gO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFucyBhbHJlYWR5IGNvcnJ1cHRlZCBkYXNoYm9hcmRzIGZyb20gZGFzaGJvYXJkTW8gcHJvcGVydHkuXG4gICAqIEFkZGVkIHRvIGZpeCBkYXNoYm9hcmRzIG9uIHRoZSBjbG91ZCBpbnN0YW5jZSAoZXUtbGF0ZXN0KS5cbiAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBnb2luZyB0byBiZSByZW1vdmVkIGFmdGVyIDEwMDcuNy4wLlxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVEYXNoYm9hcmRNb1Byb3BlcnR5KFxuICAgIGRhc2hib2FyZDogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3RcbiAgKTogQ29udGV4dERhc2hib2FyZE1hbmFnZWRPYmplY3Qge1xuICAgIGNvbnN0IGRhc2hib2FyZENvcHkgPSBjbG9uZURlZXAoZGFzaGJvYXJkKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGdldChkYXNoYm9hcmRDb3B5LCAnYzh5X0Rhc2hib2FyZC5jaGlsZHJlbicpO1xuICAgIGxldCB1cGRhdGVEYXNoYm9hcmQgPSBmYWxzZTtcblxuICAgIGZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgIGlmIChnZXQoY2hpbGQsICdjb21wb25lbnRUcmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dCcpKSB7XG4gICAgICAgIGRlbGV0ZSBjaGlsZC5jb21wb25lbnRUcmFuc2Zvcm1Db25maWdXaXRoQ29udGV4dDtcbiAgICAgICAgdXBkYXRlRGFzaGJvYXJkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXQoY2hpbGQsICdjb25maWcuZGFzaGJvYXJkTW8nKSkge1xuICAgICAgICBkZWxldGUgY2hpbGQuY29uZmlnLmRhc2hib2FyZE1vO1xuICAgICAgICB1cGRhdGVEYXNoYm9hcmQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVwZGF0ZURhc2hib2FyZCkge1xuICAgICAgdGhpcy51cGRhdGUoZGFzaGJvYXJkQ29weSk7XG4gICAgfVxuICAgIHJldHVybiBkYXNoYm9hcmRDb3B5O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWNoZURhc2hib2FyZChkYXNoYm9hcmQ6IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0KSB7XG4gICAgdGhpcy5jYWNoZS5zZXQoZGFzaGJvYXJkLmlkLCBkYXNoYm9hcmQpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVEYXNoYm9hcmRUYWIoZGFzaGJvYXJkOiBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnN0IHsgYzh5X0Rhc2hib2FyZDogX2Rhc2hib2FyZCwgaWQgfSA9IGRhc2hib2FyZDtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogX2Rhc2hib2FyZC5pY29uLFxuICAgICAgcGF0aDogYCR7dGhpcy5EQVNIQk9BUkRfUk9VVEVfUEFUSH0vJHtpZH1gLFxuICAgICAgbGFiZWw6IF9kYXNoYm9hcmQubmFtZSxcbiAgICAgIHByaW9yaXR5OiBfZGFzaGJvYXJkLnByaW9yaXR5LFxuICAgICAgaGlkZTogdGhpcy5pc1JlcG9ydChkYXNoYm9hcmQpXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW4oZGFzaGJvYXJkKSB7XG4gICAgY29uc3QganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRhc2hib2FyZCwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICckJGhhc2hLZXknIHx8IGtleSA9PT0gJ2tsYXNzZXMnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmFtZWREYXNoYm9hcmQobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5Lmxpc3Qoe1xuICAgICAgZnJhZ21lbnRUeXBlOiBgJHt0aGlzLkZSQUdNRU5UX05BTUV9JHt0aGlzLklOREVYX1NQTElUfSR7Q29udGV4dERhc2hib2FyZFR5cGUuTmFtZWR9JHtcbiAgICAgICAgdGhpcy5JTkRFWF9TUExJVFxuICAgICAgfSR7bmFtZX1gLFxuICAgICAgcGFnZVNpemU6IDFcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGV4dERhc2hib2FyZHMobW86IElNYW5hZ2VkT2JqZWN0LCBkYXNoYm9hcmRUeXBlOiBDb250ZXh0RGFzaGJvYXJkVHlwZVtdKSB7XG4gICAgcmV0dXJuIGRhc2hib2FyZFR5cGUubWFwKCh0eXBlOiBDb250ZXh0RGFzaGJvYXJkVHlwZSkgPT5cbiAgICAgIHRoaXMuaW52ZW50b3J5Lmxpc3Qoe1xuICAgICAgICBmcmFnbWVudFR5cGU6IHRoaXMuY3JlYXRlRGFzaGJvYXJkRnJhZ21lbnQobW8sIHR5cGUpLFxuICAgICAgICBwYWdlU2l6ZTogdGhpcy5ERUZBVUxUX1BBR0VTSVpFXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURhc2hib2FyZEZyYWdtZW50KG1vOiBJTWFuYWdlZE9iamVjdCwgdHlwZTogQ29udGV4dERhc2hib2FyZFR5cGUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKG1vLmM4eV9SZXBvcnQpIHtcbiAgICAgIHZhbHVlID0gYCR7dGhpcy5SRVBPUlRfUEFSVElBTF9OQU1FfSR7bW8uaWR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSB0eXBlID09PSBDb250ZXh0RGFzaGJvYXJkVHlwZS5EZXZpY2VUeXBlID8gbW8udHlwZSA6IG1vLmlkO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dGhpcy5GUkFHTUVOVF9OQU1FfSR7dGhpcy5JTkRFWF9TUExJVH0ke3R5cGV9JHt0aGlzLklOREVYX1NQTElUfSR7dmFsdWV9YDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGFzaGJvYXJkVHlwZUZyb21WaWV3Q29udGV4dChkYXNoYm9hcmRDZmcsIGNvbnRleHQpIHtcbiAgICBsZXQgZGFzaGJvYXJkVHlwZTtcbiAgICBpZiAoY29udGV4dC5jb250ZXh0ID09PSBWaWV3Q29udGV4dC5EZXZpY2UpIHtcbiAgICAgIGRhc2hib2FyZFR5cGUgPSBkYXNoYm9hcmRDZmcuZGV2aWNlVHlwZVxuICAgICAgICA/IENvbnRleHREYXNoYm9hcmRUeXBlLkRldmljZVR5cGVcbiAgICAgICAgOiBDb250ZXh0RGFzaGJvYXJkVHlwZS5EZXZpY2U7XG4gICAgfVxuICAgIGlmIChjb250ZXh0LmNvbnRleHQgPT09IFZpZXdDb250ZXh0Lkdyb3VwKSB7XG4gICAgICBkYXNoYm9hcmRUeXBlID0gQ29udGV4dERhc2hib2FyZFR5cGUuR3JvdXA7XG4gICAgfVxuICAgIHJldHVybiBkYXNoYm9hcmRUeXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVGcmFnbWVudEtleShjb250ZXh0RGFzaGJvYXJkVHlwZTogQ29udGV4dERhc2hib2FyZFR5cGUsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gW3RoaXMuRlJBR01FTlRfTkFNRSwgY29udGV4dERhc2hib2FyZFR5cGUsIHZhbHVlXS5qb2luKHRoaXMuSU5ERVhfU1BMSVQpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRTZXRHbG9iYWwoZGFzaGJvYXJkOiBQYXJ0aWFsPENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0Pikge1xuICAgIGlmICgodGhpcy5pc05hbWVkKGRhc2hib2FyZCkgJiYgIXRoaXMuaXNSZXBvcnQoZGFzaGJvYXJkKSkgfHwgdGhpcy5pc0RldmljZVR5cGUoZGFzaGJvYXJkKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl19