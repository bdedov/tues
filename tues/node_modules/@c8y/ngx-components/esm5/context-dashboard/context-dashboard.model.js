import { InjectionToken } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
export var CONTEXT_DASHBOARD_CONFIG = new InjectionToken('ContextDashboardConfig');
export var ContextDashboardType;
(function (ContextDashboardType) {
    ContextDashboardType["Device"] = "device";
    ContextDashboardType["DeviceType"] = "type";
    ContextDashboardType["Group"] = "group";
    ContextDashboardType["Named"] = "name";
    ContextDashboardType["Report"] = "report";
})(ContextDashboardType || (ContextDashboardType = {}));
export var WIDGET_HEADER_CLASSES = [
    {
        label: gettext('Regular`style`'),
        class: 'panel-title-regular',
        description: gettext('The widget has no border between header and content.')
    },
    {
        label: gettext('Border`style`'),
        class: 'panel-title-border',
        description: gettext('The widget has a small separation border between header and content.')
    },
    {
        label: gettext('Overlay`style`'),
        class: 'panel-title-overlay',
        description: gettext('The widget content overlays the header.')
    },
    {
        label: gettext('Hidden`style`'),
        class: 'panel-title-hidden',
        description: gettext('The widget header is not shown.')
    }
];
export var WIDGET_CONTENT_CLASSES = [
    {
        label: gettext('Light`style`'),
        class: 'panel-content-light',
        description: gettext('The widget is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`style`'),
        class: 'panel-content-dark',
        description: gettext('The widget is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`style`'),
        class: 'panel-content-transparent',
        description: gettext('The widget is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`style`'),
        class: 'panel-content-branded',
        description: gettext('The widget is styled with the main brand color.')
    }
];
export var DASHBOARD_THEME_CLASSES = [
    {
        label: gettext('Light`theme`'),
        class: 'dashboard-theme-light',
        description: gettext('The dashboard is styled with a light background and has low contrast.')
    },
    {
        label: gettext('Dark`theme`'),
        class: 'dashboard-theme-dark',
        description: gettext('The dashboard is styled with a dark background and has high contrast.')
    },
    {
        label: gettext('Transparent`theme`'),
        class: 'dashboard-theme-transparent',
        description: gettext('The dashboard is styled with a transparent background and therefore is border-less.')
    },
    {
        label: gettext('Branded`theme`'),
        class: 'dashboard-theme-branded',
        description: gettext('The dashboard is styled with the main brand color.')
    }
];
//# sourceMappingURL=data:application/json;base64,