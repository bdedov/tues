import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions } from '@c8y/client';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
var ApiService = /** @class */ (function () {
    function ApiService(client) {
        this.client = client;
        this.callsSubject = new Subject();
        this.calls = this.callsSubject.asObservable();
        this.hookIntoClientFetch();
    }
    ApiService.prototype.hookResponse = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'finish';
        }), filter(hookFilter));
    };
    ApiService.prototype.hookRequest = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'start';
        }), filter(hookFilter));
    };
    ApiService.prototype.onFinish = function (call) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.callsSubject.next(tslib_1.__assign({ phase: 'finish' }, call));
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.onStart = function (call) {
        this.callsSubject.next(tslib_1.__assign({ phase: 'start' }, call));
    };
    ApiService.prototype.resolveData = function (call) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, method, cb;
            return tslib_1.__generator(this, function (_a) {
                response = call.response, method = call.method;
                if ('data' in response) {
                    return [2 /*return*/, Promise.resolve({ data: response.data, method: method })];
                }
                else {
                    cb = function (data) { return ({ data: data, method: method }); };
                    return [2 /*return*/, response.clone().json().then(cb, cb)];
                }
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.hookIntoClientFetch = function () {
        var _this = this;
        var fetch = this.client.fetch.bind(this.client);
        this.client.fetch = function (url, options) {
            if (options === void 0) { options = { method: 'GET' }; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var method, fetchPromise;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    method = options.method;
                    this.onStart({ options: options, method: method, url: url });
                    fetchPromise = fetch(url, options);
                    if (typeof options.responseInterceptor === 'function') {
                        fetchPromise = fetchPromise.then(options.responseInterceptor);
                    }
                    fetchPromise.then(function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); }, function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); });
                    return [2 /*return*/, fetchPromise];
                });
            });
        };
    };
    ApiService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    ApiService = tslib_1.__decorate([
        Injectable()
    ], ApiService);
    return ApiService;
}());
export { ApiService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXBpL2FwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3hDO0lBSUUsb0JBQW9CLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFGL0IsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBRzVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM5QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsaUNBQVksR0FBWixVQUFhLFVBQXNDO1FBQ2pELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLE1BQU0sQ0FBQyxVQUFDLEVBQVM7Z0JBQVAsZ0JBQUs7WUFBTyxPQUFBLEtBQUssS0FBSyxRQUFRO1FBQWxCLENBQWtCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUNuQixDQUFDO0lBQ0osQ0FBQztJQUVELGdDQUFXLEdBQVgsVUFBWSxVQUFzQztRQUNoRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUMzQixNQUFNLENBQUMsVUFBQyxFQUFTO2dCQUFQLGdCQUFLO1lBQU8sT0FBQSxLQUFLLEtBQUssT0FBTztRQUFqQixDQUFpQixDQUFDLEVBQ3hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FDbkIsQ0FBQztJQUNKLENBQUM7SUFFSyw2QkFBUSxHQUFkLFVBQWUsSUFBYTs7O2dCQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksb0JBQUcsS0FBSyxFQUFFLFFBQVEsSUFBSyxJQUFJLEVBQUcsQ0FBQzs7OztLQUN0RDtJQUVELDRCQUFPLEdBQVAsVUFBUSxJQUFhO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxvQkFBRyxLQUFLLEVBQUUsT0FBTyxJQUFLLElBQUksRUFBRyxDQUFDO0lBQ3RELENBQUM7SUFFSyxnQ0FBVyxHQUFqQixVQUFrQixJQUFhOzs7O2dCQUNyQixRQUFRLEdBQWEsSUFBSSxTQUFqQixFQUFFLE1BQU0sR0FBSyxJQUFJLE9BQVQsQ0FBVTtnQkFDbEMsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO29CQUN0QixzQkFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxFQUFDO2lCQUN6RDtxQkFBTTtvQkFDQyxFQUFFLEdBQUcsVUFBQyxJQUFJLElBQUssT0FBQSxDQUFDLEVBQUUsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUMsQ0FBQyxFQUFqQixDQUFpQixDQUFDO29CQUN2QyxzQkFBUSxRQUFxQixDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUM7aUJBQzNEOzs7O0tBQ0Y7SUFFTyx3Q0FBbUIsR0FBM0I7UUFBQSxpQkFlQztRQWRDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsVUFBTyxHQUFHLEVBQUUsT0FBMEQ7WUFBMUQsd0JBQUEsRUFBQSxZQUE0QyxNQUFNLEVBQUUsS0FBSyxFQUFDOzs7OztvQkFDaEYsTUFBTSxHQUFLLE9BQU8sT0FBWixDQUFhO29CQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsQ0FBQyxDQUFDO29CQUNuQyxZQUFZLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDdkMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxtQkFBbUIsS0FBSyxVQUFVLEVBQUU7d0JBQ3JELFlBQVksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO3FCQUMvRDtvQkFDRCxZQUFZLENBQUMsSUFBSSxDQUNmLFVBQUMsUUFBa0IsSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxHQUFHLEtBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLEVBQWpELENBQWlELEVBQ3pFLFVBQUMsUUFBa0IsSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxHQUFHLEtBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLEVBQWpELENBQWlELENBQzFFLENBQUM7b0JBQ0Ysc0JBQU8sWUFBWSxFQUFDOzs7U0FDckIsQ0FBQztJQUNKLENBQUM7O2dCQXBEMkIsV0FBVzs7SUFKNUIsVUFBVTtRQUR0QixVQUFVLEVBQUU7T0FDQSxVQUFVLENBeUR0QjtJQUFELGlCQUFDO0NBQUEsQUF6REQsSUF5REM7U0F6RFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZldGNoQ2xpZW50LCBJRmV0Y2hPcHRpb25zIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBpQ2FsbCwgQXBpQ2FsbE9wdGlvbnMgfSBmcm9tICcuL2FwaS5tb2RlbCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcGlTZXJ2aWNlIHtcbiAgY2FsbHM6IE9ic2VydmFibGU8QXBpQ2FsbD47XG4gIHByaXZhdGUgY2FsbHNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8QXBpQ2FsbD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQpIHtcbiAgICB0aGlzLmNhbGxzID0gdGhpcy5jYWxsc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5ob29rSW50b0NsaWVudEZldGNoKCk7XG4gIH1cblxuICBob29rUmVzcG9uc2UoaG9va0ZpbHRlcjogKGNhbGw6IEFwaUNhbGwpID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsc1N1YmplY3QucGlwZShcbiAgICAgIGZpbHRlcigoeyBwaGFzZSB9KSA9PiBwaGFzZSA9PT0gJ2ZpbmlzaCcpLFxuICAgICAgZmlsdGVyKGhvb2tGaWx0ZXIpXG4gICAgKTtcbiAgfVxuXG4gIGhvb2tSZXF1ZXN0KGhvb2tGaWx0ZXI6IChjYWxsOiBBcGlDYWxsKSA9PiBib29sZWFuKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbHNTdWJqZWN0LnBpcGUoXG4gICAgICBmaWx0ZXIoKHsgcGhhc2UgfSkgPT4gcGhhc2UgPT09ICdzdGFydCcpLFxuICAgICAgZmlsdGVyKGhvb2tGaWx0ZXIpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG9uRmluaXNoKGNhbGw6IEFwaUNhbGwpIHtcbiAgICB0aGlzLmNhbGxzU3ViamVjdC5uZXh0KHsgcGhhc2U6ICdmaW5pc2gnLCAuLi5jYWxsIH0pO1xuICB9XG5cbiAgb25TdGFydChjYWxsOiBBcGlDYWxsKSB7XG4gICAgdGhpcy5jYWxsc1N1YmplY3QubmV4dCh7IHBoYXNlOiAnc3RhcnQnLCAuLi5jYWxsIH0pO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZURhdGEoY2FsbDogQXBpQ2FsbCk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyByZXNwb25zZSwgbWV0aG9kIH0gPSBjYWxsO1xuICAgIGlmICgnZGF0YScgaW4gcmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiByZXNwb25zZS5kYXRhLCBtZXRob2QgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNiID0gKGRhdGEpID0+ICh7IGRhdGEsIG1ldGhvZH0pO1xuICAgICAgcmV0dXJuIChyZXNwb25zZSBhcyBSZXNwb25zZSkuY2xvbmUoKS5qc29uKCkudGhlbihjYiwgY2IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaG9va0ludG9DbGllbnRGZXRjaCgpIHtcbiAgICBjb25zdCBmZXRjaCA9IHRoaXMuY2xpZW50LmZldGNoLmJpbmQodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuY2xpZW50LmZldGNoID0gYXN5bmMgKHVybCwgb3B0aW9uczogQXBpQ2FsbE9wdGlvbnMgJiBJRmV0Y2hPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnfSkgPT4ge1xuICAgICAgY29uc3QgeyBtZXRob2QgfSA9IG9wdGlvbnM7XG4gICAgICB0aGlzLm9uU3RhcnQoeyBvcHRpb25zLCBtZXRob2QsIHVybCB9KTtcbiAgICAgIGxldCBmZXRjaFByb21pc2UgPSBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlc3BvbnNlSW50ZXJjZXB0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmV0Y2hQcm9taXNlID0gZmV0Y2hQcm9taXNlLnRoZW4ob3B0aW9ucy5yZXNwb25zZUludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIGZldGNoUHJvbWlzZS50aGVuKFxuICAgICAgICAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB0aGlzLm9uRmluaXNoKHsgcmVzcG9uc2UsIHVybCwgb3B0aW9ucywgbWV0aG9kIH0pLFxuICAgICAgICAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB0aGlzLm9uRmluaXNoKHsgcmVzcG9uc2UsIHVybCwgb3B0aW9ucywgbWV0aG9kIH0pXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZldGNoUHJvbWlzZTtcbiAgICB9O1xuICB9XG59XG4iXX0=