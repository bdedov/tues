import * as tslib_1 from "tslib";
import { Component, TemplateRef, Attribute, HostBinding } from '@angular/core';
import { AlertService } from './alert.service';
/**
 * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
 *
 * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
 *
 * ## Example:
 * ```html
 *  <div class="alerts">
 *    <c8y-alert-outlet></c8y-alert-outlet>
 *  </div>
 * ```
 */
var AlertOutletComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function AlertOutletComponent(position, alertService) {
        this.position = position;
        this.alertService = alertService;
        /**
         * Currently displayed details of an alert. Only one alert’s details can be displayed at a time.”
         */
        this.detailDisplayedAlert = {};
        /**
         * @ignore
         */
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    Object.defineProperty(AlertOutletComponent.prototype, "alerts", {
        /**
         * The array of current alerts.
         */
        get: function () {
            return this.alertService.state$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
     */
    AlertOutletComponent.prototype.getClass = function (alert) {
        var classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push("alert-" + alert.type);
        return classes.join(' ');
    };
    /**
     * Executes alert’s onClose method, if provided, and closes the alert.
     * @param alert The alert which will be closed.
     */
    AlertOutletComponent.prototype.close = function (alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    };
    /**
     * Expands details part of particular alert, and collapses details for another alerts.
     * @param alert The alert which details should be expanded.
     */
    AlertOutletComponent.prototype.showDetails = function (alert) {
        if (alert.onDetail) {
            return alert.onDetail();
        }
        this.detailDisplayedAlert = Object.assign({}, alert);
        this.detailDisplayedAlert.mode = 'raw';
        this.setDetailsContent(alert);
    };
    /**
     * Returns true if alert has extra detailedData or defines custom onDetail method.
     */
    AlertOutletComponent.prototype.hasDetails = function (alert) {
        return (alert.detailedData || alert.onDetail);
    };
    /**
     * Collapses alert's details.
     */
    AlertOutletComponent.prototype.closeDetails = function () {
        this.detailDisplayedAlert = {};
    };
    /**
     * Returns true if details part of alert is expanded.
     */
    AlertOutletComponent.prototype.isDetailsShow = function (alert) {
        return this.alertService.areSame(alert, this.detailDisplayedAlert);
    };
    /**
     * @ignore
     */
    AlertOutletComponent.prototype.isTemplateRef = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * @ignore
     */
    AlertOutletComponent.prototype.template = function (content) {
        return this.isTemplateRef(content) ? content : undefined;
    };
    AlertOutletComponent.prototype.setDetailsContent = function (alert) {
        if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
            this.detailDisplayedAlert.contents = alert.detailedData;
        }
        else {
            this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
        }
    };
    AlertOutletComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['position',] }] },
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        HostBinding('class.static')
    ], AlertOutletComponent.prototype, "isStatic", void 0);
    AlertOutletComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-alert-outlet',
            template: "<div\n  class=\"alert animated fadeInRightBig\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [innerText]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i class=\"fa fa-chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i class=\"fa fa-chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [innerText]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
        }),
        tslib_1.__param(0, Attribute('position'))
    ], AlertOutletComponent);
    return AlertOutletComponent;
}());
export { AlertOutletComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2FsZXJ0L2FsZXJ0LW91dGxldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DOzs7Ozs7Ozs7OztHQVdHO0FBS0g7SUFlRTs7T0FFRztJQUNILDhCQUNpQyxRQUFnQixFQUN4QyxZQUEwQjtRQURGLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDeEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFuQm5DOztXQUVHO1FBQ0gseUJBQW9CLEdBQVEsRUFBRSxDQUFDO1FBQy9COztXQUVHO1FBQzBCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFjNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUM3QyxDQUFDO0lBWEQsc0JBQUksd0NBQU07UUFIVjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTtJQVVEOztPQUVHO0lBQ0gsdUNBQVEsR0FBUixVQUFTLEtBQVk7UUFDbkIsSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ25CLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMxQjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBUyxLQUFLLENBQUMsSUFBTSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7O09BR0c7SUFDSCxvQ0FBSyxHQUFMLFVBQU0sS0FBWTtRQUNoQixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDakIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNEOzs7T0FHRztJQUNILDBDQUFXLEdBQVgsVUFBWSxLQUFZO1FBQ3RCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN6QjtRQUNELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNEOztPQUVHO0lBQ0gseUNBQVUsR0FBVixVQUFXLEtBQVk7UUFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDRDs7T0FFRztJQUNILDJDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFDRDs7T0FFRztJQUNILDRDQUFhLEdBQWIsVUFBYyxLQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFDRDs7T0FFRztJQUNILDRDQUFhLEdBQWIsVUFBYyxLQUFLO1FBQ2pCLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQztJQUN0QyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCx1Q0FBUSxHQUFSLFVBQVMsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDM0QsQ0FBQztJQUNPLGdEQUFpQixHQUF6QixVQUEwQixLQUFZO1FBQ3BDLElBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsWUFBWSxLQUFLLFFBQVEsRUFBRztZQUN0RixJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7U0FDekQ7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsRjtJQUNILENBQUM7OzZDQTFFRSxTQUFTLFNBQUMsVUFBVTtnQkFDQSxZQUFZOztJQVpOO1FBQTVCLFdBQVcsQ0FBQyxjQUFjLENBQUM7MERBQWtCO0lBUm5DLG9CQUFvQjtRQUpoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLHNrREFBNEM7U0FDN0MsQ0FBQztRQW9CRyxtQkFBQSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7T0FuQmIsb0JBQW9CLENBOEZoQztJQUFELDJCQUFDO0NBQUEsQUE5RkQsSUE4RkM7U0E5Rlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBUZW1wbGF0ZVJlZiwgQXR0cmlidXRlLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICcuL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4vYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBBbGVydCBvdXRsZXQgY29tcG9uZW50IHNob3dzIGFsbCBhZGRlZCBhbGVydHMuIEl0IGlzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgYGM4eS1ib290c3RyYXBgIGNvbXBvbmVudC5cbiAqXG4gKiBGb3IgYXBwbGljYXRpb25zIHdoaWNoIGRvbuKAmXQgdXNlIGBjOHktYm9vdHN0cmFwYCBjb21wb25lbnQgYnV0IHdhbnQgdG8gZGlzcGxheSBhbGVydHMgdmlhIEFsZXJ0U2VydmljZSwgYSBjOHktYWxlcnQtb3V0bGV0IGNvbXBvbmVudCBuZWVkcyB0byBiZSBhZGRlZCBleHBsaWNpdGx5IGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiAjIyBFeGFtcGxlOlxuICogYGBgaHRtbFxuICogIDxkaXYgY2xhc3M9XCJhbGVydHNcIj5cbiAqICAgIDxjOHktYWxlcnQtb3V0bGV0PjwvYzh5LWFsZXJ0LW91dGxldD5cbiAqICA8L2Rpdj5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWxlcnQtb3V0bGV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FsZXJ0LW91dGxldC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQWxlcnRPdXRsZXRDb21wb25lbnQge1xuICAvKipcbiAgICogQ3VycmVudGx5IGRpc3BsYXllZCBkZXRhaWxzIG9mIGFuIGFsZXJ0LiBPbmx5IG9uZSBhbGVydOKAmXMgZGV0YWlscyBjYW4gYmUgZGlzcGxheWVkIGF0IGEgdGltZS7igJ1cbiAgICovXG4gIGRldGFpbERpc3BsYXllZEFsZXJ0OiBhbnkgPSB7fTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3RhdGljJykgaXNTdGF0aWMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoZSBhcnJheSBvZiBjdXJyZW50IGFsZXJ0cy5cbiAgICovXG4gIGdldCBhbGVydHMoKTogQmVoYXZpb3JTdWJqZWN0PEFsZXJ0W10+IHtcbiAgICByZXR1cm4gdGhpcy5hbGVydFNlcnZpY2Uuc3RhdGUkO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBAQXR0cmlidXRlKCdwb3NpdGlvbicpIHByaXZhdGUgcG9zaXRpb246IHN0cmluZyxcbiAgICBwdWJsaWMgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5pc1N0YXRpYyA9IHRoaXMucG9zaXRpb24gPT09ICdzdGF0aWMnO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ1NTIGNsYXNzIGZvciBhbiBhbGVydCBkZXBlbmRpbmcgb24gaXRzIHR5cGUgdG8gc3R5bGUgdGhlIGNvcnJlc3BvbmRpbmcgYWxlcnQgY29tcG9uZW50LlxuICAgKi9cbiAgZ2V0Q2xhc3MoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGlmIChhbGVydC50eXBlICE9PSAnZGFuZ2VyJykge1xuICAgICAgY2xhc3Nlcy5wdXNoKCdpbnRlcmFjdCcpO1xuICAgIH1cbiAgICBjbGFzc2VzLnB1c2goYGFsZXJ0LSR7YWxlcnQudHlwZX1gKTtcbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGFsZXJ04oCZcyBvbkNsb3NlIG1ldGhvZCwgaWYgcHJvdmlkZWQsIGFuZCBjbG9zZXMgdGhlIGFsZXJ0LlxuICAgKiBAcGFyYW0gYWxlcnQgVGhlIGFsZXJ0IHdoaWNoIHdpbGwgYmUgY2xvc2VkLlxuICAgKi9cbiAgY2xvc2UoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgaWYgKGFsZXJ0Lm9uQ2xvc2UpIHtcbiAgICAgIGFsZXJ0Lm9uQ2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5hbGVydFNlcnZpY2UucmVtb3ZlKGFsZXJ0KTtcbiAgfVxuICAvKipcbiAgICogRXhwYW5kcyBkZXRhaWxzIHBhcnQgb2YgcGFydGljdWxhciBhbGVydCwgYW5kIGNvbGxhcHNlcyBkZXRhaWxzIGZvciBhbm90aGVyIGFsZXJ0cy5cbiAgICogQHBhcmFtIGFsZXJ0IFRoZSBhbGVydCB3aGljaCBkZXRhaWxzIHNob3VsZCBiZSBleHBhbmRlZC5cbiAgICovXG4gIHNob3dEZXRhaWxzKGFsZXJ0OiBBbGVydCkge1xuICAgIGlmIChhbGVydC5vbkRldGFpbCkge1xuICAgICAgcmV0dXJuIGFsZXJ0Lm9uRGV0YWlsKCk7XG4gICAgfVxuICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQgPSBPYmplY3QuYXNzaWduKHt9LCBhbGVydCk7XG4gICAgdGhpcy5kZXRhaWxEaXNwbGF5ZWRBbGVydC5tb2RlID0gJ3Jhdyc7XG4gICAgdGhpcy5zZXREZXRhaWxzQ29udGVudChhbGVydCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbGVydCBoYXMgZXh0cmEgZGV0YWlsZWREYXRhIG9yIGRlZmluZXMgY3VzdG9tIG9uRGV0YWlsIG1ldGhvZC5cbiAgICovXG4gIGhhc0RldGFpbHMoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgcmV0dXJuIChhbGVydC5kZXRhaWxlZERhdGEgfHwgYWxlcnQub25EZXRhaWwpO1xuICB9XG4gIC8qKlxuICAgKiBDb2xsYXBzZXMgYWxlcnQncyBkZXRhaWxzLlxuICAgKi9cbiAgY2xvc2VEZXRhaWxzKCkge1xuICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQgPSB7fTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGRldGFpbHMgcGFydCBvZiBhbGVydCBpcyBleHBhbmRlZC5cbiAgICovXG4gIGlzRGV0YWlsc1Nob3coYWxlcnQ6IEFsZXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuYWxlcnRTZXJ2aWNlLmFyZVNhbWUoYWxlcnQsIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQpO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpc1RlbXBsYXRlUmVmKHZhbHVlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRlbXBsYXRlKGNvbnRlbnQpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmlzVGVtcGxhdGVSZWYoY29udGVudCkgPyBjb250ZW50IDogdW5kZWZpbmVkO1xuICB9XG4gIHByaXZhdGUgc2V0RGV0YWlsc0NvbnRlbnQoYWxlcnQ6IEFsZXJ0KSB7XG4gICAgaWYgKCB0aGlzLmlzVGVtcGxhdGVSZWYoYWxlcnQuZGV0YWlsZWREYXRhKSB8fCB0eXBlb2YgYWxlcnQuZGV0YWlsZWREYXRhID09PSAnc3RyaW5nJyApIHtcbiAgICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQuY29udGVudHMgPSBhbGVydC5kZXRhaWxlZERhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQuY29udGVudHMgPSBKU09OLnN0cmluZ2lmeShhbGVydC5kZXRhaWxlZERhdGEsIG51bGwsIDIpO1xuICAgIH1cbiAgfVxufVxuIl19