import * as tslib_1 from "tslib";
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { gettext } from '../i18n/gettext';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    SelectComponent.prototype.preventClick = function (evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    };
    SelectComponent.prototype.isOpenChange = function (isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    };
    SelectComponent.prototype.outterSelected = function (item) {
        var selected = this.selected;
        var isSelected = function () { return false; };
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = function (i) { return selected.indexOf(i) > -1; };
        }
        return isSelected(item);
    };
    SelectComponent.prototype.isSelected = function (item) {
        return this.itemsSelected.has(item);
    };
    SelectComponent.prototype.isAllItemsSelected = function () {
        return this.itemsSelected.size === this.items.length;
    };
    SelectComponent.prototype.isAllFilteredSelected = function () {
        return this.itemsSelected.size === this.filteredItems.length;
    };
    SelectComponent.prototype.applyChanges = function () {
        var selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    };
    SelectComponent.prototype.selectAll = function (checked) {
        var _this = this;
        this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
    };
    SelectComponent.prototype.onChangeItem = function (checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    };
    SelectComponent.prototype.updateFiltered = function (term) {
        if (term) {
            var search_1 = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(function (_a) {
                var name = _a.name;
                return search_1.test(name);
            });
        }
        else {
            this.filteredItems = this.items;
        }
    };
    SelectComponent.prototype.getSelectAllToggleStatus = function () {
        var label = this.getLabel();
        var checked = this.isAllSelected();
        var indeterminate = !checked && this.itemsSelected.size > 0;
        return { label: label, checked: checked, indeterminate: indeterminate };
    };
    SelectComponent.prototype.ngOnChanges = function (changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.updateLabel = function () {
        var _this = this;
        var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(function (_a) {
                var name = _a.name;
                return name;
            }).join(', ');
        }
    };
    SelectComponent.prototype.updateSelected = function () {
        var _this = this;
        var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
        itemsSelected.clear();
        items.forEach(function (item) {
            if (_this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    };
    SelectComponent.prototype.isAllSelected = function () {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.getLabel = function () {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    };
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selectedLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "applyLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output()
    ], SelectComponent.prototype, "onChange", void 0);
    tslib_1.__decorate([
        ViewChild(BsDropdownDirective, { static: false })
    ], SelectComponent.prototype, "dropdown", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event'])
    ], SelectComponent.prototype, "preventClick", null);
    SelectComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-select',
            template: "<div\n  class=\"c8y-child-assets-selector  dropdown fit-h\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Filter' | translate }}\u2026\"\n          (keyup)=\"updateFiltered($event.target.value)\"\n          [(ngModel)]=\"searchFilter\"\n        />\n        <span class=\"input-group-addon\">\n          <i class=\"fa fa-search\" *ngIf=\"!textFilter\"></i>\n          <i class=\"fa fa-times text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"multiselect-item\">\n      <label\n        [title]=\"getSelectAllToggleStatus().label\"\n        class=\"c8y-checkbox input-sm\"\n        ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n      >\n        <input\n          type=\"checkbox\"\n          [checked]=\"getSelectAllToggleStatus().checked\"\n          (change)=\"selectAll($event.target.checked)\"\n          [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n          style=\"margin-top:0;\"\n        />\n        <span></span>\n        <span class=\"label-text \">\n          {{ getSelectAllToggleStatus().label }}\n        </span>\n      </label>\n    </li>\n\n    <li class=\"multiselect-item-container\">\n      <ul class=\"list-unstyled\">\n        <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n          <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n            <input\n              type=\"checkbox\"\n              [checked]=\"isSelected(item)\"\n              (change)=\"onChangeItem($event.target.checked, item)\"\n              style=\"margin-top:0\"\n            />\n            <span></span>\n            <span class=\"label-text \">\n              {{ item.name | translate }}\n            </span>\n          </label>\n        </li>\n      </ul>\n    </li>\n    <li class=\"divider\"></li>\n    <li>\n      <button\n        title=\"{{ applyLabel | translate }}\"\n        class=\"btn btn-primary btn-block\"\n        (click)=\"applyChanges()\"\n      >\n        {{ applyLabel | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
        })
    ], SelectComponent);
    return SelectComponent;
}());
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBRU4sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBZXZCO0lBSkE7UUFLVyxnQkFBVyxHQUFXLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU3QyxlQUFVLEdBQVcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBR3JDLGFBQVEsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU5RCxlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2Ysa0JBQWEsR0FBVyxFQUFFLENBQUM7UUFDM0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDWCxxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFDdEMsdUJBQWtCLEdBQVE7WUFDeEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDbkIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7U0FDckMsQ0FBQztRQUNGLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ2Isa0JBQWEsR0FBYyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLGVBQVUsR0FBRyxLQUFLLENBQUM7SUEwSDdCLENBQUM7SUF2SEMsc0NBQVksR0FBWixVQUFhLEdBQUc7UUFDZCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxzQ0FBWSxHQUFaLFVBQWEsTUFBZTtRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsd0NBQWMsR0FBZCxVQUFlLElBQVU7UUFDZixJQUFBLHdCQUFRLENBQVU7UUFDMUIsSUFBSSxVQUFVLEdBQVEsY0FBTSxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUM7UUFDbEMsSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7WUFDbEMsVUFBVSxHQUFHLFFBQVEsQ0FBQztTQUN2QjthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxVQUFVLEdBQUcsVUFBQyxDQUFPLElBQUssT0FBQSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUF4QixDQUF3QixDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELG9DQUFVLEdBQVYsVUFBVyxJQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELDRDQUFrQixHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDdkQsQ0FBQztJQUVELCtDQUFxQixHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDL0QsQ0FBQztJQUVELHNDQUFZLEdBQVo7UUFDRSxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxtQ0FBUyxHQUFULFVBQVUsT0FBZ0I7UUFBMUIsaUJBRUM7UUFEQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxPQUFnQixFQUFFLElBQVU7UUFDdkMsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsd0NBQWMsR0FBZCxVQUFlLElBQVk7UUFDekIsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFNLFFBQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQVE7b0JBQU4sY0FBSTtnQkFBTyxPQUFBLFFBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQWpCLENBQWlCLENBQUMsQ0FBQztTQUN6RTthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELGtEQUF3QixHQUF4QjtRQUNFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckMsSUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRTlELE9BQU8sRUFBRSxLQUFLLE9BQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxhQUFhLGVBQUEsRUFBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxxQ0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTztTQUNSO1FBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUMzRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRU8scUNBQVcsR0FBbkI7UUFBQSxpQkFTQztRQVJDLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO1FBQ3RFLElBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7U0FDckM7YUFBTSxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsS0FBSyxVQUFVLEVBQUU7WUFDbkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3JEO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFRO29CQUFOLGNBQUk7Z0JBQU8sT0FBQSxJQUFJO1lBQUosQ0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BFO0lBQ0gsQ0FBQztJQUVPLHdDQUFjLEdBQXRCO1FBQUEsaUJBU0M7UUFSTyxJQUFBLFNBQStCLEVBQTdCLGdDQUFhLEVBQUUsZ0JBQWMsQ0FBQztRQUN0QyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDaEIsSUFBSSxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QixhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRU8sdUNBQWEsR0FBckI7UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFO1lBQzNELE9BQU8sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7U0FDckM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU8sa0NBQVEsR0FBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7SUFDL0YsQ0FBQztJQTVJUTtRQUFSLEtBQUssRUFBRTt3REFBOEM7SUFDN0M7UUFBUixLQUFLLEVBQUU7MERBQStDO0lBQzlDO1FBQVIsS0FBSyxFQUFFO3VEQUF1QztJQUN0QztRQUFSLEtBQUssRUFBRTtrREFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFO3FEQUFxQztJQUNuQztRQUFULE1BQU0sRUFBRTtxREFBcUQ7SUFDWDtRQUFsRCxTQUFTLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7cURBQStCO0lBZ0JqRjtRQURDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt1REFNakM7SUE1QlUsZUFBZTtRQUozQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsWUFBWTtZQUN0Qix5N0ZBQXNDO1NBQ3ZDLENBQUM7T0FDVyxlQUFlLENBOEkzQjtJQUFELHNCQUFDO0NBQUEsQUE5SUQsSUE4SUM7U0E5SVksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJzRHJvcGRvd25EaXJlY3RpdmUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXRlbSB7XG4gIG5hbWU6IHN0cmluZztcbiAgX3NlbGVjdGVkPzogYm9vbGVhbjtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgdHlwZSBzZWxlY3RlZEZ1bmN0aW9uID0gKGl0ZW06IEl0ZW0pID0+IGJvb2xlYW47XG5leHBvcnQgdHlwZSBzZWxlY3RlZExhYmVsRnVuY3Rpb24gPSAoaXRlbXM6IEl0ZW1bXSkgPT4gc3RyaW5nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc2VsZWN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlbGVjdC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcGxhY2Vob2xkZXI6IHN0cmluZyA9IGdldHRleHQoJ1NlbGVjdCBpdGVtJyk7XG4gIEBJbnB1dCgpIHNlbGVjdGVkTGFiZWw6IHN0cmluZyB8IHNlbGVjdGVkTGFiZWxGdW5jdGlvbjtcbiAgQElucHV0KCkgYXBwbHlMYWJlbDogc3RyaW5nID0gZ2V0dGV4dCgnQXBwbHknKTtcbiAgQElucHV0KCkgaXRlbXM6IEl0ZW1bXTtcbiAgQElucHV0KCkgc2VsZWN0ZWQ6IEl0ZW1bXSB8IHNlbGVjdGVkRnVuY3Rpb247XG4gIEBPdXRwdXQoKSBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPEl0ZW1bXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBWaWV3Q2hpbGQoQnNEcm9wZG93bkRpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIGRyb3Bkb3duOiBCc0Ryb3Bkb3duRGlyZWN0aXZlO1xuICB0ZXh0RmlsdGVyID0gJyc7XG4gIGxhYmVsVGV4dCA9ICcnO1xuICBpc09wZW4gPSBmYWxzZTtcbiAgZmlsdGVyZWRJdGVtczogSXRlbVtdID0gW107XG4gIHNlYXJjaEZpbHRlciA9IG51bGw7XG4gIHJlYWRvbmx5IHNpemVUb1Nob3dGaWx0ZXI6IG51bWJlciA9IDU7XG4gIGxhYmVsc0ZvclNlbGVjdEFsbDogYW55ID0ge1xuICAgIGFsbDogZ2V0dGV4dCgnQWxsJyksXG4gICAgYWxsRmlsdGVyZWQ6IGdldHRleHQoJ0FsbCBmaWx0ZXJlZCcpXG4gIH07XG4gIHNob3dBbGxMYWJlbCA9IGZhbHNlO1xuICBwcml2YXRlIGl0ZW1zU2VsZWN0ZWQ6IFNldDxJdGVtPiA9IG5ldyBTZXQoKTtcbiAgcHJpdmF0ZSBzdG9wQ2xpY2tzID0gZmFsc2U7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBwcmV2ZW50Q2xpY2soZXZ0KSB7XG4gICAgaWYgKHRoaXMuc3RvcENsaWNrcykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLnN0b3BDbGlja3MgPSB0aGlzLmlzT3BlbjtcbiAgfVxuXG4gIGlzT3BlbkNoYW5nZShpc09wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzT3BlbiA9IGlzT3BlbjtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICB0aGlzLnNlYXJjaEZpbHRlciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RvcENsaWNrcyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG91dHRlclNlbGVjdGVkKGl0ZW06IEl0ZW0pIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzO1xuICAgIGxldCBpc1NlbGVjdGVkOiBhbnkgPSAoKSA9PiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHNlbGVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpc1NlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdGVkKSkge1xuICAgICAgaXNTZWxlY3RlZCA9IChpOiBJdGVtKSA9PiBzZWxlY3RlZC5pbmRleE9mKGkpID4gLTE7XG4gICAgfVxuICAgIHJldHVybiBpc1NlbGVjdGVkKGl0ZW0pO1xuICB9XG5cbiAgaXNTZWxlY3RlZChpdGVtOiBJdGVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNTZWxlY3RlZC5oYXMoaXRlbSk7XG4gIH1cblxuICBpc0FsbEl0ZW1zU2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNTZWxlY3RlZC5zaXplID09PSB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIGlzQWxsRmlsdGVyZWRTZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtc1NlbGVjdGVkLnNpemUgPT09IHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGg7XG4gIH1cblxuICBhcHBseUNoYW5nZXMoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBBcnJheS5mcm9tKHRoaXMuaXRlbXNTZWxlY3RlZC52YWx1ZXMoKSk7XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHNlbGVjdGVkKTtcbiAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgfVxuXG4gIHNlbGVjdEFsbChjaGVja2VkOiBib29sZWFuKSB7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLm9uQ2hhbmdlSXRlbShjaGVja2VkLCBpdGVtKSk7XG4gIH1cblxuICBvbkNoYW5nZUl0ZW0oY2hlY2tlZDogYm9vbGVhbiwgaXRlbTogSXRlbSkge1xuICAgIGlmIChjaGVja2VkKSB7XG4gICAgICB0aGlzLml0ZW1zU2VsZWN0ZWQuYWRkKGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLml0ZW1zU2VsZWN0ZWQuZGVsZXRlKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmVkKHRlcm06IHN0cmluZykge1xuICAgIGlmICh0ZXJtKSB7XG4gICAgICBjb25zdCBzZWFyY2ggPSBuZXcgUmVnRXhwKHRlcm0sICdpJyk7XG4gICAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcigoeyBuYW1lIH0pID0+IHNlYXJjaC50ZXN0KG5hbWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICB9XG4gIH1cblxuICBnZXRTZWxlY3RBbGxUb2dnbGVTdGF0dXMoKSB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldExhYmVsKCk7XG4gICAgY29uc3QgY2hlY2tlZCA9IHRoaXMuaXNBbGxTZWxlY3RlZCgpO1xuICAgIGNvbnN0IGluZGV0ZXJtaW5hdGUgPSAhY2hlY2tlZCAmJiB0aGlzLml0ZW1zU2VsZWN0ZWQuc2l6ZSA+IDA7XG5cbiAgICByZXR1cm4geyBsYWJlbCwgY2hlY2tlZCwgaW5kZXRlcm1pbmF0ZX07XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLml0ZW1zIHx8IGNoYW5nZXMuc2VsZWN0ZWQgfHwgY2hhbmdlcy5hcHBseUxhYmVsKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICB0aGlzLnVwZGF0ZUxhYmVsKCk7XG4gICAgICB0aGlzLnNob3dBbGxMYWJlbCA9IHRoaXMuaXNBbGxJdGVtc1NlbGVjdGVkKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVMYWJlbCgpIHtcbiAgICBjb25zdCBvdXR0ZXJTZWxlY3RlZCA9IHRoaXMuaXRlbXMuZmlsdGVyKGkgPT4gdGhpcy5vdXR0ZXJTZWxlY3RlZChpKSk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdGVkTGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMuc2VsZWN0ZWRMYWJlbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNlbGVjdGVkTGFiZWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMubGFiZWxUZXh0ID0gdGhpcy5zZWxlY3RlZExhYmVsKG91dHRlclNlbGVjdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYWJlbFRleHQgPSBvdXR0ZXJTZWxlY3RlZC5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKS5qb2luKCcsICcpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgeyBpdGVtc1NlbGVjdGVkLCBpdGVtcyB9ID0gdGhpcztcbiAgICBpdGVtc1NlbGVjdGVkLmNsZWFyKCk7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmICh0aGlzLm91dHRlclNlbGVjdGVkKGl0ZW0pKSB7XG4gICAgICAgIGl0ZW1zU2VsZWN0ZWQuYWRkKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IGl0ZW1zO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0FsbFNlbGVjdGVkKCkge1xuICAgIGlmICh0aGlzLmdldExhYmVsKCkgPT09IHRoaXMubGFiZWxzRm9yU2VsZWN0QWxsLmFsbEZpbHRlcmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0FsbEZpbHRlcmVkU2VsZWN0ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaXNBbGxJdGVtc1NlbGVjdGVkKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hGaWx0ZXIgPyB0aGlzLmxhYmVsc0ZvclNlbGVjdEFsbC5hbGxGaWx0ZXJlZCA6IHRoaXMubGFiZWxzRm9yU2VsZWN0QWxsLmFsbDtcbiAgfVxufVxuIl19