import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, Injector, Input, OnChanges, TemplateRef, Type } from '@angular/core';
import { CellRendererContext } from './cell-renderer';
var CellRendererComponent = /** @class */ (function () {
    function CellRendererComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
    }
    Object.defineProperty(CellRendererComponent.prototype, "_spec", {
        set: function (spec) {
            this.spec = spec;
        },
        enumerable: true,
        configurable: true
    });
    CellRendererComponent.prototype.ngOnChanges = function () {
        if (!this.prevSpec) {
            this.prevSpec = this.spec;
        }
        var renderer = this.spec.renderer;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
    };
    CellRendererComponent.prototype.ngDoCheck = function () {
        if (!this.spec.context.value === this.prevSpec.context.value) {
            this.prevSpec = this.spec;
            this.cd.markForCheck();
        }
    };
    CellRendererComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        Input('spec')
    ], CellRendererComponent.prototype, "_spec", null);
    CellRendererComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-cell-renderer',
            template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  {{ spec.context.value }}\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CellRendererComponent);
    return CellRendererComponent;
}());
export { CellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1yZW5kZXJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kYXRhLWdyaWQvY29sdW1uL2NlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsT0FBTyxFQUNQLFFBQVEsRUFDUixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxJQUFJLEVBQ0wsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBT3hFO0lBV0UsK0JBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQUcsQ0FBQztJQVJ6RSxzQkFBSSx3Q0FBSzthQUFULFVBQVUsSUFBc0I7WUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFRRCwyQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzNCO1FBRU8sSUFBQSw2QkFBUSxDQUFlO1FBRS9CLElBQUksUUFBUSxZQUFZLFdBQVcsRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztTQUNoQzthQUFNLElBQUksUUFBUSxZQUFZLElBQUksRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztZQUVoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDdEMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTthQUN0QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCx5Q0FBUyxHQUFUO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDNUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOztnQkExQjZCLFFBQVE7Z0JBQWMsaUJBQWlCOztJQVJyRTtRQURDLEtBQUssQ0FBQyxNQUFNLENBQUM7c0RBR2I7SUFMVSxxQkFBcUI7UUFMakMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixraEJBQTZDO1lBQzdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7T0FDVyxxQkFBcUIsQ0FzQ2pDO0lBQUQsNEJBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQXRDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRG9DaGVjayxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0LCBDZWxsUmVuZGVyZXJTcGVjIH0gZnJvbSAnLi9jZWxsLXJlbmRlcmVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNlbGwtcmVuZGVyZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vY2VsbC1yZW5kZXJlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENlbGxSZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgRG9DaGVjayB7XG4gIHNwZWM6IENlbGxSZW5kZXJlclNwZWM7XG4gIEBJbnB1dCgnc3BlYycpXG4gIHNldCBfc3BlYyhzcGVjOiBDZWxsUmVuZGVyZXJTcGVjKSB7XG4gICAgdGhpcy5zcGVjID0gc3BlYztcbiAgfVxuICBwcmV2U3BlYzogQ2VsbFJlbmRlcmVyU3BlYztcblxuICByZW5kZXJlclR5cGU6ICdURU1QTEFURScgfCAnQ09NUE9ORU5UJztcbiAgcmVuZGVyZXJJbmplY3RvcjogSW5qZWN0b3I7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICghdGhpcy5wcmV2U3BlYykge1xuICAgICAgdGhpcy5wcmV2U3BlYyA9IHRoaXMuc3BlYztcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSB0aGlzLnNwZWM7XG5cbiAgICBpZiAocmVuZGVyZXIgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuICAgICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnVEVNUExBVEUnO1xuICAgIH0gZWxzZSBpZiAocmVuZGVyZXIgaW5zdGFuY2VvZiBUeXBlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdDT01QT05FTlQnO1xuXG4gICAgICB0aGlzLnJlbmRlcmVySW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IENlbGxSZW5kZXJlckNvbnRleHQsIHVzZVZhbHVlOiB0aGlzLnNwZWMuY29udGV4dCB9XSxcbiAgICAgICAgcGFyZW50OiB0aGlzLmluamVjdG9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYgKCF0aGlzLnNwZWMuY29udGV4dC52YWx1ZSA9PT0gdGhpcy5wcmV2U3BlYy5jb250ZXh0LnZhbHVlKSB7XG4gICAgICB0aGlzLnByZXZTcGVjID0gdGhpcy5zcGVjO1xuICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==