import * as tslib_1 from "tslib";
import { chunk, flow, get, isNil, mapValues, omitBy, orderBy, pick } from 'lodash-es';
import { BehaviorSubject, defer, from, isObservable, of, Subject } from 'rxjs';
import { catchError, finalize, map, switchMap, tap } from 'rxjs/operators';
var GridDataSource = /** @class */ (function () {
    function GridDataSource() {
        this.loadingSubject = new BehaviorSubject(false);
        this.dataSourceSubject = new BehaviorSubject([]);
        this.dataStatsSubject = new BehaviorSubject({
            size: 0,
            filteredSize: 0,
            currentPage: 0,
            currentPageSize: 0,
            firstPageSize: 0
        });
        this.dataSelectionSubject = new BehaviorSubject({
            filteredDataIds: []
        });
        this.resultListSubject = new Subject();
        this.loading$ = this.loadingSubject.asObservable();
        this.data$ = this.dataSourceSubject.asObservable();
        this.stats$ = this.dataStatsSubject.asObservable();
        this.selection$ = this.dataSelectionSubject.asObservable();
        this.resultList$ = this.resultListSubject.asObservable();
    }
    GridDataSource.prototype.connect = function (collectionViewer) {
        return this.data$;
    };
    GridDataSource.prototype.disconnect = function (collectionViewer) {
        this.loadingSubject.complete();
        this.dataSourceSubject.complete();
        this.dataStatsSubject.complete();
        this.dataSelectionSubject.complete();
    };
    GridDataSource.prototype.loadData = function (_a) {
        var _this = this;
        var rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey, infiniteScroll = _a.infiniteScroll, _b = _a.reload, reload = _b === void 0 ? false : _b;
        var clientSideData$ = this.toObservable(rows).pipe(map(function (initialData) {
            var filteredSize = 0;
            var filteredDataIds = [];
            var transformedData = flow(function (data) { return _this.doClientSideSearch({ data: data, columns: columns, searchText: searchText }); }, function (data) { return _this.doClientSideFiltering({ data: data, columns: columns }); }, function (data) { return _this.doClientSideSorting({ data: data, columns: columns }); }, function (data) {
                filteredSize = data.length;
                filteredDataIds = selectable
                    ? data.map(function (item) { return item[selectionPrimaryKey]; })
                    : filteredDataIds;
                return data;
            }, function (data) { return _this.doClientSidePagination({ data: data, pagination: pagination }); })(initialData);
            _this.dataStatsSubject.next({
                size: initialData.length,
                filteredSize: filteredSize,
                currentPage: pagination.currentPage,
                currentPageSize: transformedData.length,
                firstPageSize: pagination.pageSize
            });
            _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds });
            return transformedData;
        }));
        var serverSideData$ = defer(function () {
            return _this.toObservable(serverSideDataCallback({
                columns: columns,
                searchText: searchText,
                pagination: pagination,
                selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
            }));
        }).pipe(map(function (result) {
            var data = result.data, paging = result.paging, size = result.size, filteredSize = result.filteredSize, filteredDataIds = result.filteredDataIds;
            _this.dataStatsSubject.next({
                size: size,
                filteredSize: filteredSize,
                currentPage: paging.currentPage,
                currentPageSize: data.length,
                nextPage: paging.nextPage,
                firstPageSize: paging.pageSize
            });
            _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
            _this.resultListSubject.next(result);
            return data;
        }));
        var data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
        of([])
            .pipe(tap(function () { return _this.loadingSubject.next(true); }), switchMap(function () { return data$; }), catchError(function (err) {
            _this.dataStatsSubject.next({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            _this.dataSelectionSubject.next({ filteredDataIds: [] });
            return of([]);
        }), finalize(function () { return _this.loadingSubject.next(false); }))
            .subscribe(function (result) {
            var data = infiniteScroll && !reload ? tslib_1.__spread(_this.dataSourceSubject.value, result) : result;
            _this.dataSourceSubject.next(data);
        });
    };
    GridDataSource.prototype.resolveValue = function (x, path) {
        return get(x, path);
    };
    GridDataSource.prototype.resolveFunction = function (x) {
        return typeof x === 'function' ? x() : x;
    };
    GridDataSource.prototype.normalizeNil = function (x) {
        return isNil(x) ? '' : x;
    };
    GridDataSource.prototype.doClientSideFiltering = function (_a) {
        var _this = this;
        var data = _a.data, columns = _a.columns;
        return columns.reduce(function (result, column) {
            var filterPredicate = column.filterPredicate;
            if (typeof filterPredicate === 'string') {
                return _this.doClientSideSearch({
                    data: result,
                    columns: [column],
                    searchText: filterPredicate
                });
            }
            if (typeof filterPredicate === 'function') {
                return result.filter(function (item) { return filterPredicate(item, column.path); });
            }
            return result;
        }, data);
    };
    GridDataSource.prototype.doClientSideSearch = function (_a) {
        var _this = this;
        var data = _a.data, columns = _a.columns, searchText = _a.searchText;
        var propPaths = columns.map(function (_a) {
            var path = _a.path;
            return path;
        }).filter(function (column) { return !isNil(column); });
        var regexSearch = this.createRegexSearch(searchText);
        return data.filter(function (item) {
            var itemWithResolvedValues = flow(function (x) { return pick(x, propPaths); }, function (x) { return mapValues(x, _this.resolveFunction); }, function (x) { return omitBy(x, isNil); })(item);
            var cellValues = Object.values(itemWithResolvedValues);
            return cellValues.some(function (cellValue) { return regexSearch.test(cellValue.toString()); });
        });
    };
    GridDataSource.prototype.doClientSideSorting = function (_a) {
        var data = _a.data, columns = _a.columns;
        var actives = columns.filter(function (_a) {
            var sortOrder = _a.sortOrder;
            return !!sortOrder;
        });
        var sortingState = {
            paths: actives.map(function (_a) {
                var path = _a.path;
                return path;
            }),
            orders: actives.map(function (_a) {
                var sortOrder = _a.sortOrder;
                return sortOrder;
            })
        };
        return orderBy(data, sortingState.paths, sortingState.orders);
    };
    GridDataSource.prototype.doClientSidePagination = function (_a) {
        var data = _a.data, pagination = _a.pagination;
        return pagination
            ? get(chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
            : data;
    };
    GridDataSource.prototype.createRegexSearch = function (filterValue) {
        return RegExp(escapeRegExpPattern(filterValue), 'i');
    };
    GridDataSource.prototype.toObservable = function (x) {
        return isObservable(x) ? x : x instanceof Promise ? from(x) : of(x);
    };
    return GridDataSource;
}());
export { GridDataSource };
/**
 *
 * @param string pattern Regex pattern.
 * @return string The escaped regex.
 * @see https://stackoverflow.com/a/3561711/2013891
 */
function escapeRegExpPattern(pattern) {
    if (pattern === void 0) { pattern = ''; }
    return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
//# sourceMappingURL=data:application/json;base64,