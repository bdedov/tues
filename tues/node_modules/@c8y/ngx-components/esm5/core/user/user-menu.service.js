import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { StateService } from '../common/state-service.abstract';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
var UserMenuService = /** @class */ (function (_super) {
    tslib_1.__extends(UserMenuService, _super);
    function UserMenuService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state$ = new BehaviorSubject({
            userMenuItems: new Set()
        });
        return _this;
    }
    Object.defineProperty(UserMenuService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    UserMenuService.prototype.add = function (item) {
        this.state.userMenuItems.add(item);
        this.emitNewState();
    };
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    UserMenuService.prototype.remove = function (item) {
        this.state.userMenuItems.delete(item);
        this.emitNewState();
    };
    UserMenuService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function UserMenuService_Factory() { return new UserMenuService(); }, token: UserMenuService, providedIn: "root" });
    UserMenuService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], UserMenuService);
    return UserMenuService;
}(StateService));
export { UserMenuService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1tZW51LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS91c2VyL3VzZXItbWVudS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQU12QztJQUFxQywyQ0FBWTtJQUhqRDtRQUFBLHFFQWtDQztRQTlCQyxZQUFNLEdBQXlCLElBQUksZUFBZSxDQUFNO1lBQ3RELGFBQWEsRUFBRSxJQUFJLEdBQUcsRUFBZ0I7U0FDdkMsQ0FBQyxDQUFDOztLQTRCSjtJQXJCQyxzQkFBSSxrQ0FBSztRQUxUOzs7O1dBSUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsQ0FBQzs7O09BQUE7SUFFRDs7O09BR0c7SUFDSCw2QkFBRyxHQUFILFVBQUksSUFBa0I7UUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0NBQU0sR0FBTixVQUFPLElBQWtCO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7SUE5QlUsZUFBZTtRQUgzQixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csZUFBZSxDQStCM0I7MEJBdkNEO0NBdUNDLEFBL0JELENBQXFDLFlBQVksR0ErQmhEO1NBL0JZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vc3RhdGUtc2VydmljZS5hYnN0cmFjdCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVzZXJNZW51SXRlbSB9IGZyb20gJy4vdXNlci5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJNZW51U2VydmljZSBleHRlbmRzIFN0YXRlU2VydmljZSB7XG4gIHN0YXRlJDogQmVoYXZpb3JTdWJqZWN0PGFueT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oe1xuICAgIHVzZXJNZW51SXRlbXM6IG5ldyBTZXQ8VXNlck1lbnVJdGVtPigpXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgKiBAcmVhZG9ubHlcbiAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgc2V0IG9mIGFjdGlvbnMuXG4gICAqL1xuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUkLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBuZXcgaXRlbSB0byB0aGUgc2VhcmNoIGluIHRoZSBoZWFkZXIuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZC5cbiAgICovXG4gIGFkZChpdGVtOiBVc2VyTWVudUl0ZW0pIHtcbiAgICB0aGlzLnN0YXRlLnVzZXJNZW51SXRlbXMuYWRkKGl0ZW0pO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBzZWFyY2ggZnJvbSB0aGUgaGVhZGVyLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmUoaXRlbTogVXNlck1lbnVJdGVtKSB7XG4gICAgdGhpcy5zdGF0ZS51c2VyTWVudUl0ZW1zLmRlbGV0ZShpdGVtKTtcbiAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICB9XG59XG4iXX0=