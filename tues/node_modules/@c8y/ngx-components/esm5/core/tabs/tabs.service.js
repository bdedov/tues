import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, Injector, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, filter, first, map, shareReplay } from 'rxjs/operators';
import { fromTrigger, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { OptionsService } from '../common/options.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@ngx-translate/core";
import * as i3 from "../common/options.service";
export var HOOK_TABS = new InjectionToken('TabsFactory');
var TabsService = /** @class */ (function (_super) {
    tslib_1.__extends(TabsService, _super);
    function TabsService(injector, router, translateService, options) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.translateService = translateService;
        _this.options = options;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_TABS, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (tabs) { return _this.prepareTabs(tabs); }), shareReplay(1), distinctUntilChanged());
        _this.orientation$ = _this.items$.pipe(map(function (tabs) {
            var firstTabWithDefinedOrientation = tabs.find(function (tab) { return tab.orientation; });
            if (firstTabWithDefinedOrientation) {
                return firstTabWithDefinedOrientation.orientation;
            }
            return _this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        }), distinctUntilChanged());
        return _this;
    }
    TabsService.prototype.prepareTabs = function (tabs) {
        return this.sortTabs(tabs
            .map(function (tab) { return (tslib_1.__assign({}, tab, { template: tab.template instanceof ViewContainerRef ? tab.template : undefined })); })
            .filter(function (tab, index, self) { return index === self.findIndex(function (t) { return t.path === tab.path; }); }));
    };
    TabsService.prototype.sortTabs = function (tabs) {
        var _this = this;
        return tabs.sort(function (a, b) {
            var priorityOrder = (b.priority || 0) - (a.priority || 0);
            var aTranslatedLabel = _this.translateService.instant(a.label);
            var bTranslatedLabel = _this.translateService.instant(b.label);
            var translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    };
    /**
     * Refresh the extension factories
     */
    TabsService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(TabsService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    TabsService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    TabsService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    Object.defineProperty(TabsService.prototype, "firstTab$", {
        get: function () {
            return this.items$.pipe(map(function (tabs) { return tabs[0]; }), filter(Boolean), first());
        },
        enumerable: true,
        configurable: true
    });
    TabsService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router },
        { type: TranslateService },
        { type: OptionsService }
    ]; };
    TabsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.OptionsService)); }, token: TabsService, providedIn: "root" });
    TabsService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TabsService);
    return TabsService;
}(StateService));
export { TabsService };
//# sourceMappingURL=data:application/json;base64,