import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { forkJoin, from, isObservable, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { NavigatorNode } from '../navigator';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
var ProviderConfigurationNodeFactory = /** @class */ (function () {
    function ProviderConfigurationNodeFactory(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    ProviderConfigurationNodeFactory.prototype.get = function () {
        var _this = this;
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            var canActivate = this.config
                .map(function (c) {
                return c.navigation.canActivate && c.navigation.canActivate.length
                    ? c.navigation.canActivate.map(function (ca) { return _this.injector.get(ca); })
                    : undefined;
            })
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map(function (canActivateResult) {
                return _this.config
                    .map(function (c, index) {
                    return canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined;
                })
                    .filter(function (el) { return !!el; });
            }), tap(function (nodes) { return (_this.nodes = nodes); }));
        }
        return this.nodes;
    };
    ProviderConfigurationNodeFactory.prototype.checkCanActivate = function (ca) {
        if (!!ca && ca.length) {
            var canActivateResult = ca
                .map(function (canActivate) { return canActivate.canActivate(undefined, undefined); })
                .map(this.wrapIntoObservable.bind(this));
            return forkJoin(canActivateResult).pipe(map(function (caResult) { return caResult.reduce(function (acc, curr) { return acc && curr; }); }));
        }
        return of(true);
    };
    ProviderConfigurationNodeFactory.prototype.isPromise = function (obj) {
        return !!obj && typeof obj.then === 'function';
    };
    ProviderConfigurationNodeFactory.prototype.wrapIntoObservable = function (value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    };
    ProviderConfigurationNodeFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
        { type: Injector }
    ]; };
    ProviderConfigurationNodeFactory = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Optional()),
        tslib_1.__param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
    ], ProviderConfigurationNodeFactory);
    return ProviderConfigurationNodeFactory;
}());
export { ProviderConfigurationNodeFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1ub2RlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tbm9kZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxhQUFhLEVBQXdCLE1BQU0sY0FBYyxDQUFDO0FBRW5FLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRzdFO0lBSUUsMENBR0UsTUFBaUMsRUFDekIsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsOENBQUcsR0FBSDtRQUFBLGlCQTJCQztRQTFCQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3ZDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBTSxXQUFXLEdBQStCLElBQUksQ0FBQyxNQUFNO2lCQUN4RCxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUNKLE9BQUEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFX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Z0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZm9ya0pvaW4sIGZyb20sIGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnkgfSBmcm9tICcuLi9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgRHluYW1pY1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi9tb2RlbC9keW5hbWljLXByb3ZpZGVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLWhvb2snO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJDb25maWd1cmF0aW9uTm9kZUZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByaXZhdGUgY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXTtcbiAgcHJpdmF0ZSBub2RlczogTmF2aWdhdG9yTm9kZVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHKVxuICAgIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW11bXSxcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLmNvbmZpZyA9IGZsYXR0ZW4oY29uZmlnKTtcbiAgfVxuXG4gIGdldCgpIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnIHx8ICF0aGlzLmNvbmZpZy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMubm9kZXMpIHtcbiAgICAgIGNvbnN0IGNhbkFjdGl2YXRlOiBBcnJheTxPYnNlcnZhYmxlPGJvb2xlYW4+PiA9IHRoaXMuY29uZmlnXG4gICAgICAgIC5tYXAoYyA9PlxuICAgICAgICAgIGMubmF2aWdhdGlvbi5jYW5BY3RpdmF0ZSAmJiBjLm5hdmlnYXRpb24uY2FuQWN0aXZhdGUubGVuZ3RoXG4gICAgICAgICAgICA/IGMubmF2aWdhdGlvbi5jYW5BY3RpdmF0ZS5tYXAoY2EgPT4gdGhpcy5pbmplY3Rvci5nZXQoY2EpKVxuICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgKVxuICAgICAgICAubWFwKHRoaXMuY2hlY2tDYW5BY3RpdmF0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgcmV0dXJuIGZvcmtKb2luKGNhbkFjdGl2YXRlKS5waXBlKFxuICAgICAgICBtYXAoKGNhbkFjdGl2YXRlUmVzdWx0OiBib29sZWFuW10pID0+XG4gICAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICAgICAgIC5tYXAoKGMsIGluZGV4KSA9PlxuICAgICAgICAgICAgICBjYW5BY3RpdmF0ZVJlc3VsdFtpbmRleF0gPyBuZXcgTmF2aWdhdG9yTm9kZShjLm5hdmlnYXRpb24pIDogdW5kZWZpbmVkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuZmlsdGVyKGVsID0+ICEhZWwpXG4gICAgICAgICksXG4gICAgICAgIHRhcChub2RlcyA9PiAodGhpcy5ub2RlcyA9IG5vZGVzKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrQ2FuQWN0aXZhdGUoY2E6IENhbkFjdGl2YXRlW10pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAoISFjYSAmJiBjYS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNhbkFjdGl2YXRlUmVzdWx0OiBBcnJheTxPYnNlcnZhYmxlPGJvb2xlYW4+PiA9IGNhXG4gICAgICAgIC5tYXAoKGNhbkFjdGl2YXRlOiBDYW5BY3RpdmF0ZSkgPT4gY2FuQWN0aXZhdGUuY2FuQWN0aXZhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQpKVxuICAgICAgICAubWFwKHRoaXMud3JhcEludG9PYnNlcnZhYmxlLmJpbmQodGhpcykpO1xuXG4gICAgICByZXR1cm4gZm9ya0pvaW4oY2FuQWN0aXZhdGVSZXN1bHQpLnBpcGUoXG4gICAgICAgIG1hcCgoY2FSZXN1bHQ6IGJvb2xlYW5bXSkgPT4gY2FSZXN1bHQucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyAmJiBjdXJyKSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBvZih0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNQcm9taXNlPFQgPSBhbnk+KG9iajogYW55KTogb2JqIGlzIFByb21pc2U8VD4ge1xuICAgIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBwcml2YXRlIHdyYXBJbnRvT2JzZXJ2YWJsZTxUPih2YWx1ZTogVCB8IFByb21pc2U8VD4gfCBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1Byb21pc2UodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHZhbHVlKTtcbiAgfVxufVxuIl19