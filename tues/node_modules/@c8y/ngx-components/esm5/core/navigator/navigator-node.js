import * as tslib_1 from "tslib";
import { matches, snakeCase } from 'lodash-es';
var NavigatorNode = /** @class */ (function () {
    function NavigatorNode(data) {
        this.children = [];
        this.parents = [];
        this.routerLinkExact = true;
        this.open = false;
        this.hidden = false;
        this.draggable = false;
        this.droppable = false;
        this.dragged = false;
        this.draggedHover = false;
        this.confirm = undefined;
        this._priority = 0;
        this.update(data);
    }
    Object.defineProperty(NavigatorNode.prototype, "hasChildren", {
        get: function () {
            return this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "id", {
        get: function () {
            return 'navigator_node_' + snakeCase(this.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "priority", {
        get: function () {
            if (this._priority) {
                return this._priority;
            }
            else {
                var childrenPriorities = this.children.map(function (_a) {
                    var priority = _a.priority;
                    return priority || 0;
                });
                if (childrenPriorities.length) {
                    return childrenPriorities.length ? Math.max.apply(Math, tslib_1.__spread(childrenPriorities)) : 0;
                }
                return 0;
            }
        },
        set: function (priority) {
            this._priority = priority;
        },
        enumerable: true,
        configurable: true
    });
    NavigatorNode.prototype.openOnStart = function (url) {
        return false;
    };
    NavigatorNode.prototype.add = function (node) {
        if (node === this) {
            throw new Error('Adding node to itself');
        }
        if (this.children.indexOf(node) === -1) {
            this.children.push(node);
        }
        if (node.parents.indexOf(this) === -1) {
            node.parents.push(this);
        }
        this.updateChildren();
    };
    NavigatorNode.prototype.remove = function (node) {
        var ix = this.children.indexOf(node);
        var pix = node.parents.indexOf(this);
        if (ix > -1) {
            this.children.splice(ix, 1);
        }
        if (pix > -1) {
            node.parents.splice(pix, 1);
        }
        this.updateChildren();
    };
    NavigatorNode.prototype.update = function (data) {
        if (data) {
            Object.assign(this, data);
            if (data.hidden !== undefined) {
                this.parents.forEach(function (p) {
                    p.updateHidden();
                });
            }
        }
    };
    NavigatorNode.prototype.find = function (predicate) {
        if (typeof predicate === 'string') {
            var compareLabel_1 = predicate.toLocaleLowerCase();
            predicate = function (_a) {
                var label = _a.label;
                return compareLabel_1 === label.toLowerCase();
            };
        }
        if (typeof predicate === 'object') {
            predicate = matches(predicate);
        }
        if (typeof predicate !== 'function') {
            throw new Error('Invalid search predicate');
        }
        return this.children.reduce(function (found, child) { return found || child.find(predicate); }, this.children.find(predicate));
    };
    NavigatorNode.prototype.empty = function () {
        this.children.length = 0;
    };
    NavigatorNode.prototype.click = function (options) {
        if (options === void 0) { options = {}; }
        // do nothing
    };
    NavigatorNode.prototype.drop = function ($event) {
        $event.stopPropagation();
        clearTimeout(this.expandDragTimeout);
    };
    NavigatorNode.prototype.dragStart = function ($event) {
        $event.stopPropagation();
        // we can't pass a object to setData, so we do it via service
        // set data is still needed, to make the drag&drop work
        $event.dataTransfer.setData('node', 'node');
        this.dragged = true;
    };
    NavigatorNode.prototype.dragEnd = function ($event) {
        $event.stopPropagation();
        this.dragged = false;
        $event.dataTransfer.clearData();
    };
    Object.defineProperty(NavigatorNode.prototype, "canDrop", {
        get: function () {
            return this.droppable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "canNavigate", {
        get: function () {
            return typeof this.path !== 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    NavigatorNode.prototype.dragEnter = function ($event) {
        var _this = this;
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = true;
        if (!this.open) {
            this.expandDragTimeout = setTimeout(function () { return _this.expand(); }, 1000);
        }
    };
    NavigatorNode.prototype.dragLeave = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = false;
        clearTimeout(this.expandDragTimeout);
    };
    NavigatorNode.prototype.expand = function () {
        if (!this.open) {
            this.open = true;
            this.click({ open: true, expander: true });
        }
    };
    NavigatorNode.prototype.traverse = function (callback) {
        if (this.children) {
            this.children.forEach(function (child) {
                callback(child);
                child.traverse(callback);
            });
        }
    };
    NavigatorNode.prototype.destroy = function () {
        // nothing todo here
    };
    NavigatorNode.prototype.updateChildren = function () {
        this.sort();
        this.updateHidden();
    };
    NavigatorNode.prototype.sort = function () {
        this.children.sort(function (a, b) {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                return -1;
            }
            else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    NavigatorNode.prototype.updateHidden = function () {
        if (typeof this.path === 'undefined') {
            this.hidden = !this.children.some(function (_a) {
                var hidden = _a.hidden;
                return !hidden;
            });
        }
    };
    return NavigatorNode;
}());
export { NavigatorNode };
//# sourceMappingURL=data:application/json;base64,