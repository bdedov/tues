import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AppStateService } from './ui-state.service';
import { IManagedObject, InventoryService } from '@c8y/client';
import { property } from 'lodash-es';
import { memoize } from './memoize.decorator';
import { IUser, UserService } from '@c8y/client';
var Permissions = /** @class */ (function () {
    function Permissions(appState, inventory, user) {
        this.appState = appState;
        this.inventory = inventory;
        this.user = user;
    }
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {object} mo The managed object for which we are checking whether the user has access.
     */
    Permissions.prototype.canEdit = function (roleIds, mo) {
        return this.checkIfCanEdit(roleIds, mo);
    };
    Permissions.prototype.hasRole = function (roleId) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasRole(currentUser, roleId);
    };
    Permissions.prototype.hasAllRoles = function (roleIds) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAllRoles(currentUser, roleIds);
    };
    Permissions.prototype.hasAnyRole = function (roleIds) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAnyRole(currentUser, roleIds);
    };
    Permissions.prototype.checkIfOwner = function (mo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentUserName, _a, data, res;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.appState.currentUser.value.userName];
                    case 1:
                        currentUserName = _b.sent();
                        return [4 /*yield*/, this.inventory.detail(mo.id)];
                    case 2:
                        _a = _b.sent(), data = _a.data, res = _a.res;
                        return [2 /*return*/, currentUserName === data.owner];
                }
            });
        });
    };
    Permissions.prototype.checkWithRequest = function (mo) {
        var moName = mo.name;
        var moId = mo.id;
        var partialUpdateObject = {
            id: moId,
            name: moName
        };
        return this.inventory
            .update(partialUpdateObject)
            .then(function (success) {
            return true;
        })
            .catch(function (err) {
            return false;
        });
    };
    Permissions.prototype.checkIfCanEdit = function (roleIds, mo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.hasAnyRole(roleIds)];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        return [2 /*return*/, true];
                    case 2: return [4 /*yield*/, this.checkIfOwner(mo)];
                    case 3:
                        if (!_a.sent()) return [3 /*break*/, 4];
                        return [2 /*return*/, true];
                    case 4: return [4 /*yield*/, this.checkWithRequest(mo)];
                    case 5:
                        if (_a.sent()) {
                            return [2 /*return*/, true];
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/, false];
                }
            });
        });
    };
    Permissions.ctorParameters = function () { return [
        { type: AppStateService },
        { type: InventoryService },
        { type: UserService }
    ]; };
    tslib_1.__decorate([
        memoize(property('id'))
    ], Permissions.prototype, "checkIfOwner", null);
    tslib_1.__decorate([
        memoize(property('id'))
    ], Permissions.prototype, "checkWithRequest", null);
    Permissions = tslib_1.__decorate([
        Injectable()
    ], Permissions);
    return Permissions;
}());
export { Permissions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2NvbW1vbi9wZXJtaXNzaW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR2pEO0lBQ0UscUJBQ1UsUUFBeUIsRUFDekIsU0FBMkIsRUFDM0IsSUFBaUI7UUFGakIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsU0FBSSxHQUFKLElBQUksQ0FBYTtJQUN4QixDQUFDO0lBRUo7Ozs7OztPQU1HO0lBQ0gsNkJBQU8sR0FBUCxVQUFRLE9BQU8sRUFBRSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELDZCQUFPLEdBQVAsVUFBUSxNQUFjO1FBQ3BCLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUNwRCxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1B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YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJy4vbWVtb2l6ZS5kZWNvcmF0b3InO1xuaW1wb3J0IHsgSVVzZXIsIFVzZXJTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbnMge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnk6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSB1c2VyOiBVc2VyU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyB3cml0ZSBwZXJtaXNzaW9ucyBmb3IgdGhlIGdpdmVuIG1vLlxuICAgKiAoZWl0aGVyIHRocm91Z2ggZ2xvYmFsIHJvbGUsIGluZGl2aWR1YWwgZGV2aWNlIHBlcm1pc3Npb25zIG9yIHZpYSBpbnZlbnRvcnkgcm9sZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSByb2xlSWRzIEFycmF5IG9mIHJvbGVzIHdoaWNoIHRoZSBjdXJyZW50IHVzZXIgc2hvdWxkIGhhdmUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtbyBUaGUgbWFuYWdlZCBvYmplY3QgZm9yIHdoaWNoIHdlIGFyZSBjaGVja2luZyB3aGV0aGVyIHRoZSB1c2VyIGhhcyBhY2Nlc3MuXG4gICAqL1xuICBjYW5FZGl0KHJvbGVJZHMsIG1vKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tJZkNhbkVkaXQocm9sZUlkcywgbW8pO1xuICB9XG5cbiAgaGFzUm9sZShyb2xlSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gdGhpcy5hcHBTdGF0ZS5jdXJyZW50VXNlci52YWx1ZTtcbiAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvbGVzIGNhbiBvbmx5IGJlIHJlcXVlc3RlZCBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4uJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVzZXIuaGFzUm9sZShjdXJyZW50VXNlciwgcm9sZUlkKTtcbiAgfVxuXG4gIGhhc0FsbFJvbGVzKHJvbGVJZHM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgY3VycmVudFVzZXIgPSB0aGlzLmFwcFN0YXRlLmN1cnJlbnRVc2VyLnZhbHVlO1xuICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUm9sZXMgY2FuIG9ubHkgYmUgcmVxdWVzdGVkIGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbi4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXNlci5oYXNBbGxSb2xlcyhjdXJyZW50VXNlciwgcm9sZUlkcyk7XG4gIH1cblxuICBoYXNBbnlSb2xlKHJvbGVJZHM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgY3VycmVudFVzZXIgPSB0aGlzLmFwcFN0YXRlLmN1cnJlbnRVc2VyLnZhbHVlO1xuICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUm9sZXMgY2FuIG9ubHkgYmUgcmVxdWVzdGVkIGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbi4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXNlci5oYXNBbnlSb2xlKGN1cnJlbnRVc2VyLCByb2xlSWRzKTtcbiAgfVxuXG4gIEBtZW1vaXplKHByb3BlcnR5KCdpZCcpKVxuICBwcm90ZWN0ZWQgYXN5bmMgY2hlY2tJZk93bmVyKG1vKSB7XG4gICAgY29uc3QgY3VycmVudFVzZXJOYW1lID0gYXdhaXQgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VXNlci52YWx1ZS51c2VyTmFtZTtcbiAgICBjb25zdCB7IGRhdGEsIHJlcyB9ID0gYXdhaXQgdGhpcy5pbnZlbnRvcnkuZGV0YWlsKG1vLmlkKTtcbiAgICByZXR1cm4gY3VycmVudFVzZXJOYW1lID09PSBkYXRhLm93bmVyO1xuICB9XG5cbiAgQG1lbW9pemUocHJvcGVydHkoJ2lkJykpXG4gIHByb3RlY3RlZCBjaGVja1dpdGhSZXF1ZXN0KG1vKSB7XG4gICAgY29uc3QgbW9OYW1lID0gbW8ubmFtZTtcbiAgICBjb25zdCBtb0lkID0gbW8uaWQ7XG4gICAgY29uc3QgcGFydGlhbFVwZGF0ZU9iamVjdDogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4gPSB7XG4gICAgICBpZDogbW9JZCxcbiAgICAgIG5hbWU6IG1vTmFtZVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5XG4gICAgICAudXBkYXRlKHBhcnRpYWxVcGRhdGVPYmplY3QpXG4gICAgICAudGhlbihzdWNjZXNzID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjaGVja0lmQ2FuRWRpdChyb2xlSWRzLCBtbykge1xuICAgIGlmIChhd2FpdCB0aGlzLmhhc0FueVJvbGUocm9sZUlkcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYXdhaXQgdGhpcy5jaGVja0lmT3duZXIobW8pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGF3YWl0IHRoaXMuY2hlY2tXaXRoUmVxdWVzdChtbykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==