import * as tslib_1 from "tslib";
import { NavigationEnd } from '@angular/router';
import { flatten, isFunction, sortBy } from 'lodash-es';
import { combineLatest, defer, from, isObservable, of, race } from 'rxjs';
import { filter, map, merge, startWith, switchMap } from 'rxjs/operators';
export function fromTrigger(router, refresh, factories) {
    return router.events.pipe(filter(function (evt) { return evt instanceof NavigationEnd; }), merge(refresh), startWith(1), switchMap(function () { return fromFactories(factories, router); }));
}
export function fromFactories(factories, router, withFirstEmpty) {
    if (withFirstEmpty === void 0) { withFirstEmpty = true; }
    return !Array.isArray(factories) || factories.length < 1
        ? of([])
        : defer(function () {
            var factoryObservables = resolveInjectedFactories(factories).map(function (f) {
                return toObservable(Array.isArray(f) ? f : f && isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
            });
            return combineLatest.apply(void 0, tslib_1.__spread(factoryObservables));
        }).pipe(map(function (results) { return sortByPriority([].concat.apply([], tslib_1.__spread(results))); }));
}
export function resolveInjectedFactories(factories) {
    return flatten(factories.map(function (f) { return (isFunction(f) ? f() : [f]); }));
}
export function stateToFactory(componentsState) {
    var components$ = componentsState.pipe(map(function (componentSet) { return Array.from(componentSet); }));
    return { get: function () { return components$; } };
}
export function sortByPriority(items) {
    return sortBy(items, 'priority');
}
function toObservable(factoryResult, withFirstEmpty) {
    var observable;
    if (!factoryResult) {
        return of([]);
    }
    else if (typeof factoryResult.then === 'function' || isObservable(factoryResult)) {
        if (withFirstEmpty) {
            var forceObservable = from(factoryResult);
            var withEmptyFirst = forceObservable.pipe(startWith([]));
            observable = race(forceObservable, withEmptyFirst);
        }
        else {
            observable = from(factoryResult);
        }
    }
    else {
        observable = of(factoryResult);
    }
    return observable.pipe(map(function (result) { return (Array.isArray(result) ? result : [result]).filter(function (item) { return !!item; }); }));
}
/**
 * Helper function to get the activated route in
 * a service (as ActivatedRoute injection only
 * works in components). Works as long as we only use
 * a tree and no child is active at the same time.
 *
 * @param router The current router
 */
export function getActivatedRoute(router) {
    if (router && router.routerState && router.routerState.root) {
        var route = router.routerState.root;
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
}
//# sourceMappingURL=data:application/json;base64,