/*
 * -----------------------------WARNING---------------------------------
 * This file has an *exact* copy in packages/cli/src/webpack.
 * Any changes to this file must be reflected there, too.
 */
var ApplicationOptions = /** @class */ (function () {
    function ApplicationOptions() {
    }
    return ApplicationOptions;
}());
export { ApplicationOptions };
//# sourceMappingURL=data:application/json;base64,