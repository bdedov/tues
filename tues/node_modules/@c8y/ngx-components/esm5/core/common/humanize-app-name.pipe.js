import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash';
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
var HumanizeAppNamePipe = /** @class */ (function () {
    function HumanizeAppNamePipe(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    HumanizeAppNamePipe.prototype.transform = function (appNameOrApp) {
        if (appNameOrApp === void 0) { appNameOrApp = 'Cumulocity'; }
        var appName = this.getAppName(appNameOrApp);
        var text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName: appName });
    };
    HumanizeAppNamePipe.prototype.getAppName = function (appNameOrApp) {
        var appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || appName;
    };
    HumanizeAppNamePipe.prototype.getFirstDefined = function (values) {
        return find(values, negate(isUndefined));
    };
    HumanizeAppNamePipe.prototype.isPublicApp = function (appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    };
    HumanizeAppNamePipe.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    HumanizeAppNamePipe = tslib_1.__decorate([
        Pipe({ name: 'humanizeAppName' })
    ], HumanizeAppNamePipe);
    return HumanizeAppNamePipe;
}());
export { HumanizeAppNamePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2NvbW1vbi9odW1hbml6ZS1hcHAtbmFtZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUd4RDs7OztFQUlFO0FBRUY7SUFRRSw2QkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFOOUMsaUJBQVksR0FBRztZQUNyQixjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtTQUN0QyxDQUFDO0lBRXVELENBQUM7SUFFMUQsdUNBQVMsR0FBVCxVQUFVLFlBQWdDO1FBQWhDLDZCQUFBLEVBQUEsMkJBQWdDO1FBQ3hDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sd0NBQVUsR0FBbEIsVUFBbUIsWUFBWTtRQUM3QixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO1lBQ2hDLFlBQVk7U0FDYixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQztJQUMvQyxDQUFDO0lBRU8sNkNBQWUsR0FBdkIsVUFBd0IsTUFBTTtRQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLHlDQUFXLEdBQW5CLFVBQW9CLFlBQVk7UUFDOUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7O2dCQTdCcUMsZ0JBQWdCOztJQVIzQyxtQkFBbUI7UUFEL0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7T0FDckIsbUJBQW1CLENBc0MvQjtJQUFELDBCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBnZXQsIGZpbmQsIG5lZ2F0ZSwgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSHVtYW5pemVQaXBlIH0gZnJvbSAnLi9odW1hbml6ZS5waXBlJztcblxuLypcbiAqIEh1bWFuaXplIGFuIGFwcGxpY2F0aW9uIG5hbWUgYW5kIHRyYW5zbGF0ZXMgaXQuXG4gKiBVc2FnZTpcbiAqICAgYXBwTmFtZU9yQXBwIHwgaHVtYW5pemVBcHBOYW1lIHwgYXN5bmNcbiovXG5AUGlwZSh7IG5hbWU6ICdodW1hbml6ZUFwcE5hbWUnIH0pXG5leHBvcnQgY2xhc3MgSHVtYW5pemVBcHBOYW1lUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHByaXZhdGUgaW50ZXJuYWxBcHBzID0ge1xuICAgIGFkbWluaXN0cmF0aW9uOiAnQWRtaW5pc3RyYXRpb24nLFxuICAgIGNvY2twaXQ6ICdDb2NrcGl0JyxcbiAgICBkZXZpY2VtYW5hZ2VtZW50OiAnRGV2aWNlIG1hbmFnZW1lbnQnXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIHRyYW5zZm9ybShhcHBOYW1lT3JBcHA6IGFueSA9ICdDdW11bG9jaXR5Jyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgY29uc3QgYXBwTmFtZSA9IHRoaXMuZ2V0QXBwTmFtZShhcHBOYW1lT3JBcHApO1xuXG4gICAgbGV0IHRleHQ7XG4gICAgaWYgKHRoaXMuaXNQdWJsaWNBcHAoYXBwTmFtZU9yQXBwKSkge1xuICAgICAgdGV4dCA9IGdldHRleHQoJ3t7IGFwcE5hbWUgfCB0cmFuc2xhdGUgfX0gKHB1YmxpYyknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dCA9IGFwcE5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2Uuc3RyZWFtKHRleHQsIHsgYXBwTmFtZSB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXBwTmFtZShhcHBOYW1lT3JBcHApIHtcbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRGaXJzdERlZmluZWQoW1xuICAgICAgZ2V0KGFwcE5hbWVPckFwcCwgJ25hbWUnKSxcbiAgICAgIGdldChhcHBOYW1lT3JBcHAsICdjb250ZXh0UGF0aCcpLFxuICAgICAgYXBwTmFtZU9yQXBwXG4gICAgXSkgfHwgJyc7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxBcHBzW2FwcE5hbWVdIHx8IGFwcE5hbWU7XG4gIH1cblxuICBwcml2YXRlIGdldEZpcnN0RGVmaW5lZCh2YWx1ZXMpIHtcbiAgICByZXR1cm4gZmluZCh2YWx1ZXMsIG5lZ2F0ZShpc1VuZGVmaW5lZCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1B1YmxpY0FwcChhcHBOYW1lT3JBcHApIHtcbiAgICByZXR1cm4gQm9vbGVhbihnZXQoYXBwTmFtZU9yQXBwLCAncHVibGljJykpO1xuICB9XG59XG4iXX0=