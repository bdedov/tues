import * as tslib_1 from "tslib";
import { InjectionToken, Optional, Inject, Injectable } from '@angular/core';
import { camelCase, isUndefined } from 'lodash-es';
import { ApplicationOptions } from './ApplicationOptions';
import { SystemOptionsService, TenantOptionsService } from '@c8y/ngx-components/api';
export var HOOK_OPTIONS = new InjectionToken('App options');
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
var OptionsService = /** @class */ (function (_super) {
    tslib_1.__extends(OptionsService, _super);
    function OptionsService(options, systemOptionsService, tenantOptionService) {
        var _this = _super.call(this) || this;
        _this.systemOptionsService = systemOptionsService;
        _this.tenantOptionService = tenantOptionService;
        _this.setupOptions(options);
        return _this;
    }
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     */
    OptionsService.prototype.get = function (optionKey, defaultValue) {
        var value = this[optionKey];
        if (typeof value === 'undefined') {
            value = this[camelCase(optionKey)];
        }
        return typeof value !== 'undefined' ? value : defaultValue;
    };
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    OptionsService.prototype.set = function (key, value) {
        this[camelCase(key)] = value;
    };
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    OptionsService.prototype.getSupportUrl = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getTenantOption('configuration', 'system.support.url')];
                    case 1:
                        url = _c.sent();
                        if (isUndefined(url)) {
                            url = this.supportUrl;
                        }
                        _a = this;
                        if (!isUndefined(url)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getSystemOption('support', 'url')];
                    case 2:
                        _b = (_c.sent()) || false;
                        return [3 /*break*/, 4];
                    case 3:
                        _b = url;
                        _c.label = 4;
                    case 4:
                        _a.supportUrl = _b;
                        return [2 /*return*/, this.supportUrl];
                }
            });
        });
    };
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    OptionsService.prototype.getActivateSupportUser = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var option;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSystemOption('support-user', 'enabled', true)];
                    case 1:
                        option = _a.sent();
                        return [2 /*return*/, !option];
                }
            });
        });
    };
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    OptionsService.prototype.getSystemOption = function (category, key, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.getOptionFromService(category, key, this.systemOptionsService, defaultValue)];
            });
        });
    };
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    OptionsService.prototype.getTenantOption = function (category, key, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.getOptionFromService(category, key, this.tenantOptionService, defaultValue)];
            });
        });
    };
    OptionsService.prototype.setupOptions = function (options) {
        var _this = this;
        if (options) {
            if (!Array.isArray(options)) {
                options = [options];
            }
            options.forEach(function (optionMap) {
                if (optionMap) {
                    Object.keys(optionMap).forEach(function (key) {
                        _this[camelCase(key)] = optionMap[key];
                    });
                }
            });
        }
    };
    OptionsService.prototype.getOptionFromService = function (category, key, service, defaultValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, service.detail({ category: category, key: key })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, this.parseOptionRawValue(data.value, defaultValue)];
                    case 2:
                        ex_1 = _a.sent();
                        return [2 /*return*/, defaultValue];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OptionsService.prototype.parseOptionRawValue = function (rawValue, defaultValue) {
        var value;
        try {
            value = JSON.parse(rawValue);
        }
        catch (e) {
            value = isUndefined(rawValue) ? defaultValue : rawValue;
        }
        return value;
    };
    OptionsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_OPTIONS,] }] },
        { type: SystemOptionsService },
        { type: TenantOptionsService }
    ]; };
    OptionsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(HOOK_OPTIONS))
    ], OptionsService);
    return OptionsService;
}(ApplicationOptions));
export { OptionsService };
//# sourceMappingURL=data:application/json;base64,