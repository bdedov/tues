import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { CookieBannerPreferencesModalComponent } from './cookie-banner-preferences-modal/cookie-banner-preferences-modal.component';
import { CookieBannerService } from './cookie-banner.service';
var CookieBannerComponent = /** @class */ (function () {
    function CookieBannerComponent(bsModalService, cookieBannerService) {
        this.bsModalService = bsModalService;
        this.cookieBannerService = cookieBannerService;
        this.shouldDisable = false;
    }
    CookieBannerComponent.prototype.ngOnInit = function () {
        this.settings = this.cookieBannerService.getCookieBannerSettings();
        this.cookiePreferences = this.cookieBannerService.getCookiePreferencesConfig();
        this.shouldShowCookieBanner();
    };
    CookieBannerComponent.prototype.onConfigurePreferences = function () {
        var _this = this;
        this.disableButtons(true);
        var initialState = {
            configCookiePreferences: this.cookiePreferences
        };
        var modalRef = this.bsModalService.show(CookieBannerPreferencesModalComponent, {
            initialState: initialState
        });
        modalRef.content.closeSubject.subscribe(function (userCookiePreferences) {
            _this.disableButtons(false);
            if (userCookiePreferences) {
                _this.cookieBannerService.setCookies(userCookiePreferences);
                _this.setCookieBannerVisibility(false);
            }
        });
    };
    CookieBannerComponent.prototype.acceptCookies = function () {
        this.cookieBannerService.setCookies(this.cookiePreferences || { required: true });
        this.setCookieBannerVisibility(false);
    };
    CookieBannerComponent.prototype.shouldShowCookieBanner = function () {
        this.setCookieBannerVisibility(this.cookieBannerService.shouldShowCookieBanner());
    };
    CookieBannerComponent.prototype.disableButtons = function (shouldDisable) {
        this.shouldDisable = shouldDisable;
    };
    CookieBannerComponent.prototype.setCookieBannerVisibility = function (shouldShow) {
        this.showBanner = shouldShow;
        this.cookieBannerService.isCookieBannerShowed$.next(shouldShow);
    };
    CookieBannerComponent.ctorParameters = function () { return [
        { type: BsModalService },
        { type: CookieBannerService }
    ]; };
    CookieBannerComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-cookie-banner',
            template: "<div class=\"c8y-cookie-banner\">\n  <div class=\"container\">\n    <div class=\"row p-t-16 p-b-16\" *ngIf=\"showBanner\">\n      <div class=\"col-md-2\" *ngIf=\"settings.cookieBannerTitle\">\n        <h3>{{ settings.cookieBannerTitle | translate }}</h3>\n        <div class=\"p-b-16 visible-sm visible-xs\"></div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"cookie-banner-content text-pre\">\n          {{ settings.cookieBannerText | translate }}\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16 visible-sm visible-xs\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"acceptCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Agree and proceed' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button class=\"btn btn-default btn-block\" (click)=\"onConfigurePreferences()\" [disabled]=\"shouldDisable\">\n              {{ 'Configure preferences' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16\"></div>\n            <a\n              class=\"btn btn-default btn-block\"\n              href=\"{{ settings.policyUrl }}\"\n              target=\"_blank\"\n              *ngIf=\"settings.policyUrl\"\n            >\n              {{ 'Privacy policy' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], CookieBannerComponent);
    return CookieBannerComponent;
}());
export { CookieBannerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9ib290c3RyYXAvY29va2llLWJhbm5lci9jb29raWUtYmFubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sNkVBQTZFLENBQUM7QUFFcEksT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNOUQ7SUFLRSwrQkFDVSxjQUE4QixFQUM5QixtQkFBd0M7UUFEeEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFKbEQsa0JBQWEsR0FBWSxLQUFLLENBQUM7SUFLNUIsQ0FBQztJQUVKLHdDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ25FLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUMvRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsc0RBQXNCLEdBQXRCO1FBQUEsaUJBa0JDO1FBakJDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUIsSUFBTSxZQUFZLEdBQUc7WUFDbkIsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUNoRCxDQUFDO1FBRUYsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUU7WUFDL0UsWUFBWSxjQUFBO1NBQ2IsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQUMscUJBQXdDO1lBQy9FLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsSUFBSSxxQkFBcUIsRUFBRTtnQkFDekIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2dCQUMzRCxLQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw2Q0FBYSxHQUFiO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVPLHNEQUFzQixHQUE5QjtRQUNFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFTyw4Q0FBYyxHQUF0QixVQUF1QixhQUFzQjtRQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRU8seURBQXlCLEdBQWpDLFVBQWtDLFVBQW1CO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7Z0JBOUN5QixjQUFjO2dCQUNULG1CQUFtQjs7SUFQdkMscUJBQXFCO1FBSmpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQkFBbUI7WUFDN0Isd3NEQUE2QztTQUM5QyxDQUFDO09BQ1cscUJBQXFCLENBcURqQztJQUFELDRCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FyRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBDb29raWVCYW5uZXJQcmVmZXJlbmNlc01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9jb29raWUtYmFubmVyLXByZWZlcmVuY2VzLW1vZGFsL2Nvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvb2tpZUJhbm5lclNldHRpbmdzLCBDb29raWVQcmVmZXJlbmNlcyB9IGZyb20gJy4vY29va2llLWJhbm5lci5tb2RlbCc7XG5pbXBvcnQgeyBDb29raWVCYW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi9jb29raWUtYmFubmVyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktY29va2llLWJhbm5lcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb29raWUtYmFubmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBDb29raWVCYW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBzZXR0aW5nczogQ29va2llQmFubmVyU2V0dGluZ3M7XG4gIHNob3dCYW5uZXI6IGJvb2xlYW47XG4gIHNob3VsZERpc2FibGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY29va2llUHJlZmVyZW5jZXM6IENvb2tpZVByZWZlcmVuY2VzO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJzTW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcbiAgICBwcml2YXRlIGNvb2tpZUJhbm5lclNlcnZpY2U6IENvb2tpZUJhbm5lclNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmNvb2tpZUJhbm5lclNlcnZpY2UuZ2V0Q29va2llQmFubmVyU2V0dGluZ3MoKTtcbiAgICB0aGlzLmNvb2tpZVByZWZlcmVuY2VzID0gdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmdldENvb2tpZVByZWZlcmVuY2VzQ29uZmlnKCk7XG4gICAgdGhpcy5zaG91bGRTaG93Q29va2llQmFubmVyKCk7XG4gIH1cblxuICBvbkNvbmZpZ3VyZVByZWZlcmVuY2VzKCkge1xuICAgIHRoaXMuZGlzYWJsZUJ1dHRvbnModHJ1ZSk7XG5cbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICBjb25maWdDb29raWVQcmVmZXJlbmNlczogdGhpcy5jb29raWVQcmVmZXJlbmNlc1xuICAgIH07XG5cbiAgICBjb25zdCBtb2RhbFJlZiA9IHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhDb29raWVCYW5uZXJQcmVmZXJlbmNlc01vZGFsQ29tcG9uZW50LCB7XG4gICAgICBpbml0aWFsU3RhdGVcbiAgICB9KTtcblxuICAgIG1vZGFsUmVmLmNvbnRlbnQuY2xvc2VTdWJqZWN0LnN1YnNjcmliZSgodXNlckNvb2tpZVByZWZlcmVuY2VzOiBDb29raWVQcmVmZXJlbmNlcykgPT4ge1xuICAgICAgdGhpcy5kaXNhYmxlQnV0dG9ucyhmYWxzZSk7XG4gICAgICBpZiAodXNlckNvb2tpZVByZWZlcmVuY2VzKSB7XG4gICAgICAgIHRoaXMuY29va2llQmFubmVyU2VydmljZS5zZXRDb29raWVzKHVzZXJDb29raWVQcmVmZXJlbmNlcyk7XG4gICAgICAgIHRoaXMuc2V0Q29va2llQmFubmVyVmlzaWJpbGl0eShmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhY2NlcHRDb29raWVzKCkge1xuICAgIHRoaXMuY29va2llQmFubmVyU2VydmljZS5zZXRDb29raWVzKHRoaXMuY29va2llUHJlZmVyZW5jZXMgfHwgeyByZXF1aXJlZDogdHJ1ZSB9KTtcbiAgICB0aGlzLnNldENvb2tpZUJhbm5lclZpc2liaWxpdHkoZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRTaG93Q29va2llQmFubmVyKCkge1xuICAgIHRoaXMuc2V0Q29va2llQmFubmVyVmlzaWJpbGl0eSh0aGlzLmNvb2tpZUJhbm5lclNlcnZpY2Uuc2hvdWxkU2hvd0Nvb2tpZUJhbm5lcigpKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzYWJsZUJ1dHRvbnMoc2hvdWxkRGlzYWJsZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2hvdWxkRGlzYWJsZSA9IHNob3VsZERpc2FibGU7XG4gIH1cblxuICBwcml2YXRlIHNldENvb2tpZUJhbm5lclZpc2liaWxpdHkoc2hvdWxkU2hvdzogYm9vbGVhbikge1xuICAgIHRoaXMuc2hvd0Jhbm5lciA9IHNob3VsZFNob3c7XG4gICAgdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmlzQ29va2llQmFubmVyU2hvd2VkJC5uZXh0KHNob3VsZFNob3cpO1xuICB9XG59XG4iXX0=