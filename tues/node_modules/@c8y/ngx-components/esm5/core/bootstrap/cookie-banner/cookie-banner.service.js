import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { OptionsService } from '../../common/options.service';
import { gettext } from '../../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../../common/options.service";
var CookieBannerService = /** @class */ (function () {
    function CookieBannerService(options) {
        this.options = options;
        this.STORAGE_KEY = 'acceptCookieNotice';
        this.COOKIE_BANNER = 'cookieBanner';
        this.isCookieBannerShowed$ = new Subject();
        this.cookieDescriptions = {
            required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
            functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
            marketing: gettext('These cookies are used to target advertising to a user.')
        };
    }
    CookieBannerService.prototype.getCookiePreferencesConfig = function () {
        var settings = this.getCookieBannerSettings();
        return settings && settings.configuration;
    };
    CookieBannerService.prototype.getCookieBannerSettings = function () {
        return this.options.get(this.COOKIE_BANNER) || {};
    };
    CookieBannerService.prototype.setCookies = function (cookiePreferences) {
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiePreferences));
    };
    CookieBannerService.prototype.shouldShowCookieBanner = function () {
        var settings = this.getCookieBannerSettings();
        return !!settings.cookieBannerText && !this.getUserCookiePreferences();
    };
    CookieBannerService.prototype.getUserCookiePreferences = function () {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
    };
    CookieBannerService.prototype.isConfigCookiePreferencesDefined = function () {
        return !!this.getCookiePreferencesConfig();
    };
    CookieBannerService.prototype.isFunctionalCookieDisabled = function () {
        var functional = (this.getUserCookiePreferences() || {}).functional;
        /**
         * We want this check, as we should stop loading Gainsight tag only when functional cookie is explicitly set to false.
         * In the USA there is no need for the functional cookies when tracking users.
         * This is why we want to allow undefined to pass the check.
         * @ignore
         */
        return functional === false;
    };
    CookieBannerService.prototype.getCookieDescription = function (cookieType) {
        return this.cookieDescriptions[cookieType];
    };
    CookieBannerService.prototype.transformCookiePreferencesToList = function (cookiePreferences) {
        return Object.entries(cookiePreferences).map(function (_a) {
            var _b = tslib_1.__read(_a, 2), name = _b[0], value = _b[1];
            var isReadonly = name === 'required';
            return { name: name, value: value, isReadonly: isReadonly };
        });
    };
    CookieBannerService.prototype.transformCookiePreferencesListToCookiePreferences = function (cookiePreferencesList) {
        return cookiePreferencesList.reduce(function (cookiePref, cookie) {
            var key = cookie.name;
            cookiePref[key] = cookie.value;
            return cookiePref;
        }, {});
    };
    CookieBannerService.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    CookieBannerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(i0.ɵɵinject(i1.OptionsService)); }, token: CookieBannerService, providedIn: "root" });
    CookieBannerService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], CookieBannerService);
    return CookieBannerService;
}());
export { CookieBannerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhbm5lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYm9vdHN0cmFwL2Nvb2tpZS1iYW5uZXIvY29va2llLWJhbm5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBSzdDO0lBZUUsNkJBQW9CLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBZGxDLGdCQUFXLEdBQVcsb0JBQW9CLENBQUM7UUFDM0Msa0JBQWEsR0FBRyxjQUFjLENBQUM7UUFDeEMsMEJBQXFCLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7UUFFdkMsdUJBQWtCLEdBQUc7WUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FDZiw0SkFBNEosQ0FDN0o7WUFDRCxVQUFVLEVBQUUsT0FBTyxDQUNqQix3U0FBd1MsQ0FDelM7WUFDRCxTQUFTLEVBQUUsT0FBTyxDQUFDLHlEQUF5RCxDQUFDO1NBQzlFLENBQUM7SUFFNEMsQ0FBQztJQUUvQyx3REFBMEIsR0FBMUI7UUFDRSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNoRCxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQzVDLENBQUM7SUFFRCxxREFBdUIsR0FBdkI7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELHdDQUFVLEdBQVYsVUFBVyxpQkFBb0M7UUFDN0MsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxvREFBc0IsR0FBdEI7UUFDRSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNoRCxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRUQsc0RBQXdCLEdBQXhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELDhEQUFnQyxHQUFoQztRQUNFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRCx3REFBMEIsR0FBMUI7UUFDVSxJQUFBLCtEQUFVLENBQThEO1FBQ2hGOzs7OztXQUtHO1FBQ0gsT0FBTyxVQUFVLEtBQUssS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxrREFBb0IsR0FBcEIsVUFBcUIsVUFBa0I7UUFDckMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELDhEQUFnQyxHQUFoQyxVQUFpQyxpQkFBb0M7UUFDbkUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBYTtnQkFBYiwwQkFBYSxFQUFaLFlBQUksRUFBRSxhQUFLO1lBQ3hELElBQU0sVUFBVSxHQUFHLElBQUksS0FBSyxVQUFVLENBQUM7WUFDdkMsT0FBTyxFQUFFLElBQUksTUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsK0VBQWlELEdBQWpELFVBQ0UscUJBQStCO1FBRS9CLE9BQU8scUJBQXFCLENBQUMsTUFBTSxDQUFDLFVBQUMsVUFBNkIsRUFBRSxNQUFjO1lBQ2hGLElBQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFFL0IsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQzs7Z0JBM0Q0QixjQUFjOzs7SUFmaEMsbUJBQW1CO1FBSC9CLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxtQkFBbUIsQ0EyRS9COzhCQW5GRDtDQW1GQyxBQTNFRCxJQTJFQztTQTNFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBDb29raWUsIENvb2tpZUJhbm5lclNldHRpbmdzLCBDb29raWVQcmVmZXJlbmNlcyB9IGZyb20gJy4vY29va2llLWJhbm5lci5tb2RlbCc7XG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb29raWVCYW5uZXJTZXJ2aWNlIHtcbiAgcmVhZG9ubHkgU1RPUkFHRV9LRVk6IHN0cmluZyA9ICdhY2NlcHRDb29raWVOb3RpY2UnO1xuICByZWFkb25seSBDT09LSUVfQkFOTkVSID0gJ2Nvb2tpZUJhbm5lcic7XG4gIGlzQ29va2llQmFubmVyU2hvd2VkJDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBjb29raWVEZXNjcmlwdGlvbnMgPSB7XG4gICAgcmVxdWlyZWQ6IGdldHRleHQoXG4gICAgICBcIlRoZXNlIGNvb2tpZXMgYXJlIHJlcXVpcmVkIHRvIGVuYWJsZSBjb3JlIHNpdGUgZnVuY3Rpb25hbGl0eS4gVGhleSBwZXJmb3JtIGEgdGFzayBvciBvcGVyYXRpb24gd2l0aG91dCB3aGljaCBhIHNpdGUncyBmdW5jdGlvbmFsaXR5IHdvdWxkIG5vdCBiZSBwb3NzaWJsZS5cIlxuICAgICksXG4gICAgZnVuY3Rpb25hbDogZ2V0dGV4dChcbiAgICAgICdUaGVzZSBjb29raWVzIGFyZSB1c2VkIHRvIHRyYWNrIHNpdGUgdXNhZ2UgYW5kIHRvIHByb2Nlc3MgbXkgcGVyc29uYWwgZGF0YSB0byBtZWFzdXJlIGFuZCBpbXByb3ZlIHVzYWJpbGl0eSBhbmQgcGVyZm9ybWFuY2UuIFdlIHdpbGwgbmVpdGhlciBmb3J3YXJkIHRoaXMgZGF0YSB0byBhbnkgdGhpcmQgcGFydHkgbm9yIHVzZSB0aGlzIGRhdGEgZm9yIGRpcmVjdCBtYXJrZXRpbmcgcHVycG9zZXMuIEkgcmVjb2duaXplIHRoYXQgSSBjYW4gb3B0IGluIGFuZCBvdXQgb2YgdGhlc2UgY29va2llcyBhdCBhbnkgdGltZS4nXG4gICAgKSxcbiAgICBtYXJrZXRpbmc6IGdldHRleHQoJ1RoZXNlIGNvb2tpZXMgYXJlIHVzZWQgdG8gdGFyZ2V0IGFkdmVydGlzaW5nIHRvIGEgdXNlci4nKVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT3B0aW9uc1NlcnZpY2UpIHt9XG5cbiAgZ2V0Q29va2llUHJlZmVyZW5jZXNDb25maWcoKTogQ29va2llUHJlZmVyZW5jZXMge1xuICAgIGNvbnN0IHNldHRpbmdzID0gdGhpcy5nZXRDb29raWVCYW5uZXJTZXR0aW5ncygpO1xuICAgIHJldHVybiBzZXR0aW5ncyAmJiBzZXR0aW5ncy5jb25maWd1cmF0aW9uO1xuICB9XG5cbiAgZ2V0Q29va2llQmFubmVyU2V0dGluZ3MoKTogQ29va2llQmFubmVyU2V0dGluZ3Mge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KHRoaXMuQ09PS0lFX0JBTk5FUikgfHwge307XG4gIH1cblxuICBzZXRDb29raWVzKGNvb2tpZVByZWZlcmVuY2VzOiBDb29raWVQcmVmZXJlbmNlcykge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KGNvb2tpZVByZWZlcmVuY2VzKSk7XG4gIH1cblxuICBzaG91bGRTaG93Q29va2llQmFubmVyKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNldHRpbmdzID0gdGhpcy5nZXRDb29raWVCYW5uZXJTZXR0aW5ncygpO1xuICAgIHJldHVybiAhIXNldHRpbmdzLmNvb2tpZUJhbm5lclRleHQgJiYgIXRoaXMuZ2V0VXNlckNvb2tpZVByZWZlcmVuY2VzKCk7XG4gIH1cblxuICBnZXRVc2VyQ29va2llUHJlZmVyZW5jZXMoKTogQ29va2llUHJlZmVyZW5jZXMge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuU1RPUkFHRV9LRVkpKTtcbiAgfVxuXG4gIGlzQ29uZmlnQ29va2llUHJlZmVyZW5jZXNEZWZpbmVkKCkge1xuICAgIHJldHVybiAhIXRoaXMuZ2V0Q29va2llUHJlZmVyZW5jZXNDb25maWcoKTtcbiAgfVxuXG4gIGlzRnVuY3Rpb25hbENvb2tpZURpc2FibGVkKCkge1xuICAgIGNvbnN0IHsgZnVuY3Rpb25hbCB9OiBDb29raWVQcmVmZXJlbmNlcyA9IHRoaXMuZ2V0VXNlckNvb2tpZVByZWZlcmVuY2VzKCkgfHwge307XG4gICAgLyoqXG4gICAgICogV2Ugd2FudCB0aGlzIGNoZWNrLCBhcyB3ZSBzaG91bGQgc3RvcCBsb2FkaW5nIEdhaW5zaWdodCB0YWcgb25seSB3aGVuIGZ1bmN0aW9uYWwgY29va2llIGlzIGV4cGxpY2l0bHkgc2V0IHRvIGZhbHNlLlxuICAgICAqIEluIHRoZSBVU0EgdGhlcmUgaXMgbm8gbmVlZCBmb3IgdGhlIGZ1bmN0aW9uYWwgY29va2llcyB3aGVuIHRyYWNraW5nIHVzZXJzLlxuICAgICAqIFRoaXMgaXMgd2h5IHdlIHdhbnQgdG8gYWxsb3cgdW5kZWZpbmVkIHRvIHBhc3MgdGhlIGNoZWNrLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb25hbCA9PT0gZmFsc2U7XG4gIH1cblxuICBnZXRDb29raWVEZXNjcmlwdGlvbihjb29raWVUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvb2tpZURlc2NyaXB0aW9uc1tjb29raWVUeXBlXTtcbiAgfVxuXG4gIHRyYW5zZm9ybUNvb2tpZVByZWZlcmVuY2VzVG9MaXN0KGNvb2tpZVByZWZlcmVuY2VzOiBDb29raWVQcmVmZXJlbmNlcyk6IENvb2tpZVtdIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29va2llUHJlZmVyZW5jZXMpLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgY29uc3QgaXNSZWFkb25seSA9IG5hbWUgPT09ICdyZXF1aXJlZCc7XG4gICAgICByZXR1cm4geyBuYW1lLCB2YWx1ZSwgaXNSZWFkb25seSB9O1xuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtQ29va2llUHJlZmVyZW5jZXNMaXN0VG9Db29raWVQcmVmZXJlbmNlcyhcbiAgICBjb29raWVQcmVmZXJlbmNlc0xpc3Q6IENvb2tpZVtdXG4gICk6IENvb2tpZVByZWZlcmVuY2VzIHtcbiAgICByZXR1cm4gY29va2llUHJlZmVyZW5jZXNMaXN0LnJlZHVjZSgoY29va2llUHJlZjogQ29va2llUHJlZmVyZW5jZXMsIGNvb2tpZTogQ29va2llKSA9PiB7XG4gICAgICBjb25zdCBrZXk6IHN0cmluZyA9IGNvb2tpZS5uYW1lO1xuICAgICAgY29va2llUHJlZltrZXldID0gY29va2llLnZhbHVlO1xuXG4gICAgICByZXR1cm4gY29va2llUHJlZjtcbiAgICB9LCB7fSk7XG4gIH1cbn1cbiJdfQ==