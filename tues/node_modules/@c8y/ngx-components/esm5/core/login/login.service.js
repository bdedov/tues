import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { BasicAuth, CookieAuth, FetchClient, IAuthentication, ICredentials, ITenantLoginOption, Realtime, TenantService, UserService } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n/gettext';
import { ApiService } from '@c8y/ngx-components/api';
import { switchMap } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
import { LocationStrategy } from '@angular/common';
import { get, isString } from 'lodash-es';
/**
 * Service to manage the login.
 */
var LoginService = /** @class */ (function () {
    function LoginService(client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, location) {
        this.client = client;
        this.basicAuth = basicAuth;
        this.cookieAuth = cookieAuth;
        this.ui = ui;
        this.user = user;
        this.tenant = tenant;
        this.realtime = realtime;
        this.alert = alert;
        this.api = api;
        this.location = location;
        this.rememberMe = false;
        this.TOKEN_KEY = '_tcy8';
        this.TFATOKEN_KEY = 'TFAToken';
        this.OAUTH2_INTERNAL_TYPE = 'OAUTH2_INTERNAL';
        this.isFirstLogin = true;
        this.GREEN_MIN_LENGTH_DEFAULT = 8;
        // tslint:disable:max-line-length
        this.ERROR_MESSAGES = {
            minlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_missmatch: gettext('Password confirmation does not match.'),
            maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
            remote_error: gettext('Server error occurred.'),
            email: gettext('Invalid email address.'),
            password_change: gettext('Your password is expired. Please set a new password.'),
            password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
            tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
            pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            pattern_newPassword: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
            international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
            phone_number_error: gettext('Could not update phone number.'),
            pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
            passwordConfirm: gettext('Password confirmation does not match.'),
            tfaExpired: gettext('Two-factor authentication token expired.')
        };
        // tslint:enable:max-line-length
        this.SUCCESS_MESSAGES = {
            password_changed: gettext('Password changed. You can now log in using new password.'),
            password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
            resend_sms: gettext('Verification code SMS resent.'),
            send_sms: gettext('Verification code SMS sent.')
        };
        this.passwordStrengthSetting = {
            enforcePasswordStrength: false,
            greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT,
            passwordStrengthValidity: false
        };
        this.localhostRegExp = new RegExp('localhost');
        this.localhostIpRegExp = new RegExp('127.0.0.1');
        this.showTenantRegExp = new RegExp('showTenant');
        this.autoLogout();
        this.initLoginOptions();
    }
    /**
     * Returns the current tenant.
     * @return The tenant name.
     */
    LoginService.prototype.getTenant = function () {
        return this.client.tenant;
    };
    LoginService.prototype.initLoginOptions = function () {
        var loginOptions = this.ui.state.loginOptions || [];
        var isOAuth2 = function (_a) {
            var type = _a.type, grantType = _a.grantType;
            return type === 'OAUTH2' && grantType === 'AUTHORIZATION_CODE';
        };
        this.loginMode = loginOptions.find(function (_a) {
            var type = _a.type;
            return type === 'OAUTH2_INTERNAL';
        }) ||
            loginOptions.find(function (_a) {
                var type = _a.type;
                return type === 'BASIC';
            }) ||
            loginOptions.find(isOAuth2) || { type: 'BASIC' };
        this.oauthOptions = loginOptions.find(isOAuth2) || {};
    };
    LoginService.prototype.redirectToOauth = function () {
        var initRequest = this.oauthOptions.initRequest;
        var fullPath = (this.location ? this.location._platformLocation : window).location
            .href;
        var redirectUrl = encodeURIComponent(fullPath);
        var originUriParam = (initRequest.includes('?') ? '&' : '?') + "originUri=" + redirectUrl;
        window.location.href = "" + initRequest + originUriParam;
    };
    LoginService.prototype.autoLogout = function () {
        var _this = this;
        var errorPattern = /invalid\scredentials.*pin.*generate/i;
        var isTfaExpired = function (data) {
            return data && typeof data.message === 'string' && errorPattern.test(data.message);
        };
        this.ui.currentUser
            .pipe(switchMap(function (u) {
            return u ? _this.api.hookResponse(function (_a) {
                var response = _a.response;
                return response.status === 401;
            }) : EMPTY;
        }))
            .subscribe(function (apiCall) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var response, willLogout, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = apiCall.response;
                        willLogout = false;
                        if (!isTfaExpired(response.data)) return [3 /*break*/, 1];
                        willLogout = true;
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(typeof response.json === 'function')) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.clone().json()];
                    case 2:
                        data = _a.sent();
                        if (isTfaExpired(data)) {
                            willLogout = true;
                        }
                        _a.label = 3;
                    case 3:
                        if (willLogout) {
                            this.logout(false);
                            setTimeout(function () { return _this.alert.danger(_this.ERROR_MESSAGES.tfaExpired); }, 500);
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
     * @return The min length for password or default value.
     */
    LoginService.prototype.getGreenMinLength = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var greenMinLength;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBasicAuthLoginOption()];
                    case 1:
                        greenMinLength = ((_a.sent()) || { greenMinLength: null }).greenMinLength;
                        this.passwordStrengthSetting.greenMinLength = greenMinLength || this.GREEN_MIN_LENGTH_DEFAULT;
                        return [2 /*return*/, this.passwordStrengthSetting.greenMinLength];
                }
            });
        });
    };
    /**
     * Checks if password strength is enforced for system
     * by retrieving value of `enforceStrength` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    LoginService.prototype.getEnforcePasswordStrength = function (refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                        var enforcePasswordStrength = get(loginOption, 'enforceStrength');
                        if (isString(enforcePasswordStrength)) {
                            _this.passwordStrengthSetting.enforcePasswordStrength = enforcePasswordStrength === 'true' ? true : false;
                        }
                        else {
                            _this.passwordStrengthSetting.enforcePasswordStrength = !!enforcePasswordStrength;
                        }
                        return _this.passwordStrengthSetting.enforcePasswordStrength;
                    })];
            });
        });
    };
    /**
     * Checks if password strength is enforced for particular tenant
     * by retrieving value of `strengthValidity` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    LoginService.prototype.getPasswordStrengthValidity = function (refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                        var strengthValidity = get(loginOption, 'strengthValidity');
                        if (isString(strengthValidity)) {
                            _this.passwordStrengthSetting.passwordStrengthValidity = strengthValidity === 'true' ? true : false;
                        }
                        else {
                            _this.passwordStrengthSetting.passwordStrengthValidity = !!strengthValidity;
                        }
                        return _this.passwordStrengthSetting.passwordStrengthValidity;
                    })];
            });
        });
    };
    /**
     * Function determines if enforced strength checks should be enabled for current tenant
     * based on properties retrieved from loginOptions
     * @param options object containing specific options:
     *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call
     * @return boolean value, true if strength is enforced for tenant, false otherwise.
     */
    LoginService.prototype.getPasswordStrengthEnforced = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var refresh;
            return tslib_1.__generator(this, function (_a) {
                refresh = options && options.refresh;
                return [2 /*return*/, Promise.all([this.getEnforcePasswordStrength(refresh), this.getPasswordStrengthValidity(refresh)]).then(function (values) {
                        var _a = tslib_1.__read(values, 2), enforcePasswordStrength = _a[0], passwordStrengthValidity = _a[1];
                        return enforcePasswordStrength || passwordStrengthValidity;
                    })];
            });
        });
    };
    /**
     * Clears all backend errors.
     */
    LoginService.prototype.cleanMessages = function () {
        this.alert.clearAll();
    };
    /**
     * Adds a new success message
     * @param successKey The key of the success message as used in SUCCESS_MESSAGES
     */
    LoginService.prototype.addSuccessMessage = function (successKey) {
        var successMessage = this.SUCCESS_MESSAGES[successKey];
        if (successMessage) {
            this.alert.add({
                text: successMessage,
                type: 'success',
                timeout: 0
            });
        }
    };
    /**
     * Returns the current strategy. Defaults to cookie, if a token
     * is found in local or session storage we switch to basic auth.
     * @returns The current auth strategy.
     */
    LoginService.prototype.getAuthStrategy = function () {
        var authStrategy = this.cookieAuth;
        var token = this.getStoredToken();
        var tfa = this.getStoredTfaToken();
        if (token) {
            authStrategy = this.basicAuth;
            this.setCredentials({ token: token, tfa: tfa }, this.basicAuth);
        }
        return authStrategy;
    };
    /**
     * Forces the use of basic auth as strategy with this credentials.
     * @param credentials The credentials to use.
     */
    LoginService.prototype.useBasicAuth = function (credentials) {
        this.setCredentials(credentials, this.basicAuth);
        return this.basicAuth;
    };
    /**
     * Tries to login a user with the given credentials.
     * If successful, the current tenant and user is set. If not an error
     * is thrown. It also verifies if the user is allowed to open the
     * current app.
     * @param auth The authentication strategy used.
     * @param credentials The credentials to try to login.
     */
    LoginService.prototype.login = function (auth, credentials) {
        if (auth === void 0) { auth = this.getAuthStrategy(); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tenantRes, tenant, userRes, user, supportUserName, token;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.client.setAuth(auth);
                        return [4 /*yield*/, this.tenant.current()];
                    case 1:
                        tenantRes = _a.sent();
                        tenant = tenantRes.data;
                        return [4 /*yield*/, this.switchLoginMode(credentials)];
                    case 2:
                        if (_a.sent()) {
                            auth = this.cookieAuth;
                        }
                        return [4 /*yield*/, this.user.current()];
                    case 3:
                        userRes = _a.sent();
                        user = userRes.data;
                        return [4 /*yield*/, this.verifyAppAccess()];
                    case 4:
                        _a.sent();
                        supportUserName = this.getSupportUserName(credentials);
                        token = this.setCredentials({
                            tenant: tenant.name,
                            user: (supportUserName ? supportUserName + "$" : '') + user.userName
                        }, auth);
                        if (token) {
                            this.storeBasicAuthToken(token);
                        }
                        return [4 /*yield*/, this.authFulfilled(tenant, user, supportUserName)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Saves tenant, user and support user info to the app state.
     * @param tenant The current tenant object.
     * @param user The current user object.
     * @param supportUserName The current support user name.
     */
    LoginService.prototype.authFulfilled = function (tenant, user, supportUserName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!tenant) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.tenant.current()];
                    case 1:
                        data = (_a.sent()).data;
                        tenant = data;
                        this.client.tenant = tenant.name;
                        _a.label = 2;
                    case 2:
                        if (!!user) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.user.current()];
                    case 3:
                        data = (_a.sent()).data;
                        user = data;
                        _a.label = 4;
                    case 4:
                        if (!supportUserName) {
                            supportUserName = null;
                        }
                        this.ui.setUser({ user: user, supportUserName: supportUserName });
                        this.ui.currentTenant.next(tenant);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Switch the login mode to CookieAuth if the
     * user has configured to use it in loginOptions.
     * @param credentials The credentials for that login
     */
    LoginService.prototype.switchLoginMode = function (credentials) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isPasswordGrantLogin, params, urlParams, res, data, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isPasswordGrantLogin = this.isPasswordGrantLogin(credentials);
                        if (!(isPasswordGrantLogin && credentials)) return [3 /*break*/, 6];
                        params = new URLSearchParams({
                            grant_type: 'PASSWORD',
                            username: credentials.user,
                            password: credentials.password,
                            tfa_code: credentials.tfa
                        });
                        urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
                        credentials.tenant = urlParams.get('tenant_id');
                        return [4 /*yield*/, this.client.fetch("tenant/oauth?" + urlParams.toString(), {
                                method: 'POST',
                                body: params.toString(),
                                headers: {
                                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                                }
                            })];
                    case 1:
                        res = _a.sent();
                        if (!!res.ok) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, res.json()];
                    case 3:
                        data = _a.sent();
                        throw { res: res, data: data };
                    case 4:
                        ex_1 = _a.sent();
                        throw ex_1;
                    case 5:
                        this.client.setAuth(this.cookieAuth);
                        this.cleanLocalStorage();
                        this.basicAuth.logout();
                        _a.label = 6;
                    case 6: return [2 /*return*/, isPasswordGrantLogin];
                }
            });
        });
    };
    LoginService.prototype.isPasswordGrantLogin = function (credentials) {
        return !!(!this.isSupportUser(credentials) &&
            this.loginMode &&
            this.loginMode.type === this.OAUTH2_INTERNAL_TYPE);
    };
    /**
     * Verifies if the provided credentials use a support user to log in or not.
     * @param credentials Credentials to check.
     * @returns True if user is a support user.
     */
    LoginService.prototype.isSupportUser = function (credentials) {
        return credentials && credentials.user.includes('$');
    };
    /**
     * Verifies if the tenant input field should be shown
     * or not.
     * @returns If true, show the tenant input.
     */
    LoginService.prototype.showTenant = function () {
        return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
    };
    /**
     * Logs the user out
     * @param reload If set to false, the page will not reload
     */
    LoginService.prototype.logout = function (reload) {
        if (reload === void 0) { reload = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var resData, _a, basicRes, cookieRes, ex_2;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resData = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 6]);
                        return [4 /*yield*/, this.reset()];
                    case 2:
                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), basicRes = _a[0], cookieRes = _a[1];
                        return [4 /*yield*/, cookieRes.json()];
                    case 3:
                        resData = _b.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        ex_2 = _b.sent();
                        this.alert.removeLastDanger();
                        return [3 /*break*/, 6];
                    case 5:
                        if (resData && resData.url) {
                            this.redirect(resData.url);
                        }
                        else if (reload) {
                            this.location.replaceState({}, '', '', '');
                            window.location.reload();
                        }
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resets the stored auth-data
     */
    LoginService.prototype.reset = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.cleanLocalStorage();
                this.cleanSessionStorage();
                this.realtime.disconnect();
                this.ui.currentUser.next(null);
                return [2 /*return*/, Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()])];
            });
        });
    };
    /**
     * Saves the TFA token to local or session storage.
     * @param tfaToken The tfa token to save.
     * @param storage The storage to use (local or session).
     */
    LoginService.prototype.saveTFAToken = function (tfaToken, storage) {
        storage.setItem(this.TFATOKEN_KEY, tfaToken);
    };
    /**
     * Request the manifest -> on 401 user has no access to that application
     * and we throw the error up to the login form.
     */
    LoginService.prototype.verifyAppAccess = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ex_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.ui.loadManifest()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        if (!(ex_3.res && ex_3.res.status === 404 && this.isLocal())) {
                            throw ex_3;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets the tenant to the client and updates the credentials on the
     * auth strategy.
     * @param credentials The name of the tenant.
     * @param authStrategy The authentication strategy used.
     * @return Returns the token if basic auth, otherwise undefined.
     */
    LoginService.prototype.setCredentials = function (credentials, authStrategy) {
        if (credentials.tenant) {
            this.client.tenant = credentials.tenant;
        }
        // Check if a token is already set (case for support user login)
        // if yes -> we just need to update the user, and reuse the token
        // of the support user.
        // Therefore we need to pass user and tenant, to get
        // just the stored token and nothing else (see BasicAuth.ts:31).
        var token = this.basicAuth.updateCredentials({
            tenant: credentials.tenant,
            user: credentials.user
        });
        var newCredentials = tslib_1.__assign({ token: token }, credentials);
        return authStrategy.updateCredentials(newCredentials);
    };
    /**
     * Verifies if the current user is a developer or not.
     * Running on localhost means development mode.
     */
    LoginService.prototype.isLocal = function () {
        var hostname = window.location.hostname;
        return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
    };
    /**
     * Save the token to local or session storage.
     * @param token The token to save.
     * @param storage The storage to use (local or session).
     */
    LoginService.prototype.saveToken = function (token, storage) {
        storage.setItem(this.TOKEN_KEY, token);
    };
    LoginService.prototype.storeBasicAuthToken = function (token) {
        this.saveToken(token, sessionStorage);
        if (this.rememberMe) {
            this.saveToken(token, localStorage);
        }
    };
    LoginService.prototype.cleanLocalStorage = function () {
        localStorage.removeItem(this.TOKEN_KEY);
        localStorage.removeItem(this.TFATOKEN_KEY);
    };
    LoginService.prototype.cleanSessionStorage = function () {
        sessionStorage.removeItem(this.TOKEN_KEY);
        sessionStorage.removeItem(this.TFATOKEN_KEY);
    };
    LoginService.prototype.isShowTenant = function () {
        return this.showTenantRegExp.test(window.location.href);
    };
    LoginService.prototype.redirect = function (url) {
        window.location.href = url;
    };
    LoginService.prototype.getBasicAuthLoginOption = function (refresh) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loginOptions, basicAuthLoginOption;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!refresh) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.ui.refreshLoginOptions()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        loginOptions = this.ui.state.loginOptions || [];
                        basicAuthLoginOption = loginOptions.find(function (_a) {
                            var type = _a.type;
                            return type === 'BASIC';
                        });
                        return [2 /*return*/, Promise.resolve(basicAuthLoginOption)];
                }
            });
        });
    };
    /**
     * Gets support user name from credentials.
     * @param credentials Credentials object (defaults to the stored one).
     * @returns Support user name.
     */
    LoginService.prototype.getSupportUserName = function (credentials) {
        if (credentials === void 0) { credentials = this.getStoredCredentials(); }
        if (!credentials) {
            return null;
        }
        var supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
        return supportUserName;
    };
    /**
     * Gets credentials object from the stored token.
     * @returns Credentials object.
     */
    LoginService.prototype.getStoredCredentials = function () {
        var token = this.getStoredToken();
        if (!token) {
            return null;
        }
        return this.decodeToken(token);
    };
    /**
     * Gets stored token from local storage or session storage.
     * @returns Stored token.
     */
    LoginService.prototype.getStoredToken = function () {
        return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
    };
    /**
     * Gets stored TFA token from local storage or session storage.
     * @returns Stored TFA token.
     */
    LoginService.prototype.getStoredTfaToken = function () {
        return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
    };
    /**
     * Decodes token to credentials object.
     * @param token Token to decode.
     * @returns Credentials object.
     */
    LoginService.prototype.decodeToken = function (token) {
        var decoded = decodeURIComponent(escape(window.atob(token)));
        var split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
        return {
            tenant: split[2],
            user: split[3],
            password: split[4]
        };
    };
    LoginService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: BasicAuth },
        { type: CookieAuth },
        { type: AppStateService },
        { type: UserService },
        { type: TenantService },
        { type: Realtime },
        { type: AlertService },
        { type: ApiService },
        { type: LocationStrategy, decorators: [{ type: Optional }] }
    ]; };
    LoginService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(9, Optional())
    ], LoginService);
    return LoginService;
}());
export { LoginService };
//# sourceMappingURL=data:application/json;base64,