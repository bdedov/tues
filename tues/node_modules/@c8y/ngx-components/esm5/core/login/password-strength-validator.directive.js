import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { StrengthValidatorService } from './strength-validator-service';
var PasswordStrengthValidatorDirective = /** @class */ (function () {
    function PasswordStrengthValidatorDirective(passwordService) {
        this.passwordService = passwordService;
    }
    PasswordStrengthValidatorDirective_1 = PasswordStrengthValidatorDirective;
    Object.defineProperty(PasswordStrengthValidatorDirective.prototype, "passwordStrengthEnforced", {
        set: function (value) {
            this.forced = value;
        },
        enumerable: true,
        configurable: true
    });
    PasswordStrengthValidatorDirective.prototype.validate = function (control) {
        var strengthFulfilled = this.passwordService.isStrong(control.value || '');
        var enforcementForcedAndNotFulfilled = this.forced && !strengthFulfilled;
        return enforcementForcedAndNotFulfilled ? { passwordStrength: true } : null;
    };
    var PasswordStrengthValidatorDirective_1;
    PasswordStrengthValidatorDirective.ctorParameters = function () { return [
        { type: StrengthValidatorService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], PasswordStrengthValidatorDirective.prototype, "passwordStrengthEnforced", null);
    PasswordStrengthValidatorDirective = PasswordStrengthValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[passwordStrengthEnforced]',
            providers: [{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective_1, multi: true }]
        })
    ], PasswordStrengthValidatorDirective);
    return PasswordStrengthValidatorDirective;
}());
export { PasswordStrengthValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xvZ2luL3Bhc3N3b3JkLXN0cmVuZ3RoLXZhbGlkYXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBbUIsYUFBYSxFQUErQixNQUFNLGdCQUFnQixDQUFDO0FBQzdGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTXhFO0lBUUUsNENBQ1MsZUFBeUM7UUFBekMsb0JBQWUsR0FBZixlQUFlLENBQTBCO0lBQ2xELENBQUM7MkNBVlUsa0NBQWtDO0lBSXBDLHNCQUFJLHdFQUF3QjthQUE1QixVQUE2QixLQUFLO1lBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBTUQscURBQVEsR0FBUixVQUFTLE9BQXdCO1FBQy9CLElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFNLGdDQUFnQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUMzRSxPQUFPLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUUsQ0FBQzs7O2dCQVB5Qix3QkFBd0I7O0lBTHpDO1FBQVIsS0FBSyxFQUFFO3NGQUVQO0lBTlUsa0NBQWtDO1FBSjlDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw0QkFBNEI7WUFDdEMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxvQ0FBa0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDdEcsQ0FBQztPQUNXLGtDQUFrQyxDQWtCOUM7SUFBRCx5Q0FBQztDQUFBLEFBbEJELElBa0JDO1NBbEJZLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3RyZW5ndGhWYWxpZGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zdHJlbmd0aC12YWxpZGF0b3Itc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twYXNzd29yZFN0cmVuZ3RoRW5mb3JjZWRdJyxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogUGFzc3dvcmRTdHJlbmd0aFZhbGlkYXRvckRpcmVjdGl2ZSwgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTdHJlbmd0aFZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG5cbiAgcHJpdmF0ZSBmb3JjZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgc2V0IHBhc3N3b3JkU3RyZW5ndGhFbmZvcmNlZCh2YWx1ZSkge1xuICAgIHRoaXMuZm9yY2VkID0gdmFsdWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGFzc3dvcmRTZXJ2aWNlOiBTdHJlbmd0aFZhbGlkYXRvclNlcnZpY2UpIHtcbiAgfVxuXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBjb25zdCBzdHJlbmd0aEZ1bGZpbGxlZCA9IHRoaXMucGFzc3dvcmRTZXJ2aWNlLmlzU3Ryb25nKGNvbnRyb2wudmFsdWUgfHwgJycpO1xuICAgIGNvbnN0IGVuZm9yY2VtZW50Rm9yY2VkQW5kTm90RnVsZmlsbGVkID0gdGhpcy5mb3JjZWQgJiYgIXN0cmVuZ3RoRnVsZmlsbGVkO1xuICAgIHJldHVybiBlbmZvcmNlbWVudEZvcmNlZEFuZE5vdEZ1bGZpbGxlZCA/IHsgcGFzc3dvcmRTdHJlbmd0aDogdHJ1ZSB9IDogbnVsbDtcbiAgfVxuXG59XG4iXX0=