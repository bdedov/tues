import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { UserService } from '@c8y/client';
import { LoginService } from './login.service';
import { LoginViews } from './login.model';
var RecoverPasswordComponent = /** @class */ (function () {
    function RecoverPasswordComponent(users, loginService) {
        this.users = users;
        this.loginService = loginService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.isLoading = false;
        this.model = {
            email: '',
            tenantId: ''
        };
    }
    RecoverPasswordComponent.prototype.ngOnInit = function () {
        this.model.tenantId = this.loginService.getTenant();
    };
    RecoverPasswordComponent.prototype.resetPassword = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        this.isLoading = true;
                        return [4 /*yield*/, this.users.sendPasswordResetMail(this.model.email, this.model.tenantId)];
                    case 1:
                        res = (_a.sent()).res;
                        if (res.status === 200) {
                            this.loginService.addSuccessMessage('password_reset_requested');
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        this.loginService.reset();
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecoverPasswordComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: LoginService }
    ]; };
    tslib_1.__decorate([
        Output()
    ], RecoverPasswordComponent.prototype, "onChangeView", void 0);
    RecoverPasswordComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-recover-password',
            template: "<form #resetForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n  <div class=\"legend form-block center\" translate>Forgot password?</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Reset password' | translate }}\"\n    [disabled]=\"!resetForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Reset password\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <p>\n      <a\n        title=\"{{ 'Login' | translate }}\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.Credentials })\"\n        translate\n        >Login</a\n      >\n    </p>\n  </div>\n</form>\n"
        })
    ], RecoverPasswordComponent);
    return RecoverPasswordComponent;
}());
export { RecoverPasswordComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3Zlci1wYXNzd29yZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9sb2dpbi9yZWNvdmVyLXBhc3N3b3JkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRM0M7SUFVRSxrQ0FDVSxLQUFrQixFQUNuQixZQUEwQjtRQUR6QixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBVnpCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1QyxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUN6QixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFVBQUssR0FBRztZQUNOLEtBQUssRUFBRSxFQUFFO1lBQ1QsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO0lBS0YsQ0FBQztJQUVELDJDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFFSyxnREFBYSxHQUFuQjs7Ozs7Ozt3QkFFSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzt3QkFDTixxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUE7O3dCQUFyRixHQUFHLEdBQUssQ0FBQSxTQUE2RSxDQUFBLElBQWxGO3dCQUNYLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7NEJBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQzt5QkFDakU7Ozt3QkFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQzs7Ozs7O0tBRTFCOztnQkFuQmdCLFdBQVc7Z0JBQ0wsWUFBWTs7SUFWekI7UUFBVCxNQUFNLEVBQUU7a0VBQW1DO0lBRmpDLHdCQUF3QjtRQU5wQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLGlpREFBZ0Q7U0FFakQsQ0FBQztPQUVXLHdCQUF3QixDQWdDcEM7SUFBRCwrQkFBQztDQUFBLEFBaENELElBZ0NDO1NBaENZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5WaWV3cyB9IGZyb20gJy4vbG9naW4ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcmVjb3Zlci1wYXNzd29yZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9yZWNvdmVyLXBhc3N3b3JkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcblxuZXhwb3J0IGNsYXNzIFJlY292ZXJQYXNzd29yZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQE91dHB1dCgpIG9uQ2hhbmdlVmlldyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgTE9HSU5fVklFV1MgPSBMb2dpblZpZXdzO1xuICBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgbW9kZWwgPSB7XG4gICAgZW1haWw6ICcnLFxuICAgIHRlbmFudElkOiAnJ1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdXNlcnM6IFVzZXJTZXJ2aWNlLFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tb2RlbC50ZW5hbnRJZCA9IHRoaXMubG9naW5TZXJ2aWNlLmdldFRlbmFudCgpO1xuICB9XG5cbiAgYXN5bmMgcmVzZXRQYXNzd29yZCgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgeyByZXMgfSA9IGF3YWl0IHRoaXMudXNlcnMuc2VuZFBhc3N3b3JkUmVzZXRNYWlsKHRoaXMubW9kZWwuZW1haWwsIHRoaXMubW9kZWwudGVuYW50SWQpO1xuICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICB0aGlzLmxvZ2luU2VydmljZS5hZGRTdWNjZXNzTWVzc2FnZSgncGFzc3dvcmRfcmVzZXRfcmVxdWVzdGVkJyk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMubG9naW5TZXJ2aWNlLnJlc2V0KCk7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=