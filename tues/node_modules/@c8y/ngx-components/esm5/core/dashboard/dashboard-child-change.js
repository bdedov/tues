import * as tslib_1 from "tslib";
import { sortBy } from 'lodash-es';
import { pipe } from 'rxjs';
import { distinctUntilChanged, expand, filter, map, tap } from 'rxjs/operators';
var DashboardChildChange = /** @class */ (function () {
    function DashboardChildChange(childToChange) {
        this.MIN_WIDTH = 2;
        this.MIN_HEIGHT = 1;
        this.PIXEL_SIZE_THRESHOLD = 10;
        this.diffX = 0;
        this.diffY = 0;
        this.dashboard = childToChange.dashboard;
        this.children = childToChange.dashboard.children
            ? childToChange.dashboard.children.filter(function (child) { return childToChange !== child; })
            : [];
        this.child = childToChange;
    }
    Object.defineProperty(DashboardChildChange.prototype, "resize$", {
        get: function () {
            var _this = this;
            return this.child.dragSource.moved.pipe(map(function (move) { return _this.getPixelSize(move); }), tap(function (resizeDimension) { return _this.setPixelSize(resizeDimension); }), map(function (resizeDimension) { return _this.getDimensionSize(resizeDimension); }), distinctUntilChanged(function (prev, next) { return prev.width === next.width && prev.height === next.height; }), map(function (dimension) { return _this.setDimension(dimension); }), this.arrangePipe());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardChildChange.prototype, "drag$", {
        get: function () {
            var _this = this;
            return this.child.dragSource.moved.pipe(map(function (move) { return _this.getDimensionPosition(move); }), filter(function (dimension) {
                return dimension.x >= 0 &&
                    dimension.x <= _this.dashboard.columns - _this.child.width &&
                    dimension.y >= 0;
            }), distinctUntilChanged(function (prev, next) { return prev.x === next.x && prev.y === next.y; }), this.arrangePipe());
        },
        enumerable: true,
        configurable: true
    });
    DashboardChildChange.prototype.findFreeDimension = function () {
        var y = -1;
        var x = 0;
        var found = false;
        var _a = this.child, width = _a.width, height = _a.height;
        if (width > this.dashboard.columns) {
            throw new Error('The child does not fit on the current dashboard.');
        }
        do {
            x = 0;
            y++;
            while (x + width <= this.dashboard.columns) {
                if (this.getCollided({ x: x, y: y, width: width, height: height }).length === 0) {
                    found = true;
                    break;
                }
                x++;
            }
        } while (!found);
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.collapseUpAll = function () {
        return sortBy(tslib_1.__spread([this.child], this.children), ['y']).forEach(function (w) {
            var ds = new DashboardChildChange(w);
            var newPosition = ds.collapseUp(w);
            ds.setDimension(newPosition);
        });
    };
    DashboardChildChange.prototype.arrangeAll = function (arrange) {
        var current = arrange.current, scan = arrange.scan, spacing = arrange.spacing, origin = arrange.origin;
        var collided = this.getCollided(current, sortBy(scan, ['y']));
        return collided.map(function (child) {
            var ds = new DashboardChildChange(child);
            ds.setDimension(tslib_1.__assign({}, child, { y: spacing }));
            return {
                current: child,
                scan: scan.filter(function (w) { return w !== child; }),
                spacing: child.y + child.height,
                origin: origin
            };
        });
    };
    DashboardChildChange.prototype.arrangePipe = function () {
        var _this = this;
        return pipe(map(function (dimension) {
            return ({
                current: dimension,
                scan: _this.children,
                spacing: dimension.y + dimension.height,
                origin: tslib_1.__assign({}, dimension)
            });
        }), expand(function (dimensions) { return _this.arrangeAll(dimensions); }), map(function (_a) {
            var origin = _a.origin;
            return origin;
        }), map(function (dimension) { return _this.setDimension(dimension, true); }), tap(function () { return _this.collapseUpAll(); }), tap(function () { return _this.dashboard.getLastRow(); }));
    };
    DashboardChildChange.prototype.collapseUp = function (dimension) {
        var y = dimension.y;
        while (y > 0) {
            if (this.getCollided(tslib_1.__assign({}, dimension, { y: y - 1 })).length !== 0) {
                break;
            }
            y--;
        }
        return tslib_1.__assign({}, dimension, { y: y });
    };
    DashboardChildChange.prototype.setDimension = function (dimension, notIfColliding) {
        if (notIfColliding === void 0) { notIfColliding = false; }
        if (notIfColliding && this.getCollided(dimension).length > 0) {
            return;
        }
        this.child.x = dimension.x;
        this.child.y = dimension.y;
        if (dimension.width >= this.MIN_WIDTH &&
            dimension.x + dimension.width <= this.dashboard.columns) {
            this.child.width = dimension.width;
        }
        else if (dimension.width < this.MIN_WIDTH) {
            dimension.width = this.MIN_WIDTH;
        }
        else {
            dimension.width = this.dashboard.columns - dimension.x;
        }
        if (dimension.height >= this.MIN_HEIGHT) {
            this.child.height = dimension.height;
        }
        else {
            dimension.height = this.MIN_WIDTH;
        }
        return dimension;
    };
    DashboardChildChange.prototype.setPixelSize = function (_a) {
        var width = _a.width, height = _a.height;
        if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
            this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
        }
        if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
            this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
        }
    };
    DashboardChildChange.prototype.getPixelSize = function (moveEvent) {
        var draggedElement = moveEvent.source.element.nativeElement.parentNode;
        if (!this.diffX) {
            var rect = draggedElement.getBoundingClientRect();
            this.diffX = rect.left;
            this.diffY = rect.top;
        }
        var _a = moveEvent.pointerPosition, x = _a.x, y = _a.y;
        var width = Math.round(x - this.diffX);
        var height = Math.round(y - this.diffY);
        return { width: width, height: height, pointer: { x: x, y: y } };
    };
    DashboardChildChange.prototype.getDimensionSize = function (resizePosition) {
        var _a = this.child, x = _a.x, y = _a.y;
        var ds = this.dashboard.dashboardRect;
        var column = this.dashboard.columnSize;
        var row = this.dashboard.rowSize + this.dashboard.gap;
        var width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
        var height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.getDimensionPosition = function (moveEvent) {
        var draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
        if (!this.diffX) {
            var rect = draggedElement.getBoundingClientRect();
            this.diffX = moveEvent.pointerPosition.x - rect.left;
            this.diffY = moveEvent.pointerPosition.y - rect.top;
        }
        var left = moveEvent.pointerPosition.x - this.diffX;
        var top = moveEvent.pointerPosition.y - this.diffY;
        var _a = this.child, width = _a.width, height = _a.height;
        var ds = this.dashboard.dashboardRect;
        var column = this.dashboard.columnSize;
        var row = this.dashboard.rowSize + this.dashboard.gap / 2;
        var x = Math.round((left - ds.left) / column);
        var y = Math.round((top - ds.top) / row);
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.doesCollide = function (a, b) {
        if (b.x === undefined) {
            return false;
        }
        return !(a.y + a.height - 1 < b.y ||
            a.y > b.y + b.height - 1 ||
            a.x + a.width - 1 < b.x ||
            a.x > b.x + b.width - 1);
    };
    DashboardChildChange.prototype.getCollided = function (currentDimension, dimensions) {
        var _this = this;
        if (dimensions === void 0) { dimensions = this.children; }
        var collided = dimensions.filter(function (dimension) { return _this.doesCollide(currentDimension, dimension); });
        return collided;
    };
    return DashboardChildChange;
}());
export { DashboardChildChange };
//# sourceMappingURL=data:application/json;base64,