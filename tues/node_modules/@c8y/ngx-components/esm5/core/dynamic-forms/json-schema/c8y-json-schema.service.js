import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
var C8yJSONSchema = /** @class */ (function (_super) {
    tslib_1.__extends(C8yJSONSchema, _super);
    function C8yJSONSchema() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    C8yJSONSchema.prototype.toFieldConfig = function (schema, options) {
        return _super.prototype.toFieldConfig.call(this, schema, this.c8yOptions((options || {}).map));
    };
    C8yJSONSchema.prototype.c8yOptions = function (map) {
        return {
            map: function (mappedField, mapSource) {
                var result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = tslib_1.__assign({}, result, { defaultValue: mapSource.const, templateOptions: tslib_1.__assign({}, result.templateOptions, { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = tslib_1.__assign({}, result, { templateOptions: tslib_1.__assign({}, result.templateOptions, { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = tslib_1.__assign({}, result, { templateOptions: tslib_1.__assign({}, result.templateOptions, { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = tslib_1.__assign({}, result, { type: 'radio' });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    };
    C8yJSONSchema = tslib_1.__decorate([
        Injectable()
    ], C8yJSONSchema);
    return C8yJSONSchema;
}(FormlyJsonschema));
export { C8yJSONSchema };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzh5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2pzb24tc2NoZW1hL2M4eS1qc29uLXNjaGVtYS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBS2hFO0lBQW1DLHlDQUFnQjtJQUFuRDs7SUFvREEsQ0FBQztJQW5EQyxxQ0FBYSxHQUFiLFVBQWMsTUFBbUIsRUFBRSxPQUFpQztRQUNsRSxPQUFPLGlCQUFNLGFBQWEsWUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTyxrQ0FBVSxHQUFsQixVQUNFLEdBQWtGO1FBRWxGLE9BQU87WUFDTCxHQUFHLEVBQUgsVUFBSSxXQUE4QixFQUFFLFNBQXNCO2dCQUN4RCxJQUFJLE1BQU0sR0FBc0IsV0FBVyxDQUFDO2dCQUU1QyxrREFBa0Q7Z0JBQ2xELElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtvQkFDbkIsTUFBTSx3QkFDRCxNQUFNLElBQ1QsWUFBWSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQzdCLGVBQWUsdUJBQU8sTUFBTSxDQUFDLGVBQWUsSUFBRSxJQUFJLEVBQUUsUUFBUSxNQUM3RCxDQUFDO2lCQUNIO2dCQUVELHNEQUFzRDtnQkFDdEQsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO29CQUN2QixNQUFNLHdCQUNELE1BQU0sSUFDVCxlQUFlLHVCQUFPLE1BQU0sQ0FBQyxlQUFlLElBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxNQUNwRixDQUFDO2lCQUNIO2dCQUVELDRDQUE0QztnQkFDNUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO29CQUN0QixNQUFNLHdCQUNELE1BQU0sSUFDVCxlQUFlLHVCQUNWLE1BQU0sQ0FBQyxlQUFlLElBQ3pCLFdBQVcsRUFBRyxTQUFTLENBQUMsUUFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BRTNELENBQUM7aUJBQ0g7Z0JBRUQscURBQXFEO2dCQUNyRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0sd0JBQ0QsTUFBTSxJQUNULElBQUksRUFBRSxPQUFPLEdBQ2QsQ0FBQztpQkFDSDtnQkFFRCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQy9DLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQW5EVSxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWEsQ0FvRHpCO0lBQUQsb0JBQUM7Q0FBQSxBQXBERCxDQUFtQyxnQkFBZ0IsR0FvRGxEO1NBcERZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5SnNvbnNjaGVtYSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUvanNvbi1zY2hlbWEnO1xuaW1wb3J0IHsgRm9ybWx5SnNvbnNjaGVtYU9wdGlvbnMgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hL2Zvcm1seS1qc29uLXNjaGVtYS5zZXJ2aWNlJztcbmltcG9ydCB7IEpTT05TY2hlbWE3IH0gZnJvbSAnanNvbi1zY2hlbWEnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQzh5SlNPTlNjaGVtYSBleHRlbmRzIEZvcm1seUpzb25zY2hlbWEge1xuICB0b0ZpZWxkQ29uZmlnKHNjaGVtYTogSlNPTlNjaGVtYTcsIG9wdGlvbnM/OiBGb3JtbHlKc29uc2NoZW1hT3B0aW9ucyk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICByZXR1cm4gc3VwZXIudG9GaWVsZENvbmZpZyhzY2hlbWEsIHRoaXMuYzh5T3B0aW9ucygob3B0aW9ucyB8fCB7fSkubWFwKSk7XG4gIH1cblxuICBwcml2YXRlIGM4eU9wdGlvbnMoXG4gICAgbWFwOiAobWFwcGVkRmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBtYXBTb3VyY2U6IEpTT05TY2hlbWE3KSA9PiBGb3JtbHlGaWVsZENvbmZpZ1xuICApOiBGb3JtbHlKc29uc2NoZW1hT3B0aW9ucyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcChtYXBwZWRGaWVsZDogRm9ybWx5RmllbGRDb25maWcsIG1hcFNvdXJjZTogSlNPTlNjaGVtYTcpIHtcbiAgICAgICAgbGV0IHJlc3VsdDogRm9ybWx5RmllbGRDb25maWcgPSBtYXBwZWRGaWVsZDtcblxuICAgICAgICAvKiogYGNvbnN0YCB0eXBlIGlzIHJlcHJlc2VudGVkIGFzIGhpZGRlbiBpbnB1dCAqL1xuICAgICAgICBpZiAobWFwU291cmNlLmNvbnN0KSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBtYXBTb3VyY2UuY29uc3QsXG4gICAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHsgLi4ucmVzdWx0LnRlbXBsYXRlT3B0aW9ucywgdHlwZTogJ2hpZGRlbicgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogYHdyaXRlT25seWAgZmllbGQgcmVwcmVzZW50ZWQgYXMgcGFzc3dvcmQgaW5wdXQgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS53cml0ZU9ubHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHsgLi4ucmVzdWx0LnRlbXBsYXRlT3B0aW9ucywgdHlwZTogJ3Bhc3N3b3JkJywgYXV0b2NvbXBsZXRlOiAnb2ZmJyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBgZXhhbXBsZXNgIHZhbHVlcyB1c2VkIGFzIHBsYWNlaG9sZGVyICovXG4gICAgICAgIGlmIChtYXBTb3VyY2UuZXhhbXBsZXMpIHtcbiAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgLi4ucmVzdWx0LnRlbXBsYXRlT3B0aW9ucyxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IChtYXBTb3VyY2UuZXhhbXBsZXMgYXMgc3RyaW5nW10pLmpvaW4oJywgJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIGBlbnVtYCBmaWVsZCByZXByZXNlbnRlZCBhcyByYWRpbyBidXR0b24gZ3JvdXAgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS5lbnVtKSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdHlwZTogJ3JhZGlvJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwID8gbWFwKHJlc3VsdCwgbWFwU291cmNlKSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iXX0=