import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { TranslateModule } from '@ngx-translate/core';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { FormsModule } from '../forms/index';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
export var FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(function (type) { return type['CONFIG']; }).reduce(function (formlyConfig, typeConfig) {
        return (tslib_1.__assign({}, formlyConfig, { types: tslib_1.__spread(formlyConfig.types, (typeConfig.types || [])), wrappers: tslib_1.__spread(formlyConfig.wrappers, (typeConfig.wrappers || [])) }));
    }, { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
var DynamicFormsUIThemeModule = /** @class */ (function () {
    function DynamicFormsUIThemeModule() {
    }
    DynamicFormsUIThemeModule = tslib_1.__decorate([
        NgModule({
            declarations: tslib_1.__spread(FIELD_TYPES),
            entryComponents: tslib_1.__spread(FIELD_TYPES),
            imports: [
                CommonModule,
                PopoverModule,
                ReactiveFormsModule,
                TranslateModule,
                FormsModule,
                FormlyModule,
                FormlySelectModule
            ],
            providers: [
                {
                    provide: FORMLY_CONFIG,
                    useFactory: fieldTypeFactory,
                    multi: true
                }
            ]
        })
    ], DynamicFormsUIThemeModule);
    return DynamicFormsUIThemeModule;
}());
export { DynamicFormsUIThemeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMtdWktdGhlbWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQTJCLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUxRCxNQUFNLENBQUMsSUFBTSxXQUFXLEdBQTJCO0lBQ2pELGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixVQUFVO0lBQ1YsbUJBQW1CO0NBQ3BCLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLDZDQUE2QztJQUM3QyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQWQsQ0FBYyxDQUFDLENBQUMsTUFBTSxDQUNuRCxVQUFDLFlBQTBCLEVBQUUsVUFBd0I7UUFDbkQsT0FBQSxDQUFDLHFCQUNJLFlBQVksSUFDZixLQUFLLG1CQUFNLFlBQVksQ0FBQyxLQUFLLEVBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUMxRCxRQUFRLG1CQUFNLFlBQVksQ0FBQyxRQUFRLEVBQUssQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxJQUNuRCxDQUFBO0lBSmxCLENBSWtCLEVBQ3BCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQzVCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQXFCSDtJQUFBO0lBQXdDLENBQUM7SUFBNUIseUJBQXlCO1FBcEJyQyxRQUFRLENBQUM7WUFDUixZQUFZLG1CQUFNLFdBQVcsQ0FBQztZQUM5QixlQUFlLG1CQUFNLFdBQVcsQ0FBQztZQUNqQyxPQUFPLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixhQUFhO2dCQUNiLG1CQUFtQjtnQkFDbkIsZUFBZTtnQkFDZixXQUFXO2dCQUNYLFlBQVk7Z0JBQ1osa0JBQWtCO2FBQ25CO1lBQ0QsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxhQUFhO29CQUN0QixVQUFVLEVBQUUsZ0JBQWdCO29CQUM1QixLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGO1NBQ0YsQ0FBQztPQUNXLHlCQUF5QixDQUFHO0lBQUQsZ0NBQUM7Q0FBQSxBQUF6QyxJQUF5QztTQUE1Qix5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb25maWdPcHRpb24sIEZpZWxkVHlwZSwgRm9ybWx5TW9kdWxlLCBGT1JNTFlfQ09ORklHIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlTZWxlY3RNb2R1bGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlL3NlbGVjdCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICcuLi9mb3Jtcy9pbmRleCc7XG5pbXBvcnQgeyBBcnJheVR5cGVDb21wb25lbnQgfSBmcm9tICcuL2FycmF5L2FycmF5LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkQ2hlY2tib3ggfSBmcm9tICcuL2NoZWNrYm94L2NoZWNrYm94LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IFdyYXBwZXJGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQvZm9ybS1maWVsZC53cmFwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZElucHV0IH0gZnJvbSAnLi9pbnB1dC9pbnB1dC50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPYmplY3RUeXBlQ29tcG9uZW50IH0gZnJvbSAnLi9vYmplY3Qvb2JqZWN0LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkUmFkaW8gfSBmcm9tICcuL3JhZGlvL3JhZGlvLnR5cGUuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IEZJRUxEX1RZUEVTOiBBcnJheTxUeXBlPEZpZWxkVHlwZT4+ID0gW1xuICBGaWVsZENoZWNrYm94LFxuICBBcnJheVR5cGVDb21wb25lbnQsXG4gIFdyYXBwZXJGb3JtRmllbGQsXG4gIEZpZWxkSW5wdXQsXG4gIEZpZWxkUmFkaW8sXG4gIE9iamVjdFR5cGVDb21wb25lbnRcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWVsZFR5cGVGYWN0b3J5KCkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc3RyaW5nLWxpdGVyYWxcbiAgcmV0dXJuIEZJRUxEX1RZUEVTLm1hcCh0eXBlID0+IHR5cGVbJ0NPTkZJRyddKS5yZWR1Y2UoXG4gICAgKGZvcm1seUNvbmZpZzogQ29uZmlnT3B0aW9uLCB0eXBlQ29uZmlnOiBDb25maWdPcHRpb24pID0+XG4gICAgICAoe1xuICAgICAgICAuLi5mb3JtbHlDb25maWcsXG4gICAgICAgIHR5cGVzOiBbLi4uZm9ybWx5Q29uZmlnLnR5cGVzLCAuLi4odHlwZUNvbmZpZy50eXBlcyB8fCBbXSldLFxuICAgICAgICB3cmFwcGVyczogWy4uLmZvcm1seUNvbmZpZy53cmFwcGVycywgLi4uKHR5cGVDb25maWcud3JhcHBlcnMgfHwgW10pXVxuICAgICAgfSBhcyBDb25maWdPcHRpb24pLFxuICAgIHsgdHlwZXM6IFtdLCB3cmFwcGVyczogW10gfVxuICApO1xufVxuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGRlY2xhcmVzIGZpZWxkIHR5cGUgY29tcG9uZW50cyBmb3IgZHluYW1pYyBmb3JtcyB0aGF0IG1hdGNoIEM4WSBzdHlsZWd1aWRlLlxuICpcbiAqIEBkeW5hbWljXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWy4uLkZJRUxEX1RZUEVTXSxcbiAgZW50cnlDb21wb25lbnRzOiBbLi4uRklFTERfVFlQRVNdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFBvcG92ZXJNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBUcmFuc2xhdGVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgRm9ybWx5TW9kdWxlLFxuICAgIEZvcm1seVNlbGVjdE1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBGT1JNTFlfQ09ORklHLFxuICAgICAgdXNlRmFjdG9yeTogZmllbGRUeXBlRmFjdG9yeSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNGb3Jtc1VJVGhlbWVNb2R1bGUge31cbiJdfQ==