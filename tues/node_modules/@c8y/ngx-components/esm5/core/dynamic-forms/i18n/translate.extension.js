import * as tslib_1 from "tslib";
import { combineLatest, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { gettext } from '../../i18n';
var TranslateExtension = /** @class */ (function () {
    function TranslateExtension(translate, parser) {
        this.translate = translate;
        this.parser = parser;
    }
    TranslateExtension.prototype.prePopulate = function (field) {
        var _this = this;
        var to = field.templateOptions || {};
        if (!to.label || to._translated) {
            return;
        }
        to._translated = true;
        field.expressionProperties = tslib_1.__assign({}, (field.expressionProperties || {}), { 'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label, 'templateOptions.description': to.description
                ? this.translate.stream(to.description)
                : to.description, 'templateOptions.placeholder': to.placeholder
                ? combineLatest([
                    this.translate.stream(to.placeholder),
                    this.translate.stream(gettext('e.g. {{ example }}'))
                ]).pipe(map(function (_a) {
                    var _b = tslib_1.__read(_a, 2), placeholder = _b[0], expression = _b[1];
                    return _this.parser.interpolate(expression, { example: placeholder });
                }))
                : to.placeholder, 'templateOptions.options': (isObservable(to.options) ? to.options : of(to.options)).pipe(map(function (options) {
                return (options || []).map(function (option) { return (tslib_1.__assign({}, option, { label: _this.translate.instant(option.label) })); });
            })) });
    };
    return TranslateExtension;
}());
export { TranslateExtension };
export function registerTranslateExtension(translate, parser) {
    return {
        extensions: [
            {
                name: 'translate',
                extension: new TranslateExtension(translate, parser)
            }
        ]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2R5bmFtaWMtZm9ybXMvaTE4bi90cmFuc2xhdGUuZXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckM7SUFDRSw0QkFBb0IsU0FBMkIsRUFBVSxNQUF1QjtRQUE1RCxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQUcsQ0FBQztJQUNwRix3Q0FBVyxHQUFYLFVBQVksS0FBd0I7UUFBcEMsaUJBOEJDO1FBN0JDLElBQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsT0FBTztTQUNSO1FBRUQsRUFBRSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdEIsS0FBSyxDQUFDLG9CQUFvQix3QkFDckIsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDLElBQ3JDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFDOUUsNkJBQTZCLEVBQUUsRUFBRSxDQUFDLFdBQVc7Z0JBQzNDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDO2dCQUN2QyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFDbEIsNkJBQTZCLEVBQUUsRUFBRSxDQUFDLFdBQVc7Z0JBQzNDLENBQUMsQ0FBQyxhQUFhLENBQUM7b0JBQ1osSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQztvQkFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7aUJBQ3JELENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLFVBQUMsRUFBeUI7d0JBQXpCLDBCQUF5QixFQUF4QixtQkFBVyxFQUFFLGtCQUFVO29CQUFNLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO2dCQUE3RCxDQUE2RCxDQUFDLENBQ2xHO2dCQUNILENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUNsQix5QkFBeUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RGLEdBQUcsQ0FBQyxVQUFDLE9BQWlDO2dCQUNwQyxPQUFBLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLHNCQUN6QixNQUFNLElBQ1QsS0FBSyxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFDM0MsRUFINEIsQ0FHNUIsQ0FBQztZQUhILENBR0csQ0FDSixDQUNGLEdBQ0YsQ0FBQztJQUNKLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0M7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFNBQTJCLEVBQUUsTUFBdUI7SUFDN0YsT0FBTztRQUNMLFVBQVUsRUFBRTtZQUNWO2dCQUNFLElBQUksRUFBRSxXQUFXO2dCQUNqQixTQUFTLEVBQUUsSUFBSSxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDO2FBQ3JEO1NBQ0Y7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVQYXJzZXIsIFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIGlzT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi8uLi9pMThuJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUV4dGVuc2lvbiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBwcml2YXRlIHBhcnNlcjogVHJhbnNsYXRlUGFyc2VyKSB7fVxuICBwcmVQb3B1bGF0ZShmaWVsZDogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBjb25zdCB0byA9IGZpZWxkLnRlbXBsYXRlT3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIXRvLmxhYmVsIHx8IHRvLl90cmFuc2xhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG8uX3RyYW5zbGF0ZWQgPSB0cnVlO1xuICAgIGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzID0ge1xuICAgICAgLi4uKGZpZWxkLmV4cHJlc3Npb25Qcm9wZXJ0aWVzIHx8IHt9KSxcbiAgICAgICd0ZW1wbGF0ZU9wdGlvbnMubGFiZWwnOiB0by5sYWJlbCA/IHRoaXMudHJhbnNsYXRlLnN0cmVhbSh0by5sYWJlbCkgOiB0by5sYWJlbCxcbiAgICAgICd0ZW1wbGF0ZU9wdGlvbnMuZGVzY3JpcHRpb24nOiB0by5kZXNjcmlwdGlvblxuICAgICAgICA/IHRoaXMudHJhbnNsYXRlLnN0cmVhbSh0by5kZXNjcmlwdGlvbilcbiAgICAgICAgOiB0by5kZXNjcmlwdGlvbixcbiAgICAgICd0ZW1wbGF0ZU9wdGlvbnMucGxhY2Vob2xkZXInOiB0by5wbGFjZWhvbGRlclxuICAgICAgICA/IGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUuc3RyZWFtKHRvLnBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlLnN0cmVhbShnZXR0ZXh0KCdlLmcuIHt7IGV4YW1wbGUgfX0nKSlcbiAgICAgICAgICBdKS5waXBlKFxuICAgICAgICAgICAgbWFwKChbcGxhY2Vob2xkZXIsIGV4cHJlc3Npb25dKSA9PiB0aGlzLnBhcnNlci5pbnRlcnBvbGF0ZShleHByZXNzaW9uLCB7IGV4YW1wbGU6IHBsYWNlaG9sZGVyIH0pKVxuICAgICAgICAgIClcbiAgICAgICAgOiB0by5wbGFjZWhvbGRlcixcbiAgICAgICd0ZW1wbGF0ZU9wdGlvbnMub3B0aW9ucyc6IChpc09ic2VydmFibGUodG8ub3B0aW9ucykgPyB0by5vcHRpb25zIDogb2YodG8ub3B0aW9ucykpLnBpcGUoXG4gICAgICAgIG1hcCgob3B0aW9uczogQXJyYXk8eyBsYWJlbDogc3RyaW5nIH0+KSA9PlxuICAgICAgICAgIChvcHRpb25zIHx8IFtdKS5tYXAob3B0aW9uID0+ICh7XG4gICAgICAgICAgICAuLi5vcHRpb24sXG4gICAgICAgICAgICBsYWJlbDogdGhpcy50cmFuc2xhdGUuaW5zdGFudChvcHRpb24ubGFiZWwpXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclRyYW5zbGF0ZUV4dGVuc2lvbih0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsIHBhcnNlcjogVHJhbnNsYXRlUGFyc2VyKSB7XG4gIHJldHVybiB7XG4gICAgZXh0ZW5zaW9uczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAndHJhbnNsYXRlJyxcbiAgICAgICAgZXh0ZW5zaW9uOiBuZXcgVHJhbnNsYXRlRXh0ZW5zaW9uKHRyYW5zbGF0ZSwgcGFyc2VyKVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cbiJdfQ==