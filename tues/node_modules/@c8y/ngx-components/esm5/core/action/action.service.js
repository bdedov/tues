import * as tslib_1 from "tslib";
import { Injector, Injectable, InjectionToken } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { StateService } from '../common/state-service.abstract';
import { fromTrigger, stateToFactory, sortByPriority } from '../common/extension-hooks';
import { map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * A hook to use for Multi Provider extension.
 */
export var HOOK_ACTION = new InjectionToken('ActionFactory');
/**
 * A service which defines global actions.
 */
var ActionService = /** @class */ (function (_super) {
    tslib_1.__extends(ActionService, _super);
    function ActionService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_ACTION, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (items) { return sortByPriority(items); }), shareReplay(1));
        return _this;
    }
    /**
     * Refresh the extension factories
     */
    ActionService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(ActionService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the actions in the header and emits a state change.
     * @param item The item to add.
     */
    ActionService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an action from the header and emits a state change.
     * @param item The item to remove.
     */
    ActionService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    ActionService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    ActionService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ActionService_Factory() { return new ActionService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: ActionService, providedIn: "root" });
    ActionService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ActionService);
    return ActionService;
}(StateService));
export { ActionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hY3Rpb24vYWN0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRWhFLE9BQU8sRUFDTCxXQUFXLEVBRVgsY0FBYyxFQUNkLGNBQWMsRUFDZixNQUFNLDJCQUEyQixDQUFDO0FBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUVsRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUUvRDs7R0FFRztBQUlIO0lBQW1DLHlDQUFZO0lBSzdDLHVCQUFvQixRQUFrQixFQUFFLE1BQWM7UUFBdEQsWUFDRSxpQkFBTyxTQVFSO1FBVG1CLGNBQVEsR0FBUixRQUFRLENBQVU7UUFIN0Isb0JBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLFlBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBYyxJQUFJLEdBQUcsRUFBVSxDQUFDLENBQUM7UUFJcEUsS0FBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckQsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBbEMsQ0FBa0M7WUFDeEMsY0FBYyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUM7U0FDNUIsQ0FBQyxDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsVUFBQyxLQUFlLElBQUssT0FBQSxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQXJCLENBQXFCLENBQUMsRUFDL0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7O0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsK0JBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFPRCxzQkFBSSxnQ0FBSztRQUxUOzs7O1dBSUc7YUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsQ0FBQzs7O09BQUE7SUFFRDs7O09BR0c7SUFDSCwyQkFBRyxHQUFILFVBQUksSUFBWTtRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsOEJBQU0sR0FBTixVQUFPLElBQVk7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7O2dCQTNDNkIsUUFBUTtnQkFBVSxNQUFNOzs7SUFMM0MsYUFBYTtRQUh6QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csYUFBYSxDQWlEekI7d0JBekVEO0NBeUVDLEFBakRELENBQW1DLFlBQVksR0FpRDlDO1NBakRZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zdGF0ZS1zZXJ2aWNlLmFic3RyYWN0JztcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uRmFjdG9yeSB9IGZyb20gJy4vYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7XG4gIGZyb21UcmlnZ2VyLFxuICBFeHRlbnNpb25Qb2ludCxcbiAgc3RhdGVUb0ZhY3RvcnksXG4gIHNvcnRCeVByaW9yaXR5XG59IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBBIGhvb2sgdG8gdXNlIGZvciBNdWx0aSBQcm92aWRlciBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX0FDVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbignQWN0aW9uRmFjdG9yeScpO1xuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBkZWZpbmVzIGdsb2JhbCBhY3Rpb25zLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25TZXJ2aWNlIGV4dGVuZHMgU3RhdGVTZXJ2aWNlIGltcGxlbWVudHMgRXh0ZW5zaW9uUG9pbnQ8QWN0aW9uPiB7XG4gIGl0ZW1zJDogT2JzZXJ2YWJsZTxBY3Rpb25bXT47XG4gIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3QoKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTZXQ8QWN0aW9uPj4obmV3IFNldDxBY3Rpb24+KCkpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCByb3V0ZXI6IFJvdXRlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pdGVtcyQgPSBmcm9tVHJpZ2dlcihyb3V0ZXIsIHRoaXMucmVmcmVzaFRyaWdnZXIsIFtcbiAgICAgICgpID0+IHRoaXMuaW5qZWN0b3IuZ2V0KEhPT0tfQUNUSU9OLCBbXSksXG4gICAgICBzdGF0ZVRvRmFjdG9yeSh0aGlzLnN0YXRlJClcbiAgICBdKS5waXBlKFxuICAgICAgbWFwKChpdGVtczogQWN0aW9uW10pID0+IHNvcnRCeVByaW9yaXR5KGl0ZW1zKSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaCB0aGUgZXh0ZW5zaW9uIGZhY3Rvcmllc1xuICAgKi9cbiAgcmVmcmVzaCgpIHtcbiAgICB0aGlzLnJlZnJlc2hUcmlnZ2VyLm5leHQoMSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzdGF0ZS5cbiAgICogQHJlYWRvbmx5XG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHNldCBvZiBhY3Rpb25zLlxuICAgKi9cbiAgZ2V0IHN0YXRlKCk6IFNldDxBY3Rpb24+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyBpdGVtIHRvIHRoZSBhY3Rpb25zIGluIHRoZSBoZWFkZXIgYW5kIGVtaXRzIGEgc3RhdGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byBhZGQuXG4gICAqL1xuICBhZGQoaXRlbTogQWN0aW9uKSB7XG4gICAgdGhpcy5zdGF0ZS5hZGQoaXRlbSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGFjdGlvbiBmcm9tIHRoZSBoZWFkZXIgYW5kIGVtaXRzIGEgc3RhdGUgY2hhbmdlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmUoaXRlbTogQWN0aW9uKSB7XG4gICAgdGhpcy5zdGF0ZS5kZWxldGUoaXRlbSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxufVxuIl19