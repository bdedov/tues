import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PatternMessagesService } from './pattern-messages.service';
import { MissingTranslationHandler, MissingTranslationHandlerParams, TranslateParser, TranslateService } from '@ngx-translate/core';
var MissingTranslationCustomHandler = /** @class */ (function () {
    function MissingTranslationCustomHandler(parser, patternMessagesService) {
        this.parser = parser;
        this.patternMessagesService = patternMessagesService;
        this.cache = {};
    }
    MissingTranslationCustomHandler.prototype.handle = function (params) {
        var messageKey = params.key, interpolateParams = params.interpolateParams, translateService = params.translateService;
        this.translateService = translateService;
        var translation = this.getFromCache(messageKey, interpolateParams);
        if (!translation) {
            var patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
            if (patternMessageTranslation) {
                translation = patternMessageTranslation;
            }
            else {
                translation = this.parser.interpolate(messageKey, interpolateParams);
            }
            this.addToCache(messageKey, interpolateParams, translation);
        }
        return translation;
    };
    MissingTranslationCustomHandler.prototype.getFromCache = function (messageKey, interpolateParams) {
        var currentLang = this.translateService.currentLang;
        var currentCache = this.cache[currentLang] || {};
        var cacheKey = this.getCacheKey(messageKey, interpolateParams);
        return currentCache[cacheKey];
    };
    MissingTranslationCustomHandler.prototype.addToCache = function (messageKey, interpolateParams, translation) {
        var currentLang = this.translateService.currentLang;
        var currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
        var cacheKey = this.getCacheKey(messageKey, interpolateParams);
        currentCache[cacheKey] = translation;
    };
    MissingTranslationCustomHandler.prototype.getCacheKey = function (messageKey, interpolateParams) {
        return interpolateParams ? messageKey + " " + JSON.stringify(interpolateParams) : messageKey;
    };
    MissingTranslationCustomHandler.prototype.getPatternMessageTranslation = function (messageKey, interpolateParams) {
        var shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
        if (shouldTryPatternMessages) {
            if (!this.patternMessagesService.translateService) {
                this.patternMessagesService.translateService = this.translateService;
            }
            return this.patternMessagesService.translate(messageKey);
        }
        return undefined;
    };
    MissingTranslationCustomHandler.ctorParameters = function () { return [
        { type: TranslateParser },
        { type: PatternMessagesService }
    ]; };
    MissingTranslationCustomHandler = tslib_1.__decorate([
        Injectable()
    ], MissingTranslationCustomHandler);
    return MissingTranslationCustomHandler;
}());
export { MissingTranslationCustomHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzc2luZy10cmFuc2xhdGlvbi1jdXN0b20uaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2kxOG4vbWlzc2luZy10cmFuc2xhdGlvbi1jdXN0b20uaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLCtCQUErQixFQUMvQixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2pCLE1BQU0scUJBQXFCLENBQUM7QUFHN0I7SUFJRSx5Q0FDVSxNQUF1QixFQUN2QixzQkFBOEM7UUFEOUMsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdkIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUp4RCxVQUFLLEdBQVEsRUFBRSxDQUFDO0lBS2IsQ0FBQztJQUVKLGdEQUFNLEdBQU4sVUFBTyxNQUF1QztRQUNwQyxJQUFBLHVCQUFlLEVBQUUsNENBQWlCLEVBQUUsMENBQWdCLENBQVk7UUFDeEUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBRXpDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUNuRyxJQUFJLHlCQUF5QixFQUFFO2dCQUM3QixXQUFXLEdBQUcseUJBQXlCLENBQUM7YUFDekM7aUJBQU07Z0JBQ0wsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3RFO1lBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDN0Q7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU8sc0RBQVksR0FBcEIsVUFBcUIsVUFBa0IsRUFBRSxpQkFBeUI7UUFDeEQsSUFBQSwrQ0FBVyxDQUEyQjtRQUM5QyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxvREFBVSxHQUFsQixVQUFtQixVQUFrQixFQUFFLGlCQUF5QixFQUFFLFdBQW1CO1FBQzNFLElBQUEsK0NBQVcsQ0FBMkI7UUFDOUMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3RSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVPLHFEQUFXLEdBQW5CLFVBQW9CLFVBQWtCLEVBQUUsaUJBQXlCO1FBQy9ELE9BQU8saUJBQWlCLENBQUMsQ0FBQyxDQUFJLFVBQVUsU0FBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUMvRixDQUFDO0lBRU8sc0VBQTRCLEdBQXBDLFVBQXFDLFVBQWtCLEVBQUUsaUJBQXlCO1FBQ2hGLElBQU0sd0JBQXdCLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUUsaUJBQXlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUV2RyxJQUFJLHdCQUF3QixFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ2pELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7YUFDdEU7WUFDRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDMUQ7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOztnQkFyRGlCLGVBQWU7Z0JBQ0Msc0JBQXNCOztJQU43QywrQkFBK0I7UUFEM0MsVUFBVSxFQUFFO09BQ0EsK0JBQStCLENBMkQzQztJQUFELHNDQUFDO0NBQUEsQUEzREQsSUEyREM7U0EzRFksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF0dGVybk1lc3NhZ2VzU2VydmljZSB9IGZyb20gJy4vcGF0dGVybi1tZXNzYWdlcy5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIsXG4gIE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJQYXJhbXMsXG4gIFRyYW5zbGF0ZVBhcnNlcixcbiAgVHJhbnNsYXRlU2VydmljZVxufSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1pc3NpbmdUcmFuc2xhdGlvbkN1c3RvbUhhbmRsZXIgaW1wbGVtZW50cyBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyIHtcbiAgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZTtcbiAgY2FjaGU6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcGFyc2VyOiBUcmFuc2xhdGVQYXJzZXIsXG4gICAgcHJpdmF0ZSBwYXR0ZXJuTWVzc2FnZXNTZXJ2aWNlOiBQYXR0ZXJuTWVzc2FnZXNTZXJ2aWNlXG4gICkge31cblxuICBoYW5kbGUocGFyYW1zOiBNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyUGFyYW1zKSB7XG4gICAgY29uc3QgeyBrZXk6IG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zLCB0cmFuc2xhdGVTZXJ2aWNlIH0gPSBwYXJhbXM7XG4gICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlID0gdHJhbnNsYXRlU2VydmljZTtcblxuICAgIGxldCB0cmFuc2xhdGlvbiA9IHRoaXMuZ2V0RnJvbUNhY2hlKG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zKTtcblxuICAgIGlmICghdHJhbnNsYXRpb24pIHtcbiAgICAgIGNvbnN0IHBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24gPSB0aGlzLmdldFBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24obWVzc2FnZUtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgICAgaWYgKHBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24pIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSBwYXR0ZXJuTWVzc2FnZVRyYW5zbGF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSB0aGlzLnBhcnNlci5pbnRlcnBvbGF0ZShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkVG9DYWNoZShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcywgdHJhbnNsYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RnJvbUNhY2hlKG1lc3NhZ2VLZXk6IHN0cmluZywgaW50ZXJwb2xhdGVQYXJhbXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBjdXJyZW50TGFuZyB9ID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlO1xuICAgIGNvbnN0IGN1cnJlbnRDYWNoZSA9IHRoaXMuY2FjaGVbY3VycmVudExhbmddIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleShtZXNzYWdlS2V5LCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgcmV0dXJuIGN1cnJlbnRDYWNoZVtjYWNoZUtleV07XG4gIH1cblxuICBwcml2YXRlIGFkZFRvQ2FjaGUobWVzc2FnZUtleTogc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtczogb2JqZWN0LCB0cmFuc2xhdGlvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBjdXJyZW50TGFuZyB9ID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlO1xuICAgIGNvbnN0IGN1cnJlbnRDYWNoZSA9IHRoaXMuY2FjaGVbY3VycmVudExhbmddID0gdGhpcy5jYWNoZVtjdXJyZW50TGFuZ10gfHwge307XG4gICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdldENhY2hlS2V5KG1lc3NhZ2VLZXksIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICBjdXJyZW50Q2FjaGVbY2FjaGVLZXldID0gdHJhbnNsYXRpb247XG4gIH1cblxuICBwcml2YXRlIGdldENhY2hlS2V5KG1lc3NhZ2VLZXk6IHN0cmluZywgaW50ZXJwb2xhdGVQYXJhbXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGludGVycG9sYXRlUGFyYW1zID8gYCR7bWVzc2FnZUtleX0gJHtKU09OLnN0cmluZ2lmeShpbnRlcnBvbGF0ZVBhcmFtcyl9YCA6IG1lc3NhZ2VLZXk7XG4gIH1cblxuICBwcml2YXRlIGdldFBhdHRlcm5NZXNzYWdlVHJhbnNsYXRpb24obWVzc2FnZUtleTogc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtczogb2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBzaG91bGRUcnlQYXR0ZXJuTWVzc2FnZXMgPSAhaW50ZXJwb2xhdGVQYXJhbXMgfHwgISgoaW50ZXJwb2xhdGVQYXJhbXMgYXMgYW55KS5ub1BhdHRlcm5NZXNzYWdlcyk7XG5cbiAgICBpZiAoc2hvdWxkVHJ5UGF0dGVybk1lc3NhZ2VzKSB7XG4gICAgICBpZiAoIXRoaXMucGF0dGVybk1lc3NhZ2VzU2VydmljZS50cmFuc2xhdGVTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMucGF0dGVybk1lc3NhZ2VzU2VydmljZS50cmFuc2xhdGVTZXJ2aWNlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGF0dGVybk1lc3NhZ2VzU2VydmljZS50cmFuc2xhdGUobWVzc2FnZUtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuIl19