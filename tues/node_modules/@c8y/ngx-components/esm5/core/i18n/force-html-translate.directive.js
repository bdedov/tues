import * as tslib_1 from "tslib";
import { DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent } from '@ngx-translate/core';
import { AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnDestroy } from '@angular/core';
import { isEqual } from 'lodash-es';
/**
 * This is temporary fallback directive that is used to handle HTML blocks translation on maintenance versions
 * in version 10.9.4 and later, this is replaced by default translate directive.
 */
var ForceHtmlTranslateDirective = /** @class */ (function () {
    function ForceHtmlTranslateDirective(translateService, element, _ref) {
        var _this = this;
        this.translateService = translateService;
        this.element = element;
        this._ref = _ref;
        /**
         * Used to trigger events when html is replaced by directive.
         */
        this.htmlUpdateEvent = new EventEmitter();
        // subscribe to onTranslationChange event, in case the translations of the current lang change
        if (!this.onTranslationChangeSub) {
            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {
                if (event.lang === _this.translateService.currentLang) {
                    _this.checkNodes();
                }
            });
        }
        // subscribe to onLangChange event, in case the language changes
        if (!this.onLangChangeSub) {
            this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {
                _this.checkNodes();
            });
        }
        // subscribe to onDefaultLangChange event, in case the default language changes
        if (!this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {
                _this.checkNodes();
            });
        }
    }
    Object.defineProperty(ForceHtmlTranslateDirective.prototype, "translateParams", {
        set: function (params) {
            if (!isEqual(this.currentParams, params)) {
                this.currentParams = params;
                this.checkNodes();
            }
        },
        enumerable: true,
        configurable: true
    });
    ForceHtmlTranslateDirective.prototype.ngAfterViewChecked = function () {
        this.checkNodes();
    };
    ForceHtmlTranslateDirective.prototype.checkNodes = function () {
        if (this.isLookupKeyMissing()) {
            this.element.nativeElement.lookupKey = this.getLookupKey();
        }
        this.translateAndUpdateHtmlContent();
        this.htmlUpdateEvent.emit();
    };
    ForceHtmlTranslateDirective.prototype.ngOnDestroy = function () {
        if (this.onLangChangeSub) {
            this.onLangChangeSub.unsubscribe();
        }
        if (this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub.unsubscribe();
        }
        if (this.onTranslationChangeSub) {
            this.onTranslationChangeSub.unsubscribe();
        }
        this.htmlUpdateEvent.complete();
    };
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    ForceHtmlTranslateDirective.prototype.getLookupKey = function () {
        return this.element.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    };
    ForceHtmlTranslateDirective.prototype.isLookupKeyMissing = function () {
        return !this.element.nativeElement.lookupKey;
    };
    ForceHtmlTranslateDirective.prototype.lookupKeyExist = function () {
        return this.element.nativeElement.lookupKey;
    };
    ForceHtmlTranslateDirective.prototype.translateAndUpdateHtmlContent = function () {
        if (this.lookupKeyExist()) {
            this.element.nativeElement.innerHTML = this.translateService.instant(this.element.nativeElement.lookupKey, this.currentParams || {});
        }
    };
    ForceHtmlTranslateDirective.ctorParameters = function () { return [
        { type: TranslateService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], ForceHtmlTranslateDirective.prototype, "translateParams", null);
    ForceHtmlTranslateDirective = tslib_1.__decorate([
        Directive({
            selector: '[forceHtmlTranslate]'
        })
    ], ForceHtmlTranslateDirective);
    return ForceHtmlTranslateDirective;
}());
export { ForceHtmlTranslateDirective };
//# sourceMappingURL=data:application/json;base64,