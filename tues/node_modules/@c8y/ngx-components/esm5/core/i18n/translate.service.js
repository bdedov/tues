import * as tslib_1 from "tslib";
import { registerLocaleData } from '@angular/common';
import { Injectable } from '@angular/core';
import { TranslateService as NgxTranslateService } from '@ngx-translate/core';
import { keys } from 'lodash-es';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { getAngularLocalesLanguageString } from './i18n.module';
import { loadLocale } from './load-locale';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/ui-state.service";
import * as i3 from "../common/options.service";
/**
 * A service to manage the language of the application.
 */
var TranslateService = /** @class */ (function () {
    function TranslateService(ngxTranslate, ui, options) {
        var _this = this;
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(function (k) { return _this.langsDetail[k]; });
        this.DEFAULT_SEPARATOR = '_';
        var queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    TranslateService_1 = TranslateService;
    TranslateService.defaultLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Switches to given language.
     * @param lang The language as two-letter code.
     */
    TranslateService.prototype.switchToLanguage = function (lang) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var moduleLang, e_1, lessSpecificModuleLang;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        moduleLang = lang.replace('_', '-');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, this.loadLocales(moduleLang)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 3:
                        e_1 = _a.sent();
                        lessSpecificModuleLang = moduleLang.split('-').shift();
                        if (!(lessSpecificModuleLang !== moduleLang)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.loadLocales(lessSpecificModuleLang)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5: throw e_1;
                    case 6: return [3 /*break*/, 7];
                    case 7:
                        this.setLanguage(lang);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.loadLocales = function (moduleLang) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var module;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadLocale(getAngularLocalesLanguageString(moduleLang))];
                    case 1:
                        module = _a.sent();
                        registerLocaleData(module.default);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.setLanguage = function (lang) {
        var _this = this;
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(function () {
            _this.ui.state$.next(tslib_1.__assign({}, _this.ui.state, { lang: lang }));
        });
    };
    /**
     * Finds the first supported language
     */
    TranslateService.prototype.firstSupportedLanguage = function () {
        var _this = this;
        var languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean);
        var preferredLanguage = languages.find(function (lang) { return _this.getSupported(lang); });
        return this.getSupported(preferredLanguage);
    };
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    TranslateService.prototype.convertToLanguageCodePO = function (lang) {
        var sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        var _a = tslib_1.__read(lang.split(sep), 2), langMain = _a[0], langSpecific = _a[1];
        var langLast = langSpecific ? "" + this.DEFAULT_SEPARATOR + langSpecific : '';
        return "" + langMain + langLast;
    };
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    TranslateService.prototype.getNativeLanguage = function (lang) {
        var langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    };
    TranslateService.prototype.saveInLocalStorage = function (lang) {
        window.localStorage.setItem(TranslateService_1.SAVE_LANGUAGE_KEY, lang);
    };
    TranslateService.prototype.getSupported = function (lang) {
        return this.langs.find(function (l) { return l === lang; }) || this.langs.find(function (l) { return l.startsWith(lang); });
    };
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    TranslateService.prototype.queryStringLang = function () {
        return this.getQueryParameter('lang');
    };
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    TranslateService.prototype.localStorageLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    TranslateService.prototype.browserLangs = function () {
        var navigator = window.navigator;
        var browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce(function (languages, property) {
            var propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    };
    TranslateService.prototype.getQueryParameter = function (queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        var query = window.location.search.substring(1);
        var result;
        query.split('&').find(function (pair) {
            var _a = tslib_1.__read(pair.split('='), 2), key = _a[0], value = _a[1];
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    };
    var TranslateService_1;
    TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
    TranslateService.ctorParameters = function () { return [
        { type: NgxTranslateService },
        { type: AppStateService },
        { type: OptionsService }
    ]; };
    TranslateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i3.OptionsService)); }, token: TranslateService, providedIn: "root" });
    TranslateService = TranslateService_1 = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TranslateService);
    return TranslateService;
}());
export { TranslateService };
//# sourceMappingURL=data:application/json;base64,