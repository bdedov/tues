import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map, combineLatest, delay, debounceTime } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { StateService } from '../common/state-service.abstract';
import { NavigatorService } from '../navigator/navigator.service';
import * as i0 from "@angular/core";
import * as i1 from "../navigator/navigator.service";
import * as i2 from "../common/options.service";
/**
 * A service which defines header functions.
 */
var HeaderService = /** @class */ (function (_super) {
    tslib_1.__extends(HeaderService, _super);
    function HeaderService(navigatorService, options) {
        var _this = _super.call(this) || this;
        _this.navigatorService = navigatorService;
        _this.options = options;
        _this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        _this.hasItemsInNavigator$ = _this.navigatorService.items$.pipe(delay(_this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), map(function (_a) {
            var length = _a.length;
            return !!length;
        }), distinctUntilChanged());
        _this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            }
        });
        _this.title = undefined;
        _this.header$ = _this.map(function (header) { return header; });
        _this.navigatorOpen$ = _this.map(function (_a) {
            var nav = _a.nav;
            return nav.open;
        }).pipe(combineLatest(_this.hasItemsInNavigator$), map(function (_a) {
            var _b = tslib_1.__read(_a, 2), open = _b[0], hasItems = _b[1];
            return open && hasItems;
        }));
        var titleReference = document.querySelector('title');
        _this.title = {
            elementRef: titleReference,
            originalValue: titleReference && titleReference.innerText
        };
        return _this;
    }
    Object.defineProperty(HeaderService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "navigatorHiddenOnStartup", {
        get: function () {
            return this.options.hideNavigator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "largeWidth", {
        get: function () {
            return document.documentElement.clientWidth > 1200;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "shouldToggle", {
        get: function () {
            return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles the navigator open status.
     */
    HeaderService.prototype.toggleNavigator = function () {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    };
    /**
     * Force to close the navigator.
     */
    HeaderService.prototype.closeNavigator = function () {
        this.state.nav.open = false;
        this.emitNewState();
    };
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    HeaderService.prototype.configNavigator = function (config) {
        if (config === void 0) { config = {}; }
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    };
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    HeaderService.prototype.changeTitle = function (newTitle, pageTitleUpdate) {
        if (pageTitleUpdate === void 0) { pageTitleUpdate = true; }
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    };
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    HeaderService.prototype.changePageTitle = function (newTitle) {
        this.title.elementRef.innerText = newTitle
            ? newTitle + " / " + this.title.originalValue
            : "" + this.title.originalValue;
    };
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    HeaderService.prototype.verifyIfNavOpen = function () {
        var _this = this;
        this.hasItemsInNavigator$
            .pipe(debounceTime(300))
            .subscribe(function (hasItems) { return hasItems && _this.shouldToggle && _this.toggleNavigator(); });
    };
    HeaderService.prototype.shouldShowBreadcrumbs = function () {
        return this.options.breadcrumbs;
    };
    HeaderService.ctorParameters = function () { return [
        { type: NavigatorService },
        { type: OptionsService }
    ]; };
    HeaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(i0.ɵɵinject(i1.NavigatorService), i0.ɵɵinject(i2.OptionsService)); }, token: HeaderService, providedIn: "root" });
    HeaderService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], HeaderService);
    return HeaderService;
}(StateService));
export { HeaderService };
//# sourceMappingURL=data:application/json;base64,