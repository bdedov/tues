import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule as NgRouterModule } from '@angular/router';
import { RouterService } from './router.service';
import { ContextRouteComponent } from './context-route.component';
import { HeaderModule } from '../header/header.module';
import { CommonModule } from '../common/common.module';
import { ContextRouteGuard } from './context-route.guard';
import { ViewContext } from './router.models';
import { RouterTabsResolver } from './router-tabs.resolver';
import { EmptyComponent } from './empty.component';
export var routes = [{
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }];
// tslint:disable-next-line: forin
for (var key in ViewContext) {
    var context = ViewContext[key];
    routes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context: context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver,
        }
    });
}
var RouterModule = /** @class */ (function () {
    function RouterModule(routerService) {
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    RouterModule_1 = RouterModule;
    RouterModule.providers = function () {
        return [
            ContextRouteGuard,
            RouterTabsResolver,
            RouterService
        ];
    };
    RouterModule.forRoot = function () {
        return {
            ngModule: RouterModule_1,
            providers: RouterModule_1.providers()
        };
    };
    var RouterModule_1;
    RouterModule.ctorParameters = function () { return [
        { type: RouterService }
    ]; };
    RouterModule = RouterModule_1 = tslib_1.__decorate([
        NgModule({
            declarations: [ContextRouteComponent, EmptyComponent],
            imports: [
                NgRouterModule.forRoot(routes),
                HeaderModule,
                CommonModule
            ],
            entryComponents: [ContextRouteComponent, EmptyComponent]
        })
    ], RouterModule);
    return RouterModule;
}());
export { RouterModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9yb3V0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLElBQUksY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBUyxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRCxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQVksQ0FBQztRQUM5QixJQUFJLEVBQUUsV0FBVztRQUNqQixTQUFTLEVBQUUsY0FBYztLQUMxQjtJQUNEO1FBQ0UsSUFBSSxFQUFFLGFBQWE7UUFDbkIsU0FBUyxFQUFFLGNBQWM7S0FDMUIsQ0FBQyxDQUFDO0FBQ0gsa0NBQWtDO0FBQ2xDLEtBQUssSUFBTSxHQUFHLElBQUksV0FBVyxFQUFFO0lBQzdCLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ1YsSUFBSSxFQUFFLE9BQU87UUFDYixTQUFTLEVBQUUscUJBQXFCO1FBQ2hDLFdBQVcsRUFBRSxDQUFFLGlCQUFpQixDQUFFO1FBQ2xDLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7UUFDbEMsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLGtCQUFrQjtTQUN6QjtLQUNGLENBQUMsQ0FBQztDQUNKO0FBV0Q7SUFnQkUsc0JBQVksYUFBNEI7UUFDdEMsbUZBQW1GO0lBQ3JGLENBQUM7cUJBbEJVLFlBQVk7SUFDaEIsc0JBQVMsR0FBaEI7UUFDRSxPQUFPO1lBQ0wsaUJBQWlCO1lBQ2pCLGtCQUFrQjtZQUNsQixhQUFhO1NBQ2QsQ0FBQztJQUNKLENBQUM7SUFFTSxvQkFBTyxHQUFkO1FBQ0UsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFZO1lBQ3RCLFNBQVMsRUFBRSxjQUFZLENBQUMsU0FBUyxFQUFFO1NBQ3BDLENBQUM7SUFDSixDQUFDOzs7Z0JBRTBCLGFBQWE7O0lBaEI3QixZQUFZO1FBVHhCLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRSxDQUFFLHFCQUFxQixFQUFFLGNBQWMsQ0FBQztZQUN0RCxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQzlCLFlBQVk7Z0JBQ1osWUFBWTthQUNiO1lBQ0QsZUFBZSxFQUFFLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDO1NBQ3pELENBQUM7T0FDVyxZQUFZLENBbUJ4QjtJQUFELG1CQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FuQlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgYXMgTmdSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVyU2VydmljZSB9IGZyb20gJy4vcm91dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29udGV4dFJvdXRlQ29tcG9uZW50IH0gZnJvbSAnLi9jb250ZXh0LXJvdXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIZWFkZXJNb2R1bGUgfSBmcm9tICcuLi9oZWFkZXIvaGVhZGVyLm1vZHVsZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBDb250ZXh0Um91dGVHdWFyZCB9IGZyb20gJy4vY29udGV4dC1yb3V0ZS5ndWFyZCc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dCwgUm91dGUgfSBmcm9tICcuL3JvdXRlci5tb2RlbHMnO1xuaW1wb3J0IHsgUm91dGVyVGFic1Jlc29sdmVyIH0gZnJvbSAnLi9yb3V0ZXItdGFicy5yZXNvbHZlcic7XG5pbXBvcnQgeyBFbXB0eUNvbXBvbmVudCB9IGZyb20gJy4vZW1wdHkuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IHJvdXRlczogUm91dGVbXSA9IFt7XG4gIHBhdGg6ICd1c2Vycy9uZXcnLFxuICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50XG59LFxue1xuICBwYXRoOiAndGVuYW50cy9uZXcnLFxuICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50XG59XTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZm9yaW5cbmZvciAoY29uc3Qga2V5IGluIFZpZXdDb250ZXh0KSB7XG4gIGNvbnN0IGNvbnRleHQgPSBWaWV3Q29udGV4dFtrZXldO1xuICByb3V0ZXMucHVzaCh7XG4gICAgcGF0aDogY29udGV4dCxcbiAgICBjb21wb25lbnQ6IENvbnRleHRSb3V0ZUNvbXBvbmVudCxcbiAgICBjYW5BY3RpdmF0ZTogWyBDb250ZXh0Um91dGVHdWFyZCBdLFxuICAgIGRhdGE6IHsgY29udGV4dCwgY29udGV4dERhdGE6IHt9IH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgdGFiczogUm91dGVyVGFic1Jlc29sdmVyLFxuICAgIH1cbiAgfSk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWyBDb250ZXh0Um91dGVDb21wb25lbnQsIEVtcHR5Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIE5nUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKSxcbiAgICBIZWFkZXJNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0NvbnRleHRSb3V0ZUNvbXBvbmVudCwgRW1wdHlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlck1vZHVsZSB7XG4gIHN0YXRpYyBwcm92aWRlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIENvbnRleHRSb3V0ZUd1YXJkLFxuICAgICAgUm91dGVyVGFic1Jlc29sdmVyLFxuICAgICAgUm91dGVyU2VydmljZVxuICAgIF07XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJvdXRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogUm91dGVyTW9kdWxlLnByb3ZpZGVycygpXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJvdXRlclNlcnZpY2U6IFJvdXRlclNlcnZpY2UpIHtcbiAgICAvLyBEZWNsYXJlZCBidXQgbmV2ZXIgdXNlZCBpcyBpbnRlbmRlZDogdG8gYWx3YXlzIGhhdmUgYSBpbnN0YW5jZSBvZiBSb3V0ZXJTZXJ2aWNlLlxuICB9XG59XG4iXX0=