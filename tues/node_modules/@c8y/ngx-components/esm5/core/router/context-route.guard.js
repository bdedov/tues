import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
import { InventoryService } from '../../api';
var ContextRouteGuard = /** @class */ (function () {
    function ContextRouteGuard(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    ContextRouteGuard.prototype.canActivate = function (route) {
        var id = route.paramMap.get('id');
        var service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(function (contextData) { return (route.data = tslib_1.__assign({}, route.data, { contextData: contextData })); }), map(function () { return true; }), catchError(function (ex) { return of(false); }));
    };
    ContextRouteGuard.prototype.service = function (route) {
        var serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    };
    ContextRouteGuard.prototype.detailCached = function (service, id) {
        var cache = this.getCache(service);
        var cached = cache[id];
        if (!cached) {
            var params = service instanceof InventoryService ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(function (_a) {
                var data = _a.data;
                return data;
            }), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    };
    ContextRouteGuard.prototype.clearDetailCached = function (service, id) {
        var cache = this.getCache(service);
        delete cache[id];
    };
    ContextRouteGuard.prototype.getCache = function (service) {
        var cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    };
    ContextRouteGuard.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ContextRouteGuard = tslib_1.__decorate([
        Injectable()
    ], ContextRouteGuard);
    return ContextRouteGuard;
}());
export { ContextRouteGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9jb250ZXh0LXJvdXRlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRzdDO0lBRUUsMkJBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFEOUIsV0FBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDYyxDQUFDO0lBRTFDLHVDQUFXLEdBQVgsVUFBWSxLQUE2QjtRQUN2QyxJQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3hDLEdBQUcsQ0FBQyxVQUFBLFdBQVcsSUFBSSxPQUFBLENBQUMsS0FBSyxDQUFDLElBQUksd0JBQVEsS0FBSyxDQUFDLElBQUksSUFBRSxXQUFXLGFBQUEsR0FBRSxDQUFDLEVBQTdDLENBQTZDLENBQUMsRUFDakUsR0FBRyxDQUFDLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDLEVBQ2YsVUFBVSxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFULENBQVMsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVPLG1DQUFPLEdBQWYsVUFBZ0IsS0FBSztRQUNuQixJQUFNLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLHdDQUFZLEdBQXBCLFVBQXFCLE9BQU8sRUFBRSxFQUFFO1FBQzlCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDekYsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDNUMsR0FBRyxDQUFDLFVBQUMsRUFBUTtvQkFBTixjQUFJO2dCQUFPLE9BQUEsSUFBSTtZQUFKLENBQUksQ0FBQyxFQUN2QixXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztZQUNGLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDcEI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sNkNBQWlCLEdBQXpCLFVBQTBCLE9BQU8sRUFBRSxFQUFFO1FBQ25DLElBQU0sS0FBSyxHQUFrQixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTyxvQ0FBUSxHQUFoQixVQUFpQixPQUFPO1FBQ3RCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkE1QzZCLFFBQVE7O0lBRjNCLGlCQUFpQjtRQUQ3QixVQUFVLEVBQUU7T0FDQSxpQkFBaUIsQ0ErQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQS9DRCxJQStDQztTQS9DWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZnJvbSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc2hhcmVSZXBsYXksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFZpZXdDb250ZXh0U2VydmljZXMgfSBmcm9tICcuL3ZpZXctY29udGV4dC5zZXJ2aWNlJztcbmltcG9ydCB7IEludmVudG9yeVNlcnZpY2UgfSBmcm9tICcuLi8uLi9hcGknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGV4dFJvdXRlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIHByaXZhdGUgY2FjaGVzID0gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IGlkID0gcm91dGUucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2Uocm91dGUpO1xuICAgIHRoaXMuY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpO1xuICAgIHJldHVybiB0aGlzLmRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkucGlwZShcbiAgICAgIHRhcChjb250ZXh0RGF0YSA9PiAocm91dGUuZGF0YSA9IHsgLi4ucm91dGUuZGF0YSwgY29udGV4dERhdGEgfSkpLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcihleCA9PiBvZihmYWxzZSkpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2VydmljZShyb3V0ZSkge1xuICAgIGNvbnN0IHNlcnZpY2VJbnN0YW5jZSA9IFZpZXdDb250ZXh0U2VydmljZXMuY29udGV4dFRvU2VydmljZShyb3V0ZS5kYXRhLmNvbnRleHQpO1xuICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldChzZXJ2aWNlSW5zdGFuY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpIHtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuZ2V0Q2FjaGUoc2VydmljZSk7XG4gICAgbGV0IGNhY2hlZCA9IGNhY2hlW2lkXTtcbiAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gc2VydmljZSBpbnN0YW5jZW9mIEludmVudG9yeVNlcnZpY2UgPyB7IHdpdGhDaGlsZHJlbjogZmFsc2UgfSA6IHVuZGVmaW5lZDtcbiAgICAgIGNhY2hlZCA9IGZyb20oc2VydmljZS5kZXRhaWwoaWQsIHBhcmFtcykpLnBpcGUoXG4gICAgICAgIG1hcCgoeyBkYXRhIH0pID0+IGRhdGEpLFxuICAgICAgICBzaGFyZVJlcGxheSgxKVxuICAgICAgKTtcbiAgICAgIGNhY2hlW2lkXSA9IGNhY2hlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpIHtcbiAgICBjb25zdCBjYWNoZTogTWFwPGFueSwgYW55PiA9IHRoaXMuZ2V0Q2FjaGUoc2VydmljZSk7XG4gICAgZGVsZXRlIGNhY2hlW2lkXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2FjaGUoc2VydmljZSkge1xuICAgIGxldCBjYWNoZSA9IHRoaXMuY2FjaGVzLmdldChzZXJ2aWNlKTtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICBjYWNoZSA9IHt9O1xuICAgICAgdGhpcy5jYWNoZXMuc2V0KHNlcnZpY2UsIGNhY2hlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9XG59XG4iXX0=