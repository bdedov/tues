import * as tslib_1 from "tslib";
import { Directive, ContentChildren } from '@angular/core';
import { InputGroupListComponent } from './input-group-list.component';
var InputGroupListContainerDirective = /** @class */ (function () {
    function InputGroupListContainerDirective() {
    }
    InputGroupListContainerDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.listProjections.map(function (element) {
            if (element !== _this.listProjections.last) {
                setTimeout(function () {
                    element.plus = false;
                });
            }
        });
        this.listProjections.changes.subscribe(function (elements) {
            if (elements.length === 1) {
                setTimeout(function () {
                    elements.first.plus = true;
                    elements.first.minus = false;
                });
                return;
            }
            elements.map(function (element) {
                setTimeout(function () {
                    element.minus = true;
                });
                if (element !== elements.last) {
                    setTimeout(function () {
                        element.plus = false;
                    });
                }
                if (element === elements.last) {
                    setTimeout(function () {
                        element.plus = true;
                    });
                }
            });
        });
    };
    tslib_1.__decorate([
        ContentChildren(InputGroupListComponent)
    ], InputGroupListContainerDirective.prototype, "listProjections", void 0);
    InputGroupListContainerDirective = tslib_1.__decorate([
        Directive({
            selector: '[c8yInputGroupListContainer]'
        })
    ], InputGroupListContainerDirective);
    return InputGroupListContainerDirective;
}());
export { InputGroupListContainerDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUtULGVBQWUsRUFFaEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFLdkU7SUFBQTtJQXVDQSxDQUFDO0lBcENDLDZEQUFrQixHQUFsQjtRQUFBLGlCQW1DQztRQWxDQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE9BQU87WUFDOUIsSUFBSSxPQUFPLEtBQUssS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pDLFVBQVUsQ0FBQztvQkFDVCxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUEsUUFBUTtZQUM3QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixVQUFVLENBQUM7b0JBQ1QsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUMzQixRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQy9CLENBQUMsQ0FBQyxDQUFDO2dCQUVILE9BQU87YUFDUjtZQUNELFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQSxPQUFPO2dCQUNsQixVQUFVLENBQUM7b0JBQ1QsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksT0FBTyxLQUFLLFFBQVEsQ0FBQyxJQUFJLEVBQUU7b0JBQzdCLFVBQVUsQ0FBQzt3QkFDVCxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztvQkFDdkIsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsSUFBSSxPQUFPLEtBQUssUUFBUSxDQUFDLElBQUksRUFBRTtvQkFDN0IsVUFBVSxDQUFDO3dCQUNULE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUN0QixDQUFDLENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBckN5QztRQUF6QyxlQUFlLENBQUMsdUJBQXVCLENBQUM7NkVBQXFEO0lBRG5GLGdDQUFnQztRQUg1QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsOEJBQThCO1NBQ3pDLENBQUM7T0FDVyxnQ0FBZ0MsQ0F1QzVDO0lBQUQsdUNBQUM7Q0FBQSxBQXZDRCxJQXVDQztTQXZDWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFdmVudEVtaXR0ZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgSW5wdXRHcm91cExpc3RDb21wb25lbnQgfSBmcm9tICcuL2lucHV0LWdyb3VwLWxpc3QuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUlucHV0R3JvdXBMaXN0Q29udGFpbmVyXSdcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cExpc3RDb250YWluZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgQENvbnRlbnRDaGlsZHJlbihJbnB1dEdyb3VwTGlzdENvbXBvbmVudCkgbGlzdFByb2plY3Rpb25zOiBRdWVyeUxpc3Q8SW5wdXRHcm91cExpc3RDb21wb25lbnQ+O1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLmxpc3RQcm9qZWN0aW9ucy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gdGhpcy5saXN0UHJvamVjdGlvbnMubGFzdCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBlbGVtZW50LnBsdXMgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmxpc3RQcm9qZWN0aW9ucy5jaGFuZ2VzLnN1YnNjcmliZShlbGVtZW50cyA9PiB7XG4gICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGVsZW1lbnRzLmZpcnN0LnBsdXMgPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnRzLmZpcnN0Lm1pbnVzID0gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzLm1hcChlbGVtZW50ID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZWxlbWVudC5taW51cyA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlbGVtZW50ICE9PSBlbGVtZW50cy5sYXN0KSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnBsdXMgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudCA9PT0gZWxlbWVudHMubGFzdCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5wbHVzID0gdHJ1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==