import * as tslib_1 from "tslib";
import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import { ValidationPattern } from './validation-pattern';
var DefaultValidationDirective = /** @class */ (function () {
    function DefaultValidationDirective() {
        this.c8yDefaultValidation = '';
    }
    DefaultValidationDirective_1 = DefaultValidationDirective;
    DefaultValidationDirective.prototype.validate = function (control) {
        var _a;
        if (!control.value) {
            return null;
        }
        var validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error("Pattern " + this.c8yDefaultValidation + " not found.");
        }
        var valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : (_a = {}, _a[this.c8yDefaultValidation] = true, _a);
    };
    var DefaultValidationDirective_1;
    tslib_1.__decorate([
        Input()
    ], DefaultValidationDirective.prototype, "c8yDefaultValidation", void 0);
    DefaultValidationDirective = DefaultValidationDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[c8yDefaultValidation]',
            providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective_1, multi: true }]
        })
    ], DefaultValidationDirective);
    return DefaultValidationDirective;
}());
export { DefaultValidationDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2Zvcm1zL2RlZmF1bHQtdmFsaWRhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQThCLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNekQ7SUFKQTtRQUtXLHlCQUFvQixHQUFXLEVBQUUsQ0FBQztJQXVCN0MsQ0FBQzttQ0F4QlksMEJBQTBCO0lBR3JDLDZDQUFRLEdBQVIsVUFBUyxPQUF3Qjs7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFXLElBQUksQ0FBQyxvQkFBb0IsZ0JBQWEsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUN0QixLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQUUsR0FBQyxJQUFJLENBQUMsb0JBQW9CLElBQUcsSUFBSSxLQUFFLENBQUM7SUFDN0QsQ0FBQzs7SUF0QlE7UUFBUixLQUFLLEVBQUU7NEVBQW1DO0lBRGhDLDBCQUEwQjtRQUp0QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsNEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO1NBQzVGLENBQUM7T0FDVywwQkFBMEIsQ0F3QnRDO0lBQUQsaUNBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXhCWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR19WQUxJREFUT1JTLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRpb25QYXR0ZXJuIH0gZnJvbSAnLi92YWxpZGF0aW9uLXBhdHRlcm4nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5RGVmYXVsdFZhbGlkYXRpb25dJyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBEZWZhdWx0VmFsaWRhdGlvbkRpcmVjdGl2ZSwgbXVsdGk6IHRydWV9XVxufSlcbmV4cG9ydCBjbGFzcyBEZWZhdWx0VmFsaWRhdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgpIGM4eURlZmF1bHRWYWxpZGF0aW9uOiBzdHJpbmcgPSAnJztcblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7W2tleTogc3RyaW5nXTogYW55fSB8IG51bGwge1xuICAgIGlmICghY29udHJvbC52YWx1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBWYWxpZGF0aW9uUGF0dGVybi5nZXQodGhpcy5jOHlEZWZhdWx0VmFsaWRhdGlvbik7XG4gICAgaWYgKCF2YWxpZGF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdHRlcm4gJHt0aGlzLmM4eURlZmF1bHRWYWxpZGF0aW9ufSBub3QgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgbGV0IHZhbGlkID0gdHJ1ZTtcbiAgICBpZiAodmFsaWRhdGlvbi5wYXR0ZXJuKSB7XG4gICAgICB2YWxpZCA9IHZhbGlkYXRpb24ucGF0dGVybi50ZXN0KGNvbnRyb2wudmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGlvbi5tYXhMZW5ndGgpIHtcbiAgICAgIHZhbGlkID0gY29udHJvbC52YWx1ZS5sZW5ndGggPCB2YWxpZGF0aW9uLm1heExlbmd0aDtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRpb24ubWluTGVuZ3RoKSB7XG4gICAgICB2YWxpZCA9IGNvbnRyb2wudmFsdWUubGVuZ3RoID49IHZhbGlkYXRpb24ubWluTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWQgPyBudWxsIDoge1t0aGlzLmM4eURlZmF1bHRWYWxpZGF0aW9uXTogdHJ1ZSB9O1xuICB9XG59XG4iXX0=