import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Output } from '@angular/core';
import { NgControl, AbstractControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { gettext } from '../i18n/index';
var JsonValidationPrettifierDirective = /** @class */ (function () {
    function JsonValidationPrettifierDirective(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    JsonValidationPrettifierDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(function () { return _this.clearValidationMessage(); }), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(function (value) {
            _this.validateInputAndPrettify(value);
        });
    };
    JsonValidationPrettifierDirective.prototype.ngOnDestroy = function () {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    JsonValidationPrettifierDirective.prototype.validateInputAndPrettify = function (value) {
        if (value) {
            try {
                var validJsonObject = JSON.parse(value);
                var pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    };
    JsonValidationPrettifierDirective.prototype.setErrorAndValidationMessage = function () {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    };
    JsonValidationPrettifierDirective.prototype.clearValidationMessage = function () {
        this.invalidJSON.emit(undefined);
    };
    JsonValidationPrettifierDirective.ctorParameters = function () { return [
        { type: NgControl }
    ]; };
    tslib_1.__decorate([
        Output()
    ], JsonValidationPrettifierDirective.prototype, "invalidJSON", void 0);
    JsonValidationPrettifierDirective = tslib_1.__decorate([
        Directive({
            selector: 'textarea[prettyValidJson]'
        })
    ], JsonValidationPrettifierDirective);
    return JsonValidationPrettifierDirective;
}());
export { JsonValidationPrettifierDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvanNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3hDO0lBT0UsMkNBQVksTUFBaUI7UUFObkIsZ0JBQVcsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV6RCxZQUFPLEdBQVcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDMUQscUJBQWdCLEdBQVcsSUFBSSxDQUFDO1FBSXRDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNyQyxDQUFDO0lBRUQsb0RBQVEsR0FBUjtRQUFBLGlCQVVDO1FBVEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7YUFDL0MsSUFBSSxDQUNILEdBQUcsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixFQUFFLEVBQTdCLENBQTZCLENBQUMsRUFDeEMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUNuQyxvQkFBb0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxVQUFBLEtBQUs7WUFDZCxLQUFJLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsdURBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsb0VBQXdCLEdBQXhCLFVBQXlCLEtBQUs7UUFDNUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJO2dCQUNGLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDcEM7WUFBQyxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQzthQUNyQztTQUNGO0lBQ0gsQ0FBQztJQUVPLHdFQUE0QixHQUFwQztRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLGtFQUFzQixHQUE5QjtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dCQXpDbUIsU0FBUzs7SUFObkI7UUFBVCxNQUFNLEVBQUU7MEVBQXdEO0lBRHRELGlDQUFpQztRQUg3QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsMkJBQTJCO1NBQ3RDLENBQUM7T0FDVyxpQ0FBaUMsQ0FpRDdDO0lBQUQsd0NBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWpEWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sLCBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vaW5kZXgnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICd0ZXh0YXJlYVtwcmV0dHlWYWxpZEpzb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBKc29uVmFsaWRhdGlvblByZXR0aWZpZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBPdXRwdXQoKSBpbnZhbGlkSlNPTjogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIHByaXZhdGUgYWJzdHJhY3RDdHJsOiBBYnN0cmFjdENvbnRyb2w7XG4gIHByaXZhdGUgbWVzc2FnZTogc3RyaW5nID0gZ2V0dGV4dCgnTXVzdCBiZSBhIHZhbGlkIEpTT04gb2JqZWN0LicpO1xuICBwcml2YXRlIGRlYm91bmNlVGltZUluTXM6IG51bWJlciA9IDEwMDA7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IobmdDdHJsOiBOZ0NvbnRyb2wpIHtcbiAgICB0aGlzLmFic3RyYWN0Q3RybCA9IG5nQ3RybC5jb250cm9sO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmFic3RyYWN0Q3RybC52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5jbGVhclZhbGlkYXRpb25NZXNzYWdlKCkpLFxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZVRpbWVJbk1zKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dEFuZFByZXR0aWZ5KHZhbHVlKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uICYmICF0aGlzLnN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVJbnB1dEFuZFByZXR0aWZ5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB2YWxpZEpzb25PYmplY3QgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgY29uc3QgcHJldHR5ID0gSlNPTi5zdHJpbmdpZnkodmFsaWRKc29uT2JqZWN0LCB1bmRlZmluZWQsIDIpO1xuICAgICAgICB0aGlzLmFic3RyYWN0Q3RybC5zZXRWYWx1ZShwcmV0dHkpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgdGhpcy5zZXRFcnJvckFuZFZhbGlkYXRpb25NZXNzYWdlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRFcnJvckFuZFZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHRoaXMuYWJzdHJhY3RDdHJsLnNldEVycm9ycyh7IGludmFsaWRCb2R5VGVtcGxhdGU6IHRydWUgfSk7XG4gICAgdGhpcy5pbnZhbGlkSlNPTi5lbWl0KHRoaXMubWVzc2FnZSk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyVmFsaWRhdGlvbk1lc3NhZ2UoKSB7XG4gICAgdGhpcy5pbnZhbGlkSlNPTi5lbWl0KHVuZGVmaW5lZCk7XG4gIH1cbn1cbiJdfQ==