import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input } from '@angular/core';
import { MessageDirective } from './message.directive';
import { ValidationPattern } from './validation-pattern';
import { TranslateService } from '@ngx-translate/core';
var MessagesComponent = /** @class */ (function () {
    function MessagesComponent(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    MessagesComponent.prototype.ngAfterContentInit = function () {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce(function (messages, directive) {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    };
    MessagesComponent.prototype.changVisibility = function (show) {
        this.show = show;
        this.ngOnChanges();
    };
    MessagesComponent.prototype.ngOnChanges = function () {
        var _this = this;
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map(function (key) { return _this.toMessage(key, _this.show[key]); });
        }
        else {
            this.messages = [];
        }
    };
    MessagesComponent.prototype.toMessage = function (key, value) {
        return this.translateService.instant(this.messageMap[key], value);
    };
    MessagesComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], MessagesComponent.prototype, "show", void 0);
    tslib_1.__decorate([
        Input()
    ], MessagesComponent.prototype, "defaults", void 0);
    tslib_1.__decorate([
        ContentChildren(MessageDirective)
    ], MessagesComponent.prototype, "customMessages", void 0);
    MessagesComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-messages',
            template: "<small class=\"form-control-feedback-message\">\n  <div style=\"display:block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
        })
    ], MessagesComponent);
    return MessagesComponent;
}());
export { MessagesComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvbWVzc2FnZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNdkQ7SUFPRSwyQkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFON0MsU0FBSSxHQUFPLEVBQUUsQ0FBQztRQUNkLGFBQVEsR0FBTyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7UUFFbkQsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGVBQVUsR0FBUSxFQUFFLENBQUM7SUFFb0MsQ0FBQztJQUUxRCw4Q0FBa0IsR0FBbEI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRLEVBQUUsU0FBUztZQUNoRyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDMUMsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRUQsMkNBQWUsR0FBZixVQUFnQixJQUFRO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsdUNBQVcsR0FBWDtRQUFBLGlCQU9DO1FBTkMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQ25DLEdBQUcsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFTyxxQ0FBUyxHQUFqQixVQUFrQixHQUFHLEVBQUUsS0FBSztRQUMxQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRSxDQUFDOztnQkF6QnFDLGdCQUFnQjs7SUFON0M7UUFBUixLQUFLLEVBQUU7bURBQWU7SUFDZDtRQUFSLEtBQUssRUFBRTt1REFBMkM7SUFDaEI7UUFBbEMsZUFBZSxDQUFDLGdCQUFnQixDQUFDOzZEQUE2QztJQUhwRSxpQkFBaUI7UUFKN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsdU1BQXdDO1NBQ3pDLENBQUM7T0FDVyxpQkFBaUIsQ0FpQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9tZXNzYWdlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUGF0dGVybiB9IGZyb20gJy4vdmFsaWRhdGlvbi1wYXR0ZXJuJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbWVzc2FnZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWVzc2FnZXMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzQ29tcG9uZW50IHtcbiAgQElucHV0KCkgc2hvdzoge30gPSB7fTtcbiAgQElucHV0KCkgZGVmYXVsdHM6IHt9ID0gVmFsaWRhdGlvblBhdHRlcm4ubWVzc2FnZXM7XG4gIEBDb250ZW50Q2hpbGRyZW4oTWVzc2FnZURpcmVjdGl2ZSkgY3VzdG9tTWVzc2FnZXM6IFF1ZXJ5TGlzdDxNZXNzYWdlRGlyZWN0aXZlPjtcbiAgbWVzc2FnZXMgPSBbXTtcbiAgbWVzc2FnZU1hcDogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm1lc3NhZ2VNYXAgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRzLCB0aGlzLmN1c3RvbU1lc3NhZ2VzLnJlZHVjZSgobWVzc2FnZXMsIGRpcmVjdGl2ZSkgPT4ge1xuICAgICAgbWVzc2FnZXNbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlLnRleHQ7XG4gICAgICByZXR1cm4gbWVzc2FnZXM7XG4gICAgfSwge30pKTtcbiAgfVxuXG4gIGNoYW5nVmlzaWJpbGl0eShzaG93OiB7fSkge1xuICAgIHRoaXMuc2hvdyA9IHNob3c7XG4gICAgdGhpcy5uZ09uQ2hhbmdlcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuc2hvdykge1xuICAgICAgdGhpcy5tZXNzYWdlcyA9IE9iamVjdC5rZXlzKHRoaXMuc2hvdylcbiAgICAgICAgLm1hcCgoa2V5KSA9PiB0aGlzLnRvTWVzc2FnZShrZXksIHRoaXMuc2hvd1trZXldKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRvTWVzc2FnZShrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KHRoaXMubWVzc2FnZU1hcFtrZXldLCB2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==