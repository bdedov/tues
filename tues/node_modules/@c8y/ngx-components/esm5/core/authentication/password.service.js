import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { BsModalService } from 'ngx-bootstrap/modal';
import { take } from 'rxjs/operators';
var PasswordService = /** @class */ (function () {
    function PasswordService(modalService) {
        this.modalService = modalService;
        this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    PasswordService.prototype.confirmPassword = function () {
        var modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        return modalInstance.content.passwordConfirmedEmitter.pipe(take(1));
    };
    PasswordService.prototype.hasLowerCase = function (password) {
        return (password.search(/[a-z]/) !== -1);
    };
    PasswordService.prototype.hasUpperCase = function (password) {
        return (password.search(/[A-Z]/) !== -1);
    };
    PasswordService.prototype.hasNumbers = function (password) {
        return (password.search(/[0-9]/) !== -1);
    };
    PasswordService.prototype.hasSpecialChars = function (password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    };
    PasswordService.prototype.getStrengthColor = function (password) {
        var passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    };
    PasswordService.prototype.getDefaultPasswordMinLength = function () {
        return this.DEFAULT_PASSWORD_MIN_LENGTH;
    };
    PasswordService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    PasswordService = tslib_1.__decorate([
        Injectable()
    ], PasswordService);
    return PasswordService;
}());
export { PasswordService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEM7SUFzQkUseUJBQW9CLFlBQTRCO1FBQTVCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQXJCeEMsZ0NBQTJCLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLFVBQUssR0FBMEI7WUFDckMsU0FBUyxFQUFFLE9BQU87WUFDbEIsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUM5QixnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLO1NBQ3pDLENBQUM7UUFDTSxXQUFNLEdBQTBCO1lBQ3RDLFNBQVMsRUFBRSxRQUFRO1lBQ25CLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDOUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsTUFBTTtTQUMxQyxDQUFDO1FBQ00sUUFBRyxHQUEwQjtZQUNuQyxTQUFTLEVBQUUsS0FBSztZQUNoQixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQzVCLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEdBQUc7U0FDdkMsQ0FBQztJQUVpRCxDQUFDO0lBRXBELHlDQUFlLEdBQWY7UUFDRSxJQUFNLGFBQWEsR0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxRQUFnQjtRQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxzQ0FBWSxHQUFaLFVBQWEsUUFBZ0I7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsb0NBQVUsR0FBVixVQUFXLFFBQWdCO1FBQ3pCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELHlDQUFlLEdBQWYsVUFBZ0IsUUFBZ0I7UUFDOUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsMENBQWdCLEdBQWhCLFVBQWlCLFFBQWdCO1FBQy9CLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO1lBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO1NBQy9CLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFVixJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7YUFBTSxJQUFJLGdCQUFnQixJQUFJLENBQUMsRUFBRTtZQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEI7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFFRCxxREFBMkIsR0FBM0I7UUFDRSxPQUFPLElBQUksQ0FBQywyQkFBMkIsQ0FBQztJQUMxQyxDQUFDOztnQkExQ2lDLGNBQWM7O0lBdEJyQyxlQUFlO1FBRDNCLFVBQVUsRUFBRTtPQUNBLGVBQWUsQ0FpRTNCO0lBQUQsc0JBQUM7Q0FBQSxBQWpFRCxJQWlFQztTQWpFWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgfSBmcm9tICcuL3Bhc3N3b3JkLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBERUZBVUxUX1BBU1NXT1JEX01JTl9MRU5HVEggPSA4O1xuXG4gIHByaXZhdGUgR1JFRU46IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICdncmVlbicsXG4gICAgY29sb3I6ICdyZ2IoMCwgMTI4LCAwKScsXG4gICAgZGVzY3JpcHRpb246IGdldHRleHQoJ3N0cm9uZycpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguR1JFRU5cbiAgfTtcbiAgcHJpdmF0ZSBZRUxMT1c6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICd5ZWxsb3cnLFxuICAgIGNvbG9yOiAncmdiKDI1NSwgMjA0LCA1MSknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdtZWRpdW0nKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLllFTExPV1xuICB9O1xuICBwcml2YXRlIFJFRDogUGFzc3dvcmRTdHJlbmd0aENvbG9yID0ge1xuICAgIGNvbG9yTmFtZTogJ3JlZCcsXG4gICAgY29sb3I6ICdyZ2IoMTcwLCAwLCA1MSknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCd3ZWFrJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5SRURcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgY29uZmlybVBhc3N3b3JkKCkge1xuICAgIGNvbnN0IG1vZGFsSW5zdGFuY2U6IGFueSA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQpO1xuICAgIHJldHVybiBtb2RhbEluc3RhbmNlLmNvbnRlbnQucGFzc3dvcmRDb25maXJtZWRFbWl0dGVyLnBpcGUodGFrZSgxKSk7XG4gIH1cblxuICBoYXNMb3dlckNhc2UocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bYS16XS8pICE9PSAtMSk7XG4gIH1cblxuICBoYXNVcHBlckNhc2UocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bQS1aXS8pICE9PSAtMSk7XG4gIH1cblxuICBoYXNOdW1iZXJzKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvWzAtOV0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzU3BlY2lhbENoYXJzKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW14wLTlhLXpBLVpdKy8pICE9PSAtMSk7XG4gIH1cblxuICBnZXRTdHJlbmd0aENvbG9yKHBhc3N3b3JkOiBzdHJpbmcpOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3Ige1xuICAgIGNvbnN0IHBhc3N3b3JkU3RyZW5ndGggPSBmaWx0ZXIoW1xuICAgICAgdGhpcy5oYXNMb3dlckNhc2UocGFzc3dvcmQpLFxuICAgICAgdGhpcy5oYXNVcHBlckNhc2UocGFzc3dvcmQpLFxuICAgICAgdGhpcy5oYXNOdW1iZXJzKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzU3BlY2lhbENoYXJzKHBhc3N3b3JkKVxuICAgIF0pLmxlbmd0aDtcblxuICAgIGlmIChwYXNzd29yZFN0cmVuZ3RoID4gMykge1xuICAgICAgcmV0dXJuIHRoaXMuR1JFRU47XG4gICAgfSBlbHNlIGlmIChwYXNzd29yZFN0cmVuZ3RoID49IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLllFTExPVztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuUkVEO1xuICAgIH1cbiAgfVxuXG4gIGdldERlZmF1bHRQYXNzd29yZE1pbkxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5ERUZBVUxUX1BBU1NXT1JEX01JTl9MRU5HVEg7XG4gIH1cbn1cbiJdfQ==