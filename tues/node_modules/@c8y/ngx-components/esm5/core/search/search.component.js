import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { SearchService } from './search.service';
var SearchComponent = /** @class */ (function () {
    function SearchComponent(searchService) {
        this.searchService = searchService;
        this.icon = 'search';
        this.priority = 0;
        this.search = new EventEmitter();
        this.term = '';
    }
    SearchComponent.prototype.onSearch = function () {
        this.search.emit(this);
    };
    SearchComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.template = undefined;
        this.viewInitTimeout = setTimeout(function () { return _this.searchService.add(_this); });
    };
    SearchComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.searchService.remove(this);
    };
    SearchComponent.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], SearchComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input()
    ], SearchComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Input()
    ], SearchComponent.prototype, "priority", void 0);
    tslib_1.__decorate([
        ViewChild('template', { static: false })
    ], SearchComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        Output()
    ], SearchComponent.prototype, "search", void 0);
    tslib_1.__decorate([
        Input()
    ], SearchComponent.prototype, "term", void 0);
    SearchComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-search',
            template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
        })
    ], SearchComponent);
    return SearchComponent;
}());
export { SearchComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3NlYXJjaC9zZWFyY2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNakQ7SUFVRSx5QkFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFSdkMsU0FBSSxHQUFXLFFBQVEsQ0FBQztRQUN4QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3JDLFNBQUksR0FBVyxFQUFFLENBQUM7SUFJeUIsQ0FBQztJQUVyRCxrQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELHlDQUFlLEdBQWY7UUFBQSxpQkFHQztRQUZDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFjLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0UsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDOztnQkFka0MsYUFBYTs7SUFUdkM7UUFBUixLQUFLLEVBQUU7aURBQWM7SUFDYjtRQUFSLEtBQUssRUFBRTtpREFBeUI7SUFDeEI7UUFBUixLQUFLLEVBQUU7cURBQXNCO0lBQ1U7UUFBdkMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQztxREFBZTtJQUM1QztRQUFULE1BQU0sRUFBRTttREFBcUM7SUFDckM7UUFBUixLQUFLLEVBQUU7aURBQW1CO0lBTmhCLGVBQWU7UUFKM0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsZ0ZBQXNDO1NBQ3ZDLENBQUM7T0FDVyxlQUFlLENBeUIzQjtJQUFELHNCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6QlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaCB9IGZyb20gJy4vc2VhcmNoLm1vZGVsJztcbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICcuL3NlYXJjaC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNlYXJjaCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIFNlYXJjaCB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nID0gJ3NlYXJjaCc7XG4gIEBJbnB1dCgpIHByaW9yaXR5OiBudW1iZXIgPSAwO1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZScsIHtzdGF0aWM6IGZhbHNlfSkgdGVtcGxhdGU6IGFueTtcbiAgQE91dHB1dCgpIHNlYXJjaCA9IG5ldyBFdmVudEVtaXR0ZXI8U2VhcmNoPigpO1xuICBASW5wdXQoKSB0ZXJtOiBzdHJpbmcgPSAnJztcblxuICBwcml2YXRlIHZpZXdJbml0VGltZW91dDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UpIHsgfVxuXG4gIG9uU2VhcmNoKCkge1xuICAgIHRoaXMuc2VhcmNoLmVtaXQodGhpcyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnZpZXdJbml0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZWFyY2hTZXJ2aWNlLmFkZCh0aGlzIGFzIFNlYXJjaCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudmlld0luaXRUaW1lb3V0KTtcbiAgICB0aGlzLnNlYXJjaFNlcnZpY2UucmVtb3ZlKHRoaXMgYXMgU2VhcmNoKTtcbiAgfVxufVxuIl19