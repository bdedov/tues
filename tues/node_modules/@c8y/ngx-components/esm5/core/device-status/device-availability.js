var _a, _b;
import { gettext } from '../i18n/gettext';
import { formatDate } from '@angular/common';
// TODO remove  when c8y-icon will works
export var SendStatus;
(function (SendStatus) {
    SendStatus["AVAILABLE"] = "AVAILABLE";
    SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
    SendStatus["UNKNOWN"] = "UNKNOWN";
    SendStatus["MAINTENANCE"] = "MAINTENANCE";
    SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
})(SendStatus || (SendStatus = {}));
export var PushStatus;
(function (PushStatus) {
    PushStatus["CONNECTED"] = "CONNECTED";
    PushStatus["DISCONNECTED"] = "DISCONNECTED";
    PushStatus["UNKNOWN"] = "UNKNOWN";
    PushStatus["MAINTENANCE"] = "MAINTENANCE";
})(PushStatus || (PushStatus = {}));
export var SendStatusLabels;
(function (SendStatusLabels) {
    SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
    SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
    SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
    SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
    SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(SendStatusLabels || (SendStatusLabels = {}));
export var PushStatusLabels;
(function (PushStatusLabels) {
    PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
    PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
    PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
    PushStatusLabels[PushStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(PushStatusLabels || (PushStatusLabels = {}));
export var deviceAvailabilityIconMap = {
    sendData: (_a = {},
        _a[SendStatus.AVAILABLE] = {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        _a[SendStatus.UNAVAILABLE] = {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        _a[SendStatus.UNKNOWN] = {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        _a[SendStatus.NOT_MONITORED] = {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        _a),
    push: (_b = {},
        _b[PushStatus.CONNECTED] = {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        _b[PushStatus.DISCONNECTED] = {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        _b[PushStatus.UNKNOWN] = {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        _b[PushStatus.MAINTENANCE] = {
            icon: 'wrench',
            class: 'statusAlert'
        },
        _b),
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
var ɵ0 = function (lastMessage, translateService) {
    var date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang);
    return translateService.instant(gettext('Device last request:\n{{date}}'), { date: date });
};
export var tooltips = {
    sendStatusConnected: ɵ0,
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWF2YWlsYWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1zdGF0dXMvZGV2aWNlLWF2YWlsYWJpbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3Qyx3Q0FBd0M7QUFFeEMsTUFBTSxDQUFOLElBQVksVUFNWDtBQU5ELFdBQVksVUFBVTtJQUNwQixxQ0FBdUIsQ0FBQTtJQUN2Qix5Q0FBMkIsQ0FBQTtJQUMzQixpQ0FBbUIsQ0FBQTtJQUNuQix5Q0FBMkIsQ0FBQTtJQUMzQiw2Q0FBK0IsQ0FBQTtBQUNqQyxDQUFDLEVBTlcsVUFBVSxLQUFWLFVBQVUsUUFNckI7QUFFRCxNQUFNLENBQU4sSUFBWSxVQUtYO0FBTEQsV0FBWSxVQUFVO0lBQ3BCLHFDQUF1QixDQUFBO0lBQ3ZCLDJDQUE2QixDQUFBO0lBQzdCLGlDQUFtQixDQUFBO0lBQ25CLHlDQUEyQixDQUFBO0FBQzdCLENBQUMsRUFMVyxVQUFVLEtBQVYsVUFBVSxRQUtyQjtBQUVELE1BQU0sQ0FBTixJQUFZLGdCQU1YO0FBTkQsV0FBWSxnQkFBZ0I7SUFDMUIsaURBQVksT0FBTyxDQUFDLHlCQUF5QixDQUFDLGVBQUEsQ0FBQTtJQUM5QyxxREFBZ0IsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLG1CQUFBLENBQUE7SUFDekQsbURBQWMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLGlCQUFBLENBQUE7SUFDakQsK0NBQVUsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLGFBQUEsQ0FBQTtJQUNuRCxtREFBYyxPQUFPLENBQUMsNkJBQTZCLENBQUMsaUJBQUEsQ0FBQTtBQUN0RCxDQUFDLEVBTlcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQU0zQjtBQUVELE1BQU0sQ0FBTixJQUFZLGdCQUtYO0FBTEQsV0FBWSxnQkFBZ0I7SUFDMUIsaURBQVksT0FBTyxDQUFDLHlCQUF5QixDQUFDLGVBQUEsQ0FBQTtJQUM5QyxvREFBZSxPQUFPLENBQUMsMkJBQTJCLENBQUMsa0JBQUEsQ0FBQTtJQUNuRCwrQ0FBVSxPQUFPLENBQUMsMkJBQTJCLENBQUMsYUFBQSxDQUFBO0lBQzlDLG1EQUFjLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxpQkFBQSxDQUFBO0FBQ3RELENBQUMsRUFMVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBSzNCO0FBRUQsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBQUc7SUFDdkMsUUFBUTtRQUNOLEdBQUMsVUFBVSxDQUFDLFNBQVMsSUFBRztZQUN0QixJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxVQUFVO1NBQ2xCO1FBQ0QsR0FBQyxVQUFVLENBQUMsV0FBVyxJQUFHO1lBQ3hCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLFdBQVc7U0FDbkI7UUFDRCxHQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUc7WUFDcEIsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELEdBQUMsVUFBVSxDQUFDLGFBQWEsSUFBRztZQUMxQixJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCO1dBQ0Y7SUFDRCxJQUFJO1FBQ0YsR0FBQyxVQUFVLENBQUMsU0FBUyxJQUFHO1lBQ3RCLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsS0FBSyxFQUFFLFVBQVU7U0FDbEI7UUFDRCxHQUFDLFVBQVUsQ0FBQyxZQUFZLElBQUc7WUFDekIsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixLQUFLLEVBQUUsZUFBZTtTQUN2QjtRQUNELEdBQUMsVUFBVSxDQUFDLE9BQU8sSUFBRztZQUNwQixJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCO1FBQ0QsR0FBQyxVQUFVLENBQUMsV0FBVyxJQUFHO1lBQ3hCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7V0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGFBQWE7U0FDckI7S0FDRjtDQUNGLENBQUM7U0FHcUIsVUFBQyxXQUFXLEVBQUUsZ0JBQWdCO0lBQ2pELElBQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkYsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUpILE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRztJQUN0QixtQkFBbUIsSUFHbEI7SUFDRCxzQkFBc0IsRUFBRSxPQUFPLENBQUMsMEJBQTBCLENBQUM7SUFDM0QsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO0lBQ2hFLHNCQUFzQixFQUFFLE9BQU8sQ0FDN0IsbUZBQW1GLENBQ3BGO0lBQ0QsV0FBVyxFQUFFLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztDQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbi8vIFRPRE8gcmVtb3ZlICB3aGVuIGM4eS1pY29uIHdpbGwgd29ya3NcblxuZXhwb3J0IGVudW0gU2VuZFN0YXR1cyB7XG4gIEFWQUlMQUJMRSA9ICdBVkFJTEFCTEUnLFxuICBVTkFWQUlMQUJMRSA9ICdVTkFWQUlMQUJMRScsXG4gIFVOS05PV04gPSAnVU5LTk9XTicsXG4gIE1BSU5URU5BTkNFID0gJ01BSU5URU5BTkNFJyxcbiAgTk9UX01PTklUT1JFRCA9ICdOT1RfTU9OSVRPUkVEJ1xufVxuXG5leHBvcnQgZW51bSBQdXNoU3RhdHVzIHtcbiAgQ09OTkVDVEVEID0gJ0NPTk5FQ1RFRCcsXG4gIERJU0NPTk5FQ1RFRCA9ICdESVNDT05ORUNURUQnLFxuICBVTktOT1dOID0gJ1VOS05PV04nLFxuICBNQUlOVEVOQU5DRSA9ICdNQUlOVEVOQU5DRSdcbn1cblxuZXhwb3J0IGVudW0gU2VuZFN0YXR1c0xhYmVscyB7XG4gIEFWQUlMQUJMRSA9IGdldHRleHQoJ1NlbmQgY29ubmVjdGlvbjogb25saW5lJyksXG4gIE5PVF9NT05JVE9SRUQgPSBnZXR0ZXh0KCdTZW5kIGNvbm5lY3Rpb246IG5vdCBtb25pdG9yZWQnKSxcbiAgVU5BVkFJTEFCTEUgPSBnZXR0ZXh0KCdTZW5kIGNvbm5lY3Rpb246IG9mZmxpbmUnKSxcbiAgVU5LTk9XTiA9IGdldHRleHQoJ1NlbmQgY29ubmVjdGlvbiBzdGF0dXMgdW5rbm93bicpLFxuICBNQUlOVEVOQU5DRSA9IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG59XG5cbmV4cG9ydCBlbnVtIFB1c2hTdGF0dXNMYWJlbHMge1xuICBDT05ORUNURUQgPSBnZXR0ZXh0KCdQdXNoIGNvbm5lY3Rpb246IGFjdGl2ZScpLFxuICBESVNDT05ORUNURUQgPSBnZXR0ZXh0KCdQdXNoIGNvbm5lY3Rpb246IGluYWN0aXZlJyksXG4gIFVOS05PV04gPSBnZXR0ZXh0KCdQdXNoIGNvbm5lY3Rpb246IGluYWN0aXZlJyksXG4gIE1BSU5URU5BTkNFID0gZ2V0dGV4dCgnRGV2aWNlIGlzIHVuZGVyIG1haW50ZW5hbmNlJylcbn1cblxuZXhwb3J0IGNvbnN0IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAgPSB7XG4gIHNlbmREYXRhOiB7XG4gICAgW1NlbmRTdGF0dXMuQVZBSUxBQkxFXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctcmlnaHQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNPaydcbiAgICB9LFxuICAgIFtTZW5kU3RhdHVzLlVOQVZBSUxBQkxFXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctcmlnaHQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNOb2snXG4gICAgfSxcbiAgICBbU2VuZFN0YXR1cy5VTktOT1dOXToge1xuICAgICAgaWNvbjogJ2xvbmctYXJyb3ctcmlnaHQnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNVbmtub3duJ1xuICAgIH0sXG4gICAgW1NlbmRTdGF0dXMuTk9UX01PTklUT1JFRF06IHtcbiAgICAgIGljb246ICdsb25nLWFycm93LXJpZ2h0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9XG4gIH0sXG4gIHB1c2g6IHtcbiAgICBbUHVzaFN0YXR1cy5DT05ORUNURURdOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1sZWZ0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzT2snXG4gICAgfSxcbiAgICBbUHVzaFN0YXR1cy5ESVNDT05ORUNURURdOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1sZWZ0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9LFxuICAgIFtQdXNoU3RhdHVzLlVOS05PV05dOiB7XG4gICAgICBpY29uOiAnbG9uZy1hcnJvdy1sZWZ0JyxcbiAgICAgIGNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9LFxuICAgIFtQdXNoU3RhdHVzLk1BSU5URU5BTkNFXToge1xuICAgICAgaWNvbjogJ3dyZW5jaCcsXG4gICAgICBjbGFzczogJ3N0YXR1c0FsZXJ0J1xuICAgIH1cbiAgfSxcbiAgZGV2aWNlOiB7XG4gICAgTUFJTlRFTkFOQ0U6IHtcbiAgICAgIGljb246ICd3cmVuY2gnLFxuICAgICAgY2xhc3M6ICdzdGF0dXNBbGVydCdcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0b29sdGlwcyA9IHtcbiAgc2VuZFN0YXR1c0Nvbm5lY3RlZDogKGxhc3RNZXNzYWdlLCB0cmFuc2xhdGVTZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IGZvcm1hdERhdGUobmV3IERhdGUobGFzdE1lc3NhZ2UpLCAnbWVkaXVtJywgdHJhbnNsYXRlU2VydmljZS5jdXJyZW50TGFuZyk7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChnZXR0ZXh0KCdEZXZpY2UgbGFzdCByZXF1ZXN0Olxcbnt7ZGF0ZX19JyksIHsgZGF0ZSB9KTtcbiAgfSxcbiAgc2VuZFN0YXR1c0Rpc2Nvbm5lY3RlZDogZ2V0dGV4dCgnQ29ubmVjdGlvbiBub3QgbW9uaXRvcmVkJyksXG4gIHB1c2hTdGF0dXNDb25uZWN0ZWQ6IGdldHRleHQoJ0Nvbm5lY3Rpb24gdG8gZGV2aWNlIGVzdGFibGlzaGVkJyksXG4gIHB1c2hTdGF0dXNEaXNjb25uZWN0ZWQ6IGdldHRleHQoXG4gICAgJ0Nvbm5lY3Rpb24gdG8gZGV2aWNlIG5vdCBlc3RhYmxpc2hlZCAobm90IHN1cHBvcnRlZCBieSBkZXZpY2Ugb3Igbm8gY29ubmVjdGl2aXR5KSdcbiAgKSxcbiAgbWFpbnRlbmFuY2U6IGdldHRleHQoJ0RldmljZSBpcyB1bmRlciBtYWludGVuYW5jZScpXG59O1xuIl19