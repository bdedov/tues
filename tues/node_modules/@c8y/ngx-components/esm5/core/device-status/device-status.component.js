import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { deviceAvailabilityIconMap, PushStatusLabels, SendStatusLabels, tooltips } from './device-availability';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
var DeviceStatusComponent = /** @class */ (function () {
    function DeviceStatusComponent(translateService) {
        this.translateService = translateService;
    }
    Object.defineProperty(DeviceStatusComponent.prototype, "node", {
        set: function (value) {
            this._mo = value.mo || value;
        },
        enumerable: true,
        configurable: true
    });
    DeviceStatusComponent.prototype.get = function () {
        return this._mo;
    };
    DeviceStatusComponent.prototype.ngOnChanges = function () {
        this.setStatusProperites();
    };
    DeviceStatusComponent.prototype.ngAfterContentInit = function () {
        this.setStatusProperites();
    };
    DeviceStatusComponent.prototype.setStatusProperites = function () {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus =
            this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
    };
    DeviceStatusComponent.prototype.status = function () {
        var statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    };
    DeviceStatusComponent.prototype.getMaintenanceStatus = function () {
        return {
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        };
    };
    DeviceStatusComponent.prototype.getSendPushStatus = function () {
        return {
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        };
    };
    DeviceStatusComponent.prototype.getSendStatusTooltip = function (device) {
        var availability = device && device.c8y_Availability;
        var lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    };
    DeviceStatusComponent.prototype.getPushStatusTooltip = function (isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    };
    DeviceStatusComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    tslib_1.__decorate([
        Input('mo')
    ], DeviceStatusComponent.prototype, "node", null);
    DeviceStatusComponent = tslib_1.__decorate([
        Component({
            selector: 'device-status',
            template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    title=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
        })
    ], DeviceStatusComponent);
    return DeviceStatusComponent;
}());
export { DeviceStatusComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kZXZpY2Utc3RhdHVzL2RldmljZS1zdGF0dXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBK0IsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLFFBQVEsRUFDVCxNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFNaEM7SUFXRSwrQkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBVjdDLHNCQUFJLHVDQUFJO2FBQVIsVUFBUyxLQUFLO1lBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFVRCxtQ0FBRyxHQUFIO1FBQ0UsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELGtEQUFrQixHQUFsQjtRQUNFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxtREFBbUIsR0FBbkI7UUFDRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLElBQUksU0FBUyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxVQUFVO1lBQ2IsSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxzQ0FBTSxHQUFOO1FBQ0UsSUFBSSxRQUFRLENBQUM7UUFFYixJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxhQUFhLEVBQUU7WUFDbEYsUUFBUSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQ3hDO2FBQU07WUFDTCxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDckM7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsb0RBQW9CLEdBQXBCO1FBQ0UsT0FBTztZQUNMLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGlCQUFpQixFQUFFO2dCQUNqQixJQUFJLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUN2RCxLQUFLLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLO2dCQUN6RCxPQUFPLEVBQUUsUUFBUSxDQUFDLFdBQVc7YUFDOUI7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLGlEQUFpQixHQUF6QjtRQUNFLE9BQU87WUFDTCxVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSTtnQkFDOUQsS0FBSyxFQUFFLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSztnQkFDaEUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO2dCQUN2QixLQUFLLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDeEMsT0FBTyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQzdDO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLElBQUksRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUk7Z0JBQzFELEtBQUssRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUs7Z0JBQzVELE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDdkIsS0FBSyxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ3hDLE9BQU8sRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxXQUFXLENBQUM7YUFDcEU7WUFDRCxpQkFBaUIsRUFBRSxLQUFLO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRU8sb0RBQW9CLEdBQTVCLFVBQTZCLE1BQU07UUFDakMsSUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUN2RCxJQUFNLFdBQVcsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUM3RCxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sUUFBUSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN6RTtRQUNELE9BQU8sUUFBUSxDQUFDLHNCQUFzQixDQUFDO0lBQ3pDLENBQUM7SUFFTyxvREFBb0IsR0FBNUIsVUFBNkIsUUFBUTtRQUNuQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUM7SUFDbkYsQ0FBQzs7Z0JBOUVxQyxnQkFBZ0I7O0lBVnpDO1FBQVosS0FBSyxDQUFDLElBQUksQ0FBQztxREFFWDtJQUhVLHFCQUFxQjtRQUpqQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZUFBZTtZQUN6QiwrNEJBQTZDO1NBQzlDLENBQUM7T0FDVyxxQkFBcUIsQ0EwRmpDO0lBQUQsNEJBQUM7Q0FBQSxBQTFGRCxJQTBGQztTQTFGWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBBZnRlckNvbnRlbnRJbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAsXG4gIFB1c2hTdGF0dXNMYWJlbHMsXG4gIFNlbmRTdGF0dXNMYWJlbHMsXG4gIHRvb2x0aXBzXG59IGZyb20gJy4vZGV2aWNlLWF2YWlsYWJpbGl0eSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkZXZpY2Utc3RhdHVzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RldmljZS1zdGF0dXMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZVN0YXR1c0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgnbW8nKSBzZXQgbm9kZSh2YWx1ZSkge1xuICAgIHRoaXMuX21vID0gdmFsdWUubW8gfHwgdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIF9tbztcbiAgcHJpdmF0ZSByZXF1aXJlZEF2YWlsYWJpbGl0eTtcbiAgcHJpdmF0ZSBhdmFpbGFiaWxpdHlTdGF0dXM7XG4gIHByaXZhdGUgcHVzaFN0YXR1cztcbiAgcHJpdmF0ZSBzZW5kU3RhdHVzO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5zZXRTdGF0dXNQcm9wZXJpdGVzKCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXRTdGF0dXNQcm9wZXJpdGVzKCk7XG4gIH1cblxuICBzZXRTdGF0dXNQcm9wZXJpdGVzKCkge1xuICAgIHRoaXMucmVxdWlyZWRBdmFpbGFiaWxpdHkgPSBnZXQodGhpcy5fbW8sICdjOHlfUmVxdWlyZWRBdmFpbGFiaWxpdHknKTtcbiAgICB0aGlzLmF2YWlsYWJpbGl0eVN0YXR1cyA9IGdldCh0aGlzLl9tbywgJ2M4eV9BdmFpbGFiaWxpdHkuc3RhdHVzJyk7XG5cbiAgICB0aGlzLnB1c2hTdGF0dXMgPSBnZXQodGhpcy5fbW8sICdjOHlfQ29ubmVjdGlvbi5zdGF0dXMnKSB8fCAnVU5LTk9XTic7XG4gICAgdGhpcy5zZW5kU3RhdHVzID1cbiAgICAgIHRoaXMuYXZhaWxhYmlsaXR5U3RhdHVzIHx8ICh0aGlzLnJlcXVpcmVkQXZhaWxhYmlsaXR5ID8gJ1VOS05PV04nIDogJ05PVF9NT05JVE9SRUQnKTtcbiAgfVxuXG4gIHN0YXR1cygpIHtcbiAgICBsZXQgc3RhdHVzZXM7XG5cbiAgICBpZiAodGhpcy5hdmFpbGFiaWxpdHlTdGF0dXMgPT09ICdNQUlOVEVOQU5DRScgfHwgdGhpcy5wdXNoU3RhdHVzID09PSAnTUFJTlRFTkFOQ0UnKSB7XG4gICAgICBzdGF0dXNlcyA9IHRoaXMuZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzZXMgPSB0aGlzLmdldFNlbmRQdXNoU3RhdHVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXR1c2VzO1xuICB9XG5cbiAgZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmRTdGF0dXM6IGZhbHNlLFxuICAgICAgcHVzaFN0YXR1czogZmFsc2UsXG4gICAgICBtYWludGVuYW5jZVN0YXR1czoge1xuICAgICAgICBpY29uOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLmRldmljZS5NQUlOVEVOQU5DRS5pY29uLFxuICAgICAgICBjbGFzczogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5kZXZpY2UuTUFJTlRFTkFOQ0UuY2xhc3MsXG4gICAgICAgIHRvb2x0aXA6IHRvb2x0aXBzLm1haW50ZW5hbmNlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VuZFB1c2hTdGF0dXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmRTdGF0dXM6IHtcbiAgICAgICAgaWNvbjogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5zZW5kRGF0YVt0aGlzLnNlbmRTdGF0dXNdLmljb24sXG4gICAgICAgIGNsYXNzOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLnNlbmREYXRhW3RoaXMuc2VuZFN0YXR1c10uY2xhc3MsXG4gICAgICAgIHN0YXR1czogdGhpcy5zZW5kU3RhdHVzLFxuICAgICAgICBsYWJlbDogU2VuZFN0YXR1c0xhYmVsc1t0aGlzLnNlbmRTdGF0dXNdLFxuICAgICAgICB0b29sdGlwOiB0aGlzLmdldFNlbmRTdGF0dXNUb29sdGlwKHRoaXMuX21vKVxuICAgICAgfSxcbiAgICAgIHB1c2hTdGF0dXM6IHtcbiAgICAgICAgaWNvbjogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5wdXNoW3RoaXMucHVzaFN0YXR1c10uaWNvbixcbiAgICAgICAgY2xhc3M6IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAucHVzaFt0aGlzLnB1c2hTdGF0dXNdLmNsYXNzLFxuICAgICAgICBzdGF0dXM6IHRoaXMucHVzaFN0YXR1cyxcbiAgICAgICAgbGFiZWw6IFB1c2hTdGF0dXNMYWJlbHNbdGhpcy5wdXNoU3RhdHVzXSxcbiAgICAgICAgdG9vbHRpcDogdGhpcy5nZXRQdXNoU3RhdHVzVG9vbHRpcCh0aGlzLnB1c2hTdGF0dXMgPT09ICdDT05ORUNURUQnKVxuICAgICAgfSxcbiAgICAgIG1haW50ZW5hbmNlU3RhdHVzOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldFNlbmRTdGF0dXNUb29sdGlwKGRldmljZSkge1xuICAgIGNvbnN0IGF2YWlsYWJpbGl0eSA9IGRldmljZSAmJiBkZXZpY2UuYzh5X0F2YWlsYWJpbGl0eTtcbiAgICBjb25zdCBsYXN0TWVzc2FnZSA9IGF2YWlsYWJpbGl0eSAmJiBhdmFpbGFiaWxpdHkubGFzdE1lc3NhZ2U7XG4gICAgaWYgKGxhc3RNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gdG9vbHRpcHMuc2VuZFN0YXR1c0Nvbm5lY3RlZChsYXN0TWVzc2FnZSwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvb2x0aXBzLnNlbmRTdGF0dXNEaXNjb25uZWN0ZWQ7XG4gIH1cblxuICBwcml2YXRlIGdldFB1c2hTdGF0dXNUb29sdGlwKGlzQWN0aXZlKSB7XG4gICAgcmV0dXJuIGlzQWN0aXZlID8gdG9vbHRpcHMucHVzaFN0YXR1c0Nvbm5lY3RlZCA6IHRvb2x0aXBzLnB1c2hTdGF0dXNEaXNjb25uZWN0ZWQ7XG4gIH1cbn1cbiJdfQ==