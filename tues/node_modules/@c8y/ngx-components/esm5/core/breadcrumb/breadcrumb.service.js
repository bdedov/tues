import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { fromTrigger, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export var HOOK_BREADCRUMB = new InjectionToken('BreadcrumbFactory');
var BreadcrumbService = /** @class */ (function (_super) {
    tslib_1.__extends(BreadcrumbService, _super);
    function BreadcrumbService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_BREADCRUMB, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (breadcrumbs) { return _this.sortByPreferredPath(breadcrumbs); }), shareReplay(1));
        return _this;
    }
    Object.defineProperty(BreadcrumbService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the action bar in the header.
     * @param item The item to add.
     */
    BreadcrumbService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an action bar item from the header.
     * @param item The item to remove.
     */
    BreadcrumbService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    /**
     * Refresh the extension factories
     */
    BreadcrumbService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    /**
     * Sets the crumb that contains that path to the top.
     * @param path The path to prefer.
     */
    BreadcrumbService.prototype.selectPreferredByPath = function (path) {
        this.preferredPath = path;
        this.refresh();
    };
    BreadcrumbService.prototype.sortByPreferredPath = function (breadcrumbs) {
        var _this = this;
        if (this.preferredPath) {
            return breadcrumbs.sort(function (bc) {
                return bc.items.find(function (item) { return !!item.path.match(_this.preferredPath); }) ? -1 : 1;
            });
        }
        return breadcrumbs;
    };
    BreadcrumbService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    BreadcrumbService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: BreadcrumbService, providedIn: "root" });
    BreadcrumbService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], BreadcrumbService);
    return BreadcrumbService;
}(StateService));
export { BreadcrumbService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYnJlYWRjcnVtYi9icmVhZGNydW1iLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBR2hFLE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBS3ZFO0lBQXVDLDZDQUFZO0lBTWpELDJCQUFvQixRQUFrQixFQUFFLE1BQWM7UUFBdEQsWUFDRSxpQkFBTyxTQVFSO1FBVG1CLGNBQVEsR0FBUixRQUFRLENBQVU7UUFKN0Isb0JBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLFlBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBa0IsSUFBSSxHQUFHLEVBQWMsQ0FBQyxDQUFDO1FBSzVFLEtBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JELGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQXRDLENBQXNDO1lBQzVDLGNBQWMsQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDO1NBQzVCLENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFyQyxDQUFxQyxDQUFDLEVBQ3pELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDOztJQUNKLENBQUM7SUFFRCxzQkFBSSxvQ0FBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQUVEOzs7T0FHRztJQUNILCtCQUFHLEdBQUgsVUFBSSxJQUFnQjtRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtDQUFNLEdBQU4sVUFBTyxJQUFnQjtRQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUNBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxpREFBcUIsR0FBckIsVUFBc0IsSUFBWTtRQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELCtDQUFtQixHQUFuQixVQUFvQixXQUFXO1FBQS9CLGlCQU9DO1FBTkMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ3hCLE9BQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFvQixJQUFLLE9BQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsRUFBckMsQ0FBcUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUF2RixDQUF1RixDQUN4RixDQUFDO1NBQ0g7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOztnQkF4RDZCLFFBQVE7Z0JBQVUsTUFBTTs7O0lBTjNDLGlCQUFpQjtRQUg3QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csaUJBQWlCLENBK0Q3Qjs0QkE1RUQ7Q0E0RUMsQUEvREQsQ0FBdUMsWUFBWSxHQStEbEQ7U0EvRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZnJvbVRyaWdnZXIsIHN0YXRlVG9GYWN0b3J5IH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vc3RhdGUtc2VydmljZS5hYnN0cmFjdCc7XG5pbXBvcnQgeyBCcmVhZGNydW1iLCBCcmVhZGNydW1iSXRlbSB9IGZyb20gJy4vYnJlYWRjcnVtYi5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBIT09LX0JSRUFEQ1JVTUIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0JyZWFkY3J1bWJGYWN0b3J5Jyk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJTZXJ2aWNlIGV4dGVuZHMgU3RhdGVTZXJ2aWNlIHtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT47XG4gIHJlYWRvbmx5IHJlZnJlc2hUcmlnZ2VyID0gbmV3IFN1YmplY3QoKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTZXQ8QnJlYWRjcnVtYj4+KG5ldyBTZXQ8QnJlYWRjcnVtYj4oKSk7XG4gIHByaXZhdGUgcHJlZmVycmVkUGF0aDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCByb3V0ZXI6IFJvdXRlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pdGVtcyQgPSBmcm9tVHJpZ2dlcihyb3V0ZXIsIHRoaXMucmVmcmVzaFRyaWdnZXIsIFtcbiAgICAgICgpID0+IHRoaXMuaW5qZWN0b3IuZ2V0KEhPT0tfQlJFQURDUlVNQiwgW10pLFxuICAgICAgc3RhdGVUb0ZhY3RvcnkodGhpcy5zdGF0ZSQpXG4gICAgXSkucGlwZShcbiAgICAgIG1hcChicmVhZGNydW1icyA9PiB0aGlzLnNvcnRCeVByZWZlcnJlZFBhdGgoYnJlYWRjcnVtYnMpKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxuXG4gIGdldCBzdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSQudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyBpdGVtIHRvIHRoZSBhY3Rpb24gYmFyIGluIHRoZSBoZWFkZXIuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIGFkZC5cbiAgICovXG4gIGFkZChpdGVtOiBCcmVhZGNydW1iKSB7XG4gICAgdGhpcy5zdGF0ZS5hZGQoaXRlbSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGFjdGlvbiBiYXIgaXRlbSBmcm9tIHRoZSBoZWFkZXIuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZShpdGVtOiBCcmVhZGNydW1iKSB7XG4gICAgdGhpcy5zdGF0ZS5kZWxldGUoaXRlbSk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIHRoZSBleHRlbnNpb24gZmFjdG9yaWVzXG4gICAqL1xuICByZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaFRyaWdnZXIubmV4dCgxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjcnVtYiB0aGF0IGNvbnRhaW5zIHRoYXQgcGF0aCB0byB0aGUgdG9wLlxuICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB0byBwcmVmZXIuXG4gICAqL1xuICBzZWxlY3RQcmVmZXJyZWRCeVBhdGgocGF0aDogc3RyaW5nKSB7XG4gICAgdGhpcy5wcmVmZXJyZWRQYXRoID0gcGF0aDtcbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgfVxuXG4gIHNvcnRCeVByZWZlcnJlZFBhdGgoYnJlYWRjcnVtYnMpIHtcbiAgICBpZiAodGhpcy5wcmVmZXJyZWRQYXRoKSB7XG4gICAgICByZXR1cm4gYnJlYWRjcnVtYnMuc29ydChiYyA9PlxuICAgICAgICBiYy5pdGVtcy5maW5kKChpdGVtOiBCcmVhZGNydW1iSXRlbSkgPT4gISFpdGVtLnBhdGgubWF0Y2godGhpcy5wcmVmZXJyZWRQYXRoKSkgPyAtMSA6IDFcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBicmVhZGNydW1icztcbiAgfVxufVxuIl19