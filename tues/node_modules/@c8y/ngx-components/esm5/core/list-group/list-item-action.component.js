import * as tslib_1 from "tslib";
import { Component, Output, Input, ViewChild, EventEmitter } from '@angular/core';
/**
 * Actions are functions that can be executed on the
 * current list item. They are displayed next to the
 * item and can be grouped in a dropdown.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *     Delete
 *   </c8y-li-action>
 *   <c8y-li-action (click)="(false)" icon="rocket">
 *     Launch to space
 *   </c8y-li-action>
 * </c8y-li>
 * ```
 */
var ListItemActionComponent = /** @class */ (function () {
    function ListItemActionComponent() {
        /**
         * An EventEmitter to determine what to do if the
         * action is triggered.
         */
        this.click = new EventEmitter();
    }
    tslib_1.__decorate([
        ViewChild('template', { static: false })
    ], ListItemActionComponent.prototype, "template", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemActionComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemActionComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Output()
    ], ListItemActionComponent.prototype, "click", void 0);
    ListItemActionComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-list-item-action, c8y-li-action',
            template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n"
        })
    ], ListItemActionComponent);
    return ListItemActionComponent;
}());
export { ListItemActionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9saXN0LWdyb3VwL2xpc3QtaXRlbS1hY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRjs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUtIO0lBSkE7UUFxQkU7OztXQUdHO1FBRUgsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFDbEMsQ0FBQztJQWxCQztRQURDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7NkRBQzNCO0lBTWQ7UUFEQyxLQUFLLEVBQUU7MERBQ007SUFLZDtRQURDLEtBQUssRUFBRTt5REFDSztJQU1iO1FBREMsTUFBTSxFQUFFOzBEQUN1QjtJQXRCckIsdUJBQXVCO1FBSm5DLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxxQ0FBcUM7WUFDL0Msd1RBQWdEO1NBQ2pELENBQUM7T0FDVyx1QkFBdUIsQ0F1Qm5DO0lBQUQsOEJBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQXZCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgSW5wdXQsIFZpZXdDaGlsZCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQWN0aW9ucyBhcmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIG9uIHRoZVxuICogY3VycmVudCBsaXN0IGl0ZW0uIFRoZXkgYXJlIGRpc3BsYXllZCBuZXh0IHRvIHRoZVxuICogaXRlbSBhbmQgY2FuIGJlIGdyb3VwZWQgaW4gYSBkcm9wZG93bi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1saT5cbiAqICAgPGM4eS1saS1hY3Rpb24gKGNsaWNrKT1cImRlbGV0ZURldmljZShkZXZpY2UuaWQpXCIgaWNvbj1cInRpbWVzXCI+XG4gKiAgICAgRGVsZXRlXG4gKiAgIDwvYzh5LWxpLWFjdGlvbj5cbiAqICAgPGM4eS1saS1hY3Rpb24gKGNsaWNrKT1cIihmYWxzZSlcIiBpY29uPVwicm9ja2V0XCI+XG4gKiAgICAgTGF1bmNoIHRvIHNwYWNlXG4gKiAgIDwvYzh5LWxpLWFjdGlvbj5cbiAqIDwvYzh5LWxpPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWl0ZW0tYWN0aW9uLCBjOHktbGktYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtaXRlbS1hY3Rpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIExpc3RJdGVtQWN0aW9uQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ3RlbXBsYXRlJywgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIHRlbXBsYXRlOiBhbnk7XG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgdG8gZGlzcGxheSAoeW91IGNhbiBhbHRlcm5hdGl2ZWx5IHVzZVxuICAgKiBjb250ZW50IHByb2plY3Rpb24gdG8gZGlzcGxheSB0aGUgbGFiZWwpLlxuICAgKi9cbiAgQElucHV0KClcbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIHRvIHVzZVxuICAgKi9cbiAgQElucHV0KClcbiAgaWNvbjogc3RyaW5nO1xuICAvKipcbiAgICogQW4gRXZlbnRFbWl0dGVyIHRvIGRldGVybWluZSB3aGF0IHRvIGRvIGlmIHRoZVxuICAgKiBhY3Rpb24gaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgQE91dHB1dCgpXG4gIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG59XG4iXX0=