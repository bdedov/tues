import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
var ListItemRadioComponent = /** @class */ (function () {
    function ListItemRadioComponent() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    ListItemRadioComponent_1 = ListItemRadioComponent;
    /**
     * Resets the native radio element.
     */
    ListItemRadioComponent.prototype.reset = function () {
        this.radio.nativeElement.checked = false;
    };
    /**
     * @ignore
     */
    ListItemRadioComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    };
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    ListItemRadioComponent.prototype.change = function (checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    };
    /**
     * Registers an onChange event.
     */
    ListItemRadioComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * Registers an onTouch event.
     */
    ListItemRadioComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @ignore
     */
    ListItemRadioComponent.prototype.writeValue = function (value) {
        this.model = value;
    };
    var ListItemRadioComponent_1;
    tslib_1.__decorate([
        ViewChild('radio', { static: true })
    ], ListItemRadioComponent.prototype, "radio", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Output()
    ], ListItemRadioComponent.prototype, "onSelect", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemRadioComponent.prototype, "value", void 0);
    ListItemRadioComponent = ListItemRadioComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'c8y-list-item-radio, c8y-li-radio',
            template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
            host: {
                class: 'c8y-list__item__radio'
            },
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return ListItemRadioComponent_1; })
                }
            ]
        })
    ], ListItemRadioComponent);
    return ListItemRadioComponent;
}());
export { ListItemRadioComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLXJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixTQUFTLEVBQ1QsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RTs7Ozs7Ozs7OztHQVVHO0FBZUg7SUFkQTtRQW1CRTs7V0FFRztRQUVILGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakI7O1dBRUc7UUFFSCxTQUFJLEdBQUcsaUJBQWlCLENBQUM7UUFDekI7O1dBRUc7UUFFSCxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBRUgsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFxRXpDLENBQUM7K0JBN0ZZLHNCQUFzQjtJQTBDakM7O09BRUc7SUFDSCxzQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCw0Q0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7WUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCx1Q0FBTSxHQUFOLFVBQU8sT0FBTztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaURBQWdCLEdBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsa0RBQWlCLEdBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkNBQVUsR0FBVixVQUFXLEtBQWM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7SUF4RnFDO1FBQXJDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7eURBQW1CO0lBS3hEO1FBREMsS0FBSyxFQUFFOzREQUNTO0lBS2pCO1FBREMsS0FBSyxFQUFFO3dEQUNpQjtJQUt6QjtRQURDLEtBQUssRUFBRTs0REFDa0I7SUFLMUI7UUFEQyxNQUFNLEVBQUU7NERBQzhCO0lBSTlCO1FBQVIsS0FBSyxFQUFFO3lEQUFZO0lBNUJULHNCQUFzQjtRQWRsQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsbUNBQW1DO1lBQzdDLHNSQUErQztZQUMvQyxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxFQUFFLHVCQUF1QjthQUMvQjtZQUNELFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixLQUFLLEVBQUUsSUFBSTtvQkFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx3QkFBc0IsRUFBdEIsQ0FBc0IsQ0FBQztpQkFDdEQ7YUFDRjtTQUNGLENBQUM7T0FDVyxzQkFBc0IsQ0E2RmxDO0lBQUQsNkJBQUM7Q0FBQSxBQTdGRCxJQTZGQztTQTdGWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkLFxuICBmb3J3YXJkUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIGRpc3BsYXkgYSByYWRpbyBidXR0b24gaW4gYSBjOHktbGkuIFVzZSBpdCB3aXRoIGNvbnRlbnQgcHJvamVjdGlvbi4gSXRcbiAqIGNhbiBiZSB1c2VkIHN0YW5kYWxvbmUgb3Igd2l0aCBhbiBuZ01vZGVsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8Yzh5LWxpPlxuICogICA8Yzh5LWxpLXJhZGlvPjwvYzh5LWxpLXJhZGlvPlxuICogPC9jOHktbGk+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWxpc3QtaXRlbS1yYWRpbywgYzh5LWxpLXJhZGlvJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtaXRlbS1yYWRpby5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2M4eS1saXN0X19pdGVtX19yYWRpbydcbiAgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IExpc3RJdGVtUmFkaW9Db21wb25lbnQpXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExpc3RJdGVtUmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBAVmlld0NoaWxkKCdyYWRpbycsIHsgc3RhdGljOiB0cnVlIH0pIHJhZGlvOiBFbGVtZW50UmVmO1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSByYWRpbyBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcmFkaW8gKHVzZSBkaWZmZXJlbnQgbmFtZXMgZm9yIGRpZmZlcmVudCByYWRpbyBncm91cHMpLlxuICAgKi9cbiAgQElucHV0KClcbiAgbmFtZSA9ICdsaXN0X2l0ZW1fcmFkaW8nO1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSByYWRpbyBpcyBkaXNhYmxlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBBbiBldmVudCBlbWl0dGVkIGFzIHNvb24gYXMgdGhlIHJhZGlvIGlzIHNlbGVjdGVkLlxuICAgKi9cbiAgQE91dHB1dCgpXG4gIG9uU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdmFsdWUuXG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZTogYW55O1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbW9kZWw6IGFueTtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBuYXRpdmUgcmFkaW8gZWxlbWVudC5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMucmFkaW8ubmF0aXZlRWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLnNlbGVjdGVkICYmICFjaGFuZ2VzLnNlbGVjdGVkLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU2VsZWN0LmVtaXQoY2hhbmdlcy5zZWxlY3RlZC5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgcmFkaW8gaXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIGNoZWNrZWQgU2hvdWxkIGl0IGJlIGNoZWNrZWQgb3Igbm90P1xuICAgKi9cbiAgY2hhbmdlKGNoZWNrZWQpIHtcbiAgICB0aGlzLm9uU2VsZWN0LmVtaXQoY2hlY2tlZCk7XG4gICAgdGhpcy5tb2RlbCA9IHRoaXMudmFsdWU7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5tb2RlbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9uVG91Y2hlZCkge1xuICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIG9uQ2hhbmdlIGV2ZW50LlxuICAgKi9cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhbiBvblRvdWNoIGV2ZW50LlxuICAgKi9cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubW9kZWwgPSB2YWx1ZTtcbiAgfVxufVxuIl19