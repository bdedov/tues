import * as tslib_1 from "tslib";
import { Output, EventEmitter, Component, Input, forwardRef } from '@angular/core';
import { CheckboxControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
/**
 * A component to display checkboxes in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-checkbox></c8y-li-checkbox>
 * </c8y-li>
 * ```
 */
var ListItemCheckboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ListItemCheckboxComponent, _super);
    function ListItemCheckboxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indicates if the checkbox is selected.
         */
        _this.selected = false;
        /**
         * Indicates if the checkbox is disabled.
         */
        _this.disabled = false;
        /**
         * An event emitted as soon as the checkbox is selected.
         */
        _this.onSelect = new EventEmitter();
        return _this;
    }
    ListItemCheckboxComponent_1 = ListItemCheckboxComponent;
    /**
     * @ignore
     */
    ListItemCheckboxComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    };
    /**
     * Selects the checkbox.
     * @param value The value to pass.
     */
    ListItemCheckboxComponent.prototype.select = function (value) {
        this.onSelect.emit(value);
        this.onChange(value);
    };
    var ListItemCheckboxComponent_1;
    tslib_1.__decorate([
        Input()
    ], ListItemCheckboxComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input()
    ], ListItemCheckboxComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Output()
    ], ListItemCheckboxComponent.prototype, "onSelect", void 0);
    ListItemCheckboxComponent = ListItemCheckboxComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
            template: "<label class=\"c8y-checkbox\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
            host: {
                class: 'c8y-list__item__check'
            },
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return ListItemCheckboxComponent_1; })
                }
            ]
        })
    ], ListItemCheckboxComponent);
    return ListItemCheckboxComponent;
}(CheckboxControlValueAccessor));
export { ListItemCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWpGOzs7Ozs7Ozs7O0dBVUc7QUFlSDtJQUErQyxxREFBNEI7SUFkM0U7UUFBQSxxRUFnREM7UUFqQ0M7O1dBRUc7UUFFSCxjQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCOztXQUVHO1FBRUgsY0FBUSxHQUFHLEtBQUssQ0FBQztRQUNqQjs7V0FFRztRQUVILGNBQVEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDOztJQW1CekMsQ0FBQztrQ0FsQ1kseUJBQXlCO0lBaUJwQzs7T0FFRztJQUNILCtDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILDBDQUFNLEdBQU4sVUFBTyxLQUFLO1FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDOztJQTVCRDtRQURDLEtBQUssRUFBRTsrREFDUztJQUtqQjtRQURDLEtBQUssRUFBRTsrREFDUztJQUtqQjtRQURDLE1BQU0sRUFBRTsrREFDOEI7SUFmNUIseUJBQXlCO1FBZHJDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSx5Q0FBeUM7WUFDbkQsdVJBQWtEO1lBQ2xELElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUsdUJBQXVCO2FBQy9CO1lBQ0QsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLEtBQUssRUFBRSxJQUFJO29CQUNYLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDJCQUF5QixFQUF6QixDQUF5QixDQUFDO2lCQUN6RDthQUNGO1NBQ0YsQ0FBQztPQUNXLHlCQUF5QixDQWtDckM7SUFBRCxnQ0FBQztDQUFBLEFBbENELENBQStDLDRCQUE0QixHQWtDMUU7U0FsQ1kseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudCwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIGRpc3BsYXkgY2hlY2tib3hlcyBpbiBhIGM4eS1saS4gVXNlIGl0IHdpdGggY29udGVudCBwcm9qZWN0aW9uLiBJdFxuICogY2FuIGJlIHVzZWQgc3RhbmRhbG9uZSBvciB3aXRoIGFuIG5nTW9kZWwuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxjOHktbGk+XG4gKiAgIDxjOHktbGktY2hlY2tib3g+PC9jOHktbGktY2hlY2tib3g+XG4gKiA8L2M4eS1saT5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbGlzdC1pdGVtLWNoZWNrYm94LCBjOHktbGktY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGlzdC1pdGVtLWNoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnYzh5LWxpc3RfX2l0ZW1fX2NoZWNrJ1xuICB9LFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTGlzdEl0ZW1DaGVja2JveENvbXBvbmVudClcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTGlzdEl0ZW1DaGVja2JveENvbXBvbmVudCBleHRlbmRzIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSBjaGVja2JveCBpcyBzZWxlY3RlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkID0gZmFsc2U7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNoZWNrYm94IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZWQgYXMgc29vbiBhcyB0aGUgY2hlY2tib3ggaXMgc2VsZWN0ZWQuXG4gICAqL1xuICBAT3V0cHV0KClcbiAgb25TZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5zZWxlY3RlZCAmJiAhY2hhbmdlcy5zZWxlY3RlZC5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5vblNlbGVjdC5lbWl0KGNoYW5nZXMuc2VsZWN0ZWQuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyB0aGUgY2hlY2tib3guXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcy5cbiAgICovXG4gIHNlbGVjdCh2YWx1ZSkge1xuICAgIHRoaXMub25TZWxlY3QuZW1pdCh2YWx1ZSk7XG4gICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==