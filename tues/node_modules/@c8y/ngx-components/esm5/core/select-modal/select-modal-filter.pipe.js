import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
var SelectModalFilterPipe = /** @class */ (function () {
    function SelectModalFilterPipe() {
    }
    SelectModalFilterPipe.prototype.transform = function (items, filterTerm) {
        var _this = this;
        return filterTerm.trim().length === 0
            ? items
            : items.filter(function (item) {
                var allValues = _this.extractValues(item);
                var filteredValues = allValues.filter(function (value) { return _this.filterContainString(value, filterTerm); });
                return filteredValues.length > 0;
            });
    };
    SelectModalFilterPipe.prototype.filterContainString = function (value, filterTerm) {
        var term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    };
    SelectModalFilterPipe.prototype.extractValues = function (item) {
        var _this = this;
        var values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach(function (key) {
            if (Array.isArray(item[key])) {
                item[key].forEach(function (obj) { return values.concat(_this.extractValues(obj)); });
            }
            if (item[key] instanceof Object) {
                values = values.concat(_this.extractValues(item[key]));
            }
        });
        return values;
    };
    SelectModalFilterPipe = tslib_1.__decorate([
        Pipe({
            name: 'selectModalFilterPipe',
        })
    ], SelectModalFilterPipe);
    return SelectModalFilterPipe;
}());
export { SelectModalFilterPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW1vZGFsLWZpbHRlci5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvc2VsZWN0LW1vZGFsL3NlbGVjdC1tb2RhbC1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFNcEQ7SUFBQTtJQStCQSxDQUFDO0lBOUJDLHlDQUFTLEdBQVQsVUFBVSxLQUEyQixFQUFFLFVBQWtCO1FBQXpELGlCQVFDO1FBUEMsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDbkMsQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQXdCO2dCQUN0QyxJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQyxJQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBM0MsQ0FBMkMsQ0FBQyxDQUFDO2dCQUNoRyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLG1EQUFtQixHQUEzQixVQUE0QixLQUFhLEVBQUUsVUFBa0I7UUFDM0QsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLDZDQUFhLEdBQXJCLFVBQXNCLElBQUk7UUFBMUIsaUJBY0M7UUFiQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQzVCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUF0QyxDQUFzQyxDQUFFLENBQUM7YUFDcEU7WUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxNQUFNLEVBQUU7Z0JBQy9CLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQTlCVSxxQkFBcUI7UUFIakMsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLHVCQUF1QjtTQUM5QixDQUFDO09BQ1cscUJBQXFCLENBK0JqQztJQUFELDRCQUFDO0NBQUEsQUEvQkQsSUErQkM7U0EvQlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVNlbGVjdE1vZGFsT2JqZWN0IH0gZnJvbSAnLi9zZWxlY3QtbW9kYWwubW9kZWwnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdzZWxlY3RNb2RhbEZpbHRlclBpcGUnLFxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RNb2RhbEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGl0ZW1zOiBJU2VsZWN0TW9kYWxPYmplY3RbXSwgZmlsdGVyVGVybTogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gZmlsdGVyVGVybS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICA/IGl0ZW1zXG4gICAgICA6IGl0ZW1zLmZpbHRlcigoaXRlbTogSVNlbGVjdE1vZGFsT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGFsbFZhbHVlcyA9IHRoaXMuZXh0cmFjdFZhbHVlcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRWYWx1ZXMgPSBhbGxWYWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4gdGhpcy5maWx0ZXJDb250YWluU3RyaW5nKHZhbHVlLCBmaWx0ZXJUZXJtKSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFZhbHVlcy5sZW5ndGggPiAwO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckNvbnRhaW5TdHJpbmcodmFsdWU6IHN0cmluZywgZmlsdGVyVGVybTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGVybSA9IGZpbHRlclRlcm0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtKSA+IC0xO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0VmFsdWVzKGl0ZW0pIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgaWYgKCBpdGVtLnZhbHVlICkge1xuICAgICAgdmFsdWVzLnB1c2goaXRlbS52YWx1ZSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbVtrZXldKSkge1xuICAgICAgICBpdGVtW2tleV0uZm9yRWFjaCggb2JqID0+IHZhbHVlcy5jb25jYXQodGhpcy5leHRyYWN0VmFsdWVzKG9iaikpICk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodGhpcy5leHRyYWN0VmFsdWVzKGl0ZW1ba2V5XSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbn1cbiJdfQ==