import * as tslib_1 from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { filter, finalize, map } from 'rxjs/operators';
/**
 * A wrapper class for handling realtime notifications in RxJS fashion.
 */
var RealtimeService = /** @class */ (function () {
    function RealtimeService(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
        this.isActive = true;
    }
    Object.defineProperty(RealtimeService.prototype, "active", {
        /**
         * A flag displaying if realtime notifications are currently active.
         */
        get: function () {
            return this.isActive;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get an Observable of all realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
     */
    RealtimeService.prototype.onAll$ = function (entityOrId) {
        var _this = this;
        var subject$ = this.getSubjectForChannel(entityOrId);
        return subject$.pipe(finalize(function () {
            if (subject$.observers.length === 1 && subject$.observers[0].closed) {
                subject$.stop();
                _this.subjects$.delete(subject$.channel);
            }
        }));
    };
    /**
     * Subscribes again all realtime channels with active observers.
     */
    RealtimeService.prototype.start = function () {
        if (!this.isActive) {
            this.subjects$.forEach(function (subject$) {
                subject$.start();
            });
            this.isActive = true;
        }
    };
    /**
     * Stops realtime notifications and unsubscribes all realtime channels.
     */
    RealtimeService.prototype.stop = function () {
        if (this.isActive) {
            this.subjects$.forEach(function (subject$) {
                subject$.stop();
            });
            this.isActive = false;
        }
    };
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    RealtimeService.prototype.onCreate$ = function () {
        return this.onAll$().pipe(filter(function (msg) { return msg.realtimeAction === 'CREATE'; }), map(function (msg) { return msg.data; }));
    };
    /**
     * Get an Observable of all UPDATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of updated entity objects.
     */
    RealtimeService.prototype.onUpdate$ = function (entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(function (msg) { return msg.realtimeAction === 'UPDATE'; }), map(function (msg) { return msg.data; }));
    };
    /**
     * Get an Observable of all DELETE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of deleted entity objects.
     */
    RealtimeService.prototype.onDelete$ = function (entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(function (msg) { return msg.realtimeAction === 'DELETE'; }), map(function (msg) { return coerceNumberProperty(msg.data); }));
    };
    RealtimeService.prototype.getIdString = function (reference) {
        var id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    };
    RealtimeService.prototype.getChannel = function (entityOrId) {
        return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
    };
    RealtimeService.prototype.getSubjectForChannel = function (entityOrId) {
        var channel = this.getChannel(entityOrId);
        var subject$;
        if (this.subjects$.has(channel)) {
            subject$ = this.subjects$.get(channel);
        }
        else {
            subject$ = new RealtimeSubject(channel, this.realtime);
            this.subjects$.set(channel, subject$);
        }
        return subject$;
    };
    return RealtimeService;
}());
export { RealtimeService };
// tslint:disable-next-line: max-classes-per-file
var RealtimeSubject = /** @class */ (function (_super) {
    tslib_1.__extends(RealtimeSubject, _super);
    function RealtimeSubject(realtimeChannel, realtime) {
        var _this = _super.call(this) || this;
        _this.realtimeChannel = realtimeChannel;
        _this.realtime = realtime;
        _this.start();
        return _this;
    }
    Object.defineProperty(RealtimeSubject.prototype, "channel", {
        get: function () {
            return this.realtimeChannel;
        },
        enumerable: true,
        configurable: true
    });
    RealtimeSubject.prototype.start = function () {
        var _this = this;
        if (!this.realtimeSubscription) {
            this.realtimeSubscription = this.realtime.subscribe(this.realtimeChannel, function (msg) {
                var data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                _this.next(data);
            });
        }
    };
    RealtimeSubject.prototype.stop = function () {
        if (this.realtimeSubscription) {
            this.realtime.unsubscribe(this.realtimeSubscription);
            this.realtimeSubscription = null;
        }
    };
    return RealtimeSubject;
}(Subject));
//# sourceMappingURL=data:application/json;base64,