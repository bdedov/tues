import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { DeviceGridService, DeviceGridColumn, CustomDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { gettext } from '@c8y/ngx-components';
import { find } from 'lodash-es';
var DeviceGridExampleComponent = /** @class */ (function () {
    function DeviceGridExampleComponent(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    DeviceGridExampleComponent.prototype.getExampleWithStandardColumns = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.getExampleWithStandardColumnsAndSavedFilteringSorting = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        var nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.getExampleWithCustomColumnAndPredefinedFiltering = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        var typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.onExampleSelect = function (example) {
        this.columnsInput = example.columns;
    };
    DeviceGridExampleComponent.ctorParameters = function () { return [
        { type: DeviceGridService }
    ]; };
    DeviceGridExampleComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-device-grid-example',
            template: "<div class=\"content-fullpage\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card \">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">Input</h4>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"selectedExample\"\n            (ngModelChange)=\"onExampleSelect($event)\"\n          >\n            <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n              example.label\n            }}</option></select\n          ><span></span>\n        </div>\n        <pre\n          >{{ columnsInput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <span>\n          <h4 class=\"card-title\">Output</h4>\n        </span>\n      </div>\n      <div class=\"card-block\">\n        <pre\n          >{{ deviceQueryStringOutput | json }}\n        </pre>\n        <pre\n          >{{ columnsOutput | json }}\n        </pre>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], DeviceGridExampleComponent);
    return DeviceGridExampleComponent;
}());
export { DeviceGridExampleComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkLWV4YW1wbGUvIiwic291cmNlcyI6WyJkZXZpY2UtZ3JpZC1leGFtcGxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixzQkFBc0IsRUFDdkIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1qQztJQU9FLG9DQUFzQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUN4RCxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ2QsSUFBSSxDQUFDLDZCQUE2QixFQUFFO1lBQ3BDLElBQUksQ0FBQyxxREFBcUQsRUFBRTtZQUM1RCxJQUFJLENBQUMsZ0RBQWdELEVBQUU7U0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFRCxrRUFBNkIsR0FBN0I7UUFDRSxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMzRCxPQUFPO1lBQ0wsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixPQUFPLFNBQUE7U0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELDBGQUFxRCxHQUFyRDtRQUNFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzNELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNuRCxVQUFVLENBQUMsbUJBQW1CLEdBQUc7WUFDL0IsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDO1NBQ2xCLENBQUM7UUFDRixVQUFVLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUM5QixPQUFPO1lBQ0wsS0FBSyxFQUFFLCtDQUErQztZQUN0RCxPQUFPLFNBQUE7U0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHFGQUFnRCxHQUFoRDtRQUNFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzNELElBQU0sVUFBVSxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztRQUNoRCxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUN6QixVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUN6QixVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxVQUFVLENBQUMsbUJBQW1CLEdBQUc7WUFDL0IsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDM0IsQ0FBQztRQUNGLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqQyxPQUFPO1lBQ0wsS0FBSyxFQUFFLDREQUE0RDtZQUNuRSxPQUFPLFNBQUE7U0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELG9EQUFlLEdBQWYsVUFBZ0IsT0FBTztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDdEMsQ0FBQzs7Z0JBL0N3QyxpQkFBaUI7O0lBUC9DLDBCQUEwQjtRQUp0QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUseUJBQXlCO1lBQ25DLGs3Q0FBbUQ7U0FDcEQsQ0FBQztPQUNXLDBCQUEwQixDQXVEdEM7SUFBRCxpQ0FBQztDQUFBLEFBdkRELElBdURDO1NBdkRZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRGV2aWNlR3JpZFNlcnZpY2UsXG4gIERldmljZUdyaWRDb2x1bW4sXG4gIEN1c3RvbURldmljZUdyaWRDb2x1bW5cbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IGZpbmQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZGV2aWNlLWdyaWQtZXhhbXBsZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9kZXZpY2UtZ3JpZC1leGFtcGxlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcmlkRXhhbXBsZUNvbXBvbmVudCB7XG4gIGV4YW1wbGVzOiBBcnJheTx7IGxhYmVsOiBzdHJpbmc7IGNvbHVtbnM6IERldmljZUdyaWRDb2x1bW5bXSB9PjtcbiAgc2VsZWN0ZWRFeGFtcGxlO1xuICBjb2x1bW5zSW5wdXQ6IERldmljZUdyaWRDb2x1bW5bXTtcbiAgY29sdW1uc091dHB1dDogRGV2aWNlR3JpZENvbHVtbltdO1xuICBkZXZpY2VRdWVyeVN0cmluZ091dHB1dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkZXZpY2VHcmlkU2VydmljZTogRGV2aWNlR3JpZFNlcnZpY2UpIHtcbiAgICB0aGlzLmV4YW1wbGVzID0gW1xuICAgICAgdGhpcy5nZXRFeGFtcGxlV2l0aFN0YW5kYXJkQ29sdW1ucygpLFxuICAgICAgdGhpcy5nZXRFeGFtcGxlV2l0aFN0YW5kYXJkQ29sdW1uc0FuZFNhdmVkRmlsdGVyaW5nU29ydGluZygpLFxuICAgICAgdGhpcy5nZXRFeGFtcGxlV2l0aEN1c3RvbUNvbHVtbkFuZFByZWRlZmluZWRGaWx0ZXJpbmcoKVxuICAgIF07XG4gIH1cblxuICBnZXRFeGFtcGxlV2l0aFN0YW5kYXJkQ29sdW1ucygpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0Q29sdW1ucygpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogJ1N0YW5kYXJkIGNvbHVtbnMnLFxuICAgICAgY29sdW1uc1xuICAgIH07XG4gIH1cblxuICBnZXRFeGFtcGxlV2l0aFN0YW5kYXJkQ29sdW1uc0FuZFNhdmVkRmlsdGVyaW5nU29ydGluZygpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5nZXREZWZhdWx0Q29sdW1ucygpO1xuICAgIGNvbnN0IG5hbWVDb2x1bW4gPSBmaW5kKGNvbHVtbnMsIHsgbmFtZTogJ25hbWUnIH0pO1xuICAgIG5hbWVDb2x1bW4uZXh0ZXJuYWxGaWx0ZXJRdWVyeSA9IHtcbiAgICAgIG5hbWVzOiBbJypUZW1wKiddXG4gICAgfTtcbiAgICBuYW1lQ29sdW1uLnNvcnRPcmRlciA9ICdkZXNjJztcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICdTdGFuZGFyZCBjb2x1bW5zIHdpdGggc2F2ZWQgZmlsdGVyaW5nL3NvcnRpbmcnLFxuICAgICAgY29sdW1uc1xuICAgIH07XG4gIH1cblxuICBnZXRFeGFtcGxlV2l0aEN1c3RvbUNvbHVtbkFuZFByZWRlZmluZWRGaWx0ZXJpbmcoKSB7XG4gICAgY29uc3QgY29sdW1ucyA9IHRoaXMuZGV2aWNlR3JpZFNlcnZpY2UuZ2V0RGVmYXVsdENvbHVtbnMoKTtcbiAgICBjb25zdCB0eXBlQ29sdW1uID0gbmV3IEN1c3RvbURldmljZUdyaWRDb2x1bW4oKTtcbiAgICB0eXBlQ29sdW1uLm5hbWUgPSAndHlwZSc7XG4gICAgdHlwZUNvbHVtbi5wYXRoID0gJ3R5cGUnO1xuICAgIHR5cGVDb2x1bW4uaGVhZGVyID0gZ2V0dGV4dCgnVHlwZScpO1xuICAgIHR5cGVDb2x1bW4uZXh0ZXJuYWxGaWx0ZXJRdWVyeSA9IHtcbiAgICAgIGVxdWFsczogWydjOHlfTVFUVERldmljZSddXG4gICAgfTtcbiAgICBjb2x1bW5zLnNwbGljZSgyLCAwLCB0eXBlQ29sdW1uKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICdTdGFuZGFyZCBjb2x1bW5zIHdpdGggY3VzdG9tIG9uZSB3aXRoIHByZWRlZmluZWQgZmlsdGVyaW5nJyxcbiAgICAgIGNvbHVtbnNcbiAgICB9O1xuICB9XG5cbiAgb25FeGFtcGxlU2VsZWN0KGV4YW1wbGUpIHtcbiAgICB0aGlzLmNvbHVtbnNJbnB1dCA9IGV4YW1wbGUuY29sdW1ucztcbiAgfVxufVxuIl19