import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { TrustedCertificatesComponent } from './trusted-certificates.component';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AddTrustedCertificateComponent } from './add-trusted-certificate.component';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { TrustedCertificatesNavigationFactory } from './trusted-certificates-navigation.factory';
var trustedCertificatesRoutes = [
    {
        path: 'trusted-certificates',
        component: TrustedCertificatesComponent
    }
];
var TrustedCertificatesModule = /** @class */ (function () {
    function TrustedCertificatesModule() {
    }
    TrustedCertificatesModule = tslib_1.__decorate([
        NgModule({
            declarations: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
            exports: [],
            imports: [
                CoreModule,
                CommonModule,
                RouterModule.forRoot(trustedCertificatesRoutes, { useHash: true }),
                BsDropdownModule.forRoot(),
                TooltipModule,
                ReactiveFormsModule,
                ButtonsModule,
                PopoverModule
            ],
            entryComponents: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: TrustedCertificatesNavigationFactory,
                    multi: true
                }
            ]
        })
    ], TrustedCertificatesModule);
    return TrustedCertificatesModule;
}());
export { TrustedCertificatesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1c3RlZC1jZXJ0aWZpY2F0ZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy90cnVzdGVkLWNlcnRpZmljYXRlcy8iLCJzb3VyY2VzIjpbInRydXN0ZWQtY2VydGlmaWNhdGVzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQVMsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUVqRyxJQUFNLHlCQUF5QixHQUFZO0lBQ3pDO1FBQ0UsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixTQUFTLEVBQUUsNEJBQTRCO0tBQ3hDO0NBQ0YsQ0FBQztBQXdCRjtJQUFBO0lBQXdDLENBQUM7SUFBNUIseUJBQXlCO1FBdEJyQyxRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSw4QkFBOEIsQ0FBQztZQUM1RSxPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sRUFBRTtnQkFDUCxVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osWUFBWSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztnQkFDbEUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO2dCQUMxQixhQUFhO2dCQUNiLG1CQUFtQjtnQkFDbkIsYUFBYTtnQkFDYixhQUFhO2FBQ2Q7WUFDRCxlQUFlLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSw4QkFBOEIsQ0FBQztZQUMvRSxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsUUFBUSxFQUFFLG9DQUFvQztvQkFDOUMsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7T0FDVyx5QkFBeUIsQ0FBRztJQUFELGdDQUFDO0NBQUEsQUFBekMsSUFBeUM7U0FBNUIseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlLCBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCBDb3JlTW9kdWxlLCBIT09LX05BVklHQVRPUl9OT0RFUyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHJ1c3RlZENlcnRpZmljYXRlc0NvbXBvbmVudCB9IGZyb20gJy4vdHJ1c3RlZC1jZXJ0aWZpY2F0ZXMuY29tcG9uZW50JztcbmltcG9ydCB7IEJzRHJvcGRvd25Nb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2Ryb3Bkb3duJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5pbXBvcnQgeyBBZGRUcnVzdGVkQ2VydGlmaWNhdGVDb21wb25lbnQgfSBmcm9tICcuL2FkZC10cnVzdGVkLWNlcnRpZmljYXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25zTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9idXR0b25zJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUcnVzdGVkQ2VydGlmaWNhdGVzTmF2aWdhdGlvbkZhY3RvcnkgfSBmcm9tICcuL3RydXN0ZWQtY2VydGlmaWNhdGVzLW5hdmlnYXRpb24uZmFjdG9yeSc7XG5cbmNvbnN0IHRydXN0ZWRDZXJ0aWZpY2F0ZXNSb3V0ZXM6IFJvdXRlW10gPSBbXG4gIHtcbiAgICBwYXRoOiAndHJ1c3RlZC1jZXJ0aWZpY2F0ZXMnLFxuICAgIGNvbXBvbmVudDogVHJ1c3RlZENlcnRpZmljYXRlc0NvbXBvbmVudFxuICB9XG5dO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtUcnVzdGVkQ2VydGlmaWNhdGVzQ29tcG9uZW50LCBBZGRUcnVzdGVkQ2VydGlmaWNhdGVDb21wb25lbnRdLFxuICBleHBvcnRzOiBbXSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZS5mb3JSb290KHRydXN0ZWRDZXJ0aWZpY2F0ZXNSb3V0ZXMsIHsgdXNlSGFzaDogdHJ1ZSB9KSxcbiAgICBCc0Ryb3Bkb3duTW9kdWxlLmZvclJvb3QoKSxcbiAgICBUb29sdGlwTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgQnV0dG9uc01vZHVsZSxcbiAgICBQb3BvdmVyTW9kdWxlXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1RydXN0ZWRDZXJ0aWZpY2F0ZXNDb21wb25lbnQsIEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICAgICAgdXNlQ2xhc3M6IFRydXN0ZWRDZXJ0aWZpY2F0ZXNOYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRydXN0ZWRDZXJ0aWZpY2F0ZXNNb2R1bGUge31cbiJdfQ==