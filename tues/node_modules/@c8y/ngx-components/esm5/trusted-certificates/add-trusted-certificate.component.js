import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { ITrustedCertificate, TrustedCertificateService } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
var AddTrustedCertificateComponent = /** @class */ (function () {
    function AddTrustedCertificateComponent(modal, trustedCertificateService, alertService) {
        var _this = this;
        this.modal = modal;
        this.trustedCertificateService = trustedCertificateService;
        this.alertService = alertService;
        this.maxAllowedFiles = 1;
        this.AUTO_REGISTRATION_POPOVER = gettext('All devices with credentials signed by this certificate will be able to communicate with the platform without a prior registration.');
        this.trustedCertificate = {
            status: 'DISABLED'
        };
        this.fileIsUploaded = false;
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    AddTrustedCertificateComponent.prototype.uploadFile = function (dropped) {
        var _this = this;
        this.fileIsUploaded = false;
        if (dropped) {
            var reader_1 = new FileReader();
            reader_1.onload = function () {
                _this.fileIsUploaded = true;
                _this.trustedCertificate.certInPemFormat = reader_1.result;
            };
            reader_1.readAsText(dropped[0].file);
        }
    };
    AddTrustedCertificateComponent.prototype.save = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.trustedCertificateService.create(this.trustedCertificate)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Certificate saved.'));
                        this._save();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AddTrustedCertificateComponent.prototype.close = function () {
        this._cancel();
        this.modal.hide();
    };
    AddTrustedCertificateComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: TrustedCertificateService },
        { type: AlertService }
    ]; };
    AddTrustedCertificateComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-add-trusted-certificate',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"certificate\"></i>\n    <h4 translate>\n      Add trusted certificate\n    </h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #addTrustedCertificateForm=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"certificateName\">Certificate name</label>\n          <input\n            id=\"certificateName\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"certificateName\"\n            [(ngModel)]=\"trustedCertificate.name\"\n            placeholder=\"{{ 'e.g. My certificate' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label translate for=\"certificate\">Certificate</label>\n          <c8y-drop-area\n            class=\"drop-area-sm\"\n            (dropped)=\"uploadFile($event)\"\n            [loadingMessage]=\"'Importing, please wait.' | translate\"\n            [title]=\"'Paste the certificate in PEM format.' | translate\"\n            [maxAllowedFiles]=\"maxAllowedFiles\"\n          >\n          </c8y-drop-area>\n        </c8y-form-group>\n        <c8y-form-group>\n          <label title=\"{{ 'Auto registration' | translate }}\" class=\"c8y-checkbox\">\n            <input\n              id=\"autoRegistration\"\n              type=\"checkbox\"\n              name=\"autoRegistration\"\n              [(ngModel)]=\"trustedCertificate.autoRegistrationEnabled\"\n            /><span></span>\n            <span>{{ 'Auto registration' | translate }}</span>\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ AUTO_REGISTRATION_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n        </c8y-form-group>\n        <button\n          type=\"button\"\n          class=\"btn\"\n          name=\"certificateStatus\"\n          [(ngModel)]=\"trustedCertificate.status\"\n          btnCheckbox\n          btnCheckboxTrue=\"ENABLED\"\n          btnCheckboxFalse=\"DISABLED\"\n        >\n          <span\n            title=\"{{ 'Disabled`trusted certificate status`' | translate }}\"\n            [hidden]=\"trustedCertificate.status !== 'DISABLED'\"\n          >\n            {{ 'Disabled`trusted certificate status`' | translate }}\n          </span>\n          <span\n            title=\"{{ 'Enabled`trusted certificate status`' | translate }}\"\n            [hidden]=\"trustedCertificate.status !== 'ENABLED'\"\n          >\n            {{ 'Enabled`trusted certificate status`' | translate }}\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button \n      title=\"{{ 'Cancel' | translate }}\" \n      class=\"btn btn-default\" \n      (click)=\"close()\">\n      {{ 'Cancel' | translate }}\n    </button>\n\n    <button\n      title=\"{{ 'Add certificate' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"\n        addTrustedCertificateForm.form.invalid ||\n        addTrustedCertificateForm.form.pristine ||\n        !fileIsUploaded\n      \"\n    >\n      {{ 'Add certificate' | translate }}\n    </button>\n  </div>\n</div>"
        })
    ], AddTrustedCertificateComponent);
    return AddTrustedCertificateComponent;
}());
export { AddTrustedCertificateComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy90cnVzdGVkLWNlcnRpZmljYXRlcy8iLCJzb3VyY2VzIjpbImFkZC10cnVzdGVkLWNlcnRpZmljYXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNNUQ7SUFlRSx3Q0FDVSxLQUFpQixFQUNqQix5QkFBb0QsRUFDcEQsWUFBMEI7UUFIcEMsaUJBSUk7UUFITSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFDcEQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFqQnBDLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLDhCQUF5QixHQUFHLE9BQU8sQ0FBQyxxSUFBcUksQ0FBQyxDQUFDO1FBQzNLLHVCQUFrQixHQUFpQztZQUNqRCxNQUFNLEVBQUUsVUFBVTtTQUNuQixDQUFDO1FBQ0YsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFFdkIsV0FBTSxHQUFpQixJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pELEtBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBUUEsQ0FBQztJQUVKLG1EQUFVLEdBQVYsVUFBVyxPQUFzQjtRQUFqQyxpQkFVQztRQVRDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBTSxRQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNoQyxRQUFNLENBQUMsTUFBTSxHQUFHO2dCQUNkLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO2dCQUMzQixLQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxHQUFHLFFBQU0sQ0FBQyxNQUFnQixDQUFDO1lBQ3BFLENBQUMsQ0FBQztZQUNGLFFBQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVLLDZDQUFJLEdBQVY7Ozs7Ozs7d0JBRUkscUJBQU0sSUFBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBQTs7d0JBQXBFLFNBQW9FLENBQUM7d0JBQ3JFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7d0JBQ3pELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Ozt3QkFFYixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUUsQ0FBQyxDQUFDOzs7Ozs7S0FFMUM7SUFFRCw4Q0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDOztnQkE5QmdCLFVBQVU7Z0JBQ1UseUJBQXlCO2dCQUN0QyxZQUFZOztJQWxCekIsOEJBQThCO1FBSjFDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw2QkFBNkI7WUFDdkMsMDFHQUF1RDtTQUN4RCxDQUFDO09BQ1csOEJBQThCLENBK0MxQztJQUFELHFDQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0EvQ1ksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsUmVmIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBEcm9wcGVkRmlsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSVRydXN0ZWRDZXJ0aWZpY2F0ZSwgVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudCB7XG4gIG1heEFsbG93ZWRGaWxlcyA9IDE7XG4gIEFVVE9fUkVHSVNUUkFUSU9OX1BPUE9WRVIgPSBnZXR0ZXh0KCdBbGwgZGV2aWNlcyB3aXRoIGNyZWRlbnRpYWxzIHNpZ25lZCBieSB0aGlzIGNlcnRpZmljYXRlIHdpbGwgYmUgYWJsZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBwbGF0Zm9ybSB3aXRob3V0IGEgcHJpb3IgcmVnaXN0cmF0aW9uLicpO1xuICB0cnVzdGVkQ2VydGlmaWNhdGU6IFBhcnRpYWw8SVRydXN0ZWRDZXJ0aWZpY2F0ZT4gPSB7XG4gICAgc3RhdHVzOiAnRElTQUJMRUQnXG4gIH07XG4gIGZpbGVJc1VwbG9hZGVkID0gZmFsc2U7XG5cbiAgcmVzdWx0OiBQcm9taXNlPGFueT4gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGhpcy5fc2F2ZSA9IHJlc29sdmU7XG4gICAgdGhpcy5fY2FuY2VsID0gcmVqZWN0O1xuICB9KTtcbiAgcHJpdmF0ZSBfc2F2ZTtcbiAgcHJpdmF0ZSBfY2FuY2VsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbW9kYWw6IEJzTW9kYWxSZWYsXG4gICAgcHJpdmF0ZSB0cnVzdGVkQ2VydGlmaWNhdGVTZXJ2aWNlOiBUcnVzdGVkQ2VydGlmaWNhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIHVwbG9hZEZpbGUoZHJvcHBlZDogRHJvcHBlZEZpbGVbXSkge1xuICAgIHRoaXMuZmlsZUlzVXBsb2FkZWQgPSBmYWxzZTtcbiAgICBpZiAoZHJvcHBlZCkge1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuZmlsZUlzVXBsb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRydXN0ZWRDZXJ0aWZpY2F0ZS5jZXJ0SW5QZW1Gb3JtYXQgPSByZWFkZXIucmVzdWx0IGFzIHN0cmluZztcbiAgICAgIH07XG4gICAgICByZWFkZXIucmVhZEFzVGV4dChkcm9wcGVkWzBdLmZpbGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMudHJ1c3RlZENlcnRpZmljYXRlU2VydmljZS5jcmVhdGUodGhpcy50cnVzdGVkQ2VydGlmaWNhdGUpO1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcyhnZXR0ZXh0KCdDZXJ0aWZpY2F0ZSBzYXZlZC4nKSk7XG4gICAgICB0aGlzLl9zYXZlKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgIHRoaXMubW9kYWwuaGlkZSgpO1xuICB9XG59XG4iXX0=