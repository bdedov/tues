import * as tslib_1 from "tslib";
import { Component, EventEmitter } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { QueriesUtil } from '@c8y/client';
import { Subject, from, BehaviorSubject } from 'rxjs';
import { switchMap, map, mergeMap, shareReplay, tap } from 'rxjs/operators';
import { RepositoryService } from '../repository.service';
// MODAL STRUCTURE
// - selectModalObject (repository entry (repositoryCategory) -> type c8y_Firmware/c8y_Software)
//   -- ISelectModalOption (repository binary entry (repositoryBinary) => type c8y_FirmwareBinary/c8y_SoftwareBinary)
//   -- ISelectModalOption...
// - selectModalObject...
/**
 * RepositorySelectModalComponent displays repository entries options and allows to select them.
 *
 * @example
 * ```
 * import { take } from 'rxjs/operators';
 * import { RepositorySelectModalComponent, ModalSelectionMode, RepositoryType } from '@c8y/ngx-components/repository';
 *
 * const initialState = {
 *   repositoryType: RepositoryType.FIRMWARE,
 *   title: gettext('Install firmware'),
 *   subTitle: gettext('Available firmwares matching the device type'),
 *   icon: 'c8y-firmware',
 *   mode: ModalSelectionMode.SINGLE,
 *   labels: { ok: gettext('Install') },
 *   disableSelected: false
 * };
 *
 * const modal = this.bsModal.show(RepositorySelectModalComponent, {
 *   ignoreBackdropClick: true,
 *   initialState
 * });
 *
 * modal.content.load.next();
 * modal.content.resultEmitter.pipe(take(1)).subscribe((firmware) => {
 *   ...
 * })
 * ```
 */
var RepositorySelectModalComponent = /** @class */ (function () {
    function RepositorySelectModalComponent(repositoryService, translateService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.translateService = translateService;
        /**
         * Optional
         * Allows to provide custom data.
         * @example
         * ```
         * import { from } from 'rxjs';
         *
         * const repositoryEntry = { name: 'ExampleEntry', type: 'c8y_Firmware' };
         * const versions = [{ c8y_Firmware: { version: '1.0.0', url: 'http://example.com' } }];
         *
         * const initialState = {repositoryEntriesWithVersions$: from({ ...repositoryEntry, versions })};
         * ```
         */
        this.repositoryEntriesWithVersions$ = undefined;
        /**
         * Optional
         * Allows to use custom badges templates.
         * @example
         * ```
         * import { gettext } from '@c8y/ngx-components';
         *
         * const badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };
         * const initialState = { badgeTemplates };
         * ```
         */
        this.badgeTemplates = { '=1': gettext('{{count}} version'), other: gettext('{{count}} versions') };
        /**
         * Optional
         * Allows to provide custom modal title.
         */
        this.title = gettext('Select repository entry');
        /**
         * Loads the content of the modal.
         * Must be invoked by the modal's caller.
         */
        this.load = new Subject();
        /**
         * Optional
         * Emits a search string currently entered in the filter input.
         * Use it to filter the items if you use custom repositoryEntriesWithVersions$.
         */
        this.searchTerm = new BehaviorSubject('');
        /**
         * Optional
         * Allows to provide device type query to restrict search criteria.
         * Only takes effect when repositoryEntriesWithVersions$ is not provided,
         * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.
         */
        this.deviceTypeQuery = {};
        /**
         * Optional
         * Allows to provide query to restrict search criteria.
         * Only takes effect when repositoryEntriesWithVersions$ is not provided,
         * otherwise modal's caller have to provide already filtered data in the repositoryEntriesWithVersions$.
         */
        this.searchQuery = {};
        /**
         * Optional
         * Allows to provide custom labels for the buttons responsible for confirm/dismiss modal actions.
         */
        this.labels = { ok: gettext('Save') };
        /**
         * Optional
         * Allows to hide the filter input field.
         * By default, the filter input field is displayed.
         */
        this.showFilter = true;
        /**
         * Optional
         * Allows to show a warning that the search criteria should be narrowed down.
         * By default, this warning is hidden.
         */
        this.areMoreEntries = false;
        /**
         * Emits the list of selected options.
         */
        this.resultEmitter = new EventEmitter();
        /**
         * Optional
         * Allows to change selection mode.
         * Supported options:
         *   * single: only single option can be selected.
         *   * multiple: multiple options can be selected.
         */
        this.mode = ModalSelectionMode.SINGLE;
        /**
         * Allows to block selection of the other versions from the same repository entry.
         */
        this.disableSelected = true;
        this.modalEntries = this.load.pipe(switchMap(function () { return _this.repositoryEntriesWithVersions$; }), mergeMap(function (mos) { return _this.aggregate(mos); }), tap(function (items) {
            _this.areMoreEntries = items.length >= _this.PAGE_SIZE ? true : false;
        }));
        this.PAGE_SIZE = 100;
        this.queriesUtil = new QueriesUtil();
    }
    RepositorySelectModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.repositoryType) {
            throw new Error('Repository type must be defined');
        }
        if (!this.repositoryEntriesWithVersions$) {
            this.repositoryEntriesWithVersions$ = from(this.repositoryService.listRepositoryEntries(this.repositoryType, {
                query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
                params: { pageSize: this.PAGE_SIZE }
            })).pipe(map(function (_a) {
                var data = _a.data;
                return data;
            }), map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), shareReplay(1));
        }
    };
    RepositorySelectModalComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
        var _this = this;
        mos.forEach(function (mo) {
            mo.versions = _this.repositoryService.listAllVersions(mo);
        });
        return mos;
    };
    RepositorySelectModalComponent.prototype.search = function (searchTerm) {
        this.searchTerm.next(searchTerm);
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = { name: "*" + searchTerm + "*" };
        }
        this.load.next();
    };
    RepositorySelectModalComponent.prototype.result = function (selectedItems) {
        this.resultEmitter.emit(selectedItems);
    };
    RepositorySelectModalComponent.prototype.aggregate = function (mos) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var repositoryType, selectedItems;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                repositoryType = this.repositoryType;
                selectedItems = this.selected;
                return [2 /*return*/, Promise.all(mos.map(function (repositoryEntry) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var options, _a, selectModalObject;
                        return tslib_1.__generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _a = this.getSelectModalOptions;
                                    return [4 /*yield*/, this.repositoryService.fetchAllItemsFromList(repositoryEntry.versions)];
                                case 1:
                                    options = _a.apply(this, [_b.sent(),
                                        selectedItems,
                                        repositoryEntry,
                                        repositoryType]);
                                    selectModalObject = this.getSelectModalObject(repositoryEntry, options);
                                    return [2 /*return*/, selectModalObject];
                            }
                        });
                    }); }))];
            });
        });
    };
    RepositorySelectModalComponent.prototype.getSelectModalOptions = function (versions, selectedItems, repositoryEntry, repositoryType) {
        var _this = this;
        var selectModalOptions = [];
        versions.forEach(function (repositoryBinary) {
            var isSelected = _this.isBinaryRepositorySelected(selectedItems, repositoryEntry, repositoryBinary, repositoryType);
            var version = repositoryBinary["" + repositoryType].version;
            var bodyValue = version || "(" + _this.translateService.instant(gettext('not specified`version`')) + ")";
            var bodyClass = version ? '' : 'text-muted';
            selectModalOptions.push({
                body: [
                    {
                        value: bodyValue,
                        class: bodyClass
                    }
                ],
                obj: tslib_1.__assign({ id: repositoryBinary.id, name: repositoryEntry.name, version: version }, (get(repositoryBinary, 'c8y_Patch.dependency') && {
                    dependency: get(repositoryBinary, 'c8y_Patch.dependency')
                }), (get(repositoryBinary, 'c8y_Patch') && { c8y_Patch: true }), { url: repositoryBinary["" + repositoryType].url }),
                selected: isSelected
            });
        });
        return selectModalOptions;
    };
    RepositorySelectModalComponent.prototype.isBinaryRepositorySelected = function (selectedItems, repositoryEntry, repositoryBinary, repositoryType) {
        var isSelected = selectedItems
            ? selectedItems.filter(function (repositoryFragment) {
                return repositoryFragment.name === repositoryEntry.name &&
                    repositoryFragment.version === repositoryBinary["" + repositoryType].version;
            }).length > 0
            : false;
        return isSelected;
    };
    RepositorySelectModalComponent.prototype.getSelectModalObject = function (repositoryEntry, options) {
        var label = options.length === 1
            ? this.translateService.instant(this.badgeTemplates['=1'], { count: options.length })
            : this.translateService.instant(this.badgeTemplates.other, { count: options.length });
        var selectModalObject = {
            groupId: repositoryEntry.id,
            body: [
                { value: repositoryEntry.name, class: 'text-truncate' },
                { value: repositoryEntry.description, class: 'text-truncate text-muted' }
            ],
            additionalInformation: { value: label, class: 'label label-info' },
            options: options
        };
        return selectModalObject;
    };
    RepositorySelectModalComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: TranslateService }
    ]; };
    RepositorySelectModalComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-repository-select-modal',
            template: "<c8y-select-modal\n  [icon]=\"icon\"\n  [title]=\"title\"\n  [subTitle]=\"subTitle\"\n  [items]=\"modalEntries | async\"\n  [mode]=\"mode\"\n  [disableSelected]=\"disableSelected\"\n  [labels]=\"labels\"\n  [showFilter]=\"showFilter\"\n  [areMoreEntries]=\"areMoreEntries\"\n  (search)=\"search($event)\"\n  (result)=\"result($event)\"\n>\n</c8y-select-modal>\n"
        })
    ], RepositorySelectModalComponent);
    return RepositorySelectModalComponent;
}());
export { RepositorySelectModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS1zZWxlY3QtbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5LyIsInNvdXJjZXMiOlsic2VsZWN0LW1vZGFsL3JlcG9zaXRvcnktc2VsZWN0LW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUNMLE9BQU8sRUFJUCxrQkFBa0IsRUFDbkIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBa0IsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQWMsSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBUTFELGtCQUFrQjtBQUNsQixnR0FBZ0c7QUFDaEcscUhBQXFIO0FBQ3JILDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFFekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Qkc7QUFNSDtJQXlIRSx3Q0FDVSxpQkFBb0MsRUFDcEMsZ0JBQWtDO1FBRjVDLGlCQUtDO1FBSlMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBMUg1Qzs7Ozs7Ozs7Ozs7O1dBWUc7UUFDSCxtQ0FBOEIsR0FBaUMsU0FBUyxDQUFDO1FBS3pFOzs7Ozs7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QUFFLEtBQUssRUFBRSxlQUFlLEVBQUU7Z0JBQ3ZELEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLDBCQUEwQixFQUFFO2FBQzFFO1lBQ0QscUJBQXFCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtZQUNsRSxPQUFPLFNBQUE7U0FDUixDQUFDO1FBRUYsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDOztnQkFuSjRCLGlCQUFpQjtnQkFDbEIsZ0JBQWdCOztJQTNIakMsOEJBQThCO1FBSjFDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw2QkFBNkI7WUFDdkMscVhBQXVEO1NBQ3hELENBQUM7T0FDVyw4QkFBOEIsQ0ErUTFDO0lBQUQscUNBQUM7Q0FBQSxBQS9RRCxJQStRQztTQS9RWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHtcbiAgZ2V0dGV4dCxcbiAgSVNlbGVjdE1vZGFsT2JqZWN0LFxuICBJU2VsZWN0TW9kYWxPcHRpb24sXG4gIE1vZGFsTGFiZWxzLFxuICBNb2RhbFNlbGVjdGlvbk1vZGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgZnJvbSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCwgbWVyZ2VNYXAsIHNoYXJlUmVwbGF5LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VydmljZSB9IGZyb20gJy4uL3JlcG9zaXRvcnkuc2VydmljZSc7XG5pbXBvcnQge1xuICBSZXBvc2l0b3J5VHlwZSxcbiAgUmVwb3NpdG9yeUNhdGVnb3J5LFxuICBSZXBvc2l0b3J5QmluYXJ5LFxuICBTZWxlY3RlZFJlcG9zaXRvcnlCaW5hcnlcbn0gZnJvbSAnLi4vcmVwb3NpdG9yeS5tb2RlbCc7XG5cbi8vIE1PREFMIFNUUlVDVFVSRVxuLy8gLSBzZWxlY3RNb2RhbE9iamVjdCAocmVwb3NpdG9yeSBlbnRyeSAocmVwb3NpdG9yeUNhdGVnb3J5KSAtPiB0eXBlIGM4eV9GaXJtd2FyZS9jOHlfU29mdHdhcmUpXG4vLyAgIC0tIElTZWxlY3RNb2RhbE9wdGlvbiAocmVwb3NpdG9yeSBiaW5hcnkgZW50cnkgKHJlcG9zaXRvcnlCaW5hcnkpID0+IHR5cGUgYzh5X0Zpcm13YXJlQmluYXJ5L2M4eV9Tb2Z0d2FyZUJpbmFyeSlcbi8vICAgLS0gSVNlbGVjdE1vZGFsT3B0aW9uLi4uXG4vLyAtIHNlbGVjdE1vZGFsT2JqZWN0Li4uXG5cbi8qKlxuICogUmVwb3NpdG9yeVNlbGVjdE1vZGFsQ29tcG9uZW50IGRpc3BsYXlzIHJlcG9zaXRvcnkgZW50cmllcyBvcHRpb25zIGFuZCBhbGxvd3MgdG8gc2VsZWN0IHRoZW0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbiAqIGltcG9ydCB7IFJlcG9zaXRvcnlTZWxlY3RNb2RhbENvbXBvbmVudCwgTW9kYWxTZWxlY3Rpb25Nb2RlLCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG4gKlxuICogY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICogICByZXBvc2l0b3J5VHlwZTogUmVwb3NpdG9yeVR5cGUuRklSTVdBUkUsXG4gKiAgIHRpdGxlOiBnZXR0ZXh0KCdJbnN0YWxsIGZpcm13YXJlJyksXG4gKiAgIHN1YlRpdGxlOiBnZXR0ZXh0KCdBdmFpbGFibGUgZmlybXdhcmVzIG1hdGNoaW5nIHRoZSBkZXZpY2UgdHlwZScpLFxuICogICBpY29uOiAnYzh5LWZpcm13YXJlJyxcbiAqICAgbW9kZTogTW9kYWxTZWxlY3Rpb25Nb2RlLlNJTkdMRSxcbiAqICAgbGFiZWxzOiB7IG9rOiBnZXR0ZXh0KCdJbnN0YWxsJykgfSxcbiAqICAgZGlzYWJsZVNlbGVjdGVkOiBmYWxzZVxuICogfTtcbiAqXG4gKiBjb25zdCBtb2RhbCA9IHRoaXMuYnNNb2RhbC5zaG93KFJlcG9zaXRvcnlTZWxlY3RNb2RhbENvbXBvbmVudCwge1xuICogICBpZ25vcmVCYWNrZHJvcENsaWNrOiB0cnVlLFxuICogICBpbml0aWFsU3RhdGVcbiAqIH0pO1xuICpcbiAqIG1vZGFsLmNvbnRlbnQubG9hZC5uZXh0KCk7XG4gKiBtb2RhbC5jb250ZW50LnJlc3VsdEVtaXR0ZXIucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKGZpcm13YXJlKSA9PiB7XG4gKiAgIC4uLlxuICogfSlcbiAqIGBgYFxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1yZXBvc2l0b3J5LXNlbGVjdC1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9yZXBvc2l0b3J5LXNlbGVjdC1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeVNlbGVjdE1vZGFsQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byBwcm92aWRlIGN1c3RvbSBkYXRhLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBcbiAgICogaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xuICAgKlxuICAgKiBjb25zdCByZXBvc2l0b3J5RW50cnkgPSB7IG5hbWU6ICdFeGFtcGxlRW50cnknLCB0eXBlOiAnYzh5X0Zpcm13YXJlJyB9O1xuICAgKiBjb25zdCB2ZXJzaW9ucyA9IFt7IGM4eV9GaXJtd2FyZTogeyB2ZXJzaW9uOiAnMS4wLjAnLCB1cmw6ICdodHRwOi8vZXhhbXBsZS5jb20nIH0gfV07XG4gICAqXG4gICAqIGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtyZXBvc2l0b3J5RW50cmllc1dpdGhWZXJzaW9ucyQ6IGZyb20oeyAuLi5yZXBvc2l0b3J5RW50cnksIHZlcnNpb25zIH0pfTtcbiAgICogYGBgXG4gICAqL1xuICByZXBvc2l0b3J5RW50cmllc1dpdGhWZXJzaW9ucyQ6IE9ic2VydmFibGU8SU1hbmFnZWRPYmplY3RbXT4gPSB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBSZXBvc2l0b3J5IGVudHJ5IHR5cGUuXG4gICAqL1xuICByZXBvc2l0b3J5VHlwZTogUmVwb3NpdG9yeVR5cGUuRklSTVdBUkUgfCBSZXBvc2l0b3J5VHlwZS5TT0ZUV0FSRTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byB1c2UgY3VzdG9tIGJhZGdlcyB0ZW1wbGF0ZXMuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYFxuICAgKiBpbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG4gICAqXG4gICAqIGNvbnN0IGJhZGdlVGVtcGxhdGVzID0geyAnPTEnOiBnZXR0ZXh0KCd7e2NvdW50fX0gdmVyc2lvbicpLCBvdGhlcjogZ2V0dGV4dCgne3tjb3VudH19IHZlcnNpb25zJykgfTtcbiAgICogY29uc3QgaW5pdGlhbFN0YXRlID0geyBiYWRnZVRlbXBsYXRlcyB9O1xuICAgKiBgYGBcbiAgICovXG4gIGJhZGdlVGVtcGxhdGVzID0geyAnPTEnOiBnZXR0ZXh0KCd7e2NvdW50fX0gdmVyc2lvbicpLCBvdGhlcjogZ2V0dGV4dCgne3tjb3VudH19IHZlcnNpb25zJykgfTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byBwcm92aWRlIGN1c3RvbSBtb2RhbCB0aXRsZS5cbiAgICovXG4gIHRpdGxlOiBzdHJpbmcgPSBnZXR0ZXh0KCdTZWxlY3QgcmVwb3NpdG9yeSBlbnRyeScpO1xuICAvKipcbiAgICogT3B0aW9uYWxcbiAgICogQWxsb3dzIHRvIHByb3ZpZGUgY3VzdG9tIG1vZGFsIHN1YnRpdGxlLlxuICAgKi9cbiAgc3ViVGl0bGU6IHN0cmluZztcbiAgLyoqXG4gICAqIExvYWRzIHRoZSBjb250ZW50IG9mIHRoZSBtb2RhbC5cbiAgICogTXVzdCBiZSBpbnZva2VkIGJ5IHRoZSBtb2RhbCdzIGNhbGxlci5cbiAgICovXG4gIGxvYWQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuICAvKipcbiAgICogT3B0aW9uYWxcbiAgICogRW1pdHMgYSBzZWFyY2ggc3RyaW5nIGN1cnJlbnRseSBlbnRlcmVkIGluIHRoZSBmaWx0ZXIgaW5wdXQuXG4gICAqIFVzZSBpdCB0byBmaWx0ZXIgdGhlIGl0ZW1zIGlmIHlvdSB1c2UgY3VzdG9tIHJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJC5cbiAgICovXG4gIHNlYXJjaFRlcm06IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XG4gIC8qKlxuICAgKiBPcHRpb25hbFxuICAgKiBBbGxvd3MgdG8gcHJvdmlkZSBkZXZpY2UgdHlwZSBxdWVyeSB0byByZXN0cmljdCBzZWFyY2ggY3JpdGVyaWEuXG4gICAqIE9ubHkgdGFrZXMgZWZmZWN0IHdoZW4gcmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnMkIGlzIG5vdCBwcm92aWRlZCxcbiAgICogb3RoZXJ3aXNlIG1vZGFsJ3MgY2FsbGVyIGhhdmUgdG8gcHJvdmlkZSBhbHJlYWR5IGZpbHRlcmVkIGRhdGEgaW4gdGhlIHJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJC5cbiAgICovXG4gIGRldmljZVR5cGVRdWVyeTogYW55ID0ge307XG4gIC8qKlxuICAgKiBPcHRpb25hbFxuICAgKiBBbGxvd3MgdG8gcHJvdmlkZSBxdWVyeSB0byByZXN0cmljdCBzZWFyY2ggY3JpdGVyaWEuXG4gICAqIE9ubHkgdGFrZXMgZWZmZWN0IHdoZW4gcmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnMkIGlzIG5vdCBwcm92aWRlZCxcbiAgICogb3RoZXJ3aXNlIG1vZGFsJ3MgY2FsbGVyIGhhdmUgdG8gcHJvdmlkZSBhbHJlYWR5IGZpbHRlcmVkIGRhdGEgaW4gdGhlIHJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJC5cbiAgICovXG4gIHNlYXJjaFF1ZXJ5OiBhbnkgPSB7fTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byBwcm92aWRlIGN1c3RvbSBsYWJlbHMgZm9yIHRoZSBidXR0b25zIHJlc3BvbnNpYmxlIGZvciBjb25maXJtL2Rpc21pc3MgbW9kYWwgYWN0aW9ucy5cbiAgICovXG4gIGxhYmVsczogTW9kYWxMYWJlbHMgPSB7IG9rOiBnZXR0ZXh0KCdTYXZlJykgfTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byBoaWRlIHRoZSBmaWx0ZXIgaW5wdXQgZmllbGQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBmaWx0ZXIgaW5wdXQgZmllbGQgaXMgZGlzcGxheWVkLlxuICAgKi9cbiAgc2hvd0ZpbHRlcjogYm9vbGVhbiA9IHRydWU7XG4gIC8qKlxuICAgKiBPcHRpb25hbFxuICAgKiBBbGxvd3MgdG8gc2hvdyBhIHdhcm5pbmcgdGhhdCB0aGUgc2VhcmNoIGNyaXRlcmlhIHNob3VsZCBiZSBuYXJyb3dlZCBkb3duLlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIHdhcm5pbmcgaXMgaGlkZGVuLlxuICAgKi9cbiAgYXJlTW9yZUVudHJpZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsXG4gICAqIEFsbG93cyB0byBwYXNzIHRoZSBhcnJheSBvZiBpdGVtcy4gRWFjaCBpdGVtIGZyb20gdGhpcyBhcnJheSB3aWxsIGJlIG1hcmtlZCBhcyBzZWxlY3RlZCBpbiB0aGUgbW9kYWwuXG4gICAqL1xuICBzZWxlY3RlZDogU2VsZWN0ZWRSZXBvc2l0b3J5QmluYXJ5W107XG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgbGlzdCBvZiBzZWxlY3RlZCBvcHRpb25zLlxuICAgKi9cbiAgcmVzdWx0RW1pdHRlcjogRXZlbnRFbWl0dGVyPFNlbGVjdGVkUmVwb3NpdG9yeUJpbmFyeVtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8XG4gICAgU2VsZWN0ZWRSZXBvc2l0b3J5QmluYXJ5W11cbiAgPigpO1xuICAvKipcbiAgICogT3B0aW9uYWxcbiAgICogQWxsb3dzIHRvIGNoYW5nZSBzZWxlY3Rpb24gbW9kZS5cbiAgICogU3VwcG9ydGVkIG9wdGlvbnM6XG4gICAqICAgKiBzaW5nbGU6IG9ubHkgc2luZ2xlIG9wdGlvbiBjYW4gYmUgc2VsZWN0ZWQuXG4gICAqICAgKiBtdWx0aXBsZTogbXVsdGlwbGUgb3B0aW9ucyBjYW4gYmUgc2VsZWN0ZWQuXG4gICAqL1xuICBtb2RlOiBNb2RhbFNlbGVjdGlvbk1vZGUgPSBNb2RhbFNlbGVjdGlvbk1vZGUuU0lOR0xFO1xuICAvKipcbiAgICogT3B0aW9uYWxcbiAgICogQWxsb3dzIHRvIHVzZSBjdXN0b20gaWNvbiBpbiB0aGUgbW9kYWwgaGVhZGVyLlxuICAgKi9cbiAgaWNvbjogc3RyaW5nO1xuICAvKipcbiAgICogQWxsb3dzIHRvIGJsb2NrIHNlbGVjdGlvbiBvZiB0aGUgb3RoZXIgdmVyc2lvbnMgZnJvbSB0aGUgc2FtZSByZXBvc2l0b3J5IGVudHJ5LlxuICAgKi9cbiAgZGlzYWJsZVNlbGVjdGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgbW9kYWxFbnRyaWVzOiBPYnNlcnZhYmxlPElTZWxlY3RNb2RhbE9iamVjdFtdPiA9IHRoaXMubG9hZC5waXBlKFxuICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLnJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJCksXG4gICAgbWVyZ2VNYXAobW9zID0+IHRoaXMuYWdncmVnYXRlKG1vcykpLFxuICAgIHRhcChpdGVtcyA9PiB7XG4gICAgICB0aGlzLmFyZU1vcmVFbnRyaWVzID0gaXRlbXMubGVuZ3RoID49IHRoaXMuUEFHRV9TSVpFID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0pXG4gICk7XG4gIHByaXZhdGUgUEFHRV9TSVpFID0gMTAwO1xuICBwcml2YXRlIHF1ZXJpZXNVdGlsOiBRdWVyaWVzVXRpbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5xdWVyaWVzVXRpbCA9IG5ldyBRdWVyaWVzVXRpbCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLnJlcG9zaXRvcnlUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcG9zaXRvcnkgdHlwZSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnMkKSB7XG4gICAgICB0aGlzLnJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJCA9IGZyb20oXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeVNlcnZpY2UubGlzdFJlcG9zaXRvcnlFbnRyaWVzKHRoaXMucmVwb3NpdG9yeVR5cGUsIHtcbiAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyaWVzVXRpbC5hZGRPckZpbHRlcih0aGlzLmRldmljZVR5cGVRdWVyeSwgdGhpcy5zZWFyY2hRdWVyeSksXG4gICAgICAgICAgcGFyYW1zOiB7IHBhZ2VTaXplOiB0aGlzLlBBR0VfU0laRSB9XG4gICAgICAgIH0pXG4gICAgICApLnBpcGUoXG4gICAgICAgIG1hcCgoeyBkYXRhIH0pID0+IGRhdGEpLFxuICAgICAgICBtYXAobW9zID0+IHRoaXMuZ2V0QW5kQXNzaWduUmVwb3NpdG9yeUJpbmFyaWVzKG1vcykpLFxuICAgICAgICBzaGFyZVJlcGxheSgxKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRBbmRBc3NpZ25SZXBvc2l0b3J5QmluYXJpZXMobW9zOiBJTWFuYWdlZE9iamVjdFtdKSB7XG4gICAgbW9zLmZvckVhY2gobW8gPT4ge1xuICAgICAgbW8udmVyc2lvbnMgPSB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmxpc3RBbGxWZXJzaW9ucyhtbyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vcztcbiAgfVxuXG4gIHNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlYXJjaFRlcm0ubmV4dChzZWFyY2hUZXJtKTtcbiAgICBpZiAoIXNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMuc2VhcmNoUXVlcnkgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWFyY2hRdWVyeSA9IHsgbmFtZTogYCoke3NlYXJjaFRlcm19KmAgfTtcbiAgICB9XG4gICAgdGhpcy5sb2FkLm5leHQoKTtcbiAgfVxuXG4gIHJlc3VsdChzZWxlY3RlZEl0ZW1zOiBTZWxlY3RlZFJlcG9zaXRvcnlCaW5hcnlbXSkge1xuICAgIHRoaXMucmVzdWx0RW1pdHRlci5lbWl0KHNlbGVjdGVkSXRlbXMpO1xuICB9XG5cbiAgYXN5bmMgYWdncmVnYXRlKG1vczogSU1hbmFnZWRPYmplY3RbXSk6IFByb21pc2U8SVNlbGVjdE1vZGFsT2JqZWN0W10+IHtcbiAgICBjb25zdCByZXBvc2l0b3J5VHlwZSA9IHRoaXMucmVwb3NpdG9yeVR5cGU7XG4gICAgY29uc3Qgc2VsZWN0ZWRJdGVtczogU2VsZWN0ZWRSZXBvc2l0b3J5QmluYXJ5W10gPSB0aGlzLnNlbGVjdGVkO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgbW9zLm1hcChhc3luYyByZXBvc2l0b3J5RW50cnkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBJU2VsZWN0TW9kYWxPcHRpb25bXSA9IHRoaXMuZ2V0U2VsZWN0TW9kYWxPcHRpb25zKFxuICAgICAgICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeVNlcnZpY2UuZmV0Y2hBbGxJdGVtc0Zyb21MaXN0KHJlcG9zaXRvcnlFbnRyeS52ZXJzaW9ucyksXG4gICAgICAgICAgc2VsZWN0ZWRJdGVtcyxcbiAgICAgICAgICByZXBvc2l0b3J5RW50cnkgYXMgUmVwb3NpdG9yeUNhdGVnb3J5LFxuICAgICAgICAgIHJlcG9zaXRvcnlUeXBlXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHNlbGVjdE1vZGFsT2JqZWN0ID0gdGhpcy5nZXRTZWxlY3RNb2RhbE9iamVjdChcbiAgICAgICAgICByZXBvc2l0b3J5RW50cnkgYXMgUmVwb3NpdG9yeUNhdGVnb3J5LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gc2VsZWN0TW9kYWxPYmplY3Q7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRTZWxlY3RNb2RhbE9wdGlvbnMoXG4gICAgdmVyc2lvbnM6IFJlcG9zaXRvcnlCaW5hcnlbXSxcbiAgICBzZWxlY3RlZEl0ZW1zOiBTZWxlY3RlZFJlcG9zaXRvcnlCaW5hcnlbXSxcbiAgICByZXBvc2l0b3J5RW50cnk6IFJlcG9zaXRvcnlDYXRlZ29yeSxcbiAgICByZXBvc2l0b3J5VHlwZTogUmVwb3NpdG9yeVR5cGVcbiAgKTogSVNlbGVjdE1vZGFsT3B0aW9uW10ge1xuICAgIGNvbnN0IHNlbGVjdE1vZGFsT3B0aW9uczogSVNlbGVjdE1vZGFsT3B0aW9uW10gPSBbXTtcbiAgICB2ZXJzaW9ucy5mb3JFYWNoKHJlcG9zaXRvcnlCaW5hcnkgPT4ge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZDogYm9vbGVhbiA9IHRoaXMuaXNCaW5hcnlSZXBvc2l0b3J5U2VsZWN0ZWQoXG4gICAgICAgIHNlbGVjdGVkSXRlbXMsXG4gICAgICAgIHJlcG9zaXRvcnlFbnRyeSxcbiAgICAgICAgcmVwb3NpdG9yeUJpbmFyeSxcbiAgICAgICAgcmVwb3NpdG9yeVR5cGVcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHsgdmVyc2lvbiB9ID0gcmVwb3NpdG9yeUJpbmFyeVtgJHtyZXBvc2l0b3J5VHlwZX1gXTtcbiAgICAgIGNvbnN0IGJvZHlWYWx1ZSA9XG4gICAgICAgIHZlcnNpb24gfHwgYCgke3RoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KGdldHRleHQoJ25vdCBzcGVjaWZpZWRgdmVyc2lvbmAnKSl9KWA7XG4gICAgICBjb25zdCBib2R5Q2xhc3MgPSB2ZXJzaW9uID8gJycgOiAndGV4dC1tdXRlZCc7XG4gICAgICBzZWxlY3RNb2RhbE9wdGlvbnMucHVzaCh7XG4gICAgICAgIGJvZHk6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogYm9keVZhbHVlLFxuICAgICAgICAgICAgY2xhc3M6IGJvZHlDbGFzc1xuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgb2JqOiB7XG4gICAgICAgICAgaWQ6IHJlcG9zaXRvcnlCaW5hcnkuaWQsXG4gICAgICAgICAgbmFtZTogcmVwb3NpdG9yeUVudHJ5Lm5hbWUsXG4gICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAuLi4oZ2V0KHJlcG9zaXRvcnlCaW5hcnksICdjOHlfUGF0Y2guZGVwZW5kZW5jeScpICYmIHtcbiAgICAgICAgICAgIGRlcGVuZGVuY3k6IGdldChyZXBvc2l0b3J5QmluYXJ5LCAnYzh5X1BhdGNoLmRlcGVuZGVuY3knKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC4uLihnZXQocmVwb3NpdG9yeUJpbmFyeSwgJ2M4eV9QYXRjaCcpICYmIHsgYzh5X1BhdGNoOiB0cnVlIH0pLFxuICAgICAgICAgIHVybDogcmVwb3NpdG9yeUJpbmFyeVtgJHtyZXBvc2l0b3J5VHlwZX1gXS51cmxcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWQ6IGlzU2VsZWN0ZWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RNb2RhbE9wdGlvbnM7XG4gIH1cblxuICBpc0JpbmFyeVJlcG9zaXRvcnlTZWxlY3RlZChcbiAgICBzZWxlY3RlZEl0ZW1zOiBTZWxlY3RlZFJlcG9zaXRvcnlCaW5hcnlbXSxcbiAgICByZXBvc2l0b3J5RW50cnk6IFJlcG9zaXRvcnlDYXRlZ29yeSxcbiAgICByZXBvc2l0b3J5QmluYXJ5OiBSZXBvc2l0b3J5QmluYXJ5LFxuICAgIHJlcG9zaXRvcnlUeXBlOiBSZXBvc2l0b3J5VHlwZVxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gc2VsZWN0ZWRJdGVtc1xuICAgICAgPyBzZWxlY3RlZEl0ZW1zLmZpbHRlcihcbiAgICAgICAgICByZXBvc2l0b3J5RnJhZ21lbnQgPT5cbiAgICAgICAgICAgIHJlcG9zaXRvcnlGcmFnbWVudC5uYW1lID09PSByZXBvc2l0b3J5RW50cnkubmFtZSAmJlxuICAgICAgICAgICAgcmVwb3NpdG9yeUZyYWdtZW50LnZlcnNpb24gPT09IHJlcG9zaXRvcnlCaW5hcnlbYCR7cmVwb3NpdG9yeVR5cGV9YF0udmVyc2lvblxuICAgICAgICApLmxlbmd0aCA+IDBcbiAgICAgIDogZmFsc2U7XG5cbiAgICByZXR1cm4gaXNTZWxlY3RlZDtcbiAgfVxuXG4gIGdldFNlbGVjdE1vZGFsT2JqZWN0KFxuICAgIHJlcG9zaXRvcnlFbnRyeTogUmVwb3NpdG9yeUNhdGVnb3J5LFxuICAgIG9wdGlvbnM6IElTZWxlY3RNb2RhbE9wdGlvbltdXG4gICk6IElTZWxlY3RNb2RhbE9iamVjdCB7XG4gICAgY29uc3QgbGFiZWwgPVxuICAgICAgb3B0aW9ucy5sZW5ndGggPT09IDFcbiAgICAgICAgPyB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCh0aGlzLmJhZGdlVGVtcGxhdGVzWyc9MSddLCB7IGNvdW50OiBvcHRpb25zLmxlbmd0aCB9KVxuICAgICAgICA6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KHRoaXMuYmFkZ2VUZW1wbGF0ZXMub3RoZXIsIHsgY291bnQ6IG9wdGlvbnMubGVuZ3RoIH0pO1xuXG4gICAgY29uc3Qgc2VsZWN0TW9kYWxPYmplY3Q6IElTZWxlY3RNb2RhbE9iamVjdCA9IHtcbiAgICAgIGdyb3VwSWQ6IHJlcG9zaXRvcnlFbnRyeS5pZCxcbiAgICAgIGJvZHk6IFtcbiAgICAgICAgeyB2YWx1ZTogcmVwb3NpdG9yeUVudHJ5Lm5hbWUsIGNsYXNzOiAndGV4dC10cnVuY2F0ZScgfSxcbiAgICAgICAgeyB2YWx1ZTogcmVwb3NpdG9yeUVudHJ5LmRlc2NyaXB0aW9uLCBjbGFzczogJ3RleHQtdHJ1bmNhdGUgdGV4dC1tdXRlZCcgfVxuICAgICAgXSxcbiAgICAgIGFkZGl0aW9uYWxJbmZvcm1hdGlvbjogeyB2YWx1ZTogbGFiZWwsIGNsYXNzOiAnbGFiZWwgbGFiZWwtaW5mbycgfSxcbiAgICAgIG9wdGlvbnNcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNlbGVjdE1vZGFsT2JqZWN0O1xuICB9XG5cbn1cbiJdfQ==