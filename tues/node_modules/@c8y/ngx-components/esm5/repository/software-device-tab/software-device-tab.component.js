import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { IManagedObject, InventoryService, OperationStatus, IOperation } from '@c8y/client';
import { RepositoryType } from '../repository.model';
import { RepositoryService } from '../repository.service';
var SoftwareDeviceTabComponent = /** @class */ (function () {
    function SoftwareDeviceTabComponent(route, repository, inventory) {
        var _this = this;
        this.route = route;
        this.repository = repository;
        this.inventory = inventory;
        this.deviceId = this.route.snapshot.parent.data.contextData.id;
        this.device$ = new BehaviorSubject(this.route.snapshot.parent.data.contextData);
        this.deviceTypeQuery$ = this.device$.pipe(map(function (device) { return _this.repository.getDeviceTypeQuery(RepositoryType.SOFTWARE, device); }));
        this.list$ = this.device$.pipe(map(function (device) { return _this.repository.getDeviceSoftwareList(device); }));
        this.changes$ = new BehaviorSubject([]);
        this.changesOperation$ = new BehaviorSubject(null);
        this.changesInProgress$ = this.changesOperation$.pipe(map(function (operation) { return _this.isInProgress(operation); }));
        this.reloading = false;
    }
    SoftwareDeviceTabComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadDevice()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loadOperation()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SoftwareDeviceTabComponent.prototype.addChanges = function (requestedChanges) {
        var _this = this;
        var stagedChanges = tslib_1.__spread(this.changes$.value);
        requestedChanges.forEach(function (requestedChange) {
            var alreadyStaged = stagedChanges.some(function (stagedChange) {
                return _this.areSameChanges(stagedChange, requestedChange);
            });
            if (!alreadyStaged) {
                stagedChanges = tslib_1.__spread(stagedChanges, [requestedChange]);
            }
        });
        this.changes$.next(stagedChanges);
    };
    SoftwareDeviceTabComponent.prototype.dropChange = function (changeToBeDropped) {
        var _this = this;
        var stagedChanges = tslib_1.__spread(this.changes$.value);
        stagedChanges = stagedChanges.filter(function (stagedChange) { return !_this.areSameChanges(stagedChange, changeToBeDropped); });
        this.changes$.next(stagedChanges);
    };
    SoftwareDeviceTabComponent.prototype.areSameChanges = function (change1, change2) {
        return change1.name === change2.name &&
            change1.version === change2.version &&
            change1.action === change2.action;
    };
    SoftwareDeviceTabComponent.prototype.clearChanges = function () {
        this.changes$.next([]);
    };
    SoftwareDeviceTabComponent.prototype.loadDevice = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var device;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.reloading = true;
                        return [4 /*yield*/, this.inventory.detail(this.deviceId, { withChildren: false })];
                    case 1:
                        device = (_a.sent()).data;
                        this.device$.next(device);
                        this.reloading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    SoftwareDeviceTabComponent.prototype.applyChanges = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repository.createSoftwareUpdateOperation(this.device$.value, this.changes$.value)];
                    case 1:
                        operation = _a.sent();
                        this.trackOperation(operation);
                        return [2 /*return*/];
                }
            });
        });
    };
    SoftwareDeviceTabComponent.prototype.loadOperation = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repository.getLastSoftwareUpdateOperation(this.deviceId)];
                    case 1:
                        operation = _a.sent();
                        this.trackOperation(operation);
                        return [2 /*return*/];
                }
            });
        });
    };
    SoftwareDeviceTabComponent.prototype.trackOperation = function (operation) {
        var _this = this;
        this.changesOperation$.next(operation);
        if (this.isInProgress(operation)) {
            this.displayChangesFromOperation(operation);
            this.repository.observeOperation(operation).subscribe(function (operationUpdate) {
                _this.changesOperation$.next(operationUpdate);
                if (operationUpdate.status === OperationStatus.SUCCESSFUL) {
                    _this.clearChanges();
                    _this.loadDevice();
                }
            }, function (operationUpdate) {
                _this.changesOperation$.next(operationUpdate);
            });
        }
    };
    SoftwareDeviceTabComponent.prototype.displayChangesFromOperation = function (operation) {
        var changes = this.repository.getDeviceSoftwareChangesFromOperation(operation, this.device$.value);
        this.changes$.next(changes);
    };
    SoftwareDeviceTabComponent.prototype.isInProgress = function (operation) {
        return (operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status));
    };
    SoftwareDeviceTabComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: RepositoryService },
        { type: InventoryService }
    ]; };
    SoftwareDeviceTabComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-software-device-tab',
            template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"loadDevice()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card d-grid grid__col--8-4--md m-b-0\">\n  <c8y-installed-software\n    class=\"card--fullpage bg-white\"\n    [deviceTypeQuery]=\"deviceTypeQuery$ | async\"\n    [softwareList]=\"list$ | async\"\n    [deviceSoftwareChanges]=\"changes$ | async\"\n    [deviceSoftwareChangesOperation]=\"changesOperation$ | async\"\n    [deviceSoftwareChangesInProgress]=\"changesInProgress$ | async\"\n    (changes)=\"addChanges($event)\"\n  ></c8y-installed-software>\n  <c8y-device-software-changes\n    class=\"card--fullpage bg-gray-white\"\n    [changes]=\"changes$ | async\"\n    [changesInProgress]=\"changesInProgress$ | async\"\n    (clear)=\"clearChanges()\"\n    (drop)=\"dropChange($event)\"\n    (apply)=\"applyChanges()\"\n  ></c8y-device-software-changes>\n</div>\n"
        })
    ], SoftwareDeviceTabComponent);
    return SoftwareDeviceTabComponent;
}());
export { SoftwareDeviceTabComponent };
//# sourceMappingURL=data:application/json;base64,