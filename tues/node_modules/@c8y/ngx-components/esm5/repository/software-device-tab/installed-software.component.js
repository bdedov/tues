import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter } from '@angular/core';
import { from, of } from 'rxjs';
import { shareReplay, map, switchMap, distinctUntilChanged } from 'rxjs/operators';
import { BsModalService } from 'ngx-bootstrap/modal';
import { IManagedObject, InventoryService, IOperation } from '@c8y/client';
import { gettext, ModalSelectionMode } from '@c8y/ngx-components';
import { RepositoryService } from '../repository.service';
import { RepositoryType } from './../repository.model';
import { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';
var InstalledSoftwareComponent = /** @class */ (function () {
    function InstalledSoftwareComponent(repository, inventory, bsModal) {
        this.repository = repository;
        this.inventory = inventory;
        this.bsModal = bsModal;
        this.changes = new EventEmitter();
    }
    InstalledSoftwareComponent.prototype.installSoftware = function () {
        var _this = this;
        this.displaySoftwareSelectModal({
            title: gettext('Install software'),
            labels: { ok: gettext('Install') },
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: function (modal) {
                return _this.getInstallableSoftwareListWithVersions$(modal.content.searchTerm);
            }
        }).subscribe(function (softwareToInstall) {
            _this.emitSoftwareInstall(softwareToInstall);
        });
    };
    InstalledSoftwareComponent.prototype.updateSoftware = function (softwareToRemove) {
        var _this = this;
        this.displaySoftwareSelectModal({
            title: gettext('Update software'),
            labels: { ok: gettext('Update') },
            showFilter: false,
            repositoryEntriesWithVersions$: this.getSingleSoftwareWithVersions$(softwareToRemove)
        }).subscribe(function (softwareToInstall) {
            _this.emitSoftwareInstall(softwareToInstall);
        });
    };
    InstalledSoftwareComponent.prototype.removeSoftware = function (softwareToRemove) {
        this.emitSoftwareRemoval([softwareToRemove]);
    };
    InstalledSoftwareComponent.prototype.getInstallableSoftwareListWithVersions$ = function (searchTerm$) {
        var _this = this;
        var installedSoftwareNames = this.softwareList.map(function (s) { return s.name; });
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(function (searchTerm) {
            return _this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
                query: _this.deviceTypeQuery,
                partialName: searchTerm,
                params: { pageSize: 100 }
            });
        }), map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (softwareList) {
            return softwareList.filter(function (software) {
                return !installedSoftwareNames.includes(software.name);
            });
        }), map(function (softwareList) { return _this.attachVersions(softwareList); }), shareReplay(1));
    };
    InstalledSoftwareComponent.prototype.getSingleSoftwareWithVersions$ = function (software) {
        var _this = this;
        return from(this.repository.listRepositoryEntries(RepositoryType.SOFTWARE, {
            query: { name: software.name }
        })).pipe(map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (softwareList) { return _this.attachVersions(softwareList); }), shareReplay(1));
    };
    InstalledSoftwareComponent.prototype.attachVersions = function (softwareList) {
        var _this = this;
        softwareList.forEach(function (software) {
            software.versions = _this.repository.listBaseVersions(software);
        });
        return softwareList;
    };
    InstalledSoftwareComponent.prototype.displaySoftwareSelectModal = function (initialStateOverrides) {
        var initialState = tslib_1.__assign({ repositoryType: RepositoryType.SOFTWARE, subTitle: gettext('Available softwares matching the device type'), mode: ModalSelectionMode.MULTI, icon: 'c8y-tools', disableSelected: false, selected: this.softwareList }, initialStateOverrides);
        var modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            class: 'modal-sm',
            initialState: initialState
        });
        if (initialStateOverrides.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialStateOverrides.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        return modal.content.resultEmitter;
    };
    InstalledSoftwareComponent.prototype.emitSoftwareInstall = function (items) {
        this.changes.emit(items.map(function (item) {
            return tslib_1.__assign({}, item, { action: 'install' });
        }));
    };
    InstalledSoftwareComponent.prototype.emitSoftwareRemoval = function (items) {
        this.changes.emit(items.map(function (item) {
            return tslib_1.__assign({}, item, { action: 'delete' });
        }));
    };
    InstalledSoftwareComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: InventoryService },
        { type: BsModalService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "softwareList", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChanges", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChangesOperation", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceSoftwareChangesInProgress", void 0);
    tslib_1.__decorate([
        Input()
    ], InstalledSoftwareComponent.prototype, "deviceTypeQuery", void 0);
    tslib_1.__decorate([
        Output()
    ], InstalledSoftwareComponent.prototype, "changes", void 0);
    InstalledSoftwareComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-installed-software',
            template: "<div class=\"inner-scroll d-flex d-col\">\n  <div class=\"card-header large-padding separator sticky-top\">\n    <h4 class=\"card-title\" translate>Installed software</h4>\n  </div>\n  <div class=\"flex-grow\">\n    <fieldset *ngIf=\"deviceSoftwareChangesOperation\" class=\"card-block large-padding bg-gray-lighter\">\n      <c8y-single-operation [operation]=\"deviceSoftwareChangesOperation\"></c8y-single-operation>\n    </fieldset>\n\n    <fieldset class=\"d-contents\" [disabled]=\"deviceSoftwareChangesInProgress\">\n      <!-- EMPTY STATE -->\n      <div class=\"card-block\" *ngIf=\"softwareList.length === 0\">\n        <div class=\"c8y-empty-state text-center m-t-16\">\n          <h1 class=\"c8y-icon c8y-icon-tools c8y-icon-duocolor\"></h1>\n          <p>\n            <strong translate>No software installed.</strong> <br />\n            <small translate>Click below to install software into this device.</small>\n          </p>\n        </div>\n      </div>\n\n      <!-- NOT EMPTY STATE -->\n      <ng-container *ngIf=\"softwareList.length > 0\">\n        <c8y-device-software-list\n          [softwareList]=\"softwareList\"\n          [deviceSoftwareChanges]=\"deviceSoftwareChanges\"\n          (update)=\"updateSoftware($event)\"\n          (remove)=\"removeSoftware($event)\"\n          class=\"d-block p-l-16 p-r-16\"\n        >\n        </c8y-device-software-list>\n      </ng-container>\n    </fieldset>\n  </div>\n<!-- INSTALL SOFTWARE-->\n  <div class=\"card-footer large-padding separator sticky-bottom\">\n    <button\n      class=\"btn btn-default\"\n      title=\"{{ 'Install software' | translate }}\"\n      (click)=\"installSoftware()\"\n      [disabled]=\"deviceSoftwareChangesInProgress\"\n    >\n      <i c8yIcon=\"plus-circle\"></i>\n      {{ 'Install software' | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], InstalledSoftwareComponent);
    return InstalledSoftwareComponent;
}());
export { InstalledSoftwareComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbGVkLXNvZnR3YXJlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeS8iLCJzb3VyY2VzIjpbInNvZnR3YXJlLWRldmljZS10YWIvaW5zdGFsbGVkLXNvZnR3YXJlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBbUIsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQXdDLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBTW5HO0lBUUUsb0NBQ1UsVUFBNkIsRUFDN0IsU0FBMkIsRUFDM0IsT0FBdUI7UUFGdkIsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFDN0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFMdkIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUEwQixDQUFDO0lBTy9ELENBQUM7SUFFRCxvREFBZSxHQUFmO1FBQUEsaUJBVUM7UUFUQyxJQUFJ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SSxFQUFFLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRUQsd0RBQW1CLEdBQW5CLFVBQW9CLEtBQTZCO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO1lBQzlCLDRCQUFZLElBQUksSUFBRSxNQUFNLEVBQUUsU0FBUyxJQUFHO1FBQ3hDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsd0RBQW1CLEdBQW5CLFVBQW9CLEtBQTZCO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO1lBQzlCLDRCQUFZLElBQUksSUFBRSxNQUFNLEVBQUUsUUFBUSxJQUFHO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDOztnQkE5R3FCLGlCQUFpQjtnQkFDbEIsZ0JBQWdCO2dCQUNsQixjQUFjOztJQVZ4QjtRQUFSLEtBQUssRUFBRTtvRUFBZ0M7SUFDL0I7UUFBUixLQUFLLEVBQUU7NkVBQStDO0lBQzlDO1FBQVIsS0FBSyxFQUFFO3NGQUE0QztJQUMzQztRQUFSLEtBQUssRUFBRTt1RkFBMEM7SUFDekM7UUFBUixLQUFLLEVBQUU7dUVBQXlCO0lBQ3ZCO1FBQVQsTUFBTSxFQUFFOytEQUFzRDtJQU5wRCwwQkFBMEI7UUFKdEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxrMERBQWdEO1NBQ2pELENBQUM7T0FDVywwQkFBMEIsQ0F3SHRDO0lBQUQsaUNBQUM7Q0FBQSxBQXhIRCxJQXdIQztTQXhIWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgSW5wdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbSwgb2YsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2hhcmVSZXBsYXksIG1hcCwgc3dpdGNoTWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSwgSU9wZXJhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQsIE1vZGFsU2VsZWN0aW9uTW9kZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeVNlcnZpY2UgfSBmcm9tICcuLi9yZXBvc2l0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGV2aWNlU29mdHdhcmUsIERldmljZVNvZnR3YXJlQ2hhbmdlLCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJy4vLi4vcmVwb3NpdG9yeS5tb2RlbCc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5U2VsZWN0TW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9zZWxlY3QtbW9kYWwvcmVwb3NpdG9yeS1zZWxlY3QtbW9kYWwuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWluc3RhbGxlZC1zb2Z0d2FyZScsXG4gIHRlbXBsYXRlVXJsOiAnaW5zdGFsbGVkLXNvZnR3YXJlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJbnN0YWxsZWRTb2Z0d2FyZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNvZnR3YXJlTGlzdDogRGV2aWNlU29mdHdhcmVbXTtcbiAgQElucHV0KCkgZGV2aWNlU29mdHdhcmVDaGFuZ2VzOiBEZXZpY2VTb2Z0d2FyZUNoYW5nZVtdO1xuICBASW5wdXQoKSBkZXZpY2VTb2Z0d2FyZUNoYW5nZXNPcGVyYXRpb246IElPcGVyYXRpb247XG4gIEBJbnB1dCgpIGRldmljZVNvZnR3YXJlQ2hhbmdlc0luUHJvZ3Jlc3M6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGRldmljZVR5cGVRdWVyeTogb2JqZWN0O1xuICBAT3V0cHV0KCkgY2hhbmdlcyA9IG5ldyBFdmVudEVtaXR0ZXI8RGV2aWNlU29mdHdhcmVDaGFuZ2VbXT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5OiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnNNb2RhbDogQnNNb2RhbFNlcnZpY2VcbiAgKSB7XG4gIH1cblxuICBpbnN0YWxsU29mdHdhcmUoKSB7XG4gICAgdGhpcy5kaXNwbGF5U29mdHdhcmVTZWxlY3RNb2RhbCh7XG4gICAgICB0aXRsZTogZ2V0dGV4dCgnSW5zdGFsbCBzb2Z0d2FyZScpLFxuICAgICAgbGFiZWxzOiB7IG9rOiBnZXR0ZXh0KCdJbnN0YWxsJykgfSxcbiAgICAgIHJlcG9zaXRvcnlFbnRyaWVzV2l0aFZlcnNpb25zJDogb2YoW10pLFxuICAgICAgcmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnNGbiQ6IG1vZGFsID0+XG4gICAgICAgIHRoaXMuZ2V0SW5zdGFsbGFibGVTb2Z0d2FyZUxpc3RXaXRoVmVyc2lvbnMkKG1vZGFsLmNvbnRlbnQuc2VhcmNoVGVybSlcbiAgICB9KS5zdWJzY3JpYmUoc29mdHdhcmVUb0luc3RhbGwgPT4ge1xuICAgICAgdGhpcy5lbWl0U29mdHdhcmVJbnN0YWxsKHNvZnR3YXJlVG9JbnN0YWxsKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVNvZnR3YXJlKHNvZnR3YXJlVG9SZW1vdmUpIHtcbiAgICB0aGlzLmRpc3BsYXlTb2Z0d2FyZVNlbGVjdE1vZGFsKHtcbiAgICAgIHRpdGxlOiBnZXR0ZXh0KCdVcGRhdGUgc29mdHdhcmUnKSxcbiAgICAgIGxhYmVsczogeyBvazogZ2V0dGV4dCgnVXBkYXRlJykgfSxcbiAgICAgIHNob3dGaWx0ZXI6IGZhbHNlLFxuICAgICAgcmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnMkOiB0aGlzLmdldFNpbmdsZVNvZnR3YXJlV2l0aFZlcnNpb25zJChzb2Z0d2FyZVRvUmVtb3ZlKVxuICAgIH0pLnN1YnNjcmliZShzb2Z0d2FyZVRvSW5zdGFsbCA9PiB7XG4gICAgICB0aGlzLmVtaXRTb2Z0d2FyZUluc3RhbGwoc29mdHdhcmVUb0luc3RhbGwpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlU29mdHdhcmUoc29mdHdhcmVUb1JlbW92ZSkge1xuICAgIHRoaXMuZW1pdFNvZnR3YXJlUmVtb3ZhbChbc29mdHdhcmVUb1JlbW92ZV0pO1xuICB9XG5cbiAgZ2V0SW5zdGFsbGFibGVTb2Z0d2FyZUxpc3RXaXRoVmVyc2lvbnMkKHNlYXJjaFRlcm0kOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPikge1xuICAgIGNvbnN0IGluc3RhbGxlZFNvZnR3YXJlTmFtZXMgPSB0aGlzLnNvZnR3YXJlTGlzdC5tYXAocyA9PiBzLm5hbWUpO1xuICAgIHJldHVybiBzZWFyY2hUZXJtJC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHN3aXRjaE1hcChzZWFyY2hUZXJtID0+XG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5saXN0UmVwb3NpdG9yeUVudHJpZXMoUmVwb3NpdG9yeVR5cGUuU09GVFdBUkUsIHtcbiAgICAgICAgICBxdWVyeTogdGhpcy5kZXZpY2VUeXBlUXVlcnksXG4gICAgICAgICAgcGFydGlhbE5hbWU6IHNlYXJjaFRlcm0sXG4gICAgICAgICAgcGFyYW1zOiB7IHBhZ2VTaXplOiAxMDAgfVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIG1hcCgoeyBkYXRhIH0pID0+IGRhdGEpLFxuICAgICAgbWFwKHNvZnR3YXJlTGlzdCA9PiB7XG4gICAgICAgIHJldHVybiBzb2Z0d2FyZUxpc3QuZmlsdGVyKHNvZnR3YXJlID0+IHtcbiAgICAgICAgICByZXR1cm4gIWluc3RhbGxlZFNvZnR3YXJlTmFtZXMuaW5jbHVkZXMoc29mdHdhcmUubmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBtYXAoc29mdHdhcmVMaXN0ID0+IHRoaXMuYXR0YWNoVmVyc2lvbnMoc29mdHdhcmVMaXN0KSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cblxuICBnZXRTaW5nbGVTb2Z0d2FyZVdpdGhWZXJzaW9ucyQoc29mdHdhcmU6IERldmljZVNvZnR3YXJlKSB7XG4gICAgcmV0dXJuIGZyb20oXG4gICAgICB0aGlzLnJlcG9zaXRvcnkubGlzdFJlcG9zaXRvcnlFbnRyaWVzKFJlcG9zaXRvcnlUeXBlLlNPRlRXQVJFLCB7XG4gICAgICAgIHF1ZXJ5OiB7IG5hbWU6IHNvZnR3YXJlLm5hbWUgfVxuICAgICAgfSlcbiAgICApLnBpcGUoXG4gICAgICBtYXAoKHsgZGF0YSB9KSA9PiBkYXRhKSxcbiAgICAgIG1hcChzb2Z0d2FyZUxpc3QgPT4gdGhpcy5hdHRhY2hWZXJzaW9ucyhzb2Z0d2FyZUxpc3QpKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxuXG4gIGF0dGFjaFZlcnNpb25zKHNvZnR3YXJlTGlzdDogSU1hbmFnZWRPYmplY3RbXSkge1xuICAgIHNvZnR3YXJlTGlzdC5mb3JFYWNoKHNvZnR3YXJlID0+IHtcbiAgICAgIHNvZnR3YXJlLnZlcnNpb25zID0gdGhpcy5yZXBvc2l0b3J5Lmxpc3RCYXNlVmVyc2lvbnMoc29mdHdhcmUpO1xuICAgIH0pO1xuICAgIHJldHVybiBzb2Z0d2FyZUxpc3Q7XG4gIH1cblxuICBkaXNwbGF5U29mdHdhcmVTZWxlY3RNb2RhbChpbml0aWFsU3RhdGVPdmVycmlkZXMpIHtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgICByZXBvc2l0b3J5VHlwZTogUmVwb3NpdG9yeVR5cGUuU09GVFdBUkUsXG4gICAgICBzdWJUaXRsZTogZ2V0dGV4dCgnQXZhaWxhYmxlIHNvZnR3YXJlcyBtYXRjaGluZyB0aGUgZGV2aWNlIHR5cGUnKSxcbiAgICAgIG1vZGU6IE1vZGFsU2VsZWN0aW9uTW9kZS5NVUxUSSxcbiAgICAgIGljb246ICdjOHktdG9vbHMnLFxuICAgICAgZGlzYWJsZVNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIHNlbGVjdGVkOiB0aGlzLnNvZnR3YXJlTGlzdCxcbiAgICAgIC4uLmluaXRpYWxTdGF0ZU92ZXJyaWRlc1xuICAgIH07XG4gICAgY29uc3QgbW9kYWwgPSB0aGlzLmJzTW9kYWwuc2hvdyhSZXBvc2l0b3J5U2VsZWN0TW9kYWxDb21wb25lbnQsIHtcbiAgICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IHRydWUsXG4gICAgICBjbGFzczogJ21vZGFsLXNtJyxcbiAgICAgIGluaXRpYWxTdGF0ZVxuICAgIH0pO1xuXG4gICAgaWYgKGluaXRpYWxTdGF0ZU92ZXJyaWRlcy5yZXBvc2l0b3J5RW50cmllc1dpdGhWZXJzaW9uc0ZuJCkge1xuICAgICAgbW9kYWwuY29udGVudC5yZXBvc2l0b3J5RW50cmllc1dpdGhWZXJzaW9ucyQgPSBpbml0aWFsU3RhdGVPdmVycmlkZXMucmVwb3NpdG9yeUVudHJpZXNXaXRoVmVyc2lvbnNGbiQoXG4gICAgICAgIG1vZGFsXG4gICAgICApO1xuICAgIH1cblxuICAgIG1vZGFsLmNvbnRlbnQubG9hZC5uZXh0KCk7XG4gICAgcmV0dXJuIG1vZGFsLmNvbnRlbnQucmVzdWx0RW1pdHRlcjtcbiAgfVxuXG4gIGVtaXRTb2Z0d2FyZUluc3RhbGwoaXRlbXM6IERldmljZVNvZnR3YXJlQ2hhbmdlW10pIHtcbiAgICB0aGlzLmNoYW5nZXMuZW1pdChpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4geyAuLi5pdGVtLCBhY3Rpb246ICdpbnN0YWxsJyB9O1xuICAgIH0pKTtcbiAgfVxuXG4gIGVtaXRTb2Z0d2FyZVJlbW92YWwoaXRlbXM6IERldmljZVNvZnR3YXJlQ2hhbmdlW10pIHtcbiAgICB0aGlzLmNoYW5nZXMuZW1pdChpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4geyAuLi5pdGVtLCBhY3Rpb246ICdkZWxldGUnIH07XG4gICAgfSkpO1xuICB9XG59XG4iXX0=