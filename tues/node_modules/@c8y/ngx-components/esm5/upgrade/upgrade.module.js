import * as tslib_1 from "tslib";
import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_SEARCH, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1SearchFactoryService } from './search.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
var UpgradeModule = /** @class */ (function () {
    function UpgradeModule() {
    }
    UpgradeModule = tslib_1.__decorate([
        NgModule({
            imports: [RouterModule],
            exports: [],
            providers: [
                bridgeServiceProvider,
                authBridgeServiceProvider,
                { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
                { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
                { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
                { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
                { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
                { provide: HOOK_SEARCH, useClass: Ng1SearchFactoryService, multi: true },
                { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
            ]
        })
    ], UpgradeModule);
    return UpgradeModule;
}());
export { UpgradeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJ1cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBaUJsRTtJQUFBO0lBQTRCLENBQUM7SUFBaEIsYUFBYTtRQWZ6QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDdkIsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUU7Z0JBQ1QscUJBQXFCO2dCQUNyQix5QkFBeUI7Z0JBQ3pCLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUNoRixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQ3BFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDL0UsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUN4RSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDJCQUEyQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQ2hGLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDeEUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2FBQ3JFO1NBQ0YsQ0FBQztPQUNXLGFBQWEsQ0FBRztJQUFELG9CQUFDO0NBQUEsQUFBN0IsSUFBNkI7U0FBaEIsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJyaWRnZVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgSE9PS19BQ1RJT04sXG4gIEhPT0tfQUNUSU9OX0JBUixcbiAgSE9PS19CUkVBRENSVU1CLFxuICBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgSE9PS19TRUFSQ0gsXG4gIEhPT0tfVEFCUyxcbiAgSE9PS19ET0NTLFxuICBSb3V0ZXJNb2R1bGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYWN0aW9uLWJhci5mYWN0b3J5JztcbmltcG9ydCB7IE5nMUFjdGlvbkZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9hY3Rpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFCcmVhZGNydW1iRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2JyZWFkY3J1bWIuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFOb2Rlc0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9ub2Rlcy5mYWN0b3J5JztcbmltcG9ydCB7IE5nMVNlYXJjaEZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9zZWFyY2guZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFUYWJzRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL3RhYnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmcxRG9jc0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9kb2NzLmZhY3RvcnknO1xuaW1wb3J0IHsgYXV0aEJyaWRnZVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vYXV0aC1icmlkZ2Uuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgYnJpZGdlU2VydmljZVByb3ZpZGVyLFxuICAgIGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIsXG4gICAgeyBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUywgdXNlQ2xhc3M6IE5nMU5vZGVzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX1RBQlMsIHVzZUNsYXNzOiBOZzFUYWJzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTl9CQVIsIHVzZUNsYXNzOiBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQUNUSU9OLCB1c2VDbGFzczogTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0JSRUFEQ1JVTUIsIHVzZUNsYXNzOiBOZzFCcmVhZGNydW1iRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX1NFQVJDSCwgdXNlQ2xhc3M6IE5nMVNlYXJjaEZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19ET0NTLCB1c2VDbGFzczogTmcxRG9jc0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVXBncmFkZU1vZHVsZSB7fVxuIl19