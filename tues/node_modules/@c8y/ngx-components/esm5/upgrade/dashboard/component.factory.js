import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
var Ng1ComponentFactoryService = /** @class */ (function () {
    function Ng1ComponentFactoryService(bridge) {
        this.bridge = bridge;
    }
    Ng1ComponentFactoryService.prototype.get = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var components;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bridge.ng1Components.list()];
                    case 1:
                        components = (_a.sent()).map(function (cmp) {
                            var data = {
                                settings: tslib_1.__assign({}, cmp.options, { configTemplateUrl: cmp.configTemplateUrl, widgetComponent: cmp.widgetComponent, configComponent: cmp.configComponent, transformConfigWithContext: cmp.transformConfigWithContext || cmp.componentTransformConfigWithContext, upgrade: true })
                            };
                            data.settings.templateUrl = cmp.templateUrl; // workaround as in object it creates build error
                            return {
                                id: cmp.name,
                                label: cmp.nameDisplay || cmp.name,
                                description: cmp.description,
                                component: WidgetComponent,
                                configComponent: WidgetComponent,
                                previewImage: cmp.previewImage,
                                data: data
                            };
                        });
                        // add the device selector legacy component
                        components.push({
                            id: 'device.selector.legacy',
                            label: 'Device selector',
                            description: '',
                            data: { settings: { noNewWidgets: true, upgrade: true } },
                            component: DeviceSelectorComponent
                        });
                        return [2 /*return*/, components];
                }
            });
        });
    };
    Ng1ComponentFactoryService.ctorParameters = function () { return [
        { type: DashboardBridgeService }
    ]; };
    Ng1ComponentFactoryService = tslib_1.__decorate([
        Injectable()
    ], Ng1ComponentFactoryService);
    return Ng1ComponentFactoryService;
}());
export { Ng1ComponentFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJkYXNoYm9hcmQvY29tcG9uZW50LmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR3RFO0lBQ0Usb0NBQW9CLE1BQThCO1FBQTlCLFdBQU0sR0FBTixNQUFNLENBQXdCO0lBQUcsQ0FBQztJQUNoRCx3Q0FBRyxHQUFUOzs7Ozs0QkFDc0IscUJBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEVBQUE7O3dCQUFwRCxVQUFVLEdBQUcsQ0FBQyxTQUFzQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRzs0QkFDakUsSUFBTSxJQUFJLEdBQUc7Z0NBQ1gsUUFBUSx1QkFDSCxHQUFHLENBQUMsT0FBTyxJQUNkLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsRUFDeEMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxlQUFlLEVBQ3BDLGVBQWUsRUFBRSxHQUFHLENBQUMsZUFBZSxFQUNwQywwQkFBMEIsRUFDeEIsR0FBRyxDQUFDLDBCQUEwQixJQUFJLEdBQUcsQ0FBQyxtQ0FBbUMsRUFDM0UsT0FBTyxFQUFFLElBQUksR0FDZDs2QkFDSyxDQUFDOzRCQUNULElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxpREFBaUQ7NEJBRTlGLE9BQU87Z0NBQ0wsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dDQUNaLEtBQUssRUFBRSxHQUFHLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQyxJQUFJO2dDQUNsQyxXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVc7Z0NBQzVCLFNBQVMsRUFBRSxlQUFlO2dDQUMxQixlQUFlLEVBQUUsZUFBZTtnQ0FDaEMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZO2dDQUM5QixJQUFJLE1BQUE7NkJBQ3lCLENBQUM7d0JBQ2xDLENBQUMsQ0FBQzt3QkFFRiwyQ0FBMkM7d0JBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUM7NEJBQ2QsRUFBRSxFQUFFLHdCQUF3Qjs0QkFDNUIsS0FBSyxFQUFFLGlCQUFpQjs0QkFDeEIsV0FBVyxFQUFFLEVBQUU7NEJBQ2YsSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUU7NEJBQ3pELFNBQVMsRUFBRSx1QkFBdUI7eUJBQ25DLENBQUMsQ0FBQzt3QkFFSCxzQkFBTyxVQUFVLEVBQUM7Ozs7S0FDbkI7O2dCQXJDMkIsc0JBQXNCOztJQUR2QywwQkFBMEI7UUFEdEMsVUFBVSxFQUFFO09BQ0EsMEJBQTBCLENBdUN0QztJQUFELGlDQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0F2Q1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyaWRnZTogRGFzaGJvYXJkQnJpZGdlU2VydmljZSkge31cbiAgYXN5bmMgZ2V0KCkge1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSAoYXdhaXQgdGhpcy5icmlkZ2UubmcxQ29tcG9uZW50cy5saXN0KCkpLm1hcChjbXAgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAuLi5jbXAub3B0aW9ucyxcbiAgICAgICAgICBjb25maWdUZW1wbGF0ZVVybDogY21wLmNvbmZpZ1RlbXBsYXRlVXJsLFxuICAgICAgICAgIHdpZGdldENvbXBvbmVudDogY21wLndpZGdldENvbXBvbmVudCxcbiAgICAgICAgICBjb25maWdDb21wb25lbnQ6IGNtcC5jb25maWdDb21wb25lbnQsXG4gICAgICAgICAgdHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQ6XG4gICAgICAgICAgICBjbXAudHJhbnNmb3JtQ29uZmlnV2l0aENvbnRleHQgfHwgY21wLmNvbXBvbmVudFRyYW5zZm9ybUNvbmZpZ1dpdGhDb250ZXh0LFxuICAgICAgICAgIHVwZ3JhZGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBhcyBhbnk7XG4gICAgICBkYXRhLnNldHRpbmdzLnRlbXBsYXRlVXJsID0gY21wLnRlbXBsYXRlVXJsOyAvLyB3b3JrYXJvdW5kIGFzIGluIG9iamVjdCBpdCBjcmVhdGVzIGJ1aWxkIGVycm9yXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBjbXAubmFtZSxcbiAgICAgICAgbGFiZWw6IGNtcC5uYW1lRGlzcGxheSB8fCBjbXAubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGNtcC5kZXNjcmlwdGlvbixcbiAgICAgICAgY29tcG9uZW50OiBXaWRnZXRDb21wb25lbnQsXG4gICAgICAgIGNvbmZpZ0NvbXBvbmVudDogV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICBwcmV2aWV3SW1hZ2U6IGNtcC5wcmV2aWV3SW1hZ2UsXG4gICAgICAgIGRhdGFcbiAgICAgIH0gYXMgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb247XG4gICAgfSk7XG5cbiAgICAvLyBhZGQgdGhlIGRldmljZSBzZWxlY3RvciBsZWdhY3kgY29tcG9uZW50XG4gICAgY29tcG9uZW50cy5wdXNoKHtcbiAgICAgIGlkOiAnZGV2aWNlLnNlbGVjdG9yLmxlZ2FjeScsXG4gICAgICBsYWJlbDogJ0RldmljZSBzZWxlY3RvcicsXG4gICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICBkYXRhOiB7IHNldHRpbmdzOiB7IG5vTmV3V2lkZ2V0czogdHJ1ZSwgdXBncmFkZTogdHJ1ZSB9IH0sXG4gICAgICBjb21wb25lbnQ6IERldmljZVNlbGVjdG9yQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cztcbiAgfVxufVxuIl19