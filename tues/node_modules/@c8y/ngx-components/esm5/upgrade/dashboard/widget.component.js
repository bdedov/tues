import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, OnInit, OnDestroy, Optional } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetsDashboardComponent } from '@c8y/ngx-components';
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent(dashboard, dashboardBridgeService, el) {
        this.dashboard = dashboard;
        this.dashboardBridgeService = dashboardBridgeService;
        this.el = el;
    }
    WidgetComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.dashboardBridgeService.instantiateComponent(this.config, this.el.nativeElement)];
                    case 1:
                        _a.ng1Scope = _b.sent();
                        if (this.dashboard) {
                            this.resizeSubscription = this.dashboard.onChangeDashboard.subscribe(function () {
                                _this.ng1Scope.$broadcast('dashboardResize');
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    WidgetComponent.prototype.ngOnDestroy = function () {
        if (this.ng1Scope) {
            this.ng1Scope.$destroy();
        }
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    };
    WidgetComponent.ctorParameters = function () { return [
        { type: WidgetsDashboardComponent, decorators: [{ type: Optional }] },
        { type: DashboardBridgeService },
        { type: ElementRef }
    ]; };
    WidgetComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-widget-legacy',
            template: '',
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__param(0, Optional())
    ], WidgetComponent);
    return WidgetComponent;
}());
export { WidgetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvdXBncmFkZS8iLCJzb3VyY2VzIjpbImRhc2hib2FyZC93aWRnZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVFoRTtJQUlFLHlCQUNzQixTQUFvQyxFQUNoRCxzQkFBOEMsRUFDOUMsRUFBYztRQUZGLGNBQVMsR0FBVCxTQUFTLENBQTJCO1FBQ2hELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUNyQixDQUFDO0lBRUUsa0NBQVEsR0FBZDs7Ozs7Ozt3QkFDRSxLQUFBLElBQUksQ0FBQTt3QkFBWSxxQkFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFBOzt3QkFBMUcsR0FBSyxRQUFRLEdBQUcsU0FBMEYsQ0FBQzt3QkFDM0csSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFOzRCQUNsQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7Z0NBQ25FLEtBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7NEJBQzlDLENBQUMsQ0FBQyxDQUFDO3lCQUNKOzs7OztLQUNGO0lBRUQscUNBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7Z0JBckJnQyx5QkFBeUIsdUJBQXZELFFBQVE7Z0JBQ3VCLHNCQUFzQjtnQkFDMUMsVUFBVTs7SUFQYixlQUFlO1FBTDNCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLEVBQUU7WUFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtTQUNoRCxDQUFDO1FBTUcsbUJBQUEsUUFBUSxFQUFFLENBQUE7T0FMRixlQUFlLENBMkIzQjtJQUFELHNCQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0EzQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25EZXN0cm95LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGFzaGJvYXJkQnJpZGdlU2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWJyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFdpZGdldHNEYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktd2lkZ2V0LWxlZ2FjeScsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBuZzFTY29wZTtcbiAgY29uZmlnO1xuICBwcml2YXRlIHJlc2l6ZVN1YnNjcmlwdGlvbj86IFN1YnNjcmlwdGlvbjtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBkYXNoYm9hcmQ6IFdpZGdldHNEYXNoYm9hcmRDb21wb25lbnQsXG4gICAgcHJpdmF0ZSBkYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMubmcxU2NvcGUgPSBhd2FpdCB0aGlzLmRhc2hib2FyZEJyaWRnZVNlcnZpY2UuaW5zdGFudGlhdGVDb21wb25lbnQodGhpcy5jb25maWcsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgaWYgKHRoaXMuZGFzaGJvYXJkKSB7XG4gICAgICB0aGlzLnJlc2l6ZVN1YnNjcmlwdGlvbiA9IHRoaXMuZGFzaGJvYXJkLm9uQ2hhbmdlRGFzaGJvYXJkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubmcxU2NvcGUuJGJyb2FkY2FzdCgnZGFzaGJvYXJkUmVzaXplJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uZzFTY29wZSkge1xuICAgICAgdGhpcy5uZzFTY29wZS4kZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5yZXNpemVTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMucmVzaXplU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=