import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule, NgZone, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { ActionBarService, HOOK_ACTION_BAR, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { TranslateModule } from '@ngx-translate/core';
import { Ng1ComponentFactoryService } from './component.factory';
import { CopyActionComponent } from './copy-action.component';
import { Ng1DashboardActionFactoryService } from './dashboard-actions.factory';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
var DashboardUpgradeModule = /** @class */ (function () {
    function DashboardUpgradeModule() {
    }
    DashboardUpgradeModule = tslib_1.__decorate([
        NgModule({
            declarations: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
            entryComponents: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
            imports: [CommonModule, TranslateModule],
            providers: [
                {
                    provide: DashboardBridgeService,
                    useFactory: dashboardBridgeFactory,
                    deps: ['$injector', NgZone, Router, [new Optional(), ContextDashboardService], ActionBarService]
                },
                { provide: HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true },
                { provide: HOOK_ACTION_BAR, useClass: Ng1DashboardActionFactoryService, multi: true }
            ]
        })
    ], DashboardUpgradeModule);
    return DashboardUpgradeModule;
}());
export { DashboardUpgradeModule };
export function dashboardBridgeFactory(injector, ngZone, router, contextDashboardService, actionBarService) {
    return new DashboardBridgeService(injector, ngZone, router, contextDashboardService, actionBarService);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLXVwZ3JhZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy91cGdyYWRlLyIsInNvdXJjZXMiOlsiZGFzaGJvYXJkL2Rhc2hib2FyZC11cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBZ0J0RTtJQUFBO0lBQXFDLENBQUM7SUFBekIsc0JBQXNCO1FBZGxDLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRSxDQUFDLHVCQUF1QixFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQztZQUNuRyxlQUFlLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLENBQUM7WUFDdEcsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQztZQUN4QyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjtvQkFDL0IsVUFBVSxFQUFFLHNCQUFzQjtvQkFDbEMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDLEVBQUUsZ0JBQWdCLENBQUM7aUJBQ2pHO2dCQUNELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDL0UsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2FBQ3RGO1NBQ0YsQ0FBQztPQUNXLHNCQUFzQixDQUFHO0lBQUQsNkJBQUM7Q0FBQSxBQUF0QyxJQUFzQztTQUF6QixzQkFBc0I7QUFFbkMsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixFQUFFLGdCQUFnQjtJQUN4RyxPQUFPLElBQUksc0JBQXNCLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN6RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlLCBOZ1pvbmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQWN0aW9uQmFyU2VydmljZSwgSE9PS19BQ1RJT05fQkFSLCBIT09LX0NPTVBPTkVOVFN9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkJztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC5mYWN0b3J5JztcbmltcG9ydCB7IENvcHlBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL2NvcHktYWN0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZzFEYXNoYm9hcmRBY3Rpb25GYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9kYXNoYm9hcmQtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFzdGVBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3Bhc3RlLWFjdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXQuY29tcG9uZW50JztcbmltcG9ydCB7IERldmljZVNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRGV2aWNlU2VsZWN0b3JDb21wb25lbnQsIFdpZGdldENvbXBvbmVudCwgQ29weUFjdGlvbkNvbXBvbmVudCwgUGFzdGVBY3Rpb25Db21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtEZXZpY2VTZWxlY3RvckNvbXBvbmVudCwgV2lkZ2V0Q29tcG9uZW50LCBDb3B5QWN0aW9uQ29tcG9uZW50LCBQYXN0ZUFjdGlvbkNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIFRyYW5zbGF0ZU1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IERhc2hib2FyZEJyaWRnZVNlcnZpY2UsXG4gICAgICB1c2VGYWN0b3J5OiBkYXNoYm9hcmRCcmlkZ2VGYWN0b3J5LFxuICAgICAgZGVwczogWyckaW5qZWN0b3InLCBOZ1pvbmUsIFJvdXRlciwgW25ldyBPcHRpb25hbCgpLCBDb250ZXh0RGFzaGJvYXJkU2VydmljZV0sIEFjdGlvbkJhclNlcnZpY2VdXG4gICAgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQ09NUE9ORU5UUywgdXNlQ2xhc3M6IE5nMUNvbXBvbmVudEZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19BQ1RJT05fQkFSLCB1c2VDbGFzczogTmcxRGFzaGJvYXJkQWN0aW9uRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRVcGdyYWRlTW9kdWxlIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXNoYm9hcmRCcmlkZ2VGYWN0b3J5KGluamVjdG9yLCBuZ1pvbmUsIHJvdXRlciwgY29udGV4dERhc2hib2FyZFNlcnZpY2UsIGFjdGlvbkJhclNlcnZpY2UpIHtcbiAgcmV0dXJuIG5ldyBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlKGluamVjdG9yLCBuZ1pvbmUsIHJvdXRlciwgY29udGV4dERhc2hib2FyZFNlcnZpY2UsIGFjdGlvbkJhclNlcnZpY2UpO1xufVxuIl19