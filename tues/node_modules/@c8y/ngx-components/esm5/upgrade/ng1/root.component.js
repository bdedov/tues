var rootComponent = {
    template: "\n  <c8y-bootstrap>\n    <div id=\"c8y-legacy-view\">\n      <div ng-view ng-if=\"vm.widthSet && vm.authState.hasAuth\"></div>\n    </div>\n  </c8y-bootstrap>",
    controller: c8yUiRootController,
    controllerAs: 'vm'
};
function c8yUiRootController($rootScope, $timeout, c8yBase, c8yNavigator, c8yApplication, c8yHeaderService) {
    'ngInject';
    var vm = this;
    Object.assign(vm, {
        $onInit: $onInit,
        navOpen: false
    });
    ////////////
    function $onInit() {
        c8yHeaderService.map(function (states) { return states.nav.open; }).subscribe(function (isOpen) {
            vm.navOpen = isOpen;
        });
        c8yHeaderService.configNavigator({ canToggle: true });
        $rootScope.$on('authStateChange', onAuthStateChange);
        vm.rootNodes = c8yNavigator.rootNodes;
        c8yApplication.currentAppCached().then(onAppInfo);
        vm.navHiddenOnStartup = c8yBase.appOption('hide_navigator');
        checkReady();
    }
    function onAuthStateChange(evt, data) {
        vm.authState = data;
    }
    function onAppInfo() {
        vm.tabsHorizontal = c8yBase.appOption('tabsHorizontal');
    }
    function checkReady() {
        var element = document.querySelector('#c8y-legacy-view');
        var hasWidth = element && element.clientWidth;
        if (hasWidth) {
            vm.widthSet = true;
        }
        else {
            $timeout(checkReady);
        }
    }
}
export { rootComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvcm9vdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxhQUFhLEdBQUc7SUFDcEIsUUFBUSxFQUFFLGdLQUtPO0lBQ2pCLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsWUFBWSxFQUFFLElBQUk7Q0FDbkIsQ0FBQztBQUVGLFNBQVMsbUJBQW1CLENBQzFCLFVBQVUsRUFDVixRQUFRLEVBQ1IsT0FBTyxFQUNQLFlBQVksRUFDWixjQUFjLEVBQ2QsZ0JBQWdCO0lBRWhCLFVBQVUsQ0FBQztJQUNYLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQztJQUVoQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUNoQixPQUFPLFNBQUE7UUFDUCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQztJQUVILFlBQVk7SUFFWixTQUFTLE9BQU87UUFDZCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBZixDQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFNO1lBQ2pFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDcEQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JELEVBQUUsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUN0QyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsRUFBRSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1RCxVQUFVLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ2xDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxTQUFTLFNBQVM7UUFDaEIsRUFBRSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFNBQVMsVUFBVTtRQUNqQixJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDM0QsSUFBTSxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDaEQsSUFBSSxRQUFRLEVBQUU7WUFDWixFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNwQjthQUFNO1lBQ0wsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFDRCxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByb290Q29tcG9uZW50ID0ge1xuICB0ZW1wbGF0ZTogYFxuICA8Yzh5LWJvb3RzdHJhcD5cbiAgICA8ZGl2IGlkPVwiYzh5LWxlZ2FjeS12aWV3XCI+XG4gICAgICA8ZGl2IG5nLXZpZXcgbmctaWY9XCJ2bS53aWR0aFNldCAmJiB2bS5hdXRoU3RhdGUuaGFzQXV0aFwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2M4eS1ib290c3RyYXA+YCxcbiAgY29udHJvbGxlcjogYzh5VWlSb290Q29udHJvbGxlcixcbiAgY29udHJvbGxlckFzOiAndm0nXG59O1xuXG5mdW5jdGlvbiBjOHlVaVJvb3RDb250cm9sbGVyKFxuICAkcm9vdFNjb3BlLFxuICAkdGltZW91dCxcbiAgYzh5QmFzZSxcbiAgYzh5TmF2aWdhdG9yLFxuICBjOHlBcHBsaWNhdGlvbixcbiAgYzh5SGVhZGVyU2VydmljZVxuKSB7XG4gICduZ0luamVjdCc7XG4gIGNvbnN0IHZtID0gdGhpcztcblxuICBPYmplY3QuYXNzaWduKHZtLCB7XG4gICAgJG9uSW5pdCxcbiAgICBuYXZPcGVuOiBmYWxzZVxuICB9KTtcblxuICAvLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiAkb25Jbml0KCkge1xuICAgIGM4eUhlYWRlclNlcnZpY2UubWFwKChzdGF0ZXMpID0+IHN0YXRlcy5uYXYub3Blbikuc3Vic2NyaWJlKChpc09wZW4pID0+IHtcbiAgICAgIHZtLm5hdk9wZW4gPSBpc09wZW47XG4gICAgfSk7XG4gICAgYzh5SGVhZGVyU2VydmljZS5jb25maWdOYXZpZ2F0b3Ioe2NhblRvZ2dsZTogdHJ1ZX0pO1xuICAgICRyb290U2NvcGUuJG9uKCdhdXRoU3RhdGVDaGFuZ2UnLCBvbkF1dGhTdGF0ZUNoYW5nZSk7XG4gICAgdm0ucm9vdE5vZGVzID0gYzh5TmF2aWdhdG9yLnJvb3ROb2RlcztcbiAgICBjOHlBcHBsaWNhdGlvbi5jdXJyZW50QXBwQ2FjaGVkKCkudGhlbihvbkFwcEluZm8pO1xuICAgIHZtLm5hdkhpZGRlbk9uU3RhcnR1cCA9IGM4eUJhc2UuYXBwT3B0aW9uKCdoaWRlX25hdmlnYXRvcicpO1xuICAgIGNoZWNrUmVhZHkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQXV0aFN0YXRlQ2hhbmdlKGV2dCwgZGF0YSkge1xuICAgIHZtLmF1dGhTdGF0ZSA9IGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBvbkFwcEluZm8oKSB7XG4gICAgdm0udGFic0hvcml6b250YWwgPSBjOHlCYXNlLmFwcE9wdGlvbigndGFic0hvcml6b250YWwnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUmVhZHkoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjOHktbGVnYWN5LXZpZXcnKTtcbiAgICBjb25zdCBoYXNXaWR0aCA9IGVsZW1lbnQgJiYgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICBpZiAoaGFzV2lkdGgpIHtcbiAgICAgIHZtLndpZHRoU2V0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHRpbWVvdXQoY2hlY2tSZWFkeSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgeyByb290Q29tcG9uZW50IH07XG4iXX0=