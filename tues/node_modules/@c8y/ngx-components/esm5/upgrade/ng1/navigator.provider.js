import { Subject, defer, of } from 'rxjs';
import { merge } from 'rxjs/operators';
import { pick, map, property, some, every } from 'lodash-es';
import { NavigatorNodeRootLegacy } from './navigator-node-root-legacy';
// Just to hook into the bridge service
export function c8yNavigatorProvider() {
    var root = new NavigatorNodeRootLegacy();
    var rootNodesSubject = new Subject();
    var conditionalNodes = [];
    var rootNodes$ = rootNodesSubject.pipe(merge(defer(function () { return of(root.children); })));
    function addNavigation(nodes) {
        var nodeList = (Array.isArray(nodes) ? nodes : [nodes]);
        nodeList.forEach(function (node) {
            if (isConditional(node)) {
                node.hidden = undefined;
                conditionalNodes.push(node);
            }
            node.navNode = root.addRoot(node);
        });
        rootNodesSubject.next(root.children);
    }
    function removeNavigation(node) {
        var found = root.find(function (n) { return n === node; });
        if (found) {
            found.parents.forEach(function (p) { return p.remove(found); });
            rootNodesSubject.next(root.children);
        }
    }
    function findNode(node) {
        return root.find(node);
    }
    function isConditional(node) {
        return node.showIf || node.showIfPermissions || node.showIfContainsVisibleViews;
    }
    function $get($q, $injector) {
        'ngInject';
        // This avoids the circular dependency
        setTimeout(function () { return conditionalNodes.forEach(processShowIf); });
        function processShowIf(node) {
            var c8yUiUtil = $injector.get('c8yUiUtil');
            var visibilityPromises = [];
            var showIf = node.showIf, showIfPermissions = node.showIfPermissions, showIfContainsVisibleViews = node.showIfContainsVisibleViews;
            if (showIf) {
                visibilityPromises.push($injector.invoke(showIf));
            }
            if (showIfContainsVisibleViews) {
                visibilityPromises.push(viewsConditionalVisibility(node));
            }
            c8yUiUtil.configureVisibility({
                showIf: function () { return $q.all(visibilityPromises).then(every); },
                showIfPermissions: showIfPermissions
            }, 'visible')
                .then(function (_a) {
                var visible = _a.visible;
                if (visible) {
                    node.navNode.update({
                        hidden: false,
                        showIf: null,
                        showIfPermission: null,
                        showIfContainsVisibleViews: null
                    });
                }
                else {
                    node.navNode.update({
                        hidden: true
                    });
                }
            });
        }
        function viewsConditionalVisibility(node) {
            var c8yUiUtil = $injector.get('c8yUiUtil');
            var c8yViews = $injector.get('c8yViews');
            var views = c8yViews.getByPath(node.path);
            return $q.all(map(views, function (view) { return c8yUiUtil
                .configureVisibility(pick(view, ['showIf', 'showIfPermissions']), 'show', false)
                .then(property('show')); }))
                .then(some);
        }
        return {
            rootNodes: function () {
                return root.children;
            },
            findNode: findNode,
            addNavigation: addNavigation,
            removeNavigation: removeNavigation,
            rootNodes$: rootNodes$
        };
    }
    return {
        $get: $get,
        addNavigation: addNavigation,
        removeNavigation: removeNavigation
    };
}
//# sourceMappingURL=data:application/json;base64,