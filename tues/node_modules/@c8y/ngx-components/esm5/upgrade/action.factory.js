import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Action, ActionFactory, TabsService } from '@c8y/ngx-components';
import { BridgeService } from './bridge.service';
var Ng1ActionFactoryService = /** @class */ (function () {
    function Ng1ActionFactoryService(bridge, tabs) {
        var _this = this;
        this.bridge = bridge;
        this.tabs = tabs;
        this.routeChanges$ = bridge.$routeChanges;
        this.$location = bridge.injector.get('$location');
        this.tabs.items$.subscribe(function (newTabs) { return _this.handleTabsRedirect(newTabs); });
    }
    Ng1ActionFactoryService.prototype.handleTabsRedirect = function (tabs) {
        /**
         * This function is doing the same process as function redirect in the file
         * modules/core/ui/navigation/tabs.provider.js
         * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
         */
        var redirectedTab = tabs.find(function (tab) { return tab.redirectedTo; });
        var _a = tslib_1.__read(tabs, 1), topPriorityTab = _a[0];
        if (redirectedTab && !topPriorityTab.redirectedTo) {
            this.$location.replace();
            this.$location.path(topPriorityTab.path);
            topPriorityTab.redirectedTo = true;
            redirectedTab.redirectedTo = false;
        }
    };
    Ng1ActionFactoryService.prototype.get = function () {
        return this.bridge.getActions();
    };
    Ng1ActionFactoryService.ctorParameters = function () { return [
        { type: BridgeService },
        { type: TabsService }
    ]; };
    Ng1ActionFactoryService = tslib_1.__decorate([
        Injectable()
    ], Ng1ActionFactoryService);
    return Ng1ActionFactoryService;
}());
export { Ng1ActionFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJhY3Rpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLakQ7SUFHRSxpQ0FDVSxNQUFxQixFQUNyQixJQUFpQjtRQUYzQixpQkFPQztRQU5TLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUV6QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsb0RBQWtCLEdBQWxCLFVBQW1CLElBQUk7UUFDckI7Ozs7V0FJRztRQUNILElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsWUFBWSxFQUFoQixDQUFnQixDQUFDLENBQUM7UUFDckQsSUFBQSw0QkFBeUIsRUFBdkIsc0JBQXVCLENBQUM7UUFDaEMsSUFBSSxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO1lBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ25DLGFBQWEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELHFDQUFHLEdBQUg7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Z0JBMUJpQixhQUFhO2dCQUNmLFdBQVc7O0lBTGhCLHVCQUF1QjtRQURuQyxVQUFVLEVBQUU7T0FDQSx1QkFBdUIsQ0ErQm5DO0lBQUQsOEJBQUM7Q0FBQSxBQS9CRCxJQStCQztTQS9CWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkZhY3RvcnksIFRhYnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UgaW1wbGVtZW50cyBBY3Rpb25GYWN0b3J5IHtcbiAgcm91dGVDaGFuZ2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAkbG9jYXRpb246IGFueTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBicmlkZ2U6IEJyaWRnZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0YWJzOiBUYWJzU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJvdXRlQ2hhbmdlcyQgPSBicmlkZ2UuJHJvdXRlQ2hhbmdlcztcbiAgICB0aGlzLiRsb2NhdGlvbiA9IGJyaWRnZS5pbmplY3Rvci5nZXQoJyRsb2NhdGlvbicpO1xuICAgIHRoaXMudGFicy5pdGVtcyQuc3Vic2NyaWJlKChuZXdUYWJzKSA9PiB0aGlzLmhhbmRsZVRhYnNSZWRpcmVjdChuZXdUYWJzKSk7XG4gIH1cblxuICBoYW5kbGVUYWJzUmVkaXJlY3QodGFicykge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgZG9pbmcgdGhlIHNhbWUgcHJvY2VzcyBhcyBmdW5jdGlvbiByZWRpcmVjdCBpbiB0aGUgZmlsZVxuICAgICAqIG1vZHVsZXMvY29yZS91aS9uYXZpZ2F0aW9uL3RhYnMucHJvdmlkZXIuanNcbiAgICAgKiBUaGF0IGZ1bmN0aW9uICBpcyBub3QgcnVuIGJlY2F1c2UgYnJpZGdlLnNlcnZpY2UudHMgb3ZlcnJpZGVzIHRoZSBtZXRob2QgYWRkVGFiIHdoZXJlIHRoZSByZWRpcmVjdCgpIHdhcyBjYWxsZWQuXG4gICAgICovXG4gICAgY29uc3QgcmVkaXJlY3RlZFRhYiA9IHRhYnMuZmluZCgodGFiKSA9PiB0YWIucmVkaXJlY3RlZFRvKTtcbiAgICBjb25zdCBbIHRvcFByaW9yaXR5VGFiIF0gPSB0YWJzO1xuICAgIGlmIChyZWRpcmVjdGVkVGFiICYmICF0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8pIHtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIHRoaXMuJGxvY2F0aW9uLnBhdGgodG9wUHJpb3JpdHlUYWIucGF0aCk7XG4gICAgICB0b3BQcmlvcml0eVRhYi5yZWRpcmVjdGVkVG8gPSB0cnVlO1xuICAgICAgcmVkaXJlY3RlZFRhYi5yZWRpcmVjdGVkVG8gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnJpZGdlLmdldEFjdGlvbnMoKTtcbiAgfVxufVxuIl19