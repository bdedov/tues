import * as tslib_1 from "tslib";
import { ActionService, AppStateService, EmptyComponent, RouterService, ViewContext, gettext } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest, from, fromEventPattern, of } from 'rxjs';
import { debounceTime, filter, map, merge, startWith, switchMap } from 'rxjs/operators';
import { isArray } from 'lodash-es';
import { ActivationEnd } from '@angular/router';
import { NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { ViewContextLegacyParameter } from './ng1/views.provider';
var BridgeService = /** @class */ (function () {
    function BridgeService(injector, appState, router, ngZone, routerService, actionService) {
        this.injector = injector;
        this.appState = appState;
        this.router = router;
        this.ngZone = ngZone;
        this.routerService = routerService;
        this.actionService = actionService;
        this.$liveTabs = new BehaviorSubject([]);
        this.fixE2eIssues();
        this.$ng1RouteChangeSuccess = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeSuccess');
        this.$ng1RouteChangeStart = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeStart');
        this.hookLanguage();
        this.hookTabs();
        this.hookNavigator();
        this.hookUserMenu();
        this.hookViewProvider();
        this.router.initialNavigation();
        this.ng1Routes();
    }
    BridgeService.prototype.hookViewProvider = function () {
        var _this = this;
        var c8yViews = this.injector.get('c8yViews');
        // fix to trigger an angularjs route change success
        // event on context route match to make legacy
        // view-providers resolve.
        c8yViews.when('/device/:id', {
            template: ''
        });
        c8yViews.when('/group/:id', {
            template: ''
        });
        c8yViews.contextViews.subscribe(function (cfg) { return _this.addRoute(cfg); });
    };
    BridgeService.prototype.addRoute = function (cfg) {
        var _this = this;
        this.routerService.addRoute({
            label: cfg.label || cfg.name,
            path: cfg.path,
            icon: cfg.icon,
            context: ViewContext[cfg.contextKey],
            priority: cfg.priority,
            component: EmptyComponent,
            data: {
                showIf: cfg.showIf
                    ? function (ngxRoute) {
                        var _a;
                        var params = tslib_1.__assign({}, ngxRoute.params, (_a = {}, _a[ViewContextLegacyParameter[cfg.contextKey]] = ngxRoute.params.id, _a));
                        var showIfResult = _this.injector.invoke(cfg.showIf, undefined, {
                            $routeParams: params
                        });
                        // make sure showIf result is a promise with boolean result:
                        return _this.injector
                            .get('$q')
                            .when(showIfResult)
                            .then(Boolean);
                    }
                    : undefined
            }
        });
        if (cfg.runPhase) {
            this.routerService.refresh();
        }
    };
    BridgeService.prototype.ng1Routes = function () {
        var template = '';
        var fallbackRoutes = [];
        // tslint:disable-next-line: forin
        for (var context in ViewContext) {
            var path = ViewContext[context].match(/(\w+)\//)[1];
            var regexp = new RegExp("^/" + path + "/(?:([^/]+)).*$");
            fallbackRoutes.push({
                keys: [{ name: ViewContextLegacyParameter[context], optional: false }],
                regexp: regexp,
                template: template
            });
        }
        /**
         * When asset detail routes (/device/:id,  /group/:id) are matched in Angular Router, ngRoute in
         * angular.js must also have matching generic routes so that the ids can be extracted from the paths and
         * injected in multiple calls (showIf, c8yActions, etc) as properties of $routeParams.
         *
         * The function in src/ngRoute/route.js (angular.js) where the routes are matched is called parseRoute(). This
         * function calls angular.forEach and in turn this function checks for the presence of a forEach method before
         * trying object key iteration.
         * By attaching a non enumerable forEach method to the routes object we guarantee that the fallback generic routes
         * are only matched after any other registered through $routeProvider.when.
         */
        var $route = this.injector.get('$route');
        Object.defineProperty($route.routes, 'forEach', {
            // make non enumerable
            value: function forEach(iterator, context) {
                // tslint:disable-next-line: forin
                for (var key in this) {
                    iterator.call(context, this[key], key, this);
                }
                fallbackRoutes.forEach(function (r) { return iterator.call(context, r); });
            }
        });
        /**
         * Some functions use the current context. As some parts are upgraded and some not, the following updates the
         * angularjs getContext function to resolve always the right context.
         */
        var c8yUiUtil = this.injector.get('c8yUiUtil');
        var _getContext = c8yUiUtil.getContext;
        this.router.events
            .pipe(filter(function (event) { return event instanceof ActivationEnd; }))
            .subscribe(function (event) {
            if (event.snapshot.routeConfig.path === '**') {
                c8yUiUtil.getContext = _getContext;
            }
            else if (event.snapshot.data && event.snapshot.data.context) {
                c8yUiUtil.getContext = function () {
                    return {
                        context: event.snapshot.data.context.replace('/:id', ''),
                        id: event.snapshot.data.contextData.id
                    };
                };
            }
            else {
                c8yUiUtil.getContext = function () { return ({ context: null, id: null }); };
            }
        });
    };
    BridgeService.prototype.fixE2eIssues = function () {
        try {
            var ngZone_1 = this.ngZone;
            var Utils_1 = window.org.cometd.Utils;
            var timeoutFn_1 = Utils_1.setTimeout;
            // tslint:disable-next-line:only-arrow-functions
            Utils_1.setTimeout = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return ngZone_1.runOutsideAngular(function () { return timeoutFn_1.apply(Utils_1, args); });
            };
        }
        catch (e) {
            // do nothing
        }
        try {
            var ace_1 = window.ace;
            var editFn_1 = ace_1.edit;
            var ngZone_2 = this.ngZone;
            // tslint:disable-next-line:only-arrow-functions
            ace_1.edit = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return ngZone_2.runOutsideAngular(function () { return editFn_1.apply(ace_1, args); });
            };
        }
        catch (e) {
            // do nothing
        }
    };
    BridgeService.prototype.hookLanguage = function () {
        var _this = this;
        var first = true;
        this.appState
            .map(function (store) { return store.lang; })
            .subscribe(function (lang) {
            _this.injector.get('c8yLocales').switchToLanguage(lang);
            if (!first) {
                _this.injector.get('$rootScope').$apply();
            }
            first = false;
        });
    };
    BridgeService.prototype.hookTabs = function () {
        var _this = this;
        // Just for instantiation of the c8yAction service
        this.injector.get('c8yActions');
        var $location = this.injector.get('$location');
        var c8yTabs = this.injector.get('c8yTabs');
        var liveTabs = [];
        c8yTabs.addTab = function (tab) {
            liveTabs.push(tslib_1.__assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) }));
            _this.$liveTabs.next(liveTabs);
        };
        this.$ng1RouteChangeStart.subscribe(function (e) {
            liveTabs = [];
            _this.$liveTabs.next(liveTabs);
        });
        this.$ng1RouteChangeSuccess.subscribe(function (e) {
            var path = $location.path();
            if (_this.router.url !== path) {
                _this.router.navigate(path === '/' ? '' : path.split('/'), {
                    queryParams: $location.search(),
                    skipLocationChange: true
                });
            }
            if (_this.actionService) {
                _this.actionService.refresh();
            }
        });
        this.$routeChanges = this.$ng1RouteChangeSuccess.pipe(merge(this.fromNg1Event(c8yTabs, c8yTabs.EVENT_UPDATE), of(1)), debounceTime(100));
    };
    BridgeService.prototype.hookNavigator = function () {
        this.navigationNodes$ = this.injector.get('c8yNavigator').rootNodes$;
    };
    BridgeService.prototype.getTabs = function () {
        var _this = this;
        var onlyVisible = function (_a) {
            var show = _a.show;
            return show;
        };
        var upgradeTab = function (tab) { return (tslib_1.__assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) })); };
        var routeTabs = this.$routeChanges.pipe(switchMap(function () {
            var routes = _this.injector.get('c8yTabs').routeTabs;
            var visibilityPromise = Promise.all(routes.map(function (_a) {
                var checkingVisibility = _a.checkingVisibility;
                return checkingVisibility;
            }));
            return visibilityPromise.then(function () { return routes.filter(onlyVisible).map(upgradeTab); });
        }), startWith([]));
        return combineLatest(routeTabs, this.$liveTabs).pipe(map(function (_a) {
            var _b = tslib_1.__read(_a, 2), route = _b[0], live = _b[1];
            return route.concat(live);
        }));
    };
    BridgeService.prototype.getQuickLinks = function () {
        var c8yQuickLinks = this.injector.get('c8yQuickLinks');
        return c8yQuickLinks.list();
    };
    BridgeService.prototype.getActionBarItems = function () {
        var c8yActionBar = this.injector.get('c8yActionBar');
        var $rootScope = this.injector.get('$rootScope');
        var getActionBarElements = function () {
            return c8yActionBar.elements.map(function (element) { return ({
                priority: element.getAttribute('action-bar-priority') || 0,
                template: element,
                placement: element.getAttribute('action-bar-position') || 'right'
            }); });
        };
        return this.fromNg1Event($rootScope, 'c8yActionBarChanged').pipe(startWith(1), map(getActionBarElements));
    };
    BridgeService.prototype.getBreadcrumbs = function () {
        var $location = this.injector.get('$location');
        var path = $location.path();
        var c8yBreadcrumbs = this.injector.get('c8yBreadcrumbs');
        var breadcrumbs = c8yBreadcrumbs.get(path) || {};
        var breadcrumbsData = this.resolveBreadcrumbsData(breadcrumbs.data);
        return from(breadcrumbsData).pipe(map(function (value) {
            var liveBreadcrumbs = c8yBreadcrumbs.getLiveBreadcrumbs();
            value = value.concat(liveBreadcrumbs);
            return value.map(function (items) { return ({ items: items }); });
        }));
    };
    BridgeService.prototype.resolveBreadcrumbsData = function (data) {
        try {
            return this.injector.invoke(data);
        }
        catch (ex) {
            // empty
        }
        if (isArray(data)) {
            return of([data]);
        }
        return of([]);
    };
    BridgeService.prototype.getSearch = function () {
        var c8ySearch = this.injector.get('c8ySearch');
        return c8ySearch.list().map(function (item) {
            return {
                icon: 'search',
                name: item.name,
                term: '',
                onSearch: function () {
                    if (this.term) {
                        c8ySearch.search(this.term);
                    }
                }
            };
        });
    };
    BridgeService.prototype.getActions = function () {
        var _this = this;
        var registeredActions = this.injector.get('c8yActions').registeredActions;
        return of(registeredActions
            .filter(function (action) { return !action.hidden; })
            .map(function (action) { return ({
            // The priority was reversed: Aligned it to dashboard, high first, low last.
            priority: (action.priority || 0) * -1,
            label: action.text,
            icon: action.icon,
            disabled: action.disabled,
            action: function () {
                _this.injector.invoke(action.action, action);
            }
        }); }));
    };
    BridgeService.prototype.fromNg1Event = function (obj, evt) {
        var stopListening;
        function add(handler) {
            stopListening = obj.$on(evt, handler);
        }
        return fromEventPattern(add, function () { return stopListening(); });
    };
    BridgeService.prototype.hookUserMenu = function () {
        var userMenuService = this.injector.get('c8yUserMenuService');
        var c8yAccessDenied = this.injector.get('c8yAccessDenied');
        userMenuService.add({
            icon: 'exclamation-triangle',
            priority: 10,
            label: gettext('Access denied requests'),
            click: c8yAccessDenied.showAccessDeniedRequestsList
        });
    };
    return BridgeService;
}());
export { BridgeService };
export function bridgeServiceFactory(injector, appState, router, ngZone, routerService, actionService) {
    return new BridgeService(injector, appState, router, ngZone, routerService, actionService);
}
export var bridgeServiceProvider = {
    provide: BridgeService,
    useFactory: bridgeServiceFactory,
    deps: ['$injector', AppStateService, Router, NgZone, RouterService, ActionService]
};
//# sourceMappingURL=data:application/json;base64,