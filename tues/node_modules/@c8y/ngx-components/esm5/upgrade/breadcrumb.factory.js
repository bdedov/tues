import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { BridgeService } from './bridge.service';
var Ng1BreadcrumbFactoryService = /** @class */ (function () {
    function Ng1BreadcrumbFactoryService(bridge) {
        var _this = this;
        this.bridge = bridge;
        this.trigger = new ReplaySubject(1);
        this.breadcrumbs = this.trigger.pipe(debounceTime(100), switchMap(function () {
            return _this.bridge.getBreadcrumbs();
        }));
    }
    Ng1BreadcrumbFactoryService.prototype.get = function () {
        this.trigger.next();
        return this.breadcrumbs;
    };
    Ng1BreadcrumbFactoryService.ctorParameters = function () { return [
        { type: BridgeService }
    ]; };
    Ng1BreadcrumbFactoryService = tslib_1.__decorate([
        Injectable()
    ], Ng1BreadcrumbFactoryService);
    return Ng1BreadcrumbFactoryService;
}());
export { Ng1BreadcrumbFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy91cGdyYWRlLyIsInNvdXJjZXMiOlsiYnJlYWRjcnVtYi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHakQ7SUFRRSxxQ0FDVSxNQUFxQjtRQUQvQixpQkFFSTtRQURNLFdBQU0sR0FBTixNQUFNLENBQWU7UUFSdkIsWUFBTyxHQUFRLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ3JDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsU0FBUyxDQUFDO1lBQ1IsT0FBTyxLQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFHQyxDQUFDO0lBRUoseUNBQUcsR0FBSDtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7O2dCQU5pQixhQUFhOztJQVRwQiwyQkFBMkI7UUFEdkMsVUFBVSxFQUFFO09BQ0EsMkJBQTJCLENBZ0J2QztJQUFELGtDQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FoQlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYkZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnJpZGdlU2VydmljZSB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlIGltcGxlbWVudHMgQnJlYWRjcnVtYkZhY3Rvcnkge1xuICBwcml2YXRlIHRyaWdnZXI6IGFueSA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuICBwcml2YXRlIGJyZWFkY3J1bWJzID0gdGhpcy50cmlnZ2VyLnBpcGUoXG4gICAgZGVib3VuY2VUaW1lKDEwMCksXG4gICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmJyaWRnZS5nZXRCcmVhZGNydW1icygpO1xuICAgIH0pXG4gICk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnJpZGdlOiBCcmlkZ2VTZXJ2aWNlXG4gICkge31cblxuICBnZXQoKSB7XG4gICAgdGhpcy50cmlnZ2VyLm5leHQoKTtcbiAgICByZXR1cm4gdGhpcy5icmVhZGNydW1icztcbiAgfVxufVxuIl19