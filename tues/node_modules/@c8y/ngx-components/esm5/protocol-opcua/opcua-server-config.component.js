import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { gettext, DropAreaComponent } from '@c8y/ngx-components';
import { cloneDeep, has } from 'lodash-es';
import { OpcuaService } from './opcuaService';
var OpcuaServerConfigComponent = /** @class */ (function () {
    function OpcuaServerConfigComponent(opcuaService) {
        this.fileName = '';
        this.targetConnectionState = '1';
        this.minIntervalNumber = 1;
        this.connectionStatusLabel = '';
        this.canceled = new EventEmitter();
        this.removed = new EventEmitter();
        this.saved = new EventEmitter();
        this.changePassword = false;
        this.initialPasswordRequired = true;
        this.NONE = 'NONE';
        this.SIGN = 'SIGN';
        this.SIGN_ENC = 'SIGN_ENCRYPT';
        this.securityPolicies = {
            sign: [
                "BASIC256_" + this.SIGN,
                "BASIC128RSA15_" + this.SIGN,
                "BASIC256SHA256_" + this.SIGN
            ],
            sign_enc: [
                "BASIC256_" + this.SIGN_ENC,
                "BASIC128RSA15_" + this.SIGN_ENC,
                "BASIC256SHA256_" + this.SIGN_ENC,
            ]
        };
        this.ANONYM = {
            id: 1,
            value: gettext('Anonymous')
        };
        this.USER_PASSWORD = {
            id: 2,
            value: gettext('Username/Password')
        };
        this.KEY_BASED = {
            id: 3,
            value: gettext('Key-based Authentication')
        };
        this.initialKeystore = {
            lastModified: 0,
            name: '',
            type: '',
            slice: null,
            size: 0
        };
        this.keystore = this.initialKeystore;
        this.authSwitch = false;
        this.opcuaService = opcuaService;
    }
    Object.defineProperty(OpcuaServerConfigComponent.prototype, "server", {
        get: function () {
            return this._server;
        },
        set: function (server) {
            if (server) {
                this._server = cloneDeep(server);
                this.model = cloneDeep(server);
                this.fileName = this.model.config.keystoreFilename;
                if (server.id && server.id === 'new') {
                    // enabled connection state
                    this.targetConnectionState = '1';
                    this.model.config.targetConnectionState = 'enabled';
                }
                else {
                    this.targetConnectionState = (this.model.config.targetConnectionState === 'enabled') ? '1' : '0';
                }
                this.updateConnectionStatusLabel(this._server);
                this.setNewPassword();
            }
        },
        enumerable: true,
        configurable: true
    });
    OpcuaServerConfigComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.authSwitch = false;
                this.securityModes = [
                    this.NONE,
                    this.SIGN,
                    this.SIGN_ENC
                ];
                this.authenticationModes = [
                    this.ANONYM,
                    this.USER_PASSWORD,
                    this.KEY_BASED
                ];
                this.setCurrentAuthenticationMode();
                this.setCurrentSecurityMode();
                return [2 /*return*/];
            });
        });
    };
    OpcuaServerConfigComponent.prototype.ngOnChanges = function () {
        this.setCurrentSecurityMode();
        this.setCurrentAuthenticationMode();
    };
    OpcuaServerConfigComponent.prototype.cancel = function () {
        this.canceled.emit(this.model);
    };
    OpcuaServerConfigComponent.prototype.remove = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.removeKeystore(this.model)];
                    case 1:
                        _a.sent();
                        this.removed.emit(this.model);
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServerConfigComponent.prototype.save = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, userPassword;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.keystore && this.keystore.size > 0 && this.keystore.name && this.keystore.name.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.uploadKeystore(this.model.config.keystoreBinaryId)];
                    case 1:
                        response = _a.sent();
                        if (response && response.data && response.data.id) {
                            this.model.config.keystoreBinaryId = response.data.id;
                        }
                        // if the keystore was uploaded successful we can remove
                        // the local keystore. This will prevent another request to binary api
                        // when the user will edit other inputs in the form and hit save again.
                        this.keystore = this.initialKeystore;
                        _a.label = 2;
                    case 2:
                        // will remove keystore (binary) when the user switched
                        // authentication settings from key-based to anonymous or username/password
                        if (this.authSwitch) {
                            this.removeKeystore(this.server);
                        }
                        userPassword = this.getModelConfig('userPassword');
                        if (userPassword && userPassword.length > 0) {
                            this.model.config.passwordEncrypted = false;
                        }
                        this.saved.emit(this.model);
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServerConfigComponent.prototype.uploadFile = function (droppedFiles) {
        if (droppedFiles.length === 1) {
            this.keystore = droppedFiles[0].file;
            this.fileName = this.keystore.name;
        }
        else {
            // dropped more than one file
            console.warn('Tried to import... Import aborted.');
        }
    };
    OpcuaServerConfigComponent.prototype.setPolicy = function (data) {
        if (data === this.NONE) {
            this.model.config.securityMode = this.NONE;
        }
        else if (data === this.SIGN) {
            this.model.config.securityMode = this.securityPolicies.sign[0];
        }
        else if (data === this.SIGN_ENC) {
            this.model.config.securityMode = this.securityPolicies.sign_enc[0];
        }
    };
    OpcuaServerConfigComponent.prototype.setServerConnection = function (data) {
        this.model.config.targetConnectionState = (data !== '0') ? 'enabled' : 'disabled';
    };
    OpcuaServerConfigComponent.prototype.updateAuthentication = function (data) {
        if (data && data.id) {
            switch (data.id) {
                // Anonymous
                case 1:
                    this.resetUserAuthentication();
                    this.resetKeyBasedAuthentication();
                    break;
                // User/Password
                case 2:
                    this.resetKeyBasedAuthentication();
                    this.restoreUserData();
                    this.setNewPassword();
                    break;
                // Key-based
                case 3:
                    this.resetUserAuthentication();
                    this.restoreKeyBasedData();
                    break;
                default:
                    console.warn('Invalid authentication id', data.id);
                    break;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.updateConnectionStatusLabel = function (server) {
        var connected = server.c8y_Connection && server.c8y_Connection.status === 'CONNECTED';
        var label = connected ? gettext('Connected') : gettext('Disconnected');
        this.connectionStatusLabel = label;
    };
    OpcuaServerConfigComponent.prototype.setNewPassword = function () {
        var username = this.getModelConfig('userName');
        if (username && username.length > 0) {
            // userName is given, NO need to change the password because it is already set
            this.changePassword = false;
            this.initialPasswordRequired = false;
        }
        else {
            // no userName in response, so require the user to set the initial pw
            this.changePassword = true;
            this.initialPasswordRequired = true;
        }
    };
    OpcuaServerConfigComponent.prototype.toggleChangePassword = function () {
        this.changePassword = !this.changePassword;
        // When the user hides the pw-input field but has entered a
        // string to it before, we need to discard the changes reflected in the model
        // otherwise we PUT it with the model when user hits the save button
        if (!this.changePassword) {
            if (this.getModelConfig('userPassword')) {
                delete this.model.config.userPassword;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.uploadKeystore = function (binaryId) {
        if (!binaryId) {
            return this.opcuaService.uploadKeystore(this.keystore);
        }
        else if (binaryId && binaryId.length > 0) {
            // update existing binary
            return this.opcuaService.updateKeystore(binaryId, this.keystore);
        }
    };
    OpcuaServerConfigComponent.prototype.removeKeystore = function (server) {
        if (server &&
            server.config &&
            server.config.keystoreBinaryId &&
            server.config.keystoreBinaryId.length > 0) {
            this.authSwitch = false;
            return this.opcuaService.removeKeystore(this.server.config.keystoreBinaryId);
        }
    };
    OpcuaServerConfigComponent.prototype.resetUserAuthentication = function () {
        this.model.config.userName = null;
        this.model.config.userPassword = null;
        this.model.config.userIdentityMode = 'none';
    };
    OpcuaServerConfigComponent.prototype.resetKeyBasedAuthentication = function () {
        this.authSwitch = true;
        this.model.config.keystorePass = null;
        this.model.config.certificatePass = null;
        this.model.config.keystoreBinaryId = '';
        this.model.config.keystoreFilename = '';
        this.model.config.userIdentityMode = 'none';
    };
    OpcuaServerConfigComponent.prototype.restoreUserData = function () {
        this.model.config.userName = this._server.config.userName;
        this.model.config.userIdentityMode = 'userAndPassword';
    };
    OpcuaServerConfigComponent.prototype.restoreKeyBasedData = function () {
        this.authSwitch = false;
        this.model.config.keystorePass = this._server.config.keystorePass;
        this.model.config.certificatePass = this._server.config.certificatePass;
        this.model.config.keystoreBinaryId = this._server.config.keystoreBinaryId;
        this.model.config.keystoreFilename = this._server.config.keystoreFilename;
        this.model.config.userIdentityMode = 'certificate';
    };
    OpcuaServerConfigComponent.prototype.getServerConfig = function () {
        var cfg = {
            securityMode: this.NONE,
            userIdentityMode: 'none'
        };
        if (this.server && this.server.config) {
            cfg = this.server.config;
        }
        return cfg;
    };
    OpcuaServerConfigComponent.prototype.setCurrentSecurityMode = function () {
        var securityMode = this.getServerConfig().securityMode;
        if (securityMode) {
            var foundInSign = this.securityPolicies.sign.find(function (el) { return el === securityMode; });
            if (foundInSign) {
                this.currentSecMode = this.SIGN;
            }
            else {
                var foundInSignEncrypt = this.securityPolicies.sign_enc.find(function (el) { return el === securityMode; });
                foundInSignEncrypt ? this.currentSecMode = this.SIGN_ENC : this.currentSecMode = this.NONE;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.setCurrentAuthenticationMode = function () {
        var userIdentityMode = this.getServerConfig().userIdentityMode;
        switch (userIdentityMode) {
            case 'certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            case 'userAndPassword':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Anonymous':
                this.authenticationMode = this.ANONYM;
                break;
            case 'UserName':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            default:
                this.authenticationMode = this.ANONYM;
                break;
        }
    };
    OpcuaServerConfigComponent.prototype.getModelConfig = function (fragment) {
        if (this.model && this.model.config) {
            if (fragment && fragment.length > 0) {
                return has(this.model.config, fragment) ? this.model.config["" + fragment] : undefined;
            }
        }
        return undefined;
    };
    OpcuaServerConfigComponent.ctorParameters = function () { return [
        { type: OpcuaService }
    ]; };
    tslib_1.__decorate([
        ViewChild('opcuaConfigForm', { static: false })
    ], OpcuaServerConfigComponent.prototype, "opcuaConfigForm", void 0);
    tslib_1.__decorate([
        ViewChild(DropAreaComponent, { static: false })
    ], OpcuaServerConfigComponent.prototype, "dropArea", void 0);
    tslib_1.__decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "canceled", void 0);
    tslib_1.__decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "removed", void 0);
    tslib_1.__decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "saved", void 0);
    tslib_1.__decorate([
        Input()
    ], OpcuaServerConfigComponent.prototype, "server", null);
    OpcuaServerConfigComponent = tslib_1.__decorate([
        Component({
            selector: 'opcua-server-config',
            template: "<form #opcuaConfigForm=\"ngForm\" class=\"card card-scroll\" *ngIf=\"server\">\n  <div class=\"card-header\" style=\"flex-wrap: wrap;\">\n    <button\n      class=\"btn btn-clean visible-sm visible-xs\"\n      title=\"{{ 'Back' | translate }}\"\n      (click)=\"cancel()\"\n    >\n      <i c8y-icon=\"chevron-left\" class=\"fa fw fa-chevron-left\"></i\n      ><span translate>Back</span></button\n    ><br />\n    <!-- SERVER NAME -->\n    <label class=\"editable\" style=\"width: 100%;\">\n      <input\n        type=\"text\"\n        class=\"form-control input-lg\"\n        placeholder=\"{{ 'Server name' | translate }}\"\n        id=\"name\"\n        name=\"name\"\n        [(ngModel)]=\"model.name\"\n        required\n      />\n    </label>\n  </div>\n  <div class=\"inner-scroll\">\n    <div class=\"card-block bg-gray-lighter top-p-md\">\n      <div class=\"tight-grid\">\n        <div class=\"col-sm-6\">\n          <label style=\"width: 100%;\" translate>Server connection</label>\n          <button\n            type=\"button\"\n            class=\"btn top-m-xs\"\n            name=\"serverConnection\"\n            [(ngModel)]=\"targetConnectionState\"\n            (ngModelChange)=\"setServerConnection($event)\"\n            btnCheckbox\n            btnCheckboxTrue=\"1\"\n            btnCheckboxFalse=\"0\"\n          >\n            <span\n              title=\"{{ 'Enabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '1'\"\n              translate\n              >Enabled</span\n            >\n            <span\n              title=\"{{ 'Disabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '0'\"\n              translate\n              >Disabled</span\n            >\n          </button>\n        </div>\n        <div class=\"col-sm-6\">\n          <label translate>Connection status</label>\n          <div class=\"form-control-static\">\n            <device-status class=\"right-p-sm\" [mo]=\"server\"></device-status>\n            <span>{{ connectionStatusLabel | translate }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-block\">\n      <!-- SERVER URL-->\n      <c8y-form-group>\n        <label for=\"configServerUrl\" translate>Server URL</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"configServerUrl\"\n          name=\"serverUrl\"\n          [(ngModel)]=\"model.config.serverUrl\"\n          c8yDefaultValidation=\"opcuaBrowsePath\"\n          required\n        />\n      </c8y-form-group>\n\n      <!-- TIMEOUT & STATUS-CHECK-INTERVAL-->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <c8y-form-group>\n            <label for=\"config.timeout\" translate>Timeout</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.timeout\"\n                name=\"timeout\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 30\"\n                [(ngModel)]=\"model.config.timeout\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-md-6\">\n          <c8y-form-group>\n            <label for=\"config.statusCheckInterval\" translate>Status check interval</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.statusCheckInterval\"\n                name=\"statusCheckInterval\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 40\"\n                [(ngModel)]=\"model.config.statusCheckInterval\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <!-- SECURITY MODE -->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <!-- NONE, SIGN, SIGN & ENCRYPT-->\n            <label for=\"config.securityMode\" translate>Security mode</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                class=\"form-control\"\n                id=\"config.securityMode\"\n                [(ngModel)]=\"currentSecMode\"\n                (ngModelChange)=\"setPolicy($event)\"\n                name=\"securityMode\"\n                required\n              >\n                <option *ngFor=\"let mode of securityModes\" [ngValue]=\"mode\">{{ mode }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode === NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.securityPolicy\"\n              name=\"securityPolicy\"\n              [readonly]=\"true\"\n              [(ngModel)]=\"model.config.securityMode\"\n              required\n            />\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode !== NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                *ngIf=\"currentSecMode === SIGN\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <select\n                *ngIf=\"currentSecMode === SIGN_ENC\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign_enc\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- AUTHENTICATION -->\n      <div class=\"form-group\">\n        <label for=\"config.authenticationMode\" translate>Authentication</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"config.authenticationMode\"\n            [(ngModel)]=\"authenticationMode\"\n            name=\"authenticationMode\"\n            (ngModelChange)=\"updateAuthentication($event)\"\n            required\n          >\n            <option *ngFor=\"let auth of authenticationModes\" [ngValue]=\"auth\">{{\n              auth.value | translate\n            }}</option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n\n      <!-- User/Pw-->\n      <div *ngIf=\"authenticationMode.id === 2\" class=\"tight-grid\">\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"config.userName\" translate>Username</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.userName\"\n              name=\"userName\"\n              placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n              [(ngModel)]=\"model.config.userName\"\n              autocomplete=\"new-password\"\n              required\n            />\n          </div>\n        </div>\n        <!-- change password section BEGINS-->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\" *ngIf=\"!initialPasswordRequired\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n              <ng-container *ngIf=\"!changePassword\">\n                {{ 'Change password' | translate }}\n              </ng-container>\n              <ng-container *ngIf=\"changePassword\">\n                {{ 'Cancel password change' | translate }}\n              </ng-container>\n            </button>\n          </div>\n\n          <div class=\"form-group\">\n            <div *ngIf=\"changePassword\">\n              <label for=\"config.password\" translate>Password</label>\n              <input\n                type=\"password\"\n                class=\"form-control\"\n                id=\"config.userPassword\"\n                name=\"password\"\n                [(ngModel)]=\"model.config.userPassword\"\n                autocomplete=\"new-password\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n        <!-- change password section ENDS-->\n      </div>\n      <!-- Key-based -->\n      <div *ngIf=\"authenticationMode.id === 3\" class=\"tight-grid\">\n        <!-- KEYSTORE PASSWORD -->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.keystorePass\" translate>Keystore password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.keystorePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.keystorePass\"\n              required\n            />\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.certificatePass\" translate>Certificate password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.certificatePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.certificatePass\"\n              required\n            />\n          </div>\n        </div>\n        <!-- UPLOAD KEYSTORE -->\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"certificateUpload\" translate>Upload keystore</label>\n            <input\n              type=\"text\"\n              [readonly]=\"true\"\n              name=\"certificateUpload\"\n              class=\"form-control bottom-m-sm\"\n              [ngModel]=\"fileName\"\n              placeholder=\"{{ 'e.g.' | translate }} yourKeystore.jks\"\n              required\n            />\n            <c8y-drop-area\n              (dropped)=\"uploadFile($event)\"\n              [loadingMessage]=\"'Importing, please wait.' | translate\"\n              [title]=\"'Import keystore with jks file extension' | translate\"\n            >\n            </c8y-drop-area>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer separator text-center\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"cancel()\" translate>\n      Cancel\n    </button>\n    <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-danger\" (click)=\"remove()\" translate>\n      Remove\n    </button>\n    <!-- Add [disabled]=\"method()\" when form is invalid-->\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!opcuaConfigForm.valid\"\n      translate\n    >\n      Save\n    </button>\n  </div> \n</form>\n"
        })
    ], OpcuaServerConfigComponent);
    return OpcuaServerConfigComponent;
}());
export { OpcuaServerConfigComponent };
//# sourceMappingURL=data:application/json;base64,