import * as tslib_1 from "tslib";
import { Component, Optional } from '@angular/core';
import { AlertService, ContextRouteComponent, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { OpcuaService } from './opcuaService';
var OpcuaServersComponent = /** @class */ (function () {
    function OpcuaServersComponent(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    OpcuaServersComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, data, _a, _b;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.moId = this.opcuaService.getMoId();
                        if (!(this.moId && this.moId.length > 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.opcuaService.getServers(this.moId)];
                    case 1:
                        res = _c.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _c.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        return [3 /*break*/, 7];
                    case 5:
                        _b = this;
                        return [4 /*yield*/, res.json()];
                    case 6:
                        _b.serverObjectList = (_c.sent());
                        this.serverObjectList.map(function (server) { return _this.setQuickInfo(server); });
                        _c.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.localServerObjectExist = function () {
        var _this = this;
        return !!this.serverObjectList.find(function (server) { return server.id === _this.NEW_SERVER_ID; });
    };
    OpcuaServersComponent.prototype.addServer = function () {
        var server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    };
    OpcuaServersComponent.prototype.onSaved = function (server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    };
    OpcuaServersComponent.prototype.reloadTabs = function () {
        if (this.context) {
            this.context.refreshTabs();
        }
    };
    OpcuaServersComponent.prototype.onCanceled = function (server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(function (item) {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    };
    OpcuaServersComponent.prototype.onRemoved = function (server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    };
    OpcuaServersComponent.prototype.getKeystore = function (binaryId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.getKeystore(binaryId)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.onPresent = function (server) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var mo, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(server &&
                            server.id !== this.NEW_SERVER_ID &&
                            server.config &&
                            server.config.keystoreBinaryId)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.getKeystore(server.config.keystoreBinaryId)];
                    case 2:
                        mo = _a.sent();
                        server.config.keystoreFilename = mo.name;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.server = Object.assign({}, server);
                        console.log('Could not get existing keystore:', ex_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.serverObjectList.length > 0) {
                            this.serverObjectList.forEach(function (item) {
                                item.active = false;
                                if (item.id === server.id) {
                                    item.active = true;
                                    server.active = item.active;
                                }
                            });
                            this.setQuickInfo(server);
                            this.server = Object.assign({}, server);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.createServer = function (server) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, svr;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.createServer(server)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        svr = (_a.sent());
                        this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
                        this.reloadTabs();
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.updateServer = function (server) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var updatedServer;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.updateServer(server)];
                    case 1:
                        updatedServer = (_a.sent());
                        if (updatedServer) {
                            this.updateServerObjectListById(updatedServer.id, updatedServer);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.removeServer = function (server) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ex_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.opcuaService.removeServer(server)];
                    case 1:
                        _a.sent();
                        this.removeServerObjectListById(server.id);
                        this.reloadTabs();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_2 = _a.sent();
                        console.log('Could not remove OPC UA server:', ex_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.removeServerObjectListById = function (id) {
        var _this = this;
        this.serverObjectList.forEach(function (item, index) {
            if (item.id === id) {
                _this.serverObjectList.splice(index, 1);
                delete _this.server;
            }
        });
    };
    OpcuaServersComponent.prototype.updateServerObjectListById = function (id, server) {
        var idx = this.serverObjectList.findIndex(function (item) { return item.id === id; });
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    };
    OpcuaServersComponent.prototype.setQuickInfo = function (server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    };
    OpcuaServersComponent.ctorParameters = function () { return [
        { type: OpcuaService },
        { type: AlertService },
        { type: TranslateService },
        { type: ContextRouteComponent, decorators: [{ type: Optional }] }
    ]; };
    OpcuaServersComponent = tslib_1.__decorate([
        Component({
            selector: 'opcua-servers',
            template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-6 scroll-column has-footer\">\n    <div class=\"c8y-nav-stacked inner-scroll\">\n      <h4 class=\"bottom-m-sm\" translate>OPC UA servers</h4>\n      <p class=\"bottom-m-lg\" translate>\n        Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to \"connected\".\n      </p>\n      <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n      </opcua-server-list>\n    </div>\n    <div class=\"scroll-column-footer\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-add-block\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"col-md-6 scroll-column fast animated\"\n    [ngClass]=\"{ slideInRight: server, slideOutRight: !server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"
        }),
        tslib_1.__param(3, Optional())
    ], OpcuaServersComponent);
    return OpcuaServersComponent;
}());
export { OpcuaServersComponent };
//# sourceMappingURL=data:application/json;base64,