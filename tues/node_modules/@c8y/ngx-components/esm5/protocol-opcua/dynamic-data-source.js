import * as tslib_1 from "tslib";
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
var DynamicDataSource = /** @class */ (function () {
    function DynamicDataSource(treeControl, addressSpaceService, serverId) {
        this.treeControl = treeControl;
        this.addressSpaceService = addressSpaceService;
        this.serverId = serverId;
        this.dataChange = new BehaviorSubject([]);
        this.treeControl.isExpanded = function (node) { return node.expanded; };
    }
    Object.defineProperty(DynamicDataSource.prototype, "data", {
        get: function () {
            return this.dataChange.value;
        },
        set: function (value) {
            this.treeControl.dataNodes = value;
            this.dataChange.next(value);
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataSource.prototype.connect = function (collectionViewer) {
        var _this = this;
        this.treeControl.expansionModel.onChange.subscribe(function (change) {
            if (change.added || change.removed) {
                _this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(function () { return _this.data; }));
    };
    /** Handle expand/collapse behaviors */
    DynamicDataSource.prototype.handleTreeControl = function (change) {
        var _this = this;
        if (change.added) {
            change.added.forEach(function (node) { return _this.toggleNode(node, true); });
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(function (node) { return _this.toggleNode(node, false); });
        }
    };
    /**
     * Toggle the node, remove from display list
     */
    DynamicDataSource.prototype.toggleNode = function (addressSpaceNode, expand) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, children;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!addressSpaceNode.children || addressSpaceNode.children.length === 0)) return [3 /*break*/, 3];
                        addressSpaceNode.currentlyLoadingChildren = true;
                        return [4 /*yield*/, this.addressSpaceService.getChildrenOf(addressSpaceNode, this.serverId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        children = (_a.sent());
                        addressSpaceNode.children = children || [];
                        addressSpaceNode.children = addressSpaceNode.children.map(function (node) {
                            node.parentNode = addressSpaceNode;
                            return node;
                        });
                        addressSpaceNode.currentlyLoadingChildren = false;
                        this.treeControl.expand(addressSpaceNode);
                        _a.label = 3;
                    case 3:
                        addressSpaceNode.expanded = expand && addressSpaceNode.children.length > 0;
                        this.refreshNestedTree(this.data);
                        return [2 /*return*/, Promise.resolve(addressSpaceNode)];
                }
            });
        });
    };
    DynamicDataSource.prototype.catch = function () {
        // do nothing
    };
    DynamicDataSource.prototype.refreshNestedTree = function (treeData) {
        // necessary to rerender tree, otherwise new nodes will not
        // appear, but they are added to the list.
        this.data = [];
        this.dataChange.next(treeData);
        this.triggerResize(); // to resize the modal window when creating a new device protocol
    };
    DynamicDataSource.prototype.triggerResize = function () {
        setTimeout(function () {
            try {
                window.dispatchEvent(new Event('resize'));
            }
            catch (error) {
                // do nothing
            }
        }, 200);
    };
    return DynamicDataSource;
}());
export { DynamicDataSource };
//# sourceMappingURL=data:application/json;base64,