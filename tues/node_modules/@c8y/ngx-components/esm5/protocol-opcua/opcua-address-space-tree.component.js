import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AddressSpaceNode, AddressSpaceService, NodeNavigationData } from './address-space.service';
import { OpcuaService } from './opcuaService';
import { AlertService } from '@c8y/ngx-components';
import { DynamicDataSource } from './dynamic-data-source';
import { NestedTreeControl } from '@angular/cdk/tree';
import { clone } from 'lodash';
var OpcuaAddressSpaceTreeComponent = /** @class */ (function () {
    function OpcuaAddressSpaceTreeComponent(addressSpaceService, opcuaService, alertService) {
        var _this = this;
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.getChildren = function (node) { return (node.expanded ? node.children : []); };
        this.hasChild = function (_, _nodeData) {
            return _this.addressSpaceService.childrenAvailable(_nodeData.references);
        };
    }
    Object.defineProperty(OpcuaAddressSpaceTreeComponent.prototype, "moId", {
        set: function (id) {
            this._moId = id || undefined;
        },
        enumerable: true,
        configurable: true
    });
    OpcuaAddressSpaceTreeComponent.prototype.ngOnInit = function () {
        this.initializeDataSet();
    };
    OpcuaAddressSpaceTreeComponent.prototype.ngOnChanges = function (changes) {
        if (changes.moId && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.initializeDataSet = function () {
        var _this = this;
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .subscribe(function (nodeNavData) { return _this.openNode(nodeNavData); });
        this.subscriptionRef = this.focusEmitter.subscribe(function (node) {
            _this.focused = _this.isFocusedNode(node) ? undefined : node;
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.ngOnDestroy = function () {
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.openNode = function (nodeNavData) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var node, selectedAncestorIds, nodeId, clonedAncestors, n;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        node = nodeNavData.node, selectedAncestorIds = nodeNavData.selectedAncestorIds;
                        // We just set the nodeId when the selectedAncestorIds variable an empty array.
                        // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
                        // from the root node.
                        if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                            nodeId = node.nodeId;
                        }
                        // Always recreate the tree when routing to a specific nested node,
                        // because previous modifications to the tree-structure could cause errors
                        // while traversing with 'old' tree-data
                        // -----------------
                        // setupTree is able to handle nodeId = undefined
                        return [4 /*yield*/, this.setupTree(nodeId)];
                    case 1:
                        // Always recreate the tree when routing to a specific nested node,
                        // because previous modifications to the tree-structure could cause errors
                        // while traversing with 'old' tree-data
                        // -----------------
                        // setupTree is able to handle nodeId = undefined
                        _a.sent();
                        if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                            return [2 /*return*/];
                        }
                        if (!(nodeNavData && this.dataSource)) return [3 /*break*/, 3];
                        clonedAncestors = clone(selectedAncestorIds);
                        clonedAncestors.shift();
                        return [4 /*yield*/, this.dataSource.toggleNode(this.dataSource.data[0], true)];
                    case 2:
                        n = _a.sent();
                        this.setChildNodes(n.children, clonedAncestors);
                        this.toggleFocusedNode(node);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.setChildNodes = function (nodes, ids) {
        var _this = this;
        if (nodes) {
            ids.forEach(function (id) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var match, idx, toggledNode;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            match = nodes.find(function (n) { return n.nodeId === id; });
                            if (!(match && ids.length > 0)) return [3 /*break*/, 2];
                            idx = ids.findIndex(function (value) { return value === id; });
                            if (idx >= 0) {
                                ids.splice(idx, 1);
                            }
                            return [4 /*yield*/, this.dataSource.toggleNode(match, true)];
                        case 1:
                            toggledNode = _a.sent();
                            this.setChildNodes(toggledNode.children, ids);
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.setupTree = function (nodeId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, data, _a, rootNode;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.loading = true;
                        if (!this._moId || this._moId.length === 0) {
                            this._moId = this.opcuaService.getMoId();
                        }
                        return [4 /*yield*/, this.addressSpaceService.getNode(this._moId, nodeId)];
                    case 1:
                        res = _b.sent();
                        if (!res) return [3 /*break*/, 8];
                        if (!(res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        this.dataSource = undefined;
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, res.json()];
                    case 6:
                        rootNode = (_b.sent());
                        this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                        this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                        this.dataSource.data = [rootNode];
                        _b.label = 7;
                    case 7:
                        this.loading = false;
                        return [3 /*break*/, 9];
                    case 8:
                        this.loading = false;
                        _b.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.getMoId = function () {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    };
    OpcuaAddressSpaceTreeComponent.prototype.getIcon = function (nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    };
    OpcuaAddressSpaceTreeComponent.prototype.toggleFocusedNode = function (node) {
        var relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    };
    OpcuaAddressSpaceTreeComponent.prototype.isFocusedNode = function (node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    };
    OpcuaAddressSpaceTreeComponent.prototype.getRelativePath = function (node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    };
    OpcuaAddressSpaceTreeComponent.ctorParameters = function () { return [
        { type: AddressSpaceService },
        { type: OpcuaService },
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "moId", null);
    tslib_1.__decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "node", void 0);
    tslib_1.__decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "focusEmitter", void 0);
    tslib_1.__decorate([
        Output()
    ], OpcuaAddressSpaceTreeComponent.prototype, "selectedNode", void 0);
    OpcuaAddressSpaceTreeComponent = tslib_1.__decorate([
        Component({
            selector: 'opcua-address-space-tree',
            template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" (click)=\"toggleFocusedNode(node)\"\n    [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\">\n      <span>\n        <i class=\"right-m-xs\" \n        [c8yIcon]=\"getIcon(node.nodeClassName)\" \n        [ngClass]=\"{'strong':isFocusedNode(node)}\" \n        style=\"cursor: pointer\"></i>\n        {{node.displayName}}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button cdkTreeNodeToggle class=\"btn-clean text-primary right-m-xs\" [disabled]=\"node.currentlyLoadingChildren\">\n          <i class=\"fa\" [ngClass]=\"{'fa-plus-square': !node.expanded, 'fa-minus-square': node.expanded}\"></i>\n        </button>\n        <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(node.nodeClassName)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"></i>\n        <span (click)=\"toggleFocusedNode(node)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"> {{node.displayName}} </span>\n        <span class=\"left-m-xs\" [style.visibility]=\"node.currentlyLoadingChildren ? 'visible': 'hidden'\">\n          <i class=\"fa fa-circle-o-notch fa-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div style=\"padding: 8px;\" *ngIf=\"loading\">\n  <div class=\"spinner\" style=\"position: relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>"
        })
    ], OpcuaAddressSpaceTreeComponent);
    return OpcuaAddressSpaceTreeComponent;
}());
export { OpcuaAddressSpaceTreeComponent };
//# sourceMappingURL=data:application/json;base64,