import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions, InventoryService, InventoryBinaryService } from '@c8y/client';
import { Router } from '@angular/router';
import { AlertService } from '@c8y/ngx-components';
var OpcuaService = /** @class */ (function () {
    function OpcuaService(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    OpcuaService.prototype.getServers = function (id) {
        if (id && id.length > 0) {
            var options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(this.microserviceUrl + "/" + id, options);
        }
    };
    OpcuaService.prototype.createServer = function (data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            var options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch("" + this.microserviceUrl, options);
        }
    };
    OpcuaService.prototype.updateServer = function (server) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, res, data, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.doesGatewayIdExist(server) && this.doesIdExist(server))) return [3 /*break*/, 6];
                        this.cleanUpPayload(server);
                        options = {
                            method: 'POST',
                            headers: this.header,
                            body: JSON.stringify(server)
                        };
                        return [4 /*yield*/, this.client.fetch("" + this.microserviceUrl, options)];
                    case 1:
                        res = _a.sent();
                        data = void 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, res.json()];
                    case 3:
                        data = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        if (res.status !== 200) {
                            this.alertService.addServerFailure({ data: data, res: res });
                        }
                        else {
                            return [2 /*return*/, data];
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaService.prototype.removeServer = function (data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            var options = {
                method: 'DELETE'
            };
            return this.client.fetch(this.microserviceUrl + "/" + data.gatewayId + "/" + data.id, options);
        }
    };
    OpcuaService.prototype.getKeystore = function (binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    };
    OpcuaService.prototype.uploadKeystore = function (file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    };
    OpcuaService.prototype.updateKeystore = function (id, file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(id && id.length > 0 && file && file.size > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.removeKeystore(id)];
                    case 1:
                        res = (_a.sent()).res;
                        if (res && res.status === 204) {
                            return [2 /*return*/, this.uploadKeystore(file)];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, Promise.reject('Invalid file')];
                }
            });
        });
    };
    OpcuaService.prototype.removeKeystore = function (id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    };
    OpcuaService.prototype.getMoId = function () {
        var currentUrl = this.router.routerState.snapshot.url;
        var isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    };
    OpcuaService.prototype.getId = function () {
        var currentUrl = this.router.routerState.snapshot.url;
        var isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    };
    OpcuaService.prototype.getDeviceProtocol = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options;
            return tslib_1.__generator(this, function (_a) {
                options = {
                    method: 'GET',
                    headers: this.header,
                };
                return [2 /*return*/, this.client.fetch(this.deviceTypeProtocolUrl + "/" + id, options)];
            });
        });
    };
    OpcuaService.prototype.updateDeviceProtocol = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options;
            return tslib_1.__generator(this, function (_a) {
                options = {
                    method: 'PUT',
                    headers: this.header,
                    body: JSON.stringify(data)
                };
                return [2 /*return*/, this.client.fetch(this.deviceTypeProtocolUrl + "/" + data.id, options)];
            });
        });
    };
    OpcuaService.prototype.createDeviceProtocol = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options;
            return tslib_1.__generator(this, function (_a) {
                options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify(data)
                };
                return [2 /*return*/, this.client.fetch("" + this.deviceTypeProtocolUrl, options)];
            });
        });
    };
    OpcuaService.prototype.doesGatewayIdExist = function (data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    };
    OpcuaService.prototype.doesIdExist = function (data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    };
    OpcuaService.prototype.cleanUpPayload = function (data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    };
    OpcuaService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: InventoryService },
        { type: Router },
        { type: AlertService }
    ]; };
    OpcuaService = tslib_1.__decorate([
        Injectable()
    ], OpcuaService);
    return OpcuaService;
}());
export { OpcuaService };
//# sourceMappingURL=data:application/json;base64,