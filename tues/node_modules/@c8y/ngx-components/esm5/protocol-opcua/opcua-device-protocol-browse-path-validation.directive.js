import * as tslib_1 from "tslib";
import { Directive, forwardRef, ElementRef, Input, HostListener } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { some, isEqual, isEmpty } from 'lodash-es';
var OpcuaDeviceProtocolBrowsePathValidation = /** @class */ (function () {
    function OpcuaDeviceProtocolBrowsePathValidation(el) {
        this.el = el;
    }
    OpcuaDeviceProtocolBrowsePathValidation_1 = OpcuaDeviceProtocolBrowsePathValidation;
    OpcuaDeviceProtocolBrowsePathValidation.prototype.validate = function (control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.isValidJson = function (value) {
        try {
            var browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.toArray = function (str) {
        return JSON.parse(str);
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.isBrowsePathUnique = function (value) {
        var _this = this;
        var mappings = this.getMappings();
        var found = some(mappings, function (item) {
            if (isEqual(item.browsePath, _this.toArray(value)) && item.id !== _this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    };
    var OpcuaDeviceProtocolBrowsePathValidation_1;
    OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], OpcuaDeviceProtocolBrowsePathValidation.prototype, "getMappings", void 0);
    tslib_1.__decorate([
        Input()
    ], OpcuaDeviceProtocolBrowsePathValidation.prototype, "model", void 0);
    OpcuaDeviceProtocolBrowsePathValidation = OpcuaDeviceProtocolBrowsePathValidation_1 = tslib_1.__decorate([
        Directive({
            selector: '[c8yBrowsePathValidator][ngModel]',
            providers: [
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return OpcuaDeviceProtocolBrowsePathValidation_1; }),
                    multi: true
                }
            ]
        })
    ], OpcuaDeviceProtocolBrowsePathValidation);
    return OpcuaDeviceProtocolBrowsePathValidation;
}());
export { OpcuaDeviceProtocolBrowsePathValidation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtZGV2aWNlLXByb3RvY29sLWJyb3dzZS1wYXRoLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1vcGN1YS8iLCJzb3VyY2VzIjpbIm9wY3VhLWRldmljZS1wcm90b2NvbC1icm93c2UtcGF0aC12YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFzQyxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFZbkQ7SUFJRSxpREFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7SUFBRyxDQUFDO2dEQUozQix1Q0FBdUM7SUFNbEQsMERBQVEsR0FBUixVQUFTLE9BQXdCO1FBQy9CLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQzFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDdEM7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsNkRBQVcsR0FBWCxVQUFZLEtBQUs7UUFDZixJQUFJO1lBQ0YsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELHlEQUFPLEdBQVAsVUFBUSxHQUFHO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxvRUFBa0IsR0FBbEIsVUFBbUIsS0FBSztRQUF4QixpQkFRQztRQVBDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQUEsSUFBSTtZQUMvQixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUM5RSxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQzs7O2dCQXBDdUIsVUFBVTs7SUFIekI7UUFBUixLQUFLLEVBQUU7Z0ZBQXVCO0lBQ3RCO1FBQVIsS0FBSyxFQUFFOzBFQUFZO0lBRlQsdUNBQXVDO1FBVm5ELFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQ0FBbUM7WUFDN0MsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx5Q0FBdUMsRUFBdkMsQ0FBdUMsQ0FBQztvQkFDdEUsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7T0FDVyx1Q0FBdUMsQ0F5Q25EO0lBQUQsOENBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXpDWSx1Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRm9ybSwgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBzb21lLCBpc0VxdWFsLCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUJyb3dzZVBhdGhWYWxpZGF0b3JdW25nTW9kZWxdJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE9wY3VhRGV2aWNlUHJvdG9jb2xCcm93c2VQYXRoVmFsaWRhdGlvbiksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBPcGN1YURldmljZVByb3RvY29sQnJvd3NlUGF0aFZhbGlkYXRpb24gaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBASW5wdXQoKSBnZXRNYXBwaW5nczogKCkgPT4gW107XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICBpZiAoY29udHJvbC52YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRKc29uKGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGludmFsaWRCcm93c2VQYXRoTm90YXRpb246IHRydWUgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzQnJvd3NlUGF0aFVuaXF1ZShjb250cm9sLnZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB7IGJyb3dzZVBhdGhOb3RVbmlxdWU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlzVmFsaWRKc29uKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJyb3dzZVBhdGggPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIHJldHVybiAhaXNFbXB0eShicm93c2VQYXRoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRvQXJyYXkoc3RyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfVxuXG4gIGlzQnJvd3NlUGF0aFVuaXF1ZSh2YWx1ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1hcHBpbmdzID0gdGhpcy5nZXRNYXBwaW5ncygpO1xuICAgIGNvbnN0IGZvdW5kID0gc29tZShtYXBwaW5ncywgaXRlbSA9PiB7XG4gICAgICBpZiAoaXNFcXVhbChpdGVtLmJyb3dzZVBhdGgsIHRoaXMudG9BcnJheSh2YWx1ZSkpICYmIGl0ZW0uaWQgIT09IHRoaXMubW9kZWwuaWQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG59XG4iXX0=