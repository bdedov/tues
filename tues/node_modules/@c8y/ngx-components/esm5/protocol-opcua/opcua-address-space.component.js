import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { AddressSpaceService, AddressSpaceNode } from './address-space.service';
import { gettext } from '@c8y/ngx-components';
import { OpcuaService } from './opcuaService';
var OpcuaAddressSpaceComponent = /** @class */ (function () {
    function OpcuaAddressSpaceComponent(addressSpaceService, opcuaService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.selectednode = false;
        this.loading = false;
        this.searchInProgress = false;
        this.focusStatus = new EventEmitter();
        this.moId = '';
    }
    OpcuaAddressSpaceComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.filterLabel = gettext('Filterâ€¦');
                this.moId = this.opcuaService.getMoId();
                return [2 /*return*/];
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.ngOnDestroy = function () {
        // The BehaviourSubject will store the last array of ancestorNodes from the previous search
        // this would cause the component while subscribing in the init-phase to the subject to travers
        // to the last searched node again. From user perspective it does not make sense, because the user
        // left the Address space (tab) and should loose the context and just request a new search or
        // browse the tree manually.
        this.addressSpaceService.resetTreeToRootNode();
    };
    OpcuaAddressSpaceComponent.prototype.searchNodes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.searchInProgress = true;
                        this.clearNodeListAndCheckSearchString();
                        if (!this.isSearch) return [3 /*break*/, 2];
                        this.currentNode = undefined;
                        _a = this;
                        return [4 /*yield*/, this.addressSpaceService.getSearchedNodes(this.searchKey, this.moId)];
                    case 1:
                        _a.nodeList = _b.sent();
                        this.searchInProgress = false;
                        this.nodeList.resultLabel = gettext('Results found');
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.clearNodeListAndCheckSearchString = function () {
        this.isSearch = this.searchKey !== undefined && this.searchKey !== '' ? true : false;
        if (!this.isSearch) {
            this.searchInProgress = false;
        }
    };
    OpcuaAddressSpaceComponent.prototype.clearSearch = function () {
        this.isSearch = false;
        this.searchKey = '';
        this.currentNode = undefined;
    };
    OpcuaAddressSpaceComponent.prototype.getIcon = function (nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    };
    OpcuaAddressSpaceComponent.prototype.selectNode = function (node) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(node && node.nodeId && node.nodeId.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.addressSpaceService.getNodeById(this.moId, node.nodeId)];
                    case 1:
                        res = _b.sent();
                        _a = this.toggleCurrentNode;
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a.apply(this, [(_b.sent())]);
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.toggleCurrentNode = function (node) {
        this.currentNode = this.isNodeSet(node) ? undefined : node;
    };
    OpcuaAddressSpaceComponent.prototype.backHandler = function (node) {
        this.isSearch = false;
        this.focusStatus.emit(node);
        this.toggleCurrentNode(node);
    };
    OpcuaAddressSpaceComponent.prototype.isNodeSet = function (node) {
        if (this.currentNode !== undefined && this.currentNode.nodeId === node.nodeId) {
            return true;
        }
        return false;
    };
    OpcuaAddressSpaceComponent.ctorParameters = function () { return [
        { type: AddressSpaceService },
        { type: OpcuaService }
    ]; };
    tslib_1.__decorate([
        Output()
    ], OpcuaAddressSpaceComponent.prototype, "focusStatus", void 0);
    OpcuaAddressSpaceComponent = tslib_1.__decorate([
        Component({
            selector: 'opcua-address-space',
            template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-gray-lighter split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -4px 0;\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button *ngIf=\"!isSearch\" type=\"submit\" class=\"btn btn-clean\" (click)=\"searchNodes()\">\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button *ngIf=\"isSearch\" class=\"btn btn-clean\" (click)=\"clearSearch()\">\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em\n            >&nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div style=\"padding: 8px;\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <div class=\"spinner\" style=\"position: relative\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div\n          class=\"list-group list-group-links\"\n          *ngIf=\"isSearch && !loading\"\n          style=\"box-shadow: none;\"\n        >\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item flex-row': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span> {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none;\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n"
        })
    ], OpcuaAddressSpaceComponent);
    return OpcuaAddressSpaceComponent;
}());
export { OpcuaAddressSpaceComponent };
//# sourceMappingURL=data:application/json;base64,