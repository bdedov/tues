import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Base } from './export-schedules.interface';
import { CronService } from './cron.service';
var CronComponent = /** @class */ (function () {
    function CronComponent(cronService) {
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.emittedCron = {
            valid: false,
            cron: ''
        };
        this.base = Base.Initial;
        //
    }
    CronComponent.prototype.ngOnInit = function () {
        this.daysOfWeekPosix = this.cronService.daysOfWeekPosix;
        this.daysOfMonth = this.cronService.daysOfMonth;
        this.months = this.cronService.months;
        this.hours = this.cronService.hours;
        this.minutes = this.cronService.minutes;
        this.intervals = this.cronService.intervals;
        this.cronConfig = this.cronService.generateCronConfig(this.cronIn);
        this.base = this.cronService.getBase(this.cronConfig);
    };
    CronComponent.prototype.onChangeSelect = function () {
        this.cronService.clearNextModels(this.base, this.cronConfig);
        this.emittedCron.valid = this.cronService.validateModels(this.base, this.cronConfig);
        this.emittedCron.cron = this.cronService.generateCron(this.cronConfig);
        this.emitter.emit(this.emittedCron);
    };
    CronComponent.ctorParameters = function () { return [
        { type: CronService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], CronComponent.prototype, "cronIn", void 0);
    tslib_1.__decorate([
        Output()
    ], CronComponent.prototype, "emitter", void 0);
    CronComponent = tslib_1.__decorate([
        Component({
            selector: 'cron',
            template: "<div class=\"cron-wrap\">\n  <div class=\"form-group smart-cron-job-every\">\n    <label for=\"smart-cron-job-every\" class=\"control-label\" translate>\n      Interval\n    </label>\n    <div class=\"\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control\"\n          id=\"smart-cron-job-every\"\n          [(ngModel)]=\"base\"\n          required=\"true\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngIf=\"base === 1\" value=\"1\" translate>\n            Select\u2026\n          </option>\n          <option *ngFor=\"let baseInterval of intervals\" [ngValue]=\"baseInterval.value\">\n            {{ baseInterval.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group smart-cron-job-on col-md-6\" *ngIf=\"base == 4\">\n      <label class=\"control-label\" for=\"smart-cron-job-on\" translate>\n        Day\n      </label>\n\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control day-value\"\n          id=\"smart-cron-job-on\"\n          [(ngModel)]=\"cronConfig.weekday\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfWeek of daysOfWeekPosix\" [ngValue]=\"dayOfWeek.value\">\n            {{ dayOfWeek.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-of col-md-6\" *ngIf=\"base == 6\">\n      <label for=\"smart-cron-job-of\" class=\"control-label\" translate>\n        Month\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-of\"\n            class=\"cron-select form-control month-value\"\n            [(ngModel)]=\"cronConfig.month\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let month of months\" [ngValue]=\"month.value\">\n              {{ month.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-on-the col-md-6\" *ngIf=\"base >= 5\">\n      <label for=\"smart-cron-job-on-the\" class=\"control-label\" translate>\n        Day\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-on-the\"\n            class=\"cron-select form-control day-of-month-value\"\n            [(ngModel)]=\"cronConfig.day\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let dayOfMonth of daysOfMonth\" [ngValue]=\"dayOfMonth.value\">\n              {{ dayOfMonth.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-at\" *ngIf=\"base >= 2\">\n    <label for=\"smart-cron-job-at-hour\" class=\"control-label\">\n      <span *ngIf=\"base >= 3\" translate>Time</span>\n      <span *ngIf=\"base < 3\" translate>Minutes</span>\n    </label>\n    <div>\n      <div class=\"form-inline\">\n        <div class=\"c8y-select-wrapper\" *ngIf=\"base >= 3\">\n          <select\n            id=\"smart-cron-job-at-hour\"\n            class=\"cron-select form-control hour-value\"\n            [(ngModel)]=\"cronConfig.hour\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let hour of hours\" [ngValue]=\"hour.value\">\n              {{ hour.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n        <span *ngIf=\"base >= 3\"> : </span>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"cron-select form-control minute-value\"\n            id=\"smart-cron-job-at-minute\"\n            [(ngModel)]=\"cronConfig.minute\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let minute of minutes\" [ngValue]=\"minute.value\">\n              {{ minute.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], CronComponent);
    return CronComponent;
}());
export { CronComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3JlcG9ydHMvIiwic291cmNlcyI6WyJjcm9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQTJCLElBQUksRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU03QztJQWtCRSx1QkFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFoQmxDLFlBQU8sR0FBOEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRSxnQkFBVyxHQUFnQjtZQUN6QixLQUFLLEVBQUUsS0FBSztZQUNaLElBQUksRUFBRSxFQUFFO1NBQ1QsQ0FBQztRQUVGLFNBQUksR0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBV3hCLEVBQUU7SUFDSixDQUFDO0lBRUQsZ0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUNoRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUN4QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBRTVDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELHNDQUFjLEdBQWQ7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7O2dCQXJCZ0MsV0FBVzs7SUFqQm5DO1FBQVIsS0FBSyxFQUFFO2lEQUFnQjtJQUNkO1FBQVQsTUFBTSxFQUFFO2tEQUF5RDtJQUZ2RCxhQUFhO1FBSnpCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxNQUFNO1lBQ2hCLHd2SUFBb0M7U0FDckMsQ0FBQztPQUNXLGFBQWEsQ0F3Q3pCO0lBQUQsb0JBQUM7Q0FBQSxBQXhDRCxJQXdDQztTQXhDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRW1pdHRlZENyb24sIENyb25Db25maWcsIEJhc2UgfSBmcm9tICcuL2V4cG9ydC1zY2hlZHVsZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IENyb25TZXJ2aWNlIH0gZnJvbSAnLi9jcm9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjcm9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nyb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENyb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBjcm9uSW46IHN0cmluZztcbiAgQE91dHB1dCgpIGVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxFbWl0dGVkQ3Jvbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGVtaXR0ZWRDcm9uOiBFbWl0dGVkQ3JvbiA9IHtcbiAgICB2YWxpZDogZmFsc2UsXG4gICAgY3JvbjogJydcbiAgfTtcblxuICBiYXNlOiBCYXNlID0gQmFzZS5Jbml0aWFsO1xuICBjcm9uQ29uZmlnOiBDcm9uQ29uZmlnO1xuXG4gIGRheXNPZldlZWtQb3NpeDogYW55W107XG4gIGRheXNPZk1vbnRoOiBhbnlbXTtcbiAgbW9udGhzOiBhbnlbXTtcbiAgaG91cnM6IGFueVtdO1xuICBtaW51dGVzOiBhbnlbXTtcbiAgaW50ZXJ2YWxzOiBhbnlbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNyb25TZXJ2aWNlOiBDcm9uU2VydmljZSkge1xuICAgIC8vXG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRheXNPZldlZWtQb3NpeCA9IHRoaXMuY3JvblNlcnZpY2UuZGF5c09mV2Vla1Bvc2l4O1xuICAgIHRoaXMuZGF5c09mTW9udGggPSB0aGlzLmNyb25TZXJ2aWNlLmRheXNPZk1vbnRoO1xuICAgIHRoaXMubW9udGhzID0gdGhpcy5jcm9uU2VydmljZS5tb250aHM7XG4gICAgdGhpcy5ob3VycyA9IHRoaXMuY3JvblNlcnZpY2UuaG91cnM7XG4gICAgdGhpcy5taW51dGVzID0gdGhpcy5jcm9uU2VydmljZS5taW51dGVzO1xuICAgIHRoaXMuaW50ZXJ2YWxzID0gdGhpcy5jcm9uU2VydmljZS5pbnRlcnZhbHM7XG5cbiAgICB0aGlzLmNyb25Db25maWcgPSB0aGlzLmNyb25TZXJ2aWNlLmdlbmVyYXRlQ3JvbkNvbmZpZyh0aGlzLmNyb25Jbik7XG4gICAgdGhpcy5iYXNlID0gdGhpcy5jcm9uU2VydmljZS5nZXRCYXNlKHRoaXMuY3JvbkNvbmZpZyk7XG4gIH1cblxuICBvbkNoYW5nZVNlbGVjdCgpIHtcbiAgICB0aGlzLmNyb25TZXJ2aWNlLmNsZWFyTmV4dE1vZGVscyh0aGlzLmJhc2UsIHRoaXMuY3JvbkNvbmZpZyk7XG4gICAgdGhpcy5lbWl0dGVkQ3Jvbi52YWxpZCA9IHRoaXMuY3JvblNlcnZpY2UudmFsaWRhdGVNb2RlbHModGhpcy5iYXNlLCB0aGlzLmNyb25Db25maWcpO1xuICAgIHRoaXMuZW1pdHRlZENyb24uY3JvbiA9IHRoaXMuY3JvblNlcnZpY2UuZ2VuZXJhdGVDcm9uKHRoaXMuY3JvbkNvbmZpZyk7XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQodGhpcy5lbWl0dGVkQ3Jvbik7XG4gIH1cbn1cbiJdfQ==