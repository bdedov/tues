import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { AppLogsService } from './app-logs.service';
import { fromEvent, Subject, of, interval, NEVER } from 'rxjs';
import { filter, catchError, tap, debounce, switchMap, takeUntil, finalize, delay, repeat, merge, scan } from 'rxjs/operators';
var AppLogsAutoRefreshComponent = /** @class */ (function () {
    function AppLogsAutoRefreshComponent(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = true;
        this.onNewLogs = new EventEmitter();
        this.toggleState = function (currentState) { return !currentState; };
    }
    Object.defineProperty(AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", {
        set: function (areDisabled) {
            this.isAutoRefreshDisabled = areDisabled;
            if (areDisabled && this.isAutoRefreshOn) {
                this.isAutoRefreshOn = false;
                this.cancel$.next(false);
            }
        },
        enumerable: true,
        configurable: true
    });
    AppLogsAutoRefreshComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(function () { return interval(300); }), scan(this.toggleState, false), tap(function (isAutoRefreshOn) { return _this.setButtonState(isAutoRefreshOn); }), switchMap(function (isOn) { return (isOn ? _this.watchForNewLogs() : NEVER); }));
        this.subscription = clicks$.subscribe();
    };
    AppLogsAutoRefreshComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    AppLogsAutoRefreshComponent.prototype.setButtonState = function (isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
    };
    AppLogsAutoRefreshComponent.prototype.watchForNewLogs = function () {
        var _this = this;
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(function (isAutoRefreshOn) { return isAutoRefreshOn === false; }))), finalize(function () {
            _this.isAutoRefreshOn = false;
        }));
    };
    AppLogsAutoRefreshComponent.prototype.startPolling = function () {
        var _this = this;
        return of(1).pipe(switchMap(function () { return _this.getNewLogs().pipe(catchError(function (er) { return of(_this.getEmptyLogsJson()); })); }), tap(function (logs) { return _this.updateLogsToOutput(logs); }), delay(10000), repeat());
    };
    AppLogsAutoRefreshComponent.prototype.getNewLogs = function () {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    };
    AppLogsAutoRefreshComponent.prototype.getAppId = function () {
        return this.mo.applicationId;
    };
    AppLogsAutoRefreshComponent.prototype.getInstanceName = function () {
        return this.selectedInstance.name;
    };
    AppLogsAutoRefreshComponent.prototype.updateLogsToOutput = function (newLogs) {
        var dateFrom = newLogs.dateFrom, dateTo = newLogs.dateTo;
        if (dateFrom && dateTo) {
            this.logsToOutput = tslib_1.__assign({}, newLogs);
            this.onNewLogs.emit(this.logsToOutput);
        }
    };
    AppLogsAutoRefreshComponent.prototype.getEmptyLogsJson = function () {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    };
    AppLogsAutoRefreshComponent.ctorParameters = function () { return [
        { type: AppLogsService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "selectedInstance", void 0);
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "mo", void 0);
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", null);
    tslib_1.__decorate([
        Output()
    ], AppLogsAutoRefreshComponent.prototype, "onNewLogs", void 0);
    tslib_1.__decorate([
        ViewChild('autoRefresh', { static: true })
    ], AppLogsAutoRefreshComponent.prototype, "button", void 0);
    AppLogsAutoRefreshComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-app-logs-auto-refresh',
            template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
        })
    ], AppLogsAutoRefreshComponent);
    return AppLogsAutoRefreshComponent;
}());
export { AppLogsAutoRefreshComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3MtYXV0by1yZWZyZXNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXBwLWxvZ3MvIiwic291cmNlcyI6WyJhcHAtbG9ncy1hdXRvLXJlZnJlc2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBYyxNQUFNLGVBQWUsQ0FBQztBQUU5RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFjLFNBQVMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3pGLE9BQU8sRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLEdBQUcsRUFDSCxRQUFRLEVBQ1IsU0FBUyxFQUNULFNBQVMsRUFDVCxRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDTixLQUFLLEVBQ0wsSUFBSSxFQUNMLE1BQU0sZ0JBQWdCLENBQUM7QUFNeEI7SUFvQkUscUNBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQW5CbEQsWUFBTyxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQ25ELDBCQUFxQixHQUFZLEtBQUssQ0FBQztRQUN2QyxpQkFBWSxHQUFhLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2pELG9CQUFlLEdBQVksSUFBSSxDQUFDO1FBV3RCLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBWSxDQUFDO1FBdUIzQyxnQkFBVyxHQUFHLFVBQUEsWUFBWSxJQUFJLE9BQUEsQ0FBQyxZQUFZLEVBQWIsQ0FBYSxDQUFDO0lBbEJDLENBQUM7SUFaN0Msc0JBQUksd0RBQWU7YUFBbkIsVUFBb0IsV0FBb0I7WUFDL0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFdBQVcsQ0FB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T0FBTztRQUN4QixJQUFBLDJCQUFRLEVBQUUsdUJBQU0sQ0FBYTtRQUNyQyxJQUFJLFFBQVEsSUFBSSxNQUFNLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFlBQVksd0JBQVEsT0FBTyxDQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVPLHNEQUFnQixHQUF4QjtRQUNFLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSTtZQUNkLE1BQU0sRUFBRSxJQUFJO1lBQ1osSUFBSSxFQUFFLEVBQUU7WUFDUixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0lBQ0osQ0FBQzs7Z0JBcEVtQyxjQUFjOztJQWR6QztRQUFSLEtBQUssRUFBRTt5RUFBdUI7SUFDdEI7UUFBUixLQUFLLEVBQUU7MkRBQVM7SUFDUjtRQUFSLEtBQUssRUFBRTtzRUFNUDtJQUNTO1FBQVQsTUFBTSxFQUFFO2tFQUEwQztJQUNQO1FBQTNDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7K0RBQW9CO0lBaEJwRCwyQkFBMkI7UUFKdkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxtV0FBcUQ7U0FDdEQsQ0FBQztPQUNXLDJCQUEyQixDQXlGdkM7SUFBRCxrQ0FBQztDQUFBLEFBekZELElBeUZDO1NBekZZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ3NKU09OIH0gZnJvbSAnLi9sb2dzLm1vZGVsJztcbmltcG9ydCB7IEFwcExvZ3NTZXJ2aWNlIH0gZnJvbSAnLi9hcHAtbG9ncy5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb21FdmVudCwgU3ViamVjdCwgb2YsIGludGVydmFsLCBORVZFUiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBmaWx0ZXIsXG4gIGNhdGNoRXJyb3IsXG4gIHRhcCxcbiAgZGVib3VuY2UsXG4gIHN3aXRjaE1hcCxcbiAgdGFrZVVudGlsLFxuICBmaW5hbGl6ZSxcbiAgZGVsYXksXG4gIHJlcGVhdCxcbiAgbWVyZ2UsXG4gIHNjYW5cbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLWxvZ3MtYXV0by1yZWZyZXNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FwcC1sb2dzLWF1dG8tcmVmcmVzaC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwTG9nc0F1dG9SZWZyZXNoQ29tcG9uZW50IHtcbiAgY2FuY2VsJDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIGlzQXV0b1JlZnJlc2hEaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBsb2dzVG9PdXRwdXQ6IExvZ3NKU09OID0gdGhpcy5nZXRFbXB0eUxvZ3NKc29uKCk7XG4gIGlzQXV0b1JlZnJlc2hPbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgQElucHV0KCkgc2VsZWN0ZWRJbnN0YW5jZTogYW55O1xuICBASW5wdXQoKSBtbzogYW55O1xuICBASW5wdXQoKSBzZXQgYnV0dG9uc0Rpc2FibGVkKGFyZURpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0F1dG9SZWZyZXNoRGlzYWJsZWQgPSBhcmVEaXNhYmxlZDtcbiAgICBpZiAoYXJlRGlzYWJsZWQgJiYgdGhpcy5pc0F1dG9SZWZyZXNoT24pIHtcbiAgICAgIHRoaXMuaXNBdXRvUmVmcmVzaE9uID0gZmFsc2U7XG4gICAgICB0aGlzLmNhbmNlbCQubmV4dChmYWxzZSk7XG4gICAgfVxuICB9XG4gIEBPdXRwdXQoKSBvbk5ld0xvZ3MgPSBuZXcgRXZlbnRFbWl0dGVyPExvZ3NKU09OPigpO1xuICBAVmlld0NoaWxkKCdhdXRvUmVmcmVzaCcsIHsgc3RhdGljOiB0cnVlIH0pIGJ1dHRvbjogRWxlbWVudFJlZjtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwTG9nc1NlcnZpY2U6IEFwcExvZ3NTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBjbGlja3MkID0gZnJvbUV2ZW50KHRoaXMuYnV0dG9uLm5hdGl2ZUVsZW1lbnQsICdjbGljaycpLnBpcGUoXG4gICAgICBtZXJnZSh0aGlzLmNhbmNlbCQpLFxuICAgICAgZGVib3VuY2UoKCkgPT4gaW50ZXJ2YWwoMzAwKSksXG4gICAgICBzY2FuKHRoaXMudG9nZ2xlU3RhdGUsIGZhbHNlKSxcbiAgICAgIHRhcChpc0F1dG9SZWZyZXNoT24gPT4gdGhpcy5zZXRCdXR0b25TdGF0ZShpc0F1dG9SZWZyZXNoT24pKSxcbiAgICAgIHN3aXRjaE1hcChpc09uID0+IChpc09uID8gdGhpcy53YXRjaEZvck5ld0xvZ3MoKSA6IE5FVkVSKSlcbiAgICApO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gY2xpY2tzJC5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSB0b2dnbGVTdGF0ZSA9IGN1cnJlbnRTdGF0ZSA9PiAhY3VycmVudFN0YXRlO1xuXG4gIHByaXZhdGUgc2V0QnV0dG9uU3RhdGUoaXNBdXRvUmVmcmVzaE9uOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0F1dG9SZWZyZXNoT24gPSBpc0F1dG9SZWZyZXNoT247XG4gIH1cblxuICBwcml2YXRlIHdhdGNoRm9yTmV3TG9ncygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFydFBvbGxpbmcoKS5waXBlKFxuICAgICAgdGFrZVVudGlsKHRoaXMuY2FuY2VsJC5waXBlKGZpbHRlcihpc0F1dG9SZWZyZXNoT24gPT4gaXNBdXRvUmVmcmVzaE9uID09PSBmYWxzZSkpKSxcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgdGhpcy5pc0F1dG9SZWZyZXNoT24gPSBmYWxzZTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRQb2xsaW5nKCkge1xuICAgIHJldHVybiBvZigxKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0TmV3TG9ncygpLnBpcGUoY2F0Y2hFcnJvcihlciA9PiBvZih0aGlzLmdldEVtcHR5TG9nc0pzb24oKSkpKSksXG4gICAgICB0YXAobG9ncyA9PiB0aGlzLnVwZGF0ZUxvZ3NUb091dHB1dChsb2dzKSksXG4gICAgICBkZWxheSgxMDAwMCksXG4gICAgICByZXBlYXQoKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldE5ld0xvZ3MoKTogT2JzZXJ2YWJsZTxMb2dzSlNPTj4ge1xuICAgIHJldHVybiB0aGlzLmFwcExvZ3NTZXJ2aWNlLmdldExvZ3MkKHRoaXMuZ2V0QXBwSWQoKSwgdGhpcy5nZXRJbnN0YW5jZU5hbWUoKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFwcElkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubW8uYXBwbGljYXRpb25JZDtcbiAgfVxuICBwcml2YXRlIGdldEluc3RhbmNlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSW5zdGFuY2UubmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTG9nc1RvT3V0cHV0KG5ld0xvZ3MpIHtcbiAgICBjb25zdCB7IGRhdGVGcm9tLCBkYXRlVG8gfSA9IG5ld0xvZ3M7XG4gICAgaWYgKGRhdGVGcm9tICYmIGRhdGVUbykge1xuICAgICAgdGhpcy5sb2dzVG9PdXRwdXQgPSB7IC4uLm5ld0xvZ3MgfTtcbiAgICAgIHRoaXMub25OZXdMb2dzLmVtaXQodGhpcy5sb2dzVG9PdXRwdXQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0RW1wdHlMb2dzSnNvbigpOiBMb2dzSlNPTiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGVGcm9tOiBudWxsLFxuICAgICAgZGF0ZVRvOiBudWxsLFxuICAgICAgbG9nczogJycsXG4gICAgICB0cnVuY2F0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxufVxuIl19