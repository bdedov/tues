import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions } from '@c8y/client';
import { from } from 'rxjs';
import { flatMap } from 'rxjs/operators';
var AppLogsService = /** @class */ (function () {
    function AppLogsService(client) {
        this.client = client;
        this.BASE_PATH_APPLICATION = 'application/applications';
        this.header = {
            Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
        };
    }
    AppLogsService.prototype.getLogs$ = function (appId, instanceName, params) {
        if (params === void 0) { params = {}; }
        var url = this.BASE_PATH_APPLICATION + "/" + appId + "/logs/" + instanceName;
        var defaultConfig = {
            headers: this.header,
            method: 'GET'
        };
        var formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        var formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        var modifiedParams = tslib_1.__assign({}, params, (formattedDateFrom && { dateFrom: formattedDateFrom }), (formattedDateTo && { dateTo: formattedDateTo }));
        var config = params ? tslib_1.__assign({}, defaultConfig, { params: modifiedParams }) : tslib_1.__assign({}, defaultConfig);
        return from(this.client.fetch(url, config)).pipe(flatMap(function (res) { return res.json(); }));
    };
    AppLogsService.prototype.formatDate = function (dateToFormat) {
        return new Date(dateToFormat).toISOString();
    };
    AppLogsService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    AppLogsService = tslib_1.__decorate([
        Injectable()
    ], AppLogsService);
    return AppLogsService;
}());
export { AppLogsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxvZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXBwLWxvZ3MvIiwic291cmNlcyI6WyJhcHAtbG9ncy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pELE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBU3pDO0lBSUUsd0JBQW9CLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFIL0IsMEJBQXFCLEdBQVcsMEJBQTBCLENBQUM7UUFJakUsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNaLE1BQU0sRUFBRSwrRUFBK0U7U0FDeEYsQ0FBQztJQUNKLENBQUM7SUFFRCxpQ0FBUSxHQUFSLFVBQVMsS0FBYSxFQUFFLFlBQW9CLEVBQUUsTUFBMEI7UUFBMUIsdUJBQUEsRUFBQSxXQUEwQjtRQUN0RSxJQUFNLEdBQUcsR0FBTSxJQUFJLENBQUMscUJBQXFCLFNBQUksS0FBSyxjQUFTLFlBQWMsQ0FBQztRQUMxRSxJQUFNLGFBQWEsR0FBa0I7WUFDbkMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUNGLElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNwRixJQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlFLElBQU0sY0FBYyx3QkFDZixNQUFNLEVBQ04sQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLEVBQ3RELENBQUMsZUFBZSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQ3BELENBQUM7UUFFRixJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxzQkFBTSxhQUFhLElBQUUsTUFBTSxFQUFFLGNBQWMsSUFBRyxDQUFDLHNCQUFNLGFBQWEsQ0FBRSxDQUFDO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsbUNBQVUsR0FBVixVQUFXLFlBQW9CO1FBQzdCLE9BQU8sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7Z0JBMUIyQixXQUFXOztJQUo1QixjQUFjO1FBRDFCLFVBQVUsRUFBRTtPQUNBLGNBQWMsQ0ErQjFCO0lBQUQscUJBQUM7Q0FBQSxBQS9CRCxJQStCQztTQS9CWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nc0pTT04gfSBmcm9tICcuL2xvZ3MubW9kZWwnO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQsIElGZXRjaE9wdGlvbnMgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmbGF0TWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbnRlcmZhY2UgUmVxdWVzdFBhcmFtcyB7XG4gIGRhdGVGcm9tPztcbiAgZGF0ZVRvPztcbiAgbGltaXQ/O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBwTG9nc1NlcnZpY2Uge1xuICBwcml2YXRlIEJBU0VfUEFUSF9BUFBMSUNBVElPTjogc3RyaW5nID0gJ2FwcGxpY2F0aW9uL2FwcGxpY2F0aW9ucyc7XG4gIHByaXZhdGUgaGVhZGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGllbnQ6IEZldGNoQ2xpZW50KSB7XG4gICAgdGhpcy5oZWFkZXIgPSB7XG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi92bmQuY29tLm5zbi5jdW11bG9jaXR5LmFwcGxpY2F0aW9uTG9ncytqc29uO2NoYXJzZXQ9VVRGLTg7dmVyPTAuOSdcbiAgICB9O1xuICB9XG5cbiAgZ2V0TG9ncyQoYXBwSWQ6IHN0cmluZywgaW5zdGFuY2VOYW1lOiBzdHJpbmcsIHBhcmFtczogUmVxdWVzdFBhcmFtcyA9IHt9KTogT2JzZXJ2YWJsZTxMb2dzSlNPTj4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuQkFTRV9QQVRIX0FQUExJQ0FUSU9OfS8ke2FwcElkfS9sb2dzLyR7aW5zdGFuY2VOYW1lfWA7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZzogSUZldGNoT3B0aW9ucyA9IHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyLFxuICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgIH07XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZUZyb20gPSBwYXJhbXMuZGF0ZUZyb20gPyB0aGlzLmZvcm1hdERhdGUocGFyYW1zLmRhdGVGcm9tKSA6IG51bGw7XG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZVRvID0gcGFyYW1zLmRhdGVUbyA/IHRoaXMuZm9ybWF0RGF0ZShwYXJhbXMuZGF0ZVRvKSA6IG51bGw7XG4gICAgY29uc3QgbW9kaWZpZWRQYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZUZyb20gJiYgeyBkYXRlRnJvbTogZm9ybWF0dGVkRGF0ZUZyb20gfSksXG4gICAgICAuLi4oZm9ybWF0dGVkRGF0ZVRvICYmIHsgZGF0ZVRvOiBmb3JtYXR0ZWREYXRlVG8gfSlcbiAgICB9O1xuXG4gICAgY29uc3QgY29uZmlnID0gcGFyYW1zID8geyAuLi5kZWZhdWx0Q29uZmlnLCBwYXJhbXM6IG1vZGlmaWVkUGFyYW1zIH0gOiB7IC4uLmRlZmF1bHRDb25maWcgfTtcbiAgICByZXR1cm4gZnJvbSh0aGlzLmNsaWVudC5mZXRjaCh1cmwsIGNvbmZpZykpLnBpcGUoZmxhdE1hcChyZXMgPT4gcmVzLmpzb24oKSkpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZShkYXRlVG9Gb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVUb0Zvcm1hdCkudG9JU09TdHJpbmcoKTtcbiAgfVxufVxuIl19