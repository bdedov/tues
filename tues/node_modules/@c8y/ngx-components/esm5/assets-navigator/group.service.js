import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { GroupFragment } from './group-fragment.model';
var DeviceGroupService = /** @class */ (function () {
    function DeviceGroupService() {
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'circle',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = "_" + GroupFragment.dataBrokerSourceFragment;
    }
    DeviceGroupService.prototype.isGroup = function (mo) {
        return !!mo[GroupFragment.groupFragmentType] || mo.type === GroupFragment.groupType || mo.type === GroupFragment.subGroupType;
    };
    DeviceGroupService.prototype.isDynamicGroup = function (mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    };
    DeviceGroupService.prototype.isDataBroker = function (mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive];
    };
    DeviceGroupService.prototype.isDataBrokerActive = function (mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive];
    };
    DeviceGroupService.prototype.icon = function (mo, open) {
        var type = 'other';
        if (this.isDynamicGroup(mo)) {
            type = 'dynamicGroup';
        }
        else if (this.isDataBrokerActive(mo)) {
            type = 'brokerSource';
        }
        else if (this.isDataBroker(mo)) {
            type = 'brokerSourceInactive';
        }
        else if (this.isGroup(mo)) {
            type = 'group';
        }
        var icon = this.icons[type];
        return (open && icon.iconOpen) || icon.icon;
    };
    DeviceGroupService = tslib_1.__decorate([
        Injectable()
    ], DeviceGroupService);
    return DeviceGroupService;
}());
export { DeviceGroupService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvci8iLCJzb3VyY2VzIjpbImdyb3VwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR3ZEO0lBREE7UUFFRSxVQUFLLEdBQUc7WUFDTixvQkFBb0IsRUFBRTtnQkFDcEIsSUFBSSxFQUFFLDJCQUEyQjthQUNsQztZQUNELFlBQVksRUFBRTtnQkFDWixJQUFJLEVBQUUsa0JBQWtCO2dCQUN4QixRQUFRLEVBQUUsdUJBQXVCO2FBQ2xDO1lBQ0QsS0FBSyxFQUFFO2dCQUNMLElBQUksRUFBRSxXQUFXO2dCQUNqQixRQUFRLEVBQUUsZ0JBQWdCO2FBQzNCO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLFFBQVEsRUFBRSxzQkFBc0I7YUFDakM7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsU0FBUyxFQUFFLGVBQWU7YUFDM0I7U0FDRixDQUFDO1FBQ0YscUNBQWdDLEdBQUcsTUFBSSxhQUFhLENBQUMsd0JBQTBCLENBQUM7SUFnQ2xGLENBQUM7SUE5QkMsb0NBQU8sR0FBUCxVQUFRLEVBQUU7UUFDUixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNoSSxDQUFDO0lBRUQsMkNBQWMsR0FBZCxVQUFlLEVBQUU7UUFDZixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsZ0JBQWdCLENBQUM7SUFDaEcsQ0FBQztJQUVELHlDQUFZLEdBQVosVUFBYSxFQUFFO1FBQ2IsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDckcsQ0FBQztJQUVELCtDQUFrQixHQUFsQixVQUFtQixFQUFFO1FBQ25CLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRUQsaUNBQUksR0FBSixVQUFLLEVBQUUsRUFBRSxJQUFJO1FBQ1gsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQixJQUFJLEdBQUcsY0FBYyxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxHQUFHLGNBQWMsQ0FBQztTQUN2QjthQUFNLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQyxJQUFJLEdBQUcsc0JBQXNCLENBQUM7U0FDL0I7YUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDM0IsSUFBSSxHQUFHLE9BQU8sQ0FBQztTQUNoQjtRQUNELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztJQUM5QyxDQUFDO0lBckRVLGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7T0FDQSxrQkFBa0IsQ0FzRDlCO0lBQUQseUJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXREWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cEZyYWdtZW50IH0gZnJvbSAnLi9ncm91cC1mcmFnbWVudC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcm91cFNlcnZpY2Uge1xuICBpY29ucyA9IHtcbiAgICBicm9rZXJTb3VyY2VJbmFjdGl2ZToge1xuICAgICAgaWNvbjogJ2M4eS1ncm91cC1yZW1vdGUtaW5hY3RpdmUnXG4gICAgfSxcbiAgICBicm9rZXJTb3VyY2U6IHtcbiAgICAgIGljb246ICdjOHktZ3JvdXAtcmVtb3RlJyxcbiAgICAgIGljb25PcGVuOiAnYzh5LWdyb3VwLXJlbW90ZS1vcGVuJ1xuICAgIH0sXG4gICAgZ3JvdXA6IHtcbiAgICAgIGljb246ICdjOHktZ3JvdXAnLFxuICAgICAgaWNvbk9wZW46ICdjOHktZ3JvdXAtb3BlbidcbiAgICB9LFxuICAgIGR5bmFtaWNHcm91cDoge1xuICAgICAgaWNvbjogJ2M4eS1ncm91cC1zbWFydCcsXG4gICAgICBpY29uT3BlbjogJ2M4eS1ncm91cC1zbWFydC1vcGVuJ1xuICAgIH0sXG4gICAgb3RoZXI6IHtcbiAgICAgIGljb246ICdjaXJjbGUnLFxuICAgICAgaWNvbkNsYXNzOiAnc3RhdHVzVW5rbm93bidcbiAgICB9XG4gIH07XG4gIGRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudEluYWN0aXZlID0gYF8ke0dyb3VwRnJhZ21lbnQuZGF0YUJyb2tlclNvdXJjZUZyYWdtZW50fWA7XG5cbiAgaXNHcm91cChtbykge1xuICAgIHJldHVybiAhIW1vW0dyb3VwRnJhZ21lbnQuZ3JvdXBGcmFnbWVudFR5cGVdIHx8IG1vLnR5cGUgPT09IEdyb3VwRnJhZ21lbnQuZ3JvdXBUeXBlIHx8IG1vLnR5cGUgPT09IEdyb3VwRnJhZ21lbnQuc3ViR3JvdXBUeXBlO1xuICB9XG5cbiAgaXNEeW5hbWljR3JvdXAobW8pIHtcbiAgICByZXR1cm4gISFtb1tHcm91cEZyYWdtZW50LmR5bmFtaWNHcm91cEZyYWdtZW50XSB8fCBtby50eXBlID09PSBHcm91cEZyYWdtZW50LmR5bmFtaWNHcm91cFR5cGU7XG4gIH1cblxuICBpc0RhdGFCcm9rZXIobW8pIHtcbiAgICByZXR1cm4gISFtb1tHcm91cEZyYWdtZW50LmRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudF0gfHwgISFtb1t0aGlzLmRhdGFCcm9rZXJTb3VyY2VGcmFnbWVudEluYWN0aXZlXTtcbiAgfVxuXG4gIGlzRGF0YUJyb2tlckFjdGl2ZShtbykge1xuICAgIHJldHVybiAhIW1vW0dyb3VwRnJhZ21lbnQuZGF0YUJyb2tlclNvdXJjZUZyYWdtZW50XSAmJiAhbW9bdGhpcy5kYXRhQnJva2VyU291cmNlRnJhZ21lbnRJbmFjdGl2ZV07XG4gIH1cblxuICBpY29uKG1vLCBvcGVuKSB7XG4gICAgbGV0IHR5cGUgPSAnb3RoZXInO1xuICAgIGlmICh0aGlzLmlzRHluYW1pY0dyb3VwKG1vKSkge1xuICAgICAgdHlwZSA9ICdkeW5hbWljR3JvdXAnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0RhdGFCcm9rZXJBY3RpdmUobW8pKSB7XG4gICAgICB0eXBlID0gJ2Jyb2tlclNvdXJjZSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzRGF0YUJyb2tlcihtbykpIHtcbiAgICAgIHR5cGUgPSAnYnJva2VyU291cmNlSW5hY3RpdmUnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0dyb3VwKG1vKSkge1xuICAgICAgdHlwZSA9ICdncm91cCc7XG4gICAgfVxuICAgIGNvbnN0IGljb24gPSB0aGlzLmljb25zW3R5cGVdO1xuICAgIHJldHVybiAob3BlbiAmJiBpY29uLmljb25PcGVuKSB8fCBpY29uLmljb247XG4gIH1cbn1cbiJdfQ==