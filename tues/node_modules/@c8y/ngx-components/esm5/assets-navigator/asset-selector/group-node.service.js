import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AssetNodeService } from '../asset-node.service';
import { GroupFragment } from '../group-fragment.model';
import { GroupNode } from './group-node';
var GroupNodeService = /** @class */ (function (_super) {
    tslib_1.__extends(GroupNodeService, _super);
    function GroupNodeService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.PAGE_SIZE = 5;
        return _this;
    }
    GroupNodeService.prototype.createGroupNode = function (config) {
        return new GroupNode(this, config);
    };
    GroupNodeService.prototype.createChildNode = function (managedObject) {
        var config = { mo: managedObject };
        return this.createGroupNode(config);
    };
    GroupNodeService.prototype.subassetsQueryFilter = function () {
        var moduleConfig = this.moduleConfig;
        var groupFilter = ["(type eq '" + GroupFragment.groupType + "')"];
        if (moduleConfig.smartGroups) {
            groupFilter.push("(has(" + GroupFragment.groupFragmentType + "))");
            groupFilter.push("(type eq '" + GroupFragment.dynamicGroupType + "' and has(" + GroupFragment.dynamicGroupFragment + ") and not(has(" + GroupFragment.dynamicGroupFragment + ".invisible)))");
        }
        return "$filter=(" + groupFilter.join(' or ') + ")$orderby=name";
    };
    GroupNodeService.prototype.getGroupItems = function (moId) {
        return this.inventory.childAssetsList(moId, {
            query: this.subassetsQueryFilter(),
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            withTotalPages: true
        });
    };
    GroupNodeService = tslib_1.__decorate([
        Injectable()
    ], GroupNodeService);
    return GroupNodeService;
}(AssetNodeService));
export { GroupNodeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yLyIsInNvdXJjZXMiOlsiYXNzZXQtc2VsZWN0b3IvZ3JvdXAtbm9kZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR3pDO0lBQXNDLDRDQUFnQjtJQUR0RDtRQUFBLHFFQXFDQztRQWpDVyxlQUFTLEdBQUcsQ0FBQyxDQUFDOztJQWlDMUIsQ0FBQztJQS9CQywwQ0FBZSxHQUFmLFVBQWdCLE1BQU07UUFDcEIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELDBDQUFlLEdBQWYsVUFBZ0IsYUFBYTtRQUMzQixJQUFNLE1BQU0sR0FBdUIsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCwrQ0FBb0IsR0FBcEI7UUFDVSxJQUFBLGdDQUFZLENBQVU7UUFDOUIsSUFBTSxXQUFXLEdBQUcsQ0FBQyxlQUFhLGFBQWEsQ0FBQyxTQUFTLE9BQUksQ0FBQyxDQUFDO1FBQy9ELElBQUksWUFBWSxDQUFDLFdBQVcsRUFBRTtZQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVEsYUFBYSxDQUFDLGlCQUFpQixPQUFJLENBQUMsQ0FBQztZQUM5RCxXQUFXLENBQUMsSUFBSSxDQUNkLGVBQWEsYUFBYSxDQUFDLGdCQUFnQixrQkFDekMsYUFBYSxDQUFDLG9CQUFvQixzQkFDbkIsYUFBYSxDQUFDLG9CQUFvQixrQkFBZSxDQUNuRSxDQUFDO1NBQ0g7UUFDRCxPQUFPLGNBQVksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQWdCLENBQUM7SUFDOUQsQ0FBQztJQUVELHdDQUFhLEdBQWIsVUFBYyxJQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDbEMsWUFBWSxFQUFFLEtBQUs7WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3hCLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFuQ1UsZ0JBQWdCO1FBRDVCLFVBQVUsRUFBRTtPQUNBLGdCQUFnQixDQW9DNUI7SUFBRCx1QkFBQztDQUFBLEFBcENELENBQXNDLGdCQUFnQixHQW9DckQ7U0FwQ1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXNzZXROb2RlU2VydmljZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUuc2VydmljZSc7XG5pbXBvcnQgeyBHcm91cEZyYWdtZW50IH0gZnJvbSAnLi4vZ3JvdXAtZnJhZ21lbnQubW9kZWwnO1xuaW1wb3J0IHsgR3JvdXBOb2RlIH0gZnJvbSAnLi9ncm91cC1ub2RlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdyb3VwTm9kZVNlcnZpY2UgZXh0ZW5kcyBBc3NldE5vZGVTZXJ2aWNlIHtcbiAgcm9vdE5vZGU6IEdyb3VwTm9kZTtcbiAgZHJhZ2dlZERhdGE6IEdyb3VwTm9kZTtcbiAgcHJvdGVjdGVkIFBBR0VfU0laRSA9IDU7XG5cbiAgY3JlYXRlR3JvdXBOb2RlKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgR3JvdXBOb2RlKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBjcmVhdGVDaGlsZE5vZGUobWFuYWdlZE9iamVjdCk6IEdyb3VwTm9kZSB7XG4gICAgY29uc3QgY29uZmlnOiBQYXJ0aWFsPEdyb3VwTm9kZT4gPSB7IG1vOiBtYW5hZ2VkT2JqZWN0IH07XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBOb2RlKGNvbmZpZyk7XG4gIH1cblxuICBzdWJhc3NldHNRdWVyeUZpbHRlcigpIHtcbiAgICBjb25zdCB7IG1vZHVsZUNvbmZpZyB9ID0gdGhpcztcbiAgICBjb25zdCBncm91cEZpbHRlciA9IFtgKHR5cGUgZXEgJyR7R3JvdXBGcmFnbWVudC5ncm91cFR5cGV9JylgXTtcbiAgICBpZiAobW9kdWxlQ29uZmlnLnNtYXJ0R3JvdXBzKSB7XG4gICAgICBncm91cEZpbHRlci5wdXNoKGAoaGFzKCR7R3JvdXBGcmFnbWVudC5ncm91cEZyYWdtZW50VHlwZX0pKWApO1xuICAgICAgZ3JvdXBGaWx0ZXIucHVzaChcbiAgICAgICAgYCh0eXBlIGVxICcke0dyb3VwRnJhZ21lbnQuZHluYW1pY0dyb3VwVHlwZX0nIGFuZCBoYXMoJHtcbiAgICAgICAgICBHcm91cEZyYWdtZW50LmR5bmFtaWNHcm91cEZyYWdtZW50XG4gICAgICAgIH0pIGFuZCBub3QoaGFzKCR7R3JvdXBGcmFnbWVudC5keW5hbWljR3JvdXBGcmFnbWVudH0uaW52aXNpYmxlKSkpYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGAkZmlsdGVyPSgke2dyb3VwRmlsdGVyLmpvaW4oJyBvciAnKX0pJG9yZGVyYnk9bmFtZWA7XG4gIH1cblxuICBnZXRHcm91cEl0ZW1zKG1vSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5LmNoaWxkQXNzZXRzTGlzdChtb0lkLCB7XG4gICAgICBxdWVyeTogdGhpcy5zdWJhc3NldHNRdWVyeUZpbHRlcigpLFxuICAgICAgd2l0aENoaWxkcmVuOiBmYWxzZSxcbiAgICAgIHBhZ2VTaXplOiB0aGlzLlBBR0VfU0laRSxcbiAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==