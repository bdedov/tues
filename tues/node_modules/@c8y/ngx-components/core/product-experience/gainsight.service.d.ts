import { BehaviorSubject } from 'rxjs';
import { ICustomProperties } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { OptionsService } from '../common/options.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
export declare class GainsightService {
    private appState;
    private options;
    private cookieBannerService;
    /**
     * A subject that emits the tag function as soon as a new tag is set.
     */
    tagFunction$: BehaviorSubject<any>;
    private readonly GAINSIGHT_URL;
    private readonly GAINSIGHT_GLOBAL_SCOPE;
    private readonly SCRIPT_EXECUTION_WAIT_TIME;
    private readonly OPTIONS_KEY_CATEGORY;
    private readonly OPTIONS_KEY_NAME;
    constructor(appState: AppStateService, options: OptionsService, cookieBannerService: CookieBannerService);
    /**
     * Returns the tag global function which can be used to identify user
     * or add special events.
     */
    readonly tagFunction: any;
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param accountId The account where the user is registered. Could be the name of the tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    loadTag(accountId: any, identify?: boolean): Promise<void>;
    /**
     * Identifies the user/account at Gainsight.
     * @param userId The user id which is given to Gainsight.
     * @param accountId The account id which is given to Gainsight (e.g. the tenant name)
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    identify(user: any, accountId: any, instanceId: any, versionUI?: any, versionBE?: any): void;
    triggerEvent(eventName: string, props?: object): void;
    /**
     * Checks if the Gainsight's tag should be loaded.
     * Where no consent is required from the user. The decision to load Gainsight will depend on custom properties.
     * Where the user's consent is required. The decision to load Gainsight will depend on custom properties and functional cookies.
     * By default, the Gainsight's tag will be loaded.
     * @param customProperties Tenant's customProperties.
     */
    shouldLoadGainsightTag(customProperties: ICustomProperties): boolean;
    private isGainsightDisabled;
    private loadScriptTag;
    private getInstanceIdFromUrl;
}
