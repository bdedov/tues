import { ComponentFactoryResolver, TemplateRef, ViewContainerRef } from '@angular/core';
import { IIdentified, IResultList } from '@c8y/client';
import { Observable } from 'rxjs';
import { RealtimeService } from '../realtime/realtime.service';
import { LoadMoreMode } from './load-more.model';
/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 */
export declare class ForOfDirective {
    private tpl;
    private vcr;
    private componentFactoryResolver;
    private cachedData;
    private paging;
    private loadMoreMode;
    private dataPipe;
    private pagingSub;
    private obs$;
    private loadMore;
    private maxIterations;
    private notFoundTemplate;
    private realtime;
    private comparator;
    private unsubscribe$;
    private readonly shouldUseLoadMoreButton;
    private readonly hasMoreData;
    private readonly length;
    /**
     * The data setter. Must be a response from @c8y/data or an observable.
     * You can pass an observable with null to explicitly clear the list.
     */
    c8yForOf: IResultList<IIdentified> | Observable<IResultList<IIdentified>>;
    /**
     * The mode setter:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     */
    c8yForLoadMore: LoadMoreMode;
    /**
     * The pipe setter to attach any rxjs pipe to the current and more loaded data.
     */
    c8yForPipe: any;
    /**
     * A template to use if no data is found at all (e.g. if you apply a filter pipe).
     */
    c8yForNotFound: TemplateRef<any>;
    /**
     * The maximum numbers of iterations to call data from the api.
     */
    c8yForMaxIterations: number;
    /**
     * A RealtimeService instance.
     */
    c8yForRealtime: RealtimeService<any>;
    /**
     * A comparator function for comparing list items. Used to determine
     * the position at which a new element should be added to the list.
     */
    c8yForComparator: (itemA: object, itemB: object) => number;
    constructor(tpl: TemplateRef<any>, vcr: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver);
    ngOnInit(): void;
    private ngOnChanges;
    private ngOnDestroy;
    private handleRealtime;
    private render;
    private append;
    private loadMoreData;
    private createLoadMoreButtonComponent;
    private insert;
    private update;
    private remove;
    private forMatchingEmbeddedViewRef;
    private checkForDuplicates;
    private unsubscribePaging;
}
