import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { Tab } from './tab.model';
import { OptionsService } from '../common/options.service';
export declare const HOOK_TABS: InjectionToken<unknown>;
export declare class TabsService extends StateService implements ExtensionPoint<Tab> {
    private injector;
    private translateService;
    private options;
    items$: Observable<Tab[]>;
    orientation$: Observable<string>;
    readonly refreshTrigger: Subject<unknown>;
    readonly state$: BehaviorSubject<Set<Tab>>;
    constructor(injector: Injector, router: Router, translateService: TranslateService, options: OptionsService);
    prepareTabs(tabs: any): any;
    sortTabs(tabs: any): any;
    /**
     * Refresh the extension factories
     */
    refresh(): void;
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    readonly state: Set<Tab>;
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    add(item: Tab): void;
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    remove(item: Tab): void;
    readonly firstTab$: Observable<unknown>;
}
