import { Type } from '@angular/core';
import { IResultList } from '@c8y/client';
export interface DataGrid {
    columns: Column[];
    rows: Row[];
    pagination: Pagination;
    serverSideDataCallback: ServerSideDataCallback;
    selectable: boolean;
    selectionPrimaryKey: string;
    displayOptions: DisplayOptions;
    actionControls: ActionControl[];
    bulkActionControls: BulkActionControl[];
}
export interface Column {
    name: string | SpecialColumnName;
    header?: string;
    path?: string;
    visible?: boolean;
    positionFixed?: boolean;
    dataType?: ColumnDataType;
    gridTrackSize?: string;
    headerCSSClassName?: string | string[];
    cellCSSClassName?: string | string[];
    sortable?: boolean;
    sortOrder?: SortOrder;
    filterable?: boolean;
    filterPredicate?: string | FilterPredicateFunction;
    externalFilterQuery?: any;
    cellRendererComponent?: Type<any>;
    headerCellRendererComponent?: Type<any>;
    filteringFormRendererComponent?: Type<any>;
}
export interface ColumnConfig {
    visible?: boolean;
    sortOrder?: SortOrder;
}
export interface GridConfig {
    columns: ColumnConfig[];
    pagination: Pagination;
}
export declare const enum SpecialColumnName {
    Checkbox = "checkbox",
    Actions = "actions"
}
export declare const enum ColumnDataType {
    Icon = "icon",
    Numeric = "numeric",
    TextShort = "text-short",
    TextLong = "text-long"
}
export declare const enum ColumnDataRecordClassName {
    Icon = "data-record-icon",
    Header = "data-record-header",
    Default = ""
}
export declare const minColumnGridTrackSize = 80;
export declare const ratiosByColumnTypes: {
    icon: number;
    numeric: number;
    'text-short': number;
    'text-long': number;
};
export declare type SortOrder = 'asc' | 'desc' | '';
export declare type FilterPredicateFunction = (item: object, path: string) => boolean;
export declare enum FilteringActionType {
    ApplyFilter = "APPLY_FILTER",
    ResetFilter = "RESET_FILTER"
}
export interface Row {
    id: string;
    [key: string]: any;
}
export interface Pagination {
    currentPage: number;
    nextPage?: number;
    pageSize: number;
}
export declare type ServerSideDataCallback = (dataSourceModifier: DataSourceModifier) => ServerSideDataResult;
export interface DataSourceModifier {
    columns: Column[];
    searchText: string;
    pagination: Pagination;
    selection: {
        enabled: boolean;
        primaryKey: string;
    };
}
/**
 * Describes result from server with data and additional statistics.
 */
export declare type ServerSideDataResult = IResultList<object> & {
    /** The real grand total number of items (the whole dataset). */
    size: number;
    /** The number of items after filtering applied to the whole dataset (subset). */
    filteredSize: number;
    /** The list of ids of all filtered items (subset). */
    filteredDataIds?: string[];
};
export interface DataSourceStats {
    /** The real grand total number of items (the whole dataset). */
    size: number;
    /** The number of items after filtering applied to the whole dataset (subset). */
    filteredSize: number;
    /** The number of the current page. */
    currentPage: number;
    /** The number of the next page. */
    nextPage?: number;
    /** The number of items currently shown in the list view, a.k.a. current page (what the user sees on screen). */
    currentPageSize: number;
    /** The number of items on the first page.  */
    firstPageSize: number;
}
export interface DisplayOptions {
    striped: boolean;
    bordered: boolean;
    gridHeader: boolean;
}
export interface ActionControl {
    type: BuiltInActionType | string;
    text?: string;
    icon?: string;
    callback: ((item: Row, reload: () => void) => void) | Function;
    [key: string]: any;
}
export interface BulkActionControl extends ActionControl {
    callback(selectedItemIds: string[], reload: () => void): void;
}
export declare const enum BuiltInActionType {
    Edit = "EDIT",
    Delete = "DELETE",
    Export = "EXPORT"
}
