import { Component, InjectionToken, Type } from '@angular/core';
import { Observable } from 'rxjs';
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 */
export declare const HOOK_COMPONENTS: InjectionToken<unknown>;
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 * @deprecated: Use HOOK_COMPONENTS
 */
export declare const HOOK_COMPONENT: InjectionToken<unknown>;
/**
 * A dynamic component can be defined in a the HOOK_COMPONENTS to display any kind
 * of component dynamically just by referencing it's id. The most common use case is on dashboards,
 * where the `configComponent` is used to define what is displayed on the `component`
 * on the dashboard.
 *
 * To use the component you can use the c8y-dynamic-component.
 *
 * ```
 *   <c8y-dynamic-component
 *     componentId="angular.widget.demo"
 *     [config]="{ text: 'Hello world' }"
 *     [mode]="editComponent ? 'config' : 'component'"
 *   ></c8y-dynamic-component>
 *   ```
 */
export interface DynamicComponentDefinition {
    /**
     * Unique serializable id
     */
    id: string;
    /**
     * The component which is used when the component should be displayed (e.g. on a dashboard)
     */
    component: Type<Component>;
    /**
     * The configuration component used when a widget is added or edited.
     */
    configComponent?: Type<Component>;
    /**
     * The label shown for this dynamic component on add widgets
     */
    label: string;
    /**
     * The description shown on add widget
     */
    description: string;
    /**
     * Add any random data, specially to angular.js dashboards.
     * Should be searilzabled to allow to save it to the API.
     */
    data?: any;
    /**
     * An url to an preview image.
     */
    previewImage?: string;
}
/**
 * Use this interface on any component to define the interchange between
 * config and display component.
 */
export interface DynamicComponent {
    /**
     * The configuration which is shared between configuration component and display component.
     * Should be searilzabled to allow to save it to the API.
     */
    config: any;
    /**
     * A reference to the ng1Form on angularjs dashboards to disable/enable the save button.
     * @deprecated: Will not work on Angular-Dashboards (1.6.1.0). Use `ContextServiceDashboard.formDisabled` instead.
     */
    ng1FormRef?: any;
}
/**
 * An lifecycle hook which is called before an configuration is saved.
 */
export interface OnBeforeSave {
    /**
     * Called before a configuration object is saved. The function can be used to manipulate the
     * passed config object or to cancel the saving (return false or Observable<boolean>).
     */
    onBeforeSave(config?: any): boolean | Promise<boolean> | Observable<boolean>;
}
