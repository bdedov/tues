import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { Search } from './search.model';
/**
 * A hook to use for Multi Provider extension.
 */
export declare const HOOK_SEARCH: InjectionToken<unknown>;
/**
 * A service which defines the dearch function.
 */
export declare class SearchService extends StateService implements ExtensionPoint<Search> {
    private injector;
    items$: Observable<Search[]>;
    readonly refreshTrigger: Subject<unknown>;
    protected state$: BehaviorSubject<Set<Search>>;
    constructor(injector: Injector, router: Router);
    /**
     * Refresh the extension factories
     */
    refresh(): void;
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    readonly state: Set<Search>;
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    add(item: Search): void;
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    remove(item: Search): void;
}
