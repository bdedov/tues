{"version":3,"file":"c8y-ngx-components-connectivity.js","sources":["ng://@c8y/ngx-components/connectivity/impact/impact-connectivity.service.ts","ng://@c8y/ngx-components/connectivity/impact/impact.model.ts","ng://@c8y/ngx-components/connectivity/impact/impact-provider-settings.component.ts","ng://@c8y/ngx-components/connectivity/impact/status-display.component.ts","ng://@c8y/ngx-components/connectivity/connectivity.module.ts","ng://@c8y/ngx-components/connectivity/c8y-ngx-components-connectivity.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FetchClient, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { ImpactOptions } from './impact.model';\n\n@Injectable()\nexport class ImpactConnectivityService {\n  private readonly microserviceUrl: string = '/service/impact/connectivity';\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(private client: FetchClient) {}\n\n  getOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  updateOptions(impactOptions: ImpactOptions): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.header,\n      body: JSON.stringify(impactOptions)\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  deleteOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'DELETE',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n}\n","export interface ImpactOptions {\n  baseUrl: string;\n  user: string;\n  password: string;\n  groupName: string;\n  callbackUrl: string;\n  initializeDevices: boolean;\n}\n\nexport interface TenantConnectionStatusResponse {\n  status: TenantConnectionStatus;\n  options: ImpactOptions;\n}\n\nexport enum TenantConnectionStatus {\n  NO_CONNECTION = 'NO_CONNECTION',\n  CONNECTING_IN_PROGRESS = 'CONNECTING_IN_PROGRESS',\n  CONNECTED_SUCCESSFULLY = 'CONNECTED_SUCCESSFULLY',\n  CONNECTED_FAILED = 'CONNECTED_FAILED',\n  UNKNOWN = 'UNKNOWN'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IFetchResponse } from '@c8y/client';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { ImpactConnectivityService } from './impact-connectivity.service';\nimport {\n  ImpactOptions,\n  TenantConnectionStatus,\n  TenantConnectionStatusResponse\n} from './impact.model';\n\n@Component({\n  selector: 'c8y-impact-provider-settings',\n  templateUrl: './impact-provider-settings.component.html'\n})\nexport class ImpactProviderSettingsComponent implements OnInit {\n  connectionStatus: TenantConnectionStatusResponse;\n  formGroup: FormGroup;\n\n  isEdit: boolean = false;\n  credentialsExist: boolean = false;\n\n  constructor(\n    private impactService: ImpactConnectivityService,\n    private formBuilder: FormBuilder,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.initForm();\n    const response: IFetchResponse = await this.impactService.getOptions();\n    this.connectionStatus = await response.json();\n\n    if (this.connectionStatus && this.connectionStatus.options) {\n      this.formGroup.patchValue({ ...this.connectionStatus.options });\n      this.credentialsExist = true;\n    } else {\n      this.isEdit = true;\n    }\n  }\n\n  replaceCredentials(): void {\n    this.isEdit = true;\n  }\n\n  async saveCredentials() {\n    if (this.formGroup.valid) {\n      this.connectionStatus.status = TenantConnectionStatus.CONNECTING_IN_PROGRESS;\n      const updated: boolean = await this.safelyUpdateCredentials(this.formGroup.value);\n\n      if (updated) {\n        const response: IFetchResponse = await this.impactService.getOptions();\n        this.connectionStatus = await response.json();\n\n        if (this.connectionStatus.status === TenantConnectionStatus.CONNECTED_SUCCESSFULLY) {\n          this.isEdit = false;\n        }\n\n        this.alert.success(gettext('Credentials saved.'));\n      } else {\n        this.connectionStatus.status = TenantConnectionStatus.UNKNOWN;\n      }\n    }\n  }\n\n  async deleteCredentials() {\n    try {\n      await this.modal.confirm(\n        gettext('Delete credentials'),\n        gettext(\n          'You are about to delete your IMPACT credentials. Deleting credentials will break connection to IMPACT instance. Do you want to proceed?'\n        ),\n        Status.DANGER,\n        { ok: gettext('Delete'), cancel: gettext('Cancel') }\n      );\n      await this.safelyDeleteCredentials();\n    } catch (ex) {\n      // Intentionally empty\n    }\n  }\n\n  private initForm(): void {\n    this.formGroup = this.formBuilder.group({\n      baseUrl: [],\n      user: ['', Validators.required],\n      password: ['', Validators.required],\n      groupName: [],\n      initializeDevices: [false]\n    });\n  }\n\n  private resetForm(): void {\n    this.formGroup.reset();\n  }\n\n  private async safelyUpdateCredentials(options: ImpactOptions): Promise<boolean> {\n    try {\n      const res = await this.impactService.updateOptions(options);\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n\n        return Promise.resolve(false);\n      } else {\n        return Promise.resolve(true);\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n\n      return Promise.resolve(false);\n    }\n  }\n\n  private async safelyDeleteCredentials() {\n    try {\n      const res = await this.impactService.deleteOptions();\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n      } else {\n        this.credentialsExist = false;\n        this.resetForm();\n        this.connectionStatus = null;\n        this.alert.success(gettext('Credentials deleted.'));\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { TenantConnectionStatus } from './impact.model';\n\n@Component({\n  selector: 'c8y-status-display',\n  templateUrl: './status-display.component.html'\n})\nexport class StatusDisplayComponent {\n  @Input() baseUrl: string;\n\n  icon: string;\n  statusName: string;\n\n  @Input() set status(status: TenantConnectionStatus) {\n    switch (status) {\n      case TenantConnectionStatus.CONNECTED_SUCCESSFULLY:\n        this.icon = 'success';\n        this.statusName = gettext('Connected successfully');\n        break;\n      case TenantConnectionStatus.CONNECTED_FAILED:\n        this.icon = 'failed';\n        this.statusName = gettext('Connection failed');\n        break;\n      case TenantConnectionStatus.CONNECTING_IN_PROGRESS:\n        this.icon = 'connecting';\n        this.statusName = gettext('Connection in progress');\n        break;\n      case TenantConnectionStatus.NO_CONNECTION:\n        this.icon = 'no-connection';\n        this.statusName = gettext('No connection');\n        break;\n      default:\n        this.icon = 'unknown';\n        this.statusName = gettext('Unknown`connection status`');\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule, CoreModule, FormsModule } from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { ImpactConnectivityService } from './impact/impact-connectivity.service';\nimport { ImpactProviderSettingsComponent } from './impact/impact-provider-settings.component';\nimport { StatusDisplayComponent } from './impact/status-display.component';\n\n@NgModule({\n  declarations: [ImpactProviderSettingsComponent, StatusDisplayComponent],\n  exports: [ImpactProviderSettingsComponent],\n  imports: [CoreModule, CommonModule, FormsModule, PopoverModule, ReactiveFormsModule],\n  entryComponents: [ImpactProviderSettingsComponent],\n  providers: [ImpactConnectivityService]\n})\nexport class ConnectivityModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate"],"mappings":"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"}