import { __awaiter, __decorate } from 'tslib';
import { Injectable, ViewChild, Component, NgModule } from '@angular/core';
import { gettext, AlertService, ViewContext, CoreModule, FormsModule, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';
import { isUndefined } from 'lodash-es';

let LoraSetDeviceProtocolService = class LoraSetDeviceProtocolService {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
    }
    getCurrentProtocol(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const protocolId = device.c8y_LpwanDevice.type
                ? device.c8y_LpwanDevice.type.split('/')[2]
                : null;
            if (!protocolId) {
                return null;
            }
            const { data } = yield this.inventoryService.detail(protocolId);
            return data;
        });
    }
    applyProtocol(device, selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
            device.type = selectedProtocol.name;
            return this.inventoryService.update(device);
        });
    }
    getAvailableProtocols() {
        return __awaiter(this, void 0, void 0, function* () {
            const query = {
                type: {
                    __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType']
                }
            };
            return this.inventoryService.listQuery(query);
        });
    }
};
LoraSetDeviceProtocolService.ctorParameters = () => [
    { type: InventoryService }
];
LoraSetDeviceProtocolService = __decorate([
    Injectable()
], LoraSetDeviceProtocolService);

let LoraAssignDeviceProtocolComponent = class LoraAssignDeviceProtocolComponent {
    constructor(loraService, alertService, router, inventoryService) {
        this.loraService = loraService;
        this.alertService = alertService;
        this.router = router;
        this.inventoryService = inventoryService;
        this.filterCurrentProtocol = pipe(map((protocols) => protocols.filter(protocol => !this.currentProtocol || this.currentProtocol.id !== protocol.id)));
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload();
        });
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            this.newProtocol = null;
            try {
                yield this.loadDevice();
                this.availableProtocols = yield this.loraService.getAvailableProtocols();
                this.currentProtocol = yield this.loraService.getCurrentProtocol(this.device);
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            finally {
                this.loading = false;
            }
        });
    }
    loadDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
            const { data } = yield this.inventoryService.detail(deviceId);
            this.device = data;
        });
    }
    apply(selectedProtocol) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loraService.applyProtocol(this.device, selectedProtocol);
                yield this.reload();
                this.alertService.success(gettext('Device protocol set.'));
                this.loraSetDeviceProtocolForm.reset('dirty');
            }
            catch (ex) {
                this.alertService.danger(gettext('Could not set device protocol.'));
            }
        });
    }
};
LoraAssignDeviceProtocolComponent.ctorParameters = () => [
    { type: LoraSetDeviceProtocolService },
    { type: AlertService },
    { type: Router },
    { type: InventoryService }
];
__decorate([
    ViewChild('loraSetDeviceProtocolForm', { static: false })
], LoraAssignDeviceProtocolComponent.prototype, "loraSetDeviceProtocolForm", void 0);
LoraAssignDeviceProtocolComponent = __decorate([
    Component({
        selector: 'set-device-protocol',
        template: "<form #loraSetDeviceProtocolForm=\"ngForm\" class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">{{ 'LoRa device protocol' | translate }}</h4>\n      </div>\n      <div *ngIf=\"loading\" class=\"card-block\">\n        <div style=\"position: relative; min-height: 40px;min-width: 55px;\">\n          <div class=\"spinner\">\n            <div class=\"rect1\"></div>\n            <div class=\"rect2\"></div>\n            <div class=\"rect3\"></div>\n            <div class=\"rect4\"></div>\n          </div>\n        </div>\n        <span translate>Loading</span>\n      </div>\n      <div *ngIf=\"!loading\">\n        <div class=\"card-block\">\n          <div class=\"form-group\">\n            <label translate>Current device protocol</label>\n            <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n              {{ 'c8y_LoriotLora' }}\n            </p>\n            <p class=\"form-control-static\" *ngIf=\"currentProtocol\">\n              {{ currentProtocol.name }}\n            </p>\n          </div>\n          <div class=\"form-group\">\n            <label translate>New device protocol</label>\n            <div class=\"c8y-select-wrapper\">\n              <select class=\"form-control\" [(ngModel)]=\"newProtocol\" name=\"newProtocol\" required>\n                <option *ngIf=\"!newProtocol\" [ngValue]=\"null\">\n                  {{ 'Select device protocol' | translate }}\n                </option>\n                <option\n                  *c8yFor=\"let protocol of availableProtocols; pipe: filterCurrentProtocol\"\n                  [ngValue]=\"protocol\"\n                >\n                  {{ protocol.name }}\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Apply' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            translate\n            [disabled]=\"!loraSetDeviceProtocolForm.dirty\"\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C\n"
    })
], LoraAssignDeviceProtocolComponent);

let LoraAgentGuard = class LoraAgentGuard {
    canActivate(route) {
        const contextData = route.data.contextData || route.parent.data.contextData;
        return contextData && !isUndefined(contextData.c8y_LpwanDevice) && (contextData.c8y_LpwanDevice.lpwanDeviceType === 'Lora');
    }
};
LoraAgentGuard = __decorate([
    Injectable()
], LoraAgentGuard);

const routes = [
    {
        context: ViewContext.Device,
        path: 'assign-protocol',
        component: LoraAssignDeviceProtocolComponent,
        label: gettext('LPWAN'),
        icon: 'c8y-device-protocols',
        canActivate: [LoraAgentGuard]
    }
];
const ɵ0 = routes;
let LoraProtocolModule = class LoraProtocolModule {
};
LoraProtocolModule = __decorate([
    NgModule({
        declarations: [
            LoraAssignDeviceProtocolComponent
        ],
        imports: [
            CoreModule,
            FormsModule
        ],
        entryComponents: [LoraAssignDeviceProtocolComponent],
        providers: [
            LoraAgentGuard,
            LoraSetDeviceProtocolService,
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            }
        ]
    })
], LoraProtocolModule);

/**
 * Generated bundle index. Do not edit.
 */

export { LoraAssignDeviceProtocolComponent, LoraProtocolModule, ɵ0, LoraSetDeviceProtocolService as ɵa, LoraAgentGuard as ɵb };
//# sourceMappingURL=c8y-ngx-components-protocol-lora.js.map
