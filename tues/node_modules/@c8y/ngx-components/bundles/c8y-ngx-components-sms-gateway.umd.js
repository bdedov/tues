(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@c8y/ngx-components'), require('@angular/core'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/sms-gateway', ['exports', '@c8y/ngx-components', '@angular/core', '@c8y/client'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = global.c8y['ngx-components'] || {}, global.c8y['ngx-components']['sms-gateway'] = {}), global.c8y['ngx-components'], global.ng.core, global.client));
}(this, (function (exports, ngxComponents, core, client) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var MESSAGES = {
        '^Sender name$': {
            gettext: ngxComponents.gettext('Sender name')
        },
        '^Sender name used for sent SMS$': {
            gettext: ngxComponents.gettext('Sender name used for sent SMS')
        },
        '^Sender address$': {
            gettext: ngxComponents.gettext('Sender address')
        },
        '^Sender address used for sent SMS$': {
            gettext: ngxComponents.gettext('Sender address used for sent SMS')
        },
        '^Username$': {
            gettext: ngxComponents.gettext('Username')
        },
        '^Password$': {
            gettext: ngxComponents.gettext('Password')
        },
        '^Licence key$': {
            gettext: ngxComponents.gettext('License key')
        },
        '^Key$': {
            gettext: ngxComponents.gettext('Key')
        },
        '^API base URL$': {
            gettext: ngxComponents.gettext('API base URL')
        },
        '^API URL$': {
            gettext: ngxComponents.gettext('API URL')
        },
        '^oauth$': {
            gettext: ngxComponents.gettext('OAuth')
        },
        '^basic$': {
            gettext: ngxComponents.gettext('Basic')
        },
        '^Authentication method$': {
            gettext: ngxComponents.gettext('Authentication method')
        },
        '^Defines which authentication method is used with the provider$': {
            gettext: ngxComponents.gettext('Defines which authentication method is used with the provider')
        },
        '^Static headers$': {
            gettext: ngxComponents.gettext('Static headers')
        },
        '^Static headers that should be added to requests towards the provider$': {
            gettext: ngxComponents.gettext('Static headers that should be added to requests towards the provider')
        },
        '^OAuth token URL$': {
            gettext: ngxComponents.gettext('OAuth token URL')
        },
        '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {
            gettext: ngxComponents.gettext('URL where the OAuth token is requested from (required if OAuth method is chosen)')
        },
        '^OAuth toke mime type$': {
            gettext: ngxComponents.gettext('OAuth token mime type')
        },
        '^Overrides the OAuth token response mime type$': {
            gettext: ngxComponents.gettext('Overrides the OAuth token response mime type')
        },
        '^OAuth access toke type$': {
            gettext: ngxComponents.gettext('OAuth access token type')
        },
        '^Overrides the OAuth access token type$': {
            gettext: ngxComponents.gettext('Overrides the OAuth access token type')
        },
        '^Global configuration$': {
            gettext: ngxComponents.gettext('Global configuration')
        },
        '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {
            gettext: ngxComponents.gettext('Enables or disables the settings globally for all tenants (only possible in management tenant)')
        },
        '^API key$': {
            gettext: ngxComponents.gettext('API key')
        },
        '^Inherit to subtenants$': {
            gettext: ngxComponents.gettext('Inherit to subtenants')
        },
        "^Enables or disables if this tenant's configuration may be inherited to subtenants$": {
            gettext: ngxComponents.gettext('Enables or disables the option to inherit the tenant configuration to subtenants')
        },
        '^Login$': {
            gettext: ngxComponents.gettext('Login')
        },
        '^Source business unit ID$': {
            gettext: ngxComponents.gettext('Source business unit ID')
        },
        '^Client ID$': {
            gettext: ngxComponents.gettext('Client ID')
        },
        '^Client secret$': {
            gettext: ngxComponents.gettext('Client secret')
        }
    };

    var SmsGatewayGuard = /** @class */ (function () {
        function SmsGatewayGuard(permissions, applicationService) {
            this.permissions = permissions;
            this.applicationService = applicationService;
        }
        SmsGatewayGuard_1 = SmsGatewayGuard;
        SmsGatewayGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            if (this.showSMSProvider === undefined) {
                var hasRole = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));
                this.showSMSProvider = hasRole.then(function (hasPermissions) {
                    return hasPermissions &&
                        _this.applicationService
                            .isAvailable(SmsGatewayGuard_1.applicationName)
                            .then(function (result) { return result && result.data; });
                });
            }
            return this.showSMSProvider;
        };
        var SmsGatewayGuard_1;
        SmsGatewayGuard.applicationName = 'sms-gateway';
        SmsGatewayGuard.ctorParameters = function () { return [
            { type: ngxComponents.Permissions },
            { type: client.ApplicationService }
        ]; };
        SmsGatewayGuard = SmsGatewayGuard_1 = __decorate([
            core.Injectable()
        ], SmsGatewayGuard);
        return SmsGatewayGuard;
    }());

    var ɵ0 = MESSAGES;
    var SmsGatewayModule = /** @class */ (function () {
        function SmsGatewayModule() {
        }
        SmsGatewayModule = __decorate([
            core.NgModule({
                imports: [
                    ngxComponents.ProviderConfigurationModule.config([
                        {
                            navigation: {
                                label: ngxComponents.gettext('SMS provider'),
                                path: 'smsgateway',
                                icon: 'envelope-o',
                                parent: ngxComponents.gettext('Settings'),
                                priority: 1000,
                                canActivate: [SmsGatewayGuard]
                            },
                            layout: {
                                pageTitle: ngxComponents.gettext('SMS provider'),
                                cardTitle: ngxComponents.gettext('Credentials'),
                                description: ngxComponents.gettext('Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'),
                                providerName: ngxComponents.gettext('SMS provider'),
                                providerNamePlaceholder: ngxComponents.gettext('Select or type to filter providers'),
                                providerNameNoMatchesHint: ngxComponents.gettext('Select one of the existing providers.'),
                                deleteRoles: ['ROLE_SMS_ADMIN'],
                                deleteBtnLabel: ngxComponents.gettext('Delete'),
                                saveRoles: ['ROLE_SMS_ADMIN'],
                                saveBtnLabel: ngxComponents.gettext('Save'),
                                configurationUpdatedSuccessMsg: ngxComponents.gettext('Credentials updated.'),
                                deleteConfigurationModalTitle: ngxComponents.gettext('Delete credentials'),
                                deleteConfigurationModalBody: ngxComponents.gettext("You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?"),
                                deleteConfigurationModalOkBtnLabel: ngxComponents.gettext('Delete'),
                                configurationDeletedSuccessMsg: ngxComponents.gettext('Credentials deleted.')
                            },
                            endpoint: {
                                definitionsEndpoint: {
                                    baseUrl: 'service/messaging/providers',
                                    listUrl: 'definitions'
                                },
                                configurationEndpoint: {
                                    baseUrl: 'service/messaging/providers',
                                    listUrl: 'configuration'
                                }
                            }
                        }
                    ])
                ],
                providers: [SmsGatewayGuard, { provide: ngxComponents.HOOK_PATTERN_MESSAGES, useValue: ɵ0, multi: true }]
            })
        ], SmsGatewayModule);
        return SmsGatewayModule;
    }());

    exports.MESSAGES = MESSAGES;
    exports.SmsGatewayGuard = SmsGatewayGuard;
    exports.SmsGatewayModule = SmsGatewayModule;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components-sms-gateway.umd.js.map
