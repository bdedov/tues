(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('ngx-bootstrap/popover'), require('ngx-bootstrap/tooltip'), require('@c8y/ngx-components'), require('@c8y/ngx-components/operations/status-filter'), require('@c8y/ngx-components/operations/operation-summary'), require('@c8y/ngx-components/operations/bulk-operation-scheduler'), require('ngx-bootstrap/modal'), require('@c8y/ngx-components/operations/bulk-operations-service'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('@c8y/client')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/operations/bulk-operations-list', ['exports', '@angular/core', '@angular/router', 'ngx-bootstrap/popover', 'ngx-bootstrap/tooltip', '@c8y/ngx-components', '@c8y/ngx-components/operations/status-filter', '@c8y/ngx-components/operations/operation-summary', '@c8y/ngx-components/operations/bulk-operation-scheduler', 'ngx-bootstrap/modal', '@c8y/ngx-components/operations/bulk-operations-service', 'lodash-es', 'rxjs', 'rxjs/operators', '@c8y/client'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = global.c8y['ngx-components'] || {}, global.c8y['ngx-components'].operations = global.c8y['ngx-components'].operations || {}, global.c8y['ngx-components'].operations['bulk-operations-list'] = {}), global.ng.core, global.ng.router, global.popover, global.tooltip, global.c8y['ngx-components'], global.c8y['ngx-components'].operations['status-filter'], global.c8y['ngx-components'].operations['operation-summary'], global.c8y['ngx-components'].operations['bulk-operation-scheduler'], global.modal, global.c8y['ngx-components'].operations['bulk-operations-service'], global.lodashEs, global.rxjs, global.rxjs.operators, global.client));
}(this, (function (exports, core, router, popover, tooltip, ngxComponents, statusFilter, operationSummary, bulkOperationScheduler, modal, bulkOperationsService, lodashEs, rxjs, operators, client) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var BulkOperationWrapperComponent = /** @class */ (function () {
        function BulkOperationWrapperComponent(bulkOperationDetailsService, modalRef) {
            this.bulkOperationDetailsService = bulkOperationDetailsService;
            this.modalRef = modalRef;
        }
        BulkOperationWrapperComponent.ctorParameters = function () { return [
            { type: BulkOperationDetailsService },
            { type: modal.BsModalRef }
        ]; };
        __decorate([
            core.Input()
        ], BulkOperationWrapperComponent.prototype, "bulkOperation", void 0);
        BulkOperationWrapperComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operations-wrapper',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Bulk operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      [detailsCollapsed]=\"false\"\n      [readOnly]=\"true\"\n      (showFailedOperation)=\"bulkOperationDetailsService.openDetails($event)\"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
            })
        ], BulkOperationWrapperComponent);
        return BulkOperationWrapperComponent;
    }());

    var BulkOperationDetailsService = /** @class */ (function () {
        function BulkOperationDetailsService(bulkOperationsService, modalService) {
            this.bulkOperationsService = bulkOperationsService;
            this.modalService = modalService;
        }
        BulkOperationDetailsService.prototype.openDetails = function (bulkOperationId) {
            return __awaiter(this, void 0, void 0, function () {
                var bulkOperation, initialState;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.bulkOperationsService.getBulkOperationById(bulkOperationId)];
                        case 1:
                            bulkOperation = (_a.sent()).data;
                            initialState = { bulkOperation: bulkOperation };
                            this.modalService.show(BulkOperationWrapperComponent, {
                                initialState: initialState,
                                class: 'modal-lg'
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationDetailsService.ctorParameters = function () { return [
            { type: bulkOperationsService.BulkOperationsService },
            { type: modal.BsModalService }
        ]; };
        BulkOperationDetailsService = __decorate([
            core.Injectable()
        ], BulkOperationDetailsService);
        return BulkOperationDetailsService;
    }());

    var BulkOperationsModalComponent = /** @class */ (function () {
        function BulkOperationsModalComponent(bsModalRef, resolver) {
            this.bsModalRef = bsModalRef;
            this.resolver = resolver;
            this.showComponent = false;
        }
        BulkOperationsModalComponent.prototype.cancel = function () {
            this.bsModalRef.hide();
        };
        BulkOperationsModalComponent.prototype.createComponent = function (item) {
            if (item && item.component) {
                this.showComponent = true;
                var factory = this.resolver.resolveComponentFactory(item.component);
                this.container.createComponent(factory);
            }
        };
        BulkOperationsModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: core.ComponentFactoryResolver }
        ]; };
        __decorate([
            core.ViewChild('container', { static: false, read: core.ViewContainerRef })
        ], BulkOperationsModalComponent.prototype, "container", void 0);
        BulkOperationsModalComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operations-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4 translate>New bulk operation</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body text-center\" [hidden]=\"showComponent\">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small forceHtmlTranslate ngNonBindable>\n          Check the\n          <a c8y-guide-href=\"users-guide/device-management/#bulk-operation-wizard\"\n            >User guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)=\"createComponent($event)\"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class=\"modal-footer\" [hidden]=\"showComponent\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n"
            })
        ], BulkOperationsModalComponent);
        return BulkOperationsModalComponent;
    }());

    var BulkOperationModalsService = /** @class */ (function () {
        function BulkOperationModalsService(bsModalService) {
            this.bsModalService = bsModalService;
        }
        BulkOperationModalsService.prototype.showNewBulkOperationModal = function () {
            this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {
                backdrop: 'static',
                class: 'modal-sm'
            });
        };
        BulkOperationModalsService.prototype.hideNewBulkOperationModal = function () {
            if (this.bsModalRef) {
                this.bsModalRef.hide();
            }
        };
        BulkOperationModalsService.ctorParameters = function () { return [
            { type: modal.BsModalService }
        ]; };
        BulkOperationModalsService = __decorate([
            core.Injectable()
        ], BulkOperationModalsService);
        return BulkOperationModalsService;
    }());

    var BulkOperationsRescheduleModalComponent = /** @class */ (function () {
        function BulkOperationsRescheduleModalComponent(bsModalRef, bulkOperationsService, alert) {
            this.bsModalRef = bsModalRef;
            this.bulkOperationsService = bulkOperationsService;
            this.alert = alert;
            this.closeSubject = new rxjs.Subject();
        }
        BulkOperationsRescheduleModalComponent.prototype.ngOnInit = function () {
            this.modalTitle = this.getTitle();
        };
        BulkOperationsRescheduleModalComponent.prototype.onDateAndDelaySelect = function ($event) {
            this.dateAndDelay = $event;
        };
        BulkOperationsRescheduleModalComponent.prototype.getTitle = function () {
            return this.isRetryOperation ? ngxComponents.gettext('Retry operation') : ngxComponents.gettext('Edit schedule');
        };
        BulkOperationsRescheduleModalComponent.prototype.onCancel = function () {
            this.bsModalRef.hide();
        };
        BulkOperationsRescheduleModalComponent.prototype.onSave = function () {
            return __awaiter(this, void 0, void 0, function () {
                var newBulkOperation, er_1, er_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
                            this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
                            if (!this.isRetryOperation) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.bulkOperationsService.createBulkOperation(this.bulkOperation)];
                        case 2:
                            newBulkOperation = _a.sent();
                            this.alert.success(ngxComponents.gettext('Successfully rescheduled for a retry.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_1 = _a.sent();
                            this.alert.addServerFailure(er_1);
                            return [3 /*break*/, 4];
                        case 4: return [3 /*break*/, 8];
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation(this.bulkOperation)];
                        case 6:
                            newBulkOperation = _a.sent();
                            this.alert.success(ngxComponents.gettext('Successfully rescheduled.'));
                            return [3 /*break*/, 8];
                        case 7:
                            er_2 = _a.sent();
                            this.alert.addServerFailure(er_2);
                            return [3 /*break*/, 8];
                        case 8:
                            // send back to component from which modal was called
                            this.closeSubject.next(newBulkOperation.data);
                            this.bsModalRef.hide();
                            return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationsRescheduleModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: bulkOperationsService.BulkOperationsService },
            { type: ngxComponents.AlertService }
        ]; };
        BulkOperationsRescheduleModalComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operations-reschedule-modal',
                template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
            })
        ], BulkOperationsRescheduleModalComponent);
        return BulkOperationsRescheduleModalComponent;
    }());

    var BULK_OPERATION_STATUS_LABELS = {
        SCHEDULED: ngxComponents.gettext('Scheduled'),
        EXECUTING: ngxComponents.gettext('Executing'),
        CANCELED: ngxComponents.gettext('Canceled'),
        FAILED: ngxComponents.gettext('Completed with failures'),
        SUCCESSFUL: ngxComponents.gettext('Completed successfully')
    };
    var BULK_OPERATION_STATUS_OPTIONS = [
        {
            label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,
            generalStatus: [client.OperationBulkGeneralStatus.SCHEDULED],
            iconClass: 'fa fa-calendar text-info'
        },
        {
            label: BULK_OPERATION_STATUS_LABELS.EXECUTING,
            generalStatus: [
                client.OperationBulkGeneralStatus.EXECUTING,
                client.OperationBulkGeneralStatus.EXECUTING_WITH_ERROR
            ],
            iconClass: 'fa fa-refresh text-primary'
        },
        {
            label: BULK_OPERATION_STATUS_LABELS.CANCELED,
            generalStatus: [client.OperationBulkGeneralStatus.CANCELED],
            iconClass: 'fa fa-ban text-muted'
        },
        {
            label: BULK_OPERATION_STATUS_LABELS.FAILED,
            generalStatus: [client.OperationBulkGeneralStatus.FAILED],
            iconClass: 'fa fa-exclamation-triangle text-danger'
        },
        {
            label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,
            generalStatus: [client.OperationBulkGeneralStatus.SUCCESSFUL],
            iconClass: 'fa fa-check text-success'
        }
    ];

    var BulkOperationListItemComponent = /** @class */ (function () {
        function BulkOperationListItemComponent(bulkOperationsService, modal, alert, bsModalService) {
            this.bulkOperationsService = bulkOperationsService;
            this.modal = modal;
            this.alert = alert;
            this.bsModalService = bsModalService;
            this.detailsCollapsed = true;
            this.readOnly = false;
            this.showFailedOperation = new core.EventEmitter();
            this.reload = new core.EventEmitter();
            this.refreshLoading = false;
            this.bulkOperationGeneralStatus = client.OperationBulkGeneralStatus;
            this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
            this.finishDatePopoverText = ngxComponents.gettext('Approximate date, estimated based on the bulk operation settings.');
            this.progressBarClass = 'progress';
            this.progressBarStatus = 0;
        }
        BulkOperationListItemComponent.prototype.ngOnInit = function () {
            this.iconClass = this.getIconClass();
            this.finishDate = this.calculateFinishDateMs();
            this.setProgressBar();
        };
        BulkOperationListItemComponent.prototype.ngOnChanges = function (changes) {
            if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
                this.iconClass = this.getIconClass();
                this.setProgressBar();
            }
        };
        BulkOperationListItemComponent.prototype.getIconClass = function () {
            var _this = this;
            return this.bulkOperationStatusOptions.find(function (statusOption) {
                return statusOption.generalStatus.includes(_this.bulkOperation.generalStatus);
            }).iconClass;
        };
        BulkOperationListItemComponent.prototype.calculateFinishDateMs = function () {
            var startDateMs = new Date(this.bulkOperation.startDate).getTime();
            var creationRampMs = this.bulkOperation.creationRamp * 1000;
            return startDateMs + creationRampMs * this.bulkOperation.progress.all;
        };
        BulkOperationListItemComponent.prototype.progressBarProgressFn = function () {
            return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
                this.bulkOperation.progress.all) *
                100);
        };
        BulkOperationListItemComponent.prototype.setProgressBar = function () {
            var staticContentOfClass = 'progress-bar progress-striped active progress-bar';
            var progressBarState = {
                EXECUTING: {
                    progressBarClass: 'progress progress-striped active',
                    progressBarColor: staticContentOfClass + "-primary",
                    progressBarStatus: this.progressBarProgressFn()
                },
                EXECUTING_WITH_ERROR: {
                    progressBarClass: 'progress progress-striped active',
                    progressBarColor: staticContentOfClass + "-danger",
                    progressBarStatus: this.progressBarProgressFn()
                },
                FAILED: {
                    progressBarClass: 'progress',
                    progressBarColor: staticContentOfClass + "-danger",
                    progressBarStatus: 100
                },
                SUCCESSFUL: {
                    progressBarClass: 'progress',
                    progressBarColor: staticContentOfClass + "-success",
                    progressBarStatus: 100
                }
            };
            lodashEs.assign(this, progressBarState[this.bulkOperation.generalStatus]);
        };
        BulkOperationListItemComponent.prototype.editSchedule = function () {
            var rescheduledOperation = lodashEs.cloneDeep(this.bulkOperation);
            var initialState = {
                bulkOperation: rescheduledOperation
            };
            var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
            this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        };
        BulkOperationListItemComponent.prototype.cancelBulkOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var er_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Cancel bulk operation'), ngxComponents.gettext('You are about to cancel the bulk operation. Do you want to proceed?'), ngxComponents.Status.DANGER)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id)];
                        case 2:
                            _a.sent();
                            this.reload.emit();
                            this.alert.success(ngxComponents.gettext('Operation canceled.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_1 = _a.sent();
                            this.alert.addServerFailure(er_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationListItemComponent.prototype.retryFailedOperation = function () {
            var _this = this;
            var clonedBulk = lodashEs.cloneDeep(this.bulkOperation);
            // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
            delete clonedBulk.groupId;
            clonedBulk.failedParentId = this.bulkOperation.id;
            // show reschdedule modal:
            var initialState = {
                bulkOperation: clonedBulk,
                isRetryOperation: true
            };
            var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
            this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
            this.bsModalRef.content.closeSubject.subscribe(function () {
                _this.reload.emit();
            });
        };
        BulkOperationListItemComponent.prototype.setToSuccessful = function () {
            return __awaiter(this, void 0, void 0, function () {
                var er_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Set manually bulk operation to SUCCESSFUL'), ngxComponents.gettext('You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'), ngxComponents.Status.DANGER)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation({
                                    id: this.bulkOperation.id,
                                    generalStatus: client.OperationBulkGeneralStatus.SUCCESSFUL
                                })];
                        case 2:
                            _a.sent();
                            this.reload.emit();
                            this.alert.success(ngxComponents.gettext('Operation status changed to SUCCESSFUL.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_2 = _a.sent();
                            this.alert.addServerFailure(er_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        BulkOperationListItemComponent.prototype.openFailedOperation = function (failedParentId) {
            this.showFailedOperation.emit(failedParentId);
        };
        BulkOperationListItemComponent.prototype.isStatusScheduled = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
        };
        BulkOperationListItemComponent.prototype.isStatusExecutingOrExecutingWithError = function () {
            return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
                this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
        };
        BulkOperationListItemComponent.prototype.allOperationsCreated = function () {
            return (this.bulkOperation.progress.all ===
                this.bulkOperation.progress.executing +
                    this.bulkOperation.progress.failed +
                    this.bulkOperation.progress.pending +
                    this.bulkOperation.progress.successful);
        };
        BulkOperationListItemComponent.prototype.isStatusCanceled = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
        };
        BulkOperationListItemComponent.prototype.isStatusFailed = function () {
            return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
        };
        BulkOperationListItemComponent.ctorParameters = function () { return [
            { type: bulkOperationsService.BulkOperationsService },
            { type: ngxComponents.ModalService },
            { type: ngxComponents.AlertService },
            { type: modal.BsModalService }
        ]; };
        __decorate([
            core.Input()
        ], BulkOperationListItemComponent.prototype, "bulkOperation", void 0);
        __decorate([
            core.Input()
        ], BulkOperationListItemComponent.prototype, "detailsCollapsed", void 0);
        __decorate([
            core.Input()
        ], BulkOperationListItemComponent.prototype, "readOnly", void 0);
        __decorate([
            core.Output()
        ], BulkOperationListItemComponent.prototype, "showFailedOperation", void 0);
        __decorate([
            core.Output()
        ], BulkOperationListItemComponent.prototype, "reload", void 0);
        __decorate([
            core.ViewChild('listItem', { static: true })
        ], BulkOperationListItemComponent.prototype, "listItem", void 0);
        BulkOperationListItemComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operation-list-item',
                template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0\" />\n      <ng-template #statusNotCanceled>\n        <div [class]=\"progressBarClass\" title=\"{{ progressBarStatus | number: '1.0-0' }}%\">\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\">{{ progressBarStatus | number: '1.0-0' }}%</span>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <div class=\"p-t-8 visible-xs\"></div>\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-check-circle text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-warning text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-clock-o text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"\n        isStatusScheduled() || (isStatusExecutingOrExecutingWithError() && !allOperationsCreated())\n      \"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to SUCCESSFUL' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-bulk-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [bulkOperation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n    >\n    </c8y-bulk-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
            })
        ], BulkOperationListItemComponent);
        return BulkOperationListItemComponent;
    }());

    var BulkOperationsListComponent = /** @class */ (function () {
        function BulkOperationsListComponent(realtime, bulkOperationsService, bulkOperationModalsService) {
            var _this = this;
            this.realtime = realtime;
            this.bulkOperationsService = bulkOperationsService;
            this.bulkOperationModalsService = bulkOperationModalsService;
            this.selectedTypeFilters = this.getTypeFilters();
            this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
            this.refreshLoading = false;
            this.statusFilter$ = new rxjs.BehaviorSubject(null);
            this.typeFilter$ = new rxjs.BehaviorSubject(null);
            this.timeFilter$ = new rxjs.BehaviorSubject(null);
            this.reload$ = new rxjs.BehaviorSubject(null);
            this.bulkOperations$ = rxjs.combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(operators.tap(function () {
                _this.refreshLoading = true;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), statusFilters = _b[0], timeFilters = _b[1];
                return _this.filter(statusFilters, timeFilters);
            }), operators.withLatestFrom(this.typeFilter$), operators.map(function (_a) {
                var _b = __read(_a, 2), result = _b[0], typeFilter = _b[1];
                _this.filterPipe = rxjs.pipe(operators.map(function (data) { return _this.filterByType(data, typeFilter); }));
                return __assign({}, result, { data: _this.filterByType(result.data, typeFilter) });
            }), operators.tap(function () {
                _this.refreshLoading = false;
            }), operators.shareReplay(1));
            this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
        }
        BulkOperationsListComponent.prototype.filterByType = function (bulkOperations, typeFilter) {
            var flattenedFragments = this.flattenFilterFragments(typeFilter);
            if (
            // return data unfiltered if no filters selected...
            !flattenedFragments.length ||
                // ...or when all filters are selected
                this.allFilterFragments.every(function (fragment) { return flattenedFragments.includes(fragment); })) {
                return bulkOperations;
            }
            var filteredData = bulkOperations.filter(function (item) {
                return Object.keys(item.operationPrototype).some(function (key) { return flattenedFragments.includes(key); });
            });
            return filteredData;
        };
        BulkOperationsListComponent.prototype.resetFilter = function () {
            this.statusFilter$.next(null);
            this.timeFilter$.next(null);
            this.typeFilter$.next(null);
            this.datePicker.clearFilter();
            this.selectedTypeFilters = this.getTypeFilters();
            this.statusFilter.statusOptions.map(function (option) {
                option.selected = false;
                return option;
            });
        };
        BulkOperationsListComponent.prototype.isFilterApplied = function () {
            return (this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue());
        };
        BulkOperationsListComponent.prototype.filter = function (statusFilters, timeFilter) {
            var status = statusFilters && statusFilters.length > 0
                ? {
                    generalStatus: lodashEs.flatten(statusFilters.map(function (statusFilter) { return statusFilter.generalStatus; }))
                }
                : {};
            var time = timeFilter
                ? __assign({}, (timeFilter.dateFrom && {
                    dateFrom: timeFilter.dateFrom.toISOString()
                }), (timeFilter.dateTo && {
                    dateTo: timeFilter.dateTo.toISOString()
                })) : {};
            return this.getBulkOperations(__assign({}, status, time));
        };
        BulkOperationsListComponent.prototype.getBulkOperations = function (filter) {
            return this.bulkOperationsService.getBulkOperations(filter);
        };
        BulkOperationsListComponent.prototype.getTypeFilters = function () {
            return this.bulkOperationsService.getBulkTypes();
        };
        BulkOperationsListComponent.prototype.addBulkOperation = function () {
            this.bulkOperationModalsService.showNewBulkOperationModal();
        };
        BulkOperationsListComponent.prototype.openFailedOperation = function (failedParentId) {
            this.listItems.forEach(function (item) {
                if (item.bulkOperation.id === failedParentId) {
                    item.listItem.collapsed = false;
                    item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            });
        };
        BulkOperationsListComponent.prototype.compareOperations = function (operationA, operationB) {
            return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
        };
        BulkOperationsListComponent.prototype.flattenFilterFragments = function (filters) {
            return (filters || []).reduce(function (flattened, current) { return flattened.concat(current.fragments); }, []);
        };
        BulkOperationsListComponent.ctorParameters = function () { return [
            { type: ngxComponents.OperationBulkRealtimeService },
            { type: bulkOperationsService.BulkOperationsService },
            { type: BulkOperationModalsService }
        ]; };
        __decorate([
            core.ViewChildren(BulkOperationListItemComponent)
        ], BulkOperationsListComponent.prototype, "listItems", void 0);
        __decorate([
            core.ViewChild('statusFilter', { static: true })
        ], BulkOperationsListComponent.prototype, "statusFilter", void 0);
        __decorate([
            core.ViewChild(ngxComponents.DatePickerComponent, { static: true })
        ], BulkOperationsListComponent.prototype, "datePicker", void 0);
        BulkOperationsListComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operations',
                template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate> Operation type</label>\n  <c8y-select\n    style=\"width: 180px;\"\n    [items]=\"getTypeFilters()\"\n    [selected]=\"selectedTypeFilters\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"btn-group\" [placement]=\"'left'\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n  >\n    <i class=\"fa fa-plus-circle\"></i> {{ 'New bulk operation' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': refreshLoading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<!-- Empty state  -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor\"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\n<!-- No results empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon fa fa-search c8y-icon-duocolor\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"fa\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto';\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
                providers: [ngxComponents.OperationBulkRealtimeService]
            })
        ], BulkOperationsListComponent);
        return BulkOperationsListComponent;
    }());

    var BulkOperationDetailsTabsComponent = /** @class */ (function () {
        function BulkOperationDetailsTabsComponent() {
            this.readOnly = false;
            this.onRetryFailedOperations = new core.EventEmitter();
            this.showFailedOperation = new core.EventEmitter();
            this.tabs = [];
        }
        BulkOperationDetailsTabsComponent.prototype.ngOnInit = function () {
            this.template = this.detailsTemplate;
            this.tabs = [
                {
                    label: ngxComponents.gettext('Details'),
                    path: null,
                    icon: 'asterisk',
                    template: this.detailsTemplate
                },
                {
                    label: ngxComponents.gettext('History of changes'),
                    path: null,
                    icon: 'archive',
                    template: this.auditTemplate
                }
            ];
        };
        __decorate([
            core.Input()
        ], BulkOperationDetailsTabsComponent.prototype, "bulkOperation", void 0);
        __decorate([
            core.Input()
        ], BulkOperationDetailsTabsComponent.prototype, "readOnly", void 0);
        __decorate([
            core.Output()
        ], BulkOperationDetailsTabsComponent.prototype, "onRetryFailedOperations", void 0);
        __decorate([
            core.Output()
        ], BulkOperationDetailsTabsComponent.prototype, "showFailedOperation", void 0);
        __decorate([
            core.ViewChild('details', { static: true })
        ], BulkOperationDetailsTabsComponent.prototype, "detailsTemplate", void 0);
        __decorate([
            core.ViewChild('audit', { static: true })
        ], BulkOperationDetailsTabsComponent.prototype, "auditTemplate", void 0);
        BulkOperationDetailsTabsComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operation-details-tabs',
                template: "<div #container class=\"tabContainer\">\n  <ul class=\"nav nav-tabs nav-tabsc8y\">\n    <li [ngClass]=\"{ active: tab.template === template }\" *ngFor=\"let tab of tabs\">\n      <button [title]=\"tab.label | translate\" class=\"btn-clean\" (click)=\"template = tab.template\">\n        <i [c8yIcon]=\"tab.icon\"></i>\n        <span class=\"txt\">{{ tab.label | translate }}</span>\n      </button>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n\n<ng-template #details>\n  <c8y-bulk-operation-details\n    [bulkOperation]=\"bulkOperation\"\n    [readOnly]=\"readOnly\"\n    (showFailedOperation)=\"showFailedOperation.emit($event)\"\n  >\n  </c8y-bulk-operation-details>\n</ng-template>\n\n<ng-template #audit>\n  <c8y-audit-log [source]=\"bulkOperation.id\"></c8y-audit-log>\n</ng-template>\n\n<c8y-single-operations-list\n  [bulkOperation]=\"bulkOperation\"\n  [readOnly]=\"readOnly\"\n  (onRetryFailedOperations)=\"onRetryFailedOperations.emit($event)\"\n  class=\"d-flex d-col\"\n></c8y-single-operations-list>\n"
            })
        ], BulkOperationDetailsTabsComponent);
        return BulkOperationDetailsTabsComponent;
    }());

    var BulkOperationDetailsComponent = /** @class */ (function () {
        function BulkOperationDetailsComponent() {
            this.allFilterIsSelected = false;
            this.readOnly = false;
            this.showFailedOperation = new core.EventEmitter();
        }
        BulkOperationDetailsComponent.prototype.scrollToRetriedFromOperation = function (failedOperationId) {
            this.showFailedOperation.emit(failedOperationId);
        };
        __decorate([
            core.Input()
        ], BulkOperationDetailsComponent.prototype, "bulkOperation", void 0);
        __decorate([
            core.Input()
        ], BulkOperationDetailsComponent.prototype, "readOnly", void 0);
        __decorate([
            core.Output()
        ], BulkOperationDetailsComponent.prototype, "showFailedOperation", void 0);
        BulkOperationDetailsComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operation-details',
                template: "<div class=\"row d-flex-md v-fit m-t-16\">\n  <div class=\"col-md-3 flex-item-top\">\n    <div class=\"legend form-block\" translate>\n      Details\n    </div>\n    <ul class=\"list-unstyled small\">\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Start date</label>\n        <span class=\"flex-item-right\">{{ bulkOperation.startDate | c8yDate }}</span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\">\n          {{ 'Delay' | translate }}\n          <a\n            class=\"text-primary\"\n            tooltip=\"{{ 'Delay before sending the operation to the next device.' | translate }}\"\n            container=\"body\"\n          >\n            <i [c8yIcon]=\"'info-circle'\"></i>\n          </a>\n        </label>\n        <span [ngPlural]=\"bulkOperation.creationRamp\" class=\"flex-item-right\">\n          <ng-template ngPluralCase=\"=1\">\n            {{ bulkOperation.creationRamp }} <span translate>second</span>\n          </ng-template>\n          <ng-template ngPluralCase=\"other\">\n            {{ bulkOperation.creationRamp }} <span translate>seconds</span>\n          </ng-template>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Status</label>\n        <span class=\"flex-item-right text-uppercase\">\n          {{ bulkOperation.generalStatus.toString() | translate }}\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small flex-item-top\" translate>Result</label>\n        <div class=\"flex-row flex-grow flex-item-right flex-end\">\n          <div class=\"flex-col\">\n            <div *ngIf=\"bulkOperation.progress.successful > 0\" class=\"icon-flex flex-item-left\">\n              <i class=\"fa fw fa-check-circle text-success m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{\n                  bulkOperationsCountSuccessful: bulkOperation.progress.successful\n                }\"\n              >\n                {{ bulkOperationsCountSuccessful }} successful\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left\" *ngIf=\"bulkOperation.progress.failed > 0\">\n              <i class=\"fa fw fa-warning text-danger m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n              >\n                {{ bulkOperationsCountFailed }} failed\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left\" *ngIf=\"bulkOperation.progress.pending > 0\">\n              <i class=\"fa fw fa-clock-o m-r-4 text-info\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n              >\n                {{ bulkOperationsCountPending }} pending\n              </span>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.failedParentId\">\n        <label class=\"small m-0\" translate>Retried from</label>\n        <span class=\"flex-item-right\">\n          <button\n            class=\"btn btn-default btn-xs\"\n            (click)=\"scrollToRetriedFromOperation(bulkOperation.failedParentId)\"\n          >\n            {{ bulkOperation.failedParentId }}\n          </button>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.note\">\n        <label class=\"small flex-item-top\" translate>Description</label>\n        <div class=\"flex-item-right text-right m-l-8\">\n          {{ bulkOperation.note }}\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-md-9 v-fit d-flex d-col\">\n    <div class=\"legend form-block\" translate>\n      Operation\n    </div>\n    <pre class=\"inner-scroll p-16 text-pre-wrap\">{{ bulkOperation.operationPrototype | json }}</pre>\n  </div>\n</div>\n"
            })
        ], BulkOperationDetailsComponent);
        return BulkOperationDetailsComponent;
    }());

    var SINGLE_OP_STATUS_NAMES = {
        PENDING: ngxComponents.gettext('Pending'),
        EXECUTING: ngxComponents.gettext('Executing'),
        FAILED: ngxComponents.gettext('Failed'),
        SUCCESSFUL: ngxComponents.gettext('Successful'),
        ALL: ngxComponents.gettext('All')
    };
    var SINGLE_OP_STATUS_PROPERTIES = [
        {
            label: SINGLE_OP_STATUS_NAMES.PENDING,
            iconClass: 'fa fw fa-clock-o text-info',
            selected: false
        },
        {
            label: SINGLE_OP_STATUS_NAMES.EXECUTING,
            iconClass: 'fa fw fa-refresh text-info',
            selected: false
        },
        {
            label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,
            iconClass: 'fa fw fa-check-circle text-success',
            selected: false
        },
        {
            label: SINGLE_OP_STATUS_NAMES.FAILED,
            iconClass: 'fa fw fa-exclamation-circle text-danger',
            selected: false
        }
    ];

    var SingleOperationsListComponent = /** @class */ (function () {
        function SingleOperationsListComponent(bulkOperationsService) {
            this.bulkOperationsService = bulkOperationsService;
            this.readOnly = false;
            this.onRetryFailedOperations = new core.EventEmitter();
            this.singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
            this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
        }
        SingleOperationsListComponent.prototype.ngAfterViewInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.statusFilter) {
                        this.filterOperationsByType();
                    }
                    return [2 /*return*/];
                });
            });
        };
        SingleOperationsListComponent.prototype.ngOnChanges = function (changes) {
            if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
                this.filterOperationsByType();
            }
        };
        SingleOperationsListComponent.prototype.filterOperationsByType = function () {
            if (this.statusFilter) {
                var typeFilter = this.getFilterTypeOfSingleOperations();
                this.statusFilter.preset(typeFilter === this.singleOperationStatusNames.ALL
                    ? []
                    : [{ label: typeFilter }]);
            }
            else {
                setTimeout(this.filterOperationsByType.bind(this));
            }
        };
        SingleOperationsListComponent.prototype.getFilterTypeOfSingleOperations = function () {
            var progress = this.bulkOperation.progress;
            if (progress.failed > 0) {
                return this.singleOperationStatusNames.FAILED;
            }
            else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
                return this.singleOperationStatusNames.EXECUTING;
            }
            else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
                return this.singleOperationStatusNames.PENDING;
            }
            else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
                return this.singleOperationStatusNames.SUCCESSFUL;
            }
            return this.singleOperationStatusNames.ALL;
        };
        SingleOperationsListComponent.prototype.getOperationsByStatus = function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id)];
                        case 1:
                            _a.singleOperations = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SingleOperationsListComponent.prototype.retryBulkOperation = function () {
            this.onRetryFailedOperations.emit(this.bulkOperation);
        };
        SingleOperationsListComponent.ctorParameters = function () { return [
            { type: bulkOperationsService.BulkOperationsService }
        ]; };
        __decorate([
            core.Input()
        ], SingleOperationsListComponent.prototype, "bulkOperation", void 0);
        __decorate([
            core.Input()
        ], SingleOperationsListComponent.prototype, "readOnly", void 0);
        __decorate([
            core.Output()
        ], SingleOperationsListComponent.prototype, "onRetryFailedOperations", void 0);
        __decorate([
            core.ViewChild(statusFilter.StatusFilterComponent, { static: false })
        ], SingleOperationsListComponent.prototype, "statusFilter", void 0);
        SingleOperationsListComponent = __decorate([
            core.Component({
                selector: 'c8y-single-operations-list',
                template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block\" translate>\n    Operations\n  </div>\n  <div class=\"flex-row p-b-8\">\n    <div class=\"flex-grow p-b-8\">\n      <span class=\"m-r-4\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"singleOperationStatusProperties\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i class=\"fa fa-repeat m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item\n          [operation]=\"operation\"\n          [readOnly]=\"readOnly\"\n          style=\"display: contents;\"\n        >\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
            })
        ], SingleOperationsListComponent);
        return SingleOperationsListComponent;
    }());

    var SingleOperationItemComponent = /** @class */ (function () {
        function SingleOperationItemComponent(bulkOperationsService, alertService) {
            this.bulkOperationsService = bulkOperationsService;
            this.alertService = alertService;
            this.device = {};
            this.showIfTextTruncated = false;
            this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
            this.singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
            this.readOnly = false;
        }
        SingleOperationItemComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.iconClass = this.getIconClass();
                            _a = this;
                            return [4 /*yield*/, this.getDeviceMO(this.operation.deviceId)];
                        case 1:
                            _a.device = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        SingleOperationItemComponent.prototype.ngAfterViewInit = function () {
            this.isTextTruncated();
        };
        SingleOperationItemComponent.prototype.retrySingleOperation = function (singleOperation) {
            return __awaiter(this, void 0, void 0, function () {
                var operationToCreate, er_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationToCreate = lodashEs.omit(singleOperation, [
                                'id',
                                'self',
                                'status',
                                'failureReason',
                                'creationTime',
                                'delivery'
                            ]);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.bulkOperationsService.createSingleOperation(operationToCreate)];
                        case 2:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Operation created.'));
                            return [3 /*break*/, 4];
                        case 3:
                            er_1 = _a.sent();
                            this.alertService.addServerFailure(er_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SingleOperationItemComponent.prototype.getIconClass = function () {
            var _this = this;
            return this.singleOperationsStatusProperties.find(function (operationProperties) { return operationProperties.label.toUpperCase() === _this.operation.status; }).iconClass;
        };
        SingleOperationItemComponent.prototype.getDeviceMO = function (deviceId) {
            return __awaiter(this, void 0, void 0, function () {
                var inventoryMO;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.bulkOperationsService.getManagedObject(deviceId)];
                        case 1:
                            inventoryMO = _a.sent();
                            if (inventoryMO) {
                                return [2 /*return*/, inventoryMO.data];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        SingleOperationItemComponent.prototype.isTextTruncated = function () {
            if (this.operation.failureReason) {
                var el = this.failureReasonRef.nativeElement;
                this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;
            }
        };
        SingleOperationItemComponent.ctorParameters = function () { return [
            { type: bulkOperationsService.BulkOperationsService },
            { type: ngxComponents.AlertService }
        ]; };
        __decorate([
            core.Input()
        ], SingleOperationItemComponent.prototype, "operation", void 0);
        __decorate([
            core.Input()
        ], SingleOperationItemComponent.prototype, "readOnly", void 0);
        __decorate([
            core.ViewChild('failureReason', { static: true })
        ], SingleOperationItemComponent.prototype, "failureReasonRef", void 0);
        SingleOperationItemComponent = __decorate([
            core.Component({
                selector: 'c8y-single-operation-item',
                template: "<c8y-li class=\"c8y-list__item--double-actions\">\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{'content-flex-80': !readOnly, 'content-flex-50': readOnly}\">\n    <div class=\"col-4\">\n      <span class=\"m-r-4\">\n        <device-status [mo]=\"\"></device-status>\n      </span>\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class=\"col-5\">\n      <div class=\"flex-row\">\n        <span class=\"text-truncate\" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf=\"showIfTextTruncated\"\n          class=\"m-l-8\"\n          popover=\"{{ operation.failureReason | translate }}\"\n          placement=\"left\"\n          outsideClick=\"true\"\n        >\n          <i [c8yIcon]=\"'info-circle text-primary'\"></i>\n        </a>\n        <div\n          class=\"showOnHover p-l-8 p-r-8 v-fit-20 flex-item-right\"\n          *ngIf=\"!readOnly && operation.status == singleOperationStatusNames.FAILED.toUpperCase()\"\n        >\n          <a\n            class=\"btn btn-default btn-xs\"\n            (click)=\"retrySingleOperation(operation)\"\n            title=\"{{ 'Retry operation' | translate }}\"\n          >\n            <i [c8yIcon]=\"'repeat m-r-4'\"></i><span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n"
            })
        ], SingleOperationItemComponent);
        return SingleOperationItemComponent;
    }());

    var BulkOperationTypeListComponent = /** @class */ (function () {
        function BulkOperationTypeListComponent(router, bulkOperationsService, bulkOperationModalsService) {
            this.router = router;
            this.bulkOperationsService = bulkOperationsService;
            this.bulkOperationModalsService = bulkOperationModalsService;
            this.onCustomType = new core.EventEmitter();
            this.bulkList = [];
        }
        BulkOperationTypeListComponent.prototype.ngOnInit = function () {
            this.bulkList = this.bulkOperationsService.getBulkTypes();
        };
        BulkOperationTypeListComponent.prototype.handleClick = function (item) {
            if (item.path) {
                this.bulkOperationModalsService.hideNewBulkOperationModal();
                this.router.navigateByUrl(item.path);
            }
            else if (item.component) {
                this.onCustomType.emit(item);
            }
        };
        BulkOperationTypeListComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: bulkOperationsService.BulkOperationsService },
            { type: BulkOperationModalsService }
        ]; };
        __decorate([
            core.Output()
        ], BulkOperationTypeListComponent.prototype, "onCustomType", void 0);
        BulkOperationTypeListComponent = __decorate([
            core.Component({
                selector: 'c8y-bulk-operation-type-list',
                template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
            })
        ], BulkOperationTypeListComponent);
        return BulkOperationTypeListComponent;
    }());

    var bulkOperationListRoutes = [
        {
            path: 'devicecontrol/bulk',
            component: BulkOperationsListComponent
        }
    ];
    /**
     * This module allows for displaying the list of bulk operations and their details.
     */
    var BulkOperationsListModule = /** @class */ (function () {
        function BulkOperationsListModule() {
        }
        BulkOperationsListModule = __decorate([
            core.NgModule({
                imports: [
                    ngxComponents.CoreModule,
                    popover.PopoverModule,
                    tooltip.TooltipModule,
                    statusFilter.StatusFilterModule,
                    operationSummary.OperationSummaryModule,
                    bulkOperationScheduler.BulkOperationSchedulerModule,
                    router.RouterModule.forChild(bulkOperationListRoutes)
                ],
                providers: [BulkOperationDetailsService, BulkOperationModalsService],
                declarations: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ],
                entryComponents: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ],
                exports: [
                    BulkOperationsListComponent,
                    BulkOperationListItemComponent,
                    BulkOperationDetailsTabsComponent,
                    BulkOperationDetailsComponent,
                    SingleOperationsListComponent,
                    SingleOperationItemComponent,
                    BulkOperationWrapperComponent,
                    BulkOperationTypeListComponent,
                    BulkOperationsModalComponent,
                    BulkOperationsRescheduleModalComponent
                ]
            })
        ], BulkOperationsListModule);
        return BulkOperationsListModule;
    }());

    exports.BulkOperationDetailsComponent = BulkOperationDetailsComponent;
    exports.BulkOperationDetailsService = BulkOperationDetailsService;
    exports.BulkOperationDetailsTabsComponent = BulkOperationDetailsTabsComponent;
    exports.BulkOperationListItemComponent = BulkOperationListItemComponent;
    exports.BulkOperationModalsService = BulkOperationModalsService;
    exports.BulkOperationTypeListComponent = BulkOperationTypeListComponent;
    exports.BulkOperationWrapperComponent = BulkOperationWrapperComponent;
    exports.BulkOperationsListComponent = BulkOperationsListComponent;
    exports.BulkOperationsListModule = BulkOperationsListModule;
    exports.BulkOperationsModalComponent = BulkOperationsModalComponent;
    exports.BulkOperationsRescheduleModalComponent = BulkOperationsRescheduleModalComponent;
    exports.SingleOperationItemComponent = SingleOperationItemComponent;
    exports.SingleOperationsListComponent = SingleOperationsListComponent;
    exports.bulkOperationListRoutes = bulkOperationListRoutes;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-list.umd.js.map
