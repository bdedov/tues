{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operation.model.ts","ng://@c8y/ngx-components/operations/details/operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk/custom-step.directive.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operation-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/base-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/create-from-single/bulk-operation-from-single.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operations-stepper-container.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/select-device-profile-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/select-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/version-or-patch.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/confirm-software-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/select-software-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-configuration.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-device-profile.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-software.component.ts","ng://@c8y/ngx-components/operations/device-selector/device-selector.component.ts","ng://@c8y/ngx-components/operations/factories/tabs.factory.ts","ng://@c8y/ngx-components/operations/operations.module.ts","ng://@c8y/ngx-components/operations/bulk-operation-scheduler/operation-scheduler.component.ts","ng://@c8y/ngx-components/operations/bulk-operation-scheduler/bulk-operation-scheduler.module.ts","ng://@c8y/ngx-components/operations/operation-summary/operation-summary.component.ts","ng://@c8y/ngx-components/operations/operation-summary/operation-summary.module.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-modal.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.service.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.module.ts","ng://@c8y/ngx-components/operations/status-filter/status-filter.component.ts","ng://@c8y/ngx-components/operations/status-filter/status-filter.module.ts","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operations.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operations-service.module.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-wrapper.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operation-modals.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-reschedule-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details-tabs.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/type-list/bulk-operation-type-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","BulkOperationType","OperationDetailsComponent","formBuilder","titlePlaceholder","gettext","descriptionPlaceholder","placeholders","_a","SOFTWARE","title","description","FIRMWARE","CONFIGURATION","DEVICE_PROFILE","bulkOperationType","get","ngOnInit","config","Validators","required","note","schedule","fgOperationDescription","group","FormBuilder","tslib_1.__decorate","Input","Component","selector","template","CustomStep","templateRef","buttonsDisabled","onNext","stepper","completed","TemplateRef","Directive","BulkOperationStepper","bulkOperationService","modal","alert","selectionChange","EventEmitter","steps","showStepper","showButtons","stepperButtonsLabels","custom","deviceTypesSubject$","Subject","endSubscriptions","deviceTypes$","asObservable","ngAfterViewInit","_this","setTimeout","customSteps","toArray","pipe","takeUntil","subscribe","event","operationDetailsForm","operationDetailsComponent","changeDeviceTypes","deviceTypes","isArray","confirmDeviceSelection","$event","deviceQueryString","confirm","Status","WARNING","ok","cancel","_e","retrieveOperationDetails","_b","undefined","operationDetails","_c","_d","retrieveBulkOperationType","patchValue","close","scheduleBulkOperation","pendingStatus","success","addServerFailure","ex_2","ngOnDestroy","complete","reset","returnToBulkOperationOverview","BulkOperationsService","ModalService","AlertService","Output","ContentChildren","ViewChild","C8yStepper","static","BaseStepperComponent","stepData","operationStepper","retrieveOperationPrototype","bind","onSelectionChange","selectedIndex","previouslySelectedIndex","keys","getStepDataKeyByIndex","index","BulkOperationFromSingleComponent","activatedRoute","_super","tslib_1.__extends","getOperation","snapshot","params","operationId","data","ActivatedRoute","BulkOperationsStepperContainerComponent","bulkOpsService","resolver","changeDetector","type","component","getBulkTypes","find","element","path","includes","detectChanges","createComponent","factory","resolveComponentFactory","container","ComponentFactoryResolver","ChangeDetectorRef","read","ViewContainerRef","ConfirmDeviceProfileSelectionStepComponent","translate","DEVICE_TYPE_NOT_DEFINED","selectedDeviceProfile","getDeviceTypeTitle","deviceProfile","instant","TranslateService","SelectDeviceProfileStepComponent","deviceProfileService","textFilter$","BehaviorSubject","deviceType$","selectedDeviceType","name","deviceProfile$","combineLatest","switchMap","deviceType","getDeviceProfiles","shareReplay","loadDeviceTypes","deviceTypeSubscription","debounceTime","distinctUntilChanged","searchStr","query","c8y_Filter.type","from","uniqWith","map","val","c8y_Filter","filter","isEqual","unsubscribe","selectDeviceProfile","emit","DeviceProfileService","SelectFirmwareComponent","repositoryService","firmware","elementCount","DD_LOW_COUNT","firmwares$","text","getFirmwares","tap","resp","isLegacy","isLegacyEntry","DEVICE_TYPE_NOT_AVAILABLE","DESCRIPTION_NOT_AVAILABLE","selectFirmware","selected","fw","getBaseVersionsCount$","getDescriptionTitle","partialName","listRepositoryEntries","RepositoryType","RepositoryService","memoize","property","VersionOrPatchComponent","inventoryService","versionOrPatch","firmware$","firmwareId","id","detail$","catchError","of","baseVersions$","distinctUntilKeyChanged","listBaseVersions","isLegacy$","expanded","getBinaryName$","binaryUrl","getBaseVersionAndPatches$","baseVersion","listBaseVersionAndPatches","getPatchVersionsCount$","selectVersionOrPatch","InventoryService","ConfirmSoftwareSelectionStepComponent","ngOnChanges","changes","selectedItems","join","software","action","uniq","has","SelectSoftwareStepComponent","software$","getSoftware","NO_DEVICE_TYPE_AVAILABLE","getVersions","listAllVersions","resetSelection","radioButtons","radio","selectSoftware","option","selectedId","emitSoftware","emitData","version","__or","__not","__has","ViewChildren","ListItemRadioComponent","StepperBulkTypeConfiguration","configType$","configTypes","selectedConfigType","configurations$","configType","getConfiguration","loadConfigurationTypes","configTypeSubscription","configurationType","selectConfiguration","configuration","selectedConfiguration","goToSecondStep","getConfigBinary","url","getBinaryText","allowExternal","noAlerts","binary","c8y_DownloadConfigFile","StepperBulkTypeDeviceProfile","goToConfirmSelection","onDeviceProfileSelected","selectedItem","profileId","profileName","c8y_DeviceProfile","StepperFirmware","descriptionTemplate","goToVersionOrPatchStep","selectedFirmware","setFirmwareId","onVersionOrPatchSelected","onFirmwareSelected","subscription","selectedVersionOrPatch","c8y_Firmware","c8y_Patch","isPatch","dependency","StepperBulkTypeSoftware","descriptionTemplateSingle","descriptionTemplateOneOther","descriptionTemplateMultiple","selectedSoftware","onSoftwareSelected","item","confirmSoftwareSelection","getUniqueDeviceTypes","softwareList","c8y_Software","interpolationParams","count","c8y_SoftwareUpdate","DeviceSelectorComponent","typeColumn","TypeDeviceGridColumn","onDeviceQueryStringChange","columns","StatusDeviceGridColumn","NameDeviceGridColumn","ModelDeviceGridColumn","GroupDeviceGridColumn","RegistrationDateDeviceGridColumn","AlarmsDeviceGridColumn","unsubscribe$","types","deviceGrid","updateFiltering","FilteringActionType","ApplyFilter","ResetFilter","payload","filteringModifier","externalFilterQuery","DeviceGridComponent","TabsFactory","router","tabs","match","icon","priority","orientation","Router","Injectable","routes","redirectTo","pathMatch","OperationsModule","NgModule","declarations","imports","CoreModule","FormsModule","ReactiveFormsModule","RouterModule","forRoot","useHash","TooltipModule","PopoverModule","CollapseModule","BsDropdownModule","BsDatepickerModule","TimepickerModule","RepositoryModule","DeviceProfileModule","DeviceGridModule","SingleOperationDetailsModule","OperationSummaryModule","BulkOperationSchedulerModule","exports","providers","provide","HOOK_TABS","useClass","multi","entryComponents","OperationSchedulerComponent","placeholder","delayErrors","pickerErrors","DELAY_SECONDS_DEFAULT","DELAY_MILLISECONDS_DEFAULT","MINUTES_AHEAD_DEFAULT","delaySeconds","delayMilliseconds","minutesAhead","currentUnit","minutes","seconds","milliseconds","minDate","Date","initialDate","setMinutes","getMinutes","minDelay","fgOperationScheduler","picker","dateValidation","time","timeValidation","delay","min","unit","valueChanges$","valueChanges","throttleTime","controls","errors","convertDelayHandler","closed","writeValue","scheduledDate","delayInSeconds","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","disable","enable","validate","invalid","registerOnValidatorChange","onValidatorChanged","markAsTouched","convertDelay","setValidators","updateValueAndValidity","combineDateAndTime","date","getFullYear","getMonth","getDate","getHours","fControl","parent","setValue","setErrors","isEmpty","OperationSchedulerComponent_1","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","OperationSummaryComponent","deviceCount","displayDeviceCount","filters","q","pageSize","currentPage","withTotalPages","list","paging","totalPages","SingleOperationModalComponent","modalRef","collapsed","readOnly","BsModalRef","SingleOperationDetailsService","operationService","modalService","openDetails","operationOrOperationId","options","detail","initialState","operation","show","class","OperationService","BsModalService","SingleOperationComponent","singleOperationDetailsService","statusIcons","operationStatusIcons","statusClasses","operationStatusClasses","SingleOperationListItemComponent","alertService","OperationStatus","commandText","opDescription","detailsTabTemplate","historyOfChangesTabTemplate","selectedTab","scheduleAsBulkOperation","navigateByUrl","update","status","FAILED","failureReason","operationAfterUpdate","ex_1","SingleOperationDetailsComponent","bulkOperationDetailsService","openBulkOperationDetails","bulkOperationId","BulkOperationDetailsService","BulkOperationsListModule","BulkOperationsServiceModule","StatusFilterComponent","statusOptions","onFilterChanged","isAllButtonSelected","multiple","coerceBooleanProperty","small","changeFilter","emitNeeded","forEach","emitSelectedOptions","removeFilter","preset","firstSelected","include","activeFilters","isFilterApplied","some","HostBinding","host","StatusFilterModule","baseUrl","HOOK_LIST_BULK_TYPE","InjectionToken","C8Y_BULK_TYPES","c8yIcon","fragments","C8Y_BULK_TYPE_FRAGMENTS","reduce","flattened","current","concat","operationBulkService","location","bulkTypes","isUndefined","paramIndex","decorator","getBulkOperations","customFilter","withDeleted","getBulkOperationById","createBulkOperation","bulkOperation","deleteBulkOperation","delete","updateBulkOperation","back","setBulkTypes","createGroup","deviceQueryDataString","dynamicGroup","c8y_IsDynamicGroup","invisible","c8y_DeviceQueryString","details","groupId","operationPrototype","creationRamp","startDate","toISOString","getSingleOperationsByStatus","toUpperCase","createSingleOperation","updateSingleOperation","partialUpdateObject","getManagedObject","deviceId","fragment","OperationBulkService","Location","Inject","args","tslib_1.__param","useValue","ɵ0$1","BulkOperationWrapperComponent","bulkOperationsService","BulkOperationsModalComponent","bsModalRef","showComponent","hide","BulkOperationModalsService","bsModalService","showNewBulkOperationModal","backdrop","hideNewBulkOperationModal","BulkOperationsRescheduleModalComponent","closeSubject","modalTitle","getTitle","onDateAndDelaySelect","dateAndDelay","isRetryOperation","onCancel","onSave","newBulkOperation","er_1","er_2","BULK_OPERATION_STATUS_LABELS","SCHEDULED","EXECUTING","CANCELED","SUCCESSFUL","BULK_OPERATION_STATUS_OPTIONS","generalStatus","OperationBulkGeneralStatus","iconClass","EXECUTING_WITH_ERROR","BulkOperationListItemComponent","detailsCollapsed","showFailedOperation","reload","refreshLoading","bulkOperationGeneralStatus","bulkOperationStatusOptions","finishDatePopoverText","progressBarClass","progressBarStatus","getIconClass","finishDate","calculateFinishDateMs","setProgressBar","firstChange","statusOption","getTime","progress","all","progressBarProgressFn","successful","failed","staticContentOfClass","progressBarState","progressBarColor","editSchedule","modalOptions","cloneDeep","cancelBulkOperation","DANGER","retryFailedOperation","clonedBulk","failedParentId","content","setToSuccessful","openFailedOperation","isStatusScheduled","isStatusExecutingOrExecutingWithError","allOperationsCreated","executing","pending","isStatusCanceled","isStatusFailed","BulkOperationsListComponent","realtime","bulkOperationModalsService","selectedTypeFilters","getTypeFilters","statusFilter$","typeFilter$","timeFilter$","reload$","bulkOperations$","statusFilters","timeFilters","withLatestFrom","typeFilter","filterPipe","filterByType","allFilterFragments","flattenFilterFragments","bulkOperations","flattenedFragments","every","resetFilter","datePicker","clearFilter","statusFilter","getValue","timeFilter","flatten","dateFrom","dateTo","addBulkOperation","listItems","listItem","nativeElement","scrollIntoView","behavior","block","compareOperations","operationA","operationB","OperationBulkRealtimeService","DatePickerComponent","BulkOperationDetailsTabsComponent","onRetryFailedOperations","detailsTemplate","auditTemplate","BulkOperationDetailsComponent","allFilterIsSelected","scrollToRetriedFromOperation","failedOperationId","SINGLE_OP_STATUS_NAMES","PENDING","ALL","SINGLE_OP_STATUS_PROPERTIES","SingleOperationsListComponent","singleOperationStatusProperties","singleOperationStatusNames","filterOperationsByType","getFilterTypeOfSingleOperations","getOperationsByStatus","singleOperations","retryBulkOperation","SingleOperationItemComponent","device","showIfTextTruncated","singleOperationsStatusProperties","getDeviceMO","isTextTruncated","retrySingleOperation","singleOperation","operationToCreate","omit","operationProperties","inventoryMO","el","failureReasonRef","offsetWidth","scrollWidth","BulkOperationTypeListComponent","onCustomType","bulkList","handleClick","bulkOperationListRoutes","forChild"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum BulkOperationType {\n  SOFTWARE = 'software',\n  FIRMWARE = 'firmware',\n  CONFIGURATION = 'configuration',\n  DEVICE_PROFILE = 'device-profile'\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormGroupConfig, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport {\n  BulkOperationType,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-operation-details',\n  templateUrl: 'operation-details.component.html'\n})\nexport class OperationDetailsComponent implements OnInit {\n  @Input()\n  set bulkOperationType(bulkOperationType: BulkOperationType) {\n    this.titlePlaceholder = get(this.placeholders[bulkOperationType], 'title');\n    this.descriptionPlaceholder = get(this.placeholders[bulkOperationType], 'description');\n  }\n\n  titlePlaceholder: string = gettext('e.g. Reset factory settings');\n  descriptionPlaceholder: string = gettext(\n    'e.g. Reset factory settings of all devices of model XYZ'\n  );\n  fgOperationDescription: FormGroup;\n\n  private placeholders: { [key in BulkOperationType]: { title: string; description: string } } = {\n    [BulkOperationType.SOFTWARE]: {\n      title: gettext('e.g. Cloud connectivity software'),\n      description: gettext(\n        'e.g. Cloud connectivity software applied to devices with type c8y_Linux'\n      )\n    },\n    [BulkOperationType.FIRMWARE]: {\n      title: gettext('e.g. Firmware for hardware revision b'),\n      description: gettext(\n        'e.g. Firmware for hardware revision b applied to devices with type c8y_Linux'\n      )\n    },\n    [BulkOperationType.CONFIGURATION]: {\n      title: gettext('e.g. Host configuration c8y_Linux'),\n      description: gettext('e.g. Host configuration applied to devices with type c8y_Linux')\n    },\n    [BulkOperationType.DEVICE_PROFILE]: {\n      title: gettext('e.g. Device profile for c8y_Linux devices'),\n      description: gettext('e.g. Device profile applied to devices with type c8y_Linux')\n    }\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    const config: FormGroupConfig<OperationDetails> = {\n      description: ['', Validators.required],\n      note: [''],\n      schedule: []\n    };\n\n    this.fgOperationDescription = this.formBuilder.group(config);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Directive, Input, TemplateRef } from '@angular/core';\nimport { C8yStepper } from '@c8y/ngx-components';\n\n@Directive({ selector: '[customStep]' })\nexport class CustomStep {\n  @Input('customStep') label: string;\n  @Input('customStepCompleted') completed: string;\n  @Input('customStepButtonsDisabled') buttonsDisabled: boolean = false;\n  constructor(public templateRef: TemplateRef<any>) {}\n  @Input('customStepOnNext') onNext: (event: { stepper: C8yStepper; step: CdkStep }) => void = ({\n    stepper,\n    step\n  }) => {\n    // steps without own `onNext` handler, e.g. preview steps need to mark themselves as `completed`,\n    // otherwise stepper will not allow to move forth from them as soon as the user navigates back\n    // and the `c8y-stepper-buttons` component marks the step as incomplete.\n    step.completed = true;\n    stepper.next();\n  };\n}\n","import { CdkStep, StepperSelectionEvent } from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { AlertService, C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { OperationDetailsComponent } from '../../details/operation-details.component';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { CustomStep } from '../custom-step.directive';\nimport {\n  OperationDetails,\n  BulkOperationType,\n  BulkOperationsService\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operation-stepper',\n  templateUrl: 'bulk-operation-stepper.component.html'\n})\nexport class BulkOperationStepper implements OnDestroy {\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter();\n  @ContentChildren(CustomStep) customSteps: QueryList<CustomStep>;\n  @ViewChild(C8yStepper, { static: false })\n  stepper: C8yStepper;\n  @ViewChild(OperationDetailsComponent, { static: false })\n  operationDetailsComponent: OperationDetailsComponent;\n\n  steps: CustomStep[] = [];\n  showStepper: boolean = false;\n  showButtons: boolean = false;\n  pendingStatus: boolean;\n  stepperButtonsLabels = { custom: gettext('Schedule bulk operation') };\n  deviceTypes$: Observable<string[]>;\n  deviceQueryString: string;\n  bulkOperationType: BulkOperationType;\n  scheduleData: OperationSchedule;\n  operationDetailsForm: FormGroup;\n  operationDetails: OperationDetails;\n  retrieveOperationDetails: () => OperationDetails | Promise<OperationDetails>;\n\n  private deviceTypesSubject$: Subject<string[]> = new Subject();\n  private endSubscriptions: Subject<void> = new Subject();\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {\n    this.deviceTypes$ = this.deviceTypesSubject$.asObservable();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      // wait for the next event loop turn as `steps` has already been checked in this CD cycle\n      this.steps = this.customSteps.toArray();\n      this.showStepper = true;\n      setTimeout(() => {\n        // postpone rendering of buttons for custom steps to the point where custom steps have already been rendered\n        this.showButtons = true;\n        if (this.stepper) {\n          this.stepper.selectionChange.pipe(takeUntil(this.endSubscriptions)).subscribe(event => {\n            this.selectionChange.next(event);\n          });\n          this.operationDetailsForm = this.operationDetailsComponent.fgOperationDescription;\n        }\n      });\n    });\n  }\n\n  changeDeviceTypes(deviceTypes: string | string[]) {\n    if (deviceTypes) {\n      this.deviceTypesSubject$.next(Array.isArray(deviceTypes) ? deviceTypes : [deviceTypes]);\n    } else {\n      this.deviceTypesSubject$.next([]);\n    }\n  }\n\n  async confirmDeviceSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    if (!this.deviceQueryString) {\n      try {\n        await this.modal.confirm(\n          gettext('All devices selected'),\n          gettext(\n            'You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?'\n          ),\n          Status.WARNING,\n          { ok: gettext('Schedule for all devices'), cancel: gettext('Cancel and select devices') }\n        );\n        $event.step.completed = true;\n        $event.stepper.next();\n        this.operationDetails = this.retrieveOperationDetails\n          ? await this.retrieveOperationDetails()\n          : undefined;\n      } catch (ex) {\n        // Intentionally empty\n      }\n    } else {\n      $event.step.completed = true;\n      $event.stepper.next();\n      this.operationDetails = this.retrieveOperationDetails\n        ? await this.retrieveOperationDetails()\n        : undefined;\n    }\n\n    this.bulkOperationType = this.bulkOperationService.retrieveBulkOperationType(\n      get(this.operationDetails, 'prototype')\n    );\n    if (\n      this.operationDetailsForm &&\n      get(this.operationDetailsForm, 'controls.description.pristine') &&\n      this.operationDetails\n    ) {\n      this.operationDetailsForm.patchValue({\n        description: get(this.operationDetails, 'prototype.description')\n      });\n    }\n  }\n\n  cancel() {\n    this.close();\n  }\n\n  async scheduleBulkOperation() {\n    this.pendingStatus = true;\n\n    try {\n      this.operationDetails.prototype.description = get(\n        this.operationDetailsForm,\n        'controls.description.value'\n      );\n      this.operationDetails.note = get(this.operationDetailsForm, 'controls.note.value');\n      this.operationDetails.schedule = get(this.operationDetailsForm, 'controls.schedule.value');\n\n      await this.bulkOperationService.scheduleBulkOperation(\n        this.deviceQueryString,\n        this.operationDetails\n      );\n      this.alert.success(gettext('New bulk operation scheduled.'));\n      this.close();\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n\n    this.pendingStatus = false;\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  private close() {\n    this.stepper.reset();\n    this.bulkOperationService.returnToBulkOperationOverview();\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { BulkOperationStepper } from './creation/bulk-operation-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\n\nexport abstract class BaseStepperComponent implements OnInit, OnDestroy {\n  @ViewChild(BulkOperationStepper, { static: true }) operationStepper: BulkOperationStepper;\n\n  set deviceTypes(deviceTypes: string | string[]) {\n    if (this.operationStepper) {\n      this.operationStepper.changeDeviceTypes(deviceTypes);\n    }\n  }\n\n  /**\n   * A map holding step data. The order of properties need to match the order of\n   * the steps they hold data for as the index of the property is used to clear\n   * step data when navigating forth after changing data at an earlier step.\n   */\n  stepData: { [key: string]: IManagedObject } = {};\n\n  private endSubscriptions: Subject<void> = new Subject();\n\n  ngOnInit(): void {\n    this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);\n\n    this.operationStepper.selectionChange\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(this.onSelectionChange.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  protected abstract retrieveOperationPrototype(): OperationDetails | Promise<OperationDetails>;\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    const { selectedIndex, previouslySelectedIndex } = event;\n    if (\n      selectedIndex > previouslySelectedIndex &&\n      selectedIndex < Object.keys(this.stepData).length\n    ) {\n      // TODO clear step data only if previous step is \"dirty\"\n      this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;\n    }\n  }\n\n  private getStepDataKeyByIndex(index: number): string {\n    return Object.keys(this.stepData)[index];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IOperation } from '@c8y/client';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'bulk-operation-from-single',\n  templateUrl: 'bulk-operation-from-single.component.html'\n})\nexport class BulkOperationFromSingleComponent extends BaseStepperComponent implements OnInit {\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOperationService: BulkOperationsService\n  ) {\n    super();\n  }\n\n  protected async retrieveOperationPrototype(): Promise<OperationDetails> {\n    const prototype: IOperation = (await this.bulkOperationService.getOperation(\n      this.activatedRoute.snapshot.params.operationId\n    )).data;\n\n    return {\n      description: get(prototype, 'description'),\n      prototype\n    };\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'bulk-operations-stepper-container',\n  templateUrl: 'bulk-operations-stepper-container.component.html'\n})\nexport class BulkOperationsStepperContainerComponent implements OnInit {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  bulkOperationType: string;\n\n  private component: any;\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOpsService: BulkOperationsService,\n    private resolver: ComponentFactoryResolver,\n    private changeDetector: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      if (params && params.type) {\n        this.bulkOperationType = params.type;\n\n        this.component = this.bulkOpsService\n          .getBulkTypes()\n          .find(element => element.path.includes(this.bulkOperationType)).component;\n\n        this.changeDetector.detectChanges();\n        this.createComponent(this.component);\n      }\n    });\n  }\n\n  private createComponent(component) {\n    if (component) {\n      const factory = this.resolver.resolveComponentFactory(component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { get } from 'lodash-es';\nimport { IManagedObject } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-confirm-device-profile-selection-step',\n  templateUrl: 'confirm-device-profile-selection-step.component.html'\n})\nexport class ConfirmDeviceProfileSelectionStepComponent {\n  @Input() selectedDeviceProfile: IManagedObject;\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n\n  constructor(\n    private translate: TranslateService\n  ) {}\n\n  get softwares() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'software'], []);\n  }\n\n  get configurations() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'configuration'], []);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n\n  }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { Observable, BehaviorSubject, combineLatest, Subscription, from } from 'rxjs';\nimport { switchMap, shareReplay, debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { property, isEqual, uniqWith, get } from 'lodash-es';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DeviceProfileService } from '@c8y/ngx-components/device-profile';\n\n@Component({\n  selector: 'c8y-select-device-profile-step',\n  templateUrl: 'select-device-profile-step.component.html'\n})\nexport class SelectDeviceProfileStepComponent {\n  @Output() deviceProfile: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  deviceProfile$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getDeviceProfiles(name, deviceType)),\n    shareReplay(1)\n  );\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private deviceProfileService: DeviceProfileService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(this.deviceProfileService.getDeviceProfiles(query));\n        })\n      )\n      .subscribe( ({ data }) => {\n        this.deviceTypes = uniqWith(\n          data.map(val => ({ name: val.c8y_Filter.type })).filter(val => val.name),\n          isEqual\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  selectDeviceProfile(deviceProfile: IManagedObject) {\n    this.deviceProfile.emit(deviceProfile);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n  }\n\n  private getDeviceProfiles(name?: string, deviceType?: string) {\n    const query: any = deviceType ? { 'c8y_Filter.type': deviceType } : {};\n    if (name) {\n      query.name = `*${name}*`;\n    }\n    return this.deviceProfileService.getDeviceProfiles(query);\n  }\n\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { gettext } from '@c8y/ngx-components';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { property, get } from 'lodash-es';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-select-firmware-step',\n  templateUrl: 'select-firmware.component.html'\n})\nexport class SelectFirmwareComponent {\n  @Input() selected: IManagedObject;\n  @Output() firmware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  firmwares$: Observable<IResultList<IManagedObject>> = this.textFilter$\n    .pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    )\n    .pipe(\n      switchMap(text => this.getFirmwares(text)),\n      tap(resp => {\n        this.elementCount = resp.data ? resp.data.length : 0;\n      }),\n      shareReplay(1)\n    );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n  readonly DESCRIPTION_NOT_AVAILABLE: string = gettext('No description available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bulkOpsService: BulkOperationsService,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  selectFirmware(selected: boolean, fw: IManagedObject) {\n    if (selected) {\n      this.firmware.emit(fw);\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDescriptionTitle(firmware: IManagedObject): string {\n    return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n\n  private getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  shareReplay,\n  map,\n  switchMap,\n  distinctUntilKeyChanged,\n  distinctUntilChanged,\n  catchError,\n  tap\n} from 'rxjs/operators';\nimport { IManagedObject, IResultList, InventoryService } from '@c8y/client';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { property } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-version-or-patch-step',\n  templateUrl: 'version-or-patch.component.html'\n})\nexport class VersionOrPatchComponent {\n  @Input() selected: IManagedObject;\n  @Output() versionOrPatch: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n\n  firmware$: Observable<IManagedObject> = this.bulkOpsService.firmwareId.pipe(\n    distinctUntilChanged(),\n    switchMap(id => this.inventoryService.detail$(id).pipe(catchError(error => of(error)))),\n    shareReplay(1)\n  );\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = this.firmware$.pipe(\n    distinctUntilKeyChanged('id'),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    tap(resp => {\n      this.elementCount = resp.data ? resp.data.length : 0;\n    }),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  expanded: { [id: string]: boolean } = {};\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryService: InventoryService,\n    private bulkOpsService: BulkOperationsService\n  ) {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getBaseVersionAndPatches$(baseVersion) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(firmware =>\n        this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject) {\n    if (selected) {\n      this.versionOrPatch.emit(versionOrPatch);\n    }\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { has, uniq } from 'lodash-es';\nimport { ISelectedSoftware } from './select-software.model';\n\n@Component({\n  selector: 'c8y-confirm-software-selection-step',\n  templateUrl: 'confirm-software-selection-step.component.html'\n})\nexport class ConfirmSoftwareSelectionStepComponent implements OnChanges {\n  @Input() selectedItems: ISelectedSoftware[];\n  title: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.selectedItems) {\n      const deviceTypes: string[] = this.deviceTypes;\n      this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');\n    }\n  }\n\n  get selectedToInstall() {\n    return this.selectedItems.filter(software => software.action === 'install');\n  }\n\n  get selectedToDelete() {\n    return this.selectedItems.filter(software => software.action === 'delete');\n  }\n\n  get deviceTypes() {\n    return uniq(\n      this.selectedItems\n        .filter(val => has(val, ['software', 'c8y_Filter', 'type']))\n        .map(val => val.software.c8y_Filter.type)\n    );\n  }\n}\n","import { Component, EventEmitter, Output, QueryList, ViewChildren } from '@angular/core';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { gettext, ListItemRadioComponent, memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, isEqual, property, uniqWith } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { ISelectedSoftware } from './select-software.model';\n\n@Component({\n  selector: 'c8y-select-software-step',\n  templateUrl: 'select-software-step.component.html'\n})\nexport class SelectSoftwareStepComponent {\n  @Output() software: EventEmitter<ISelectedSoftware> = new EventEmitter<ISelectedSoftware>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  software$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getSoftware(name, deviceType)),\n    shareReplay(1)\n  );\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');\n  @ViewChildren(ListItemRadioComponent) radioButtons: QueryList<ListItemRadioComponent>;\n\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(software: IManagedObject): Observable<number> {\n    return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));\n  }\n\n  @memoize(property('id'))\n  getVersions(software: IManagedObject) {\n    return this.repositoryService.listAllVersions(software);\n  }\n\n  getDeviceTypeTitle(software: IManagedObject): string {\n    return get(\n      software,\n      'c8y_Filter.type',\n      this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })), isEqual);\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  resetSelection() {\n    this.radioButtons.map(radio => radio.reset());\n  }\n\n  selectSoftware({ option, software }) {\n    software.selectedId = option.id;\n    option.action = 'install';\n    this.emitSoftware({ option, software });\n  }\n\n  emitSoftware({ option, software }) {\n    const emitData = Object.assign(\n      {},\n      { software },\n      { version: option },\n      { action: option.action }\n    );\n    this.software.emit(emitData);\n  }\n\n  private getSoftware(name?: string, deviceType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (deviceType) {\n      query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: `c8y_Filter.type` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation, IResultList } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, isEqual, uniqWith } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-configuration',\n  templateUrl: 'stepper-bulk-type-configuration.component.html'\n})\nexport class StepperBulkTypeConfiguration extends BaseStepperComponent {\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('Undefined`device type`');\n  selectedConfiguration: IManagedObject;\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  configType$: BehaviorSubject<string> = new BehaviorSubject('');\n  configTypes = [];\n  selectedConfigType = { name: '' };\n  configurations$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.configType$\n  ).pipe(\n    switchMap(([name, configType]) => this.getConfiguration(name, configType)),\n    shareReplay(1)\n  );\n  private configTypeSubscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    super();\n    this.DD_LOW_COUNT = this.bulkOperationService.DD_LOW_COUNT;\n    this.loadConfigurationTypes();\n  }\n\n  loadConfigurationTypes() {\n    this.configTypeSubscription = this.configType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { configurationType: `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.configTypes = uniqWith(data.map(val => ({ name: val.configurationType })), isEqual);\n      });\n  }\n  ngOnDestroy(): void {\n    this.configTypeSubscription.unsubscribe();\n  }\n\n  selectConfiguration(configuration: IManagedObject) {\n    this.selectedConfiguration = configuration;\n  }\n\n  goToSecondStep($event: { stepper: C8yStepper; step: CdkStep }) {\n    $event.stepper.next();\n    this.getConfigBinary();\n    this.deviceTypes = this.selectedConfiguration.deviceType;\n  }\n\n  async getConfigBinary() {\n    if (this.selectedConfiguration.url) {\n      this.selectedConfiguration.binary = await this.repositoryService.getBinaryText(\n        this.selectedConfiguration.url,\n        { allowExternal: true, noAlerts: true }\n      );\n    }\n  }\n\n  getDeviceTypeTitle(configuration: IManagedObject): string {\n    return get(configuration, 'deviceType', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const configuration = {\n      type: this.selectedConfiguration.configurationType,\n      url: this.selectedConfiguration.url\n    };\n\n    return {\n      name: gettext('Configuration update'),\n      description: get(this.selectedConfiguration, 'name'),\n      prototype: ({\n        description: `Update configuration to: ${this.selectedConfiguration.name}.`,\n        c8y_DownloadConfigFile: configuration\n      } as unknown) as IOperation\n    };\n  }\n\n  private getConfiguration(name?: string, configurationType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (configurationType) {\n      query.__or = [{ configurationType }, { __not: { __has: `configurationType` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-device-profile',\n  templateUrl: 'stepper-bulk-type-device-profile.component.html'\n})\nexport class StepperBulkTypeDeviceProfile extends BaseStepperComponent {\n  selectedDeviceProfile: IManagedObject;\n\n  goToConfirmSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');\n    $event.stepper.next();\n  }\n\n  onDeviceProfileSelected(selectedItem) {\n    this.selectedDeviceProfile = selectedItem;\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    return {\n      name: gettext('Apply device profile'),\n      description: get(this.selectedDeviceProfile, 'name'),\n      prototype: ({\n        description: `Apply device profile: ${this.selectedDeviceProfile.name}`,\n        profileId: this.selectedDeviceProfile.id,\n        profileName: this.selectedDeviceProfile.name,\n        c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile\n      } as unknown) as IOperation\n    };\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { Component, OnDestroy } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-firmware',\n  templateUrl: 'stepper-bulk-type-firmware.component.html'\n})\nexport class StepperFirmware extends BaseStepperComponent implements OnDestroy {\n  readonly descriptionTemplate: string = gettext('{{ name }} (version {{ version }})');\n\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  stepData: { firmware: IManagedObject; versionOrPatch: IManagedObject } = {\n    firmware: undefined,\n    versionOrPatch: undefined\n  };\n\n  selectedFirmware: IManagedObject;\n  selectedVersionOrPatch: IManagedObject;\n\n  private subscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  goToVersionOrPatchStep({ stepper }) {\n    const selectedFirmware = this.stepData.firmware;\n    this.bulkOperationService.setFirmwareId(selectedFirmware.id);\n    this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;\n    stepper.next();\n  }\n\n  onVersionOrPatchSelected(versionOrPatch: IManagedObject) {\n    this.stepData.versionOrPatch = versionOrPatch;\n  }\n\n  onFirmwareSelected(fw: IManagedObject) {\n    this.stepData.firmware = fw;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const selectedFirmware = this.stepData.firmware;\n    const selectedVersionOrPatch = this.stepData.versionOrPatch;\n\n    if (!selectedFirmware || !selectedVersionOrPatch) {\n      return;\n    }\n\n    const firmware: IManagedObject = ({\n      name: selectedFirmware.name,\n      version: selectedVersionOrPatch.c8y_Firmware.version,\n      url: selectedVersionOrPatch.c8y_Firmware.url\n    } as unknown) as IManagedObject;\n\n    if (selectedVersionOrPatch.c8y_Patch) {\n      firmware.isPatch = true;\n      firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;\n    }\n\n    const name = selectedFirmware.name;\n    const version = selectedVersionOrPatch.c8y_Firmware.version;\n    const description: string = `Update firmware to: ${name} (version: ${version}).`;\n\n    return {\n      name: gettext('Firmware update'),\n      description: this.translate.instant(this.descriptionTemplate, {\n        name: get(this.stepData, 'firmware.name'),\n        version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')\n      }),\n      prototype: ({\n        description,\n        c8y_Firmware: firmware\n      } as unknown) as IOperation\n    };\n  }\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    this.textFilter$.next('');\n    super.onSelectionChange(event);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniq } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SelectSoftwareStepComponent } from './software-update-stepper/select-software-step.component';\nimport {\n  ISelectedSoftware,\n  ISoftwareUpdateOperationPrototype\n} from './software-update-stepper/select-software.model';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-software',\n  templateUrl: 'stepper-bulk-type-software.component.html'\n})\nexport class StepperBulkTypeSoftware extends BaseStepperComponent {\n  readonly descriptionTemplateSingle: string = gettext(\n    'Update software to: {{ name }} (version {{ version }})'\n  );\n  readonly descriptionTemplateOneOther: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and one other'\n  );\n  readonly descriptionTemplateMultiple: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and {{ count }} others'\n  );\n\n  selectedSoftware: ISelectedSoftware[] = [];\n  @ViewChild(SelectSoftwareStepComponent, { static: false })\n  selectSoftware: SelectSoftwareStepComponent;\n\n  constructor(private modal: ModalService, private translate: TranslateService) {\n    super();\n  }\n\n  onSoftwareSelected(selectedItem) {\n    this.selectedSoftware = this.selectedSoftware.filter(\n      item => item.software.id !== selectedItem.software.id\n    );\n    this.selectedSoftware.push(selectedItem);\n  }\n\n  async confirmSoftwareSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    const deviceTypes: string[] = this.getUniqueDeviceTypes();\n    this.deviceTypes = deviceTypes;\n    if (deviceTypes.length > 1) {\n      try {\n        await this.modal.confirm(\n          gettext('Selected software for various device types'),\n          gettext('Operation may fail due to unsupported software. Do you want to proceed?'),\n          Status.WARNING,\n          { ok: gettext('Confirm'), cancel: gettext('Cancel') }\n        );\n        $event.stepper.next();\n      } catch (ex) {\n        this.selectedSoftware = [];\n        this.selectSoftware.resetSelection();\n      }\n    } else {\n      $event.stepper.next();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const softwareList: ISoftwareUpdateOperationPrototype[] = this.selectedSoftware.map(item => ({\n      name: item.software.name,\n      version: item.version.c8y_Software.version,\n      url: item.version.c8y_Software.url,\n      action: item.action\n    }));\n\n    const interpolationParams: object = {\n      name: softwareList[0].name,\n      version: softwareList[0].version,\n      count: softwareList.length - 1\n    };\n    let description: string;\n    switch (softwareList.length) {\n      case 1:\n        description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);\n        break;\n      case 2:\n        description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);\n        break;\n      default:\n        description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);\n    }\n\n    return {\n      name: gettext('Software update'),\n      prototype: ({\n        description,\n        c8y_SoftwareUpdate: softwareList\n      } as unknown) as IOperation\n    };\n  }\n\n  private getUniqueDeviceTypes(): string[] {\n    return uniq(\n      this.selectedSoftware\n        .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)\n        .filter(type => !!type)\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  AlarmsDeviceGridColumn,\n  DeviceGridComponent,\n  GroupDeviceGridColumn,\n  ModelDeviceGridColumn,\n  NameDeviceGridColumn,\n  RegistrationDateDeviceGridColumn,\n  StatusDeviceGridColumn,\n  TypeDeviceGridColumn\n} from '@c8y/ngx-components/device-grid';\nimport { Column, FilteringActionType } from '@c8y/ngx-components';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-device-selector',\n  templateUrl: 'device-selector.component.html'\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n  @ViewChild(DeviceGridComponent, { static: true })\n  deviceGrid: DeviceGridComponent;\n\n  @Input()\n  deviceTypes: Observable<string[]>;\n\n  typeColumn: Column = new TypeDeviceGridColumn();\n\n  @Output()\n  onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n\n  columns: Column[] = [\n    new StatusDeviceGridColumn(),\n    new NameDeviceGridColumn(),\n    this.typeColumn,\n    new ModelDeviceGridColumn(),\n    new GroupDeviceGridColumn(),\n    new RegistrationDateDeviceGridColumn(),\n    new AlarmsDeviceGridColumn()\n  ];\n\n  private unsubscribe$: Subject<boolean> = new Subject();\n\n  ngOnInit(): void {\n    if (this.deviceTypes) {\n      this.deviceTypes\n        .pipe(\n          distinctUntilChanged(),\n          takeUntil(this.unsubscribe$)\n        )\n        .subscribe((types: string[]) => {\n          this.deviceGrid.updateFiltering([this.typeColumn.name], {\n            type:\n              types && types.length\n                ? FilteringActionType.ApplyFilter\n                : FilteringActionType.ResetFilter,\n            payload: types\n              ? {\n                  filteringModifier: {\n                    externalFilterQuery: {\n                      types\n                    }\n                  }\n                }\n              : undefined\n          });\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\r\n\r\n@Injectable()\r\nexport class TabsFactory implements TabFactory {\r\n  constructor(public router: Router) {}\r\n  get() {\r\n    const tabs: Tab[] = [];\r\n    if (this.router.url.match(/devicecontrol/g)) {\r\n      tabs.push({\r\n        path: 'devicecontrol/single',\r\n        label: gettext('Single operations'),\r\n        icon: 'c8y-icon c8y-icon-device-control',\r\n        priority: 1100,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n      tabs.push({\r\n        path: 'devicecontrol/bulk',\r\n        label: gettext('Bulk operations'),\r\n        icon: 'c8y-icon c8y-icon-energy',\r\n        priority: 1050,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n    }\r\n\r\n    return tabs;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, FormsModule, HOOK_TABS, Route } from '@c8y/ngx-components';\nimport { DeviceGridModule } from '@c8y/ngx-components/device-grid';\nimport { DeviceProfileModule } from '@c8y/ngx-components/device-profile';\nimport { RepositoryModule } from '@c8y/ngx-components/repository';\nimport { SingleOperationDetailsModule } from '@c8y/ngx-components/operations/single-operation-details';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationFromSingleComponent } from './bulk/create-from-single/bulk-operation-from-single.component';\nimport { BulkOperationStepper } from './bulk/creation/bulk-operation-stepper.component';\nimport { BulkOperationsStepperContainerComponent } from './bulk/creation/bulk-operations-stepper-container.component';\nimport { ConfirmDeviceProfileSelectionStepComponent } from './bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component';\nimport { SelectDeviceProfileStepComponent } from './bulk/creation/device-profile-update-stepper/select-device-profile-step.component';\nimport { SelectFirmwareComponent } from './bulk/creation/firmware-update-stepper/select-firmware.component';\nimport { VersionOrPatchComponent } from './bulk/creation/firmware-update-stepper/version-or-patch.component';\nimport { ConfirmSoftwareSelectionStepComponent } from './bulk/creation/software-update-stepper/confirm-software-selection-step.component';\nimport { SelectSoftwareStepComponent } from './bulk/creation/software-update-stepper/select-software-step.component';\nimport { StepperBulkTypeConfiguration } from './bulk/creation/stepper-bulk-type-configuration.component';\nimport { StepperBulkTypeDeviceProfile } from './bulk/creation/stepper-bulk-type-device-profile.component';\nimport { StepperFirmware } from './bulk/creation/stepper-bulk-type-firmware.component';\nimport { StepperBulkTypeSoftware } from './bulk/creation/stepper-bulk-type-software.component';\nimport { CustomStep } from './bulk/custom-step.directive';\nimport { OperationDetailsComponent } from './details/operation-details.component';\nimport { DeviceSelectorComponent } from './device-selector/device-selector.component';\nimport { TabsFactory } from './factories/tabs.factory';\n\nexport const routes: Route[] = [\n  {\n    path: 'devicecontrol',\n    redirectTo: 'devicecontrol/single',\n    pathMatch: 'full'\n  },\n  {\n    path: 'devicecontrol/bulk/creation/:type',\n    component: BulkOperationsStepperContainerComponent\n  },\n  {\n    path: 'devicecontrol/single/create-bulk/:operationId',\n    component: BulkOperationFromSingleComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    BulkOperationStepper,\n    BulkOperationsStepperContainerComponent,\n    BulkOperationFromSingleComponent,\n    CustomStep,\n    DeviceSelectorComponent,\n    StepperBulkTypeSoftware,\n    StepperFirmware,\n    StepperBulkTypeConfiguration,\n    StepperBulkTypeDeviceProfile,\n    OperationDetailsComponent,\n    VersionOrPatchComponent,\n    SelectFirmwareComponent,\n    ConfirmSoftwareSelectionStepComponent,\n    SelectSoftwareStepComponent,\n    SelectDeviceProfileStepComponent,\n    ConfirmDeviceProfileSelectionStepComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(routes, { useHash: true }),\n    TooltipModule.forRoot(),\n    PopoverModule.forRoot(),\n    CollapseModule.forRoot(),\n    BsDropdownModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    TimepickerModule.forRoot(),\n    RepositoryModule,\n    DeviceProfileModule,\n    DeviceGridModule,\n    SingleOperationDetailsModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule\n  ],\n  exports: [BulkOperationStepper, CustomStep],\n  providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }],\n  entryComponents: [BulkOperationsStepperContainerComponent]\n})\nexport class OperationsModule {}\n","import { Component, forwardRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators\n} from '@angular/forms';\nimport { gettext } from '@c8y/ngx-components';\nimport { isEmpty } from 'lodash-es';\nimport { Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { OperationSchedule } from './operation-schedule.interface';\n\n@Component({\n  selector: 'c8y-operation-scheduler',\n  templateUrl: 'operation-scheduler.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    }\n  ]\n})\nexport class OperationSchedulerComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  @Input('minutesAhead') set _minutesAhead(minutes: number) {\n    if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {\n      this.minutesAhead = minutes;\n    }\n  }\n  @Input('delayConfig') set _delayConfig(config: { seconds: number; milliseconds: number }) {\n    if (config) {\n      if (config.seconds > this.DELAY_SECONDS_DEFAULT) {\n        this.delaySeconds = config.seconds;\n      }\n\n      if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {\n        this.delayMilliseconds = config.milliseconds;\n      }\n    }\n  }\n\n  placeholder: string = gettext('Start date');\n  fgOperationScheduler: FormGroup;\n  minDate: Date;\n  minDelay: number;\n  delayErrors: ValidationErrors = null;\n  pickerErrors: ValidationErrors = null;\n\n  private readonly DELAY_SECONDS_DEFAULT: number = 1;\n  private readonly DELAY_MILLISECONDS_DEFAULT: number = 1;\n  private readonly MINUTES_AHEAD_DEFAULT: number = 5;\n  private delaySeconds: number = this.DELAY_SECONDS_DEFAULT;\n  private delayMilliseconds: number = this.DELAY_MILLISECONDS_DEFAULT;\n  private minutesAhead: number = this.MINUTES_AHEAD_DEFAULT;\n  private currentUnit: string = 'seconds';\n  private delayInSeconds: number;\n  private initialDate: Date;\n  private subscription: Subscription;\n\n  private onChange: (name) => void;\n  private onTouched: () => void;\n  private onValidatorChanged: () => void;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.minDate = new Date();\n    this.initialDate = new Date(\n      this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead)\n    );\n    this.minDelay = this.delaySeconds;\n\n    this.fgOperationScheduler = this.formBuilder.group({\n      picker: ['', [Validators.required, this.dateValidation]],\n      time: ['', [Validators.required, this.timeValidation]],\n      delay: ['', [Validators.required, Validators.min(this.minDelay)]],\n      unit: ['seconds']\n    });\n\n    this.fgOperationScheduler.patchValue({\n      picker: this.initialDate,\n      time: this.initialDate,\n      delay: this.minDelay\n    });\n\n    // Due to the validation of picker and time it could be possible that value changes\n    // are emitted more than once. Therefore we throttle the emits.\n    const valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));\n    this.subscription = valueChanges$.subscribe(data => {\n      this.delayErrors = this.fgOperationScheduler.controls.delay.errors;\n      this.pickerErrors = this.fgOperationScheduler.controls.picker.errors;\n      this.convertDelayHandler(data.unit);\n      this.emitData(data);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription && !this.subscription.closed) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: OperationSchedule): void {\n    if (value) {\n      this.fgOperationScheduler.patchValue({\n        picker: value.scheduledDate,\n        time: value.scheduledDate,\n        delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,\n        unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'\n      });\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();\n  }\n\n  validate(): ValidationErrors {\n    if (this.fgOperationScheduler.invalid) {\n      return {\n        ...this.fgOperationScheduler.controls.picker.errors,\n        ...this.fgOperationScheduler.controls.time.errors,\n        ...this.fgOperationScheduler.controls.delay.errors\n      };\n    }\n  }\n\n  registerOnValidatorChange(fn: any) {\n    this.onValidatorChanged = fn;\n  }\n\n  markAsTouched(): void {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  convertDelayHandler(unit: string) {\n    if (this.currentUnit === unit) {\n      return;\n    }\n\n    this.currentUnit = unit;\n    this.convertDelay(this.currentUnit);\n\n    // update validator on delay control to make sure that\n    // switching from minutes to seconds or vice versa does not harm validation.\n    this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);\n    this.fgOperationScheduler.controls.delay.updateValueAndValidity();\n  }\n\n  emitData(data: { delayInSeconds: number; picker: Date; time?: Date; delay?: number }) {\n    if (this.onValidatorChanged) {\n      this.onValidatorChanged();\n    }\n\n    if (data.picker && data.time) {\n      data.picker = this.combineDateAndTime(data.picker, data.time);\n    }\n\n    this.convertDelay(this.currentUnit);\n    data.delayInSeconds = this.delayInSeconds;\n\n    if (this.onChange) {\n      this.onChange({\n        delayInSeconds: data.delayInSeconds,\n        scheduledDate: data.picker\n      });\n    }\n  }\n\n  private convertDelay(unit: string) {\n    if (unit && this.fgOperationScheduler.controls.delay.value) {\n      this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;\n      if (unit === 'milliseconds') {\n        this.minDelay =\n          this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT\n            ? this.delayMilliseconds\n            : this.DELAY_MILLISECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;\n      } else {\n        this.delaySeconds = this.fgOperationScheduler.controls.delay.value;\n        this.minDelay =\n          this.delaySeconds > this.DELAY_SECONDS_DEFAULT\n            ? this.delaySeconds\n            : this.DELAY_SECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;\n      }\n    }\n  }\n\n  private combineDateAndTime(date: Date, time: Date) {\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    );\n  }\n\n  private dateValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      fControl.parent.get('time').setValue(date);\n      return date >= new Date()\n        ? null\n        : {\n            dateValidation: true\n          };\n    }\n    return { dateValidation: true };\n  }\n\n  private timeValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      const result =\n        date >= new Date()\n          ? null\n          : {\n              dateValidation: true\n            };\n\n      const picker = fControl.parent.get('picker');\n\n      if (result) {\n        picker.setErrors(result);\n        picker.markAsTouched();\n        return result;\n      }\n\n      if (picker && picker.errors && picker.errors.dateValidation) {\n        delete picker.errors.dateValidation;\n\n        if (isEmpty(picker.errors)) {\n          picker.setErrors(null);\n          return result;\n        }\n\n        picker.setErrors(picker.errors);\n      }\n      return result;\n    }\n    return { dateValidation: true };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { OperationSchedulerComponent } from './operation-scheduler.component';\n\n/**\n * This module provides components for scheduling bulk operations.\n */\n@NgModule({\n  imports: [CoreModule, ReactiveFormsModule, BsDatepickerModule, TimepickerModule],\n  providers: [],\n  declarations: [OperationSchedulerComponent],\n  entryComponents: [OperationSchedulerComponent],\n  exports: [OperationSchedulerComponent]\n})\nexport class BulkOperationSchedulerModule {}\n","import { Component, Input } from '@angular/core';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-operation-summary',\n  templateUrl: 'operation-summary.component.html'\n})\nexport class OperationSummaryComponent {\n  @Input()\n  name: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  set deviceQueryString(query: string) {\n    this.displayDeviceCount = true;\n    const filters = {\n      q: query || '',\n      pageSize: 1,\n      currentPage: 1,\n      withTotalPages: true\n    };\n    this.inventoryService\n      .list(filters)\n      .then((result: IResultList<IManagedObject>) => (this.deviceCount = result.paging.totalPages));\n  }\n\n  deviceCount: number = 0;\n  displayDeviceCount: boolean = false;\n\n  constructor(private inventoryService: InventoryService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { OperationSummaryComponent } from './operation-summary.component';\n\n/**\n * This module provides a component for displaying the summary of given bulk operation.\n */\n@NgModule({\n  imports: [CoreModule],\n  declarations: [OperationSummaryComponent],\n  entryComponents: [OperationSummaryComponent],\n  exports: [OperationSummaryComponent]\n})\nexport class OperationSummaryModule {}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { IOperation } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-single-operation-modal',\n  templateUrl: './single-operation-modal.component.html'\n})\nexport class SingleOperationModalComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = false;\n  @Input() readOnly: boolean = false;\n\n  constructor(public modalRef: BsModalRef) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { IOperation, OperationService } from '@c8y/client';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\n\n@Injectable()\nexport class SingleOperationDetailsService {\n  constructor(private operationService: OperationService, private modalService: BsModalService) {}\n\n  /**\n   * Opens a modal window with the details of given single operation.\n   * @param operationOrOperationId Operation's object or id.\n   * @param options Additional options:\n   * - `collapsed`: boolean - whether the details pane should be initially collapsed\n   * - `readOnly`: boolean - whether the details should be displayed in read-only mode\n   */\n  async openDetails(\n    operationOrOperationId: IOperation | string | number,\n    options?: { collapsed?: boolean; readOnly?: boolean }\n  ) {\n    const operation: IOperation = (operationOrOperationId as IOperation).id\n      ? (operationOrOperationId as IOperation)\n      : (await this.operationService.detail(operationOrOperationId)).data;\n    const initialState = { operation, ...options };\n\n    this.modalService.show(SingleOperationModalComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { operationStatusClasses, operationStatusIcons } from '@c8y/ngx-components';\nimport { SingleOperationDetailsService } from './single-operation-details.service';\n\n/**\n * Single operation component displays a single operation's status, description and creationTime.\n *\n * Example:\n *\n * ```html\n * <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n * ```\n */\n@Component({\n  selector: 'c8y-single-operation',\n  templateUrl: './single-operation.component.html'\n})\nexport class SingleOperationComponent {\n  @Input() operation: IOperation;\n\n  statusIcons: object;\n  statusClasses: object;\n\n  constructor(private singleOperationDetailsService: SingleOperationDetailsService) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n  }\n\n  openDetails() {\n    this.singleOperationDetailsService.openDetails(this.operation);\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { assign, get } from 'lodash-es';\nimport { IOperation, OperationService, OperationStatus } from '@c8y/client';\nimport {\n  AlertService,\n  ListItemComponent,\n  Tab,\n  gettext,\n  operationStatusClasses,\n  operationStatusIcons\n} from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-single-operation-list-item',\n  templateUrl: './single-operation-list-item.component.html'\n})\nexport class SingleOperationListItemComponent implements OnInit {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = true;\n  @Input() readOnly: boolean = false;\n\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  @ViewChild('details', { static: true }) detailsTabTemplate: any;\n  @ViewChild('historyOfChanges', { static: true }) historyOfChangesTabTemplate: any;\n\n  tabs: Tab[] = [];\n  selectedTab: Tab;\n  statusIcons = operationStatusIcons;\n  statusClasses = operationStatusClasses;\n  OperationStatus = OperationStatus;\n\n  get displayedDescription() {\n    const commandText = get(this.operation, 'c8y_Command.text');\n    const opDescription = get(this.operation, 'description');\n    return commandText || opDescription || gettext('(no command text or description available)');\n  }\n\n  constructor(\n    private router: Router,\n    private operationService: OperationService,\n    private alertService: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        icon: 'asterisk',\n        template: this.detailsTabTemplate\n      } as Tab,\n      {\n        label: gettext('History of changes'),\n        icon: 'archive',\n        template: this.historyOfChangesTabTemplate\n      } as Tab\n    ];\n    this.selectedTab = this.tabs[0];\n  }\n\n  scheduleAsBulkOperation() {\n    this.router.navigateByUrl(`/devicecontrol/single/create-bulk/${this.operation.id}`);\n  }\n\n  async cancel() {\n    try {\n      const operationAfterUpdate = (await this.operationService.update({\n        id: this.operation.id,\n        status: OperationStatus.FAILED,\n        failureReason: gettext('Operation cancelled by user.')\n      })).data;\n      assign(this.operation, operationAfterUpdate);\n      this.alertService.success(gettext('Operation cancelled.'));\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { BulkOperationDetailsService } from '@c8y/ngx-components/operations/bulk-operations-list';\n\n@Component({\n  selector: 'c8y-single-operation-details',\n  templateUrl: './single-operation-details.component.html'\n})\nexport class SingleOperationDetailsComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() readOnly: boolean = false;\n\n  constructor(private bulkOperationDetailsService: BulkOperationDetailsService) {}\n\n  openBulkOperationDetails() {\n    this.bulkOperationDetailsService.openDetails(this.operation.bulkOperationId);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule } from '@c8y/ngx-components';\nimport { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\nimport { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';\n\nimport { SingleOperationDetailsService } from './single-operation-details.service';\nimport { SingleOperationComponent } from './single-operation.component';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\nimport { SingleOperationListItemComponent } from './single-operation-list-item.component';\nimport { SingleOperationDetailsComponent } from './single-operation-details.component';\n\n/**\n * This module allows to display details of a single operation in a modal.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    CollapseModule,\n    BulkOperationsListModule,\n    BulkOperationsServiceModule\n  ],\n  providers: [SingleOperationDetailsService],\n  declarations: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  entryComponents: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  exports: [SingleOperationComponent]\n})\nexport class SingleOperationDetailsModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { IStatusOption } from './status-option.model';\n\n@Component({\n  selector: 'c8y-status-filter',\n  templateUrl: './status-filter.component.html',\n  host: { class: 'btn-group' }\n})\nexport class StatusFilterComponent {\n  statusOptions: Array<{ selected: boolean; option: IStatusOption }> = [];\n\n  /** List of filter options to be displayed */\n  @Input() set options(options: IStatusOption[]) {\n    this.statusOptions = (options || []).map(option => ({ selected: false, option }));\n  }\n\n  /**\n   * Allows multiple options to be active simultaneosly.\n   */\n  @Input('multiple') set _multiple(multiple: boolean) {\n    this.multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Display the filter as a small button group */\n  @Input('small') set _small(small: boolean) {\n    this.small = coerceBooleanProperty(small);\n  }\n\n  @HostBinding('class.btn-group-sm') get displaySmall() {\n    return this.small;\n  }\n\n  @Output() onFilterChanged: EventEmitter<IStatusOption[]> = new EventEmitter();\n\n  isAllButtonSelected: boolean = true;\n\n  private multiple: boolean;\n  private small: boolean;\n\n  changeFilter(option: { selected: boolean; option: IStatusOption }) {\n    this.isAllButtonSelected = false;\n    let emitNeeded: boolean = false;\n\n    if (this.multiple) {\n      option.selected = !option.selected;\n      emitNeeded = true;\n    } else if (!option.selected) {\n      option.selected = true;\n      this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));\n      emitNeeded = true;\n    }\n\n    if (emitNeeded) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  removeFilter() {\n    this.isAllButtonSelected = true;\n    this.statusOptions.forEach(op => (op.selected = false));\n\n    this.emitSelectedOptions();\n  }\n\n  /**\n   * Allows the filter to be initalliy displayed with some preset filters.\n   *\n   * @param filters An `IStatusOption` array defining filter options to be preset.\n   * @param emit  (optional) If `true` component will emit `onFilterChanged` event.\n   */\n  preset(filters: IStatusOption[], emit: boolean = true) {\n    let firstSelected: boolean = false;\n\n    this.statusOptions.forEach(option => (option.selected = false));\n\n    this.statusOptions\n      .filter(option => (filters || []).map(o => o.label).includes(option.option.label))\n      .filter(() => {\n        // only first option passed will be set in single selection mode\n        const include: boolean = this.multiple || !firstSelected;\n        if (include) {\n          firstSelected = true;\n        }\n\n        return include;\n      })\n      .forEach(option => (option.selected = true));\n\n    this.isAllButtonSelected = !(filters && filters.length);\n\n    if (emit) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  reset() {\n    this.removeFilter();\n  }\n\n  activeFilters(): IStatusOption[] {\n    return this.statusOptions.filter(option => option.selected).map(option => option.option);\n  }\n\n  isFilterApplied(): boolean {\n    return this.statusOptions.some(option => option.selected);\n  }\n\n  private emitSelectedOptions() {\n    this.onFilterChanged.emit(\n      this.statusOptions.filter(option => option.selected).map(option => option.option)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { StatusFilterComponent } from './status-filter.component';\n\n/**\n * This module provides a component for selecting status filter.\n */\n@NgModule({\n  imports: [CoreModule, TooltipModule],\n  declarations: [StatusFilterComponent],\n  entryComponents: [StatusFilterComponent],\n  exports: [StatusFilterComponent]\n})\nexport class StatusFilterModule {}\n","import { Location } from '@angular/common';\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { has, isUndefined } from 'lodash-es';\nimport { Subject } from 'rxjs';\n\nimport {\n  IdReference,\n  IManagedObject,\n  InventoryService,\n  IOperation,\n  IOperationBulk,\n  IResult,\n  OperationBulkService,\n  OperationService\n} from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\n\nimport { OperationDetails } from './operation-details.model';\nimport { OperationType } from './operation-type.model';\nimport { BulkOperationType } from './bulk-operation.model';\n\nexport const baseUrl = 'devicecontrol/bulk/creation/';\nexport const HOOK_LIST_BULK_TYPE = new InjectionToken<OperationType[]>('LIST_BULK_TYPE');\nexport const C8Y_BULK_TYPES: OperationType[] = [\n  {\n    type: BulkOperationType.CONFIGURATION,\n    c8yIcon: 'cogs',\n    name: gettext('Configuration update'),\n    path: `${baseUrl}configuration`,\n    component: undefined,\n    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.FIRMWARE,\n    c8yIcon: 'c8y-firmware',\n    name: gettext('Firmware update'),\n    path: `${baseUrl}firmware`,\n    component: undefined,\n    fragments: ['c8y_Firmware'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.SOFTWARE,\n    c8yIcon: 'c8y-tools',\n    name: gettext('Software update'),\n    path: `${baseUrl}software`,\n    component: undefined,\n    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.DEVICE_PROFILE,\n    c8yIcon: 'c8y-device-profile',\n    name: gettext('Apply device profile'),\n    path: `${baseUrl}device-profile`,\n    component: undefined,\n    fragments: ['c8y_DeviceProfile'],\n    selected: false\n  }\n];\nexport const C8Y_BULK_TYPE_FRAGMENTS: string[] = C8Y_BULK_TYPES.reduce(\n  (flattened, current) => flattened.concat(current.fragments),\n  []\n);\n\n@Injectable()\nexport class BulkOperationsService {\n  readonly DD_LOW_COUNT: number = 10;\n  firmwareId: Subject<IdReference> = new Subject<IdReference>();\n\n  constructor(\n    private operationBulkService: OperationBulkService,\n    private operationService: OperationService,\n    private inventoryService: InventoryService,\n    private location: Location,\n\n    @Inject(HOOK_LIST_BULK_TYPE) private bulkTypes: OperationType[]\n  ) {\n    if (bulkTypes && bulkTypes.length > 0) {\n      this.bulkTypes = bulkTypes.map(type => {\n        if (isUndefined(type.selected)) {\n          type.selected = false;\n        }\n        return type;\n      });\n    }\n  }\n\n  getBulkOperations(customFilter = {}) {\n    const filter = {\n      withTotalPages: true,\n      withDeleted: true,\n      pageSize: 50,\n      ...customFilter\n    };\n\n    return this.operationBulkService.list(filter);\n  }\n\n  getBulkOperationById(bulkOperationId: string | number) {\n    return this.operationBulkService.detail(bulkOperationId);\n  }\n\n  createBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.create(bulkOperation);\n  }\n\n  deleteBulkOperation(bulkOperationId) {\n    return this.operationBulkService.delete(bulkOperationId);\n  }\n\n  updateBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.update(bulkOperation);\n  }\n\n  getOperation(id: string): Promise<IResult<IOperation>> {\n    return this.operationService.detail(id);\n  }\n\n  returnToBulkOperationOverview() {\n    this.location.back();\n  }\n\n  setBulkTypes(list: OperationType[]) {\n    this.bulkTypes = list;\n  }\n\n  getBulkTypes(): OperationType[] {\n    return this.bulkTypes;\n  }\n\n  setFirmwareId(id: IdReference) {\n    this.firmwareId.next(id);\n  }\n\n  createGroup(deviceQueryDataString: string) {\n    const dynamicGroup: Partial<IManagedObject> = {\n      name: 'Bulk operations group',\n      type: 'c8y_DynamicGroup',\n      c8y_IsDynamicGroup: { invisible: {} },\n      c8y_DeviceQueryString: deviceQueryDataString\n    };\n\n    return this.inventoryService.create(dynamicGroup);\n  }\n\n  async scheduleBulkOperation(deviceQueryString: string, details: OperationDetails) {\n    const dynamicGroup = await this.createGroup(deviceQueryString);\n\n    const bulkOperation: IOperationBulk = {\n      groupId: dynamicGroup.data.id,\n      operationPrototype: details.prototype,\n      creationRamp: details.schedule.delayInSeconds,\n      startDate: details.schedule.scheduledDate.toISOString(),\n      note: details.note\n    };\n\n    await this.createBulkOperation(bulkOperation);\n  }\n\n  getSingleOperationsByStatus(status, bulkOperationId) {\n    const filter = {\n      withTotalPages: true,\n      bulkOperationId,\n      status: (status && status.toUpperCase()) || ''\n    };\n\n    return this.operationService.list(filter);\n  }\n\n  createSingleOperation(operation: IOperation) {\n    return this.operationService.create(operation);\n  }\n\n  updateSingleOperation(partialUpdateObject: Partial<IOperation>) {\n    return this.operationService.update(partialUpdateObject);\n  }\n\n  getManagedObject(deviceId: IdReference) {\n    return this.inventoryService.detail(deviceId);\n  }\n\n  retrieveBulkOperationType(operation: IOperation): BulkOperationType {\n    let type: BulkOperationType;\n\n    C8Y_BULK_TYPES.some(t => {\n      if (t.fragments.some(fragment => has(operation, fragment))) {\n        type = t.type;\n        return true;\n      }\n    });\n\n    return type;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport {\n  BulkOperationsService,\n  HOOK_LIST_BULK_TYPE,\n  C8Y_BULK_TYPES\n} from './bulk-operations.service';\n\n/**\n * This module provides a shared bulk operations service.\n */\n@NgModule({\n  imports: [],\n  providers: [BulkOperationsService, { provide: HOOK_LIST_BULK_TYPE, useValue: C8Y_BULK_TYPES }]\n})\nexport class BulkOperationsServiceModule {}\n","import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationDetailsService: BulkOperationDetailsService,\n    public modalRef: BsModalRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-modal',\n  templateUrl: 'bulk-operations-modal.component.html'\n})\nexport class BulkOperationsModalComponent {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  showComponent: boolean = false;\n  constructor(private bsModalRef: BsModalRef, private resolver: ComponentFactoryResolver) {}\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  createComponent(item: OperationType) {\n    if (item && item.component) {\n      this.showComponent = true;\n      const factory = this.resolver.resolveComponentFactory(item.component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsModalComponent } from './bulk-operations-modal.component';\n\n@Injectable()\nexport class BulkOperationModalsService {\n  private bsModalRef: BsModalRef;\n\n  constructor(private bsModalService: BsModalService) {}\n\n  showNewBulkOperationModal() {\n    this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {\n      backdrop: 'static',\n      class: 'modal-sm'\n    });\n  }\n\n  hideNewBulkOperationModal() {\n    if (this.bsModalRef) {\n      this.bsModalRef.hide();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: IStatusOption[] = [\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatus: [OperationBulkGeneralStatus.SCHEDULED],\n    iconClass: 'fa fa-calendar text-info'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatus: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    iconClass: 'fa fa-refresh text-primary'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatus: [OperationBulkGeneralStatus.CANCELED],\n    iconClass: 'fa fa-ban text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatus: [OperationBulkGeneralStatus.FAILED],\n    iconClass: 'fa fa-exclamation-triangle text-danger'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],\n    iconClass: 'fa fa-check text-success'\n  }\n];\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.iconClass = this.getIconClass();\n      this.setProgressBar();\n    }\n  }\n\n  getIconClass() {\n    return this.bulkOperationStatusOptions.find(statusOption =>\n      statusOption.generalStatus.includes(this.bulkOperation.generalStatus)\n    ).iconClass;\n  }\n\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to SUCCESSFUL'),\n        gettext(\n          'You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  allOperationsCreated() {\n    return (\n      this.bulkOperation.progress.all ===\n      this.bulkOperation.progress.executing +\n        this.bulkOperation.progress.failed +\n        this.bulkOperation.progress.pending +\n        this.bulkOperation.progress.successful\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { Component, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { IOperationBulk, IResultList } from '@c8y/client';\nimport { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';\nimport { flatten } from 'lodash-es';\nimport { BehaviorSubject, Observable, combineLatest, pipe } from 'rxjs';\nimport { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n@Component({\n  selector: 'c8y-bulk-operations',\n  templateUrl: './bulk-operations-list.component.html',\n  providers: [OperationBulkRealtimeService]\n})\nexport class BulkOperationsListComponent {\n  selectedTypeFilters = this.getTypeFilters();\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n\n  filterPipe;\n  refreshLoading: boolean = false;\n  statusFilter$: BehaviorSubject<IStatusOption[]> = new BehaviorSubject(null);\n  typeFilter$: BehaviorSubject<OperationType[]> = new BehaviorSubject(null);\n  timeFilter$: BehaviorSubject<any> = new BehaviorSubject(null);\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  @ViewChildren(BulkOperationListItemComponent) listItems: QueryList<\n    BulkOperationListItemComponent\n  >;\n  @ViewChild('statusFilter', { static: true }) statusFilter: StatusFilterComponent;\n  @ViewChild(DatePickerComponent, { static: true }) datePicker: DatePickerComponent;\n\n  bulkOperations$: Observable<IResultList<IOperationBulk>> = combineLatest(\n    this.statusFilter$,\n    this.timeFilter$,\n    this.typeFilter$,\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.refreshLoading = true;\n    }),\n    switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)),\n    withLatestFrom(this.typeFilter$),\n    map(([result, typeFilter]: [IResultList<IOperationBulk>, OperationType[]]) => {\n      this.filterPipe = pipe(map((data: []) => this.filterByType(data, typeFilter)));\n      return { ...result, data: this.filterByType(result.data, typeFilter) };\n    }),\n    tap(() => {\n      this.refreshLoading = false;\n    }),\n    shareReplay(1)\n  );\n\n  private allFilterFragments: string[];\n\n  constructor(\n    public realtime: OperationBulkRealtimeService,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {\n    this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());\n  }\n\n  filterByType(bulkOperations: IOperationBulk[], typeFilter) {\n    const flattenedFragments: string[] = this.flattenFilterFragments(typeFilter);\n    if (\n      // return data unfiltered if no filters selected...\n      !flattenedFragments.length ||\n      // ...or when all filters are selected\n      this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))\n    ) {\n      return bulkOperations;\n    }\n\n    const filteredData = bulkOperations.filter(item => {\n      return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));\n    });\n\n    return filteredData;\n  }\n\n  resetFilter() {\n    this.statusFilter$.next(null);\n    this.timeFilter$.next(null);\n    this.typeFilter$.next(null);\n\n    this.datePicker.clearFilter();\n    this.selectedTypeFilters = this.getTypeFilters();\n    this.statusFilter.statusOptions.map(option => {\n      option.selected = false;\n      return option;\n    });\n  }\n\n  isFilterApplied() {\n    return (\n      this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue()\n    );\n  }\n\n  filter(statusFilters, timeFilter) {\n    const status =\n      statusFilters && statusFilters.length > 0\n        ? {\n            generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))\n          }\n        : {};\n\n    const time = timeFilter\n      ? {\n          ...(timeFilter.dateFrom && {\n            dateFrom: timeFilter.dateFrom.toISOString()\n          }),\n          ...(timeFilter.dateTo && {\n            dateTo: timeFilter.dateTo.toISOString()\n          })\n        }\n      : {};\n    return this.getBulkOperations({ ...status, ...time });\n  }\n\n  getBulkOperations(filter?) {\n    return this.bulkOperationsService.getBulkOperations(filter);\n  }\n\n  getTypeFilters() {\n    return this.bulkOperationsService.getBulkTypes();\n  }\n\n  addBulkOperation() {\n    this.bulkOperationModalsService.showNewBulkOperationModal();\n  }\n\n  openFailedOperation(failedParentId) {\n    this.listItems.forEach(item => {\n      if (item.bulkOperation.id === failedParentId) {\n        item.listItem.collapsed = false;\n        item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    });\n  }\n\n  compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number {\n    return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();\n  }\n\n  private flattenFilterFragments(filters: OperationType[]): string[] {\n    return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { gettext, Tab } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-bulk-operation-details-tabs',\n  templateUrl: './bulk-operation-details-tabs.component.html'\n})\nexport class BulkOperationDetailsTabsComponent implements OnInit {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('details', { static: true }) detailsTemplate: any;\n  @ViewChild('audit', { static: true }) auditTemplate: any;\n\n  tabs: Tab[] = [];\n  template: ViewContainerRef;\n\n  ngOnInit(): void {\n    this.template = this.detailsTemplate;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        path: null,\n        icon: 'asterisk',\n        template: this.detailsTemplate\n      },\n      {\n        label: gettext('History of changes'),\n        path: null,\n        icon: 'archive',\n        template: this.auditTemplate\n      }\n    ];\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, IOperationBulk } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-bulk-operation-details',\n  templateUrl: './bulk-operation-details.component.html'\n})\nexport class BulkOperationDetailsComponent {\n  allFilterIsSelected: boolean = false;\n  collapsed: boolean;\n  device: IManagedObject;\n\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  scrollToRetriedFromOperation(failedOperationId) {\n    this.showFailedOperation.emit(failedOperationId);\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\n\nexport const SINGLE_OP_STATUS_NAMES = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful'),\n  ALL: gettext('All')\n};\n\nexport const SINGLE_OP_STATUS_PROPERTIES = [\n  {\n    label: SINGLE_OP_STATUS_NAMES.PENDING,\n    iconClass: 'fa fw fa-clock-o text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.EXECUTING,\n    iconClass: 'fa fw fa-refresh text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,\n    iconClass: 'fa fw fa-check-circle text-success',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.FAILED,\n    iconClass: 'fa fw fa-exclamation-circle text-danger',\n    selected: false\n  }\n];\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperation, IOperationBulk, IResultList } from '@c8y/client';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n\n      this.statusFilter.preset(\n        typeFilter === this.singleOperationStatusNames.ALL\n          ? []\n          : [{ label: typeFilter } as IStatusOption]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.singleOperationStatusNames.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.singleOperationStatusNames.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.SUCCESSFUL;\n    }\n\n    return this.singleOperationStatusNames.ALL;\n  }\n\n  async getOperationsByStatus(filter: IStatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport {\n  BulkOperationsService,\n  C8Y_BULK_TYPE_FRAGMENTS\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { omit } from 'lodash-es';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  showIfTextTruncated = false;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  iconClass: string;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.device = await this.getDeviceMO(this.operation.deviceId);\n  }\n\n  ngAfterViewInit() {\n    this.isTextTruncated();\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.bulkOperationsService.createSingleOperation(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n\n  getIconClass() {\n    return this.singleOperationsStatusProperties.find(\n      operationProperties => operationProperties.label.toUpperCase() === this.operation.status\n    ).iconClass;\n  }\n\n  private async getDeviceMO(deviceId) {\n    const inventoryMO = await this.bulkOperationsService.getManagedObject(deviceId);\n    if (inventoryMO) {\n      return inventoryMO.data;\n    }\n  }\n\n  private isTextTruncated() {\n    if (this.operation.failureReason) {\n      const el = this.failureReasonRef.nativeElement;\n      this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;\n    }\n  }\n}\n","import { Component, EventEmitter, Output, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from '../modals/bulk-operation-modals.service';\n\n@Component({\n  selector: 'c8y-bulk-operation-type-list',\n  templateUrl: './bulk-operation-type-list.component.html'\n})\nexport class BulkOperationTypeListComponent implements OnInit {\n  @Output() onCustomType: EventEmitter<OperationType> = new EventEmitter();\n  bulkList: OperationType[] = [];\n\n  constructor(\n    private router: Router,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {}\n\n  ngOnInit() {\n    this.bulkList = this.bulkOperationsService.getBulkTypes();\n  }\n\n  handleClick(item: OperationType) {\n    if (item.path) {\n      this.bulkOperationModalsService.hideNewBulkOperationModal();\n      this.router.navigateByUrl(item.path);\n    } else if (item.component) {\n      this.onCustomType.emit(item);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, Route } from '@c8y/ngx-components';\nimport { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\nimport { BulkOperationsListComponent } from './bulk-operations-list.component';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BulkOperationDetailsTabsComponent } from './bulk-operation-details-tabs.component';\nimport { BulkOperationDetailsComponent } from './bulk-operation-details.component';\nimport { SingleOperationsListComponent } from './single-operations-list.component';\nimport { SingleOperationItemComponent } from './single-operation-item.component';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\nimport { BulkOperationTypeListComponent } from './type-list/bulk-operation-type-list.component';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationsModalComponent } from './modals/bulk-operations-modal.component';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\n\nexport const bulkOperationListRoutes: Route[] = [\n  {\n    path: 'devicecontrol/bulk',\n    component: BulkOperationsListComponent\n  }\n];\n\n/**\n * This module allows for displaying the list of bulk operations and their details.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    StatusFilterModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule,\n    RouterModule.forChild(bulkOperationListRoutes)\n  ],\n  providers: [BulkOperationDetailsService, BulkOperationModalsService],\n  declarations: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  entryComponents: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  exports: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ]\n})\nexport class BulkOperationsListModule {}\n"]}