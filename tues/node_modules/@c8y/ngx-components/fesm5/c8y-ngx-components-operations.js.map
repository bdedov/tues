{"version":3,"file":"c8y-ngx-components-operations.js","sources":["ng://@c8y/ngx-components/operations/details/operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk/custom-step.directive.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operation-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/base-stepper.component.ts","ng://@c8y/ngx-components/operations/bulk/create-from-single/bulk-operation-from-single.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/bulk-operations-stepper-container.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/device-profile-update-stepper/select-device-profile-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/select-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/firmware-update-stepper/version-or-patch.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/confirm-software-selection-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/software-update-stepper/select-software-step.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-configuration.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-device-profile.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-firmware.component.ts","ng://@c8y/ngx-components/operations/bulk/creation/stepper-bulk-type-software.component.ts","ng://@c8y/ngx-components/operations/device-selector/device-selector.component.ts","ng://@c8y/ngx-components/operations/factories/tabs.factory.ts","ng://@c8y/ngx-components/operations/operations.module.ts","ng://@c8y/ngx-components/operations/bulk-operation-scheduler/operation-scheduler.component.ts","ng://@c8y/ngx-components/operations/bulk-operation-scheduler/bulk-operation-scheduler.module.ts","ng://@c8y/ngx-components/operations/operation-summary/operation-summary.component.ts","ng://@c8y/ngx-components/operations/operation-summary/operation-summary.module.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-modal.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.service.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.component.ts","ng://@c8y/ngx-components/operations/single-operation-details/single-operation-details.module.ts","ng://@c8y/ngx-components/operations/status-filter/status-filter.component.ts","ng://@c8y/ngx-components/operations/status-filter/status-filter.module.ts","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operation.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operations.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-service/bulk-operations-service.module.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-wrapper.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operation-modals.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-reschedule-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details-tabs.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/type-list/bulk-operation-type-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.module.ts","ng://@c8y/ngx-components/operations/c8y-ngx-components-operations.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormGroupConfig, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport {\n  BulkOperationType,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-operation-details',\n  templateUrl: 'operation-details.component.html'\n})\nexport class OperationDetailsComponent implements OnInit {\n  @Input()\n  set bulkOperationType(bulkOperationType: BulkOperationType) {\n    this.titlePlaceholder = get(this.placeholders[bulkOperationType], 'title');\n    this.descriptionPlaceholder = get(this.placeholders[bulkOperationType], 'description');\n  }\n\n  titlePlaceholder: string = gettext('e.g. Reset factory settings');\n  descriptionPlaceholder: string = gettext(\n    'e.g. Reset factory settings of all devices of model XYZ'\n  );\n  fgOperationDescription: FormGroup;\n\n  private placeholders: { [key in BulkOperationType]: { title: string; description: string } } = {\n    [BulkOperationType.SOFTWARE]: {\n      title: gettext('e.g. Cloud connectivity software'),\n      description: gettext(\n        'e.g. Cloud connectivity software applied to devices with type c8y_Linux'\n      )\n    },\n    [BulkOperationType.FIRMWARE]: {\n      title: gettext('e.g. Firmware for hardware revision b'),\n      description: gettext(\n        'e.g. Firmware for hardware revision b applied to devices with type c8y_Linux'\n      )\n    },\n    [BulkOperationType.CONFIGURATION]: {\n      title: gettext('e.g. Host configuration c8y_Linux'),\n      description: gettext('e.g. Host configuration applied to devices with type c8y_Linux')\n    },\n    [BulkOperationType.DEVICE_PROFILE]: {\n      title: gettext('e.g. Device profile for c8y_Linux devices'),\n      description: gettext('e.g. Device profile applied to devices with type c8y_Linux')\n    }\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    const config: FormGroupConfig<OperationDetails> = {\n      description: ['', Validators.required],\n      note: [''],\n      schedule: []\n    };\n\n    this.fgOperationDescription = this.formBuilder.group(config);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Directive, Input, TemplateRef } from '@angular/core';\nimport { C8yStepper } from '@c8y/ngx-components';\n\n@Directive({ selector: '[customStep]' })\nexport class CustomStep {\n  @Input('customStep') label: string;\n  @Input('customStepCompleted') completed: string;\n  @Input('customStepButtonsDisabled') buttonsDisabled: boolean = false;\n  constructor(public templateRef: TemplateRef<any>) {}\n  @Input('customStepOnNext') onNext: (event: { stepper: C8yStepper; step: CdkStep }) => void = ({\n    stepper,\n    step\n  }) => {\n    // steps without own `onNext` handler, e.g. preview steps need to mark themselves as `completed`,\n    // otherwise stepper will not allow to move forth from them as soon as the user navigates back\n    // and the `c8y-stepper-buttons` component marks the step as incomplete.\n    step.completed = true;\n    stepper.next();\n  };\n}\n","import { CdkStep, StepperSelectionEvent } from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { AlertService, C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { OperationDetailsComponent } from '../../details/operation-details.component';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { CustomStep } from '../custom-step.directive';\nimport {\n  OperationDetails,\n  BulkOperationType,\n  BulkOperationsService\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operation-stepper',\n  templateUrl: 'bulk-operation-stepper.component.html'\n})\nexport class BulkOperationStepper implements OnDestroy {\n  @Output() selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter();\n  @ContentChildren(CustomStep) customSteps: QueryList<CustomStep>;\n  @ViewChild(C8yStepper, { static: false })\n  stepper: C8yStepper;\n  @ViewChild(OperationDetailsComponent, { static: false })\n  operationDetailsComponent: OperationDetailsComponent;\n\n  steps: CustomStep[] = [];\n  showStepper: boolean = false;\n  showButtons: boolean = false;\n  pendingStatus: boolean;\n  stepperButtonsLabels = { custom: gettext('Schedule bulk operation') };\n  deviceTypes$: Observable<string[]>;\n  deviceQueryString: string;\n  bulkOperationType: BulkOperationType;\n  scheduleData: OperationSchedule;\n  operationDetailsForm: FormGroup;\n  operationDetails: OperationDetails;\n  retrieveOperationDetails: () => OperationDetails | Promise<OperationDetails>;\n\n  private deviceTypesSubject$: Subject<string[]> = new Subject();\n  private endSubscriptions: Subject<void> = new Subject();\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {\n    this.deviceTypes$ = this.deviceTypesSubject$.asObservable();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      // wait for the next event loop turn as `steps` has already been checked in this CD cycle\n      this.steps = this.customSteps.toArray();\n      this.showStepper = true;\n      setTimeout(() => {\n        // postpone rendering of buttons for custom steps to the point where custom steps have already been rendered\n        this.showButtons = true;\n        if (this.stepper) {\n          this.stepper.selectionChange.pipe(takeUntil(this.endSubscriptions)).subscribe(event => {\n            this.selectionChange.next(event);\n          });\n          this.operationDetailsForm = this.operationDetailsComponent.fgOperationDescription;\n        }\n      });\n    });\n  }\n\n  changeDeviceTypes(deviceTypes: string | string[]) {\n    if (deviceTypes) {\n      this.deviceTypesSubject$.next(Array.isArray(deviceTypes) ? deviceTypes : [deviceTypes]);\n    } else {\n      this.deviceTypesSubject$.next([]);\n    }\n  }\n\n  async confirmDeviceSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    if (!this.deviceQueryString) {\n      try {\n        await this.modal.confirm(\n          gettext('All devices selected'),\n          gettext(\n            'You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?'\n          ),\n          Status.WARNING,\n          { ok: gettext('Schedule for all devices'), cancel: gettext('Cancel and select devices') }\n        );\n        $event.step.completed = true;\n        $event.stepper.next();\n        this.operationDetails = this.retrieveOperationDetails\n          ? await this.retrieveOperationDetails()\n          : undefined;\n      } catch (ex) {\n        // Intentionally empty\n      }\n    } else {\n      $event.step.completed = true;\n      $event.stepper.next();\n      this.operationDetails = this.retrieveOperationDetails\n        ? await this.retrieveOperationDetails()\n        : undefined;\n    }\n\n    this.bulkOperationType = this.bulkOperationService.retrieveBulkOperationType(\n      get(this.operationDetails, 'prototype')\n    );\n    if (\n      this.operationDetailsForm &&\n      get(this.operationDetailsForm, 'controls.description.pristine') &&\n      this.operationDetails\n    ) {\n      this.operationDetailsForm.patchValue({\n        description: get(this.operationDetails, 'prototype.description')\n      });\n    }\n  }\n\n  cancel() {\n    this.close();\n  }\n\n  async scheduleBulkOperation() {\n    this.pendingStatus = true;\n\n    try {\n      this.operationDetails.prototype.description = get(\n        this.operationDetailsForm,\n        'controls.description.value'\n      );\n      this.operationDetails.note = get(this.operationDetailsForm, 'controls.note.value');\n      this.operationDetails.schedule = get(this.operationDetailsForm, 'controls.schedule.value');\n\n      await this.bulkOperationService.scheduleBulkOperation(\n        this.deviceQueryString,\n        this.operationDetails\n      );\n      this.alert.success(gettext('New bulk operation scheduled.'));\n      this.close();\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n\n    this.pendingStatus = false;\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  private close() {\n    this.stepper.reset();\n    this.bulkOperationService.returnToBulkOperationOverview();\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IManagedObject } from '@c8y/client';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { BulkOperationStepper } from './creation/bulk-operation-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\n\nexport abstract class BaseStepperComponent implements OnInit, OnDestroy {\n  @ViewChild(BulkOperationStepper, { static: true }) operationStepper: BulkOperationStepper;\n\n  set deviceTypes(deviceTypes: string | string[]) {\n    if (this.operationStepper) {\n      this.operationStepper.changeDeviceTypes(deviceTypes);\n    }\n  }\n\n  /**\n   * A map holding step data. The order of properties need to match the order of\n   * the steps they hold data for as the index of the property is used to clear\n   * step data when navigating forth after changing data at an earlier step.\n   */\n  stepData: { [key: string]: IManagedObject } = {};\n\n  private endSubscriptions: Subject<void> = new Subject();\n\n  ngOnInit(): void {\n    this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);\n\n    this.operationStepper.selectionChange\n      .pipe(takeUntil(this.endSubscriptions))\n      .subscribe(this.onSelectionChange.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n    this.endSubscriptions.complete();\n  }\n\n  protected abstract retrieveOperationPrototype(): OperationDetails | Promise<OperationDetails>;\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    const { selectedIndex, previouslySelectedIndex } = event;\n    if (\n      selectedIndex > previouslySelectedIndex &&\n      selectedIndex < Object.keys(this.stepData).length\n    ) {\n      // TODO clear step data only if previous step is \"dirty\"\n      this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;\n    }\n  }\n\n  private getStepDataKeyByIndex(index: number): string {\n    return Object.keys(this.stepData)[index];\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IOperation } from '@c8y/client';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'bulk-operation-from-single',\n  templateUrl: 'bulk-operation-from-single.component.html'\n})\nexport class BulkOperationFromSingleComponent extends BaseStepperComponent implements OnInit {\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOperationService: BulkOperationsService\n  ) {\n    super();\n  }\n\n  protected async retrieveOperationPrototype(): Promise<OperationDetails> {\n    const prototype: IOperation = (await this.bulkOperationService.getOperation(\n      this.activatedRoute.snapshot.params.operationId\n    )).data;\n\n    return {\n      description: get(prototype, 'description'),\n      prototype\n    };\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewContainerRef,\n  ViewChild,\n  ComponentFactoryResolver,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'bulk-operations-stepper-container',\n  templateUrl: 'bulk-operations-stepper-container.component.html'\n})\nexport class BulkOperationsStepperContainerComponent implements OnInit {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  bulkOperationType: string;\n\n  private component: any;\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private bulkOpsService: BulkOperationsService,\n    private resolver: ComponentFactoryResolver,\n    private changeDetector: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(params => {\n      if (params && params.type) {\n        this.bulkOperationType = params.type;\n\n        this.component = this.bulkOpsService\n          .getBulkTypes()\n          .find(element => element.path.includes(this.bulkOperationType)).component;\n\n        this.changeDetector.detectChanges();\n        this.createComponent(this.component);\n      }\n    });\n  }\n\n  private createComponent(component) {\n    if (component) {\n      const factory = this.resolver.resolveComponentFactory(component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { get } from 'lodash-es';\nimport { IManagedObject } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'c8y-confirm-device-profile-selection-step',\n  templateUrl: 'confirm-device-profile-selection-step.component.html'\n})\nexport class ConfirmDeviceProfileSelectionStepComponent {\n  @Input() selectedDeviceProfile: IManagedObject;\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n\n  constructor(\n    private translate: TranslateService\n  ) {}\n\n  get softwares() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'software'], []);\n  }\n\n  get configurations() {\n    return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'configuration'], []);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n\n  }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { Observable, BehaviorSubject, combineLatest, Subscription, from } from 'rxjs';\nimport { switchMap, shareReplay, debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { property, isEqual, uniqWith, get } from 'lodash-es';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DeviceProfileService } from '@c8y/ngx-components/device-profile';\n\n@Component({\n  selector: 'c8y-select-device-profile-step',\n  templateUrl: 'select-device-profile-step.component.html'\n})\nexport class SelectDeviceProfileStepComponent {\n  @Output() deviceProfile: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  readonly DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  deviceProfile$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getDeviceProfiles(name, deviceType)),\n    shareReplay(1)\n  );\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private deviceProfileService: DeviceProfileService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(this.deviceProfileService.getDeviceProfiles(query));\n        })\n      )\n      .subscribe( ({ data }) => {\n        this.deviceTypes = uniqWith(\n          data.map(val => ({ name: val.c8y_Filter.type })).filter(val => val.name),\n          isEqual\n        );\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  selectDeviceProfile(deviceProfile: IManagedObject) {\n    this.deviceProfile.emit(deviceProfile);\n  }\n\n  getDeviceTypeTitle(deviceProfile: IManagedObject): string {\n    return get(\n      deviceProfile,\n      'c8y_Filter.type',\n      this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));\n  }\n\n  private getDeviceProfiles(name?: string, deviceType?: string) {\n    const query: any = deviceType ? { 'c8y_Filter.type': deviceType } : {};\n    if (name) {\n      query.name = `*${name}*`;\n    }\n    return this.deviceProfileService.getDeviceProfiles(query);\n  }\n\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { gettext } from '@c8y/ngx-components';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { property, get } from 'lodash-es';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-select-firmware-step',\n  templateUrl: 'select-firmware.component.html'\n})\nexport class SelectFirmwareComponent {\n  @Input() selected: IManagedObject;\n  @Output() firmware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  firmwares$: Observable<IResultList<IManagedObject>> = this.textFilter$\n    .pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    )\n    .pipe(\n      switchMap(text => this.getFirmwares(text)),\n      tap(resp => {\n        this.elementCount = resp.data ? resp.data.length : 0;\n      }),\n      shareReplay(1)\n    );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n  readonly DESCRIPTION_NOT_AVAILABLE: string = gettext('No description available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bulkOpsService: BulkOperationsService,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  selectFirmware(selected: boolean, fw: IManagedObject) {\n    if (selected) {\n      this.firmware.emit(fw);\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDescriptionTitle(firmware: IManagedObject): string {\n    return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n\n  private getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  shareReplay,\n  map,\n  switchMap,\n  distinctUntilKeyChanged,\n  distinctUntilChanged,\n  catchError,\n  tap\n} from 'rxjs/operators';\nimport { IManagedObject, IResultList, InventoryService } from '@c8y/client';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { property } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-version-or-patch-step',\n  templateUrl: 'version-or-patch.component.html'\n})\nexport class VersionOrPatchComponent {\n  @Input() selected: IManagedObject;\n  @Output() versionOrPatch: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n\n  firmware$: Observable<IManagedObject> = this.bulkOpsService.firmwareId.pipe(\n    distinctUntilChanged(),\n    switchMap(id => this.inventoryService.detail$(id).pipe(catchError(error => of(error)))),\n    shareReplay(1)\n  );\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = this.firmware$.pipe(\n    distinctUntilKeyChanged('id'),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    tap(resp => {\n      this.elementCount = resp.data ? resp.data.length : 0;\n    }),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  expanded: { [id: string]: boolean } = {};\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryService: InventoryService,\n    private bulkOpsService: BulkOperationsService\n  ) {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getBaseVersionAndPatches$(baseVersion) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(firmware =>\n        this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject) {\n    if (selected) {\n      this.versionOrPatch.emit(versionOrPatch);\n    }\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { has, uniq } from 'lodash-es';\nimport { ISelectedSoftware } from './select-software.model';\n\n@Component({\n  selector: 'c8y-confirm-software-selection-step',\n  templateUrl: 'confirm-software-selection-step.component.html'\n})\nexport class ConfirmSoftwareSelectionStepComponent implements OnChanges {\n  @Input() selectedItems: ISelectedSoftware[];\n  title: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.selectedItems) {\n      const deviceTypes: string[] = this.deviceTypes;\n      this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');\n    }\n  }\n\n  get selectedToInstall() {\n    return this.selectedItems.filter(software => software.action === 'install');\n  }\n\n  get selectedToDelete() {\n    return this.selectedItems.filter(software => software.action === 'delete');\n  }\n\n  get deviceTypes() {\n    return uniq(\n      this.selectedItems\n        .filter(val => has(val, ['software', 'c8y_Filter', 'type']))\n        .map(val => val.software.c8y_Filter.type)\n    );\n  }\n}\n","import { Component, EventEmitter, Output, QueryList, ViewChildren } from '@angular/core';\nimport { IManagedObject, IResultList } from '@c8y/client';\nimport { gettext, ListItemRadioComponent, memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, isEqual, property, uniqWith } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { ISelectedSoftware } from './select-software.model';\n\n@Component({\n  selector: 'c8y-select-software-step',\n  templateUrl: 'select-software-step.component.html'\n})\nexport class SelectSoftwareStepComponent {\n  @Output() software: EventEmitter<ISelectedSoftware> = new EventEmitter<ISelectedSoftware>();\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceType$: BehaviorSubject<string> = new BehaviorSubject('');\n  deviceTypes = [];\n  selectedDeviceType = { name: '' };\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  software$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.deviceType$\n  ).pipe(\n    switchMap(([name, deviceType]) => this.getSoftware(name, deviceType)),\n    shareReplay(1)\n  );\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');\n  @ViewChildren(ListItemRadioComponent) radioButtons: QueryList<ListItemRadioComponent>;\n\n  private deviceTypeSubscription: Subscription;\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    this.loadDeviceTypes();\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(software: IManagedObject): Observable<number> {\n    return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));\n  }\n\n  @memoize(property('id'))\n  getVersions(software: IManagedObject) {\n    return this.repositoryService.listAllVersions(software);\n  }\n\n  getDeviceTypeTitle(software: IManagedObject): string {\n    return get(\n      software,\n      'c8y_Filter.type',\n      this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  loadDeviceTypes() {\n    this.deviceTypeSubscription = this.deviceType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { 'c8y_Filter.type': `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.deviceTypes = uniqWith(data.map(val => ({ name: val.c8y_Filter.type })), isEqual);\n      });\n  }\n\n  ngOnDestroy() {\n    this.deviceTypeSubscription.unsubscribe();\n  }\n\n  resetSelection() {\n    this.radioButtons.map(radio => radio.reset());\n  }\n\n  selectSoftware({ option, software }) {\n    software.selectedId = option.id;\n    option.action = 'install';\n    this.emitSoftware({ option, software });\n  }\n\n  emitSoftware({ option, software }) {\n    const emitData = Object.assign(\n      {},\n      { software },\n      { version: option },\n      { action: option.action }\n    );\n    this.software.emit(emitData);\n  }\n\n  private getSoftware(name?: string, deviceType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (deviceType) {\n      query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: `c8y_Filter.type` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation, IResultList } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get, isEqual, uniqWith } from 'lodash-es';\nimport { BehaviorSubject, combineLatest, from, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, shareReplay, switchMap } from 'rxjs/operators';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-configuration',\n  templateUrl: 'stepper-bulk-type-configuration.component.html'\n})\nexport class StepperBulkTypeConfiguration extends BaseStepperComponent {\n  readonly NO_DEVICE_TYPE_AVAILABLE = gettext('Undefined`device type`');\n  selectedConfiguration: IManagedObject;\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n  configType$: BehaviorSubject<string> = new BehaviorSubject('');\n  configTypes = [];\n  selectedConfigType = { name: '' };\n  configurations$: Observable<IResultList<IManagedObject>> = combineLatest(\n    this.textFilter$,\n    this.configType$\n  ).pipe(\n    switchMap(([name, configType]) => this.getConfiguration(name, configType)),\n    shareReplay(1)\n  );\n  private configTypeSubscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private repositoryService: RepositoryService,\n    private translate: TranslateService\n  ) {\n    super();\n    this.DD_LOW_COUNT = this.bulkOperationService.DD_LOW_COUNT;\n    this.loadConfigurationTypes();\n  }\n\n  loadConfigurationTypes() {\n    this.configTypeSubscription = this.configType$\n      .pipe(\n        debounceTime(300),\n        distinctUntilChanged(),\n        switchMap(searchStr => {\n          const query = { configurationType: `*${searchStr}*` };\n          return from(\n            this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query })\n          );\n        })\n      )\n      .subscribe(result => {\n        const { data } = result;\n        this.configTypes = uniqWith(data.map(val => ({ name: val.configurationType })), isEqual);\n      });\n  }\n  ngOnDestroy(): void {\n    this.configTypeSubscription.unsubscribe();\n  }\n\n  selectConfiguration(configuration: IManagedObject) {\n    this.selectedConfiguration = configuration;\n  }\n\n  goToSecondStep($event: { stepper: C8yStepper; step: CdkStep }) {\n    $event.stepper.next();\n    this.getConfigBinary();\n    this.deviceTypes = this.selectedConfiguration.deviceType;\n  }\n\n  async getConfigBinary() {\n    if (this.selectedConfiguration.url) {\n      this.selectedConfiguration.binary = await this.repositoryService.getBinaryText(\n        this.selectedConfiguration.url,\n        { allowExternal: true, noAlerts: true }\n      );\n    }\n  }\n\n  getDeviceTypeTitle(configuration: IManagedObject): string {\n    return get(configuration, 'deviceType', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const configuration = {\n      type: this.selectedConfiguration.configurationType,\n      url: this.selectedConfiguration.url\n    };\n\n    return {\n      name: gettext('Configuration update'),\n      description: get(this.selectedConfiguration, 'name'),\n      prototype: ({\n        description: `Update configuration to: ${this.selectedConfiguration.name}.`,\n        c8y_DownloadConfigFile: configuration\n      } as unknown) as IOperation\n    };\n  }\n\n  private getConfiguration(name?: string, configurationType?: string) {\n    const query: any = name ? { name: `*${name}*` } : {};\n    if (configurationType) {\n      query.__or = [{ configurationType }, { __not: { __has: `configurationType` } }];\n    }\n    return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query });\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { C8yStepper, gettext } from '@c8y/ngx-components';\nimport { get } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-device-profile',\n  templateUrl: 'stepper-bulk-type-device-profile.component.html'\n})\nexport class StepperBulkTypeDeviceProfile extends BaseStepperComponent {\n  selectedDeviceProfile: IManagedObject;\n\n  goToConfirmSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');\n    $event.stepper.next();\n  }\n\n  onDeviceProfileSelected(selectedItem) {\n    this.selectedDeviceProfile = selectedItem;\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    return {\n      name: gettext('Apply device profile'),\n      description: get(this.selectedDeviceProfile, 'name'),\n      prototype: ({\n        description: `Apply device profile: ${this.selectedDeviceProfile.name}`,\n        profileId: this.selectedDeviceProfile.id,\n        profileName: this.selectedDeviceProfile.name,\n        c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile\n      } as unknown) as IOperation\n    };\n  }\n}\n","import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { Component, OnDestroy } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-firmware',\n  templateUrl: 'stepper-bulk-type-firmware.component.html'\n})\nexport class StepperFirmware extends BaseStepperComponent implements OnDestroy {\n  readonly descriptionTemplate: string = gettext('{{ name }} (version {{ version }})');\n\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  stepData: { firmware: IManagedObject; versionOrPatch: IManagedObject } = {\n    firmware: undefined,\n    versionOrPatch: undefined\n  };\n\n  selectedFirmware: IManagedObject;\n  selectedVersionOrPatch: IManagedObject;\n\n  private subscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  goToVersionOrPatchStep({ stepper }) {\n    const selectedFirmware = this.stepData.firmware;\n    this.bulkOperationService.setFirmwareId(selectedFirmware.id);\n    this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;\n    stepper.next();\n  }\n\n  onVersionOrPatchSelected(versionOrPatch: IManagedObject) {\n    this.stepData.versionOrPatch = versionOrPatch;\n  }\n\n  onFirmwareSelected(fw: IManagedObject) {\n    this.stepData.firmware = fw;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const selectedFirmware = this.stepData.firmware;\n    const selectedVersionOrPatch = this.stepData.versionOrPatch;\n\n    if (!selectedFirmware || !selectedVersionOrPatch) {\n      return;\n    }\n\n    const firmware: IManagedObject = ({\n      name: selectedFirmware.name,\n      version: selectedVersionOrPatch.c8y_Firmware.version,\n      url: selectedVersionOrPatch.c8y_Firmware.url\n    } as unknown) as IManagedObject;\n\n    if (selectedVersionOrPatch.c8y_Patch) {\n      firmware.isPatch = true;\n      firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;\n    }\n\n    const name = selectedFirmware.name;\n    const version = selectedVersionOrPatch.c8y_Firmware.version;\n    const description: string = `Update firmware to: ${name} (version: ${version}).`;\n\n    return {\n      name: gettext('Firmware update'),\n      description: this.translate.instant(this.descriptionTemplate, {\n        name: get(this.stepData, 'firmware.name'),\n        version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')\n      }),\n      prototype: ({\n        description,\n        c8y_Firmware: firmware\n      } as unknown) as IOperation\n    };\n  }\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    this.textFilter$.next('');\n    super.onSelectionChange(event);\n  }\n}\n","import { CdkStep } from '@angular/cdk/stepper';\nimport { Component, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { uniq } from 'lodash-es';\nimport { BaseStepperComponent } from '../base-stepper.component';\nimport { OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SelectSoftwareStepComponent } from './software-update-stepper/select-software-step.component';\nimport {\n  ISelectedSoftware,\n  ISoftwareUpdateOperationPrototype\n} from './software-update-stepper/select-software.model';\n\n@Component({\n  selector: 'c8y-stepper-bulk-type-software',\n  templateUrl: 'stepper-bulk-type-software.component.html'\n})\nexport class StepperBulkTypeSoftware extends BaseStepperComponent {\n  readonly descriptionTemplateSingle: string = gettext(\n    'Update software to: {{ name }} (version {{ version }})'\n  );\n  readonly descriptionTemplateOneOther: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and one other'\n  );\n  readonly descriptionTemplateMultiple: string = gettext(\n    'Update software to: {{ name }} (version {{ version }}) and {{ count }} others'\n  );\n\n  selectedSoftware: ISelectedSoftware[] = [];\n  @ViewChild(SelectSoftwareStepComponent, { static: false })\n  selectSoftware: SelectSoftwareStepComponent;\n\n  constructor(private modal: ModalService, private translate: TranslateService) {\n    super();\n  }\n\n  onSoftwareSelected(selectedItem) {\n    this.selectedSoftware = this.selectedSoftware.filter(\n      item => item.software.id !== selectedItem.software.id\n    );\n    this.selectedSoftware.push(selectedItem);\n  }\n\n  async confirmSoftwareSelection($event: { stepper: C8yStepper; step: CdkStep }) {\n    const deviceTypes: string[] = this.getUniqueDeviceTypes();\n    this.deviceTypes = deviceTypes;\n    if (deviceTypes.length > 1) {\n      try {\n        await this.modal.confirm(\n          gettext('Selected software for various device types'),\n          gettext('Operation may fail due to unsupported software. Do you want to proceed?'),\n          Status.WARNING,\n          { ok: gettext('Confirm'), cancel: gettext('Cancel') }\n        );\n        $event.stepper.next();\n      } catch (ex) {\n        this.selectedSoftware = [];\n        this.selectSoftware.resetSelection();\n      }\n    } else {\n      $event.stepper.next();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const softwareList: ISoftwareUpdateOperationPrototype[] = this.selectedSoftware.map(item => ({\n      name: item.software.name,\n      version: item.version.c8y_Software.version,\n      url: item.version.c8y_Software.url,\n      action: item.action\n    }));\n\n    const interpolationParams: object = {\n      name: softwareList[0].name,\n      version: softwareList[0].version,\n      count: softwareList.length - 1\n    };\n    let description: string;\n    switch (softwareList.length) {\n      case 1:\n        description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);\n        break;\n      case 2:\n        description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);\n        break;\n      default:\n        description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);\n    }\n\n    return {\n      name: gettext('Software update'),\n      prototype: ({\n        description,\n        c8y_SoftwareUpdate: softwareList\n      } as unknown) as IOperation\n    };\n  }\n\n  private getUniqueDeviceTypes(): string[] {\n    return uniq(\n      this.selectedSoftware\n        .map(item => item.software.c8y_Filter && item.software.c8y_Filter.type)\n        .filter(type => !!type)\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {\n  AlarmsDeviceGridColumn,\n  DeviceGridComponent,\n  GroupDeviceGridColumn,\n  ModelDeviceGridColumn,\n  NameDeviceGridColumn,\n  RegistrationDateDeviceGridColumn,\n  StatusDeviceGridColumn,\n  TypeDeviceGridColumn\n} from '@c8y/ngx-components/device-grid';\nimport { Column, FilteringActionType } from '@c8y/ngx-components';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'c8y-device-selector',\n  templateUrl: 'device-selector.component.html'\n})\nexport class DeviceSelectorComponent implements OnInit, OnDestroy {\n  @ViewChild(DeviceGridComponent, { static: true })\n  deviceGrid: DeviceGridComponent;\n\n  @Input()\n  deviceTypes: Observable<string[]>;\n\n  typeColumn: Column = new TypeDeviceGridColumn();\n\n  @Output()\n  onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n\n  columns: Column[] = [\n    new StatusDeviceGridColumn(),\n    new NameDeviceGridColumn(),\n    this.typeColumn,\n    new ModelDeviceGridColumn(),\n    new GroupDeviceGridColumn(),\n    new RegistrationDateDeviceGridColumn(),\n    new AlarmsDeviceGridColumn()\n  ];\n\n  private unsubscribe$: Subject<boolean> = new Subject();\n\n  ngOnInit(): void {\n    if (this.deviceTypes) {\n      this.deviceTypes\n        .pipe(\n          distinctUntilChanged(),\n          takeUntil(this.unsubscribe$)\n        )\n        .subscribe((types: string[]) => {\n          this.deviceGrid.updateFiltering([this.typeColumn.name], {\n            type:\n              types && types.length\n                ? FilteringActionType.ApplyFilter\n                : FilteringActionType.ResetFilter,\n            payload: types\n              ? {\n                  filteringModifier: {\n                    externalFilterQuery: {\n                      types\n                    }\n                  }\n                }\n              : undefined\n          });\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\r\n\r\n@Injectable()\r\nexport class TabsFactory implements TabFactory {\r\n  constructor(public router: Router) {}\r\n  get() {\r\n    const tabs: Tab[] = [];\r\n    if (this.router.url.match(/devicecontrol/g)) {\r\n      tabs.push({\r\n        path: 'devicecontrol/single',\r\n        label: gettext('Single operations'),\r\n        icon: 'c8y-icon c8y-icon-device-control',\r\n        priority: 1100,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n      tabs.push({\r\n        path: 'devicecontrol/bulk',\r\n        label: gettext('Bulk operations'),\r\n        icon: 'c8y-icon c8y-icon-energy',\r\n        priority: 1050,\r\n        orientation: 'horizontal'\r\n      } as Tab);\r\n    }\r\n\r\n    return tabs;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, FormsModule, HOOK_TABS, Route } from '@c8y/ngx-components';\nimport { DeviceGridModule } from '@c8y/ngx-components/device-grid';\nimport { DeviceProfileModule } from '@c8y/ngx-components/device-profile';\nimport { RepositoryModule } from '@c8y/ngx-components/repository';\nimport { SingleOperationDetailsModule } from '@c8y/ngx-components/operations/single-operation-details';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationFromSingleComponent } from './bulk/create-from-single/bulk-operation-from-single.component';\nimport { BulkOperationStepper } from './bulk/creation/bulk-operation-stepper.component';\nimport { BulkOperationsStepperContainerComponent } from './bulk/creation/bulk-operations-stepper-container.component';\nimport { ConfirmDeviceProfileSelectionStepComponent } from './bulk/creation/device-profile-update-stepper/confirm-device-profile-selection-step.component';\nimport { SelectDeviceProfileStepComponent } from './bulk/creation/device-profile-update-stepper/select-device-profile-step.component';\nimport { SelectFirmwareComponent } from './bulk/creation/firmware-update-stepper/select-firmware.component';\nimport { VersionOrPatchComponent } from './bulk/creation/firmware-update-stepper/version-or-patch.component';\nimport { ConfirmSoftwareSelectionStepComponent } from './bulk/creation/software-update-stepper/confirm-software-selection-step.component';\nimport { SelectSoftwareStepComponent } from './bulk/creation/software-update-stepper/select-software-step.component';\nimport { StepperBulkTypeConfiguration } from './bulk/creation/stepper-bulk-type-configuration.component';\nimport { StepperBulkTypeDeviceProfile } from './bulk/creation/stepper-bulk-type-device-profile.component';\nimport { StepperFirmware } from './bulk/creation/stepper-bulk-type-firmware.component';\nimport { StepperBulkTypeSoftware } from './bulk/creation/stepper-bulk-type-software.component';\nimport { CustomStep } from './bulk/custom-step.directive';\nimport { OperationDetailsComponent } from './details/operation-details.component';\nimport { DeviceSelectorComponent } from './device-selector/device-selector.component';\nimport { TabsFactory } from './factories/tabs.factory';\n\nexport const routes: Route[] = [\n  {\n    path: 'devicecontrol',\n    redirectTo: 'devicecontrol/single',\n    pathMatch: 'full'\n  },\n  {\n    path: 'devicecontrol/bulk/creation/:type',\n    component: BulkOperationsStepperContainerComponent\n  },\n  {\n    path: 'devicecontrol/single/create-bulk/:operationId',\n    component: BulkOperationFromSingleComponent\n  }\n];\n\n@NgModule({\n  declarations: [\n    BulkOperationStepper,\n    BulkOperationsStepperContainerComponent,\n    BulkOperationFromSingleComponent,\n    CustomStep,\n    DeviceSelectorComponent,\n    StepperBulkTypeSoftware,\n    StepperFirmware,\n    StepperBulkTypeConfiguration,\n    StepperBulkTypeDeviceProfile,\n    OperationDetailsComponent,\n    VersionOrPatchComponent,\n    SelectFirmwareComponent,\n    ConfirmSoftwareSelectionStepComponent,\n    SelectSoftwareStepComponent,\n    SelectDeviceProfileStepComponent,\n    ConfirmDeviceProfileSelectionStepComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(routes, { useHash: true }),\n    TooltipModule.forRoot(),\n    PopoverModule.forRoot(),\n    CollapseModule.forRoot(),\n    BsDropdownModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    TimepickerModule.forRoot(),\n    RepositoryModule,\n    DeviceProfileModule,\n    DeviceGridModule,\n    SingleOperationDetailsModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule\n  ],\n  exports: [BulkOperationStepper, CustomStep],\n  providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }],\n  entryComponents: [BulkOperationsStepperContainerComponent]\n})\nexport class OperationsModule {}\n","import { Component, forwardRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators\n} from '@angular/forms';\nimport { gettext } from '@c8y/ngx-components';\nimport { isEmpty } from 'lodash-es';\nimport { Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { OperationSchedule } from './operation-schedule.interface';\n\n@Component({\n  selector: 'c8y-operation-scheduler',\n  templateUrl: 'operation-scheduler.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: forwardRef(() => OperationSchedulerComponent)\n    }\n  ]\n})\nexport class OperationSchedulerComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  @Input('minutesAhead') set _minutesAhead(minutes: number) {\n    if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {\n      this.minutesAhead = minutes;\n    }\n  }\n  @Input('delayConfig') set _delayConfig(config: { seconds: number; milliseconds: number }) {\n    if (config) {\n      if (config.seconds > this.DELAY_SECONDS_DEFAULT) {\n        this.delaySeconds = config.seconds;\n      }\n\n      if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {\n        this.delayMilliseconds = config.milliseconds;\n      }\n    }\n  }\n\n  placeholder: string = gettext('Start date');\n  fgOperationScheduler: FormGroup;\n  minDate: Date;\n  minDelay: number;\n  delayErrors: ValidationErrors = null;\n  pickerErrors: ValidationErrors = null;\n\n  private readonly DELAY_SECONDS_DEFAULT: number = 1;\n  private readonly DELAY_MILLISECONDS_DEFAULT: number = 1;\n  private readonly MINUTES_AHEAD_DEFAULT: number = 5;\n  private delaySeconds: number = this.DELAY_SECONDS_DEFAULT;\n  private delayMilliseconds: number = this.DELAY_MILLISECONDS_DEFAULT;\n  private minutesAhead: number = this.MINUTES_AHEAD_DEFAULT;\n  private currentUnit: string = 'seconds';\n  private delayInSeconds: number;\n  private initialDate: Date;\n  private subscription: Subscription;\n\n  private onChange: (name) => void;\n  private onTouched: () => void;\n  private onValidatorChanged: () => void;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.minDate = new Date();\n    this.initialDate = new Date(\n      this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead)\n    );\n    this.minDelay = this.delaySeconds;\n\n    this.fgOperationScheduler = this.formBuilder.group({\n      picker: ['', [Validators.required, this.dateValidation]],\n      time: ['', [Validators.required, this.timeValidation]],\n      delay: ['', [Validators.required, Validators.min(this.minDelay)]],\n      unit: ['seconds']\n    });\n\n    this.fgOperationScheduler.patchValue({\n      picker: this.initialDate,\n      time: this.initialDate,\n      delay: this.minDelay\n    });\n\n    // Due to the validation of picker and time it could be possible that value changes\n    // are emitted more than once. Therefore we throttle the emits.\n    const valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));\n    this.subscription = valueChanges$.subscribe(data => {\n      this.delayErrors = this.fgOperationScheduler.controls.delay.errors;\n      this.pickerErrors = this.fgOperationScheduler.controls.picker.errors;\n      this.convertDelayHandler(data.unit);\n      this.emitData(data);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription && !this.subscription.closed) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: OperationSchedule): void {\n    if (value) {\n      this.fgOperationScheduler.patchValue({\n        picker: value.scheduledDate,\n        time: value.scheduledDate,\n        delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,\n        unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'\n      });\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();\n  }\n\n  validate(): ValidationErrors {\n    if (this.fgOperationScheduler.invalid) {\n      return {\n        ...this.fgOperationScheduler.controls.picker.errors,\n        ...this.fgOperationScheduler.controls.time.errors,\n        ...this.fgOperationScheduler.controls.delay.errors\n      };\n    }\n  }\n\n  registerOnValidatorChange(fn: any) {\n    this.onValidatorChanged = fn;\n  }\n\n  markAsTouched(): void {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  convertDelayHandler(unit: string) {\n    if (this.currentUnit === unit) {\n      return;\n    }\n\n    this.currentUnit = unit;\n    this.convertDelay(this.currentUnit);\n\n    // update validator on delay control to make sure that\n    // switching from minutes to seconds or vice versa does not harm validation.\n    this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);\n    this.fgOperationScheduler.controls.delay.updateValueAndValidity();\n  }\n\n  emitData(data: { delayInSeconds: number; picker: Date; time?: Date; delay?: number }) {\n    if (this.onValidatorChanged) {\n      this.onValidatorChanged();\n    }\n\n    if (data.picker && data.time) {\n      data.picker = this.combineDateAndTime(data.picker, data.time);\n    }\n\n    this.convertDelay(this.currentUnit);\n    data.delayInSeconds = this.delayInSeconds;\n\n    if (this.onChange) {\n      this.onChange({\n        delayInSeconds: data.delayInSeconds,\n        scheduledDate: data.picker\n      });\n    }\n  }\n\n  private convertDelay(unit: string) {\n    if (unit && this.fgOperationScheduler.controls.delay.value) {\n      this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;\n      if (unit === 'milliseconds') {\n        this.minDelay =\n          this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT\n            ? this.delayMilliseconds\n            : this.DELAY_MILLISECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;\n      } else {\n        this.delaySeconds = this.fgOperationScheduler.controls.delay.value;\n        this.minDelay =\n          this.delaySeconds > this.DELAY_SECONDS_DEFAULT\n            ? this.delaySeconds\n            : this.DELAY_SECONDS_DEFAULT;\n        this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;\n      }\n    }\n  }\n\n  private combineDateAndTime(date: Date, time: Date) {\n    return new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n      time.getHours(),\n      time.getMinutes()\n    );\n  }\n\n  private dateValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      fControl.parent.get('time').setValue(date);\n      return date >= new Date()\n        ? null\n        : {\n            dateValidation: true\n          };\n    }\n    return { dateValidation: true };\n  }\n\n  private timeValidation(fControl: FormControl) {\n    if (fControl.value) {\n      const date = fControl.value as Date;\n      const result =\n        date >= new Date()\n          ? null\n          : {\n              dateValidation: true\n            };\n\n      const picker = fControl.parent.get('picker');\n\n      if (result) {\n        picker.setErrors(result);\n        picker.markAsTouched();\n        return result;\n      }\n\n      if (picker && picker.errors && picker.errors.dateValidation) {\n        delete picker.errors.dateValidation;\n\n        if (isEmpty(picker.errors)) {\n          picker.setErrors(null);\n          return result;\n        }\n\n        picker.setErrors(picker.errors);\n      }\n      return result;\n    }\n    return { dateValidation: true };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { OperationSchedulerComponent } from './operation-scheduler.component';\n\n/**\n * This module provides components for scheduling bulk operations.\n */\n@NgModule({\n  imports: [CoreModule, ReactiveFormsModule, BsDatepickerModule, TimepickerModule],\n  providers: [],\n  declarations: [OperationSchedulerComponent],\n  entryComponents: [OperationSchedulerComponent],\n  exports: [OperationSchedulerComponent]\n})\nexport class BulkOperationSchedulerModule {}\n","import { Component, Input } from '@angular/core';\nimport { IManagedObject, InventoryService, IResultList } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-operation-summary',\n  templateUrl: 'operation-summary.component.html'\n})\nexport class OperationSummaryComponent {\n  @Input()\n  name: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  set deviceQueryString(query: string) {\n    this.displayDeviceCount = true;\n    const filters = {\n      q: query || '',\n      pageSize: 1,\n      currentPage: 1,\n      withTotalPages: true\n    };\n    this.inventoryService\n      .list(filters)\n      .then((result: IResultList<IManagedObject>) => (this.deviceCount = result.paging.totalPages));\n  }\n\n  deviceCount: number = 0;\n  displayDeviceCount: boolean = false;\n\n  constructor(private inventoryService: InventoryService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { OperationSummaryComponent } from './operation-summary.component';\n\n/**\n * This module provides a component for displaying the summary of given bulk operation.\n */\n@NgModule({\n  imports: [CoreModule],\n  declarations: [OperationSummaryComponent],\n  entryComponents: [OperationSummaryComponent],\n  exports: [OperationSummaryComponent]\n})\nexport class OperationSummaryModule {}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { IOperation } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-single-operation-modal',\n  templateUrl: './single-operation-modal.component.html'\n})\nexport class SingleOperationModalComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = false;\n  @Input() readOnly: boolean = false;\n\n  constructor(public modalRef: BsModalRef) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { IOperation, OperationService } from '@c8y/client';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\n\n@Injectable()\nexport class SingleOperationDetailsService {\n  constructor(private operationService: OperationService, private modalService: BsModalService) {}\n\n  /**\n   * Opens a modal window with the details of given single operation.\n   * @param operationOrOperationId Operation's object or id.\n   * @param options Additional options:\n   * - `collapsed`: boolean - whether the details pane should be initially collapsed\n   * - `readOnly`: boolean - whether the details should be displayed in read-only mode\n   */\n  async openDetails(\n    operationOrOperationId: IOperation | string | number,\n    options?: { collapsed?: boolean; readOnly?: boolean }\n  ) {\n    const operation: IOperation = (operationOrOperationId as IOperation).id\n      ? (operationOrOperationId as IOperation)\n      : (await this.operationService.detail(operationOrOperationId)).data;\n    const initialState = { operation, ...options };\n\n    this.modalService.show(SingleOperationModalComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { operationStatusClasses, operationStatusIcons } from '@c8y/ngx-components';\nimport { SingleOperationDetailsService } from './single-operation-details.service';\n\n/**\n * Single operation component displays a single operation's status, description and creationTime.\n *\n * Example:\n *\n * ```html\n * <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n * ```\n */\n@Component({\n  selector: 'c8y-single-operation',\n  templateUrl: './single-operation.component.html'\n})\nexport class SingleOperationComponent {\n  @Input() operation: IOperation;\n\n  statusIcons: object;\n  statusClasses: object;\n\n  constructor(private singleOperationDetailsService: SingleOperationDetailsService) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n  }\n\n  openDetails() {\n    this.singleOperationDetailsService.openDetails(this.operation);\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { assign, get } from 'lodash-es';\nimport { IOperation, OperationService, OperationStatus } from '@c8y/client';\nimport {\n  AlertService,\n  ListItemComponent,\n  Tab,\n  gettext,\n  operationStatusClasses,\n  operationStatusIcons\n} from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-single-operation-list-item',\n  templateUrl: './single-operation-list-item.component.html'\n})\nexport class SingleOperationListItemComponent implements OnInit {\n  @Input() operation: Partial<IOperation>;\n  @Input() collapsed: boolean = true;\n  @Input() readOnly: boolean = false;\n\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  @ViewChild('details', { static: true }) detailsTabTemplate: any;\n  @ViewChild('historyOfChanges', { static: true }) historyOfChangesTabTemplate: any;\n\n  tabs: Tab[] = [];\n  selectedTab: Tab;\n  statusIcons = operationStatusIcons;\n  statusClasses = operationStatusClasses;\n  OperationStatus = OperationStatus;\n\n  get displayedDescription() {\n    const commandText = get(this.operation, 'c8y_Command.text');\n    const opDescription = get(this.operation, 'description');\n    return commandText || opDescription || gettext('(no command text or description available)');\n  }\n\n  constructor(\n    private router: Router,\n    private operationService: OperationService,\n    private alertService: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.statusIcons = operationStatusIcons;\n    this.statusClasses = operationStatusClasses;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        icon: 'asterisk',\n        template: this.detailsTabTemplate\n      } as Tab,\n      {\n        label: gettext('History of changes'),\n        icon: 'archive',\n        template: this.historyOfChangesTabTemplate\n      } as Tab\n    ];\n    this.selectedTab = this.tabs[0];\n  }\n\n  scheduleAsBulkOperation() {\n    this.router.navigateByUrl(`/devicecontrol/single/create-bulk/${this.operation.id}`);\n  }\n\n  async cancel() {\n    try {\n      const operationAfterUpdate = (await this.operationService.update({\n        id: this.operation.id,\n        status: OperationStatus.FAILED,\n        failureReason: gettext('Operation cancelled by user.')\n      })).data;\n      assign(this.operation, operationAfterUpdate);\n      this.alertService.success(gettext('Operation cancelled.'));\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { BulkOperationDetailsService } from '@c8y/ngx-components/operations/bulk-operations-list';\n\n@Component({\n  selector: 'c8y-single-operation-details',\n  templateUrl: './single-operation-details.component.html'\n})\nexport class SingleOperationDetailsComponent {\n  @Input() operation: Partial<IOperation>;\n  @Input() readOnly: boolean = false;\n\n  constructor(private bulkOperationDetailsService: BulkOperationDetailsService) {}\n\n  openBulkOperationDetails() {\n    this.bulkOperationDetailsService.openDetails(this.operation.bulkOperationId);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule } from '@c8y/ngx-components';\nimport { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';\nimport { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';\n\nimport { SingleOperationDetailsService } from './single-operation-details.service';\nimport { SingleOperationComponent } from './single-operation.component';\nimport { SingleOperationModalComponent } from './single-operation-modal.component';\nimport { SingleOperationListItemComponent } from './single-operation-list-item.component';\nimport { SingleOperationDetailsComponent } from './single-operation-details.component';\n\n/**\n * This module allows to display details of a single operation in a modal.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    CollapseModule,\n    BulkOperationsListModule,\n    BulkOperationsServiceModule\n  ],\n  providers: [SingleOperationDetailsService],\n  declarations: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  entryComponents: [\n    SingleOperationComponent,\n    SingleOperationModalComponent,\n    SingleOperationListItemComponent,\n    SingleOperationDetailsComponent\n  ],\n  exports: [SingleOperationComponent]\n})\nexport class SingleOperationDetailsModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { IStatusOption } from './status-option.model';\n\n@Component({\n  selector: 'c8y-status-filter',\n  templateUrl: './status-filter.component.html',\n  host: { class: 'btn-group' }\n})\nexport class StatusFilterComponent {\n  statusOptions: Array<{ selected: boolean; option: IStatusOption }> = [];\n\n  /** List of filter options to be displayed */\n  @Input() set options(options: IStatusOption[]) {\n    this.statusOptions = (options || []).map(option => ({ selected: false, option }));\n  }\n\n  /**\n   * Allows multiple options to be active simultaneosly.\n   */\n  @Input('multiple') set _multiple(multiple: boolean) {\n    this.multiple = coerceBooleanProperty(multiple);\n  }\n\n  /** Display the filter as a small button group */\n  @Input('small') set _small(small: boolean) {\n    this.small = coerceBooleanProperty(small);\n  }\n\n  @HostBinding('class.btn-group-sm') get displaySmall() {\n    return this.small;\n  }\n\n  @Output() onFilterChanged: EventEmitter<IStatusOption[]> = new EventEmitter();\n\n  isAllButtonSelected: boolean = true;\n\n  private multiple: boolean;\n  private small: boolean;\n\n  changeFilter(option: { selected: boolean; option: IStatusOption }) {\n    this.isAllButtonSelected = false;\n    let emitNeeded: boolean = false;\n\n    if (this.multiple) {\n      option.selected = !option.selected;\n      emitNeeded = true;\n    } else if (!option.selected) {\n      option.selected = true;\n      this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));\n      emitNeeded = true;\n    }\n\n    if (emitNeeded) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  removeFilter() {\n    this.isAllButtonSelected = true;\n    this.statusOptions.forEach(op => (op.selected = false));\n\n    this.emitSelectedOptions();\n  }\n\n  /**\n   * Allows the filter to be initalliy displayed with some preset filters.\n   *\n   * @param filters An `IStatusOption` array defining filter options to be preset.\n   * @param emit  (optional) If `true` component will emit `onFilterChanged` event.\n   */\n  preset(filters: IStatusOption[], emit: boolean = true) {\n    let firstSelected: boolean = false;\n\n    this.statusOptions.forEach(option => (option.selected = false));\n\n    this.statusOptions\n      .filter(option => (filters || []).map(o => o.label).includes(option.option.label))\n      .filter(() => {\n        // only first option passed will be set in single selection mode\n        const include: boolean = this.multiple || !firstSelected;\n        if (include) {\n          firstSelected = true;\n        }\n\n        return include;\n      })\n      .forEach(option => (option.selected = true));\n\n    this.isAllButtonSelected = !(filters && filters.length);\n\n    if (emit) {\n      this.emitSelectedOptions();\n    }\n  }\n\n  reset() {\n    this.removeFilter();\n  }\n\n  activeFilters(): IStatusOption[] {\n    return this.statusOptions.filter(option => option.selected).map(option => option.option);\n  }\n\n  isFilterApplied(): boolean {\n    return this.statusOptions.some(option => option.selected);\n  }\n\n  private emitSelectedOptions() {\n    this.onFilterChanged.emit(\n      this.statusOptions.filter(option => option.selected).map(option => option.option)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { CoreModule } from '@c8y/ngx-components';\nimport { StatusFilterComponent } from './status-filter.component';\n\n/**\n * This module provides a component for selecting status filter.\n */\n@NgModule({\n  imports: [CoreModule, TooltipModule],\n  declarations: [StatusFilterComponent],\n  entryComponents: [StatusFilterComponent],\n  exports: [StatusFilterComponent]\n})\nexport class StatusFilterModule {}\n","export enum BulkOperationType {\n  SOFTWARE = 'software',\n  FIRMWARE = 'firmware',\n  CONFIGURATION = 'configuration',\n  DEVICE_PROFILE = 'device-profile'\n}\n","import { Location } from '@angular/common';\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { has, isUndefined } from 'lodash-es';\nimport { Subject } from 'rxjs';\n\nimport {\n  IdReference,\n  IManagedObject,\n  InventoryService,\n  IOperation,\n  IOperationBulk,\n  IResult,\n  OperationBulkService,\n  OperationService\n} from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\n\nimport { OperationDetails } from './operation-details.model';\nimport { OperationType } from './operation-type.model';\nimport { BulkOperationType } from './bulk-operation.model';\n\nexport const baseUrl = 'devicecontrol/bulk/creation/';\nexport const HOOK_LIST_BULK_TYPE = new InjectionToken<OperationType[]>('LIST_BULK_TYPE');\nexport const C8Y_BULK_TYPES: OperationType[] = [\n  {\n    type: BulkOperationType.CONFIGURATION,\n    c8yIcon: 'cogs',\n    name: gettext('Configuration update'),\n    path: `${baseUrl}configuration`,\n    component: undefined,\n    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.FIRMWARE,\n    c8yIcon: 'c8y-firmware',\n    name: gettext('Firmware update'),\n    path: `${baseUrl}firmware`,\n    component: undefined,\n    fragments: ['c8y_Firmware'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.SOFTWARE,\n    c8yIcon: 'c8y-tools',\n    name: gettext('Software update'),\n    path: `${baseUrl}software`,\n    component: undefined,\n    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],\n    selected: false\n  },\n  {\n    type: BulkOperationType.DEVICE_PROFILE,\n    c8yIcon: 'c8y-device-profile',\n    name: gettext('Apply device profile'),\n    path: `${baseUrl}device-profile`,\n    component: undefined,\n    fragments: ['c8y_DeviceProfile'],\n    selected: false\n  }\n];\nexport const C8Y_BULK_TYPE_FRAGMENTS: string[] = C8Y_BULK_TYPES.reduce(\n  (flattened, current) => flattened.concat(current.fragments),\n  []\n);\n\n@Injectable()\nexport class BulkOperationsService {\n  readonly DD_LOW_COUNT: number = 10;\n  firmwareId: Subject<IdReference> = new Subject<IdReference>();\n\n  constructor(\n    private operationBulkService: OperationBulkService,\n    private operationService: OperationService,\n    private inventoryService: InventoryService,\n    private location: Location,\n\n    @Inject(HOOK_LIST_BULK_TYPE) private bulkTypes: OperationType[]\n  ) {\n    if (bulkTypes && bulkTypes.length > 0) {\n      this.bulkTypes = bulkTypes.map(type => {\n        if (isUndefined(type.selected)) {\n          type.selected = false;\n        }\n        return type;\n      });\n    }\n  }\n\n  getBulkOperations(customFilter = {}) {\n    const filter = {\n      withTotalPages: true,\n      withDeleted: true,\n      pageSize: 50,\n      ...customFilter\n    };\n\n    return this.operationBulkService.list(filter);\n  }\n\n  getBulkOperationById(bulkOperationId: string | number) {\n    return this.operationBulkService.detail(bulkOperationId);\n  }\n\n  createBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.create(bulkOperation);\n  }\n\n  deleteBulkOperation(bulkOperationId) {\n    return this.operationBulkService.delete(bulkOperationId);\n  }\n\n  updateBulkOperation(bulkOperation: Partial<IOperationBulk>) {\n    return this.operationBulkService.update(bulkOperation);\n  }\n\n  getOperation(id: string): Promise<IResult<IOperation>> {\n    return this.operationService.detail(id);\n  }\n\n  returnToBulkOperationOverview() {\n    this.location.back();\n  }\n\n  setBulkTypes(list: OperationType[]) {\n    this.bulkTypes = list;\n  }\n\n  getBulkTypes(): OperationType[] {\n    return this.bulkTypes;\n  }\n\n  setFirmwareId(id: IdReference) {\n    this.firmwareId.next(id);\n  }\n\n  createGroup(deviceQueryDataString: string) {\n    const dynamicGroup: Partial<IManagedObject> = {\n      name: 'Bulk operations group',\n      type: 'c8y_DynamicGroup',\n      c8y_IsDynamicGroup: { invisible: {} },\n      c8y_DeviceQueryString: deviceQueryDataString\n    };\n\n    return this.inventoryService.create(dynamicGroup);\n  }\n\n  async scheduleBulkOperation(deviceQueryString: string, details: OperationDetails) {\n    const dynamicGroup = await this.createGroup(deviceQueryString);\n\n    const bulkOperation: IOperationBulk = {\n      groupId: dynamicGroup.data.id,\n      operationPrototype: details.prototype,\n      creationRamp: details.schedule.delayInSeconds,\n      startDate: details.schedule.scheduledDate.toISOString(),\n      note: details.note\n    };\n\n    await this.createBulkOperation(bulkOperation);\n  }\n\n  getSingleOperationsByStatus(status, bulkOperationId) {\n    const filter = {\n      withTotalPages: true,\n      bulkOperationId,\n      status: (status && status.toUpperCase()) || ''\n    };\n\n    return this.operationService.list(filter);\n  }\n\n  createSingleOperation(operation: IOperation) {\n    return this.operationService.create(operation);\n  }\n\n  updateSingleOperation(partialUpdateObject: Partial<IOperation>) {\n    return this.operationService.update(partialUpdateObject);\n  }\n\n  getManagedObject(deviceId: IdReference) {\n    return this.inventoryService.detail(deviceId);\n  }\n\n  retrieveBulkOperationType(operation: IOperation): BulkOperationType {\n    let type: BulkOperationType;\n\n    C8Y_BULK_TYPES.some(t => {\n      if (t.fragments.some(fragment => has(operation, fragment))) {\n        type = t.type;\n        return true;\n      }\n    });\n\n    return type;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport {\n  BulkOperationsService,\n  HOOK_LIST_BULK_TYPE,\n  C8Y_BULK_TYPES\n} from './bulk-operations.service';\n\n/**\n * This module provides a shared bulk operations service.\n */\n@NgModule({\n  imports: [],\n  providers: [BulkOperationsService, { provide: HOOK_LIST_BULK_TYPE, useValue: C8Y_BULK_TYPES }]\n})\nexport class BulkOperationsServiceModule {}\n","import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationDetailsService: BulkOperationDetailsService,\n    public modalRef: BsModalRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-modal',\n  templateUrl: 'bulk-operations-modal.component.html'\n})\nexport class BulkOperationsModalComponent {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  showComponent: boolean = false;\n  constructor(private bsModalRef: BsModalRef, private resolver: ComponentFactoryResolver) {}\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  createComponent(item: OperationType) {\n    if (item && item.component) {\n      this.showComponent = true;\n      const factory = this.resolver.resolveComponentFactory(item.component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsModalComponent } from './bulk-operations-modal.component';\n\n@Injectable()\nexport class BulkOperationModalsService {\n  private bsModalRef: BsModalRef;\n\n  constructor(private bsModalService: BsModalService) {}\n\n  showNewBulkOperationModal() {\n    this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {\n      backdrop: 'static',\n      class: 'modal-sm'\n    });\n  }\n\n  hideNewBulkOperationModal() {\n    if (this.bsModalRef) {\n      this.bsModalRef.hide();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: IStatusOption[] = [\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatus: [OperationBulkGeneralStatus.SCHEDULED],\n    iconClass: 'fa fa-calendar text-info'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatus: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    iconClass: 'fa fa-refresh text-primary'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatus: [OperationBulkGeneralStatus.CANCELED],\n    iconClass: 'fa fa-ban text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatus: [OperationBulkGeneralStatus.FAILED],\n    iconClass: 'fa fa-exclamation-triangle text-danger'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],\n    iconClass: 'fa fa-check text-success'\n  }\n];\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.iconClass = this.getIconClass();\n      this.setProgressBar();\n    }\n  }\n\n  getIconClass() {\n    return this.bulkOperationStatusOptions.find(statusOption =>\n      statusOption.generalStatus.includes(this.bulkOperation.generalStatus)\n    ).iconClass;\n  }\n\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to SUCCESSFUL'),\n        gettext(\n          'You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  allOperationsCreated() {\n    return (\n      this.bulkOperation.progress.all ===\n      this.bulkOperation.progress.executing +\n        this.bulkOperation.progress.failed +\n        this.bulkOperation.progress.pending +\n        this.bulkOperation.progress.successful\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { Component, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { IOperationBulk, IResultList } from '@c8y/client';\nimport { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';\nimport { flatten } from 'lodash-es';\nimport { BehaviorSubject, Observable, combineLatest, pipe } from 'rxjs';\nimport { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n@Component({\n  selector: 'c8y-bulk-operations',\n  templateUrl: './bulk-operations-list.component.html',\n  providers: [OperationBulkRealtimeService]\n})\nexport class BulkOperationsListComponent {\n  selectedTypeFilters = this.getTypeFilters();\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n\n  filterPipe;\n  refreshLoading: boolean = false;\n  statusFilter$: BehaviorSubject<IStatusOption[]> = new BehaviorSubject(null);\n  typeFilter$: BehaviorSubject<OperationType[]> = new BehaviorSubject(null);\n  timeFilter$: BehaviorSubject<any> = new BehaviorSubject(null);\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  @ViewChildren(BulkOperationListItemComponent) listItems: QueryList<\n    BulkOperationListItemComponent\n  >;\n  @ViewChild('statusFilter', { static: true }) statusFilter: StatusFilterComponent;\n  @ViewChild(DatePickerComponent, { static: true }) datePicker: DatePickerComponent;\n\n  bulkOperations$: Observable<IResultList<IOperationBulk>> = combineLatest(\n    this.statusFilter$,\n    this.timeFilter$,\n    this.typeFilter$,\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.refreshLoading = true;\n    }),\n    switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)),\n    withLatestFrom(this.typeFilter$),\n    map(([result, typeFilter]: [IResultList<IOperationBulk>, OperationType[]]) => {\n      this.filterPipe = pipe(map((data: []) => this.filterByType(data, typeFilter)));\n      return { ...result, data: this.filterByType(result.data, typeFilter) };\n    }),\n    tap(() => {\n      this.refreshLoading = false;\n    }),\n    shareReplay(1)\n  );\n\n  private allFilterFragments: string[];\n\n  constructor(\n    public realtime: OperationBulkRealtimeService,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {\n    this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());\n  }\n\n  filterByType(bulkOperations: IOperationBulk[], typeFilter) {\n    const flattenedFragments: string[] = this.flattenFilterFragments(typeFilter);\n    if (\n      // return data unfiltered if no filters selected...\n      !flattenedFragments.length ||\n      // ...or when all filters are selected\n      this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))\n    ) {\n      return bulkOperations;\n    }\n\n    const filteredData = bulkOperations.filter(item => {\n      return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));\n    });\n\n    return filteredData;\n  }\n\n  resetFilter() {\n    this.statusFilter$.next(null);\n    this.timeFilter$.next(null);\n    this.typeFilter$.next(null);\n\n    this.datePicker.clearFilter();\n    this.selectedTypeFilters = this.getTypeFilters();\n    this.statusFilter.statusOptions.map(option => {\n      option.selected = false;\n      return option;\n    });\n  }\n\n  isFilterApplied() {\n    return (\n      this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue()\n    );\n  }\n\n  filter(statusFilters, timeFilter) {\n    const status =\n      statusFilters && statusFilters.length > 0\n        ? {\n            generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))\n          }\n        : {};\n\n    const time = timeFilter\n      ? {\n          ...(timeFilter.dateFrom && {\n            dateFrom: timeFilter.dateFrom.toISOString()\n          }),\n          ...(timeFilter.dateTo && {\n            dateTo: timeFilter.dateTo.toISOString()\n          })\n        }\n      : {};\n    return this.getBulkOperations({ ...status, ...time });\n  }\n\n  getBulkOperations(filter?) {\n    return this.bulkOperationsService.getBulkOperations(filter);\n  }\n\n  getTypeFilters() {\n    return this.bulkOperationsService.getBulkTypes();\n  }\n\n  addBulkOperation() {\n    this.bulkOperationModalsService.showNewBulkOperationModal();\n  }\n\n  openFailedOperation(failedParentId) {\n    this.listItems.forEach(item => {\n      if (item.bulkOperation.id === failedParentId) {\n        item.listItem.collapsed = false;\n        item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    });\n  }\n\n  compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number {\n    return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();\n  }\n\n  private flattenFilterFragments(filters: OperationType[]): string[] {\n    return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { gettext, Tab } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-bulk-operation-details-tabs',\n  templateUrl: './bulk-operation-details-tabs.component.html'\n})\nexport class BulkOperationDetailsTabsComponent implements OnInit {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('details', { static: true }) detailsTemplate: any;\n  @ViewChild('audit', { static: true }) auditTemplate: any;\n\n  tabs: Tab[] = [];\n  template: ViewContainerRef;\n\n  ngOnInit(): void {\n    this.template = this.detailsTemplate;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        path: null,\n        icon: 'asterisk',\n        template: this.detailsTemplate\n      },\n      {\n        label: gettext('History of changes'),\n        path: null,\n        icon: 'archive',\n        template: this.auditTemplate\n      }\n    ];\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, IOperationBulk } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-bulk-operation-details',\n  templateUrl: './bulk-operation-details.component.html'\n})\nexport class BulkOperationDetailsComponent {\n  allFilterIsSelected: boolean = false;\n  collapsed: boolean;\n  device: IManagedObject;\n\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  scrollToRetriedFromOperation(failedOperationId) {\n    this.showFailedOperation.emit(failedOperationId);\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\n\nexport const SINGLE_OP_STATUS_NAMES = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful'),\n  ALL: gettext('All')\n};\n\nexport const SINGLE_OP_STATUS_PROPERTIES = [\n  {\n    label: SINGLE_OP_STATUS_NAMES.PENDING,\n    iconClass: 'fa fw fa-clock-o text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.EXECUTING,\n    iconClass: 'fa fw fa-refresh text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,\n    iconClass: 'fa fw fa-check-circle text-success',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.FAILED,\n    iconClass: 'fa fw fa-exclamation-circle text-danger',\n    selected: false\n  }\n];\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperation, IOperationBulk, IResultList } from '@c8y/client';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n\n      this.statusFilter.preset(\n        typeFilter === this.singleOperationStatusNames.ALL\n          ? []\n          : [{ label: typeFilter } as IStatusOption]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.singleOperationStatusNames.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.singleOperationStatusNames.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.SUCCESSFUL;\n    }\n\n    return this.singleOperationStatusNames.ALL;\n  }\n\n  async getOperationsByStatus(filter: IStatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport {\n  BulkOperationsService,\n  C8Y_BULK_TYPE_FRAGMENTS\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { omit } from 'lodash-es';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  showIfTextTruncated = false;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  iconClass: string;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.device = await this.getDeviceMO(this.operation.deviceId);\n  }\n\n  ngAfterViewInit() {\n    this.isTextTruncated();\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.bulkOperationsService.createSingleOperation(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n\n  getIconClass() {\n    return this.singleOperationsStatusProperties.find(\n      operationProperties => operationProperties.label.toUpperCase() === this.operation.status\n    ).iconClass;\n  }\n\n  private async getDeviceMO(deviceId) {\n    const inventoryMO = await this.bulkOperationsService.getManagedObject(deviceId);\n    if (inventoryMO) {\n      return inventoryMO.data;\n    }\n  }\n\n  private isTextTruncated() {\n    if (this.operation.failureReason) {\n      const el = this.failureReasonRef.nativeElement;\n      this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;\n    }\n  }\n}\n","import { Component, EventEmitter, Output, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from '../modals/bulk-operation-modals.service';\n\n@Component({\n  selector: 'c8y-bulk-operation-type-list',\n  templateUrl: './bulk-operation-type-list.component.html'\n})\nexport class BulkOperationTypeListComponent implements OnInit {\n  @Output() onCustomType: EventEmitter<OperationType> = new EventEmitter();\n  bulkList: OperationType[] = [];\n\n  constructor(\n    private router: Router,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {}\n\n  ngOnInit() {\n    this.bulkList = this.bulkOperationsService.getBulkTypes();\n  }\n\n  handleClick(item: OperationType) {\n    if (item.path) {\n      this.bulkOperationModalsService.hideNewBulkOperationModal();\n      this.router.navigateByUrl(item.path);\n    } else if (item.component) {\n      this.onCustomType.emit(item);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, Route } from '@c8y/ngx-components';\nimport { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\nimport { BulkOperationsListComponent } from './bulk-operations-list.component';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BulkOperationDetailsTabsComponent } from './bulk-operation-details-tabs.component';\nimport { BulkOperationDetailsComponent } from './bulk-operation-details.component';\nimport { SingleOperationsListComponent } from './single-operations-list.component';\nimport { SingleOperationItemComponent } from './single-operation-item.component';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\nimport { BulkOperationTypeListComponent } from './type-list/bulk-operation-type-list.component';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationsModalComponent } from './modals/bulk-operations-modal.component';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\n\nexport const bulkOperationListRoutes: Route[] = [\n  {\n    path: 'devicecontrol/bulk',\n    component: BulkOperationsListComponent\n  }\n];\n\n/**\n * This module allows for displaying the list of bulk operations and their details.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    StatusFilterModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule,\n    RouterModule.forChild(bulkOperationListRoutes)\n  ],\n  providers: [BulkOperationDetailsService, BulkOperationModalsService],\n  declarations: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  entryComponents: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  exports: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ]\n})\nexport class BulkOperationsListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["BulkOperationType","tslib_1.__decorate","BulkOperationsService","tslib_1.__extends","SingleOperationDetailsModule","OperationSummaryModule","BulkOperationSchedulerModule","BulkOperationDetailsService","BulkOperationsListModule","BulkOperationsServiceModule","tslib_1.__param","StatusFilterComponent","StatusFilterModule"],"mappings":"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"}