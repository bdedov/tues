import { __awaiter, __generator, __decorate, __read } from 'tslib';
import { Injectable, EventEmitter, Component, Input, NgModule } from '@angular/core';
import { NavigatorNode, gettext, AlertService, ModalSelectionMode, BreadcrumbService, Status, ModalService, ManagedObjectRealtimeService, ViewContext, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { QueriesUtil, OperationStatus, InventoryService, OperationService, Realtime } from '@c8y/client';
import { get, sortBy, toArray, assign, concat, uniqWith, isEqual, has, isEmpty, cloneDeep } from 'lodash-es';
import { Subject, BehaviorSubject, pipe } from 'rxjs';
import { switchMap, map, take, distinctUntilChanged, shareReplay, tap, filter } from 'rxjs/operators';
import { RepositoryType, RepositoryService, RepositorySelectModalComponent, RepositoryModule } from '@c8y/ngx-components/repository';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { Location } from '@angular/common';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { TranslateService } from '@ngx-translate/core';
import { SingleOperationDetailsModule } from '@c8y/ngx-components/operations/single-operation-details';

var DeviceProfileNavigationFactory = /** @class */ (function () {
    function DeviceProfileNavigationFactory() {
    }
    DeviceProfileNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.nodeItem) {
                    this.nodeItem = new NavigatorNode({
                        label: gettext('Device profiles'),
                        path: '/device-profiles',
                        icon: 'c8y-device-profile',
                        parent: gettext('Management')
                    });
                }
                return [2 /*return*/, this.nodeItem];
            });
        });
    };
    DeviceProfileNavigationFactory = __decorate([
        Injectable()
    ], DeviceProfileNavigationFactory);
    return DeviceProfileNavigationFactory;
}());

var DeviceProfileService = /** @class */ (function () {
    function DeviceProfileService(inventoryService, operationService, alertService) {
        this.inventoryService = inventoryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.NOT_INSTALLED_WARNING = gettext('Not installed on the device');
        this.VERSION_MISSMATCH_WARNING = gettext('Version mismatch');
        this.SAME_URL_WARNING = gettext('Url is the same');
        this.queriesUtil = new QueriesUtil();
    }
    DeviceProfileService.prototype.createDeviceProfile = function (deviceProfile) {
        return this.inventoryService.create(deviceProfile);
    };
    DeviceProfileService.prototype.getDeviceProfilesByDeviceType = function (deviceType) {
        var deviceTypeFilter = {
            __or: [{ 'c8y_Filter.type': deviceType }, { __not: { __has: 'c8y_Filter.type' } }]
        };
        return this.getDeviceProfiles(deviceTypeFilter);
    };
    DeviceProfileService.prototype.getDeviceProfiles = function (andQuery) {
        var query = {
            type: 'c8y_Profile'
        };
        var filter = {
            pageSize: 100,
            withTotalPages: true
        };
        query = this.queriesUtil.addAndFilter(query, andQuery || {});
        return this.inventoryService.listQuery(query, filter);
    };
    DeviceProfileService.prototype.getProfileOperation = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, operation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            deviceId: deviceId,
                            fragmentType: 'c8y_DeviceProfile',
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            revert: true,
                            pageSize: 1
                        };
                        return [4 /*yield*/, this.operationService.list(filter)];
                    case 1:
                        operation = (_a.sent()).data[0];
                        return [2 /*return*/, operation && operation.status !== OperationStatus.SUCCESSFUL ? operation : undefined];
                }
            });
        });
    };
    DeviceProfileService.prototype.createProfileOperation = function (device, deviceProfile) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, operationCfg, data, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationCfg = {
                            deviceId: device.id,
                            profileId: deviceProfile.id,
                            profileName: deviceProfile.name,
                            c8y_DeviceProfile: deviceProfile.c8y_DeviceProfile,
                            description: "Assign device profile " + deviceProfile.name + " to device " + device.name
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceProfileService.prototype.getFirmwareItems = function (device, selectedProfile) {
        var deviceFirmware = device.c8y_Firmware;
        var profileFirmware = get(selectedProfile, 'c8y_DeviceProfile.firmware');
        var deviceItems = [];
        var profileItems = [];
        if (deviceFirmware) {
            deviceItems.push(deviceFirmware);
        }
        if (profileFirmware) {
            profileItems.push(profileFirmware);
        }
        return this.createProfileComparison(deviceItems, profileItems, 'name', 'version', this.getAlert('firmware'));
    };
    DeviceProfileService.prototype.getSoftwareItems = function (device, selectedProfile) {
        var deviceSoftware = device.c8y_SoftwareList;
        var profileSoftware = get(selectedProfile, 'c8y_DeviceProfile.software');
        return this.createProfileComparison(deviceSoftware, profileSoftware, 'name', 'version', this.getAlert('software'));
    };
    DeviceProfileService.prototype.getConfigurationItems = function (device, selectedProfile) {
        var deviceConfiguration = [];
        Object.keys(device).forEach(function (key) {
            if (key.slice(0, 18) === 'c8y_Configuration_') {
                deviceConfiguration.push(device[key]);
            }
        });
        var profileConfiguration = get(selectedProfile, 'c8y_DeviceProfile.configuration');
        return this.createProfileComparison(deviceConfiguration, profileConfiguration, 'url', 'type', this.getAlert('configuration'));
    };
    DeviceProfileService.prototype.getAlert = function (itemType) {
        var _this = this;
        var notInstalled = function (comparisionResult) {
            return !comparisionResult.device ? _this.NOT_INSTALLED_WARNING : '';
        };
        switch (itemType) {
            case 'firmware':
            case 'software':
                return function (comparisionResult) {
                    return comparisionResult.device && comparisionResult.profile && comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails ?
                        _this.VERSION_MISSMATCH_WARNING : notInstalled(comparisionResult);
                };
            case 'configuration':
                return function (comparisionResult) {
                    return comparisionResult.device && comparisionResult.profile &&
                        ((comparisionResult.device.itemName !== comparisionResult.profile.itemName) ||
                            (comparisionResult.device.itemDetails !== comparisionResult.profile.itemDetails)) ?
                        _this.SAME_URL_WARNING : notInstalled(comparisionResult);
                };
            default:
                return notInstalled;
        }
    };
    DeviceProfileService.prototype.createProfileComparison = function (deviceItems, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
        if (deviceItems === void 0) { deviceItems = []; }
        if (profileItems === void 0) { profileItems = []; }
        var comparisonObj = this.createProfileComparisonFromDeviceItems(deviceItems, mergeByProperty, propertyNameWithDetails);
        var extendedComparisonObj = this.extendProfileComparisonWithProfileItems(comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert);
        return sortBy(toArray(extendedComparisonObj), 'name');
    };
    DeviceProfileService.prototype.createProfileComparisonFromDeviceItems = function (deviceItems, mergeByProperty, propertyNameWithDetails) {
        return deviceItems.reduce(function (comapritionItem, deviceItem) {
            var _a;
            return Object.assign(comapritionItem, (_a = {},
                _a[deviceItem[mergeByProperty]] = {
                    device: {
                        itemName: deviceItem.name,
                        itemDetails: deviceItem[propertyNameWithDetails],
                        itemUrl: deviceItem.url
                    },
                    profile: undefined,
                },
                _a));
        }, {});
    };
    DeviceProfileService.prototype.extendProfileComparisonWithProfileItems = function (comparisonObj, profileItems, mergeByProperty, propertyNameWithDetails, getAlert) {
        profileItems.forEach(function (profileItem) {
            var comparisionResult = {
                profile: {
                    itemName: profileItem.name,
                    itemDetails: profileItem[propertyNameWithDetails],
                    itemUrl: profileItem.url
                },
                device: comparisonObj[profileItem[mergeByProperty]] ? comparisonObj[profileItem[mergeByProperty]].device : undefined,
            };
            comparisionResult.comparisonAlert = getAlert(comparisionResult);
            comparisonObj[profileItem[mergeByProperty]] = comparisionResult;
        });
        return comparisonObj;
    };
    DeviceProfileService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: OperationService },
        { type: AlertService }
    ]; };
    DeviceProfileService = __decorate([
        Injectable()
    ], DeviceProfileService);
    return DeviceProfileService;
}());

var SelectConfigurationModalComponent = /** @class */ (function () {
    function SelectConfigurationModalComponent(repositoryService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.title = gettext('Select configuration');
        this.load = new Subject();
        this.configurations = this.load.pipe(switchMap(function () { return _this.getItems(); }), map(function (_a) {
            var data = _a.data;
            return _this.aggregate(data);
        }));
        this.resultEmitter = new EventEmitter();
        this.deviceTypeQuery = {};
        this.searchQuery = {};
        this.labels = { ok: gettext('Save') };
        this.queriesUtil = new QueriesUtil();
    }
    SelectConfigurationModalComponent.prototype.search = function (searchTerm) {
        if (!searchTerm) {
            this.searchQuery = {};
        }
        else {
            this.searchQuery = this.queriesUtil.addOrFilter({ name: "*" + searchTerm + "*" }, { configurationType: "*" + searchTerm + "*" });
        }
        this.load.next();
    };
    SelectConfigurationModalComponent.prototype.result = function (selectedItems) {
        this.resultEmitter.emit(selectedItems);
    };
    SelectConfigurationModalComponent.prototype.getItems = function () {
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, {
            query: this.queriesUtil.addOrFilter(this.deviceTypeQuery, this.searchQuery),
            params: { pageSize: 100 }
        });
    };
    SelectConfigurationModalComponent.prototype.aggregate = function (mos) {
        var selectedItems = this.selected;
        return mos.reduce(function (acc, curr) {
            curr.configurationType = curr.configurationType || curr.name;
            var selected = selectedItems && selectedItems.filter(function (val) { return val.url === curr.url; }).length > 0;
            var selectModalOption = {
                body: [{ value: curr.name }],
                obj: curr,
                selected: selected
            };
            var selectModalObject = acc.find(function (val) { return val.body[0].value === curr.configurationType; });
            if (selectModalObject) {
                selectModalObject.options.push(selectModalOption);
            }
            else {
                selectModalObject = {
                    groupId: curr.id,
                    body: [{ value: curr.configurationType }],
                    options: [selectModalOption]
                };
                acc.push(selectModalObject);
            }
            return acc;
        }, []);
    };
    SelectConfigurationModalComponent.ctorParameters = function () { return [
        { type: RepositoryService }
    ]; };
    SelectConfigurationModalComponent = __decorate([
        Component({
            selector: 'c8y-select-configuration-modal',
            template: "<c8y-select-modal\n  [icon]=\"'gears'\"\n  [title]=\"title\"\n  [items]=\"configurations | async\"\n  [mode]=\"'multi'\"\n  (result)=\"result($event)\"\n  (search)=\"search($event)\"\n  [disableSelected]=\"true\"\n  [labels]=\"labels\"\n>\n</c8y-select-modal>\n"
        })
    ], SelectConfigurationModalComponent);
    return SelectConfigurationModalComponent;
}());

var DeviceProfileOperation;
(function (DeviceProfileOperation) {
    DeviceProfileOperation["APPLY_PROFILE"] = "c8y_DeviceProfile";
})(DeviceProfileOperation || (DeviceProfileOperation = {}));

var DeviceProfileComponent = /** @class */ (function () {
    function DeviceProfileComponent(route, alertService, inventoryService, location, breadcrumbService, bsModal, repositoryService) {
        this.route = route;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.breadcrumbService = breadcrumbService;
        this.bsModal = bsModal;
        this.repositoryService = repositoryService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.queriesUtil = new QueriesUtil();
    }
    DeviceProfileComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var profileId, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        profileId = this.route.snapshot.paramMap.get('id');
                        _a = this;
                        return [4 /*yield*/, this.getDeviceProfile(profileId)];
                    case 1:
                        _a.deviceProfile = (_b.sent());
                        if (this.deviceProfile) {
                            this.profileName = this.deviceProfile.name;
                            if (!this.deviceProfile.c8y_DeviceProfile.software) {
                                this.deviceProfile.c8y_DeviceProfile.software = [];
                            }
                            if (!this.deviceProfile.c8y_DeviceProfile.configuration) {
                                this.deviceProfile.c8y_DeviceProfile.configuration = [];
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileComponent.prototype.addFirmware = function () {
        var _this = this;
        var initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.FIRMWARE),
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersionsFn$: function (modalDialog) {
                return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.FIRMWARE);
            },
            icon: 'c8y-firmware',
            title: gettext('Select firmware'),
            mode: ModalSelectionMode.SINGLE
        };
        var modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState: initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(function (firmwareList) {
            var _a = __read(firmwareList, 1), firmware = _a[0];
            if (!firmware) {
                return;
            }
            var deviceProfilePartial = {
                c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, {
                firmware: {
                    name: firmware.name,
                    version: firmware.version,
                    url: firmware.url,
                    isPatch: firmware.isPatch,
                    patchDependency: firmware.patchDependency
                }
            });
            _this.updateDeviceProfile(deviceProfilePartial);
        });
    };
    DeviceProfileComponent.prototype.getRepositoryEntriesWithVersions$ = function (searchTerm$, repoType) {
        var _this = this;
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(function (searchTerm) {
            return _this.repositoryService.listRepositoryEntries(repoType, {
                partialName: searchTerm,
                params: { pageSize: 100 },
                skipLegacy: true
            });
        }), map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), shareReplay(1));
    };
    DeviceProfileComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
        var _this = this;
        mos.forEach(function (mo) {
            mo.versions = _this.repositoryService.listBaseVersions(mo);
        });
        return mos;
    };
    DeviceProfileComponent.prototype.addConfiguration = function () {
        var _this = this;
        var modal = this.bsModal.show(SelectConfigurationModalComponent, {
            ignoreBackdropClick: true
        });
        modal.content.deviceTypeQuery = this.getDeviceTypeQuery(RepositoryType.CONFIGURATION);
        modal.content.selected = this.deviceProfile.c8y_DeviceProfile.configuration;
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(function (selectedConfigurations) {
            var selectedMapped = selectedConfigurations.map(function (selectedItem) {
                return assign({
                    url: selectedItem.url,
                    name: selectedItem.name
                }, selectedItem.configurationType ? { type: selectedItem.configurationType } : {});
            });
            var merged = concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.configuration || []);
            var configuration = uniqWith(merged, function (arrVal, othVal) {
                return arrVal.type && othVal.type && arrVal.type === othVal.type;
            });
            var deviceProfilePartial = {
                c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { configuration: configuration });
            _this.updateDeviceProfile(deviceProfilePartial);
        });
    };
    DeviceProfileComponent.prototype.addSoftware = function () {
        var _this = this;
        var initialState = {
            deviceTypeQuery: this.getDeviceTypeQuery(RepositoryType.SOFTWARE),
            repositoryType: RepositoryType.SOFTWARE,
            repositoryEntriesWithVersionsFn$: function (modalDialog) {
                return _this.getRepositoryEntriesWithVersions$(modalDialog.content.searchTerm, RepositoryType.SOFTWARE);
            },
            selected: this.deviceProfile.c8y_DeviceProfile.software,
            icon: 'c8y-tools',
            title: gettext('Select software'),
            mode: ModalSelectionMode.MULTI
        };
        var modal = this.bsModal.show(RepositorySelectModalComponent, {
            ignoreBackdropClick: true,
            initialState: initialState
        });
        if (initialState.repositoryEntriesWithVersionsFn$) {
            modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
        }
        modal.content.load.next();
        modal.content.resultEmitter.pipe(take(1)).subscribe(function (selectedSoftware) {
            var selectedMapped = selectedSoftware.map(function (selectedItem) {
                return {
                    name: selectedItem.name,
                    version: selectedItem.version,
                    url: selectedItem.url,
                    action: 'install'
                };
            });
            var merged = concat(selectedMapped, _this.deviceProfile.c8y_DeviceProfile.software || []);
            var software = uniqWith(merged, function (arrVal, othVal) {
                return arrVal.name && othVal.name && arrVal.name === othVal.name;
            });
            var deviceProfilePartial = {
                c8y_DeviceProfile: _this.deviceProfile.c8y_DeviceProfile || {}
            };
            assign(deviceProfilePartial.c8y_DeviceProfile, { software: software });
            _this.updateDeviceProfile(deviceProfilePartial);
        });
    };
    Object.defineProperty(DeviceProfileComponent.prototype, "isDeviceProfileEmpty", {
        get: function () {
            var isSoftware = this.deviceProfile.c8y_DeviceProfile.software &&
                this.deviceProfile.c8y_DeviceProfile.software.length > 0;
            var isFirmware = Boolean(this.deviceProfile.c8y_DeviceProfile.firmware);
            var isConfiguration = this.deviceProfile.c8y_DeviceProfile.configuration &&
                this.deviceProfile.c8y_DeviceProfile.configuration.length > 0;
            return isSoftware || isFirmware || isConfiguration;
        },
        enumerable: true,
        configurable: true
    });
    DeviceProfileComponent.prototype.removeItem = function (removedItem, category) {
        var deviceProfilePartial = {
            c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile
        };
        var filtered = deviceProfilePartial.c8y_DeviceProfile[category].filter(function (item) { return !isEqual(removedItem, item); });
        deviceProfilePartial.c8y_DeviceProfile[category] = filtered;
        this.updateDeviceProfile(deviceProfilePartial);
    };
    DeviceProfileComponent.prototype.removeFirmware = function () {
        delete this.deviceProfile.c8y_DeviceProfile.firmware;
        this.updateDeviceProfile({ c8y_DeviceProfile: this.deviceProfile.c8y_DeviceProfile });
    };
    DeviceProfileComponent.prototype.updateDeviceProfile = function (partialDeviceProfile) {
        return __awaiter(this, void 0, void 0, function () {
            var data, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (partialDeviceProfile.c8y_Filter && partialDeviceProfile.c8y_Filter.type === '') {
                            delete partialDeviceProfile.c8y_Filter.type;
                        }
                        Object.assign(partialDeviceProfile, { id: this.deviceProfile.id });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.inventoryService.update(partialDeviceProfile)];
                    case 2:
                        data = (_a.sent()).data;
                        this.deviceProfile = data;
                        this.profileName = this.deviceProfile.name;
                        this.alertService.success(gettext('Device profile changed.'));
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileComponent.prototype.getDeviceProfile = function (profileId) {
        return __awaiter(this, void 0, void 0, function () {
            var data, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.inventoryService.detail(profileId)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                    case 2:
                        ex_2 = _a.sent();
                        this.alertService.addServerFailure(ex_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileComponent.prototype.getDeviceTypeQuery = function (repositoryType) {
        if (has(this.deviceProfile, 'c8y_Filter.type') &&
            !isEmpty(this.deviceProfile.c8y_Filter.type)) {
            if (repositoryType === RepositoryType.CONFIGURATION) {
                return this.queriesUtil.addOrFilter({ deviceType: this.deviceProfile.c8y_Filter.type }, { __not: { __has: "deviceType" } });
            }
            else {
                return this.queriesUtil.addOrFilter({ 'c8y_Filter.type': this.deviceProfile.c8y_Filter.type }, { __not: { __has: "c8y_Filter.type" } });
            }
        }
        return {};
    };
    DeviceProfileComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: AlertService },
        { type: InventoryService },
        { type: Location },
        { type: BreadcrumbService },
        { type: BsModalService },
        { type: RepositoryService }
    ]; };
    DeviceProfileComponent = __decorate([
        Component({
            selector: 'c8y-device-profile',
            template: "<c8y-title>{{ profileName }}</c8y-title>\n<c8y-breadcrumb>\n  <c8y-breadcrumb-item\n    [icon]=\"'c8y-device-profile'\"\n    [label]=\"'Device profiles' | translate\"\n    [path]=\"'device-profiles'\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<div *ngIf=\"deviceProfile\">\n  <div class=\"card m-b-4\" *ngIf=\"deviceProfile\">\n    <div class=\"card-header separator\">\n      <h4 translate>Name and device type</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n          <form #editNameForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.name\"\n                  name=\"name\"\n                  required\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      updateDeviceProfile({ name: deviceProfile.name });\n                      editNameForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"editNameForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n        <div class=\"col-md-4\">\n          <form #editTypeForm=\"ngForm\">\n            <c8y-form-group>\n              <label class=\"control-label\">\n                {{ 'Device type' | translate }}\n                <button\n                  class=\"btn btn-clean text-primary\"\n                  popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n                  triggers=\"focus\"\n                  container=\"body\"\n                  placement=\"right\"\n                >\n                  <i [c8yIcon]=\"'question-circle-o'\"></i>\n                </button>\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n                  name=\"type\"\n                  placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n                  [disabled]=\"isDeviceProfileEmpty\"\n                />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      updateDeviceProfile({ c8y_Filter: { type: deviceProfile.c8y_Filter.type } });\n                      editTypeForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"isDeviceProfileEmpty\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-firmware'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Firmware\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group *ngIf=\"deviceProfile.c8y_DeviceProfile.firmware\">\n        <c8y-li>\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-firmware'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 left-m-xs\">\n            <div class=\"col-6\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.name }}\"\n              >\n                {{ deviceProfile.c8y_DeviceProfile.firmware.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span\n                class=\"text-truncate\"\n                title=\"{{ deviceProfile.c8y_DeviceProfile.firmware.version }}\"\n              >\n                <span class=\"text-label-small m-r-4\" translate>Version</span>\n                {{ deviceProfile.c8y_DeviceProfile.firmware.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`firmware`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover\"\n                title=\"{{ 'Remove`firmware`' | translate }}\"\n                (click)=\"removeFirmware()\"\n              >\n                <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\" *ngIf=\"!deviceProfile.c8y_DeviceProfile.firmware\">\n        <button\n          title=\"{{ 'Add firmware' | translate }}\"\n          class=\"btn-add-block\"\n          (click)=\"addFirmware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'No firmware defined. Add firmware' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card m-b-4\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'c8y-tools'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Software\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group>\n        <c8y-li *ngFor=\"let software of deviceProfile.c8y_DeviceProfile.software;\">\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'c8y-tools'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50 left-m-xs\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"text-truncate\" title=\"{{ software.version }}\">\n                <span class=\"text-label-small m-r-8\" translate>Version</span>\n                {{ software.version }}\n              </span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                ((click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`software`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs \">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`software`' | translate }}\"\n                (click)=\"removeItem(software, 'software')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add software' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addSoftware()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span *ngIf=\"deviceProfile.c8y_DeviceProfile.software?.length === 0\">\n            {{ 'No software defined.' | translate }}&nbsp;\n          </span>\n          {{ 'Add software' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-header separator\">\n      <div class=\"card-icon\">\n        <i [c8yIcon]=\"'gears'\" class=\"c8y-icon-duocolor\"></i>\n      </div>\n      <h4 class=\"card-title\" translate>\n        Configuration\n      </h4>\n    </div>\n    <div class=\"card-block p-t-0\">\n      <c8y-list-group class=\"m-b-8\">\n        <c8y-li\n          *ngFor=\"let configuration of deviceProfile.c8y_DeviceProfile.configuration;\"\n        >\n          <c8y-li-icon>\n            <i [c8yIcon]=\"'gears'\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-6\">\n              <span class=\"text-truncate\" title=\"{{ configuration.name }}\">\n                {{ configuration.name }}\n              </span>\n            </div>\n            <div class=\"col-5 flex-row\">\n              <span class=\"label label-info\">{{ configuration.type }}</span>\n              <button\n                class=\"btn btn-danger btn-xs visible-xs flex-item-right m-r-8 m-t-8\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i> {{ 'Remove`configuration`' | translate }}\n              </button>\n            </div>\n            <div class=\"flex-item-right p-r-8 hidden-xs\">\n              <button\n                class=\"btn btn-dot showOnHover text-danger\"\n                title=\"{{ 'Remove`configuration`' | translate }}\"\n                (click)=\"removeItem(configuration, 'configuration')\"\n              >\n                <i c8yIcon=\"minus-circle\"></i>\n              </button>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n      <div class=\"p-t-8\">\n        <button\n          title=\"{{ 'Add configuration' | translate }}\"\n          class=\"btn-add-block m-b-0\"\n          (click)=\"addConfiguration()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i>\n          <span *ngIf=\"deviceProfile.c8y_DeviceProfile.configuration?.length === 0\">\n            {{ 'No configuration defined.' | translate }}&nbsp;</span\n          >\n          {{ 'Add configuration' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], DeviceProfileComponent);
    return DeviceProfileComponent;
}());

var AddDeviceProfileComponent = /** @class */ (function () {
    function AddDeviceProfileComponent(modal, deviceProfileService) {
        var _this = this;
        this.modal = modal;
        this.deviceProfileService = deviceProfileService;
        this.DEVICE_TYPE_POPOVER = gettext('The device profile will be available for assignments on devices of the specified type. Otherwise, it will be available for all device types.');
        this.deviceProfile = {
            name: '',
            type: 'c8y_Profile',
            c8y_Filter: {},
            c8y_DeviceProfile: {}
        };
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    AddDeviceProfileComponent.prototype.create = function () {
        return __awaiter(this, void 0, void 0, function () {
            var mo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(this.deviceProfile)];
                    case 1:
                        mo = (_a.sent()).data;
                        this._save(mo.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    AddDeviceProfileComponent.prototype.close = function () {
        this._cancel();
        this.modal.hide();
    };
    AddDeviceProfileComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: DeviceProfileService }
    ]; };
    AddDeviceProfileComponent = __decorate([
        Component({
            selector: 'c8y-add-device-profile',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i [c8yIcon]=\"'c8y-device-profile'\"></i>\n    <h4 translate>\n      Add device profile\n    </h4>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <form #createDeviceProfile=\"ngForm\">\n        <c8y-form-group>\n          <label translate for=\"name\">Name</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            class=\"form-control\"\n            autocomplete=\"off\"\n            name=\"name\"\n            [(ngModel)]=\"deviceProfile.name\"\n            placeholder=\"{{ 'e.g. My device profile' | translate }}\"\n            required\n          />\n        </c8y-form-group>\n        <c8y-form-group>\n          <label>\n            {{ 'Device type' | translate }}\n            <button\n              class=\"btn btn-clean\"\n              popover=\"{{ DEVICE_TYPE_POPOVER | translate }}\"\n              triggers=\"focus\"\n            >\n              <i [c8yIcon]=\"'question-circle-o'\"></i>\n            </button>\n          </label>\n          <input\n            id=\"deviceType\"\n            class=\"form-control\"\n            name=\"deviceType\"\n            [(ngModel)]=\"deviceProfile.c8y_Filter.type\"\n            placeholder=\"{{ 'e.g.' | translate }} c8y_Linux\"\n          />\n        </c8y-form-group>\n      </form>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n\n    <button\n      title=\"{{ 'Continue' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"create()\"\n      [disabled]=\"createDeviceProfile.form.invalid\"\n      translate\n    >\n      Continue\n    </button>\n  </div>\n</div>\n"
        })
    ], AddDeviceProfileComponent);
    return AddDeviceProfileComponent;
}());

var DeviceProfileListComponent = /** @class */ (function () {
    function DeviceProfileListComponent(inventoryService, translateService, modalService, alertService, bsModalService, router, deviceProfileService) {
        var _this = this;
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.modalService = modalService;
        this.alertService = alertService;
        this.bsModalService = bsModalService;
        this.router = router;
        this.deviceProfileService = deviceProfileService;
        this.reloading = false;
        this.reload = new BehaviorSubject(null);
        this.deviceProfiles$ = this.reload.pipe(tap(function () { return (_this.reloading = true); }), switchMap(function () { return _this.deviceProfileService.getDeviceProfiles(); }), tap(function () { return (_this.reloading = false); }));
    }
    DeviceProfileListComponent.prototype.ngOnInit = function () {
        this.loadDeviceProfiles();
    };
    DeviceProfileListComponent.prototype.loadDeviceProfiles = function () {
        this.reload.next();
    };
    DeviceProfileListComponent.prototype.createDeviceProfile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modal, profileId, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modal = this.bsModalService.show(AddDeviceProfileComponent, {
                            class: 'modal-sm'
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        profileId = _a.sent();
                        modal.close();
                        this.router.navigateByUrl("/device-profiles/" + profileId);
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileListComponent.prototype.duplicateDeviceProfile = function (deviceProfile) {
        return __awaiter(this, void 0, void 0, function () {
            var copy, mo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        copy = cloneDeep(deviceProfile);
                        copy.id = null;
                        copy.name = 'Duplicate of ' + deviceProfile.name;
                        return [4 /*yield*/, this.deviceProfileService.createDeviceProfile(copy)];
                    case 1:
                        mo = (_a.sent()).data;
                        this.router.navigateByUrl("/device-profiles/" + mo.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileListComponent.prototype.deleteDeviceProfile = function (deviceProfile) {
        return __awaiter(this, void 0, void 0, function () {
            var deviceProfileName, title, confirmationText, finalQuestion, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceProfileName = deviceProfile.name;
                        title = gettext('Delete device profile');
                        confirmationText = this.translateService.instant(gettext('You are about to delete a device profile "{{ deviceProfileName }}".'), { deviceProfileName: deviceProfileName });
                        finalQuestion = this.translateService.instant(gettext('Do you want to proceed?'));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.modalService.confirm(title, confirmationText + " " + finalQuestion, Status.DANGER, {
                                ok: gettext('Delete')
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.delete(deviceProfile.id)];
                    case 3:
                        _a.sent();
                        this.reload.next();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileListComponent.prototype.delete = function (profileId) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.inventoryService.delete(profileId)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Device profile deleted.'));
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        this.alertService.addServerFailure(ex_3);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DeviceProfileListComponent.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TranslateService },
        { type: ModalService },
        { type: AlertService },
        { type: BsModalService },
        { type: Router },
        { type: DeviceProfileService }
    ]; };
    DeviceProfileListComponent = __decorate([
        Component({
            selector: 'c8y-device-profile-list',
            template: "<c8y-title>{{ 'Device profiles' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"createDeviceProfile()\"\n    title=\"{{ 'Add device profile' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>\n    {{ 'Add device profile' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item\n  [placement]=\"'right'\">\n  <button class=\"btn btn-link\"\n    (click)=\"loadDeviceProfiles()\"\n    title=\"{{ 'Reload' | translate }}\">\n    <i\n      c8yIcon=\"refresh\"\n      [ngClass]=\"{ 'fa-spin': reloading }\"\n    ></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\"\n  *ngIf=\"(deviceProfiles$ | async)?.data.length === 0\"\n>\n  <h1 class=\"c8y-icon-duocolor\"\n    [c8yIcon]=\"'c8y-device-profile'\"\n  ></h1>\n  <h3 translate>\n    No device profiles available.\n  </h3>\n  <p translate>\n    Add a new device profile by clicking below.\n  </p>\n  <p>\n    <button class=\"btn btn-primary\"\n      title=\"{{ 'Add device profile' | translate }}\"\n      (click)=\"createDeviceProfile()\"\n      translate\n    >\n      Add device profile\n    </button>\n  </p>\n</div>\n\n<!-- DEVICE PROFILES LIST -->\n<c8y-list-group class=\"m-b-24\"\n  [ngClass]=\"{'dd-low': (deviceProfiles$ | async)?.data.length < 10 }\"\n>\n  <c8y-li class=\"page-sticky-header c8y-list__item--empty-actions hidden-xs\"\n    *ngIf=\"(deviceProfiles$ | async)?.data.length > 0\"\n  >\n    <c8y-li-icon>\n      <i class=\"fa\"></i>\n    </c8y-li-icon>\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">\n        {{'Device profile' | translate}}\n      </div>\n      <div class=\"col-6\">\n        {{'Device type' | translate}}\n      </div>\n    </c8y-li-body>\n  </c8y-li>\n  <c8y-li *c8yFor=\"let deviceProfile of deviceProfiles$\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-device-profile\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\" \n        title=\"{{ deviceProfile.name }}\"\n      >\n        <button class=\"btn-clean\"\n          routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n          style=\"max-width: inherit;\"\n        >\n          <span class=\"text-truncate\">\n            {{ deviceProfile.name }}\n          </span>\n        </button>\n      </div>\n      <div class=\"col-6\"\n        title=\"{{ deviceProfile.c8y_Filter?.type || '-' }}\"\n      >\n        <span class=\"text-label-small m-r-4 visible-xs\" translate>\n            Device type\n        </span>\n        <span class=\"text-truncate\"\n          *ngIf=\"deviceProfile.c8y_Filter?.type; else emptyText\"\n        >\n          {{ deviceProfile.c8y_Filter?.type}}\n      </span>\n      </div>\n      <ng-template #emptyText>\n        <small class=\"text-muted\">\n          <em>\n            {{ 'Undefined' | translate }}\n          </em>\n        </small>\n      </ng-template>\n    </c8y-li-body>\n\n    <c8y-li-action\n      routerLink=\"/device-profiles/{{ deviceProfile.id }}\"\n      icon=\"pencil\"\n      label=\"{{ 'Edit' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"duplicateDeviceProfile(deviceProfile)\"\n      icon=\"copy\"\n      label=\"{{ 'Duplicate' | translate }}\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      (click)=\"deleteDeviceProfile(deviceProfile)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n  </c8y-li>\n</c8y-list-group>\n"
        })
    ], DeviceProfileListComponent);
    return DeviceProfileListComponent;
}());

var DeviceProfileGuard = /** @class */ (function () {
    function DeviceProfileGuard() {
    }
    DeviceProfileGuard.prototype.canActivate = function (route, state) {
        var contextData = route.data.contextData || route.parent.data.contextData;
        if (!contextData) {
            return false;
        }
        return this.hasSupportedOperation(contextData, DeviceProfileOperation.APPLY_PROFILE);
    };
    DeviceProfileGuard.prototype.hasSupportedOperation = function (mo, operation) {
        var supported = mo.c8y_SupportedOperations || [];
        if (!supported) {
            return false;
        }
        return !!supported.find(function (supportedOperation) { return supportedOperation === operation; });
    };
    DeviceProfileGuard = __decorate([
        Injectable()
    ], DeviceProfileGuard);
    return DeviceProfileGuard;
}());

var DeviceTabProfileComponent = /** @class */ (function () {
    function DeviceTabProfileComponent(deviceRealtime, deviceProfileService, route, realtime, alertService) {
        this.deviceRealtime = deviceRealtime;
        this.deviceProfileService = deviceProfileService;
        this.route = route;
        this.realtime = realtime;
        this.alertService = alertService;
        this.firmwareItems = [];
        this.softwareItems = [];
        this.configurationItems = [];
        this.pattern = '';
        this.reloading = false;
    }
    DeviceTabProfileComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.device = this.route.snapshot.parent.data.contextData;
                this.getDeviceProfilesAndUpdateProfileItems();
                this.subscribeToManagedObjects();
                return [2 /*return*/];
            });
        });
    };
    DeviceTabProfileComponent.prototype.getDeviceProfilesAndUpdateProfileItems = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, profileId_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.reloading = true;
                        _a = this;
                        return [4 /*yield*/, this.deviceProfileService.getDeviceProfilesByDeviceType(this.device.type)];
                    case 1:
                        _a.deviceProfiles = _c.sent();
                        if (this.device.c8y_Profile) {
                            profileId_1 = this.device.c8y_Profile.profileId;
                            this.selectedProfile = this.deviceProfiles.data.find(function (mo) { return mo.id === profileId_1; });
                        }
                        this.updateProfileItems(this.device, this.selectedProfile);
                        _b = this;
                        return [4 /*yield*/, this.deviceProfileService.getProfileOperation(this.device.id)];
                    case 2:
                        _b.operation = _c.sent();
                        this.subscribeToOperations();
                        this.reloading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    DeviceTabProfileComponent.prototype.selectProfile = function (mo) {
        this.selectedProfile = mo;
        this.updateProfileItems(this.device, this.selectedProfile);
    };
    DeviceTabProfileComponent.prototype.createOperation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.deviceProfileService.createProfileOperation(this.device, this.selectedProfile)];
                    case 1:
                        _a.operation = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DeviceTabProfileComponent.prototype.setPipe = function (filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map(function (data) {
            return data.filter(function (mo) { return mo.name && mo.name.toLowerCase().indexOf(filterStr.toLowerCase()) > -1; });
        }));
    };
    DeviceTabProfileComponent.prototype.ngOnDestroy = function () {
        this.operationsSubscription.unsubscribe();
        this.moOnUpdateSubscription.unsubscribe();
        this.moOnDeleteSubscription.unsubscribe();
    };
    DeviceTabProfileComponent.prototype.updateProfileItems = function (device, profile) {
        this.firmwareItems = this.deviceProfileService.getFirmwareItems(device, profile);
        this.softwareItems = this.deviceProfileService.getSoftwareItems(device, profile);
        this.configurationItems = this.deviceProfileService.getConfigurationItems(device, profile);
    };
    DeviceTabProfileComponent.prototype.subscribeToManagedObjects = function () {
        var _this = this;
        this.moOnUpdateSubscription = this.deviceRealtime
            .onUpdate$(this.device.id)
            .subscribe(function (managedObject) {
            _this.updateProfileItems(managedObject, _this.selectedProfile);
        });
        this.moOnDeleteSubscription = this.deviceRealtime.onDelete$(this.device.id).subscribe(function () {
            _this.alertService.danger(gettext('This device has just been deleted. You will be redirected to "All devices" page now.'));
            window.location.href = '#/device';
        });
    };
    DeviceTabProfileComponent.prototype.subscribeToOperations = function () {
        var _this = this;
        var operationsChannel = "/operations/" + this.device.id;
        this.operationsSubscription = this.realtime
            .observable(operationsChannel)
            .pipe(filter(function (_a) {
            var data = _a.data;
            return data.c8y_DeviceProfile;
        }))
            .subscribe(function (_a) {
            var data = _a.data;
            _this.operation = data;
        });
    };
    DeviceTabProfileComponent.ctorParameters = function () { return [
        { type: ManagedObjectRealtimeService },
        { type: DeviceProfileService },
        { type: ActivatedRoute },
        { type: Realtime },
        { type: AlertService }
    ]; };
    DeviceTabProfileComponent = __decorate([
        Component({
            selector: 'c8y-device-tab-profile',
            template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"getDeviceProfilesAndUpdateProfileItems()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"deviceRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card card--grid--fullpage card--grid--fullpage card--grid grid__row--2-10--md\">\n  <div class=\"card--grid grid__col--6-6--md\">\n    <!-- AVAILABLE PROFILES -->\n    <div class=\"bg-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Device profile</h4>\n      </div>\n      <div class=\"p-16\">\n        <form #deviceProfileForm=\"ngForm\">\n          <div class=\"input-group\">\n            <c8y-typeahead\n              class=\"flex-grow\"\n              name=\"selectProfile\"\n              [(ngModel)]=\"selectedProfile\"\n              placeholder=\"{{ 'Select device profile' | translate }}\"\n              (onSearch)=\"setPipe($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                *c8yFor=\"let profile of deviceProfiles; pipe: filterPipe\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectProfile(profile); setPipe('')\"\n              >\n                <c8y-highlight\n                  [text]=\"profile.name || '&#45;&#45;'\"\n                  [pattern]=\"pattern\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <div class=\"input-group-btn\">\n              <button\n                class=\"btn btn-primary\"\n                (click)=\"createOperation()\"\n                title=\"{{ 'Assign device profile' | translate }}\"\n                [disabled]=\"!selectedProfile?.id\"\n                translate\n              >\n                Assign device profile\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- INSTALL PROFILE OPERATION -->\n    <div class=\"bg-gray-white\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Currently installed</h4>\n      </div>\n      <div class=\"card-block\">\n        <c8y-single-operation [operation]=\"operation\"></c8y-single-operation>\n      </div>\n    </div>\n  </div>\n  <div class=\"card--grid__inner-scroll flex-col no-align-items\">\n    <div class=\"d-contents\">\n      <!-- FIRMWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Firmware' | translate\"\n        [sectionIcon]=\"'c8y-firmware'\"\n        [emptyStateText]=\"'No firmware to display.' | translate\"\n        [emptyStateDetails]=\"'No firmware assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"firmwareItems\"\n        [isEmpty]=\"!selectedProfile?.c8y_DeviceProfile?.firmware?.name\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- SOFTWARE -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Software' | translate\"\n        [sectionIcon]=\"'c8y-tools'\"\n        [emptyStateText]=\"'No software to display.' | translate\"\n        [emptyStateDetails]=\"'No software assigned.' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"softwareItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.software ||\n          selectedProfile?.c8y_DeviceProfile?.software?.length === 0\n        \"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <div class=\"d-contents\">\n      <!-- CONFIGURATION -->\n      <c8y-device-tab-profile-detail\n        [sectionTitle]=\"'Configuration' | translate\"\n        [sectionIcon]=\"'gears'\"\n        [emptyStateText]=\"'No configuration to display' | translate\"\n        [emptyStateDetails]=\"'No configuration assigned' | translate\"\n        [isProfileSelected]=\"!!selectedProfile\"\n        [items]=\"configurationItems\"\n        [isEmpty]=\"\n          !selectedProfile?.c8y_DeviceProfile?.configuration ||\n          selectedProfile?.c8y_DeviceProfile?.configuration?.length === 0\n        \"\n        [showTextLabel]=\"false\"\n        class=\"d-contents\"\n      ></c8y-device-tab-profile-detail>\n    </div>\n    <!-- fill in the remanining vertical space when empty -->\n    <div class=\"card--grid grid__col--6-6--md flex-grow\">\n      <div class=\"bg-white\"></div>\n      <div class=\"bg-gray-white\"></div>\n    </div>\n  </div>\n</div>\n",
            providers: [ManagedObjectRealtimeService]
        })
    ], DeviceTabProfileComponent);
    return DeviceTabProfileComponent;
}());

var DeviceTabProfileDetailComponent = /** @class */ (function () {
    function DeviceTabProfileDetailComponent() {
        this.emptyStateText = '';
        this.emptyStateDetails = '';
        this.showTextLabel = true;
    }
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "sectionTitle", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "sectionIcon", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "emptyStateText", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "emptyStateDetails", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "isProfileSelected", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "isEmpty", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "items", void 0);
    __decorate([
        Input()
    ], DeviceTabProfileDetailComponent.prototype, "showTextLabel", void 0);
    DeviceTabProfileDetailComponent = __decorate([
        Component({
            selector: 'c8y-device-tab-profile-detail',
            template: "<div class=\"card--grid grid__col--6-6--md\">\n  <div class=\"bg-white card-block sticky-top\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-gray-white  card-block sticky-top hidden-xs hidden-sm\">\n    <h5 class=\"legend form-block\">{{ sectionTitle | translate }}</h5>\n  </div>\n  <div class=\"bg-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"bg-gray-white p-l-16 p-r-16\">\n    <hr class=\"m-0\" />\n  </div>\n  <div class=\"d-contents\" *ngIf=\"!isProfileSelected || isEmpty\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"c8y-empty-state text-left\">\n        <h1 [c8yIcon]=\"sectionIcon\" class=\"c8y-icon-duocolor\"></h1>\n        <p>\n          <span>{{ emptyStateText | translate }}</span\n          ><br />\n          <small *ngIf=\"isProfileSelected; else noItems\">\n            {{ emptyStateDetails | translate }}\n          </small>\n          <ng-template #noItems>\n            <small translate>No device profile selected</small>\n          </ng-template>\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"bg-gray-white\" *ngIf=\"items.length === 0\"></div>\n  <c8y-device-profile-item-list\n    *ngIf=\"items.length > 0\"\n    [icon]=\"sectionIcon\"\n    [comparisonResults]=\"items\"\n    [showProfileItems]=\"isProfileSelected && !isEmpty\"\n    [showTextLabel]=\"showTextLabel\"\n    class=\"d-contents\"\n  ></c8y-device-profile-item-list>\n  <div class=\"bg-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n  <div class=\"bg-gray-white p-t-24\" *ngIf=\"isProfileSelected && !isEmpty\"></div>\n</div>\n"
        })
    ], DeviceTabProfileDetailComponent);
    return DeviceTabProfileDetailComponent;
}());

var DeviceProfileItemListComponent = /** @class */ (function () {
    function DeviceProfileItemListComponent() {
    }
    __decorate([
        Input()
    ], DeviceProfileItemListComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], DeviceProfileItemListComponent.prototype, "comparisonResults", void 0);
    __decorate([
        Input()
    ], DeviceProfileItemListComponent.prototype, "showProfileItems", void 0);
    __decorate([
        Input()
    ], DeviceProfileItemListComponent.prototype, "showTextLabel", void 0);
    DeviceProfileItemListComponent = __decorate([
        Component({
            selector: 'c8y-device-profile-item-list',
            template: "<div *ngFor=\"let comparisonResult of comparisonResults\" class=\"d-contents\">\n  <div class=\"p-l-16 p-r-16\" *ngIf=\"showProfileItems\">\n    <div class=\"c8y-list__item v-fit\">\n      <div class=\"c8y-list__item__block\" *ngIf=\"comparisonResult.profile\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.profile\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-gray-white\">\n    <div\n      class=\"c8y-list__item bg-gray-white\"\n      [ngClass]=\"{\n        'has-warning': !!comparisonResult.comparisonAlert\n      }\"\n    >\n      <div class=\"c8y-list__item__block\">\n        <div class=\"c8y-list__item__icon\">\n          <i [c8yIcon]=\"icon\"></i>\n        </div>\n        <div class=\"c8y-list__item__body\">\n          <ng-container *ngTemplateOutlet=\"comparisonResultInfo;context:comparisonResult.device ? comparisonResult.device : comparisonResult.profile\"></ng-container>\n          <c8y-messages\n            class=\"m-0\"\n            style=\"margin-bottom: calc(var(--margin-base, 8px) * -1);\"\n            *ngIf=\"comparisonResult.comparisonAlert\"\n          >\n            <c8y-message>\n              {{ comparisonResult.comparisonAlert | translate }}\n            </c8y-message>\n          </c8y-messages>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"p-l-16 p-r-16 bg-white hidden-xs hidden-sm\" *ngIf=\"!showProfileItems\"></div>\n</div>\n\n<ng-template #comparisonResultInfo let-name=\"itemName\" let-details=\"itemDetails\">\n <div class=\"content-flex-40\">\n   <div class=\"col-7\">\n    <span class=\"text-truncate\">\n      <span class=\"text-label-small m-r-4\">Name</span>\n       <span title=\"{{ name }}\">\n           {{ name }}\n        </span>\n     </span>\n   </div>\n  <div class=\"col-5\">\n    <span *ngIf=\"showTextLabel && details; else showInfoLabel\" class=\"text-truncate\">\n      <span translate class=\"text-label-small m-r-4\">Version</span>\n      <span title=\"{{details}}\">{{ details }}</span>\n    </span>\n     <ng-template #showInfoLabel>\n        <span class=\"label label-info\">{{ details }}</span>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n"
        })
    ], DeviceProfileItemListComponent);
    return DeviceProfileItemListComponent;
}());

var deviceProfilesRoutes = [
    {
        path: 'device-profiles/:id',
        component: DeviceProfileComponent
    },
    {
        path: 'device-profiles',
        component: DeviceProfileListComponent
    }
];
var deviceTabProfileRoutes = [
    {
        context: ViewContext.Device,
        path: 'device-profile',
        component: DeviceTabProfileComponent,
        label: gettext('Device profile'),
        icon: 'c8y-device-profile',
        canActivate: [DeviceProfileGuard]
    }
];
var ɵ0 = deviceTabProfileRoutes;
var DeviceProfileModule = /** @class */ (function () {
    function DeviceProfileModule() {
    }
    DeviceProfileModule = __decorate([
        NgModule({
            declarations: [
                DeviceProfileComponent,
                DeviceProfileListComponent,
                AddDeviceProfileComponent,
                SelectConfigurationModalComponent,
                DeviceTabProfileComponent,
                DeviceTabProfileDetailComponent,
                DeviceProfileItemListComponent
            ],
            exports: [],
            imports: [
                CoreModule,
                CommonModule,
                RepositoryModule,
                RouterModule.forChild(deviceProfilesRoutes),
                BsDropdownModule.forRoot(),
                TooltipModule,
                ReactiveFormsModule,
                ButtonsModule,
                PopoverModule,
                SingleOperationDetailsModule
            ],
            entryComponents: [
                AddDeviceProfileComponent,
                SelectConfigurationModalComponent,
                DeviceTabProfileComponent
            ],
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: DeviceProfileNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                },
                DeviceProfileService,
                DeviceProfileGuard
            ]
        })
    ], DeviceProfileModule);
    return DeviceProfileModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AddDeviceProfileComponent, DeviceProfileComponent, DeviceProfileGuard, DeviceProfileItemListComponent, DeviceProfileListComponent, DeviceProfileModule, DeviceProfileNavigationFactory, DeviceProfileOperation, DeviceProfileService, DeviceTabProfileComponent, DeviceTabProfileDetailComponent, SelectConfigurationModalComponent, ɵ0, DeviceTabProfileComponent as ɵa, DeviceTabProfileDetailComponent as ɵb, DeviceProfileItemListComponent as ɵc };
//# sourceMappingURL=c8y-ngx-components-device-profile.js.map
