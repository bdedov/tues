import { __spread, __extends, __decorate, __awaiter, __generator, __param, __assign, __read, __values } from 'tslib';
import { InjectionToken, Injector, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Input, ViewChild, Component, Optional, Inject, isDevMode, EventEmitter, ElementRef, ChangeDetectorRef, Directive, LOCALE_ID, NgModule, Pipe, Output, HostBinding, TemplateRef, ViewContainerRef, ComponentFactoryResolver, Renderer2, APP_INITIALIZER, ContentChild, Attribute, ContentChildren, ViewChildren, NgZone, HostListener, ChangeDetectionStrategy, forwardRef, Host, Type } from '@angular/core';
import { NavigationEnd, Router, RouterModule as RouterModule$1, RouterLinkActive, PRIMARY_OUTLET, ActivatedRoute } from '@angular/router';
import { of, defer, combineLatest, isObservable, from, race, Subject, BehaviorSubject, pipe, fromEvent, EMPTY, merge as merge$1, timer, fromEventPattern, NEVER, ReplaySubject, forkJoin } from 'rxjs';
import { filter, merge, startWith, switchMap, map, distinctUntilChanged, shareReplay, scan, tap, catchError, takeUntil, first, delay, combineLatest as combineLatest$1, debounceTime, take, debounce, mergeMap, every, toArray, expand, finalize } from 'rxjs/operators';
import { flatten, isFunction, sortBy, camelCase, isUndefined, throttle as throttle$1, keys, each, mapValues, mapKeys, get, isEqual, assign, upperFirst, memoize as memoize$1, property, filter as filter$1, snakeCase, matches, includes, orderBy, isEmpty, find as find$1, escape as escape$1, escapeRegExp, isString, clone, map as map$1, some, flow, isNil, pick, omitBy, chunk, union, without, parseInt as parseInt$1, set, findIndex, kebabCase } from 'lodash-es';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule, BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { formatDate, registerLocaleData, DatePipe as DatePipe$1, CommonModule as CommonModule$1, LocationStrategy } from '@angular/common';
import { SystemOptionsService, TenantOptionsService, ApiService as ApiService$1, DataModule as DataModule$1 } from '@c8y/ngx-components/api';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { TranslateParser, TranslateDefaultParser, TranslateService as TranslateService$1, TranslateLoader, TranslateCompiler, TranslateFakeCompiler, MissingTranslationHandler, TranslateStore, USE_STORE, USE_DEFAULT_LANG, USE_EXTEND, DEFAULT_LANGUAGE, TranslateModule } from '@ngx-translate/core';
import { ApplicationService, FetchClient, TenantLoginOptionsService, InventoryService, UserService, TenantService, OperationStatus, BasicAuth, CookieAuth, Realtime, Client, PasswordStrength, EventBinaryService, EventService, MeasurementService, AlarmService, OperationBulkService, OperationService, SystemOptionsService as SystemOptionsService$1, TenantOptionsService as TenantOptionsService$1, TenantSecurityOptionsService, AuditService, InventoryRoleService, InventoryBinaryService, DeviceRegistrationService, DeviceRegistrationBulkService, UserRoleService, UserGroupService, IdentityService, TrustedCertificateService, Service } from '@c8y/client';
import afNA from '!file-loader?name=assets/locales/angular/af-NA.js!@angular/common/locales/af-NA.js';
import af from '!file-loader?name=assets/locales/angular/af.js!@angular/common/locales/af.js';
import agq from '!file-loader?name=assets/locales/angular/agq.js!@angular/common/locales/agq.js';
import ak from '!file-loader?name=assets/locales/angular/ak.js!@angular/common/locales/ak.js';
import am from '!file-loader?name=assets/locales/angular/am.js!@angular/common/locales/am.js';
import arAE from '!file-loader?name=assets/locales/angular/ar-AE.js!@angular/common/locales/ar-AE.js';
import arBH from '!file-loader?name=assets/locales/angular/ar-BH.js!@angular/common/locales/ar-BH.js';
import arDJ from '!file-loader?name=assets/locales/angular/ar-DJ.js!@angular/common/locales/ar-DJ.js';
import arDZ from '!file-loader?name=assets/locales/angular/ar-DZ.js!@angular/common/locales/ar-DZ.js';
import arEG from '!file-loader?name=assets/locales/angular/ar-EG.js!@angular/common/locales/ar-EG.js';
import arEH from '!file-loader?name=assets/locales/angular/ar-EH.js!@angular/common/locales/ar-EH.js';
import arER from '!file-loader?name=assets/locales/angular/ar-ER.js!@angular/common/locales/ar-ER.js';
import arIL from '!file-loader?name=assets/locales/angular/ar-IL.js!@angular/common/locales/ar-IL.js';
import arIQ from '!file-loader?name=assets/locales/angular/ar-IQ.js!@angular/common/locales/ar-IQ.js';
import arJO from '!file-loader?name=assets/locales/angular/ar-JO.js!@angular/common/locales/ar-JO.js';
import arKM from '!file-loader?name=assets/locales/angular/ar-KM.js!@angular/common/locales/ar-KM.js';
import arKW from '!file-loader?name=assets/locales/angular/ar-KW.js!@angular/common/locales/ar-KW.js';
import arLB from '!file-loader?name=assets/locales/angular/ar-LB.js!@angular/common/locales/ar-LB.js';
import arLY from '!file-loader?name=assets/locales/angular/ar-LY.js!@angular/common/locales/ar-LY.js';
import arMA from '!file-loader?name=assets/locales/angular/ar-MA.js!@angular/common/locales/ar-MA.js';
import arMR from '!file-loader?name=assets/locales/angular/ar-MR.js!@angular/common/locales/ar-MR.js';
import arOM from '!file-loader?name=assets/locales/angular/ar-OM.js!@angular/common/locales/ar-OM.js';
import arPS from '!file-loader?name=assets/locales/angular/ar-PS.js!@angular/common/locales/ar-PS.js';
import arQA from '!file-loader?name=assets/locales/angular/ar-QA.js!@angular/common/locales/ar-QA.js';
import arSA from '!file-loader?name=assets/locales/angular/ar-SA.js!@angular/common/locales/ar-SA.js';
import arSD from '!file-loader?name=assets/locales/angular/ar-SD.js!@angular/common/locales/ar-SD.js';
import arSO from '!file-loader?name=assets/locales/angular/ar-SO.js!@angular/common/locales/ar-SO.js';
import arSS from '!file-loader?name=assets/locales/angular/ar-SS.js!@angular/common/locales/ar-SS.js';
import arSY from '!file-loader?name=assets/locales/angular/ar-SY.js!@angular/common/locales/ar-SY.js';
import arTD from '!file-loader?name=assets/locales/angular/ar-TD.js!@angular/common/locales/ar-TD.js';
import arTN from '!file-loader?name=assets/locales/angular/ar-TN.js!@angular/common/locales/ar-TN.js';
import arYE from '!file-loader?name=assets/locales/angular/ar-YE.js!@angular/common/locales/ar-YE.js';
import ar from '!file-loader?name=assets/locales/angular/ar.js!@angular/common/locales/ar.js';
import as from '!file-loader?name=assets/locales/angular/as.js!@angular/common/locales/as.js';
import asa from '!file-loader?name=assets/locales/angular/asa.js!@angular/common/locales/asa.js';
import ast from '!file-loader?name=assets/locales/angular/ast.js!@angular/common/locales/ast.js';
import azCyrl from '!file-loader?name=assets/locales/angular/az-Cyrl.js!@angular/common/locales/az-Cyrl.js';
import azLatn from '!file-loader?name=assets/locales/angular/az-Latn.js!@angular/common/locales/az-Latn.js';
import az from '!file-loader?name=assets/locales/angular/az.js!@angular/common/locales/az.js';
import bas from '!file-loader?name=assets/locales/angular/bas.js!@angular/common/locales/bas.js';
import be from '!file-loader?name=assets/locales/angular/be.js!@angular/common/locales/be.js';
import bem from '!file-loader?name=assets/locales/angular/bem.js!@angular/common/locales/bem.js';
import bez from '!file-loader?name=assets/locales/angular/bez.js!@angular/common/locales/bez.js';
import bg from '!file-loader?name=assets/locales/angular/bg.js!@angular/common/locales/bg.js';
import bm from '!file-loader?name=assets/locales/angular/bm.js!@angular/common/locales/bm.js';
import bnIN from '!file-loader?name=assets/locales/angular/bn-IN.js!@angular/common/locales/bn-IN.js';
import bn from '!file-loader?name=assets/locales/angular/bn.js!@angular/common/locales/bn.js';
import boIN from '!file-loader?name=assets/locales/angular/bo-IN.js!@angular/common/locales/bo-IN.js';
import bo from '!file-loader?name=assets/locales/angular/bo.js!@angular/common/locales/bo.js';
import br from '!file-loader?name=assets/locales/angular/br.js!@angular/common/locales/br.js';
import brx from '!file-loader?name=assets/locales/angular/brx.js!@angular/common/locales/brx.js';
import bsCyrl from '!file-loader?name=assets/locales/angular/bs-Cyrl.js!@angular/common/locales/bs-Cyrl.js';
import bsLatn from '!file-loader?name=assets/locales/angular/bs-Latn.js!@angular/common/locales/bs-Latn.js';
import bs from '!file-loader?name=assets/locales/angular/bs.js!@angular/common/locales/bs.js';
import caAD from '!file-loader?name=assets/locales/angular/ca-AD.js!@angular/common/locales/ca-AD.js';
import caESVALENCIA from '!file-loader?name=assets/locales/angular/ca-ES-VALENCIA.js!@angular/common/locales/ca-ES-VALENCIA.js';
import caFR from '!file-loader?name=assets/locales/angular/ca-FR.js!@angular/common/locales/ca-FR.js';
import caIT from '!file-loader?name=assets/locales/angular/ca-IT.js!@angular/common/locales/ca-IT.js';
import ca from '!file-loader?name=assets/locales/angular/ca.js!@angular/common/locales/ca.js';
import ccpIN from '!file-loader?name=assets/locales/angular/ccp-IN.js!@angular/common/locales/ccp-IN.js';
import ccp from '!file-loader?name=assets/locales/angular/ccp.js!@angular/common/locales/ccp.js';
import ce from '!file-loader?name=assets/locales/angular/ce.js!@angular/common/locales/ce.js';
import cgg from '!file-loader?name=assets/locales/angular/cgg.js!@angular/common/locales/cgg.js';
import chr from '!file-loader?name=assets/locales/angular/chr.js!@angular/common/locales/chr.js';
import ckbIR from '!file-loader?name=assets/locales/angular/ckb-IR.js!@angular/common/locales/ckb-IR.js';
import ckb from '!file-loader?name=assets/locales/angular/ckb.js!@angular/common/locales/ckb.js';
import cs from '!file-loader?name=assets/locales/angular/cs.js!@angular/common/locales/cs.js';
import cu from '!file-loader?name=assets/locales/angular/cu.js!@angular/common/locales/cu.js';
import cy from '!file-loader?name=assets/locales/angular/cy.js!@angular/common/locales/cy.js';
import daGL from '!file-loader?name=assets/locales/angular/da-GL.js!@angular/common/locales/da-GL.js';
import da from '!file-loader?name=assets/locales/angular/da.js!@angular/common/locales/da.js';
import dav from '!file-loader?name=assets/locales/angular/dav.js!@angular/common/locales/dav.js';
import deAT from '!file-loader?name=assets/locales/angular/de-AT.js!@angular/common/locales/de-AT.js';
import deBE from '!file-loader?name=assets/locales/angular/de-BE.js!@angular/common/locales/de-BE.js';
import deCH from '!file-loader?name=assets/locales/angular/de-CH.js!@angular/common/locales/de-CH.js';
import deIT from '!file-loader?name=assets/locales/angular/de-IT.js!@angular/common/locales/de-IT.js';
import deLI from '!file-loader?name=assets/locales/angular/de-LI.js!@angular/common/locales/de-LI.js';
import deLU from '!file-loader?name=assets/locales/angular/de-LU.js!@angular/common/locales/de-LU.js';
import de from '!file-loader?name=assets/locales/angular/de.js!@angular/common/locales/de.js';
import dje from '!file-loader?name=assets/locales/angular/dje.js!@angular/common/locales/dje.js';
import dsb from '!file-loader?name=assets/locales/angular/dsb.js!@angular/common/locales/dsb.js';
import dua from '!file-loader?name=assets/locales/angular/dua.js!@angular/common/locales/dua.js';
import dyo from '!file-loader?name=assets/locales/angular/dyo.js!@angular/common/locales/dyo.js';
import dz from '!file-loader?name=assets/locales/angular/dz.js!@angular/common/locales/dz.js';
import ebu from '!file-loader?name=assets/locales/angular/ebu.js!@angular/common/locales/ebu.js';
import eeTG from '!file-loader?name=assets/locales/angular/ee-TG.js!@angular/common/locales/ee-TG.js';
import ee from '!file-loader?name=assets/locales/angular/ee.js!@angular/common/locales/ee.js';
import elCY from '!file-loader?name=assets/locales/angular/el-CY.js!@angular/common/locales/el-CY.js';
import el from '!file-loader?name=assets/locales/angular/el.js!@angular/common/locales/el.js';
import en001 from '!file-loader?name=assets/locales/angular/en-001.js!@angular/common/locales/en-001.js';
import en150 from '!file-loader?name=assets/locales/angular/en-150.js!@angular/common/locales/en-150.js';
import enAG from '!file-loader?name=assets/locales/angular/en-AG.js!@angular/common/locales/en-AG.js';
import enAI from '!file-loader?name=assets/locales/angular/en-AI.js!@angular/common/locales/en-AI.js';
import enAS from '!file-loader?name=assets/locales/angular/en-AS.js!@angular/common/locales/en-AS.js';
import enAT from '!file-loader?name=assets/locales/angular/en-AT.js!@angular/common/locales/en-AT.js';
import enAU from '!file-loader?name=assets/locales/angular/en-AU.js!@angular/common/locales/en-AU.js';
import enBB from '!file-loader?name=assets/locales/angular/en-BB.js!@angular/common/locales/en-BB.js';
import enBE from '!file-loader?name=assets/locales/angular/en-BE.js!@angular/common/locales/en-BE.js';
import enBI from '!file-loader?name=assets/locales/angular/en-BI.js!@angular/common/locales/en-BI.js';
import enBM from '!file-loader?name=assets/locales/angular/en-BM.js!@angular/common/locales/en-BM.js';
import enBS from '!file-loader?name=assets/locales/angular/en-BS.js!@angular/common/locales/en-BS.js';
import enBW from '!file-loader?name=assets/locales/angular/en-BW.js!@angular/common/locales/en-BW.js';
import enBZ from '!file-loader?name=assets/locales/angular/en-BZ.js!@angular/common/locales/en-BZ.js';
import enCA from '!file-loader?name=assets/locales/angular/en-CA.js!@angular/common/locales/en-CA.js';
import enCC from '!file-loader?name=assets/locales/angular/en-CC.js!@angular/common/locales/en-CC.js';
import enCH from '!file-loader?name=assets/locales/angular/en-CH.js!@angular/common/locales/en-CH.js';
import enCK from '!file-loader?name=assets/locales/angular/en-CK.js!@angular/common/locales/en-CK.js';
import enCM from '!file-loader?name=assets/locales/angular/en-CM.js!@angular/common/locales/en-CM.js';
import enCX from '!file-loader?name=assets/locales/angular/en-CX.js!@angular/common/locales/en-CX.js';
import enCY from '!file-loader?name=assets/locales/angular/en-CY.js!@angular/common/locales/en-CY.js';
import enDE from '!file-loader?name=assets/locales/angular/en-DE.js!@angular/common/locales/en-DE.js';
import enDG from '!file-loader?name=assets/locales/angular/en-DG.js!@angular/common/locales/en-DG.js';
import enDK from '!file-loader?name=assets/locales/angular/en-DK.js!@angular/common/locales/en-DK.js';
import enDM from '!file-loader?name=assets/locales/angular/en-DM.js!@angular/common/locales/en-DM.js';
import enER from '!file-loader?name=assets/locales/angular/en-ER.js!@angular/common/locales/en-ER.js';
import enFI from '!file-loader?name=assets/locales/angular/en-FI.js!@angular/common/locales/en-FI.js';
import enFJ from '!file-loader?name=assets/locales/angular/en-FJ.js!@angular/common/locales/en-FJ.js';
import enFK from '!file-loader?name=assets/locales/angular/en-FK.js!@angular/common/locales/en-FK.js';
import enFM from '!file-loader?name=assets/locales/angular/en-FM.js!@angular/common/locales/en-FM.js';
import enGB from '!file-loader?name=assets/locales/angular/en-GB.js!@angular/common/locales/en-GB.js';
import enGD from '!file-loader?name=assets/locales/angular/en-GD.js!@angular/common/locales/en-GD.js';
import enGG from '!file-loader?name=assets/locales/angular/en-GG.js!@angular/common/locales/en-GG.js';
import enGH from '!file-loader?name=assets/locales/angular/en-GH.js!@angular/common/locales/en-GH.js';
import enGI from '!file-loader?name=assets/locales/angular/en-GI.js!@angular/common/locales/en-GI.js';
import enGM from '!file-loader?name=assets/locales/angular/en-GM.js!@angular/common/locales/en-GM.js';
import enGU from '!file-loader?name=assets/locales/angular/en-GU.js!@angular/common/locales/en-GU.js';
import enGY from '!file-loader?name=assets/locales/angular/en-GY.js!@angular/common/locales/en-GY.js';
import enHK from '!file-loader?name=assets/locales/angular/en-HK.js!@angular/common/locales/en-HK.js';
import enIE from '!file-loader?name=assets/locales/angular/en-IE.js!@angular/common/locales/en-IE.js';
import enIL from '!file-loader?name=assets/locales/angular/en-IL.js!@angular/common/locales/en-IL.js';
import enIM from '!file-loader?name=assets/locales/angular/en-IM.js!@angular/common/locales/en-IM.js';
import enIN from '!file-loader?name=assets/locales/angular/en-IN.js!@angular/common/locales/en-IN.js';
import enIO from '!file-loader?name=assets/locales/angular/en-IO.js!@angular/common/locales/en-IO.js';
import enJE from '!file-loader?name=assets/locales/angular/en-JE.js!@angular/common/locales/en-JE.js';
import enJM from '!file-loader?name=assets/locales/angular/en-JM.js!@angular/common/locales/en-JM.js';
import enKE from '!file-loader?name=assets/locales/angular/en-KE.js!@angular/common/locales/en-KE.js';
import enKI from '!file-loader?name=assets/locales/angular/en-KI.js!@angular/common/locales/en-KI.js';
import enKN from '!file-loader?name=assets/locales/angular/en-KN.js!@angular/common/locales/en-KN.js';
import enKY from '!file-loader?name=assets/locales/angular/en-KY.js!@angular/common/locales/en-KY.js';
import enLC from '!file-loader?name=assets/locales/angular/en-LC.js!@angular/common/locales/en-LC.js';
import enLR from '!file-loader?name=assets/locales/angular/en-LR.js!@angular/common/locales/en-LR.js';
import enLS from '!file-loader?name=assets/locales/angular/en-LS.js!@angular/common/locales/en-LS.js';
import enMG from '!file-loader?name=assets/locales/angular/en-MG.js!@angular/common/locales/en-MG.js';
import enMH from '!file-loader?name=assets/locales/angular/en-MH.js!@angular/common/locales/en-MH.js';
import enMO from '!file-loader?name=assets/locales/angular/en-MO.js!@angular/common/locales/en-MO.js';
import enMP from '!file-loader?name=assets/locales/angular/en-MP.js!@angular/common/locales/en-MP.js';
import enMS from '!file-loader?name=assets/locales/angular/en-MS.js!@angular/common/locales/en-MS.js';
import enMT from '!file-loader?name=assets/locales/angular/en-MT.js!@angular/common/locales/en-MT.js';
import enMU from '!file-loader?name=assets/locales/angular/en-MU.js!@angular/common/locales/en-MU.js';
import enMW from '!file-loader?name=assets/locales/angular/en-MW.js!@angular/common/locales/en-MW.js';
import enMY from '!file-loader?name=assets/locales/angular/en-MY.js!@angular/common/locales/en-MY.js';
import enNA from '!file-loader?name=assets/locales/angular/en-NA.js!@angular/common/locales/en-NA.js';
import enNF from '!file-loader?name=assets/locales/angular/en-NF.js!@angular/common/locales/en-NF.js';
import enNG from '!file-loader?name=assets/locales/angular/en-NG.js!@angular/common/locales/en-NG.js';
import enNL from '!file-loader?name=assets/locales/angular/en-NL.js!@angular/common/locales/en-NL.js';
import enNR from '!file-loader?name=assets/locales/angular/en-NR.js!@angular/common/locales/en-NR.js';
import enNU from '!file-loader?name=assets/locales/angular/en-NU.js!@angular/common/locales/en-NU.js';
import enNZ from '!file-loader?name=assets/locales/angular/en-NZ.js!@angular/common/locales/en-NZ.js';
import enPG from '!file-loader?name=assets/locales/angular/en-PG.js!@angular/common/locales/en-PG.js';
import enPH from '!file-loader?name=assets/locales/angular/en-PH.js!@angular/common/locales/en-PH.js';
import enPK from '!file-loader?name=assets/locales/angular/en-PK.js!@angular/common/locales/en-PK.js';
import enPN from '!file-loader?name=assets/locales/angular/en-PN.js!@angular/common/locales/en-PN.js';
import enPR from '!file-loader?name=assets/locales/angular/en-PR.js!@angular/common/locales/en-PR.js';
import enPW from '!file-loader?name=assets/locales/angular/en-PW.js!@angular/common/locales/en-PW.js';
import enRW from '!file-loader?name=assets/locales/angular/en-RW.js!@angular/common/locales/en-RW.js';
import enSB from '!file-loader?name=assets/locales/angular/en-SB.js!@angular/common/locales/en-SB.js';
import enSC from '!file-loader?name=assets/locales/angular/en-SC.js!@angular/common/locales/en-SC.js';
import enSD from '!file-loader?name=assets/locales/angular/en-SD.js!@angular/common/locales/en-SD.js';
import enSE from '!file-loader?name=assets/locales/angular/en-SE.js!@angular/common/locales/en-SE.js';
import enSG from '!file-loader?name=assets/locales/angular/en-SG.js!@angular/common/locales/en-SG.js';
import enSH from '!file-loader?name=assets/locales/angular/en-SH.js!@angular/common/locales/en-SH.js';
import enSI from '!file-loader?name=assets/locales/angular/en-SI.js!@angular/common/locales/en-SI.js';
import enSL from '!file-loader?name=assets/locales/angular/en-SL.js!@angular/common/locales/en-SL.js';
import enSS from '!file-loader?name=assets/locales/angular/en-SS.js!@angular/common/locales/en-SS.js';
import enSX from '!file-loader?name=assets/locales/angular/en-SX.js!@angular/common/locales/en-SX.js';
import enSZ from '!file-loader?name=assets/locales/angular/en-SZ.js!@angular/common/locales/en-SZ.js';
import enTC from '!file-loader?name=assets/locales/angular/en-TC.js!@angular/common/locales/en-TC.js';
import enTK from '!file-loader?name=assets/locales/angular/en-TK.js!@angular/common/locales/en-TK.js';
import enTO from '!file-loader?name=assets/locales/angular/en-TO.js!@angular/common/locales/en-TO.js';
import enTT from '!file-loader?name=assets/locales/angular/en-TT.js!@angular/common/locales/en-TT.js';
import enTV from '!file-loader?name=assets/locales/angular/en-TV.js!@angular/common/locales/en-TV.js';
import enTZ from '!file-loader?name=assets/locales/angular/en-TZ.js!@angular/common/locales/en-TZ.js';
import enUG from '!file-loader?name=assets/locales/angular/en-UG.js!@angular/common/locales/en-UG.js';
import enUM from '!file-loader?name=assets/locales/angular/en-UM.js!@angular/common/locales/en-UM.js';
import enUSPOSIX from '!file-loader?name=assets/locales/angular/en-US-POSIX.js!@angular/common/locales/en-US-POSIX.js';
import enVC from '!file-loader?name=assets/locales/angular/en-VC.js!@angular/common/locales/en-VC.js';
import enVG from '!file-loader?name=assets/locales/angular/en-VG.js!@angular/common/locales/en-VG.js';
import enVI from '!file-loader?name=assets/locales/angular/en-VI.js!@angular/common/locales/en-VI.js';
import enVU from '!file-loader?name=assets/locales/angular/en-VU.js!@angular/common/locales/en-VU.js';
import enWS from '!file-loader?name=assets/locales/angular/en-WS.js!@angular/common/locales/en-WS.js';
import enZA from '!file-loader?name=assets/locales/angular/en-ZA.js!@angular/common/locales/en-ZA.js';
import enZM from '!file-loader?name=assets/locales/angular/en-ZM.js!@angular/common/locales/en-ZM.js';
import enZW from '!file-loader?name=assets/locales/angular/en-ZW.js!@angular/common/locales/en-ZW.js';
import en from '!file-loader?name=assets/locales/angular/en.js!@angular/common/locales/en.js';
import eo from '!file-loader?name=assets/locales/angular/eo.js!@angular/common/locales/eo.js';
import es419 from '!file-loader?name=assets/locales/angular/es-419.js!@angular/common/locales/es-419.js';
import esAR from '!file-loader?name=assets/locales/angular/es-AR.js!@angular/common/locales/es-AR.js';
import esBO from '!file-loader?name=assets/locales/angular/es-BO.js!@angular/common/locales/es-BO.js';
import esBR from '!file-loader?name=assets/locales/angular/es-BR.js!@angular/common/locales/es-BR.js';
import esBZ from '!file-loader?name=assets/locales/angular/es-BZ.js!@angular/common/locales/es-BZ.js';
import esCL from '!file-loader?name=assets/locales/angular/es-CL.js!@angular/common/locales/es-CL.js';
import esCO from '!file-loader?name=assets/locales/angular/es-CO.js!@angular/common/locales/es-CO.js';
import esCR from '!file-loader?name=assets/locales/angular/es-CR.js!@angular/common/locales/es-CR.js';
import esCU from '!file-loader?name=assets/locales/angular/es-CU.js!@angular/common/locales/es-CU.js';
import esDO from '!file-loader?name=assets/locales/angular/es-DO.js!@angular/common/locales/es-DO.js';
import esEA from '!file-loader?name=assets/locales/angular/es-EA.js!@angular/common/locales/es-EA.js';
import esEC from '!file-loader?name=assets/locales/angular/es-EC.js!@angular/common/locales/es-EC.js';
import esGQ from '!file-loader?name=assets/locales/angular/es-GQ.js!@angular/common/locales/es-GQ.js';
import esGT from '!file-loader?name=assets/locales/angular/es-GT.js!@angular/common/locales/es-GT.js';
import esHN from '!file-loader?name=assets/locales/angular/es-HN.js!@angular/common/locales/es-HN.js';
import esIC from '!file-loader?name=assets/locales/angular/es-IC.js!@angular/common/locales/es-IC.js';
import esMX from '!file-loader?name=assets/locales/angular/es-MX.js!@angular/common/locales/es-MX.js';
import esNI from '!file-loader?name=assets/locales/angular/es-NI.js!@angular/common/locales/es-NI.js';
import esPA from '!file-loader?name=assets/locales/angular/es-PA.js!@angular/common/locales/es-PA.js';
import esPE from '!file-loader?name=assets/locales/angular/es-PE.js!@angular/common/locales/es-PE.js';
import esPH from '!file-loader?name=assets/locales/angular/es-PH.js!@angular/common/locales/es-PH.js';
import esPR from '!file-loader?name=assets/locales/angular/es-PR.js!@angular/common/locales/es-PR.js';
import esPY from '!file-loader?name=assets/locales/angular/es-PY.js!@angular/common/locales/es-PY.js';
import esSV from '!file-loader?name=assets/locales/angular/es-SV.js!@angular/common/locales/es-SV.js';
import esUS from '!file-loader?name=assets/locales/angular/es-US.js!@angular/common/locales/es-US.js';
import esUY from '!file-loader?name=assets/locales/angular/es-UY.js!@angular/common/locales/es-UY.js';
import esVE from '!file-loader?name=assets/locales/angular/es-VE.js!@angular/common/locales/es-VE.js';
import es from '!file-loader?name=assets/locales/angular/es.js!@angular/common/locales/es.js';
import et from '!file-loader?name=assets/locales/angular/et.js!@angular/common/locales/et.js';
import eu from '!file-loader?name=assets/locales/angular/eu.js!@angular/common/locales/eu.js';
import ewo from '!file-loader?name=assets/locales/angular/ewo.js!@angular/common/locales/ewo.js';
import faAF from '!file-loader?name=assets/locales/angular/fa-AF.js!@angular/common/locales/fa-AF.js';
import fa from '!file-loader?name=assets/locales/angular/fa.js!@angular/common/locales/fa.js';
import ffCM from '!file-loader?name=assets/locales/angular/ff-CM.js!@angular/common/locales/ff-CM.js';
import ffGN from '!file-loader?name=assets/locales/angular/ff-GN.js!@angular/common/locales/ff-GN.js';
import ffMR from '!file-loader?name=assets/locales/angular/ff-MR.js!@angular/common/locales/ff-MR.js';
import ff from '!file-loader?name=assets/locales/angular/ff.js!@angular/common/locales/ff.js';
import fi from '!file-loader?name=assets/locales/angular/fi.js!@angular/common/locales/fi.js';
import fil from '!file-loader?name=assets/locales/angular/fil.js!@angular/common/locales/fil.js';
import foDK from '!file-loader?name=assets/locales/angular/fo-DK.js!@angular/common/locales/fo-DK.js';
import fo from '!file-loader?name=assets/locales/angular/fo.js!@angular/common/locales/fo.js';
import frBE from '!file-loader?name=assets/locales/angular/fr-BE.js!@angular/common/locales/fr-BE.js';
import frBF from '!file-loader?name=assets/locales/angular/fr-BF.js!@angular/common/locales/fr-BF.js';
import frBI from '!file-loader?name=assets/locales/angular/fr-BI.js!@angular/common/locales/fr-BI.js';
import frBJ from '!file-loader?name=assets/locales/angular/fr-BJ.js!@angular/common/locales/fr-BJ.js';
import frBL from '!file-loader?name=assets/locales/angular/fr-BL.js!@angular/common/locales/fr-BL.js';
import frCA from '!file-loader?name=assets/locales/angular/fr-CA.js!@angular/common/locales/fr-CA.js';
import frCD from '!file-loader?name=assets/locales/angular/fr-CD.js!@angular/common/locales/fr-CD.js';
import frCF from '!file-loader?name=assets/locales/angular/fr-CF.js!@angular/common/locales/fr-CF.js';
import frCG from '!file-loader?name=assets/locales/angular/fr-CG.js!@angular/common/locales/fr-CG.js';
import frCH from '!file-loader?name=assets/locales/angular/fr-CH.js!@angular/common/locales/fr-CH.js';
import frCI from '!file-loader?name=assets/locales/angular/fr-CI.js!@angular/common/locales/fr-CI.js';
import frCM from '!file-loader?name=assets/locales/angular/fr-CM.js!@angular/common/locales/fr-CM.js';
import frDJ from '!file-loader?name=assets/locales/angular/fr-DJ.js!@angular/common/locales/fr-DJ.js';
import frDZ from '!file-loader?name=assets/locales/angular/fr-DZ.js!@angular/common/locales/fr-DZ.js';
import frGA from '!file-loader?name=assets/locales/angular/fr-GA.js!@angular/common/locales/fr-GA.js';
import frGF from '!file-loader?name=assets/locales/angular/fr-GF.js!@angular/common/locales/fr-GF.js';
import frGN from '!file-loader?name=assets/locales/angular/fr-GN.js!@angular/common/locales/fr-GN.js';
import frGP from '!file-loader?name=assets/locales/angular/fr-GP.js!@angular/common/locales/fr-GP.js';
import frGQ from '!file-loader?name=assets/locales/angular/fr-GQ.js!@angular/common/locales/fr-GQ.js';
import frHT from '!file-loader?name=assets/locales/angular/fr-HT.js!@angular/common/locales/fr-HT.js';
import frKM from '!file-loader?name=assets/locales/angular/fr-KM.js!@angular/common/locales/fr-KM.js';
import frLU from '!file-loader?name=assets/locales/angular/fr-LU.js!@angular/common/locales/fr-LU.js';
import frMA from '!file-loader?name=assets/locales/angular/fr-MA.js!@angular/common/locales/fr-MA.js';
import frMC from '!file-loader?name=assets/locales/angular/fr-MC.js!@angular/common/locales/fr-MC.js';
import frMF from '!file-loader?name=assets/locales/angular/fr-MF.js!@angular/common/locales/fr-MF.js';
import frMG from '!file-loader?name=assets/locales/angular/fr-MG.js!@angular/common/locales/fr-MG.js';
import frML from '!file-loader?name=assets/locales/angular/fr-ML.js!@angular/common/locales/fr-ML.js';
import frMQ from '!file-loader?name=assets/locales/angular/fr-MQ.js!@angular/common/locales/fr-MQ.js';
import frMR from '!file-loader?name=assets/locales/angular/fr-MR.js!@angular/common/locales/fr-MR.js';
import frMU from '!file-loader?name=assets/locales/angular/fr-MU.js!@angular/common/locales/fr-MU.js';
import frNC from '!file-loader?name=assets/locales/angular/fr-NC.js!@angular/common/locales/fr-NC.js';
import frNE from '!file-loader?name=assets/locales/angular/fr-NE.js!@angular/common/locales/fr-NE.js';
import frPF from '!file-loader?name=assets/locales/angular/fr-PF.js!@angular/common/locales/fr-PF.js';
import frPM from '!file-loader?name=assets/locales/angular/fr-PM.js!@angular/common/locales/fr-PM.js';
import frRE from '!file-loader?name=assets/locales/angular/fr-RE.js!@angular/common/locales/fr-RE.js';
import frRW from '!file-loader?name=assets/locales/angular/fr-RW.js!@angular/common/locales/fr-RW.js';
import frSC from '!file-loader?name=assets/locales/angular/fr-SC.js!@angular/common/locales/fr-SC.js';
import frSN from '!file-loader?name=assets/locales/angular/fr-SN.js!@angular/common/locales/fr-SN.js';
import frSY from '!file-loader?name=assets/locales/angular/fr-SY.js!@angular/common/locales/fr-SY.js';
import frTD from '!file-loader?name=assets/locales/angular/fr-TD.js!@angular/common/locales/fr-TD.js';
import frTG from '!file-loader?name=assets/locales/angular/fr-TG.js!@angular/common/locales/fr-TG.js';
import frTN from '!file-loader?name=assets/locales/angular/fr-TN.js!@angular/common/locales/fr-TN.js';
import frVU from '!file-loader?name=assets/locales/angular/fr-VU.js!@angular/common/locales/fr-VU.js';
import frWF from '!file-loader?name=assets/locales/angular/fr-WF.js!@angular/common/locales/fr-WF.js';
import frYT from '!file-loader?name=assets/locales/angular/fr-YT.js!@angular/common/locales/fr-YT.js';
import fr from '!file-loader?name=assets/locales/angular/fr.js!@angular/common/locales/fr.js';
import fur from '!file-loader?name=assets/locales/angular/fur.js!@angular/common/locales/fur.js';
import fy from '!file-loader?name=assets/locales/angular/fy.js!@angular/common/locales/fy.js';
import ga from '!file-loader?name=assets/locales/angular/ga.js!@angular/common/locales/ga.js';
import gd from '!file-loader?name=assets/locales/angular/gd.js!@angular/common/locales/gd.js';
import gl from '!file-loader?name=assets/locales/angular/gl.js!@angular/common/locales/gl.js';
import gswFR from '!file-loader?name=assets/locales/angular/gsw-FR.js!@angular/common/locales/gsw-FR.js';
import gswLI from '!file-loader?name=assets/locales/angular/gsw-LI.js!@angular/common/locales/gsw-LI.js';
import gsw from '!file-loader?name=assets/locales/angular/gsw.js!@angular/common/locales/gsw.js';
import gu from '!file-loader?name=assets/locales/angular/gu.js!@angular/common/locales/gu.js';
import guz from '!file-loader?name=assets/locales/angular/guz.js!@angular/common/locales/guz.js';
import gv from '!file-loader?name=assets/locales/angular/gv.js!@angular/common/locales/gv.js';
import haGH from '!file-loader?name=assets/locales/angular/ha-GH.js!@angular/common/locales/ha-GH.js';
import haNE from '!file-loader?name=assets/locales/angular/ha-NE.js!@angular/common/locales/ha-NE.js';
import ha from '!file-loader?name=assets/locales/angular/ha.js!@angular/common/locales/ha.js';
import haw from '!file-loader?name=assets/locales/angular/haw.js!@angular/common/locales/haw.js';
import he from '!file-loader?name=assets/locales/angular/he.js!@angular/common/locales/he.js';
import hi from '!file-loader?name=assets/locales/angular/hi.js!@angular/common/locales/hi.js';
import hrBA from '!file-loader?name=assets/locales/angular/hr-BA.js!@angular/common/locales/hr-BA.js';
import hr from '!file-loader?name=assets/locales/angular/hr.js!@angular/common/locales/hr.js';
import hsb from '!file-loader?name=assets/locales/angular/hsb.js!@angular/common/locales/hsb.js';
import hu from '!file-loader?name=assets/locales/angular/hu.js!@angular/common/locales/hu.js';
import hy from '!file-loader?name=assets/locales/angular/hy.js!@angular/common/locales/hy.js';
import id from '!file-loader?name=assets/locales/angular/id.js!@angular/common/locales/id.js';
import ig from '!file-loader?name=assets/locales/angular/ig.js!@angular/common/locales/ig.js';
import ii from '!file-loader?name=assets/locales/angular/ii.js!@angular/common/locales/ii.js';
import is from '!file-loader?name=assets/locales/angular/is.js!@angular/common/locales/is.js';
import itCH from '!file-loader?name=assets/locales/angular/it-CH.js!@angular/common/locales/it-CH.js';
import itSM from '!file-loader?name=assets/locales/angular/it-SM.js!@angular/common/locales/it-SM.js';
import itVA from '!file-loader?name=assets/locales/angular/it-VA.js!@angular/common/locales/it-VA.js';
import it from '!file-loader?name=assets/locales/angular/it.js!@angular/common/locales/it.js';
import ja from '!file-loader?name=assets/locales/angular/ja.js!@angular/common/locales/ja.js';
import jgo from '!file-loader?name=assets/locales/angular/jgo.js!@angular/common/locales/jgo.js';
import jmc from '!file-loader?name=assets/locales/angular/jmc.js!@angular/common/locales/jmc.js';
import ka from '!file-loader?name=assets/locales/angular/ka.js!@angular/common/locales/ka.js';
import kab from '!file-loader?name=assets/locales/angular/kab.js!@angular/common/locales/kab.js';
import kam from '!file-loader?name=assets/locales/angular/kam.js!@angular/common/locales/kam.js';
import kde from '!file-loader?name=assets/locales/angular/kde.js!@angular/common/locales/kde.js';
import kea from '!file-loader?name=assets/locales/angular/kea.js!@angular/common/locales/kea.js';
import khq from '!file-loader?name=assets/locales/angular/khq.js!@angular/common/locales/khq.js';
import ki from '!file-loader?name=assets/locales/angular/ki.js!@angular/common/locales/ki.js';
import kk from '!file-loader?name=assets/locales/angular/kk.js!@angular/common/locales/kk.js';
import kkj from '!file-loader?name=assets/locales/angular/kkj.js!@angular/common/locales/kkj.js';
import kl from '!file-loader?name=assets/locales/angular/kl.js!@angular/common/locales/kl.js';
import kln from '!file-loader?name=assets/locales/angular/kln.js!@angular/common/locales/kln.js';
import km from '!file-loader?name=assets/locales/angular/km.js!@angular/common/locales/km.js';
import kn from '!file-loader?name=assets/locales/angular/kn.js!@angular/common/locales/kn.js';
import koKP from '!file-loader?name=assets/locales/angular/ko-KP.js!@angular/common/locales/ko-KP.js';
import ko from '!file-loader?name=assets/locales/angular/ko.js!@angular/common/locales/ko.js';
import kok from '!file-loader?name=assets/locales/angular/kok.js!@angular/common/locales/kok.js';
import ks from '!file-loader?name=assets/locales/angular/ks.js!@angular/common/locales/ks.js';
import ksb from '!file-loader?name=assets/locales/angular/ksb.js!@angular/common/locales/ksb.js';
import ksf from '!file-loader?name=assets/locales/angular/ksf.js!@angular/common/locales/ksf.js';
import ksh from '!file-loader?name=assets/locales/angular/ksh.js!@angular/common/locales/ksh.js';
import kw from '!file-loader?name=assets/locales/angular/kw.js!@angular/common/locales/kw.js';
import ky from '!file-loader?name=assets/locales/angular/ky.js!@angular/common/locales/ky.js';
import lag from '!file-loader?name=assets/locales/angular/lag.js!@angular/common/locales/lag.js';
import lb from '!file-loader?name=assets/locales/angular/lb.js!@angular/common/locales/lb.js';
import lg from '!file-loader?name=assets/locales/angular/lg.js!@angular/common/locales/lg.js';
import lkt from '!file-loader?name=assets/locales/angular/lkt.js!@angular/common/locales/lkt.js';
import lnAO from '!file-loader?name=assets/locales/angular/ln-AO.js!@angular/common/locales/ln-AO.js';
import lnCF from '!file-loader?name=assets/locales/angular/ln-CF.js!@angular/common/locales/ln-CF.js';
import lnCG from '!file-loader?name=assets/locales/angular/ln-CG.js!@angular/common/locales/ln-CG.js';
import ln from '!file-loader?name=assets/locales/angular/ln.js!@angular/common/locales/ln.js';
import lo from '!file-loader?name=assets/locales/angular/lo.js!@angular/common/locales/lo.js';
import lrcIQ from '!file-loader?name=assets/locales/angular/lrc-IQ.js!@angular/common/locales/lrc-IQ.js';
import lrc from '!file-loader?name=assets/locales/angular/lrc.js!@angular/common/locales/lrc.js';
import lt from '!file-loader?name=assets/locales/angular/lt.js!@angular/common/locales/lt.js';
import lu from '!file-loader?name=assets/locales/angular/lu.js!@angular/common/locales/lu.js';
import luo from '!file-loader?name=assets/locales/angular/luo.js!@angular/common/locales/luo.js';
import luy from '!file-loader?name=assets/locales/angular/luy.js!@angular/common/locales/luy.js';
import lv from '!file-loader?name=assets/locales/angular/lv.js!@angular/common/locales/lv.js';
import masTZ from '!file-loader?name=assets/locales/angular/mas-TZ.js!@angular/common/locales/mas-TZ.js';
import mas from '!file-loader?name=assets/locales/angular/mas.js!@angular/common/locales/mas.js';
import mer from '!file-loader?name=assets/locales/angular/mer.js!@angular/common/locales/mer.js';
import mfe from '!file-loader?name=assets/locales/angular/mfe.js!@angular/common/locales/mfe.js';
import mg from '!file-loader?name=assets/locales/angular/mg.js!@angular/common/locales/mg.js';
import mgh from '!file-loader?name=assets/locales/angular/mgh.js!@angular/common/locales/mgh.js';
import mgo from '!file-loader?name=assets/locales/angular/mgo.js!@angular/common/locales/mgo.js';
import mk from '!file-loader?name=assets/locales/angular/mk.js!@angular/common/locales/mk.js';
import ml from '!file-loader?name=assets/locales/angular/ml.js!@angular/common/locales/ml.js';
import mn from '!file-loader?name=assets/locales/angular/mn.js!@angular/common/locales/mn.js';
import mr from '!file-loader?name=assets/locales/angular/mr.js!@angular/common/locales/mr.js';
import msBN from '!file-loader?name=assets/locales/angular/ms-BN.js!@angular/common/locales/ms-BN.js';
import msSG from '!file-loader?name=assets/locales/angular/ms-SG.js!@angular/common/locales/ms-SG.js';
import ms from '!file-loader?name=assets/locales/angular/ms.js!@angular/common/locales/ms.js';
import mt from '!file-loader?name=assets/locales/angular/mt.js!@angular/common/locales/mt.js';
import mua from '!file-loader?name=assets/locales/angular/mua.js!@angular/common/locales/mua.js';
import my from '!file-loader?name=assets/locales/angular/my.js!@angular/common/locales/my.js';
import mzn from '!file-loader?name=assets/locales/angular/mzn.js!@angular/common/locales/mzn.js';
import naq from '!file-loader?name=assets/locales/angular/naq.js!@angular/common/locales/naq.js';
import nbSJ from '!file-loader?name=assets/locales/angular/nb-SJ.js!@angular/common/locales/nb-SJ.js';
import nb from '!file-loader?name=assets/locales/angular/nb.js!@angular/common/locales/nb.js';
import nd from '!file-loader?name=assets/locales/angular/nd.js!@angular/common/locales/nd.js';
import ndsNL from '!file-loader?name=assets/locales/angular/nds-NL.js!@angular/common/locales/nds-NL.js';
import nds from '!file-loader?name=assets/locales/angular/nds.js!@angular/common/locales/nds.js';
import neIN from '!file-loader?name=assets/locales/angular/ne-IN.js!@angular/common/locales/ne-IN.js';
import ne from '!file-loader?name=assets/locales/angular/ne.js!@angular/common/locales/ne.js';
import nlAW from '!file-loader?name=assets/locales/angular/nl-AW.js!@angular/common/locales/nl-AW.js';
import nlBE from '!file-loader?name=assets/locales/angular/nl-BE.js!@angular/common/locales/nl-BE.js';
import nlBQ from '!file-loader?name=assets/locales/angular/nl-BQ.js!@angular/common/locales/nl-BQ.js';
import nlCW from '!file-loader?name=assets/locales/angular/nl-CW.js!@angular/common/locales/nl-CW.js';
import nlSR from '!file-loader?name=assets/locales/angular/nl-SR.js!@angular/common/locales/nl-SR.js';
import nlSX from '!file-loader?name=assets/locales/angular/nl-SX.js!@angular/common/locales/nl-SX.js';
import nl from '!file-loader?name=assets/locales/angular/nl.js!@angular/common/locales/nl.js';
import nmg from '!file-loader?name=assets/locales/angular/nmg.js!@angular/common/locales/nmg.js';
import nn from '!file-loader?name=assets/locales/angular/nn.js!@angular/common/locales/nn.js';
import nnh from '!file-loader?name=assets/locales/angular/nnh.js!@angular/common/locales/nnh.js';
import nus from '!file-loader?name=assets/locales/angular/nus.js!@angular/common/locales/nus.js';
import nyn from '!file-loader?name=assets/locales/angular/nyn.js!@angular/common/locales/nyn.js';
import omKE from '!file-loader?name=assets/locales/angular/om-KE.js!@angular/common/locales/om-KE.js';
import om from '!file-loader?name=assets/locales/angular/om.js!@angular/common/locales/om.js';
import or from '!file-loader?name=assets/locales/angular/or.js!@angular/common/locales/or.js';
import osRU from '!file-loader?name=assets/locales/angular/os-RU.js!@angular/common/locales/os-RU.js';
import os from '!file-loader?name=assets/locales/angular/os.js!@angular/common/locales/os.js';
import paArab from '!file-loader?name=assets/locales/angular/pa-Arab.js!@angular/common/locales/pa-Arab.js';
import paGuru from '!file-loader?name=assets/locales/angular/pa-Guru.js!@angular/common/locales/pa-Guru.js';
import pa from '!file-loader?name=assets/locales/angular/pa.js!@angular/common/locales/pa.js';
import pl from '!file-loader?name=assets/locales/angular/pl.js!@angular/common/locales/pl.js';
import prg from '!file-loader?name=assets/locales/angular/prg.js!@angular/common/locales/prg.js';
import ps from '!file-loader?name=assets/locales/angular/ps.js!@angular/common/locales/ps.js';
import ptAO from '!file-loader?name=assets/locales/angular/pt-AO.js!@angular/common/locales/pt-AO.js';
import ptCH from '!file-loader?name=assets/locales/angular/pt-CH.js!@angular/common/locales/pt-CH.js';
import ptCV from '!file-loader?name=assets/locales/angular/pt-CV.js!@angular/common/locales/pt-CV.js';
import ptGQ from '!file-loader?name=assets/locales/angular/pt-GQ.js!@angular/common/locales/pt-GQ.js';
import ptGW from '!file-loader?name=assets/locales/angular/pt-GW.js!@angular/common/locales/pt-GW.js';
import ptLU from '!file-loader?name=assets/locales/angular/pt-LU.js!@angular/common/locales/pt-LU.js';
import ptMO from '!file-loader?name=assets/locales/angular/pt-MO.js!@angular/common/locales/pt-MO.js';
import ptMZ from '!file-loader?name=assets/locales/angular/pt-MZ.js!@angular/common/locales/pt-MZ.js';
import ptPT from '!file-loader?name=assets/locales/angular/pt-PT.js!@angular/common/locales/pt-PT.js';
import ptST from '!file-loader?name=assets/locales/angular/pt-ST.js!@angular/common/locales/pt-ST.js';
import ptTL from '!file-loader?name=assets/locales/angular/pt-TL.js!@angular/common/locales/pt-TL.js';
import pt from '!file-loader?name=assets/locales/angular/pt.js!@angular/common/locales/pt.js';
import quBO from '!file-loader?name=assets/locales/angular/qu-BO.js!@angular/common/locales/qu-BO.js';
import quEC from '!file-loader?name=assets/locales/angular/qu-EC.js!@angular/common/locales/qu-EC.js';
import qu from '!file-loader?name=assets/locales/angular/qu.js!@angular/common/locales/qu.js';
import rm from '!file-loader?name=assets/locales/angular/rm.js!@angular/common/locales/rm.js';
import rn from '!file-loader?name=assets/locales/angular/rn.js!@angular/common/locales/rn.js';
import roMD from '!file-loader?name=assets/locales/angular/ro-MD.js!@angular/common/locales/ro-MD.js';
import ro from '!file-loader?name=assets/locales/angular/ro.js!@angular/common/locales/ro.js';
import rof from '!file-loader?name=assets/locales/angular/rof.js!@angular/common/locales/rof.js';
import root from '!file-loader?name=assets/locales/angular/root.js!@angular/common/locales/root.js';
import ruBY from '!file-loader?name=assets/locales/angular/ru-BY.js!@angular/common/locales/ru-BY.js';
import ruKG from '!file-loader?name=assets/locales/angular/ru-KG.js!@angular/common/locales/ru-KG.js';
import ruKZ from '!file-loader?name=assets/locales/angular/ru-KZ.js!@angular/common/locales/ru-KZ.js';
import ruMD from '!file-loader?name=assets/locales/angular/ru-MD.js!@angular/common/locales/ru-MD.js';
import ruUA from '!file-loader?name=assets/locales/angular/ru-UA.js!@angular/common/locales/ru-UA.js';
import ru from '!file-loader?name=assets/locales/angular/ru.js!@angular/common/locales/ru.js';
import rw from '!file-loader?name=assets/locales/angular/rw.js!@angular/common/locales/rw.js';
import rwk from '!file-loader?name=assets/locales/angular/rwk.js!@angular/common/locales/rwk.js';
import sah from '!file-loader?name=assets/locales/angular/sah.js!@angular/common/locales/sah.js';
import saq from '!file-loader?name=assets/locales/angular/saq.js!@angular/common/locales/saq.js';
import sbp from '!file-loader?name=assets/locales/angular/sbp.js!@angular/common/locales/sbp.js';
import sd from '!file-loader?name=assets/locales/angular/sd.js!@angular/common/locales/sd.js';
import seFI from '!file-loader?name=assets/locales/angular/se-FI.js!@angular/common/locales/se-FI.js';
import seSE from '!file-loader?name=assets/locales/angular/se-SE.js!@angular/common/locales/se-SE.js';
import se from '!file-loader?name=assets/locales/angular/se.js!@angular/common/locales/se.js';
import seh from '!file-loader?name=assets/locales/angular/seh.js!@angular/common/locales/seh.js';
import ses from '!file-loader?name=assets/locales/angular/ses.js!@angular/common/locales/ses.js';
import sg from '!file-loader?name=assets/locales/angular/sg.js!@angular/common/locales/sg.js';
import shiLatn from '!file-loader?name=assets/locales/angular/shi-Latn.js!@angular/common/locales/shi-Latn.js';
import shiTfng from '!file-loader?name=assets/locales/angular/shi-Tfng.js!@angular/common/locales/shi-Tfng.js';
import shi from '!file-loader?name=assets/locales/angular/shi.js!@angular/common/locales/shi.js';
import si from '!file-loader?name=assets/locales/angular/si.js!@angular/common/locales/si.js';
import sk from '!file-loader?name=assets/locales/angular/sk.js!@angular/common/locales/sk.js';
import sl from '!file-loader?name=assets/locales/angular/sl.js!@angular/common/locales/sl.js';
import smn from '!file-loader?name=assets/locales/angular/smn.js!@angular/common/locales/smn.js';
import sn from '!file-loader?name=assets/locales/angular/sn.js!@angular/common/locales/sn.js';
import soDJ from '!file-loader?name=assets/locales/angular/so-DJ.js!@angular/common/locales/so-DJ.js';
import soET from '!file-loader?name=assets/locales/angular/so-ET.js!@angular/common/locales/so-ET.js';
import soKE from '!file-loader?name=assets/locales/angular/so-KE.js!@angular/common/locales/so-KE.js';
import so from '!file-loader?name=assets/locales/angular/so.js!@angular/common/locales/so.js';
import sqMK from '!file-loader?name=assets/locales/angular/sq-MK.js!@angular/common/locales/sq-MK.js';
import sqXK from '!file-loader?name=assets/locales/angular/sq-XK.js!@angular/common/locales/sq-XK.js';
import sq from '!file-loader?name=assets/locales/angular/sq.js!@angular/common/locales/sq.js';
import srCyrlBA from '!file-loader?name=assets/locales/angular/sr-Cyrl-BA.js!@angular/common/locales/sr-Cyrl-BA.js';
import srCyrlME from '!file-loader?name=assets/locales/angular/sr-Cyrl-ME.js!@angular/common/locales/sr-Cyrl-ME.js';
import srCyrlXK from '!file-loader?name=assets/locales/angular/sr-Cyrl-XK.js!@angular/common/locales/sr-Cyrl-XK.js';
import srCyrl from '!file-loader?name=assets/locales/angular/sr-Cyrl.js!@angular/common/locales/sr-Cyrl.js';
import srLatnBA from '!file-loader?name=assets/locales/angular/sr-Latn-BA.js!@angular/common/locales/sr-Latn-BA.js';
import srLatnME from '!file-loader?name=assets/locales/angular/sr-Latn-ME.js!@angular/common/locales/sr-Latn-ME.js';
import srLatnXK from '!file-loader?name=assets/locales/angular/sr-Latn-XK.js!@angular/common/locales/sr-Latn-XK.js';
import srLatn from '!file-loader?name=assets/locales/angular/sr-Latn.js!@angular/common/locales/sr-Latn.js';
import sr from '!file-loader?name=assets/locales/angular/sr.js!@angular/common/locales/sr.js';
import svAX from '!file-loader?name=assets/locales/angular/sv-AX.js!@angular/common/locales/sv-AX.js';
import svFI from '!file-loader?name=assets/locales/angular/sv-FI.js!@angular/common/locales/sv-FI.js';
import sv from '!file-loader?name=assets/locales/angular/sv.js!@angular/common/locales/sv.js';
import swCD from '!file-loader?name=assets/locales/angular/sw-CD.js!@angular/common/locales/sw-CD.js';
import swKE from '!file-loader?name=assets/locales/angular/sw-KE.js!@angular/common/locales/sw-KE.js';
import swUG from '!file-loader?name=assets/locales/angular/sw-UG.js!@angular/common/locales/sw-UG.js';
import sw from '!file-loader?name=assets/locales/angular/sw.js!@angular/common/locales/sw.js';
import taLK from '!file-loader?name=assets/locales/angular/ta-LK.js!@angular/common/locales/ta-LK.js';
import taMY from '!file-loader?name=assets/locales/angular/ta-MY.js!@angular/common/locales/ta-MY.js';
import taSG from '!file-loader?name=assets/locales/angular/ta-SG.js!@angular/common/locales/ta-SG.js';
import ta from '!file-loader?name=assets/locales/angular/ta.js!@angular/common/locales/ta.js';
import te from '!file-loader?name=assets/locales/angular/te.js!@angular/common/locales/te.js';
import teoKE from '!file-loader?name=assets/locales/angular/teo-KE.js!@angular/common/locales/teo-KE.js';
import teo from '!file-loader?name=assets/locales/angular/teo.js!@angular/common/locales/teo.js';
import tg from '!file-loader?name=assets/locales/angular/tg.js!@angular/common/locales/tg.js';
import th from '!file-loader?name=assets/locales/angular/th.js!@angular/common/locales/th.js';
import tiER from '!file-loader?name=assets/locales/angular/ti-ER.js!@angular/common/locales/ti-ER.js';
import ti from '!file-loader?name=assets/locales/angular/ti.js!@angular/common/locales/ti.js';
import tk from '!file-loader?name=assets/locales/angular/tk.js!@angular/common/locales/tk.js';
import to from '!file-loader?name=assets/locales/angular/to.js!@angular/common/locales/to.js';
import trCY from '!file-loader?name=assets/locales/angular/tr-CY.js!@angular/common/locales/tr-CY.js';
import tr from '!file-loader?name=assets/locales/angular/tr.js!@angular/common/locales/tr.js';
import tt from '!file-loader?name=assets/locales/angular/tt.js!@angular/common/locales/tt.js';
import twq from '!file-loader?name=assets/locales/angular/twq.js!@angular/common/locales/twq.js';
import tzm from '!file-loader?name=assets/locales/angular/tzm.js!@angular/common/locales/tzm.js';
import ug from '!file-loader?name=assets/locales/angular/ug.js!@angular/common/locales/ug.js';
import uk from '!file-loader?name=assets/locales/angular/uk.js!@angular/common/locales/uk.js';
import urIN from '!file-loader?name=assets/locales/angular/ur-IN.js!@angular/common/locales/ur-IN.js';
import ur from '!file-loader?name=assets/locales/angular/ur.js!@angular/common/locales/ur.js';
import uzArab from '!file-loader?name=assets/locales/angular/uz-Arab.js!@angular/common/locales/uz-Arab.js';
import uzCyrl from '!file-loader?name=assets/locales/angular/uz-Cyrl.js!@angular/common/locales/uz-Cyrl.js';
import uzLatn from '!file-loader?name=assets/locales/angular/uz-Latn.js!@angular/common/locales/uz-Latn.js';
import uz from '!file-loader?name=assets/locales/angular/uz.js!@angular/common/locales/uz.js';
import vaiLatn from '!file-loader?name=assets/locales/angular/vai-Latn.js!@angular/common/locales/vai-Latn.js';
import vaiVaii from '!file-loader?name=assets/locales/angular/vai-Vaii.js!@angular/common/locales/vai-Vaii.js';
import vai from '!file-loader?name=assets/locales/angular/vai.js!@angular/common/locales/vai.js';
import vi from '!file-loader?name=assets/locales/angular/vi.js!@angular/common/locales/vi.js';
import vo from '!file-loader?name=assets/locales/angular/vo.js!@angular/common/locales/vo.js';
import vun from '!file-loader?name=assets/locales/angular/vun.js!@angular/common/locales/vun.js';
import wae from '!file-loader?name=assets/locales/angular/wae.js!@angular/common/locales/wae.js';
import wo from '!file-loader?name=assets/locales/angular/wo.js!@angular/common/locales/wo.js';
import xog from '!file-loader?name=assets/locales/angular/xog.js!@angular/common/locales/xog.js';
import yav from '!file-loader?name=assets/locales/angular/yav.js!@angular/common/locales/yav.js';
import yi from '!file-loader?name=assets/locales/angular/yi.js!@angular/common/locales/yi.js';
import yoBJ from '!file-loader?name=assets/locales/angular/yo-BJ.js!@angular/common/locales/yo-BJ.js';
import yo from '!file-loader?name=assets/locales/angular/yo.js!@angular/common/locales/yo.js';
import yueHans from '!file-loader?name=assets/locales/angular/yue-Hans.js!@angular/common/locales/yue-Hans.js';
import yueHant from '!file-loader?name=assets/locales/angular/yue-Hant.js!@angular/common/locales/yue-Hant.js';
import yue from '!file-loader?name=assets/locales/angular/yue.js!@angular/common/locales/yue.js';
import zgh from '!file-loader?name=assets/locales/angular/zgh.js!@angular/common/locales/zgh.js';
import zhHansHK from '!file-loader?name=assets/locales/angular/zh-Hans-HK.js!@angular/common/locales/zh-Hans-HK.js';
import zhHansMO from '!file-loader?name=assets/locales/angular/zh-Hans-MO.js!@angular/common/locales/zh-Hans-MO.js';
import zhHansSG from '!file-loader?name=assets/locales/angular/zh-Hans-SG.js!@angular/common/locales/zh-Hans-SG.js';
import zhHans from '!file-loader?name=assets/locales/angular/zh-Hans.js!@angular/common/locales/zh-Hans.js';
import zhHantHK from '!file-loader?name=assets/locales/angular/zh-Hant-HK.js!@angular/common/locales/zh-Hant-HK.js';
import zhHantMO from '!file-loader?name=assets/locales/angular/zh-Hant-MO.js!@angular/common/locales/zh-Hant-MO.js';
import zhHant from '!file-loader?name=assets/locales/angular/zh-Hant.js!@angular/common/locales/zh-Hant.js';
import zh from '!file-loader?name=assets/locales/angular/zh.js!@angular/common/locales/zh.js';
import zu from '!file-loader?name=assets/locales/angular/zu.js!@angular/common/locales/zu.js';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { get as get$1, find, negate, isUndefined as isUndefined$1, isEmpty as isEmpty$1, sortBy as sortBy$1 } from 'lodash';
import { FormsModule as FormsModule$1, NG_VALIDATORS, ControlContainer, NgForm, NgModel, NgControl, FormGroup, FormControl, ReactiveFormsModule, NG_VALUE_ACCESSOR, CheckboxControlValueAccessor } from '@angular/forms';
import { PopoverDirective, PopoverModule } from 'ngx-bootstrap/popover';
import { BsModalRef, BsModalService, ModalModule as ModalModule$1 } from 'ngx-bootstrap/modal';
import { parsePhoneNumberFromString } from 'libphonenumber-js/max';
import { QRCodeModule } from 'angularx-qrcode';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { FieldArrayType, FieldType, FieldWrapper, FormlyModule, FORMLY_CONFIG, ɵdefineHiddenProp } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { DomSanitizer } from '@angular/platform-browser';
import { STEP_STATE, CdkStepper, CdkStep, CdkStepperModule, STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';
import { CdkHeaderCell, CdkTableModule } from '@angular/cdk/table';
import { PaginationModule } from 'ngx-bootstrap/pagination';

function fromTrigger(router, refresh, factories) {
    return router.events.pipe(filter(function (evt) { return evt instanceof NavigationEnd; }), merge(refresh), startWith(1), switchMap(function () { return fromFactories(factories, router); }));
}
function fromFactories(factories, router, withFirstEmpty) {
    if (withFirstEmpty === void 0) { withFirstEmpty = true; }
    return !Array.isArray(factories) || factories.length < 1
        ? of([])
        : defer(function () {
            var factoryObservables = resolveInjectedFactories(factories).map(function (f) {
                return toObservable(Array.isArray(f) ? f : f && isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
            });
            return combineLatest.apply(void 0, __spread(factoryObservables));
        }).pipe(map(function (results) { return sortByPriority([].concat.apply([], __spread(results))); }));
}
function resolveInjectedFactories(factories) {
    return flatten(factories.map(function (f) { return (isFunction(f) ? f() : [f]); }));
}
function stateToFactory(componentsState) {
    var components$ = componentsState.pipe(map(function (componentSet) { return Array.from(componentSet); }));
    return { get: function () { return components$; } };
}
function sortByPriority(items) {
    return sortBy(items, 'priority');
}
function toObservable(factoryResult, withFirstEmpty) {
    var observable;
    if (!factoryResult) {
        return of([]);
    }
    else if (typeof factoryResult.then === 'function' || isObservable(factoryResult)) {
        if (withFirstEmpty) {
            var forceObservable = from(factoryResult);
            var withEmptyFirst = forceObservable.pipe(startWith([]));
            observable = race(forceObservable, withEmptyFirst);
        }
        else {
            observable = from(factoryResult);
        }
    }
    else {
        observable = of(factoryResult);
    }
    return observable.pipe(map(function (result) { return (Array.isArray(result) ? result : [result]).filter(function (item) { return !!item; }); }));
}
/**
 * Helper function to get the activated route in
 * a service (as ActivatedRoute injection only
 * works in components). Works as long as we only use
 * a tree and no child is active at the same time.
 *
 * @param router The current router
 */
function getActivatedRoute(router) {
    if (router && router.routerState && router.routerState.root) {
        var route = router.routerState.root;
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
}

/**
 * A abstract state which should be included in each state.
 * @abstract
 */
var StateService = /** @class */ (function () {
    function StateService() {
    }
    /**
     * Maps to a property and just returns that property.
     * @param mappedProperty The property to map to.
     */
    StateService.prototype.map = function (mappedProperty) {
        return this.state$.pipe(map(mappedProperty), distinctUntilChanged());
    };
    /**
     * Emits a new state.
     */
    StateService.prototype.emitNewState = function () {
        this.state$.next(this.state);
    };
    return StateService;
}());

/**
 * A hook to add ActionBarItems using the multi provider extension concept.
 *
 * @example
 * ```typescript
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 * ```
 *
 */
var HOOK_ACTION_BAR = new InjectionToken('ActionBarFactory');
/**
 * A service which defines action-bar items via the multi provider concept.
 *
 * @example
 * ```typescript
 * // preferred way, multi provider concept:
 * providers: [
 *   {
 *     provide: HOOK_ACTION_BAR,
 *     useValue: [{ template: SomeComponent, priority: 10, placement: 'left' } as ActionBarItem],
 *     multi: true
 *   }
 * ]
 *
 * // use services:
 * this.actionBarService.add({ template: SomeComponent, priority: 10, placement: 'left' });
 * ```
 */
var ActionBarService = /** @class */ (function (_super) {
    __extends(ActionBarService, _super);
    /**
     * @ignore
     */
    function ActionBarService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_ACTION_BAR, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (items) { return sortByPriority(items); }), shareReplay(1));
        return _this;
    }
    Object.defineProperty(ActionBarService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Refreshes the current store.
     */
    ActionBarService.prototype.refresh = function () {
        this.refreshTrigger.next();
    };
    /**
     * Adds a new item to the action bar in the header and emits a state change.
     * @param item The item to add.
     */
    ActionBarService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an action bar item from the header and emits a state change.
     * @param item The item to remove.
     */
    ActionBarService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    ActionBarService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    ActionBarService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ActionBarService_Factory() { return new ActionBarService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: ActionBarService, providedIn: "root" });
    ActionBarService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ActionBarService);
    return ActionBarService;
}(StateService));

/**
 * A <c8y-action-bar-item> can be added with content projection.
 * It allows to show items in three positions (left, right
 * or more).
 *
 * @example
 * ```html
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
 * </c8y-action-bar-item>
 * ```
 */
var ActionBarItemComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function ActionBarItemComponent(actionBarService) {
        this.actionBarService = actionBarService;
        /**
         * Where the item should be shown. Use "more" to place
         * it in a dropdown on the right.
         */
        this.placement = 'left';
        /**
         * Priority for sorting the list. Higher priority means
         * an earlier position in the list.
         */
        this.priority = 0;
        /**
         * Adds additional classes to the item.
         */
        this.itemClass = '';
    }
    /**
     * @ignore
     */
    ActionBarItemComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.viewInitTimeout = setTimeout(function () { return _this.actionBarService.add(_this); });
    };
    /**
     * @ignore
     */
    ActionBarItemComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.actionBarService.remove(this);
    };
    ActionBarItemComponent.ctorParameters = function () { return [
        { type: ActionBarService }
    ]; };
    __decorate([
        Input()
    ], ActionBarItemComponent.prototype, "placement", void 0);
    __decorate([
        Input()
    ], ActionBarItemComponent.prototype, "priority", void 0);
    __decorate([
        Input()
    ], ActionBarItemComponent.prototype, "itemClass", void 0);
    __decorate([
        ViewChild('template', { static: false })
    ], ActionBarItemComponent.prototype, "template", void 0);
    ActionBarItemComponent = __decorate([
        Component({
            selector: 'c8y-action-bar-item',
            template: "<ng-template #template>\n  <li class=\"{{itemClass}}\">\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
        })
    ], ActionBarItemComponent);
    return ActionBarItemComponent;
}());

/*
 * -----------------------------WARNING---------------------------------
 * This file has an *exact* copy in packages/cli/src/webpack.
 * Any changes to this file must be reflected there, too.
 */
var ApplicationOptions = /** @class */ (function () {
    function ApplicationOptions() {
    }
    return ApplicationOptions;
}());

var HOOK_OPTIONS = new InjectionToken('App options');
/**
 * A service that allows to set or get application options
 * which configure the default behavior of the UI.
 */
var OptionsService = /** @class */ (function (_super) {
    __extends(OptionsService, _super);
    function OptionsService(options, systemOptionsService, tenantOptionService) {
        var _this = _super.call(this) || this;
        _this.systemOptionsService = systemOptionsService;
        _this.tenantOptionService = tenantOptionService;
        _this.setupOptions(options);
        return _this;
    }
    /**
     * Returns an application option used to configure the UI.
     * @param optionKey The application options key.
     * @param defaultValue A value to return if non is set.
     */
    OptionsService.prototype.get = function (optionKey, defaultValue) {
        var value = this[optionKey];
        if (typeof value === 'undefined') {
            value = this[camelCase(optionKey)];
        }
        return typeof value !== 'undefined' ? value : defaultValue;
    };
    /**
     * Sets an application option.
     * @param key The key to set.
     * @param value The value to set.
     */
    OptionsService.prototype.set = function (key, value) {
        this[camelCase(key)] = value;
    };
    /**
     * Gets support url from tenant options.
     * If response returns '404 not found' it gets the support url from application options.
     * If the support link within application options is not provided the UI will use the system options.
     * Is the support link explicitly set to false it will be hidden.
     *
     * @returns Returns support url or false.
     */
    OptionsService.prototype.getSupportUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.getTenantOption('configuration', 'system.support.url')];
                    case 1:
                        url = _c.sent();
                        if (isUndefined(url)) {
                            url = this.supportUrl;
                        }
                        _a = this;
                        if (!isUndefined(url)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getSystemOption('support', 'url')];
                    case 2:
                        _b = (_c.sent()) || false;
                        return [3 /*break*/, 4];
                    case 3:
                        _b = url;
                        _c.label = 4;
                    case 4:
                        _a.supportUrl = _b;
                        return [2 /*return*/, this.supportUrl];
                }
            });
        });
    };
    /**
     * Returns if the tenant allows to show the activate-support user menu entry.
     * Note: Only if system-level support-user/enabled is false we can activate it at tenant level.
     */
    OptionsService.prototype.getActivateSupportUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var option;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSystemOption('support-user', 'enabled', true)];
                    case 1:
                        option = _a.sent();
                        return [2 /*return*/, !option];
                }
            });
        });
    };
    /**
     * Gets a value from the system service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    OptionsService.prototype.getSystemOption = function (category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getOptionFromService(category, key, this.systemOptionsService, defaultValue)];
            });
        });
    };
    /**
     * Gets a value from the tenant service and parses it.
     *
     * @param category The category for this option.
     * @param key The key for that option.
     * @param defaultValue The default if the option was not found.
     */
    OptionsService.prototype.getTenantOption = function (category, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getOptionFromService(category, key, this.tenantOptionService, defaultValue)];
            });
        });
    };
    OptionsService.prototype.setupOptions = function (options) {
        var _this = this;
        if (options) {
            if (!Array.isArray(options)) {
                options = [options];
            }
            options.forEach(function (optionMap) {
                if (optionMap) {
                    Object.keys(optionMap).forEach(function (key) {
                        _this[camelCase(key)] = optionMap[key];
                    });
                }
            });
        }
    };
    OptionsService.prototype.getOptionFromService = function (category, key, service, defaultValue) {
        return __awaiter(this, void 0, void 0, function () {
            var data, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, service.detail({ category: category, key: key })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, this.parseOptionRawValue(data.value, defaultValue)];
                    case 2:
                        ex_1 = _a.sent();
                        return [2 /*return*/, defaultValue];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OptionsService.prototype.parseOptionRawValue = function (rawValue, defaultValue) {
        var value;
        try {
            value = JSON.parse(rawValue);
        }
        catch (e) {
            value = isUndefined(rawValue) ? defaultValue : rawValue;
        }
        return value;
    };
    OptionsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_OPTIONS,] }] },
        { type: SystemOptionsService },
        { type: TenantOptionsService }
    ]; };
    OptionsService = __decorate([
        Injectable(),
        __param(0, Optional()), __param(0, Inject(HOOK_OPTIONS))
    ], OptionsService);
    return OptionsService;
}(ApplicationOptions));

/**
 * Decorator to throttle functions call.
 * @param wait throttle time.
 * @param options set triggers, eg on trailing edge or falling edge,
 * see lodash documentation for details
 */
function throttle(wait, options) {
    return function (target, fnName, descriptor) {
        var fn = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var throttledFnName = "_" + fnName + "Throttled";
            if (!this[throttledFnName]) {
                this[throttledFnName] = throttle$1(fn, wait, options);
            }
            return this[throttledFnName].apply(this, args);
        };
    };
}

var AppStateService = /** @class */ (function (_super) {
    __extends(AppStateService, _super);
    function AppStateService(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
        var _this = _super.call(this) || this;
        _this.applicationService = applicationService;
        _this.apiService = apiService;
        _this.options = options;
        _this.fetchClient = fetchClient;
        _this.tenantLoginOptionsService = tenantLoginOptionsService;
        _this.state$ = new BehaviorSubject({
            app: {
                name: _this.options.name,
                contextPath: _this.getCurrentContextPath() || _this.options.contextPath
            },
            supportUrl: _this.options.supportUrl,
            lang: _this.options.get('defaultLanguage', 'en'),
            langs: _this.getLangs(),
            langsDetail: _this.options.languages,
            loginOptions: _this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: _this.options.versions || { ngx: undefined }
            },
            hidePowered: _this.options.hidePowered,
            isLoading: false,
            showRightDrawer: _this.options.rightDrawer,
            loginExtraLink: _this.options.get('login_extra_link'),
            newsletter: _this.options.newsletter
        });
        _this.currentSupportUserName = new BehaviorSubject(null);
        _this.currentUser = new BehaviorSubject(null);
        _this.currentTenant = new BehaviorSubject(null);
        _this.apiService.calls
            .pipe(filter(function (_a) {
            var url = _a.url;
            return !/notification\/realtime/.test(url);
        }), map(function (_a) {
            var phase = _a.phase;
            return (phase === 'start' ? 1 : -1);
        }), scan(function (count, item) { return count + item; }, 0), map(function (count) { return count > 0; }), distinctUntilChanged())
            .subscribe(function (isLoading) { return (_this.state.isLoading = isLoading); });
        _this.assignApplicationKeyToDefaultHeaders();
        return _this;
    }
    AppStateService.prototype.assignApplicationKeyToDefaultHeaders = function () {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = __assign({}, (this.fetchClient.defaultHeaders || {}), { 'X-Cumulocity-Application-Key': this.options.key });
        }
    };
    Object.defineProperty(AppStateService.prototype, "state", {
        /**
         * Returns the current state.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    AppStateService.prototype.getLangs = function () {
        var languages = this.options.languages;
        return languages ? keys(languages).filter(function (k) { return languages[k]; }) : [];
    };
    Object.defineProperty(AppStateService.prototype, "uiVersion", {
        /**
         * Returns the correct UI version. In hybrid mode for angular and ngx.
         */
        get: function () {
            var version = this.state.versions.ui;
            return version.ngx || version.ng1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    AppStateService.prototype.loadManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var application, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.applicationService.detail(this.state.app.contextPath + "/manifest")];
                    case 1:
                        application = (_a.sent()).data.application;
                        this.state.app.manifest = application;
                        this.loadDefaultOptions();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        throw ex_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * When this function called, it refreshes the values of loginOptions stored within ui state object.
     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
     * it should be called on leading edge of the timeout.
     */
    AppStateService.prototype.refreshLoginOptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loginOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tenantLoginOptionsService.detail()];
                    case 1:
                        loginOptions = (_a.sent()).data.loginOptions;
                        this.state$.next(__assign({}, this.state, { loginOptions: loginOptions }));
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    AppStateService.prototype.isApplicationAvailable = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.applicationService.listByUser(undefined, { pageSize: 100 })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.some(function (app) { return app.name === name; })];
                }
            });
        });
    };
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    AppStateService.prototype.setUser = function (userInfo) {
        this.currentSupportUserName.next(userInfo.supportUserName || null);
        this.currentUser.next(userInfo.user);
    };
    AppStateService.prototype.getCurrentContextPath = function () {
        var match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    };
    AppStateService.prototype.loadDefaultOptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this.state;
                        return [4 /*yield*/, this.options.getSupportUrl()];
                    case 1:
                        _a.supportUrl = _d.sent();
                        _b = this.state;
                        return [4 /*yield*/, this.options.getActivateSupportUser()];
                    case 2:
                        _b.activateSupportUserAvailable = _d.sent();
                        _c = this.state.versions;
                        return [4 /*yield*/, this.options.getSystemOption('system', 'version')];
                    case 3:
                        _c.backend = _d.sent();
                        try {
                            this.showIncompatibleVersionsError();
                        }
                        catch (ex) {
                            // ignore this
                        }
                        this.emitNewState();
                        return [2 /*return*/];
                }
            });
        });
    };
    AppStateService.prototype.showIncompatibleVersionsError = function () {
        var uiVersion = this.state.versions.ui.ngx;
        var backendVersion = this.state.versions.backend;
        var uiVersionArray = uiVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        var beVersionArray = backendVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        var multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max.apply(Math, __spread(uiVersionArray, beVersionArray)) + 1)));
        var sumReducer = function (acc, cur) { return acc + cur; };
        var calculateVersionMapper = function (curr, idx) { return curr * (multiplier / Math.pow(10, idx)); };
        var uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        var beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        var showError = uiVersionNumber > beVersionNumber;
        if (showError) {
            var errorContent = "You are running version " + uiVersion + " of the UI and version " + backendVersion + " of backend!";
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    };
    AppStateService.ctorParameters = function () { return [
        { type: ApplicationService },
        { type: ApiService$1 },
        { type: OptionsService },
        { type: FetchClient },
        { type: TenantLoginOptionsService }
    ]; };
    __decorate([
        throttle(600, { trailing: false })
    ], AppStateService.prototype, "refreshLoginOptions", null);
    AppStateService = __decorate([
        Injectable()
    ], AppStateService);
    return AppStateService;
}(StateService));

var LANGUAGES = new InjectionToken('Languages');

var LOCALE_PATH = new InjectionToken('Locale path');

var HOOK_PATTERN_MESSAGES = new InjectionToken('Pattern Messages');

/**
 * A service to translate messages by using regexp patterns.
 */
var PatternMessagesService = /** @class */ (function () {
    function PatternMessagesService(patterns) {
        var _this = this;
        this.patterns = {};
        this.pipes = {
            absoluteDate: function (date) {
                return formatDate(date, 'medium', _this.translateService.currentLang);
            },
            translate: function (key) {
                return _this.translateService.instant(key);
            }
        };
        each(patterns, function (pattern) {
            Object.assign(_this.patterns, pattern);
        });
    }
    PatternMessagesService.prototype.translate = function (message) {
        var translation = this.translateWithPatterns(message);
        return (translation !== message) ? translation : '';
    };
    PatternMessagesService.prototype.translateWithPatterns = function (message, patterns) {
        var _this = this;
        if (patterns === void 0) { patterns = this.patterns; }
        var translatedMessage = message;
        each(patterns, function (patternCfg, pattern) {
            var globalRegExp = new RegExp(pattern, 'g');
            var globalMatch;
            if (!globalRegExp.test(translatedMessage)) {
                return;
            }
            globalRegExp.test(''); // reset the regexp
            globalMatch = globalRegExp.exec(translatedMessage);
            var _loop_1 = function () {
                var _a = __read(globalMatch, 1), localMatch = _a[0];
                var placeholderValues = mapValues(patternCfg.placeholders, function (placeholder) {
                    var expr = placeholder.capture || placeholder;
                    var replacement = localMatch.replace(new RegExp(pattern, 'g'), expr);
                    if (placeholder.translate) {
                        replacement = _this.translateWithPatterns(replacement, placeholder.translate);
                    }
                    return replacement;
                });
                translatedMessage = translatedMessage.replace(localMatch, _this.translateWithParams(patternCfg, placeholderValues));
                globalMatch = globalRegExp.exec(translatedMessage);
            };
            while (globalMatch !== null) {
                _loop_1();
            }
        });
        return translatedMessage;
    };
    PatternMessagesService.prototype.translateWithParams = function (patternCfg, params) {
        if (params === void 0) { params = {}; }
        var _a = this.translateService, defaultLang = _a.defaultLang, currentLang = _a.currentLang, compiler = _a.compiler;
        var translations = this.translateService.store.translations[currentLang];
        var defaultTranslations = this.translateService.store.translations[defaultLang];
        var originalKey = patternCfg.gettext;
        var originalValue = originalKey;
        if (translations) {
            if (translations[originalKey]) {
                originalValue = translations[originalKey];
            }
            else if (defaultTranslations) {
                if (defaultTranslations[originalKey]) {
                    originalValue = defaultTranslations[originalKey];
                }
            }
        }
        var key = originalKey;
        var value = originalValue;
        var interpolateParams = __assign({}, params, { noPatternMessages: true });
        var match;
        var pipeRegex = RegExp('{{\\s*([^\\s]+)\\s*\\|\\s*([^\\s]+)\\s*}}', 'g');
        // tslint:disable-next-line:no-conditional-assignment
        while ((match = pipeRegex.exec(originalKey)) !== null) {
            var _b = __read(match, 3), placeholder = _b[0], paramName = _b[1], pipeName = _b[2];
            if (this.pipes[pipeName]) {
                key = key.replace(placeholder, "{{" + paramName + "}}");
                value = value.replace(placeholder, "{{" + paramName + "}}");
                interpolateParams[paramName] = this.pipes[pipeName](params[paramName]);
            }
        }
        if (translations) {
            translations[key] = compiler.compile(value, currentLang);
        }
        return this.translateService.instant(key, interpolateParams);
    };
    PatternMessagesService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [HOOK_PATTERN_MESSAGES,] }] }
    ]; };
    PatternMessagesService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PatternMessagesService_Factory() { return new PatternMessagesService(ɵɵinject(HOOK_PATTERN_MESSAGES)); }, token: PatternMessagesService, providedIn: "root" });
    PatternMessagesService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(HOOK_PATTERN_MESSAGES))
    ], PatternMessagesService);
    return PatternMessagesService;
}());

var MissingTranslationCustomHandler = /** @class */ (function () {
    function MissingTranslationCustomHandler(parser, patternMessagesService) {
        this.parser = parser;
        this.patternMessagesService = patternMessagesService;
        this.cache = {};
    }
    MissingTranslationCustomHandler.prototype.handle = function (params) {
        var messageKey = params.key, interpolateParams = params.interpolateParams, translateService = params.translateService;
        this.translateService = translateService;
        var translation = this.getFromCache(messageKey, interpolateParams);
        if (!translation) {
            var patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
            if (patternMessageTranslation) {
                translation = patternMessageTranslation;
            }
            else {
                translation = this.parser.interpolate(messageKey, interpolateParams);
            }
            this.addToCache(messageKey, interpolateParams, translation);
        }
        return translation;
    };
    MissingTranslationCustomHandler.prototype.getFromCache = function (messageKey, interpolateParams) {
        var currentLang = this.translateService.currentLang;
        var currentCache = this.cache[currentLang] || {};
        var cacheKey = this.getCacheKey(messageKey, interpolateParams);
        return currentCache[cacheKey];
    };
    MissingTranslationCustomHandler.prototype.addToCache = function (messageKey, interpolateParams, translation) {
        var currentLang = this.translateService.currentLang;
        var currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
        var cacheKey = this.getCacheKey(messageKey, interpolateParams);
        currentCache[cacheKey] = translation;
    };
    MissingTranslationCustomHandler.prototype.getCacheKey = function (messageKey, interpolateParams) {
        return interpolateParams ? messageKey + " " + JSON.stringify(interpolateParams) : messageKey;
    };
    MissingTranslationCustomHandler.prototype.getPatternMessageTranslation = function (messageKey, interpolateParams) {
        var shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
        if (shouldTryPatternMessages) {
            if (!this.patternMessagesService.translateService) {
                this.patternMessagesService.translateService = this.translateService;
            }
            return this.patternMessagesService.translate(messageKey);
        }
        return undefined;
    };
    MissingTranslationCustomHandler.ctorParameters = function () { return [
        { type: TranslateParser },
        { type: PatternMessagesService }
    ]; };
    MissingTranslationCustomHandler = __decorate([
        Injectable()
    ], MissingTranslationCustomHandler);
    return MissingTranslationCustomHandler;
}());

// Just for translation annotation
// Note: Own file because of conflicts if put in barrel directly.
var _ = function (str) { return str; };
function gettext(str) {
    return str;
}

/* tslint:disable:max-line-length */
var bulkOperationAuditLogTextPlaceholders = {
    updatesList: {
        capture: '$1',
        translate: {
            "status='(.+?)'": {
                gettext: gettext('status="{{status | translate}}"'),
                placeholders: {
                    status: '$1'
                }
            },
            "generalStatus='(.+?)'": {
                gettext: gettext('generalStatus="{{generalStatus | translate}}"'),
                placeholders: {
                    generalStatus: '$1'
                }
            },
            "progress='(.+?)'": {
                gettext: gettext('progress="{{progress}}"'),
                placeholders: {
                    progress: '$1'
                }
            },
            'note=(.+?)': {
                gettext: gettext('note="{{note}}"'),
                placeholders: {
                    note: '$1'
                }
            }
        }
    }
};
var MESSAGES = {
    '^Access is denied$': {
        gettext: gettext('Access denied.')
    },
    '^Alarm created$': {
        gettext: gettext('Alarm created')
    },
    '^Alarm updated$': {
        gettext: gettext('Alarm updated')
    },
    '^API is not available with the new domain$': {
        gettext: gettext('Could not activate custom domain. DNS setup is incorrect.')
    },
    '^Application with given name already exist$': {
        gettext: gettext('Application with given name already exists.')
    },
    '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
        gettext: gettext('This application is already assigned to tenant "{{tenant}}".'),
        placeholders: {
            tenant: '$2'
        }
    },
    '^Apply software changes: (.+?)\\.?$': {
        gettext: gettext('Apply software changes: {{ softwareChanges }}'),
        placeholders: {
            softwareChanges: {
                capture: '$1',
                translate: {
                    'install "(.+?)" \\(version: (.+?)\\)': {
                        gettext: gettext('install "{{ softwareName }}" (version: {{ softwareVersion }})'),
                        placeholders: {
                            softwareName: '$1',
                            softwareVersion: '$2'
                        }
                    },
                    'install "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: gettext('install "{{ softwareName }}"'),
                        placeholders: {
                            softwareName: '$1'
                        }
                    },
                    'delete "(.+?)" \\(version: (.+?)\\)': {
                        gettext: gettext('delete "{{ softwareName }}" (version: {{ softwareVersion }})'),
                        placeholders: {
                            softwareName: '$1',
                            softwareVersion: '$2'
                        }
                    },
                    'delete "([^"]+)"(?! \\(version: .+?\\))': {
                        gettext: gettext('delete "{{ softwareName }}"'),
                        placeholders: {
                            softwareName: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Assign device profile (.+?) to device (.+?)$': {
        gettext: gettext('Assign device profile {{profileName}} to device {{deviceName}}'),
        placeholders: {
            profileName: '$1',
            deviceName: '$2'
        }
    },
    '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
        gettext: gettext('Application for tenant "{{tenant}}" with the following values ({{valuesList}}) already exists.'),
        placeholders: {
            tenant: '$2',
            valuesList: '$3'
        }
    },
    '^Authentication failed! : User account is locked$': {
        gettext: gettext('Authentication failed due to: user account is locked.')
    },
    '^Availability monitoring record$': {
        gettext: gettext('Availability monitoring record')
    },
    '^Can not activate a certificate which is either expired or not yet valid$': {
        gettext: gettext('Cannot activate a certificate which is either expired or not yet valid.')
    },
    '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
        gettext: gettext('Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.'),
        placeholders: {
            fingerprint: '$1'
        }
    },
    '^Cannot change password. : Provided token does not exist.$': {
        gettext: gettext('Cannot change password: provided token is invalid.')
    },
    '^Cannot deploy module (.*)$': {
        gettext: gettext('Cannot deploy module due to error: "{{ errorMessage | translate }}".'),
        placeholders: {
            errorMessage: '$1'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+) near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}} near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6',
            keyword: '$7'
        }
    },
    "^Cannot deploy module (.+?)! : Compilation failed in module '(.+?)' in expression '(.+?)' : Incorrect syntax near '(.+?)' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}, check "where" clause.'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            incorrectExpression: '$4',
            line: '$5',
            column: '$6'
        }
    },
    "^Cannot deploy module (.+?)! : Deployment failed in module '(.+?)' in expression '(.+?)' : Exception compiling script '(.+?)' of dialect '(.+?)': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": exception compiling script "{{scriptName}}" of dialect "{{scriptDialect}}": missing "{{missingSyntax}}" before statement "{{affectedStatement}}".'),
        placeholders: {
            moduleName: '$1',
            expression: '$3',
            scriptName: '$4',
            scriptDialect: '$5',
            missingSyntax: '$6',
            affectedStatement: '$7'
        }
    },
    "^Cannot execute bulk operation on empty group. Group with id='(\\d+?)' doesn't have child assets.$": {
        gettext: gettext('Could not execute bulk operation on an empty group. Group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    "^Cannot execute bulk operation on empty group. DynamicGroup with id='(\\d+?)' doesn't have child assets$": {
        gettext: gettext('Could not execute bulk operation on an empty group. Smart group with ID "{{groupId}}" has no child assets.'),
        placeholders: {
            groupId: '$1'
        }
    },
    '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
        gettext: gettext('Could not parse X.509 certificate: {{ failureReason | translate }}.'),
        placeholders: {
            failureReason: '$1'
        }
    },
    '^Cannot reschedule bulk operation. All its operations are successful$': {
        gettext: gettext('Cannot reschedule bulk operation. All its operations are already successful.')
    },
    '^Cannot reset user password : Cannot find user with such email.$': {
        gettext: gettext('Cannot reset password for user with such email: email not found.')
    },
    '^Cannot update/delete application binary via this endpoint$': {
        gettext: gettext('Cannot update/delete application binary via this endpoint')
    },
    "^Can't delete user because it is used by another managed object$": {
        gettext: gettext('Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.')
    },
    '^Cep module created$': {
        gettext: gettext('CEP module created')
    },
    '^Cep module updated$': {
        gettext: gettext('CEP module updated')
    },
    '^Cep module deleted$': {
        gettext: gettext('CEP module deleted')
    },
    '^Cep module "(.+?)" created$': {
        gettext: gettext('CEP module "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" updated$': {
        gettext: gettext('CEP module "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Cep module "(.+?)" deleted$': {
        gettext: gettext('CEP module "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Command state is invalid: (.+)$': {
        gettext: gettext('Command state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" must not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
        gettext: gettext('Could not connect to endpoint "{{endpointName}}". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.'),
        placeholders: {
            endpointName: '$1',
            keyType: '$2',
            fingerprint: '$3',
            host: '$4',
            port: '$5'
        }
    },
    '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
        gettext: gettext('Could not access SSH server on endpoint "{{endpointName}}". Provided credentials for user "{{userName}}" are incorrect.'),
        placeholders: {
            endpointName: '$1',
            userName: '$2'
        }
    },
    '^Could not save object remoteAccessUpdate: (.+)$': {
        gettext: '{{errorMessages}}',
        placeholders: {
            errorMessages: {
                capture: '$1',
                translate: {
                    'Could not recognize host-key format': {
                        gettext: gettext('Could not recognize "Host key" format')
                    },
                    'Could not recognize key-pair format': {
                        gettext: gettext('Could not recognize the format of "Public key" or "Private key"')
                    }
                }
            }
        }
    },
    '^Could not update user. : Error persisting user (.+?)!$': {
        gettext: gettext('Could not update user "{{username}}".'),
        placeholders: {
            username: '$1'
        }
    },
    'ˆCreate bulk operation$': {
        gettext: gettext('Create bulk operation')
    },
    '^Create bulk operation: (.+)$': {
        gettext: gettext('Create bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    '^Creation ramp must be greater than (\\d+?)$': {
        gettext: gettext('Bulk operation delay must be greater than {{minSeconds}} seconds.'),
        placeholders: {
            minSeconds: '$1'
        }
    },
    '^Created container$': {
        gettext: gettext('Container created.')
    },
    '^Created pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" created.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^CSV file contained empty dataset$': {
        gettext: gettext('No entries found in uploaded CSV file.')
    },
    '^Cycle detected for route (.+?)!$': {
        gettext: gettext('Cycle detected for route {{route}}.'),
        placeholders: {
            route: '$1'
        }
    },
    '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.')
    },
    '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
        gettext: gettext('Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.')
    },
    '^Delete bulk operation$': {
        gettext: gettext('Delete bulk operation')
    },
    '^Delete bulk operation: (.+)$': {
        gettext: gettext('Delete bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    "^Device id '(.+?)' contains '(.+?)' character which is not permitted.$": {
        gettext: gettext('ID "{{deviceId}}" contains invalid character: "{{invalidCharacter}}".'),
        placeholders: {
            deviceId: '$1',
            invalidCharacter: '$2'
        }
    },
    "^Device name: '(.+?)', alarm text: '(.+?)'$": {
        gettext: gettext('Device name: "{{deviceName}}", alarm text: "{{alarmText | translate}}"'),
        placeholders: {
            deviceName: '$1',
            alarmText: '$2'
        }
    },
    '^Display name$': {
        gettext: gettext('Login alias')
    },
    '^Domain name in uploaded certificate differs from the one in use$': {
        gettext: gettext('Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.')
    },
    '^Domain name is already in use by another tenant!$': {
        gettext: gettext('Domain name is already used by another tenant.')
    },
    '^Duplicated connector for instanceUrl (.+?)!$': {
        gettext: gettext('Target URL {{targetUrl}} already used by another connector.'),
        placeholders: {
            targetUrl: '$1'
        }
    },
    '^Duplicated connector for name (.+?)!$': {
        gettext: gettext('Connector name "{{name}}" already used by another connector.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Entry is outside of the target dir: (.+)$': {
        gettext: gettext('File entry outside of the target directory: "{{path}}".'),
        placeholders: {
            path: '$1'
        }
    },
    '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
        gettext: gettext('Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.'),
        placeholders: {
            minCharactersCount: '$1',
            maxCharactersCount: '$2'
        }
    },
    '^Error during password validation. : Your password has been used already. Choose another.$': {
        gettext: gettext('This password has already been used earlier. Use a different one.')
    },
    "^Error in statement (.+?):(.+?)! : Incorrect syntax near '(.+?)' near reserved keyword '(.+?)' \\[([\\S\\s]+?)\\]$": {
        gettext: gettext('Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression "{{expression}}" near reserved keyword "{{keyword}}".'),
        placeholders: {
            moduleName: '$1',
            statementNumber: '$2',
            expression: '$3',
            keyword: '$4'
        }
    },
    '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
        gettext: gettext('External ID not found for type "{{type}}" and value "{{value}}".'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
        gettext: gettext('Could not find application by ID {{applicationId}}.'),
        placeholders: {
            applicationId: '$2'
        }
    },
    '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
        gettext: gettext('Unable to find option by given key: sigfox-agent/provider.token')
    },
    '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
        gettext: gettext('Could not delete application assigned to other tenants.')
    },
    '^Failed to extract certificate from PKCS12$': {
        gettext: gettext('Failed to extract certificate from PKCS12.')
    },
    '^Failed to update domain at the platform$': {
        gettext: gettext('Failed to update domain at the platform.')
    },
    "^Finding device data from database failed : No managedObject for id '(.+?)'!$": {
        gettext: gettext('Could not find managed object with ID "{{deviceId}}".'),
        placeholders: {
            deviceId: '$1'
        }
    },
    '^Following mandatory fields should be included: (.+?)$': {
        gettext: gettext('Following mandatory fields should be included: {{fields}}'),
        placeholders: {
            fields: '$1'
        }
    },
    '^Global Role updated$': {
        gettext: gettext('Global role updated')
    },
    '^Global Role (.+?) updated$': {
        gettext: gettext('Global role "{{name}}" updated'),
        placeholders: {
            name: '$1'
        }
    },
    '^Global Role (.+?) updated: (.+)$': {
        gettext: gettext('Global role "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    'applications \\[([^\\]]+?)\\] added': {
                        gettext: gettext('applications {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'applications \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('applications {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] added': {
                        gettext: gettext('roles {{list}} added'),
                        placeholders: {
                            list: '$1'
                        }
                    },
                    'roles \\[([^\\]]+?)\\] removed': {
                        gettext: gettext('roles {{list}} removed'),
                        placeholders: {
                            list: '$1'
                        }
                    }
                }
            }
        }
    },
    '^Global Roles$': {
        gettext: gettext('Global roles')
    },
    '^Operation updated: (.+)$': {
        gettext: gettext('Operation updated: {{updatesList}}'),
        placeholders: {
            updatesList: {
                capture: '$1',
                translate: {
                    "status='(.+?)'": {
                        gettext: gettext('status="{{status | translate}}"'),
                        placeholders: {
                            status: '$1'
                        }
                    },
                    "description='(.+?)'": {
                        gettext: gettext('description="{{description | translate}}"'),
                        placeholders: {
                            description: '$1'
                        }
                    },
                    "device name='(.+?)'": {
                        gettext: gettext('device name="{{deviceName}}"'),
                        placeholders: {
                            deviceName: '$1'
                        }
                    },
                    "failure reason='(.+?)'": {
                        gettext: gettext('failure reason="{{failureReason | translate}}"'),
                        placeholders: {
                            failureReason: '$1'
                        }
                    }
                }
            }
        }
    },
    '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
        gettext: gettext('External ID "{{value}}" of the type "{{type}}" already exists.'),
        placeholders: {
            type: '$1',
            value: '$2'
        }
    },
    '^Invalid credentials! : Bad credentials$': {
        gettext: gettext('Invalid credentials.')
    },
    '^Invalid credentials! : No phone number provided$': {
        gettext: gettext('Log into the management tenant first and enter your phone number.')
    },
    '^Inventory Role removed$': {
        gettext: gettext('Inventory role removed')
    },
    '^Inventory Role (.+?) removed': {
        gettext: gettext('Inventory role "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Inventory Role updated$': {
        gettext: gettext('Inventory role updated')
    },
    '^Inventory Role (.+?) updated': {
        gettext: gettext('Inventory role "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
        gettext: gettext('Connection refused')
    },
    '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
        gettext: gettext('Read timed out')
    },
    '^Log file requested$': {
        gettext: gettext('Log file requested.')
    },
    '^Managed object deleted$': {
        gettext: gettext('Managed object deleted')
    },
    '^Managed object "(.+?)" deleted$': {
        gettext: gettext('Managed object "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^Maximum file size exceeded$': {
        gettext: gettext('Maximum file size exceeded.')
    },
    "^Message with ID (.+?) doesn't exist in smart rest template (.+?)$": {
        gettext: gettext('Message with ID "{{messageId}}" doesn\'t exist in SmartREST template with ID "{{templateId}}"'),
        placeholders: {
            messageId: '$1',
            templateId: '$2'
        }
    },
    '^NewDeviceRequest for id = (.+?) already exists.$': {
        gettext: gettext('Device registration request with ID {{id}} already exists.'),
        placeholders: {
            id: '$1'
        }
    },
    '^No communication with device since (.+?)$': {
        gettext: gettext('No communication with device since {{timestamp | absoluteDate}}.'),
        placeholders: {
            timestamp: '$1'
        }
    },
    '^No data received from device within required interval.$': {
        gettext: gettext('No data received from device within required interval.')
    },
    '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
        gettext: gettext('No LoRa provider settings are found. Please configure the connectivity settings.')
    },
    '^Not within any context!$': {
        gettext: gettext('A problem occurred with microservice subscription.')
    },
    '^Maximum age cannot be bigger than 10 years.$': {
        gettext: gettext('Maximum age cannot be bigger than 10 years.')
    },
    '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
        gettext: gettext('Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.'),
        placeholders: {
            maxLength: '$1'
        }
    },
    '^Microservice not available.*$': {
        gettext: gettext('Microservice is not available.')
    },
    '^Operation created$': {
        gettext: gettext('Operation created.')
    },
    '^Operation updated$': {
        gettext: gettext('Operation updated.')
    },
    "^Operation created: status='(.+?)'.": {
        gettext: gettext('Operation created: status="{{status | translate}}".'),
        placeholders: {
            status: '$1'
        }
    },
    '^Option created$': {
        gettext: gettext('Option created.')
    },
    '^Option "(.+?)" created$': {
        gettext: gettext('Option "{{option}}" created.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Option deleted$': {
        gettext: gettext('Option deleted.')
    },
    '^Option "(.+?)" deleted$': {
        gettext: gettext('Option "{{option}}" deleted.'),
        placeholders: {
            option: '$1'
        }
    },
    '^Owner field error. : Cannot introduce cyclic dependency.': {
        gettext: gettext('Could not introduce cyclic ownership dependency.')
    },
    '^Password change is temporary blocked.$': {
        gettext: gettext('Password change is temporarily blocked.')
    },
    '^Password cipher does not match': {
        gettext: gettext('Password cipher does not match.')
    },
    '^Platform application cannot be added to, nor removed from any tenant.$': {
        gettext: gettext('Platform application cannot be added to, nor removed from any tenant.')
    },
    '^Private key must be provided in KEY_PAIR credentials$': {
        gettext: gettext('Private key must be provided when "Public/private keys" option is selected.')
    },
    '^Private key cipher does not match': {
        gettext: gettext('Private key cipher does not match')
    },
    '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
        gettext: gettext('Protocol "{{protocol}}" does not support "{{credentialsType}}" credentials type.'),
        placeholders: {
            protocol: '$1',
            credentialsType: '$2'
        }
    },
    '^pulling image "(.+)"$': {
        gettext: gettext('Pulling image: "{{imageName}}".'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
        gettext: gettext('Real-time event processing is currently overloaded and may stop processing your events. Please contact support.')
    },
    '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
        gettext: gettext('Could not find the resource with ID "{{id}}".'),
        placeholders: {
            id: '$1'
        }
    },
    '^Retrieve configuration snapshot from device (.+?)': {
        gettext: gettext('Retrieve configuration snapshot from device {{deviceName}}'),
        placeholders: {
            deviceName: '$1'
        }
    },
    '^Retrieve (.+?) configuration snapshot from device (.+?)': {
        gettext: gettext('Retrieve {{configurationType}} configuration snapshot from device {{deviceName}}'),
        placeholders: {
            configurationType: '$1',
            deviceName: '$2'
        }
    },
    '^Scaled up replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled up to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Send configuration snapshot (.+?) of configuration type (.+?) to device (.+?)': {
        gettext: gettext('Send configuration snapshot {{snapshotName}} of configuration type {{configurationType}} to device {{deviceName}}'),
        placeholders: {
            snapshotName: '$1',
            configurationType: '$2',
            deviceName: '$3'
        }
    },
    '^Send configuration snapshot (.+?) to device (.+?)': {
        gettext: gettext('Send configuration snapshot {{snapshotName}} to device {{deviceName}}'),
        placeholders: {
            snapshotName: '$1',
            deviceName: '$2'
        }
    },
    '^Simulator state is invalid: (.+)$': {
        gettext: gettext('Simulator state is invalid: {{violations}}'),
        placeholders: {
            violations: {
                capture: '$1',
                translate: {
                    '(\\w+?) - may not be null': {
                        gettext: gettext('"{{field}}" should not be null'),
                        placeholders: {
                            field: '$1'
                        }
                    },
                    '(\\w+?) - must be less than or equal to (\\d+)': {
                        gettext: gettext('"{{field}}" must be less than or equal to {{maxValue}}'),
                        placeholders: {
                            field: '$1',
                            maxValue: '$2'
                        }
                    },
                    '(\\w+?) - should not contain null values': {
                        gettext: gettext('"{{field}}" should not contain null values'),
                        placeholders: {
                            field: '$1'
                        }
                    }
                }
            }
        }
    },
    "^Smart rest template (.+?) doesn't exist$": {
        gettext: gettext('SmartREST template with id "{{templateId}}" doesn\'t exist'),
        placeholders: {
            templateId: '$1'
        }
    },
    '^Smart rule created$': {
        gettext: gettext('Smart rule created.')
    },
    '^Smart rule updated$': {
        gettext: gettext('Smart rule updated.')
    },
    '^Smart rule enabled$': {
        gettext: gettext('Smart rule activated.')
    },
    '^Smart rule disabled$': {
        gettext: gettext('Smart rule deactivated.')
    },
    '^Smart rule deleted$': {
        gettext: gettext('Smart rule deleted.')
    },
    '^Smart rule "(.+?)" created$': {
        gettext: gettext('Smart rule "{{name}}" created.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" updated$': {
        gettext: gettext('Smart rule "{{name}}" updated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" enabled$': {
        gettext: gettext('Smart rule "{{name}}" activated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" disabled$': {
        gettext: gettext('Smart rule "{{name}}" deactivated.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Smart rule "(.+?)" deleted$': {
        gettext: gettext('Smart rule "{{name}}" deleted.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Started container$': {
        gettext: gettext('Container started.')
    },
    '^Successfully assigned (.+) to (.+)$': {
        gettext: gettext('"{{imageName}}" assigned to "{{address}}".'),
        placeholders: {
            imageName: '$1',
            address: '$2'
        }
    },
    '^Successfully pulled image "(.+)"$': {
        gettext: gettext('Image "{{imageName}}" pulled.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Tenant creation failed. : Tenant with given id already exists.$': {
        gettext: gettext('Could not create a tenant. Tenant with given domain/URL already exists.')
    },
    '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
        gettext: gettext('Could not use a reserved SQL keyword "{{tenantId}}" as a domain name.'),
        placeholders: {
            tenantId: '$1'
        }
    },
    '^Tenant "(.+?)" activated$': {
        gettext: gettext('Tenant "{{tenant}}" activated.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant (.+?) has sub-tenants, please remove them first!$': {
        gettext: gettext('Could not remove tenant "{{tenant}}". Remove its subtenants first.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant activated$': {
        gettext: gettext('Tenant activated')
    },
    '^Tenant "(.+?)" created$': {
        gettext: gettext('Tenant "{{tenant}}" created.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant created$': {
        gettext: gettext('Tenant created')
    },
    '^Tenant "(.+?)" deleted$': {
        gettext: gettext('Tenant "{{tenant}}" deleted.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant deleted$': {
        gettext: gettext('Tenant deleted')
    },
    '^Tenant "(.+?)" suspended$': {
        gettext: gettext('Tenant "{{tenant}}" suspended.'),
        placeholders: {
            tenant: '$1'
        }
    },
    '^Tenant suspended$': {
        gettext: gettext('Tenant suspended')
    },
    '^Tenant "(.+?)" updated: (.+?)$': {
        gettext: gettext('Tenant "{{tenant}}" updated: {{properties}}.'),
        placeholders: {
            tenant: '$1',
            properties: '$2'
        }
    },
    '^Tenant updated$': {
        gettext: gettext('Tenant updated')
    },
    '^Too Many Requests$': {
        gettext: gettext('Too many requests. Try again later.')
    },
    "^User alias equals username '(.+)'$": {
        gettext: gettext('Username and login alias must be different.')
    },
    '^User created$': {
        gettext: gettext('User created')
    },
    '^User (.+?) created$': {
        gettext: gettext('User "{{name}}" created'),
        placeholders: {
            name: '$1'
        }
    },
    '^User deleted$': {
        gettext: gettext('User deleted')
    },
    '^User (.+?) deleted$': {
        gettext: gettext('User "{{name}}" deleted'),
        placeholders: {
            name: '$1'
        }
    },
    '^User updated$': {
        gettext: gettext('User updated')
    },
    '^User (.+?) updated: (.+)$': {
        gettext: gettext('User "{{name}}" updated: {{updatesList}}'),
        placeholders: {
            name: '$1',
            updatesList: {
                capture: '$2',
                translate: {
                    "delegatedBy='(.+?)'": {
                        gettext: gettext('delegated by: "{{delegate}}"'),
                        placeholders: {
                            delegate: '$1'
                        }
                    },
                    "owner='(.+?)'": {
                        gettext: gettext('owner: "{{owner}}"'),
                        placeholders: {
                            owner: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] added': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] added'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'inventory assignment \\[(.+?)\\] removed': {
                        gettext: gettext('inventory assignment [{{inventoryAssignment}}] removed'),
                        placeholders: {
                            inventoryAssignment: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] added$': {
                        gettext: gettext('applications [{{applicationsList}}] added'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'applications \\[(.+?)\\] removed$': {
                        gettext: gettext('applications [{{applicationsList}}] removed'),
                        placeholders: {
                            applicationsList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] added$': {
                        gettext: gettext('global roles [{{globalRolesList}}] added'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    },
                    'global roles \\[(.+?)\\] removed$': {
                        gettext: gettext('global roles [{{globalRolesList}}] removed'),
                        placeholders: {
                            globalRolesList: '$1'
                        }
                    }
                }
            }
        }
    },
    "^User with username '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: gettext('User "{{username}}" already exists.'),
        placeholders: {
            username: '$1'
        }
    },
    "^User with username or alias '(.+)' already exists! : Duplicated: (.+)$": {
        gettext: gettext('User with username or login alias "{{usernameOrAlias}}" already exists.'),
        placeholders: {
            usernameOrAlias: '$1'
        }
    },
    "^User with email '(.+?)' already exists! : Duplicated: (.+?)$": {
        gettext: gettext('User with email "{{email}}" already exists.'),
        placeholders: {
            email: '$1'
        }
    },
    '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
        gettext: gettext('Unable to get tenant option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
        gettext: gettext('Unable to get system option: "{{option}}".'),
        placeholders: {
            option: '$2'
        }
    },
    '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
        gettext: gettext('The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.')
    },
    '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
        gettext: gettext('The chosen name is too long. Please try a shorter one.')
    },
    '^You have reached devices limit. No more devices can be registered.$': {
        gettext: gettext('You reached devices limit. No more devices can be registered.')
    },
    '^(.+) succeeded for volume "(.+)"': {
        gettext: gettext('Operation "{{operation}}" succeeded for volume "{{volume}}".'),
        placeholders: {
            operation: '$1',
            volume: '$2'
        }
    },
    "^Exception on tenant (.+) in statement '(.+)': Invocation exception when invoking method '(.+)' of class '(.+)' passing parameters \\[(.+)\\] for statement '(.+)': (.+) : (.+)$": {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{moduleName}}": Invocation exception when invoking method "{{methodName}}" of class "{{classPath}}" passing parameters [{{parameters}}] for statement "{{statement}}": {{exceptionType}} : {{exceptionMessage}}.'),
        placeholders: {
            tenantId: '$1',
            moduleName: '$2',
            methodName: '$3',
            classPath: '$4',
            parameters: '$5',
            statement: '$6',
            exceptionType: '$7',
            exceptionMessage: '$8'
        }
    },
    '^No nodes are available that match all of the predicates: (.+).$': {
        gettext: gettext('No nodes are available that match all of the predicates: [{{predicates}}].'),
        placeholders: {
            predicates: '$1'
        }
    },
    '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
        gettext: gettext('Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
        placeholders: {
            requestMethod: '$1',
            uri: '$2',
            protocol: '$3'
        }
    },
    '^Error syncing pod$': {
        gettext: gettext('Pod synchronization error.')
    },
    '^Failed create pod sandbox.$': {
        gettext: gettext('Pod sandbox creation failed.')
    },
    '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
        gettext: gettext('Exception on tenant {{tenantId}} in statement "{{statement}}": HTTP status code: {{httpStatusCode}} : {{message | translate}}'),
        placeholders: {
            tenantId: '$1',
            statement: '$2',
            httpStatusCode: '$3',
            message: '$4'
        }
    },
    "^User '(.+)' is managed by a remote identity management service defined by an administrator, direct update is forbidden$": {
        gettext: gettext('User "{{userName}}" is managed by a remote identity management service defined by an administrator, direct update is forbidden.'),
        placeholders: {
            userName: '$1'
        }
    },
    '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added new child device to "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Updated child device of "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
        placeholders: {
            parentDeviceName: '$1',
            parentDeviceId: '$2'
        }
    },
    '^Added child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Added child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
        gettext: gettext('Removed child device "{{name}}" (ID: {{id}}).'),
        placeholders: {
            name: '$1',
            id: '$2'
        }
    },
    '^Change value of "(.+)" to (.+) (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}{{unit}}.'),
        placeholders: {
            name: '$1',
            value: '$2',
            unit: '$3'
        }
    },
    '^Change value of "(.+)" to (.+).$': {
        gettext: gettext('Change value of "{{name}}" to {{value}}.'),
        placeholders: {
            name: '$1',
            value: '$2'
        }
    },
    '^Change status of "(.+)" to "(.+)".$': {
        gettext: gettext('Change status of "{{name}}" to "{{label}}".'),
        placeholders: {
            name: '$1',
            label: '$2'
        }
    },
    '^Send message "(.+)".$': {
        gettext: gettext('Send message "{{str}}".'),
        placeholders: {
            str: '$1'
        }
    },
    '^Close relay (.+).$': {
        gettext: gettext('Close relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Open relay (.+).$': {
        gettext: gettext('Open relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Change trace status to (.+).$': {
        gettext: gettext('Change trace status to {{state | translate}}.'),
        placeholders: {
            state: '$1'
        }
    },
    '^Change relay status to (.+).$': {
        gettext: gettext('Change relay status to {{status | translate}}.'),
        placeholders: {
            status: '$1'
        }
    },
    '^Closing relay (.+).$': {
        gettext: gettext('Closing relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Opening relay (.+).$': {
        gettext: gettext('Opening relay {{number}}.'),
        placeholders: {
            number: '$1'
        }
    },
    '^Update bulk operation$': {
        gettext: gettext('Update bulk operation')
    },
    '^Update bulk operation: (.+)$': {
        gettext: gettext('Update bulk operation: {{updatesList}}'),
        placeholders: bulkOperationAuditLogTextPlaceholders
    },
    '^Update firmware to: "?(.+?)"? \\(version: (.+)\\)\\.?$': {
        gettext: gettext('Update firmware to: "{{ name }}" (version: {{ version }})'),
        placeholders: {
            name: '$1',
            version: '$2'
        }
    },
    '^Update firmware to: "?(.+?)"?\\.?$': {
        gettext: gettext('Update firmware to: "{{ name }}"'),
        placeholders: {
            name: '$1'
        }
    },
    '^Update configuration to (.+).$': {
        gettext: gettext('Update configuration to: {{ name }}.'),
        placeholders: {
            name: '$1'
        }
    },
    '^Apply device profile: (.+).?$': {
        gettext: gettext('Apply device profile: {{ name }}'),
        placeholders: {
            name: '$1'
        }
    },
    '^Execute generic command: (.+).?$': {
        gettext: gettext('Execute generic command: {{command}}'),
        placeholders: {
            command: '$1'
        }
    },
    '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
        gettext: gettext('Could not reactivate the application as it is not hosted locally.')
    },
    '^Failed to refresh application. : Cannot refresh application without active version id.$': {
        gettext: gettext('Could not reactivate the application as it has no active version.')
    },
    // TODO: remove if we decide not to translate such messages:
    // '^Killing container with id (.+):Need to kill Pod$': {
    //   gettext: gettext('Killing container with ID "{{containerId}}". Need to kill Pod.'),
    //   placeholders: {
    //     containerId: '$1'
    //   }
    // },
    '^Scaled down replica set (.+) to (\\d+)$': {
        gettext: gettext('Replica set "{{replicaSetName}}" scaled down to "{{scaleNumber}}".'),
        placeholders: {
            replicaSetName: '$1',
            scaleNumber: '$2'
        }
    },
    '^Deleted pod: (.+)$': {
        gettext: gettext('Pod "{{imageName}}" deleted.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Container image "(.+)" already present on machine$': {
        gettext: gettext('Container image "{{imageName}}" already exists.'),
        placeholders: {
            imageName: '$1'
        }
    },
    '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
        gettext: gettext('This login mode was already set by another administrator. Refresh the page to update the data.')
    }
};

/**
 * A service to provide unmodified, cached translations for angular.
 */
var CachedLocaleDictionaryService = /** @class */ (function () {
    function CachedLocaleDictionaryService() {
        this.cachedDictionary = {};
    }
    CachedLocaleDictionaryService.ngInjectableDef = ɵɵdefineInjectable({ factory: function CachedLocaleDictionaryService_Factory() { return new CachedLocaleDictionaryService(); }, token: CachedLocaleDictionaryService, providedIn: "root" });
    CachedLocaleDictionaryService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], CachedLocaleDictionaryService);
    return CachedLocaleDictionaryService;
}());

var TranslateCustomLoader = /** @class */ (function () {
    function TranslateCustomLoader(http, optionsService, cachedLocaleDictionaryService, path, languages) {
        if (path === void 0) { path = null; }
        if (languages === void 0) { languages = null; }
        this.http = http;
        this.optionsService = optionsService;
        this.cachedLocaleDictionaryService = cachedLocaleDictionaryService;
        this.path = path;
        this.languages = languages;
    }
    TranslateCustomLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        var path = this.path || '';
        var url = "" + path + lang + ".json";
        if (this.languages && this.languages[lang] && this.languages[lang].url) {
            url = this.languages[lang].url;
        }
        return this.http.get(url).pipe(map(function (d) {
            if (_this.optionsService.langsDetails && _this.optionsService.langsDetails[lang]) {
                return __assign({}, d[lang], _this.optionsService.langsDetails[lang]);
            }
            return d[lang];
        }), tap(function (dictionary) {
            _this.cachedLocaleDictionaryService.cachedDictionary[lang] = dictionary;
        }), map(function (dictionary) { return _this.getDictionaryWithTrimmedKeys(dictionary); }), catchError(function () { return of({}); }));
    };
    /**
     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
     */
    TranslateCustomLoader.prototype.getDictionaryWithTrimmedKeys = function (dictionary) {
        return mapKeys(dictionary, function (value, key) {
            return trimTranslationKey(key);
        });
    };
    TranslateCustomLoader.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OptionsService },
        { type: CachedLocaleDictionaryService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_PATH,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LANGUAGES,] }] }
    ]; };
    TranslateCustomLoader = __decorate([
        Injectable(),
        __param(3, Inject(LOCALE_PATH)),
        __param(4, Inject(LANGUAGES))
    ], TranslateCustomLoader);
    return TranslateCustomLoader;
}());
function trimTranslationKey(key) {
    return key.replace(/(\r\n|\n|\r)/gm, '').replace(/\s{2,}/g, ' ').trim();
}

var TranslateParserCustom = /** @class */ (function (_super) {
    __extends(TranslateParserCustom, _super);
    function TranslateParserCustom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TranslateParserCustom.prototype.getValue = function (target, key) {
        var trimmedKey = trimTranslationKey(key);
        var translated = get(target, [trimmedKey]);
        if (!translated) {
            var keys = key.split('.');
            if (keys.length > 1) {
                translated = get(target, key);
            }
        }
        return translated;
    };
    TranslateParserCustom = __decorate([
        Injectable()
    ], TranslateParserCustom);
    return TranslateParserCustom;
}(TranslateDefaultParser));

/**
 * This is temporary fallback directive that is used to handle HTML blocks translation on maintenance versions
 * in version 10.9.4 and later, this is replaced by default translate directive.
 */
var ForceHtmlTranslateDirective = /** @class */ (function () {
    function ForceHtmlTranslateDirective(translateService, element, _ref) {
        var _this = this;
        this.translateService = translateService;
        this.element = element;
        this._ref = _ref;
        /**
         * Used to trigger events when html is replaced by directive.
         */
        this.htmlUpdateEvent = new EventEmitter();
        // subscribe to onTranslationChange event, in case the translations of the current lang change
        if (!this.onTranslationChangeSub) {
            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(function (event) {
                if (event.lang === _this.translateService.currentLang) {
                    _this.checkNodes();
                }
            });
        }
        // subscribe to onLangChange event, in case the language changes
        if (!this.onLangChangeSub) {
            this.onLangChangeSub = this.translateService.onLangChange.subscribe(function (event) {
                _this.checkNodes();
            });
        }
        // subscribe to onDefaultLangChange event, in case the default language changes
        if (!this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(function (event) {
                _this.checkNodes();
            });
        }
    }
    Object.defineProperty(ForceHtmlTranslateDirective.prototype, "translateParams", {
        set: function (params) {
            if (!isEqual(this.currentParams, params)) {
                this.currentParams = params;
                this.checkNodes();
            }
        },
        enumerable: true,
        configurable: true
    });
    ForceHtmlTranslateDirective.prototype.ngAfterViewChecked = function () {
        this.checkNodes();
    };
    ForceHtmlTranslateDirective.prototype.checkNodes = function () {
        if (this.isLookupKeyMissing()) {
            this.element.nativeElement.lookupKey = this.getLookupKey();
        }
        this.translateAndUpdateHtmlContent();
        this.htmlUpdateEvent.emit();
    };
    ForceHtmlTranslateDirective.prototype.ngOnDestroy = function () {
        if (this.onLangChangeSub) {
            this.onLangChangeSub.unsubscribe();
        }
        if (this.onDefaultLangChangeSub) {
            this.onDefaultLangChangeSub.unsubscribe();
        }
        if (this.onTranslationChangeSub) {
            this.onTranslationChangeSub.unsubscribe();
        }
        this.htmlUpdateEvent.complete();
    };
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    ForceHtmlTranslateDirective.prototype.getLookupKey = function () {
        return this.element.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    };
    ForceHtmlTranslateDirective.prototype.isLookupKeyMissing = function () {
        return !this.element.nativeElement.lookupKey;
    };
    ForceHtmlTranslateDirective.prototype.lookupKeyExist = function () {
        return this.element.nativeElement.lookupKey;
    };
    ForceHtmlTranslateDirective.prototype.translateAndUpdateHtmlContent = function () {
        if (this.lookupKeyExist()) {
            this.element.nativeElement.innerHTML = this.translateService.instant(this.element.nativeElement.lookupKey, this.currentParams || {});
        }
    };
    ForceHtmlTranslateDirective.ctorParameters = function () { return [
        { type: TranslateService$1 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], ForceHtmlTranslateDirective.prototype, "translateParams", null);
    ForceHtmlTranslateDirective = __decorate([
        Directive({
            selector: '[forceHtmlTranslate]'
        })
    ], ForceHtmlTranslateDirective);
    return ForceHtmlTranslateDirective;
}());

// Load these as a side effect
try {
    // tslint:disable:no-var-requires
    require('@c8y/ngx-components/locales/de.po');
    require('@c8y/ngx-components/locales/en.po');
    require('@c8y/ngx-components/locales/es.po');
    require('@c8y/ngx-components/locales/fr.po');
    require('@c8y/ngx-components/locales/ja_JP.po');
    // tslint:enable:no-var-requires
}
catch (e) {
    // empty block
}
var angularLocalesLanguageMap = { en: 'en-GB', 'en-EN': 'en-GB' };
// AoT requires an exported function for factories
function translateLoaderFactory(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages) {
    return new TranslateCustomLoader(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages);
}
function localePathFactory(options) {
    return options.localePath;
}
function languagesFactory(options) {
    return options.languages;
}
function localeId(appStateService) {
    return {
        get lang() {
            return getAngularLocalesLanguageString(appStateService.state.lang || 'en');
        },
        toLowerCase: function () {
            return this.lang.toLowerCase();
        },
        toString: function () {
            return this.lang;
        }
    };
}
function getAngularLocalesLanguageString(language) {
    return angularLocalesLanguageMap[language] || language;
}
/**
 * The angular module definition for i18n (translation).
 * @exports I18nModule
 */
var I18nModule = /** @class */ (function () {
    function I18nModule() {
    }
    I18nModule_1 = I18nModule;
    I18nModule.providers = function () {
        return [
            { provide: LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
            { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true },
            { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
            { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
            // Extracted from projects/ngx-translate/core/src/public_api.ts
            {
                provide: TranslateLoader,
                useFactory: translateLoaderFactory,
                deps: [HttpClient, OptionsService, CachedLocaleDictionaryService, LOCALE_PATH, LANGUAGES]
            },
            { provide: TranslateCompiler, useClass: TranslateFakeCompiler },
            { provide: TranslateParser, useClass: TranslateParserCustom },
            { provide: MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
            TranslateStore,
            TranslateService$1,
            { provide: USE_STORE, useValue: undefined },
            { provide: USE_DEFAULT_LANG, useValue: undefined },
            { provide: USE_EXTEND, useValue: false },
            { provide: DEFAULT_LANGUAGE, useValue: undefined }
        ];
    };
    I18nModule.forRoot = function () {
        return {
            ngModule: I18nModule_1,
            providers: I18nModule_1.providers()
        };
    };
    var I18nModule_1;
    I18nModule = I18nModule_1 = __decorate([
        NgModule({
            exports: [TranslateModule, ForceHtmlTranslateDirective],
            imports: [HttpClientModule],
            declarations: [ForceHtmlTranslateDirective]
        })
    ], I18nModule);
    return I18nModule;
}());

/* tslint:disable */














































































































































































































































































































































































































































































































































var importLocales = {

};

function parse(moduleSrc) {
    var src = moduleSrc.split(/\n/)
        .map(function (l) { return l.trim(); })
        .filter(Boolean)
        .filter(function (l) { return !l.match(/^\/?\*/) && !l.match(/^\/\//); })
        .join('\n');
    var fn = new Function("var exports = {};\nvar module = { exports: exports };\n" + src + "\nreturn exports;");
    return fn();
}

var cache = new Map();
/**
 * @ignore
 */
function loadLocale(moduleLang) {
    return new Promise(function (resolve, reject) {
        if (cache.has(moduleLang)) {
            resolve(cache.get(moduleLang));
        }
        else {
            fetch("assets/locales/angular/" + moduleLang + ".js")
                .then(function (res) { return res.text(); })
                .then(function (src) {
                var module = parse(src);
                cache.set(moduleLang, module);
                resolve(module);
            })
                .catch(reject);
        }
    });
}

/**
 * A service to manage the language of the application.
 */
var TranslateService = /** @class */ (function () {
    function TranslateService(ngxTranslate, ui, options) {
        var _this = this;
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(function (k) { return _this.langsDetail[k]; });
        this.DEFAULT_SEPARATOR = '_';
        var queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    TranslateService_1 = TranslateService;
    TranslateService.defaultLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Switches to given language.
     * @param lang The language as two-letter code.
     */
    TranslateService.prototype.switchToLanguage = function (lang) {
        return __awaiter(this, void 0, void 0, function () {
            var moduleLang, e_1, lessSpecificModuleLang;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        moduleLang = lang.replace('_', '-');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, this.loadLocales(moduleLang)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 3:
                        e_1 = _a.sent();
                        lessSpecificModuleLang = moduleLang.split('-').shift();
                        if (!(lessSpecificModuleLang !== moduleLang)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.loadLocales(lessSpecificModuleLang)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5: throw e_1;
                    case 6: return [3 /*break*/, 7];
                    case 7:
                        this.setLanguage(lang);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.loadLocales = function (moduleLang) {
        return __awaiter(this, void 0, void 0, function () {
            var module;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadLocale(getAngularLocalesLanguageString(moduleLang))];
                    case 1:
                        module = _a.sent();
                        registerLocaleData(module.default);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.setLanguage = function (lang) {
        var _this = this;
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(function () {
            _this.ui.state$.next(__assign({}, _this.ui.state, { lang: lang }));
        });
    };
    /**
     * Finds the first supported language
     */
    TranslateService.prototype.firstSupportedLanguage = function () {
        var _this = this;
        var languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean);
        var preferredLanguage = languages.find(function (lang) { return _this.getSupported(lang); });
        return this.getSupported(preferredLanguage);
    };
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    TranslateService.prototype.convertToLanguageCodePO = function (lang) {
        var sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        var _a = __read(lang.split(sep), 2), langMain = _a[0], langSpecific = _a[1];
        var langLast = langSpecific ? "" + this.DEFAULT_SEPARATOR + langSpecific : '';
        return "" + langMain + langLast;
    };
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    TranslateService.prototype.getNativeLanguage = function (lang) {
        var langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    };
    TranslateService.prototype.saveInLocalStorage = function (lang) {
        window.localStorage.setItem(TranslateService_1.SAVE_LANGUAGE_KEY, lang);
    };
    TranslateService.prototype.getSupported = function (lang) {
        return this.langs.find(function (l) { return l === lang; }) || this.langs.find(function (l) { return l.startsWith(lang); });
    };
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    TranslateService.prototype.queryStringLang = function () {
        return this.getQueryParameter('lang');
    };
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    TranslateService.prototype.localStorageLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    TranslateService.prototype.browserLangs = function () {
        var navigator = window.navigator;
        var browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce(function (languages, property) {
            var propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    };
    TranslateService.prototype.getQueryParameter = function (queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        var query = window.location.search.substring(1);
        var result;
        query.split('&').find(function (pair) {
            var _a = __read(pair.split('='), 2), key = _a[0], value = _a[1];
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    };
    var TranslateService_1;
    TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
    TranslateService.ctorParameters = function () { return [
        { type: TranslateService$1 },
        { type: AppStateService },
        { type: OptionsService }
    ]; };
    TranslateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(ɵɵinject(TranslateService$1), ɵɵinject(AppStateService), ɵɵinject(OptionsService)); }, token: TranslateService, providedIn: "root" });
    TranslateService = TranslateService_1 = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TranslateService);
    return TranslateService;
}());

/**
 * The range of times supported by ECMAScript Date objects in milliseconds.
 * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1
 */
var ES_MAX_TIME_MILLISECONDS = 8640000000000000;
/**
 * Formats a date value according to locale rules. If no other format specified it defaults to `medium`
 * used as standard date/time format.
 *
 * Extends Angular's DatePipe in a way so that date values exceeding the range supported by ECMAScript
 * are displayed as earliest/latest supported point in time printed in the desired format pre- or postfixed
 * by the word `before` or `after`, respectively.
 * In all other cases the pipe behaves as the standard [DatePipe]{@link https://angular.io/api/common/DatePipe}.
 *
 * ```html
 * <span class="highlight">{{ deadline | c8yDate }}</span> <!-- e.g. 7 May 2020, 17:45:19 (en-GB) or 07.05.2020, 17:45:19 (de) -->
 * <span>{{ lastUpdated | c8yDate: 'a h:MM:ss' }}</span> <!-- e.g. pm 5:45:19 -->
 * <span>{{ 8640000000000000 + 1 | c8yDate }}</span> <!-- e.g. after 13 Sep 275760, 03:00:00 --> ```
 */
var DatePipe = /** @class */ (function (_super) {
    __extends(DatePipe, _super);
    function DatePipe(locale, translateService) {
        var _this = _super.call(this, locale) || this;
        _this.translateService = translateService;
        return _this;
    }
    DatePipe.prototype.transform = function (value, format, timezone, locale) {
        if (format === void 0) { format = 'medium'; }
        var valueInBounds = value;
        var valueBefore = false;
        var valueBeyond = false;
        if (typeof value === 'number' && !isNaN(value)) {
            valueInBounds = Math.min(value, ES_MAX_TIME_MILLISECONDS);
            valueInBounds = Math.max(valueInBounds, -ES_MAX_TIME_MILLISECONDS);
            valueBefore = value < -ES_MAX_TIME_MILLISECONDS;
            valueBeyond = value > ES_MAX_TIME_MILLISECONDS;
        }
        var result = _super.prototype.transform.call(this, valueInBounds, format, timezone, locale);
        if (valueBefore) {
            result = this.translateService.instant(gettext("before {{date}}"), { date: result });
        }
        else if (valueBeyond) {
            result = this.translateService.instant(gettext("after {{date}}"), { date: result });
        }
        return result;
    };
    DatePipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: TranslateService$1 }
    ]; };
    DatePipe = __decorate([
        Pipe({ name: 'c8yDate' }),
        __param(0, Inject(LOCALE_ID))
    ], DatePipe);
    return DatePipe;
}(DatePipe$1));

var LoadMoreComponent = /** @class */ (function () {
    function LoadMoreComponent(element) {
        this.element = element;
        this.useIntersection = true;
        this.hidden = false;
        this.class = 'c8y-list__item p-0';
        this.maxIterations = 10;
        this.onLoad = new EventEmitter();
        this.isLoading = false;
        this.counter = 0;
        this.showNoMoreDataHint = false;
        this.LOAD_SAME_PAGE_THRESHOLD = 50;
    }
    Object.defineProperty(LoadMoreComponent.prototype, "hostClass", {
        get: function () {
            return this.hidden || (!this.hasMore && !this.showNoMoreDataHint) ? '' : this.class;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadMoreComponent.prototype, "hasMore", {
        get: function () {
            return (this.paging && (this.paging.totalPages > this.paging.currentPage || !!this.paging.nextPage));
        },
        enumerable: true,
        configurable: true
    });
    LoadMoreComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.useIntersection && 'IntersectionObserver' in window) {
            this.intersectionObserver = new IntersectionObserver(function (event) { return _this.buttonInView(event[0]); }, {
                root: this.container ? this.container.nativeElement : null
            });
            this.intersectionObserver.observe(this.element.nativeElement);
        }
        this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
    };
    LoadMoreComponent.prototype.ngOnDestroy = function () {
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
    };
    LoadMoreComponent.prototype.loadMore = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isLoading = true;
                        if (event) {
                            event.stopPropagation();
                        }
                        if (!this.hasMore) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.paging.next()];
                    case 1:
                        result = _a.sent();
                        this.counter++;
                        this.paging = result.paging;
                        this.onLoad.emit(result.data);
                        this.intersectionLoading();
                        this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
                        return [3 /*break*/, 3];
                    case 2:
                        this.counter = 0;
                        this.isLoading = false;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LoadMoreComponent.prototype.intersectionLoading = function () {
        var _this = this;
        if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
            this.loadUntilIntersected = setTimeout(function () { return _this.loadMore(); }, this.getLoadingThreshold());
            this.useIntersection = this.shouldSwitchMode();
        }
        else {
            this.isLoading = false;
            this.loadUntilIntersected = undefined;
        }
    };
    LoadMoreComponent.prototype.getLoadingThreshold = function () {
        return this.LOAD_SAME_PAGE_THRESHOLD * this.counter;
    };
    LoadMoreComponent.prototype.shouldShowNoMoreDataHint = function () {
        return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
    };
    LoadMoreComponent.prototype.shouldSwitchMode = function () {
        return this.counter < this.maxIterations || this.hidden;
    };
    LoadMoreComponent.prototype.buttonInView = function (event) {
        if (event.isIntersecting) {
            this.loadMore();
        }
        else if (this.loadUntilIntersected) {
            clearTimeout(this.loadUntilIntersected);
            this.loadUntilIntersected = null;
            this.isLoading = false;
        }
        else {
            // avoiding a race condition when timeout is faster
            // cleared then set
            this.loadUntilIntersected = null;
        }
    };
    LoadMoreComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "paging", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "useIntersection", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "hidden", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "container", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "class", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "maxIterations", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "noMoreDataHint", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "loadNextLabel", void 0);
    __decorate([
        Input()
    ], LoadMoreComponent.prototype, "loadingLabel", void 0);
    __decorate([
        Output()
    ], LoadMoreComponent.prototype, "onLoad", void 0);
    __decorate([
        HostBinding('class')
    ], LoadMoreComponent.prototype, "hostClass", null);
    LoadMoreComponent = __decorate([
        Component({
            selector: 'c8y-load-more',
            template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <ng-container *ngIf=\"!isLoading\">\n    <span *ngIf=\"loadNextLabel; else loadPage\" [innerHTML]=\"loadNextLabel | translate\"></span>\n    <ng-template #loadPage>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Load page {{ pageNo }}</span\n      >\n    </ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"isLoading\">\n    <span *ngIf=\"loadingLabel; else loading\" [innerHTML]=\"loadingLabel | translate\"></span>\n    <ng-template #loading>\n      <span translate ngNonBindable [translateParams]=\"{ pageNo: paging.currentPage + 1 }\">\n        Page {{ pageNo }} is loading\u2026\n      </span>\n    </ng-template>\n  </ng-container>\n</button>\n\n<ng-container *ngIf=\"showNoMoreDataHint\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center last-record\" title=\"{{ 'Last record' | translate }}\">\n    <i [c8yIcon]=\"'circle'\"></i>\n  </div>\n</ng-template>\n"
        })
    ], LoadMoreComponent);
    return LoadMoreComponent;
}());

/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 */
var ForOfDirective = /** @class */ (function () {
    function ForOfDirective(tpl, vcr, componentFactoryResolver) {
        this.tpl = tpl;
        this.vcr = vcr;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cachedData = [];
        this.loadMoreMode = 'auto';
        this.dataPipe = pipe(tap());
        this.maxIterations = 10;
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(ForOfDirective.prototype, "shouldUseLoadMoreButton", {
        get: function () {
            return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "hasMoreData", {
        get: function () {
            return this.loadMore && this.loadMore.hasMore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "length", {
        get: function () {
            return this.cachedData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForOf", {
        /**
         * The data setter. Must be a response from @c8y/data or an observable.
         * You can pass an observable with null to explicitly clear the list.
         */
        set: function (fetchData) {
            var _this = this;
            if (fetchData) {
                this.obs$ = (isObservable(fetchData) ? fetchData : of(fetchData)).pipe(map(function (result) {
                    if (result === null) {
                        _this.paging = null;
                        return [];
                    }
                    var paging = result.paging, data = result.data;
                    _this.paging = paging;
                    return data;
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForLoadMore", {
        /**
         * The mode setter:
         *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
         *          change with maxIterations settings).
         *  - show: Shows a load more button for the user to decide
         *  - none: Doesn't perform any load more action.
         *  - hidden: Loads more data automatically but with no visible button for the user.
         */
        set: function (type) {
            this.loadMoreMode = type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForPipe", {
        /**
         * The pipe setter to attach any rxjs pipe to the current and more loaded data.
         */
        set: function (dataPipe) {
            if (dataPipe) {
                this.dataPipe = dataPipe;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForNotFound", {
        /**
         * A template to use if no data is found at all (e.g. if you apply a filter pipe).
         */
        set: function (notFoundTemplate) {
            this.notFoundTemplate = notFoundTemplate;
            if (this.loadMore) {
                this.loadMore.noMoreDataHint = notFoundTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForMaxIterations", {
        /**
         * The maximum numbers of iterations to call data from the api.
         */
        set: function (maxIterations) {
            this.maxIterations = maxIterations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForRealtime", {
        /**
         * A RealtimeService instance.
         */
        set: function (source) {
            this.realtime = source;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForComparator", {
        /**
         * A comparator function for comparing list items. Used to determine
         * the position at which a new element should be added to the list.
         */
        set: function (comparator) {
            this.comparator = comparator;
        },
        enumerable: true,
        configurable: true
    });
    ForOfDirective.prototype.ngOnInit = function () {
        this.handleRealtime();
    };
    ForOfDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
            this.unsubscribePaging();
            // only re-rendering  on filtering if all data is already loaded
            // from the backend
            var reRender_1 = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
            if (reRender_1) {
                this.obs$ = of(this.cachedData);
            }
            this.pagingSub = this.obs$
                .pipe(tap(function (data) {
                if (!reRender_1) {
                    _this.cachedData = data;
                }
            }))
                .pipe(function (src) { return _this.dataPipe(src); })
                .subscribe(function (data) {
                _this.render(data, reRender_1);
            });
        }
    };
    ForOfDirective.prototype.ngOnDestroy = function () {
        this.unsubscribePaging();
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    ForOfDirective.prototype.handleRealtime = function () {
        var _this = this;
        if (this.realtime) {
            this.realtime
                .onCreate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (item) { return _this.insert(item); });
            this.realtime
                .onUpdate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (item) { return _this.update(item); });
            this.realtime
                .onDelete$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (id) { return _this.remove(coerceNumberProperty(id)); });
        }
    };
    ForOfDirective.prototype.render = function (data, reRender) {
        var _this = this;
        if (reRender === void 0) { reRender = false; }
        this.vcr.clear();
        data.forEach(function (item, index) {
            var context = {
                $implicit: item,
                index: index,
                length: _this.length,
                hasMore: _this.hasMoreData
            };
            _this.vcr.createEmbeddedView(_this.tpl, context);
        });
        if (this.shouldUseLoadMoreButton) {
            this.loadMore = this.createLoadMoreButtonComponent(reRender);
        }
    };
    ForOfDirective.prototype.append = function (data) {
        var _this = this;
        data.forEach(function (item) {
            var index = _this.shouldUseLoadMoreButton ? _this.vcr.length - 1 : _this.vcr.length;
            var context = {
                $implicit: item,
                index: index,
                length: _this.length,
                hasMore: _this.hasMoreData
            };
            _this.vcr.createEmbeddedView(_this.tpl, context, index);
        });
    };
    ForOfDirective.prototype.loadMoreData = function (data) {
        if (data.length > 0) {
            this.append(data);
        }
    };
    ForOfDirective.prototype.createLoadMoreButtonComponent = function (reRender) {
        var _this = this;
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
        var componentRef = this.vcr.createComponent(componentFactory);
        var instance = componentRef.instance;
        instance.paging = this.paging;
        instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
        instance.hidden = this.loadMoreMode === 'hidden';
        instance.maxIterations = this.maxIterations;
        instance.noMoreDataHint = this.notFoundTemplate;
        this.pagingSub = instance.onLoad
            .pipe(map(function (data) { return _this.checkForDuplicates(data); }), tap(function (data) {
            _this.cachedData = _this.cachedData.concat(data);
        }))
            .pipe(function (src) { return _this.dataPipe(src); })
            .subscribe(function (data) { return _this.loadMoreData(data); });
        if (reRender) {
            assign(instance, this.loadMore);
        }
        return instance;
    };
    ForOfDirective.prototype.insert = function (item) {
        var index = 0;
        if (this.comparator && this.cachedData.length) {
            var comparisionResult = void 0;
            do {
                var view = this.vcr.get(index);
                var itemB = get(view, 'context.$implicit');
                comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                if (comparisionResult <= 0) {
                    index++;
                }
            } while (comparisionResult <= 0 && index < this.cachedData.length);
        }
        // Do not append elements after the last one currently loaded,
        // as it may belong further down there on the list and will
        // be eventually loaded with one of the next pages.
        if (index < this.cachedData.length || this.cachedData.length === 0) {
            var context = {
                $implicit: item,
                index: index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.cachedData.splice(index, 0, item);
            var viewRef = this.tpl.createEmbeddedView(context);
            this.vcr.insert(viewRef, index);
        }
    };
    ForOfDirective.prototype.update = function (updatedItem) {
        this.forMatchingEmbeddedViewRef(function (item) { return item && updatedItem && item.id === updatedItem.id; }, function (view) {
            view.context.$implicit = updatedItem;
            view.markForCheck();
        });
    };
    ForOfDirective.prototype.remove = function (idToRemove) {
        this.forMatchingEmbeddedViewRef(function (item) { return item && coerceNumberProperty(item.id, NaN) === idToRemove; }, function (view) { return view.destroy(); });
    };
    ForOfDirective.prototype.forMatchingEmbeddedViewRef = function (filter, callback) {
        for (var i = 0; i < this.vcr.length; i++) {
            var view = this.vcr.get(i);
            var item = get(view, 'context.$implicit');
            if (filter(item)) {
                callback(view);
            }
        }
    };
    ForOfDirective.prototype.checkForDuplicates = function (data) {
        var _this = this;
        return this.realtime
            ? data.filter(function (item) { return !_this.cachedData.some(function (cached) { return cached.id === item.id; }); })
            : data;
    };
    ForOfDirective.prototype.unsubscribePaging = function () {
        if (this.pagingSub) {
            this.pagingSub.unsubscribe();
        }
    };
    ForOfDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForOf", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForLoadMore", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForPipe", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForNotFound", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForMaxIterations", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForRealtime", null);
    __decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForComparator", null);
    ForOfDirective = __decorate([
        Directive({
            selector: '[c8yFor]'
        })
    ], ForOfDirective);
    return ForOfDirective;
}());

/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
*/
var HumanizeAppNamePipe = /** @class */ (function () {
    function HumanizeAppNamePipe(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: 'Administration',
            cockpit: 'Cockpit',
            devicemanagement: 'Device management'
        };
    }
    HumanizeAppNamePipe.prototype.transform = function (appNameOrApp) {
        if (appNameOrApp === void 0) { appNameOrApp = 'Cumulocity'; }
        var appName = this.getAppName(appNameOrApp);
        var text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName: appName });
    };
    HumanizeAppNamePipe.prototype.getAppName = function (appNameOrApp) {
        var appName = this.getFirstDefined([
            get$1(appNameOrApp, 'name'),
            get$1(appNameOrApp, 'contextPath'),
            appNameOrApp
        ]) || '';
        return this.internalApps[appName] || appName;
    };
    HumanizeAppNamePipe.prototype.getFirstDefined = function (values) {
        return find(values, negate(isUndefined$1));
    };
    HumanizeAppNamePipe.prototype.isPublicApp = function (appNameOrApp) {
        return Boolean(get$1(appNameOrApp, 'public'));
    };
    HumanizeAppNamePipe.ctorParameters = function () { return [
        { type: TranslateService$1 }
    ]; };
    HumanizeAppNamePipe = __decorate([
        Pipe({ name: 'humanizeAppName' })
    ], HumanizeAppNamePipe);
    return HumanizeAppNamePipe;
}());

/*
 * Humanize any string
 * Usage:
 *   'something' | humanize
*/
var HumanizePipe = /** @class */ (function () {
    function HumanizePipe() {
    }
    HumanizePipe_1 = HumanizePipe;
    HumanizePipe.humanize = function (str) {
        if (str === void 0) { str = ''; }
        str = str
            .replace(/\./g, ' ')
            .replace(/c8y[\s,_]*/gi, '')
            .replace(/_/g, ' ')
            .replace(/([A-Z][a-z])/g, ' $1')
            .replace(/^\$\.?/, '')
            .replace(/^\s*/, '')
            .replace(/\s*$/, '')
            .replace(/\s+/g, ' ');
        return upperFirst(str);
    };
    HumanizePipe.prototype.transform = function (str) {
        return HumanizePipe_1.humanize(str);
    };
    var HumanizePipe_1;
    HumanizePipe = HumanizePipe_1 = __decorate([
        Pipe({ name: 'humanize' })
    ], HumanizePipe);
    return HumanizePipe;
}());

/**
 * Allows to set a icon. Switches between c8y default icons
 * and font awesome icons
 * @example <i [c8yIcon]="'rocket'">
 */
var IconDirective = /** @class */ (function () {
    function IconDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.c8yMatch = /^c8y-/;
        this.klasses = [];
        this.currentClasses = '';
    }
    Object.defineProperty(IconDirective.prototype, "c8yIcon", {
        set: function (icon) {
            this.updateIcon(icon);
        },
        enumerable: true,
        configurable: true
    });
    IconDirective.prototype.isC8y = function (icon) {
        return this.c8yMatch.test(icon);
    };
    IconDirective.prototype.getClasses = function (icon) {
        if (icon === void 0) { icon = ''; }
        var classes = '';
        if (icon) {
            var _icon = icon.trim();
            var isC8y = this.isC8y(_icon);
            var iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : "fa-" + _icon;
            classes = (isC8y ? 'c8y-icon' : 'fa fw') + " " + iconClass;
        }
        return classes;
    };
    IconDirective.prototype.updateIcon = function (icon) {
        var _this = this;
        var newClasses = this.getClasses(icon);
        if (newClasses !== this.currentClasses) {
            this.currentClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                _this.renderer.removeClass(_this.el.nativeElement, klass);
            });
            newClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                _this.renderer.addClass(_this.el.nativeElement, klass);
            });
            this.currentClasses = newClasses;
        }
    };
    IconDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input()
    ], IconDirective.prototype, "c8yIcon", null);
    IconDirective = __decorate([
        Directive({
            selector: '[c8yIcon]',
        })
    ], IconDirective);
    return IconDirective;
}());
var ICONS = [
    'home',
    'th',
    'bar-chart-o',
    'tasks',
    'tachometer',
    'bell',
    'puzzle-piece',
    'map-marker',
    'location-arrow',
    'globe',
    'power-off',
    'desktop',
    'laptop',
    'mobile',
    'signal',
    'qrcode',
    'file',
    'file-text',
    'folder',
    'folder-open',
    'archive',
    'hdd-o',
    'book',
    'bookmark',
    'tag',
    'flag',
    'search',
    'heart',
    'star',
    'bolt',
    'rocket',
    'cog',
    'cogs',
    'wrench',
    'ban',
    'user',
    'users',
    'sign-in',
    'sign-out',
    'upload',
    'download',
    'cloud-upload',
    'cloud-download',
    'cloud',
    'spinner',
    'refresh',
    'repeat',
    'undo',
    'lock',
    'unlock',
    'info',
    'question',
    'exclamation',
    'bug',
    'calendar',
    'random',
    'asterisk',
    'key',
    'link',
    'chain-broken',
    'external-link',
    'picture-o',
    'comment',
    'bullhorn',
    'phone',
    'lightbulb-o',
    'flask',
    'sitemap',
    'exchange',
    'code-fork',
    'keyboard-o',
    'terminal',
    'code',
    'clipboard',
    'pencil',
    'envelope',
    'inbox',
    'reply',
    'share',
    'thumbs-up',
    'thumbs-down',
    'check',
    'plus',
    'expand',
    'compress',
    'arrows',
    'arrow-up',
    'arrow-down',
    'arrow-left',
    'arrow-right',
    'th-list',
    'bars',
    'table',
    'columns',
    'filter',
    'sort',
    'sort-up',
    'sort-down',
    'ellipsis-h',
    'ellipsis-v',
    'rss',
    'apple',
    'windows',
    'android',
    'linux'
];

/**
 * Decorator to memoize function results.
 * @param resolver Cache key resolver function, used by memoize from lodash.
 */
function memoize(resolver) {
    return function (target, fnName, descriptor) {
        var fn = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var memoizedFnName = "_" + fnName + "Memoized";
            if (!this[memoizedFnName]) {
                this[memoizedFnName] = memoize$1(fn, resolver);
            }
            return this[memoizedFnName].apply(this, args);
        };
    };
}

var Permissions = /** @class */ (function () {
    function Permissions(appState, inventory, user) {
        this.appState = appState;
        this.inventory = inventory;
        this.user = user;
    }
    /**
     * Checks if the current user has write permissions for the given mo.
     * (either through global role, individual device permissions or via inventory roles).
     *
     * @param {array} roleIds Array of roles which the current user should have.
     * @param {object} mo The managed object for which we are checking whether the user has access.
     */
    Permissions.prototype.canEdit = function (roleIds, mo) {
        return this.checkIfCanEdit(roleIds, mo);
    };
    Permissions.prototype.hasRole = function (roleId) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasRole(currentUser, roleId);
    };
    Permissions.prototype.hasAllRoles = function (roleIds) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAllRoles(currentUser, roleIds);
    };
    Permissions.prototype.hasAnyRole = function (roleIds) {
        var currentUser = this.appState.currentUser.value;
        if (!currentUser) {
            throw new Error('Roles can only be requested if the user is logged in.');
        }
        return this.user.hasAnyRole(currentUser, roleIds);
    };
    Permissions.prototype.checkIfOwner = function (mo) {
        return __awaiter(this, void 0, void 0, function () {
            var currentUserName, _a, data, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.appState.currentUser.value.userName];
                    case 1:
                        currentUserName = _b.sent();
                        return [4 /*yield*/, this.inventory.detail(mo.id)];
                    case 2:
                        _a = _b.sent(), data = _a.data, res = _a.res;
                        return [2 /*return*/, currentUserName === data.owner];
                }
            });
        });
    };
    Permissions.prototype.checkWithRequest = function (mo) {
        var moName = mo.name;
        var moId = mo.id;
        var partialUpdateObject = {
            id: moId,
            name: moName
        };
        return this.inventory
            .update(partialUpdateObject)
            .then(function (success) {
            return true;
        })
            .catch(function (err) {
            return false;
        });
    };
    Permissions.prototype.checkIfCanEdit = function (roleIds, mo) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.hasAnyRole(roleIds)];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 2];
                        return [2 /*return*/, true];
                    case 2: return [4 /*yield*/, this.checkIfOwner(mo)];
                    case 3:
                        if (!_a.sent()) return [3 /*break*/, 4];
                        return [2 /*return*/, true];
                    case 4: return [4 /*yield*/, this.checkWithRequest(mo)];
                    case 5:
                        if (_a.sent()) {
                            return [2 /*return*/, true];
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/, false];
                }
            });
        });
    };
    Permissions.ctorParameters = function () { return [
        { type: AppStateService },
        { type: InventoryService },
        { type: UserService }
    ]; };
    __decorate([
        memoize(property('id'))
    ], Permissions.prototype, "checkIfOwner", null);
    __decorate([
        memoize(property('id'))
    ], Permissions.prototype, "checkWithRequest", null);
    Permissions = __decorate([
        Injectable()
    ], Permissions);
    return Permissions;
}());

/**
 * A structural directive that conditionally includes a template only if the user has
 * all or any of the roles passed as an input. By default the directive checks all roles:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * or use the shorter version
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 */
var IfAllowedDirective = /** @class */ (function () {
    function IfAllowedDirective(template, container, permissions) {
        this.template = template;
        this.container = container;
        this.permissions = permissions;
        this.allowAny = false;
    }
    Object.defineProperty(IfAllowedDirective.prototype, "c8yIfAllowed", {
        /**
         * One or many roles required for the element to be rendered
         */
        set: function (roleIds) {
            this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IfAllowedDirective.prototype, "c8yIfAllowedAllowAny", {
        /**
         * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
         */
        set: function (allowAny) {
            this.allowAny = allowAny === null || allowAny;
        },
        enumerable: true,
        configurable: true
    });
    IfAllowedDirective.prototype.ngOnInit = function () {
        if (!this.rolesIds ||
            !this.rolesIds.length ||
            (this.allowAny
                ? this.permissions.hasAnyRole(this.rolesIds)
                : this.permissions.hasAllRoles(this.rolesIds))) {
            this.container.createEmbeddedView(this.template);
        }
    };
    IfAllowedDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: Permissions }
    ]; };
    __decorate([
        Input()
    ], IfAllowedDirective.prototype, "c8yIfAllowed", null);
    __decorate([
        Input()
    ], IfAllowedDirective.prototype, "c8yIfAllowedAllowAny", null);
    IfAllowedDirective = __decorate([
        Directive({
            selector: '[c8yIfAllowed]'
        })
    ], IfAllowedDirective);
    return IfAllowedDirective;
}());

var LoadingComponent = /** @class */ (function () {
    function LoadingComponent() {
    }
    LoadingComponent = __decorate([
        Component({
            selector: 'c8y-loading',
            template: "\n    <div class=\"p-24 p-relative d-inline-block\" >\n      <div class=\"spinner\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n  "
        })
    ], LoadingComponent);
    return LoadingComponent;
}());

/*
 * Implementation of pure "Mapping" pipe based on
 * https://codeburst.io/angular-bad-practices-eab0e594ce92#389b
 */
var MapFunctionPipe = /** @class */ (function () {
    function MapFunctionPipe() {
    }
    /*
     * This will be a universal pipe for array mappings. You may add more
     * type checkings and runtime checkings to make sure it works correctly everywhere.
     */
    MapFunctionPipe.prototype.transform = function (value, mappingFunction, thisArg) {
        return mappingFunction.apply(thisArg || this, Array.isArray(value) ? value : [value]);
    };
    MapFunctionPipe = __decorate([
        Pipe({
            name: 'map'
        })
    ], MapFunctionPipe);
    return MapFunctionPipe;
}());

/**
 * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
 * @example
 * <div *c8yOutlet="template"></div>
 * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
 * <div *c8yOutlet="nodes"></div>
 */
var OutletDirective = /** @class */ (function () {
    function OutletDirective(viewContainer, resolver, renderer, el) {
        this.viewContainer = viewContainer;
        this.resolver = resolver;
        this.renderer = renderer;
        this.el = el;
        this.properties = {};
    }
    Object.defineProperty(OutletDirective.prototype, "c8yOutlet", {
        /**
         * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
         * @example
         * <div *c8yOutlet="template"></div>
         * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
         * <div *c8yOutlet="nodes"></div>
         */
        set: function (template) {
            if (!template) {
                return;
            }
            if (this._element instanceof Element) {
                this.renderer.removeChild(this._element.parentElement, this._element);
            }
            this.viewContainer.clear();
            // case TemplateRef -> <div *c8yOutlet="template"></div>
            if (template instanceof TemplateRef) {
                this.viewContainer.createEmbeddedView(template);
                // case DOM Element -> <div *c8yOutlet="nodes"></div>
            }
            else if (template instanceof Element) {
                var parent_1 = this.renderer.parentNode(this.el.nativeElement);
                this.destroy();
                this._element = template;
                this.renderer.insertBefore(parent_1, this._element, this.el.nativeElement);
                // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
            }
            else {
                var factory = this.resolver.resolveComponentFactory(template);
                var component = this.viewContainer.createComponent(factory);
                assign(component.instance, this.properties);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OutletDirective.prototype, "c8yOutletProperties", {
        set: function (value) {
            this.properties = value;
        },
        enumerable: true,
        configurable: true
    });
    OutletDirective.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OutletDirective.prototype.destroy = function () {
        if (this._element) {
            var _parent = this.renderer.parentNode(this._element);
            this.renderer.removeChild(_parent, this._element);
        }
    };
    OutletDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], OutletDirective.prototype, "c8yOutlet", null);
    __decorate([
        Input()
    ], OutletDirective.prototype, "c8yOutletProperties", null);
    OutletDirective = __decorate([
        Directive({
            selector: '[c8yOutlet]',
        })
    ], OutletDirective);
    return OutletDirective;
}());

var ProgressBarComponent = /** @class */ (function () {
    function ProgressBarComponent() {
        this.message = gettext('Loading…');
        this.progress = null;
    }
    __decorate([
        Input()
    ], ProgressBarComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], ProgressBarComponent.prototype, "progress", void 0);
    ProgressBarComponent = __decorate([
        Component({
            selector: 'c8y-progress-bar',
            template: "<div>\n  <p *ngIf=\"message\">\n    {{ message | translate }}\n  </p>\n  <div class=\"progress progress-striped active\" *ngIf=\"progress !== null\">\n    <div\n      class=\"progress-bar\"\n      role=\"progressbar\"\n      [attr.aria-valuenow]=\"progress\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n      [style.width]=\"progress + '%'\"\n    ></div>\n  </div>\n  <div class=\"spinner\" *ngIf=\"progress === null\" style=\"position: relative;\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n"
        })
    ], ProgressBarComponent);
    return ProgressBarComponent;
}());

var ShortenUserNamePipe = /** @class */ (function () {
    function ShortenUserNamePipe() {
    }
    ShortenUserNamePipe.prototype.transform = function (_a) {
        var _b = _a.firstName, firstName = _b === void 0 ? '' : _b, _c = _a.lastName, lastName = _c === void 0 ? '' : _c, _d = _a.userName, userName = _d === void 0 ? '' : _d;
        var parsedFirstName = firstName.trim().split(/\s+/).shift().substr(0, 1);
        var parsedLastName = lastName.trim().split(/\s+/).pop();
        if (!parsedLastName) {
            parsedFirstName = firstName.split(/\s+/).shift();
        }
        else {
            parsedFirstName = parsedFirstName ? parsedFirstName + ". " : '';
        }
        return parsedFirstName || parsedLastName ? parsedFirstName + parsedLastName : userName;
    };
    ShortenUserNamePipe = __decorate([
        Pipe({ name: 'shortenUserName' })
    ], ShortenUserNamePipe);
    return ShortenUserNamePipe;
}());

/** The helper UI service for tenant related methods built upon client services. */
var TenantUiService = /** @class */ (function () {
    function TenantUiService(tenantService, applicationService) {
        this.tenantService = tenantService;
        this.applicationService = applicationService;
    }
    /**
     * Checks whether current tenant is the management tenant.
     * @returns True if current tenant is the management tenant.
     */
    TenantUiService.prototype.isManagementTenant = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentTenant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tenantService.current()];
                    case 1:
                        currentTenant = (_a.sent()).data;
                        return [2 /*return*/, currentTenant.name === 'management'];
                }
            });
        });
    };
    /**
     * Checks whether current tenant is an enterprise tenant.
     * An enterprise tenant is a tenant which has subscribed:
     * - `branding` microservice or `feature-branding` feature app,
     * - `sslmanagement` microservice,
     * - `feature-user-hierarchy` feature app,
     * - `feature-broker` feature app.
     *
     * See https://cumulocity.com/guides/users-guide/enterprise-edition/ for details about such tenants.
     *
     * @returns True, if current tenant is an enterprise tenant.
     */
    TenantUiService.prototype.isEnterpriseTenant = function () {
        return __awaiter(this, void 0, void 0, function () {
            var hasBranding, _a, hasSslManagement, hasUserHierarchy, hasDataBroker;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.hasApp({ name: 'branding' })];
                    case 1:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.hasApp({ name: 'feature-branding' })];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        hasBranding = _a;
                        return [4 /*yield*/, this.hasApp({ name: 'sslmanagement' })];
                    case 4:
                        hasSslManagement = _b.sent();
                        return [4 /*yield*/, this.hasApp({ name: 'feature-user-hierarchy' })];
                    case 5:
                        hasUserHierarchy = _b.sent();
                        return [4 /*yield*/, this.hasApp({ name: 'feature-broker' })];
                    case 6:
                        hasDataBroker = _b.sent();
                        return [2 /*return*/, hasBranding && hasSslManagement && hasUserHierarchy && hasDataBroker];
                }
            });
        });
    };
    TenantUiService.prototype.hasApp = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.applicationService.isAvailable(app)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    TenantUiService.ctorParameters = function () { return [
        { type: TenantService },
        { type: ApplicationService }
    ]; };
    TenantUiService = __decorate([
        Injectable()
    ], TenantUiService);
    return TenantUiService;
}());

var UserPreferencesStorageLocal = /** @class */ (function () {
    function UserPreferencesStorageLocal() {
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.store = {};
        try {
            var jsonStore = window.localStorage.getItem(this.LOCAL_STORAGE_KEY);
            if (jsonStore) {
                this.store = JSON.parse(jsonStore) || {};
            }
        }
        catch (e) {
            // do nothing
        }
    }
    UserPreferencesStorageLocal.prototype.get = function (key) {
        return of(this.store[key]);
    };
    UserPreferencesStorageLocal.prototype.set = function (key, value) {
        this.store[key] = value;
        return this.saveJsonStore();
    };
    UserPreferencesStorageLocal.prototype.saveJsonStore = function () {
        return window.localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(this.store));
    };
    return UserPreferencesStorageLocal;
}());

var UserPreferencesStorageInventory = /** @class */ (function () {
    function UserPreferencesStorageInventory(inventory) {
        this.inventory = inventory;
        this.TYPE = 'c8y_UserPreference';
    }
    UserPreferencesStorageInventory.prototype.get = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.length ? data[0][key] : undefined];
                }
            });
        });
    };
    UserPreferencesStorageInventory.prototype.set = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var data, updateMo, out;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                    case 1:
                        data = (_b.sent()).data;
                        updateMo = (_a = {}, _a[key] = value, _a.type = this.TYPE, _a);
                        if (data.length) {
                            updateMo.id = data[0].id;
                            out = this.inventory.update(updateMo);
                        }
                        else {
                            out = this.inventory.create(updateMo);
                        }
                        return [2 /*return*/, out];
                }
            });
        });
    };
    return UserPreferencesStorageInventory;
}());

var UserPreferencesService = /** @class */ (function () {
    function UserPreferencesService(user, inventory, appState) {
        this.user = user;
        this.inventory = inventory;
        this.appState = appState;
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.storage = {
            local: new UserPreferencesStorageLocal(),
            inventory: new UserPreferencesStorageInventory(this.inventory)
        };
        this.currentUser = this.appState.currentUser;
    }
    UserPreferencesService.prototype.get = function (key) {
        var _this = this;
        return this.currentUser.pipe(first(), switchMap(function (user) { return _this.getForUser(key, user); }));
    };
    UserPreferencesService.prototype.set = function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.currentUser.pipe(first()).subscribe(function (user) {
                resolve(_this.setForUser(key, value, user));
            }, reject);
        });
    };
    UserPreferencesService.prototype.getForUser = function (key, user) {
        var rawKey = this.getRawKey(key, user);
        var storage = this.getStorage(user);
        return from(storage.get(rawKey));
    };
    UserPreferencesService.prototype.setForUser = function (key, value, user) {
        var rawKey = this.getRawKey(key, user);
        var storage = this.getStorage(user);
        return Promise.resolve(storage.set(rawKey, value));
    };
    UserPreferencesService.prototype.getRawKey = function (key, user) {
        var username = user.userName.replace(/\./g, '__');
        return "" + key + username;
    };
    UserPreferencesService.prototype.getStorage = function (user) {
        return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
            this.storage.inventory : this.storage.local;
    };
    UserPreferencesService.ctorParameters = function () { return [
        { type: UserService },
        { type: InventoryService },
        { type: AppStateService }
    ]; };
    UserPreferencesService = __decorate([
        Injectable()
    ], UserPreferencesService);
    return UserPreferencesService;
}());

function initializeServices(translateService, state, userPreferences) {
    var initialize = function () {
        var queryStringLanguage = translateService.queryStringLang();
        var firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.getSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(function (user) { return user && user.userName; }), filter(function (u) { return !!u; }), distinctUntilChanged(), switchMap(function () { return userPreferences.get('language'); }), startWith(firstLanguage), filter(function (lang) { return !!lang; }), distinctUntilChanged())
                .subscribe(function (lang) {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
var ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function
 * @exports LoadMoreComponent A component to load more data from a certain data-source
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 */
var CommonModule = /** @class */ (function () {
    function CommonModule() {
    }
    CommonModule_1 = CommonModule;
    CommonModule.providers = function () {
        return __spread(DataModule$1.providers(), [
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false }
        ], I18nModule.providers(), [
            UserPreferencesService,
            OptionsService,
            AppStateService,
            Permissions,
            TenantUiService,
            HumanizePipe,
            HumanizeAppNamePipe,
            ShortenUserNamePipe,
            MapFunctionPipe,
            DatePipe
        ]);
    };
    CommonModule.forRoot = function () {
        return {
            ngModule: CommonModule_1,
            providers: CommonModule_1.providers()
        };
    };
    var CommonModule_1;
    CommonModule = CommonModule_1 = __decorate([
        NgModule({
            imports: [CommonModule$1, I18nModule, TooltipModule],
            exports: [
                IconDirective,
                OutletDirective,
                I18nModule,
                CommonModule$1,
                HumanizeAppNamePipe,
                HumanizePipe,
                IfAllowedDirective,
                ShortenUserNamePipe,
                ForOfDirective,
                LoadMoreComponent,
                MapFunctionPipe,
                ProgressBarComponent,
                DatePipe,
                LoadingComponent
            ],
            declarations: [
                IconDirective,
                OutletDirective,
                HumanizePipe,
                HumanizeAppNamePipe,
                IfAllowedDirective,
                ShortenUserNamePipe,
                ForOfDirective,
                LoadMoreComponent,
                MapFunctionPipe,
                ProgressBarComponent,
                DatePipe,
                LoadingComponent
            ],
            entryComponents: [LoadMoreComponent]
        })
    ], CommonModule);
    return CommonModule;
}());

/**
 * This component is used as the outlet to show the action bars.
 * In a c8ycli app it is by default placed on the bootstrap component.
 */
var ActionBarComponent = /** @class */ (function () {
    function ActionBarComponent() {
        /**
         * Identifies if the navigator is opened. If yes, the action-bar
         * needs to move to the right.
         */
        this.navigatorOpen = false;
        /**
         * Identifies if the current view has tabs. If yes, the action bar needs
         * to move down.
         */
        this.hasTabs = false;
        /**
         * Identifies if the tabs are aligned horizontally. If yes, the tabs don't
         * need to move to the left.
         */
        this.isTabsHorizontal = false;
        /**
         * Identifies if in a mobile view the toolbar is expanded or not.
         */
        this.isPageToolbarExpanded = false;
        /**
         * Adds the default `c8y-ui-action-bar` class.
         */
        this.uiActionBar = true;
        /**
         * The current items to display in the ActionBar.
         */
        this.items = [];
    }
    Object.defineProperty(ActionBarComponent.prototype, "hidden", {
        /**
         * Returns true if no items are present and hides the action bar.
         */
        get: function () {
            return !(this.items && this.items.length);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the items sorted by priority and grouped by the placement passed.
     * @param {placement} Which placement should be returned sorted.
     */
    ActionBarComponent.prototype.getSortedItems = function (placement) {
        return sortBy(filter$1(this.items, { placement: placement }), this.byPriority);
    };
    ActionBarComponent.prototype.byPriority = function (item) {
        return -item.priority;
    };
    __decorate([
        Input(), HostBinding('class.navigator-open')
    ], ActionBarComponent.prototype, "navigatorOpen", void 0);
    __decorate([
        Input(), HostBinding('class.has-tabs')
    ], ActionBarComponent.prototype, "hasTabs", void 0);
    __decorate([
        Input(), HostBinding('class.horizontal-tabs')
    ], ActionBarComponent.prototype, "isTabsHorizontal", void 0);
    __decorate([
        HostBinding('class.c8y-ui-action-bar')
    ], ActionBarComponent.prototype, "uiActionBar", void 0);
    __decorate([
        Input()
    ], ActionBarComponent.prototype, "items", void 0);
    __decorate([
        HostBinding()
    ], ActionBarComponent.prototype, "hidden", null);
    ActionBarComponent = __decorate([
        Component({
            selector: 'c8y-action-bar',
            template: "<div class=\"navbar-header\">\n  <button\n    type=\"button\"\n    class=\"navbar-toggle collapsed\"\n    (click)=\"isPageToolbarExpanded = !isPageToolbarExpanded\"\n  >\n    <span class=\"sr-only\" translate>Toggle toolbar</span>\n    <span class=\"icon-bar\"></span>\n    <span class=\"icon-bar\"></span>\n    <span class=\"icon-bar\"></span>\n  </button>\n</div>\n\n<div id=\"page-toolbar\" class=\"navbar-collapse\" [collapse]=\"!isPageToolbarExpanded\">\n  <ul class=\"nav navbar-nav navbar-left\">\n    <ng-container *ngFor=\"let item of getSortedItems('left')\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n  </ul>\n  <ul class=\"nav navbar-nav navbar-right\">\n    <ng-container *ngFor=\"let item of getSortedItems('right')\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n    <li class=\"no-remove more-wrapper\" *ngIf=\"getSortedItems('more').length > 0\">\n      <div class=\"dropdown\" dropdown>\n        <button\n          title=\"{{ 'More' | translate }}\u2026\"\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          <span translate>More\u2026</span>\n          <i [c8yIcon]=\"'caret-down'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-container *ngFor=\"let item of getSortedItems('more')\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n        <ul class=\"dropdown-menu visible-xs\"> \n          <ng-container *ngFor=\"let item of getSortedItems('more')\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</div>\n",
            host: { class: 'c8y-ui-action-bar' }
        })
    ], ActionBarComponent);
    return ActionBarComponent;
}());

/**
 * An action bar can be added with content projection or multi provider
 * extension. It allows to show them in three positions (left, right
 * or more). The actions placed here are always local actions to the
 * current route like "add device" or "lock dashboard".
 *
 * @example
 * ```html
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
 * </c8y-action-bar-item>
 * ```
 * @exports ActionBarComponent The outlet component
 * @exports ActionBarItemComponent The items to add with cp.
 */
var ActionBarModule = /** @class */ (function () {
    function ActionBarModule() {
    }
    ActionBarModule = __decorate([
        NgModule({
            declarations: [ActionBarComponent, ActionBarItemComponent],
            imports: [BsDropdownModule, CommonModule, CollapseModule, RouterModule$1.forChild([])],
            exports: [ActionBarComponent, ActionBarItemComponent]
        })
    ], ActionBarModule);
    return ActionBarModule;
}());

/**
 * A hook to use for Multi Provider extension.
 */
var HOOK_ACTION = new InjectionToken('ActionFactory');
/**
 * A service which defines global actions.
 */
var ActionService = /** @class */ (function (_super) {
    __extends(ActionService, _super);
    function ActionService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_ACTION, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (items) { return sortByPriority(items); }), shareReplay(1));
        return _this;
    }
    /**
     * Refresh the extension factories
     */
    ActionService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(ActionService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the actions in the header and emits a state change.
     * @param item The item to add.
     */
    ActionService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an action from the header and emits a state change.
     * @param item The item to remove.
     */
    ActionService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    ActionService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    ActionService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ActionService_Factory() { return new ActionService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: ActionService, providedIn: "root" });
    ActionService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ActionService);
    return ActionService;
}(StateService));

var ActionOutletComponent = /** @class */ (function () {
    function ActionOutletComponent() {
        this.isPageToolbarExpanded = false;
        this.items = [];
    }
    ActionOutletComponent.prototype.getByPriority = function () {
        return sortBy(this.items, this.byPriority);
    };
    ActionOutletComponent.prototype.invoke = function (action) {
        if (action.action) {
            action.action.call();
        }
    };
    ActionOutletComponent.prototype.byPriority = function (item) {
        return -item.priority;
    };
    __decorate([
        Input()
    ], ActionOutletComponent.prototype, "items", void 0);
    ActionOutletComponent = __decorate([
        Component({
            selector: 'c8y-action-outlet',
            template: "<div class=\"dropdown\" dropdown *ngIf=\"items && items.length > 0\">\n  <button\n    type=\"button\"\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"true\">\n    <i [c8yIcon]=\"'plus-circle'\" class=\"fa-2x\"></i>\n  </button>\n\n  <ul class=\"dropdown-menu cog-dropdown\" *dropdownMenu>\n    <ng-container *ngFor=\"let item of getByPriority()\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      <li *ngIf=\"item.label\">\n        <button title=\"{{ item.label | translate }}\" [attr.disabled]=\"item.disabled ? 'disabled' : null\" (click)=\"invoke(item)\">\n          <i *ngIf=\"item.icon\" [c8yIcon]=\"item.icon\"></i>{{item.label | translate}}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
        })
    ], ActionOutletComponent);
    return ActionOutletComponent;
}());

var ActionComponent = /** @class */ (function () {
    function ActionComponent(actionService) {
        this.actionService = actionService;
        this.disabled = false;
        this.priority = 0;
    }
    ActionComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.viewInitTimeout = setTimeout(function () {
            return _this.actionService.add(_this);
        });
    };
    ActionComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.actionService.remove(this);
    };
    ActionComponent.ctorParameters = function () { return [
        { type: ActionService }
    ]; };
    __decorate([
        Input()
    ], ActionComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], ActionComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], ActionComponent.prototype, "priority", void 0);
    __decorate([
        Input()
    ], ActionComponent.prototype, "icon", void 0);
    __decorate([
        ViewChild('template', { static: false })
    ], ActionComponent.prototype, "template", void 0);
    ActionComponent = __decorate([
        Component({
            selector: 'c8y-action',
            template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
        })
    ], ActionComponent);
    return ActionComponent;
}());

/**
 * The angular module definition for actions.
 * @exports ActionComponent
 * @exports ActionOutletComponent
 */
var ActionModule = /** @class */ (function () {
    function ActionModule() {
    }
    ActionModule = __decorate([
        NgModule({
            declarations: [
                ActionOutletComponent,
                ActionComponent
            ],
            imports: [
                CommonModule,
                BsDropdownModule,
                RouterModule$1.forChild([])
            ],
            exports: [
                ActionOutletComponent,
                ActionComponent
            ]
        })
    ], ActionModule);
    return ActionModule;
}());

/**
 * A service which allows to display alerts.
 */
var AlertService = /** @class */ (function (_super) {
    __extends(AlertService, _super);
    function AlertService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @ignore
         */
        _this.state$ = new BehaviorSubject([]);
        _this.MAX_ALERTS = 3;
        _this.ALERT_TIMEOUT = 3000;
        return _this;
    }
    Object.defineProperty(AlertService.prototype, "state", {
        /**
         * Returns all alerts.
         * @readonly
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new alert to the current state.
     */
    AlertService.prototype.add = function (alert) {
        this.addAlert(alert);
    };
    /**
     * Adds a alert by text.
     */
    AlertService.prototype.addByText = function (type, txt, detailedData) {
        this.addAlert({ text: txt, type: type, detailedData: detailedData });
    };
    /**
     * Returns all alerts.
     * @deprecated Use alertService.alerts instead.
     */
    AlertService.prototype.list = function () {
        return this.state;
    };
    /**
     * Remove an alert from the current state.
     */
    AlertService.prototype.remove = function (alert) {
        var _this = this;
        this.changeAlerts(this.state.filter(function (item) { return !_this.areSame(alert, item); }));
    };
    /**
     * Updates matching alert with provided values.
     */
    AlertService.prototype.update = function (alert, fieldsToUpdate) {
        var _this = this;
        this.changeAlerts(this.state.map(function (item) {
            if (_this.areSame(alert, item)) {
                Object.assign(item, fieldsToUpdate);
            }
            return item;
        }));
    };
    /**
     * Removes last danger alert.
     * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.
     *
     * ```js
     *  try {
     *    // something that might throw a danger server msg
     *  } catch (ex) {
     *   this.alertService.removeLastDanger();
     *  }
     * ```
     */
    AlertService.prototype.removeLastDanger = function () {
        var firstDangerAlert = this.state.reverse().find(function (_a) {
            var type = _a.type;
            return type === 'danger';
        });
        this.changeAlerts(this.state.filter(function (alert) { return alert !== firstDangerAlert; }));
    };
    /**
     * Shorthand for a save successful alert.
     * @param savedObject The object which was saved.
     * @return A function that can be executed to show the msg.
     */
    AlertService.prototype.saveSuccess = function (savedObject) {
        var _this = this;
        return function () {
            var text = savedObject + " saved successfully";
            _this.addByText('success', text);
        };
    };
    /**
     * Shorthand for a create successful alert.
     * @param createdObject The object which was created.
     * @return A function that can be executed to show the msg.
     */
    AlertService.prototype.createSuccess = function (createdObject) {
        var _this = this;
        return function () {
            var text = createdObject + " created successfully";
            _this.addByText('success', text);
        };
    };
    /**
     * Clears all alerts.
     */
    AlertService.prototype.clearAll = function () {
        this.changeAlerts([]);
    };
    /**
     * A shorthand to display a simple success message.
     * @param text The success text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.success = function (text, detailedData) {
        this.addByText('success', text, detailedData);
    };
    /**
     * A shorthand to display a simple danger message.
     * @param text The danger text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.danger = function (text, detailedData) {
        this.addByText('danger', text, detailedData);
    };
    /**
     * A shorthand to display a simple info message.
     * @param text The info text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.info = function (text, detailedData) {
        this.addByText('info', text, detailedData);
    };
    /**
     * A shorthand to display a simple warning message.
     * @param text The warning text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.warning = function (text, detailedData) {
        this.addByText('warning', text, detailedData);
    };
    /**
     * Creates alert from standard api errors.
     * Should be used for errors generated by @c8y/client services.
     * @param {IResult}  error The error from server.
     * @param {alertType} type The type of alert.
     */
    AlertService.prototype.addServerFailure = function (error, type) {
        if (type === void 0) { type = 'danger'; }
        var data = error.data, res = error.res;
        var text = data && data.message ? data.message : null;
        var detailedData;
        if (data) {
            if (typeof data === 'object') {
                detailedData = data.exceptionMessage;
            }
            else if (typeof data === 'string') {
                detailedData = data;
            }
        }
        var hasRelevantMessage = !!(text || detailedData);
        if (!text) {
            text = gettext('A server error occurred.');
        }
        if (!hasRelevantMessage) {
            detailedData = {
                status: res.status,
                statusText: res.statusText,
                url: res.url
            };
        }
        this.addAlert({
            type: type,
            text: text,
            detailedData: detailedData
        });
    };
    /**
     * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.
     * Callbacks are same if they refer to the same function.
     */
    AlertService.prototype.areSame = function (alert1, alert2) {
        return (alert1.text === alert2.text &&
            alert1.type === alert2.type &&
            alert1.detailedData === alert2.detailedData &&
            alert1.onClose === alert2.onClose &&
            alert1.onDetail === alert2.onDetail);
    };
    AlertService.prototype.changeAlerts = function (newAlerts) {
        this.state$.next(newAlerts);
    };
    AlertService.prototype.addAlert = function (alert) {
        var _this = this;
        if (!alert.text && !alert.type) {
            throw new Error('Cannot add empty alert');
        }
        var alertAlreadyAdded = this.state.find(function (item) { return _this.areSame(alert, item); });
        if (alertAlreadyAdded) {
            return;
        }
        this.changeAlerts(__spread(this.state, [alert]));
        this.hideAutomaticallyIfNeeded(alert);
        this.removeOldestIfMax();
    };
    AlertService.prototype.hideAutomaticallyIfNeeded = function (alert) {
        var _this = this;
        var isSuccess = alert.type === 'success';
        var noDetails = !alert.detailedData;
        var alertTimeout = isSuccess && noDetails ? this.ALERT_TIMEOUT : 0;
        if (typeof alert.timeout !== 'undefined') {
            alertTimeout = alert.timeout;
        }
        if (alertTimeout) {
            setTimeout(function () { return _this.remove(alert); }, alertTimeout);
        }
    };
    AlertService.prototype.removeOldestIfMax = function () {
        if (this.state.length > this.MAX_ALERTS) {
            var _a = __read(this.state), firstRemoved = _a.slice(1);
            this.changeAlerts(firstRemoved);
        }
    };
    AlertService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AlertService_Factory() { return new AlertService(); }, token: AlertService, providedIn: "root" });
    AlertService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AlertService);
    return AlertService;
}(StateService));

/**
 * The content of `c8y-alert-details` component will be displayed as alert's details.
 * This component must be placed inside `c8y-alert` component.
 */
var AlertDetailsComponent = /** @class */ (function () {
    function AlertDetailsComponent() {
    }
    AlertDetailsComponent = __decorate([
        Component({
            selector: 'c8y-alert-details',
            template: "<ng-content></ng-content>"
        })
    ], AlertDetailsComponent);
    return AlertDetailsComponent;
}());

/**
 * Alert component allows creating alert with complex view.
 */
var AlertComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function AlertComponent(alertService) {
        this.alertService = alertService;
    }
    /**
     * AlertComponent adds new alert to collection stored in alertService after view init.
     */
    AlertComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.containDetailsComponent) {
            this.detailedData = null;
        }
        this.viewInitTimeout = setTimeout(function () {
            return _this.alertService.add(_this);
        });
    };
    /**
     * AlertComponent removes alert from collection stored in alertService on destroy component.
     */
    AlertComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.alertService.remove(this);
    };
    AlertComponent.ctorParameters = function () { return [
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], AlertComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], AlertComponent.prototype, "onDetail", void 0);
    __decorate([
        Input()
    ], AlertComponent.prototype, "onClose", void 0);
    __decorate([
        ViewChild('detailedData', { static: false })
    ], AlertComponent.prototype, "detailedData", void 0);
    __decorate([
        ViewChild('text', { static: false })
    ], AlertComponent.prototype, "text", void 0);
    __decorate([
        ContentChild(AlertDetailsComponent, { static: false })
    ], AlertComponent.prototype, "containDetailsComponent", void 0);
    AlertComponent = __decorate([
        Component({
            selector: 'c8y-alert',
            template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
        })
    ], AlertComponent);
    return AlertComponent;
}());

/**
 * Alert outlet component shows all added alerts. It is used in the application's `c8y-bootstrap` component.
 *
 * For applications which don’t use `c8y-bootstrap` component but want to display alerts via AlertService, a c8y-alert-outlet component needs to be added explicitly in the template.
 *
 * ## Example:
 * ```html
 *  <div class="alerts">
 *    <c8y-alert-outlet></c8y-alert-outlet>
 *  </div>
 * ```
 */
var AlertOutletComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function AlertOutletComponent(position, alertService) {
        this.position = position;
        this.alertService = alertService;
        /**
         * Currently displayed details of an alert. Only one alert’s details can be displayed at a time.”
         */
        this.detailDisplayedAlert = {};
        /**
         * @ignore
         */
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    Object.defineProperty(AlertOutletComponent.prototype, "alerts", {
        /**
         * The array of current alerts.
         */
        get: function () {
            return this.alertService.state$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a CSS class for an alert depending on its type to style the corresponding alert component.
     */
    AlertOutletComponent.prototype.getClass = function (alert) {
        var classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push("alert-" + alert.type);
        return classes.join(' ');
    };
    /**
     * Executes alert’s onClose method, if provided, and closes the alert.
     * @param alert The alert which will be closed.
     */
    AlertOutletComponent.prototype.close = function (alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    };
    /**
     * Expands details part of particular alert, and collapses details for another alerts.
     * @param alert The alert which details should be expanded.
     */
    AlertOutletComponent.prototype.showDetails = function (alert) {
        if (alert.onDetail) {
            return alert.onDetail();
        }
        this.detailDisplayedAlert = Object.assign({}, alert);
        this.detailDisplayedAlert.mode = 'raw';
        this.setDetailsContent(alert);
    };
    /**
     * Returns true if alert has extra detailedData or defines custom onDetail method.
     */
    AlertOutletComponent.prototype.hasDetails = function (alert) {
        return (alert.detailedData || alert.onDetail);
    };
    /**
     * Collapses alert's details.
     */
    AlertOutletComponent.prototype.closeDetails = function () {
        this.detailDisplayedAlert = {};
    };
    /**
     * Returns true if details part of alert is expanded.
     */
    AlertOutletComponent.prototype.isDetailsShow = function (alert) {
        return this.alertService.areSame(alert, this.detailDisplayedAlert);
    };
    /**
     * @ignore
     */
    AlertOutletComponent.prototype.isTemplateRef = function (value) {
        return value instanceof TemplateRef;
    };
    /**
     * @ignore
     */
    AlertOutletComponent.prototype.template = function (content) {
        return this.isTemplateRef(content) ? content : undefined;
    };
    AlertOutletComponent.prototype.setDetailsContent = function (alert) {
        if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
            this.detailDisplayedAlert.contents = alert.detailedData;
        }
        else {
            this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
        }
    };
    AlertOutletComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['position',] }] },
        { type: AlertService }
    ]; };
    __decorate([
        HostBinding('class.static')
    ], AlertOutletComponent.prototype, "isStatic", void 0);
    AlertOutletComponent = __decorate([
        Component({
            selector: 'c8y-alert-outlet',
            template: "<div\n  class=\"alert animated fadeInRightBig\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [innerText]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i class=\"fa fa-chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i class=\"fa fa-chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [innerText]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
        }),
        __param(0, Attribute('position'))
    ], AlertOutletComponent);
    return AlertOutletComponent;
}());

/**
 * The content of `c8y-alert-text` component will be displayed as alert's text.
 * This component must be placed inside `c8y-alert` component.
 */
var AlertTextComponent = /** @class */ (function () {
    function AlertTextComponent() {
    }
    AlertTextComponent = __decorate([
        Component({
            selector: 'c8y-alert-text',
            template: "<ng-content></ng-content>"
        })
    ], AlertTextComponent);
    return AlertTextComponent;
}());

/**
 * Alert module is used for displaying status messages to the user e.g. danger, success, warning and info alerts.
 */
var AlertModule = /** @class */ (function () {
    function AlertModule() {
    }
    AlertModule = __decorate([
        NgModule({
            imports: [
                CommonModule
            ],
            exports: [
                AlertOutletComponent,
                AlertComponent,
                AlertDetailsComponent,
                AlertTextComponent
            ],
            declarations: [
                AlertOutletComponent,
                AlertComponent,
                AlertDetailsComponent,
                AlertTextComponent
            ]
        })
    ], AlertModule);
    return AlertModule;
}());

var NavigatorNode = /** @class */ (function () {
    function NavigatorNode(data) {
        this.children = [];
        this.parents = [];
        this.routerLinkExact = true;
        this.open = false;
        this.hidden = false;
        this.draggable = false;
        this.droppable = false;
        this.dragged = false;
        this.draggedHover = false;
        this.confirm = undefined;
        this._priority = 0;
        this.update(data);
    }
    Object.defineProperty(NavigatorNode.prototype, "hasChildren", {
        get: function () {
            return this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "id", {
        get: function () {
            return 'navigator_node_' + snakeCase(this.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "priority", {
        get: function () {
            if (this._priority) {
                return this._priority;
            }
            else {
                var childrenPriorities = this.children.map(function (_a) {
                    var priority = _a.priority;
                    return priority || 0;
                });
                if (childrenPriorities.length) {
                    return childrenPriorities.length ? Math.max.apply(Math, __spread(childrenPriorities)) : 0;
                }
                return 0;
            }
        },
        set: function (priority) {
            this._priority = priority;
        },
        enumerable: true,
        configurable: true
    });
    NavigatorNode.prototype.openOnStart = function (url) {
        return false;
    };
    NavigatorNode.prototype.add = function (node) {
        if (node === this) {
            throw new Error('Adding node to itself');
        }
        if (this.children.indexOf(node) === -1) {
            this.children.push(node);
        }
        if (node.parents.indexOf(this) === -1) {
            node.parents.push(this);
        }
        this.updateChildren();
    };
    NavigatorNode.prototype.remove = function (node) {
        var ix = this.children.indexOf(node);
        var pix = node.parents.indexOf(this);
        if (ix > -1) {
            this.children.splice(ix, 1);
        }
        if (pix > -1) {
            node.parents.splice(pix, 1);
        }
        this.updateChildren();
    };
    NavigatorNode.prototype.update = function (data) {
        if (data) {
            Object.assign(this, data);
            if (data.hidden !== undefined) {
                this.parents.forEach(function (p) {
                    p.updateHidden();
                });
            }
        }
    };
    NavigatorNode.prototype.find = function (predicate) {
        if (typeof predicate === 'string') {
            var compareLabel_1 = predicate.toLocaleLowerCase();
            predicate = function (_a) {
                var label = _a.label;
                return compareLabel_1 === label.toLowerCase();
            };
        }
        if (typeof predicate === 'object') {
            predicate = matches(predicate);
        }
        if (typeof predicate !== 'function') {
            throw new Error('Invalid search predicate');
        }
        return this.children.reduce(function (found, child) { return found || child.find(predicate); }, this.children.find(predicate));
    };
    NavigatorNode.prototype.empty = function () {
        this.children.length = 0;
    };
    NavigatorNode.prototype.click = function (options) {
        if (options === void 0) { options = {}; }
        // do nothing
    };
    NavigatorNode.prototype.drop = function ($event) {
        $event.stopPropagation();
        clearTimeout(this.expandDragTimeout);
    };
    NavigatorNode.prototype.dragStart = function ($event) {
        $event.stopPropagation();
        // we can't pass a object to setData, so we do it via service
        // set data is still needed, to make the drag&drop work
        $event.dataTransfer.setData('node', 'node');
        this.dragged = true;
    };
    NavigatorNode.prototype.dragEnd = function ($event) {
        $event.stopPropagation();
        this.dragged = false;
        $event.dataTransfer.clearData();
    };
    Object.defineProperty(NavigatorNode.prototype, "canDrop", {
        get: function () {
            return this.droppable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorNode.prototype, "canNavigate", {
        get: function () {
            return typeof this.path !== 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    NavigatorNode.prototype.dragEnter = function ($event) {
        var _this = this;
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = true;
        if (!this.open) {
            this.expandDragTimeout = setTimeout(function () { return _this.expand(); }, 1000);
        }
    };
    NavigatorNode.prototype.dragLeave = function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.draggedHover = false;
        clearTimeout(this.expandDragTimeout);
    };
    NavigatorNode.prototype.expand = function () {
        if (!this.open) {
            this.open = true;
            this.click({ open: true, expander: true });
        }
    };
    NavigatorNode.prototype.traverse = function (callback) {
        if (this.children) {
            this.children.forEach(function (child) {
                callback(child);
                child.traverse(callback);
            });
        }
    };
    NavigatorNode.prototype.destroy = function () {
        // nothing todo here
    };
    NavigatorNode.prototype.updateChildren = function () {
        this.sort();
        this.updateHidden();
    };
    NavigatorNode.prototype.sort = function () {
        this.children.sort(function (a, b) {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                return -1;
            }
            else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    NavigatorNode.prototype.updateHidden = function () {
        if (typeof this.path === 'undefined') {
            this.hidden = !this.children.some(function (_a) {
                var hidden = _a.hidden;
                return !hidden;
            });
        }
    };
    return NavigatorNode;
}());

var NavigatorNodeRoot = /** @class */ (function (_super) {
    __extends(NavigatorNodeRoot, _super);
    function NavigatorNodeRoot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NavigatorNodeRoot.prototype.addRoot = function (nodeData) {
        var parent = nodeData.parent;
        var node = this.createNode(nodeData);
        var localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find(function (n) { return localParent === n; })) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    };
    NavigatorNodeRoot.prototype.createNode = function (nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode(__assign({}, nodeData, { parent: undefined }));
        }
        throw new Error('Wrong type of node data');
    };
    return NavigatorNodeRoot;
}(NavigatorNode));

/**
 * A hook to use for Multi Provider extension.
 */
var HOOK_NAVIGATOR_NODES = new InjectionToken('NavigatorNodesFactory');
/**
 * A service which defines the navigator.
 */
var NavigatorService = /** @class */ (function (_super) {
    __extends(NavigatorService, _super);
    function NavigatorService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.router = router;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.firstUrl = true;
        var rootNode = new NavigatorNodeRoot();
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_NAVIGATOR_NODES, []); },
            stateToFactory(_this.state$),
        ]).pipe(map(function (nodes) {
            var noParent = nodes.filter(function (node) { return !node.parent; });
            var withParent = nodes.filter(function (node) { return node.parent; });
            // Based on the sortedNodes array, the nodes are sequentially created.
            // Nodes sorting is done in two steps to have the top-level nodes first.
            // This way, by the time we are adding a child node, the parent node is already present.
            var sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
            rootNode.empty();
            sortedNodes.forEach(function (node) { return rootNode.addRoot(node); });
            return rootNode.children;
        }), shareReplay(1));
        return _this;
    }
    NavigatorService.prototype.openOnFirstUrl = function (node) {
        if (this.firstUrl && !!node.path) {
            return this.router.isActive(node.path, node.routerLinkExact) || node.openOnStart(this.router.url);
        }
        return false;
    };
    Object.defineProperty(NavigatorService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Refresh the extension factories
     */
    NavigatorService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    /**
     * Adds a new node to the navigator.
     * @param nav The node to add.
     */
    NavigatorService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes a node from the navigator.
     * @param nav The node ro remove.
     */
    NavigatorService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    NavigatorService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    NavigatorService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NavigatorService_Factory() { return new NavigatorService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: NavigatorService, providedIn: "root" });
    NavigatorService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NavigatorService);
    return NavigatorService;
}(StateService));

/**
 * A service which defines header functions.
 */
var HeaderService = /** @class */ (function (_super) {
    __extends(HeaderService, _super);
    function HeaderService(navigatorService, options) {
        var _this = _super.call(this) || this;
        _this.navigatorService = navigatorService;
        _this.options = options;
        _this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES = 1000;
        _this.hasItemsInNavigator$ = _this.navigatorService.items$.pipe(delay(_this.DELAY_TO_AVOID_FLICKERING_ON_ASYNC_NODES), map(function (_a) {
            var length = _a.length;
            return !!length;
        }), distinctUntilChanged());
        _this.state$ = new BehaviorSubject({
            title: undefined,
            nav: {
                open: false
            }
        });
        _this.title = undefined;
        _this.header$ = _this.map(function (header) { return header; });
        _this.navigatorOpen$ = _this.map(function (_a) {
            var nav = _a.nav;
            return nav.open;
        }).pipe(combineLatest$1(_this.hasItemsInNavigator$), map(function (_a) {
            var _b = __read(_a, 2), open = _b[0], hasItems = _b[1];
            return open && hasItems;
        }));
        var titleReference = document.querySelector('title');
        _this.title = {
            elementRef: titleReference,
            originalValue: titleReference && titleReference.innerText
        };
        return _this;
    }
    Object.defineProperty(HeaderService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "navigatorHiddenOnStartup", {
        get: function () {
            return this.options.hideNavigator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "largeWidth", {
        get: function () {
            return document.documentElement.clientWidth > 1200;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeaderService.prototype, "shouldToggle", {
        get: function () {
            return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Toggles the navigator open status.
     */
    HeaderService.prototype.toggleNavigator = function () {
        this.state.nav.open = !this.state.nav.open;
        this.emitNewState();
    };
    /**
     * Force to close the navigator.
     */
    HeaderService.prototype.closeNavigator = function () {
        this.state.nav.open = false;
        this.emitNewState();
    };
    /**
     * Configures navigation options.
     * @param config Object with the properties:
     * - open: Boolean
     */
    HeaderService.prototype.configNavigator = function (config) {
        if (config === void 0) { config = {}; }
        this.state.nav = Object.assign(this.state.nav, config);
        this.emitNewState();
    };
    /**
     * Change the application title.
     * @param newTitle The new title of the application.
     */
    HeaderService.prototype.changeTitle = function (newTitle, pageTitleUpdate) {
        if (pageTitleUpdate === void 0) { pageTitleUpdate = true; }
        this.state.title = newTitle;
        this.state.pageTitleUpdate = pageTitleUpdate;
        this.emitNewState();
    };
    /**
     * Change the page title.
     * @param newTitle The new title of the page.
     */
    HeaderService.prototype.changePageTitle = function (newTitle) {
        this.title.elementRef.innerText = newTitle
            ? newTitle + " / " + this.title.originalValue
            : "" + this.title.originalValue;
    };
    /**
     * This methods checks if the navigator toggles on startup
     * or if an item is added to the navigator node.
     * Delay of 300ms is intended for animation purpose.
     */
    HeaderService.prototype.verifyIfNavOpen = function () {
        var _this = this;
        this.hasItemsInNavigator$
            .pipe(debounceTime(300))
            .subscribe(function (hasItems) { return hasItems && _this.shouldToggle && _this.toggleNavigator(); });
    };
    HeaderService.prototype.shouldShowBreadcrumbs = function () {
        return this.options.breadcrumbs;
    };
    HeaderService.ctorParameters = function () { return [
        { type: NavigatorService },
        { type: OptionsService }
    ]; };
    HeaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(ɵɵinject(NavigatorService), ɵɵinject(OptionsService)); }, token: HeaderService, providedIn: "root" });
    HeaderService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], HeaderService);
    return HeaderService;
}(StateService));

var HOOK_TABS = new InjectionToken('TabsFactory');
var TabsService = /** @class */ (function (_super) {
    __extends(TabsService, _super);
    function TabsService(injector, router, translateService, options) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.translateService = translateService;
        _this.options = options;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_TABS, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (tabs) { return _this.prepareTabs(tabs); }), shareReplay(1), distinctUntilChanged());
        _this.orientation$ = _this.items$.pipe(map(function (tabs) {
            var firstTabWithDefinedOrientation = tabs.find(function (tab) { return tab.orientation; });
            if (firstTabWithDefinedOrientation) {
                return firstTabWithDefinedOrientation.orientation;
            }
            return _this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        }), distinctUntilChanged());
        return _this;
    }
    TabsService.prototype.prepareTabs = function (tabs) {
        return this.sortTabs(tabs
            .map(function (tab) { return (__assign({}, tab, { template: tab.template instanceof ViewContainerRef ? tab.template : undefined })); })
            .filter(function (tab, index, self) { return index === self.findIndex(function (t) { return t.path === tab.path; }); }));
    };
    TabsService.prototype.sortTabs = function (tabs) {
        var _this = this;
        return tabs.sort(function (a, b) {
            var priorityOrder = (b.priority || 0) - (a.priority || 0);
            var aTranslatedLabel = _this.translateService.instant(a.label);
            var bTranslatedLabel = _this.translateService.instant(b.label);
            var translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
            return priorityOrder || translatedLabelOrder;
        });
    };
    /**
     * Refresh the extension factories
     */
    TabsService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(TabsService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to tabs and emits state change
     * @param item The item to add.
     */
    TabsService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes a tab and emits a state change.
     * @param item The item to remove.
     */
    TabsService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    Object.defineProperty(TabsService.prototype, "firstTab$", {
        get: function () {
            return this.items$.pipe(map(function (tabs) { return tabs[0]; }), filter(Boolean), first());
        },
        enumerable: true,
        configurable: true
    });
    TabsService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router },
        { type: TranslateService$1 },
        { type: OptionsService }
    ]; };
    TabsService.ngInjectableDef = ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(ɵɵinject(INJECTOR), ɵɵinject(Router), ɵɵinject(TranslateService$1), ɵɵinject(OptionsService)); }, token: TabsService, providedIn: "root" });
    TabsService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TabsService);
    return TabsService;
}(StateService));

var BootstrapComponent = /** @class */ (function () {
    function BootstrapComponent(tabs, ui, navigator, actionBar, options, headerService) {
        var _this = this;
        this.tabs = tabs;
        this.ui = ui;
        this.navigator = navigator;
        this.actionBar = actionBar;
        this.options = options;
        this.headerService = headerService;
        this.showPoweredBy = true;
        this.noAppsMargin$ = this.headerService.map(function (_a) {
            var nav = _a.nav;
            return !nav.open && nav.hiddenOnStartup;
        });
        this.tabsOrientation = this.options.tabsHorizontal ? 'horizontal' : 'vertical';
        this.ui
            .map(function (_a) {
            var lang = _a.lang;
            return lang;
        })
            .pipe(distinctUntilChanged())
            .subscribe(function () {
            _this.actionBar.refresh();
        });
        this.showPoweredBy = !this.options.get('hidePowered');
    }
    BootstrapComponent.ctorParameters = function () { return [
        { type: TabsService },
        { type: AppStateService },
        { type: NavigatorService },
        { type: ActionBarService },
        { type: OptionsService },
        { type: HeaderService }
    ]; };
    BootstrapComponent = __decorate([
        Component({
            selector: 'c8y-bootstrap',
            template: "<c8y-login *ngIf=\"!(ui.currentUser | async)\"></c8y-login>\n\n<div *ngIf=\"ui.currentUser | async\" [class.head-open]=\"header.headerOpen\">\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-navigator-outlet\n    [nodes]=\"navigator.items$ | async\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n  >\n    <header class=\"title navigator-slot-top\">\n      <div class=\"tenant-brand\"></div>\n      <c8y-app-icon\n        [name]=\"(ui.state$ | async).app.name\"\n        [contextPath]=\"(ui.state$ | async).app.contextPath\"\n      ></c8y-app-icon>\n      <span>{{ (ui.state$ | async).app | humanizeAppName | async }}</span>\n    </header>\n    <div style=\"cursor:default\" class=\"powered-by navigator-slot-bottom\" *ngIf=\"showPoweredBy\">\n      <p translate>powered by Cumulocity</p>\n    </div>\n  </c8y-navigator-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n  >\n  </c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent.isHorizontal\"\n    [items]=\"actionBar.items$ | async\"\n  >\n  </c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent.hidden\n    }\"\n  >\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </div>\n  </div>\n</div>\n<c8y-cookie-banner></c8y-cookie-banner>\n"
        })
    ], BootstrapComponent);
    return BootstrapComponent;
}());

var BreadcrumbItemComponent = /** @class */ (function () {
    function BreadcrumbItemComponent() {
    }
    __decorate([
        Input()
    ], BreadcrumbItemComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], BreadcrumbItemComponent.prototype, "translate", void 0);
    __decorate([
        Input()
    ], BreadcrumbItemComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], BreadcrumbItemComponent.prototype, "path", void 0);
    __decorate([
        ViewChild('template', { static: false })
    ], BreadcrumbItemComponent.prototype, "template", void 0);
    BreadcrumbItemComponent = __decorate([
        Component({
            selector: 'c8y-breadcrumb-item',
            template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
        })
    ], BreadcrumbItemComponent);
    return BreadcrumbItemComponent;
}());

var BreadcrumbOutletComponent = /** @class */ (function () {
    function BreadcrumbOutletComponent() {
        this.showAll = false;
        this.breadcrumbs = [];
    }
    /**
     * For upgrade only. Old angularjs routes start with hash, new ones not.
     */
    BreadcrumbOutletComponent.prototype.normalizePath = function (path) {
        return path.replace(/^#\/?/, '');
    };
    __decorate([
        Input()
    ], BreadcrumbOutletComponent.prototype, "breadcrumbs", void 0);
    BreadcrumbOutletComponent = __decorate([
        Component({
            selector: 'c8y-breadcrumb-outlet',
            template: "<div\n  class=\"breadcrumbs-container\"\n  [ngClass]=\"{\n    multiple: breadcrumbs.length > 1,\n    open: showAll\n  }\"\n  *ngIf=\"breadcrumbs && breadcrumbs.length > 0\"\n>\n  <button\n    *ngIf=\"breadcrumbs.length > 1\"\n    class=\"btn-show-all-breadcrumbs pull-left\"\n    (click)=\"showAll = !showAll\"\n  >\n    <i\n      *ngIf=\"!showAll\"\n      [c8yIcon]=\"'caret-right'\"\n      tooltip=\"{{ 'Show all breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n    <i\n      *ngIf=\"showAll\"\n      [c8yIcon]=\"'caret-down'\"\n      tooltip=\"{{ 'Collapse breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </button>\n\n  <ul class=\"breadcrumbs text-muted\" *ngFor=\"let breadcrumb of breadcrumbs; let first = first\">\n    <ng-container *ngIf=\"first || showAll\">\n      <li class=\"text-muted\" *ngFor=\"let item of breadcrumb.items; let firstItem = first\">\n        <span *ngIf=\"!firstItem\"> > </span>\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n        <ng-container *ngIf=\"item.label\">\n          <a\n            [routerLink]=\"normalizePath(item.path)\"\n            class=\"word-break\"\n            title=\"{{ item.label | translate }}\"\n          >\n            <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"right-m-xs\"></i>\n            <span>{{ item.label | translate }}</span>\n          </a>\n        </ng-container>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
        })
    ], BreadcrumbOutletComponent);
    return BreadcrumbOutletComponent;
}());

var HOOK_BREADCRUMB = new InjectionToken('BreadcrumbFactory');
var BreadcrumbService = /** @class */ (function (_super) {
    __extends(BreadcrumbService, _super);
    function BreadcrumbService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_BREADCRUMB, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (breadcrumbs) { return _this.sortByPreferredPath(breadcrumbs); }), shareReplay(1));
        return _this;
    }
    Object.defineProperty(BreadcrumbService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the action bar in the header.
     * @param item The item to add.
     */
    BreadcrumbService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an action bar item from the header.
     * @param item The item to remove.
     */
    BreadcrumbService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    /**
     * Refresh the extension factories
     */
    BreadcrumbService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    /**
     * Sets the crumb that contains that path to the top.
     * @param path The path to prefer.
     */
    BreadcrumbService.prototype.selectPreferredByPath = function (path) {
        this.preferredPath = path;
        this.refresh();
    };
    BreadcrumbService.prototype.sortByPreferredPath = function (breadcrumbs) {
        var _this = this;
        if (this.preferredPath) {
            return breadcrumbs.sort(function (bc) {
                return bc.items.find(function (item) { return !!item.path.match(_this.preferredPath); }) ? -1 : 1;
            });
        }
        return breadcrumbs;
    };
    BreadcrumbService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    BreadcrumbService.ngInjectableDef = ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: BreadcrumbService, providedIn: "root" });
    BreadcrumbService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], BreadcrumbService);
    return BreadcrumbService;
}(StateService));

var BreadcrumbComponent = /** @class */ (function () {
    function BreadcrumbComponent(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
    }
    BreadcrumbComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.items = this.contentChildItems.toArray();
        this.viewInitTimeout = setTimeout(function () {
            return _this.breadcrumbService.add(_this);
        });
    };
    BreadcrumbComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.breadcrumbService.remove(this);
    };
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    __decorate([
        ContentChildren(BreadcrumbItemComponent)
    ], BreadcrumbComponent.prototype, "contentChildItems", void 0);
    BreadcrumbComponent = __decorate([
        Component({
            selector: 'c8y-breadcrumb',
            template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
        })
    ], BreadcrumbComponent);
    return BreadcrumbComponent;
}());

/**
 * The angular module definition for breadcrumbs.
 * @exports BreadcrumbComponent
 * @exports BreadcrumbItemComponent
 * @exports BreadcrumbOutletComponent
 */
var BreadcrumbModule = /** @class */ (function () {
    function BreadcrumbModule() {
    }
    BreadcrumbModule = __decorate([
        NgModule({
            declarations: [
                BreadcrumbComponent,
                BreadcrumbItemComponent,
                BreadcrumbOutletComponent
            ],
            imports: [
                RouterModule$1.forChild([]),
                CommonModule,
                TooltipModule.forRoot()
            ],
            exports: [
                BreadcrumbComponent,
                BreadcrumbItemComponent,
                BreadcrumbOutletComponent
            ]
        })
    ], BreadcrumbModule);
    return BreadcrumbModule;
}());

var NavigatorItemComponent = /** @class */ (function () {
    function NavigatorItemComponent(service) {
        this.service = service;
        this.priority = 0;
        this.nodeData = new NavigatorNode();
    }
    NavigatorItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ngOnChanges();
        setTimeout(function () { return _this.service.add(_this.nodeData); });
    };
    NavigatorItemComponent.prototype.ngOnChanges = function () {
        this.nodeData.icon = this.icon;
        this.nodeData.label = this.label;
        this.nodeData.path = this.path;
        this.nodeData.priority = this.priority;
        this.nodeData.iconTemplate = !this.icon ? this.template : undefined;
        this.nodeData.icon = this.icon;
    };
    NavigatorItemComponent.prototype.ngOnDestroy = function () {
        this.service.remove(this.nodeData);
    };
    NavigatorItemComponent.ctorParameters = function () { return [
        { type: NavigatorService }
    ]; };
    __decorate([
        ViewChild('iconTpl', { static: true })
    ], NavigatorItemComponent.prototype, "template", void 0);
    __decorate([
        Input()
    ], NavigatorItemComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], NavigatorItemComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], NavigatorItemComponent.prototype, "path", void 0);
    __decorate([
        Input()
    ], NavigatorItemComponent.prototype, "priority", void 0);
    NavigatorItemComponent = __decorate([
        Component({
            selector: 'c8y-navigator-item',
            template: '<ng-template #iconTpl><ng-content></ng-content></ng-template>'
        })
    ], NavigatorItemComponent);
    return NavigatorItemComponent;
}());

var NavigatorIconComponent = /** @class */ (function () {
    function NavigatorIconComponent() {
    }
    Object.defineProperty(NavigatorIconComponent.prototype, "icon", {
        get: function () {
            var DEFAULT_ICON = 'cog';
            return this.node.icon || DEFAULT_ICON;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigatorIconComponent.prototype, "iconClass", {
        get: function () {
            return "fa-" + this.icon;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input()
    ], NavigatorIconComponent.prototype, "node", void 0);
    NavigatorIconComponent = __decorate([
        Component({
            selector: 'c8y-navigator-icon',
            template: "<i class=\"icon\" [c8yIcon]=\"icon\"></i>"
        })
    ], NavigatorIconComponent);
    return NavigatorIconComponent;
}());

/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
var PopoverConfirmComponent = /** @class */ (function () {
    function PopoverConfirmComponent() {
        this.buttons = [{ label: gettext('cancel'), action: function () { return Promise.reject(); } }];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    PopoverConfirmComponent.prototype.show = function (buttons) {
        return __awaiter(this, void 0, void 0, function () {
            var result, ex_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.buttons = buttons || this.buttons;
                        this.isOpen = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                return _this.click = function (action) { return action().then(resolve).catch(reject); };
                            })];
                    case 2:
                        result = _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        ex_1 = _a.sent();
                        throw (ex_1);
                    case 4:
                        this.isOpen = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/, result];
                }
            });
        });
    };
    PopoverConfirmComponent.prototype.buttonStatus = function (status) {
        if (status) {
            return "btn-" + status;
        }
        return 'btn-link btn-clean';
    };
    PopoverConfirmComponent.prototype.handleOutsideClick = function () {
        this.click(function () { return Promise.reject(); });
    };
    __decorate([
        ViewChild(PopoverDirective, { static: false })
    ], PopoverConfirmComponent.prototype, "popover", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "buttons", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "isOpen", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "containerClass", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "placement", void 0);
    __decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "outsideClick", void 0);
    PopoverConfirmComponent = __decorate([
        Component({
            selector: 'c8y-popover-confirm',
            template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"bottom-m\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm right-m-md\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
        })
    ], PopoverConfirmComponent);
    return PopoverConfirmComponent;
}());

var NavigatorNodeComponent = /** @class */ (function () {
    function NavigatorNodeComponent(componentFactoryResolver, navigator) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.navigator = navigator;
        this.nodeClick = new EventEmitter();
    }
    NavigatorNodeComponent_1 = NavigatorNodeComponent;
    NavigatorNodeComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.childrenNodes.forEach(function (n) { return n.parentNode = _this; });
        this.viewInitTimeout = setTimeout(function () {
            _this.updateIcon();
            _this.openOnFirstUrl();
            _this.expandParentIfActive();
            _this.node.confirm = _this.confirm;
        });
    };
    NavigatorNodeComponent.prototype.openOnFirstUrl = function () {
        if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
            this.expandCollapse(true);
        }
    };
    Object.defineProperty(NavigatorNodeComponent.prototype, "expandTitle", {
        get: function () {
            return !this.node.open ? 'Expand' : 'Collapse';
        },
        enumerable: true,
        configurable: true
    });
    NavigatorNodeComponent.prototype.click = function (from, $event) {
        var _a;
        if (from === void 0) { from = 'link'; }
        var open;
        if (from === 'expander') {
            if ($event) {
                $event.stopPropagation();
                $event.preventDefault();
            }
            open = !this.node.open;
        }
        else {
            open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
        }
        if (open !== this.node.open) {
            this.expandCollapse(open, false, (_a = {}, _a[from] = true, _a.$event = $event, _a));
        }
        this.nodeClick.emit(from);
    };
    NavigatorNodeComponent.prototype.expandCollapse = function (open, recursive, forNode) {
        if (forNode === void 0) { forNode = {}; }
        this.node.open = open;
        // Also close children
        if (recursive) {
            this.childrenNodes.forEach(function (n) { return n.expandCollapse(open, recursive); });
        }
        forNode.open = open;
        this.node.click(forNode);
    };
    NavigatorNodeComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.node.destroy();
    };
    NavigatorNodeComponent.prototype.expandParentIfActive = function () {
        if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
            this.parentNode.expandCollapse(true);
        }
    };
    NavigatorNodeComponent.prototype.updateIcon = function () {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    };
    NavigatorNodeComponent.prototype.updateIconComponent = function () {
        var componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        var iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        var componentRef = this.iconSlot.createComponent(iconComponentFactory);
        componentRef.instance.node = this.node;
    };
    NavigatorNodeComponent.prototype.updateIconTemplate = function () {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate);
    };
    var NavigatorNodeComponent_1;
    NavigatorNodeComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: NavigatorService }
    ]; };
    __decorate([
        ViewChild('icon', { read: ViewContainerRef, static: false })
    ], NavigatorNodeComponent.prototype, "iconSlot", void 0);
    __decorate([
        Input()
    ], NavigatorNodeComponent.prototype, "node", void 0);
    __decorate([
        Input()
    ], NavigatorNodeComponent.prototype, "isRoot", void 0);
    __decorate([
        ViewChild(RouterLinkActive, { static: false })
    ], NavigatorNodeComponent.prototype, "routerLinkActive", void 0);
    __decorate([
        ViewChildren(NavigatorNodeComponent_1)
    ], NavigatorNodeComponent.prototype, "childrenNodes", void 0);
    __decorate([
        Output()
    ], NavigatorNodeComponent.prototype, "nodeClick", void 0);
    __decorate([
        ViewChild(PopoverConfirmComponent, { static: false })
    ], NavigatorNodeComponent.prototype, "confirm", void 0);
    NavigatorNodeComponent = NavigatorNodeComponent_1 = __decorate([
        Component({
            selector: 'c8y-navigator-node-display',
            template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [attr.id]=\"isRoot ? node.id : undefined\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node-display\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node-display>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"fa-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div (click)=\"click('icon', $event)\">\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
        })
    ], NavigatorNodeComponent);
    return NavigatorNodeComponent;
}());

var RightDrawerComponent = /** @class */ (function () {
    function RightDrawerComponent() {
        this.quickLinks = [];
        this.helpAndSupport = [];
    }
    Object.defineProperty(RightDrawerComponent.prototype, "_quickLinks", {
        set: function (data) {
            if (data) {
                this.quickLinks = data.filter(function (d) { return d.type === 'quicklink'; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RightDrawerComponent.prototype, "_helpAndSupport", {
        set: function (data) {
            if (data) {
                this.helpAndSupport = data.filter(function (d) { return d.type === 'doc'; });
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('quickLinks')
    ], RightDrawerComponent.prototype, "_quickLinks", null);
    __decorate([
        Input('helpAndSupport')
    ], RightDrawerComponent.prototype, "_helpAndSupport", null);
    __decorate([
        Input()
    ], RightDrawerComponent.prototype, "app", void 0);
    RightDrawerComponent = __decorate([
        Component({
            selector: 'c8y-right-drawer',
            template: "<div class=\"c8y-right-drawer\">\n\n  <div class=\"summary\">\n    <h4 class=\"text-light\">{{'Welcome to' | translate}} {{app | humanizeAppName | async}}</h4>\n  </div>\n\n  <div *ngIf=\"quickLinks.length\">\n    <div class=\"legend form-block\" translate>Quick links</div>\n    <div class=\"quick-links-drawer\">\n      <ng-container *ngFor=\"let quickLink of quickLinks\">\n        <a class=\"quick-link\"\n          [href]=\"quickLink.url || '#'\"\n          (click)=\"quickLink.click && $event.preventDefault(); quickLink.click();\">\n          <h2 *ngIf=\"quickLink.icon\"><i class=\"{{quickLink.icon}}\"></i></h2>\n          <img \n            *ngIf=\"quickLink.iconSrc\" \n            [src]=\"quickLink.iconSrc\" \n            style=\"max-width:50px;\" \n            class=\"img-responsive center-block\"\n            onerror=\"this.style.display = 'none'\">\n          {{quickLink.label | translate}}\n        </a>\n      </ng-container>\n    </div>\n  </div>\n\n  <div *ngIf=\"helpAndSupport.length\">\n    <div class=\"legend form-block top-m-lg\" translate>Help &amp; support</div>\n    <div class=\"help-support\" *ngFor=\"let link of helpAndSupport\">\n      <a class=\"help-and-support-link text-truncate\" target=\"_blank\" rel=\"noopener noreferrer\" [href]=\"link.url\">\n        <i [c8yIcon]=\"link.icon\"></i>\n        <span title=\"{{link.label | translate}}\" style=\"display: inline;\">{{link.label | translate}}</span>\n      </a>\n    </div>\n  </div>\n\n</div>\n"
        })
    ], RightDrawerComponent);
    return RightDrawerComponent;
}());

var TitleOutletComponent = /** @class */ (function () {
    function TitleOutletComponent(headerService, element, zone) {
        var _this = this;
        this.headerService = headerService;
        this.element = element;
        this.zone = zone;
        this.title = undefined;
        this.pageTitleUpdate = true;
        var title$ = this.headerService.map(function (state) { return state.title; });
        title$.subscribe(function (title) { return (_this.title = title); });
        var pageTitleUpdate$ = this.headerService.map(function (state) { return state.pageTitleUpdate; });
        pageTitleUpdate$.subscribe(function (pageTitleUpdate) { return (_this.pageTitleUpdate = pageTitleUpdate); });
        this.zone.runOutsideAngular(function () {
            _this.headerService.state$.pipe(debounceTime(100), filter(function (state) { return state.pageTitleUpdate; }), debounceTime(100), map(function () { return _this.element.nativeElement.querySelector('h1'); }), filter(function (el) { return el !== null; }), map(function (el) { return el.innerText; }), filter(Boolean))
                .subscribe(function (title) { return headerService.changePageTitle(title); });
        });
    }
    TitleOutletComponent.ctorParameters = function () { return [
        { type: HeaderService },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    TitleOutletComponent = __decorate([
        Component({
            selector: 'c8y-title-outlet',
            template: "<div class=\"c8y-ui-title\">\n  <div class=\"title\" *c8yOutlet=\"title\"></div>\n</div>\n"
        })
    ], TitleOutletComponent);
    return TitleOutletComponent;
}());

var TitleComponent = /** @class */ (function () {
    function TitleComponent(headerService) {
        this.headerService = headerService;
        this.pageTitleUpdate = true;
    }
    TitleComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.viewInitTimeout = setTimeout(function () { return _this.headerService.changeTitle(_this.template, _this.pageTitleUpdate); });
    };
    TitleComponent.prototype.ngOnDestroy = function () {
        if (this.headerService.state.title === this.template) {
            clearTimeout(this.viewInitTimeout);
            this.headerService.changeTitle();
        }
    };
    TitleComponent.ctorParameters = function () { return [
        { type: HeaderService }
    ]; };
    __decorate([
        Input()
    ], TitleComponent.prototype, "pageTitleUpdate", void 0);
    __decorate([
        ViewChild('template', { static: true })
    ], TitleComponent.prototype, "template", void 0);
    TitleComponent = __decorate([
        Component({
            selector: 'c8y-title',
            template: "<ng-template #template>\n  <h1 class=\"text-truncate\">\n    <ng-content></ng-content>\n  </h1>\n</ng-template>\n\n"
        })
    ], TitleComponent);
    return TitleComponent;
}());

/**
 * A hook to use for Multi Provider extension.
 */
var HOOK_SEARCH = new InjectionToken('SearchFactory');
/**
 * A service which defines the dearch function.
 */
var SearchService = /** @class */ (function (_super) {
    __extends(SearchService, _super);
    function SearchService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_SEARCH, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (items) { return sortByPriority(items); }), shareReplay(1));
        return _this;
    }
    /**
     * Refresh the extension factories
     */
    SearchService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(SearchService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    SearchService.prototype.add = function (item) {
        this.state.add(item);
        this.emitNewState();
    };
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    SearchService.prototype.remove = function (item) {
        this.state.delete(item);
        this.emitNewState();
    };
    SearchService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    SearchService.ngInjectableDef = ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: SearchService, providedIn: "root" });
    SearchService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], SearchService);
    return SearchService;
}(StateService));

var UserMenuService = /** @class */ (function (_super) {
    __extends(UserMenuService, _super);
    function UserMenuService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state$ = new BehaviorSubject({
            userMenuItems: new Set()
        });
        return _this;
    }
    Object.defineProperty(UserMenuService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new item to the search in the header.
     * @param item The item to add.
     */
    UserMenuService.prototype.add = function (item) {
        this.state.userMenuItems.add(item);
        this.emitNewState();
    };
    /**
     * Removes an search from the header.
     * @param item The item to remove.
     */
    UserMenuService.prototype.remove = function (item) {
        this.state.userMenuItems.delete(item);
        this.emitNewState();
    };
    UserMenuService.ngInjectableDef = ɵɵdefineInjectable({ factory: function UserMenuService_Factory() { return new UserMenuService(); }, token: UserMenuService, providedIn: "root" });
    UserMenuService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], UserMenuService);
    return UserMenuService;
}(StateService));

var documentationItems = [
    {
        icon: 'c8y-c8y-data',
        label: gettext('Concepts guide`KEEP_ORIGINAL`'),
        url: '/concepts/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-user',
        label: gettext('User guide`KEEP_ORIGINAL`'),
        url: '/users-guide/getting-started',
        type: 'doc'
    },
    {
        icon: 'c8y-device-management',
        label: gettext('Device guides`KEEP_ORIGINAL`'),
        url: '/devices/overview',
        type: 'doc'
    },
    {
        icon: 'c8y-book',
        label: gettext('Cumulocity IoT Edge`KEEP_ORIGINAL`'),
        url: '/edge/overview',
        type: 'doc'
    },
    {
        icon: 'c8y-tools',
        label: gettext('Microservice SDK guide`KEEP_ORIGINAL`'),
        url: '/microservice-sdk/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-tools',
        label: gettext('Device SDK guide`KEEP_ORIGINAL`'),
        url: '/device-sdk/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-smart-rest',
        label: gettext('Web SDK guide`KEEP_ORIGINAL`'),
        url: '/web/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-data-explorer',
        label: gettext('Streaming analytics guide`KEEP_ORIGINAL`'),
        url: '/apama/introduction',
        type: 'doc'
    },
    {
        icon: 'c8y-bookmark',
        label: gettext('Reference guide`KEEP_ORIGINAL`'),
        url: '/reference/rest-implementation',
        type: 'doc'
    },
    {
        icon: 'gavel',
        label: gettext('Legal notices'),
        url: 'https://documentation.softwareag.com/legal/',
        type: 'doc'
    }
];

var HOOK_DOCS = new InjectionToken('Hook docs');

var DocsService = /** @class */ (function () {
    function DocsService(options, app, factories, router) {
        if (factories === void 0) { factories = []; }
        this.options = options;
        this.app = app;
        if (!factories) {
            factories = [];
        }
        factories.push(this);
        var refreshTrigger = this.app.map(function (_a) {
            var supportUrl = _a.supportUrl;
            return supportUrl;
        });
        this.items$ = fromTrigger(router, refreshTrigger, factories).pipe(startWith([]), shareReplay(1));
    }
    DocsService.prototype.getBaseUrl = function () {
        return this.options.get('docsBaseUrl', 'https://www.cumulocity.com/guides');
    };
    Object.defineProperty(DocsService.prototype, "templateStr", {
        get: function () {
            return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
        },
        enumerable: true,
        configurable: true
    });
    DocsService.prototype.getUserGuideLink = function (link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    };
    DocsService.prototype.list = function () {
        return this.items$
            .pipe(filter(function (i) { return !!i.length; }), first())
            .toPromise();
    };
    DocsService.prototype.refresh = function () {
        // no op
    };
    DocsService.prototype.get = function () {
        var _this = this;
        // use the function as a factory
        var _a = this.options.get('docs', {}), links = _a.links, noDefault = _a.noDefault, _b = _a.excludeDefault, excludeDefault = _b === void 0 ? [] : _b;
        var supportUrl = this.app.state.supportUrl;
        var staticLinks = noDefault
            ? []
            : documentationItems
                .map(function (item) { return (__assign({}, item, { url: _this.getUserGuideLink(item.url) })); })
                .filter(function (_a) {
                var url = _a.url;
                return !excludeDefault.some(function (e) { return new RegExp(e).test(url); });
            });
        if (links) {
            // backwards compatibility
            links.map(function (lnk) {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    };
    DocsService.prototype.getLink = function (templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    };
    DocsService.prototype.prefixWithSlash = function (partialLink) {
        if (partialLink === void 0) { partialLink = ''; }
        var shouldPrefix = !(partialLink && /^\//.test(partialLink));
        var prefix = shouldPrefix ? '/' : '';
        return "" + prefix + partialLink;
    };
    DocsService.ctorParameters = function () { return [
        { type: OptionsService },
        { type: AppStateService },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DOCS,] }] },
        { type: Router }
    ]; };
    DocsService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(ɵɵinject(OptionsService), ɵɵinject(AppStateService), ɵɵinject(HOOK_DOCS, 8), ɵɵinject(Router)); }, token: DocsService, providedIn: "root" });
    DocsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(2, Optional()), __param(2, Inject(HOOK_DOCS))
    ], DocsService);
    return DocsService;
}());

var HeaderBarComponent = /** @class */ (function () {
    function HeaderBarComponent(headerService, actionService, breadcrumbService, searchService, appState, userMenuService, docs) {
        this.headerService = headerService;
        this.actionService = actionService;
        this.breadcrumbService = breadcrumbService;
        this.searchService = searchService;
        this.appState = appState;
        this.userMenuService = userMenuService;
        this.docs = docs;
        this.canToggle$ = this.headerService.hasItemsInNavigator$;
        this.appState$ = this.appState.state$;
        this.drawerOpen = false;
        this.headerOpen = false;
    }
    HeaderBarComponent.prototype.ngAfterViewInit = function () {
        this.headerService.verifyIfNavOpen();
    };
    HeaderBarComponent.prototype.toggle = function () {
        this.headerOpen = !this.headerOpen;
    };
    HeaderBarComponent.ctorParameters = function () { return [
        { type: HeaderService },
        { type: ActionService },
        { type: BreadcrumbService },
        { type: SearchService },
        { type: AppStateService },
        { type: UserMenuService },
        { type: DocsService }
    ]; };
    HeaderBarComponent = __decorate([
        Component({
            selector: 'c8y-header-bar',
            template: "<div\n  class=\"app-main-header\"\n  [ngClass]=\"{\n    open: headerService.navigatorOpen$ | async,\n    drawerOpen: drawerOpen\n  }\"\n>\n  <div class=\"header-bar\">\n    <button\n      *ngIf=\"canToggle$ | async\"\n      type=\"button\"\n      class=\"navigator-toggle main-header-button\"\n      title=\"{{ 'Toggle navigator' | translate }}\"\n      (click)=\"headerService.toggleNavigator()\"\n    >\n      <i [c8yIcon]=\"'angle-double-right'\"></i>\n    </button>\n    <div class=\"app-view\">\n      <c8y-app-icon\n        [name]=\"(appState$ | async).app.name\"\n        [contextPath]=\"(appState$ | async).app.contextPath\"\n      ></c8y-app-icon>\n\n      <span class=\"page-header\">\n        <c8y-title-outlet></c8y-title-outlet>\n        <c8y-breadcrumb-outlet\n          [breadcrumbs]=\"breadcrumbService.items$ | async\"\n          class=\"app-breadcrumbs\"\n        ></c8y-breadcrumb-outlet>\n      </span>\n    </div>\n    <c8y-search-outlet\n      title=\"{{ 'Search' | translate }}\"\n      [search]=\"searchService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-search-outlet>\n    <c8y-action-outlet\n      title=\"{{ 'Add' | translate }}\"\n      [items]=\"actionService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-action-outlet>\n    <c8y-app-switcher\n      title=\"{{ 'Application switcher' | translate }}\"\n      class=\"main-header-item\"\n    ></c8y-app-switcher>\n    <c8y-user-menu-outlet\n      [items]=\"(userMenuService.state$ | async).userMenuItems\"\n      class=\"main-header-item\"\n    ></c8y-user-menu-outlet>\n\n    <button\n      title=\"{{ 'Toggle side drawer' | translate }}\"\n      class=\"drawer-toggle main-header-button\"\n      *ngIf=\"(appState$ | async).showRightDrawer\"\n      (click)=\"drawerOpen = !drawerOpen\"\n    >\n      <i [c8yIcon]=\"'angle-double-left'\"></i>\n    </button>\n  </div>\n  <div class=\"head-toggler\">\n    <button title=\"{{ 'Toggle' | translate }}\" type=\"button\" (click)=\"toggle()\">\n      <i [c8yIcon]=\"'angle-double-right'\"></i>\n    </button>\n  </div>\n  <c8y-right-drawer\n    *ngIf=\"(appState$ | async).showRightDrawer\"\n    [app]=\"(appState$ | async).app\"\n    [quickLinks]=\"docs.items$ | async\"\n    [helpAndSupport]=\"docs.items$ | async\"\n  >\n  </c8y-right-drawer>\n  <div class=\"loading-bar\" [ngClass]=\"{ active: (appState$ | async).isLoading }\"></div>\n</div>\n"
        })
    ], HeaderBarComponent);
    return HeaderBarComponent;
}());

var AppSwitcherComponent = /** @class */ (function () {
    function AppSwitcherComponent(ui, applications) {
        var _this = this;
        this.ui = ui;
        this.applications = applications;
        var _a = this.ui, currentUser = _a.currentUser, currentTenant = _a.currentTenant;
        combineLatest(currentUser, currentTenant)
            .pipe(first())
            .subscribe(function (_a) {
            var _b = __read(_a, 2), user = _b[0], tenant = _b[1];
            _this.tenant = tenant;
            _this.listAppsForUser(user);
        });
    }
    Object.defineProperty(AppSwitcherComponent.prototype, "hideCloudApps", {
        get: function () {
            return false; // this should be configurable from outside
        },
        enumerable: true,
        configurable: true
    });
    AppSwitcherComponent.prototype.isActive = function (app) {
        return app.contextPath === this.ui.state.app.contextPath;
    };
    AppSwitcherComponent.prototype.getHref = function (app) {
        return this.applications.getHref(app);
    };
    AppSwitcherComponent.prototype.listAppsForUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.applications.listByUser(user, { pageSize: 1000 })];
                    case 1:
                        data = (_a.sent()).data;
                        this.apps = this.orderApps(this.filterApps(data));
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AppSwitcherComponent.prototype.filterApps = function (apps) {
        apps = this.filterVisible(apps);
        apps = this.filterCloud(apps);
        apps = this.filterDuplicates(apps);
        return apps;
    };
    AppSwitcherComponent.prototype.filterVisible = function (apps) {
        var visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        return apps.filter(function (app) {
            return includes(visibleApplicationTypes, app.type) &&
                !app.noAppSwitcher &&
                !get(app, 'manifest.noAppSwitcher');
        });
    };
    AppSwitcherComponent.prototype.filterCloud = function (apps) {
        var hideCloudApps = this.hideCloudApps;
        var filterFn = function (app) { return !!app.cloud; };
        if (!hideCloudApps) {
            this.oneCloudApps = this.orderApps(apps.filter(filterFn));
        }
        return apps.filter(function (app) { return !filterFn(app); });
    };
    AppSwitcherComponent.prototype.filterDuplicates = function (apps) {
        var _this = this;
        // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
        var filterFn = function (app) {
            return !apps.some(function (otherApp) {
                return app !== otherApp &&
                    (app.contextPath && app.contextPath === otherApp.contextPath) &&
                    app.owner.tenant.id !== _this.tenant.name;
            });
        };
        return apps.filter(filterFn);
    };
    AppSwitcherComponent.prototype.orderApps = function (apps) {
        return orderBy(apps, function (_a) {
            var name = _a.name;
            return name.toLowerCase();
        });
    };
    AppSwitcherComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: ApplicationService }
    ]; };
    AppSwitcherComponent = __decorate([
        Component({
            selector: 'c8y-app-switcher',
            template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n  >\n    <i class=\"fa-2x fa fw fa-th\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
        })
    ], AppSwitcherComponent);
    return AppSwitcherComponent;
}());

var AppIconComponent = /** @class */ (function () {
    function AppIconComponent(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    AppIconComponent.prototype.ngOnChanges = function (changes) {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        var iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.model.appIcon,
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(function (c) { return !!c; });
        this.model.appNameAbbr = this.name.substr(0, 2);
    };
    AppIconComponent.prototype.findStaticIcon = function () {
        var contextPath = this.contextPath || this.name;
        var appContextPathNormalized = find$1(keys(this.c8yAppIconsList), function (cp) {
            return contextPath.indexOf(cp) > -1;
        });
        var appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? "c8y-icon-" + appIcon : undefined;
    };
    AppIconComponent.prototype.iconFromAppDefinition = function () {
        var app = this.app || this.options;
        var iconClassProperty = ['icon', 'class'];
        var iconClass = get(app, iconClassProperty) || get(app, __spread(['manifest'], iconClassProperty));
        return iconClass;
    };
    AppIconComponent.prototype.iconUrlFromAppDefinition = function () {
        var app = this.app || this.options;
        var iconUrlProperty = ['icon', 'url'];
        var iconUrl = get(app, iconUrlProperty) || get(app, __spread(['manifest'], iconUrlProperty));
        return iconUrl;
    };
    AppIconComponent.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    __decorate([
        Input()
    ], AppIconComponent.prototype, "contextPath", void 0);
    __decorate([
        Input()
    ], AppIconComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], AppIconComponent.prototype, "app", void 0);
    AppIconComponent = __decorate([
        Component({
            selector: 'c8y-app-icon',
            template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
            host: { class: 'c8y-app-icon' }
        })
    ], AppIconComponent);
    return AppIconComponent;
}());

var NavigatorOutletComponent = /** @class */ (function () {
    function NavigatorOutletComponent(headerService) {
        this.headerService = headerService;
        this.open = true;
        this.isShown$ = new BehaviorSubject(false);
    }
    NavigatorOutletComponent.prototype.ngOnChanges = function () {
        this.isShown$.next(this.nodes && this.nodes.length > 0);
    };
    /**
     * Closes the navigator on click if the window is small.
     */
    NavigatorOutletComponent.prototype.collapseNavigator = function (from) {
        if (from === 'link' && !this.headerService.largeWidth) {
            this.headerService.closeNavigator();
        }
    };
    NavigatorOutletComponent.prototype.trackByPathOrLabel = function (index, node) {
        return node.path ? node.path : node.label;
    };
    NavigatorOutletComponent.ctorParameters = function () { return [
        { type: HeaderService }
    ]; };
    __decorate([
        Input()
    ], NavigatorOutletComponent.prototype, "nodes", void 0);
    __decorate([
        Input()
    ], NavigatorOutletComponent.prototype, "open", void 0);
    NavigatorOutletComponent = __decorate([
        Component({
            selector: 'c8y-navigator-outlet, c8y-ui-navigator',
            template: "<nav class=\"navigator\" *ngIf=\"isShown$ | async\" [ngClass]=\"{ open: open }\">\n  <ng-content select=\".navigator-slot-top\"></ng-content>\n  <ul class=\"navigatorContent\">\n    <c8y-navigator-node-display (nodeClick)=\"collapseNavigator($event)\" [node]=\"node\" *ngFor=\"let node of nodes trackBy trackByPathOrLabel\" [isRoot]=\"true\"></c8y-navigator-node-display>\n  </ul>\n  <ng-content select=\".navigator-slot-bottom\"></ng-content>\n</nav>\n"
        })
    ], NavigatorOutletComponent);
    return NavigatorOutletComponent;
}());

var _a, _b, _c, _d, _e;
var Status;
(function (Status) {
    Status["SUCCESS"] = "success";
    Status["WARNING"] = "warning";
    Status["DANGER"] = "danger";
    Status["INFO"] = "info";
})(Status || (Status = {}));
var statusIcons = (_a = {},
    _a[Status.SUCCESS] = 'check-circle',
    _a[Status.WARNING] = 'exclamation-triangle',
    _a[Status.DANGER] = 'exclamation-circle',
    _a[Status.INFO] = 'info-circle',
    _a);
var statusClasses = (_b = {},
    _b[Status.SUCCESS] = "text-" + Status.SUCCESS,
    _b[Status.WARNING] = "text-" + Status.WARNING,
    _b[Status.DANGER] = "text-" + Status.DANGER,
    _b[Status.INFO] = "text-" + Status.INFO,
    _b);
var statusAlert = (_c = {},
    _c[Status.SUCCESS] = "alert-" + Status.SUCCESS,
    _c[Status.WARNING] = "alert-" + Status.WARNING,
    _c[Status.DANGER] = "alert-" + Status.DANGER,
    _c[Status.INFO] = "alert-" + Status.INFO,
    _c);
var operationStatusIcons = (_d = {},
    _d[OperationStatus.PENDING] = 'clock-o',
    _d[OperationStatus.EXECUTING] = 'refresh',
    _d[OperationStatus.SUCCESSFUL] = 'check-circle',
    _d[OperationStatus.FAILED] = 'exclamation-circle',
    _d);
var operationStatusClasses = (_e = {},
    _e[OperationStatus.PENDING] = 'text-info',
    _e[OperationStatus.EXECUTING] = 'text-info',
    _e[OperationStatus.SUCCESSFUL] = 'text-success',
    _e[OperationStatus.FAILED] = 'text-danger',
    _e);

var ConfirmModalComponent = /** @class */ (function () {
    function ConfirmModalComponent(modal) {
        var _this = this;
        this.modal = modal;
        this.status = Status.INFO;
        this._labels = {
            ok: 'OK',
            cancel: 'Cancel'
        };
        this.result = new Promise(function (resolve, reject) {
            _this.dismiss = function () {
                reject();
                _this.modal.hide();
            };
            _this.close = function () {
                resolve(true);
                _this.modal.hide();
            };
        });
    }
    Object.defineProperty(ConfirmModalComponent.prototype, "labels", {
        get: function () { return this._labels; },
        set: function (labels) {
            var _a = labels || {}, _b = _a.ok, ok = _b === void 0 ? 'OK' : _b, _c = _a.cancel, cancel = _c === void 0 ? 'Cancel' : _c;
            this._labels = { ok: ok, cancel: cancel };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmModalComponent.prototype, "classIcon", {
        get: function () {
            return "fa-" + statusIcons[this.status];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmModalComponent.prototype, "classAlert", {
        get: function () {
            return statusAlert[this.status];
        },
        enumerable: true,
        configurable: true
    });
    ConfirmModalComponent.prototype.ngOnDestroy = function () {
        this.dismiss();
    };
    ConfirmModalComponent.ctorParameters = function () { return [
        { type: BsModalRef }
    ]; };
    __decorate([
        Input()
    ], ConfirmModalComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], ConfirmModalComponent.prototype, "body", void 0);
    __decorate([
        Input()
    ], ConfirmModalComponent.prototype, "status", void 0);
    __decorate([
        Input()
    ], ConfirmModalComponent.prototype, "labels", null);
    ConfirmModalComponent = __decorate([
        Component({
            selector: 'c8y-confirm-modal',
            template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"bottom-m-md\" *ngIf=\"title\">\n    <i class=\"fa fw\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-wrap\" style=\"word-wrap:break-word;\">{{ body | translate }}</p>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button title=\"{{ labels.ok | translate }}\" class=\"btn btn-primary\" (click)=\"close()\">\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], ConfirmModalComponent);
    return ConfirmModalComponent;
}());

/**
 * C8y modal component.
 * ## Example:
 *
 * Creating custom modal:
 * ```typescript
 *  import { Component } from "@angular/core";
 *  import { Subject } from 'rxjs';
 *
 * @Component({
 *  selector: "my-modal",
 *  template: `
 *    <c8y-modal title="CustomTitle"
 *      (onClose)="onClose($event)"
 *      (onDismiss)="onDismiss($event)"
 *      [labels]="labels"
 *      [disabled]="true" <- will disable ok button
 *      >
 *        <span>I am body of modal</span>
 *        <span>For simple string use body="string"</span>
 *    </c8y-modal>`
 * })
 *
 * export class MyModalComponent {
 *
 *  closeSubject: Subject<boolean> = new Subject();
 *  labels : ModalLabels = {ok: "customOK", cancel: "customCancel"};
 *
 *  onDismiss(event){
 *    this.closeSubject.next(false);
 *  }
 *
 *  onClose(event) {
 *    this.closeSubject.next(true);
 *  }
 * }
 * ```
 * Showing modal:
 * ```typescript
 * import { BsModalService } from "ngx-bootstrap/modal";
 *
 * constructor(
 *  public bsModalService: BsModalService,
 * ) {}
 *
 * showModal() {
 *  const modalRef = this.bsModalService.show(MyModalComponent);
 *  modalRef.content.closeSubject.subscribe(result => {
 *    console.log('results:', result);
 *  });
 * }
 * ```
 */
var ModalComponent = /** @class */ (function () {
    function ModalComponent(modal) {
        this.modal = modal;
        this.onDismiss = new EventEmitter();
        this.onClose = new EventEmitter();
        this.disabled = false;
        this.customFooter = false;
        this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
    }
    Object.defineProperty(ModalComponent.prototype, "labels", {
        get: function () { return this._labels; },
        set: function (_a) {
            var ok = _a.ok, cancel = _a.cancel;
            this._labels = { ok: ok, cancel: cancel };
        },
        enumerable: true,
        configurable: true
    });
    ModalComponent.prototype._dismiss = function () {
        var _this = this;
        var fn = this.dismiss;
        if (!fn && this.modal) {
            fn = function () { return _this.modal.hide(); };
        }
        if (fn) {
            fn();
        }
        this.onDismiss.emit(true);
    };
    ModalComponent.prototype._close = function () {
        var _this = this;
        var fn = this.close;
        if (!fn && this.modal) {
            fn = function () { return _this.modal.hide(); };
        }
        if (fn) {
            fn();
        }
        this.onClose.emit(true);
    };
    ModalComponent.prototype.onEnterKeyDown = function (event) {
        var hasOnlyOneButton = isEmpty$1(this.labels.ok) !== isEmpty$1(this.labels.cancel);
        var isCancelClickable = !this.customFooter && this.labels.cancel;
        var isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
        if (hasOnlyOneButton && isCancelClickable) {
            this._dismiss();
        }
        if (hasOnlyOneButton && isOkClickable) {
            this._close();
        }
    };
    ModalComponent.ctorParameters = function () { return [
        { type: BsModalRef, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Output()
    ], ModalComponent.prototype, "onDismiss", void 0);
    __decorate([
        Output()
    ], ModalComponent.prototype, "onClose", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "close", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "dismiss", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "body", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "customFooter", void 0);
    __decorate([
        Input()
    ], ModalComponent.prototype, "labels", null);
    __decorate([
        HostListener('document:keydown.enter', ['$event'])
    ], ModalComponent.prototype, "onEnterKeyDown", null);
    ModalComponent = __decorate([
        Component({
            selector: 'c8y-modal',
            template: "<div class=\"modal-header\">\n  <ng-content select=\"[c8y-modal-title]\"></ng-content>\n  <h3 [hidden]=\"!title\">{{title | translate}}</h3>\n</div>\n<div class=\"modal-body\">\n  <p\n    [hidden]=\"!title\"\n    class=\"text-center text-wrap\"\n    style=\"word-wrap:break-word;\"\n  >{{body}}</p>\n  <ng-content></ng-content>\n</div>\n<div class=\"modal-footer\" *ngIf=\"!customFooter\">\n  <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n  <button\n    title=\"{{ labels.cancel | translate }}\" \n    *ngIf=\"labels.cancel\"\n    class=\"btn btn-default\"\n    (click)=\"_dismiss()\"\n  >{{labels.cancel | translate}}</button>\n  <button\n    title=\"{{ labels.ok | translate }}\" \n    *ngIf=\"labels.ok\"\n    class=\"btn btn-primary\"\n    (click)=\"_close()\"\n    [disabled]=\"disabled\"\n  >{{labels.ok | translate}}</button>\n</div>\n"
        }),
        __param(0, Optional())
    ], ModalComponent);
    return ModalComponent;
}());

/**
 * Service to shiow a modal.
 */
var ModalService = /** @class */ (function () {
    function ModalService(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     */
    ModalService.prototype.confirm = function (title, body, status, labels) {
        if (status === void 0) { status = Status.INFO; }
        if (labels === void 0) { labels = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var modalLabels, modalRef;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
                        modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: modalLabels, status: status } });
                        return [4 /*yield*/, modalRef.content.result];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    ModalService.prototype.acknowledge = function (title, body, status, acknowledgeLabel) {
        if (status === void 0) { status = Status.INFO; }
        if (acknowledgeLabel === void 0) { acknowledgeLabel = gettext('Confirm'); }
        return __awaiter(this, void 0, void 0, function () {
            var labels, modalRef;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        labels = { ok: acknowledgeLabel, cancel: null };
                        modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: labels, status: status } });
                        return [4 /*yield*/, modalRef.content.result];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModalService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    ModalService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(ɵɵinject(BsModalService)); }, token: ModalService, providedIn: "root" });
    ModalService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ModalService);
    return ModalService;
}());

/**
 * The angular module definition for modal.
 * @exports ConfirmModalComponent
 * @exports ModalComponent
 * @exports PopoverConfirmComponent
 */
var ModalModule = /** @class */ (function () {
    function ModalModule() {
    }
    ModalModule = __decorate([
        NgModule({
            imports: [
                ModalModule$1.forRoot(),
                CommonModule,
                PopoverModule.forRoot()
            ],
            exports: [
                ConfirmModalComponent,
                ModalComponent,
                PopoverConfirmComponent
            ],
            declarations: [
                ConfirmModalComponent,
                ModalComponent,
                PopoverConfirmComponent
            ],
            providers: [
                ModalService
            ],
            entryComponents: [
                ConfirmModalComponent
            ]
        })
    ], ModalModule);
    return ModalModule;
}());

/**
 * The angular module definition for the navigator.
 * @exports NavigatorOutletComponent
 * @exports NavigatorItemComponent
 */
var NavigatorModule = /** @class */ (function () {
    function NavigatorModule() {
    }
    NavigatorModule = __decorate([
        NgModule({
            declarations: [
                NavigatorOutletComponent,
                NavigatorNodeComponent,
                NavigatorItemComponent,
                NavigatorIconComponent
            ],
            imports: [
                RouterModule$1,
                CollapseModule.forRoot(),
                CommonModule,
                ModalModule
            ],
            exports: [
                NavigatorOutletComponent,
                NavigatorItemComponent
            ],
            entryComponents: [
                NavigatorIconComponent
            ]
        })
    ], NavigatorModule);
    return NavigatorModule;
}());

var CookieBannerService = /** @class */ (function () {
    function CookieBannerService(options) {
        this.options = options;
        this.STORAGE_KEY = 'acceptCookieNotice';
        this.COOKIE_BANNER = 'cookieBanner';
        this.isCookieBannerShowed$ = new Subject();
        this.cookieDescriptions = {
            required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
            functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
            marketing: gettext('These cookies are used to target advertising to a user.')
        };
    }
    CookieBannerService.prototype.getCookiePreferencesConfig = function () {
        var settings = this.getCookieBannerSettings();
        return settings && settings.configuration;
    };
    CookieBannerService.prototype.getCookieBannerSettings = function () {
        return this.options.get(this.COOKIE_BANNER) || {};
    };
    CookieBannerService.prototype.setCookies = function (cookiePreferences) {
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiePreferences));
    };
    CookieBannerService.prototype.shouldShowCookieBanner = function () {
        var settings = this.getCookieBannerSettings();
        return !!settings.cookieBannerText && !this.getUserCookiePreferences();
    };
    CookieBannerService.prototype.getUserCookiePreferences = function () {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
    };
    CookieBannerService.prototype.isConfigCookiePreferencesDefined = function () {
        return !!this.getCookiePreferencesConfig();
    };
    CookieBannerService.prototype.isFunctionalCookieDisabled = function () {
        var functional = (this.getUserCookiePreferences() || {}).functional;
        /**
         * We want this check, as we should stop loading Gainsight tag only when functional cookie is explicitly set to false.
         * In the USA there is no need for the functional cookies when tracking users.
         * This is why we want to allow undefined to pass the check.
         * @ignore
         */
        return functional === false;
    };
    CookieBannerService.prototype.getCookieDescription = function (cookieType) {
        return this.cookieDescriptions[cookieType];
    };
    CookieBannerService.prototype.transformCookiePreferencesToList = function (cookiePreferences) {
        return Object.entries(cookiePreferences).map(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            var isReadonly = name === 'required';
            return { name: name, value: value, isReadonly: isReadonly };
        });
    };
    CookieBannerService.prototype.transformCookiePreferencesListToCookiePreferences = function (cookiePreferencesList) {
        return cookiePreferencesList.reduce(function (cookiePref, cookie) {
            var key = cookie.name;
            cookiePref[key] = cookie.value;
            return cookiePref;
        }, {});
    };
    CookieBannerService.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    CookieBannerService.ngInjectableDef = ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(ɵɵinject(OptionsService)); }, token: CookieBannerService, providedIn: "root" });
    CookieBannerService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], CookieBannerService);
    return CookieBannerService;
}());

/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
var GainsightService = /** @class */ (function () {
    function GainsightService(appState, options, cookieBannerService) {
        this.appState = appState;
        this.options = options;
        this.cookieBannerService = cookieBannerService;
        /**
         * A subject that emits the tag function as soon as a new tag is set.
         */
        this.tagFunction$ = new BehaviorSubject(null);
        this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
        this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
        this.SCRIPT_EXECUTION_WAIT_TIME = 500;
        this.OPTIONS_KEY_CATEGORY = 'gainsight';
        this.OPTIONS_KEY_NAME = 'api.key';
    }
    Object.defineProperty(GainsightService.prototype, "tagFunction", {
        /**
         * Returns the tag global function which can be used to identify user
         * or add special events.
         */
        get: function () {
            return window[this.GAINSIGHT_GLOBAL_SCOPE];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param accountId The account where the user is registered. Could be the name of the tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    GainsightService.prototype.loadTag = function (accountId, identify) {
        if (identify === void 0) { identify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var scriptTag, key, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        scriptTag = document.createElement('script');
                        _a = this.options.gainsightKey;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        key = _a;
                        if (key) {
                            this.loadScriptTag(scriptTag, key);
                            combineLatest(this.appState.currentUser, fromEvent(scriptTag, 'load'), this.appState.state$.pipe(filter(function (_a) {
                                var versions = _a.versions;
                                return versions.backend;
                            }), map(function (_a) {
                                var versions = _a.versions;
                                return versions;
                            }), take(1)))
                                .pipe(delay(this.SCRIPT_EXECUTION_WAIT_TIME), filter(function (_a) {
                                var _b = __read(_a, 2), user = _b[0], scriptEvent = _b[1];
                                return !!(scriptEvent && user);
                            }))
                                .subscribe(function (_a) {
                                var _b = __read(_a, 3), user = _b[0], scriptEvent = _b[1], versions = _b[2];
                                var instanceId = _this.getInstanceIdFromUrl();
                                if (identify) {
                                    _this.identify(user, accountId, instanceId, versions.ui.ngx, versions.backend);
                                }
                                _this.tagFunction$.next(_this.tagFunction);
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Identifies the user/account at Gainsight.
     * @param userId The user id which is given to Gainsight.
     * @param accountId The account id which is given to Gainsight (e.g. the tenant name)
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    GainsightService.prototype.identify = function (user, accountId, instanceId, versionUI, versionBE) {
        var windowRef = window;
        var userId = user.id, email = user.email, userName = user.userName, phone = user.phone, firstName = user.firstName, lastName = user.lastName;
        windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
            id: userId + "_" + accountId + "_" + instanceId,
            email: email,
            userName: userName,
            firstName: firstName,
            lastName: lastName,
            versionUI: versionUI,
            versionBE: versionBE,
            userLanguage: TranslateService.defaultLang(),
            instanceId: instanceId
        }, {
            id: accountId + "_" + instanceId,
            instanceId: instanceId
        });
    };
    GainsightService.prototype.triggerEvent = function (eventName, props) {
        if (this.tagFunction && eventName) {
            eventName = eventName.replace(/ /g, '_');
            this.tagFunction('track', eventName, props);
        }
    };
    /**
     * Checks if the Gainsight's tag should be loaded.
     * Where no consent is required from the user. The decision to load Gainsight will depend on custom properties.
     * Where the user's consent is required. The decision to load Gainsight will depend on custom properties and functional cookies.
     * By default, the Gainsight's tag will be loaded.
     * @param customProperties Tenant's customProperties.
     */
    GainsightService.prototype.shouldLoadGainsightTag = function (customProperties) {
        return ((!this.cookieBannerService.isConfigCookiePreferencesDefined() &&
            !this.isGainsightDisabled(customProperties)) ||
            (!this.cookieBannerService.isFunctionalCookieDisabled() &&
                !this.isGainsightDisabled(customProperties)));
    };
    GainsightService.prototype.isGainsightDisabled = function (customProperties) {
        var gainsightEnabled = customProperties && customProperties.gainsightEnabled;
        return gainsightEnabled === false;
    };
    GainsightService.prototype.loadScriptTag = function (scriptTag, key) {
        try {
            var windowRef_1 = window;
            var firstTag = document.getElementsByTagName('script')[0];
            var protocol = location.protocol;
            var gainsightGlobalScope_1 = this.GAINSIGHT_GLOBAL_SCOPE;
            scriptTag.src = protocol + "//" + this.GAINSIGHT_URL + key;
            (windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] =
                windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] ||
                    // tslint:disable-next-line:only-arrow-functions
                    function () {
                        (windowRef_1[gainsightGlobalScope_1].q = windowRef_1[gainsightGlobalScope_1].q || []).push(arguments);
                    }),
                (windowRef_1[gainsightGlobalScope_1].p = key);
            scriptTag.async = true;
            firstTag.parentNode.insertBefore(scriptTag, firstTag);
        }
        catch (ex) {
            console.warn('Failed to load Gainsight PX', ex);
        }
    };
    GainsightService.prototype.getInstanceIdFromUrl = function () {
        var hostName = location.hostname;
        return hostName.substring(hostName.indexOf('.') + 1);
    };
    GainsightService.ctorParameters = function () { return [
        { type: AppStateService },
        { type: OptionsService },
        { type: CookieBannerService }
    ]; };
    GainsightService.ngInjectableDef = ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(ɵɵinject(AppStateService), ɵɵinject(OptionsService), ɵɵinject(CookieBannerService)); }, token: GainsightService, providedIn: "root" });
    GainsightService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], GainsightService);
    return GainsightService;
}());

var ProductExperienceDirective = /** @class */ (function () {
    function ProductExperienceDirective(gainsightService) {
        this.gainsightService = gainsightService;
    }
    ProductExperienceDirective.prototype.onClick = function () {
        if (this.actionName) {
            this.gainsightService.triggerEvent(this.actionName, this.actionData);
        }
    };
    ProductExperienceDirective.ctorParameters = function () { return [
        { type: GainsightService }
    ]; };
    __decorate([
        Input()
    ], ProductExperienceDirective.prototype, "actionName", void 0);
    __decorate([
        Input()
    ], ProductExperienceDirective.prototype, "actionData", void 0);
    __decorate([
        HostListener('click')
    ], ProductExperienceDirective.prototype, "onClick", null);
    ProductExperienceDirective = __decorate([
        Directive({
            selector: '[c8yProductExperience]'
        })
    ], ProductExperienceDirective);
    return ProductExperienceDirective;
}());

/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
var ProductExperienceModule = /** @class */ (function () {
    function ProductExperienceModule(appState, gainsightService, cookieBannerService) {
        var _this = this;
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(function (_a) {
            var _b = __read(_a, 2), currentTenant = _b[0], isCookieBannerShowed = _b[1];
            if (isCookieBannerShowed) {
                return;
            }
            var customProperties = currentTenant.customProperties, name = currentTenant.name;
            if (_this.gainsightService.shouldLoadGainsightTag(customProperties)) {
                _this.gainsightService.loadTag(name);
            }
        });
    }
    ProductExperienceModule.ctorParameters = function () { return [
        { type: AppStateService },
        { type: GainsightService },
        { type: CookieBannerService }
    ]; };
    ProductExperienceModule = __decorate([
        NgModule({
            declarations: [ProductExperienceDirective],
            exports: [ProductExperienceDirective],
            providers: [GainsightService]
        })
    ], ProductExperienceModule);
    return ProductExperienceModule;
}());

var SearchOutletComponent = /** @class */ (function () {
    function SearchOutletComponent(alertService) {
        this.alertService = alertService;
        this.search = [];
    }
    SearchOutletComponent.prototype.openSearch = function () {
        var _this = this;
        setTimeout(function () { return _this.focusInputBox(); }, 100);
    };
    SearchOutletComponent.prototype.getByPriority = function () {
        return sortBy$1(this.search, this.byPriority);
    };
    SearchOutletComponent.prototype.closeDropdown = function (dropdown) {
        dropdown.hide();
    };
    SearchOutletComponent.prototype.verifyNotEmpty = function (term) {
        if (!term || term === '') {
            this.alertService.add({ text: 'Type something to execute a search.', type: 'warning' });
        }
    };
    SearchOutletComponent.prototype.byPriority = function (item) {
        return -item.priority;
    };
    SearchOutletComponent.prototype.focusInputBox = function () {
        var elementToFocus = document.querySelector('#search-header-menu input');
        if (elementToFocus) {
            elementToFocus.focus();
        }
    };
    SearchOutletComponent.ctorParameters = function () { return [
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], SearchOutletComponent.prototype, "search", void 0);
    SearchOutletComponent = __decorate([
        Component({
            selector: 'c8y-search-outlet',
            template: "<ng-container *ngIf=\"search\">\n  <div class=\"dropdown\" dropdown #dropdown=\"bs-dropdown\" *ngFor=\"let item of getByPriority()\">\n    <button\n      title=\"{{ 'Search' | translate }}\"\n      type=\"button\"\n      class=\"main-header-button dropdown-toggle c8y-dropdown\"\n      (click)=\"openSearch()\"\n      dropdownToggle\n    >\n      <i [c8yIcon]=\"item.icon\" class=\"fa-2x\"></i>\n    </button>\n\n    <div\n      id=\"search-header-menu\"\n      class=\"search-header-menu dropdown-menu dropdown-menu-center\"\n      *dropdownMenu\n    >\n      <form\n        (ngSubmit)=\"verifyNotEmpty(item.term); item.onSearch(); closeDropdown(dropdown)\"\n        novalidate\n        #searchForm=\"ngForm\"\n      >\n        <div class=\"input-group input-group-search\" *ngIf=\"!item.template\">\n          <input\n            type=\"search\"\n            class=\"form-control input-lg\"\n            required=\"required\"\n            placeholder=\"{{ 'Search for groups or assets\u2026' | translate }}\"\n            (click)=\"$event.stopPropagation()\"\n            [(ngModel)]=\"item.term\"\n            name=\"searchTerm\"\n          />\n\n          <span class=\"input-group-btn\">\n            <button type=\"submit\" class=\"btn btn-link\" (click)=\"$event.stopPropagation()\">\n              <i [c8yIcon]=\"'arrow-right'\"></i>\n            </button>\n          </span>\n        </div>\n\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </form>\n    </div>\n  </div>\n</ng-container>\n"
        })
    ], SearchOutletComponent);
    return SearchOutletComponent;
}());

var SearchComponent = /** @class */ (function () {
    function SearchComponent(searchService) {
        this.searchService = searchService;
        this.icon = 'search';
        this.priority = 0;
        this.search = new EventEmitter();
        this.term = '';
    }
    SearchComponent.prototype.onSearch = function () {
        this.search.emit(this);
    };
    SearchComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.template = undefined;
        this.viewInitTimeout = setTimeout(function () { return _this.searchService.add(_this); });
    };
    SearchComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.searchService.remove(this);
    };
    SearchComponent.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    __decorate([
        Input()
    ], SearchComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], SearchComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], SearchComponent.prototype, "priority", void 0);
    __decorate([
        ViewChild('template', { static: false })
    ], SearchComponent.prototype, "template", void 0);
    __decorate([
        Output()
    ], SearchComponent.prototype, "search", void 0);
    __decorate([
        Input()
    ], SearchComponent.prototype, "term", void 0);
    SearchComponent = __decorate([
        Component({
            selector: 'c8y-search',
            template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
        })
    ], SearchComponent);
    return SearchComponent;
}());

var HighlightComponent = /** @class */ (function () {
    function HighlightComponent() {
        this.pattern = '';
        this.text = '';
        this.elementClass = 'text-info';
        this.highlightedText = '';
    }
    HighlightComponent.prototype.ngOnChanges = function () {
        var textNoHtml = escape$1(this.text || '');
        var patternNoHtml = escape$1(this.pattern || '');
        var patternForRegex = escapeRegExp(patternNoHtml).replace(/\\\*/g, '.*');
        this.highlightedText = textNoHtml.replace(new RegExp(patternForRegex, 'i'), "<strong class=\"" + this.elementClass + "\">$&</strong>");
    };
    __decorate([
        ViewChild('text', { read: ElementRef, static: true })
    ], HighlightComponent.prototype, "container", void 0);
    __decorate([
        Input()
    ], HighlightComponent.prototype, "pattern", void 0);
    __decorate([
        Input()
    ], HighlightComponent.prototype, "text", void 0);
    __decorate([
        Input()
    ], HighlightComponent.prototype, "elementClass", void 0);
    HighlightComponent = __decorate([
        Component({
            selector: 'c8y-highlight',
            template: '<span [innerHTML]="highlightedText"></span>'
        })
    ], HighlightComponent);
    return HighlightComponent;
}());

var SearchResultEmptyComponent = /** @class */ (function () {
    function SearchResultEmptyComponent() {
        this.NO_RESULT_FOUND = gettext('No results found.');
        this.msg = this.NO_RESULT_FOUND;
    }
    Object.defineProperty(SearchResultEmptyComponent.prototype, "_message", {
        set: function (msg) {
            if (msg && msg.length > 0) {
                this.msg = msg;
            }
            else {
                this.msg = this.NO_RESULT_FOUND;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchResultEmptyComponent.prototype, "message", {
        get: function () {
            return this.msg;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input('message')
    ], SearchResultEmptyComponent.prototype, "_message", null);
    SearchResultEmptyComponent = __decorate([
        Component({
            selector: 'c8y-search-result-empty',
            template: "<div class=\"no-results\">\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div class=\"p-t-8\">\n      <p><strong>{{ message | translate }}</strong></p>\n      <small translate>Refine your search terms.</small>\n    </div>\n  </div>\n</div>\n"
        })
    ], SearchResultEmptyComponent);
    return SearchResultEmptyComponent;
}());

/**
 * The angular module definition for the search.
 * @exports SearchComponent
 * @exports SearchOutletComponent
 * @exports HighlightComponent A component to highlight search results.
 */
var SearchModule = /** @class */ (function () {
    function SearchModule() {
    }
    SearchModule = __decorate([
        NgModule({
            declarations: [
                SearchOutletComponent,
                SearchComponent,
                HighlightComponent,
                SearchResultEmptyComponent
            ],
            imports: [
                FormsModule$1,
                BsDropdownModule,
                CommonModule,
                RouterModule$1.forChild([])
            ],
            exports: [
                SearchOutletComponent,
                SearchComponent,
                HighlightComponent,
                SearchResultEmptyComponent
            ]
        })
    ], SearchModule);
    return SearchModule;
}());

var UserMenuItemComponent = /** @class */ (function () {
    function UserMenuItemComponent(userService) {
        this.userService = userService;
        this.priority = 0;
        this.click = new EventEmitter();
    }
    UserMenuItemComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.viewInitTimeout = setTimeout(function () {
            return _this.userService.add(_this);
        });
    };
    UserMenuItemComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.userService.remove(this);
    };
    UserMenuItemComponent.prototype.onClick = function () {
        this.click.emit(this);
    };
    UserMenuItemComponent.ctorParameters = function () { return [
        { type: UserMenuService }
    ]; };
    __decorate([
        Input()
    ], UserMenuItemComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], UserMenuItemComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], UserMenuItemComponent.prototype, "link", void 0);
    __decorate([
        Input()
    ], UserMenuItemComponent.prototype, "target", void 0);
    __decorate([
        Input()
    ], UserMenuItemComponent.prototype, "priority", void 0);
    __decorate([
        ViewChild('template', { static: false })
    ], UserMenuItemComponent.prototype, "template", void 0);
    __decorate([
        Output()
    ], UserMenuItemComponent.prototype, "click", void 0);
    UserMenuItemComponent = __decorate([
        Component({
            selector: 'c8y-user-menu-item',
            template: "<ng-template #template>\n  <li (click)=\"onClick()\">\n    <a style=\"cursor: pointer\" [attr.href]=\"link\" [attr.target]=\"target\">\n      <i [c8yIcon]=\"icon\"></i>\n      {{label | translate}}\n      <ng-content></ng-content>\n    </a>\n  </li>\n</ng-template>"
        })
    ], UserMenuItemComponent);
    return UserMenuItemComponent;
}());

var UserEditModalComponent = /** @class */ (function () {
    function UserEditModalComponent(modal, user, ui, auth, client, alert, translate, userPreferences, modalService) {
        var _this = this;
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.translate = translate;
        this.userPreferences = userPreferences;
        this.modalService = modalService;
        this.loading = false;
        this.lang = this.ui.state.lang;
        this.modalService.onHide.pipe(take(1)).subscribe(function (reason) {
            if (reason !== null && _this.changedLang !== undefined) {
                _this.translate.switchToLanguage(_this.lang);
            }
        });
    }
    UserEditModalComponent.prototype.ngOnInit = function () {
        this.updateUserInAppState();
    };
    UserEditModalComponent.prototype.onDismiss = function () {
        if (this.changedLang !== undefined) {
            this.translate.switchToLanguage(this.lang);
        }
        this.modal.hide();
    };
    UserEditModalComponent.prototype.onLanguage = function (lang) {
        this.changedLang = lang;
        this.translate.switchToLanguage(this.changedLang);
    };
    UserEditModalComponent.prototype.updateAndClose = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.loading = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, 7, 8]);
                        return [4 /*yield*/, this.user.updateCurrent(user)];
                    case 2:
                        _a.sent();
                        if (user.password) {
                            this.updateCredentials(user.password);
                        }
                        return [4 /*yield*/, this.updateUserInAppState()];
                    case 3:
                        _a.sent();
                        if (!(this.changedLang && this.changedLang !== this.lang)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.persistLanguage(this.changedLang)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.modal.hide();
                        this.alert.success(gettext('User saved.'));
                        return [3 /*break*/, 8];
                    case 6:
                        e_1 = _a.sent();
                        this.alert.addServerFailure(e_1);
                        return [3 /*break*/, 8];
                    case 7:
                        this.loading = false;
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    UserEditModalComponent.prototype.persistLanguage = function (lang) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.translate.saveInLocalStorage(lang);
                this.userPreferences.set('language', lang);
                return [2 /*return*/];
            });
        });
    };
    UserEditModalComponent.prototype.updateUserInAppState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentUserResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.user.current()];
                    case 1:
                        currentUserResult = _a.sent();
                        this.ui.currentUser.next(currentUserResult.data);
                        return [2 /*return*/];
                }
            });
        });
    };
    UserEditModalComponent.prototype.updateCredentials = function (password) {
        var newCredentials = {
            password: password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    };
    UserEditModalComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: UserService },
        { type: AppStateService },
        { type: BasicAuth },
        { type: FetchClient },
        { type: AlertService },
        { type: TranslateService },
        { type: UserPreferencesService },
        { type: BsModalService }
    ]; };
    UserEditModalComponent = __decorate([
        Component({
            selector: 'c8y-user-edit-modal',
            template: "<c8y-modal\n  [customFooter]=\"true\"\n  [title]=\"'Edit user' | translate\"\n  (onDismiss)=\"onDismiss()\"\n>\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>"
        })
    ], UserEditModalComponent);
    return UserEditModalComponent;
}());

/**
 * Service to manage the login.
 */
var LoginService = /** @class */ (function () {
    function LoginService(client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, location) {
        this.client = client;
        this.basicAuth = basicAuth;
        this.cookieAuth = cookieAuth;
        this.ui = ui;
        this.user = user;
        this.tenant = tenant;
        this.realtime = realtime;
        this.alert = alert;
        this.api = api;
        this.location = location;
        this.rememberMe = false;
        this.TOKEN_KEY = '_tcy8';
        this.TFATOKEN_KEY = 'TFAToken';
        this.OAUTH2_INTERNAL_TYPE = 'OAUTH2_INTERNAL';
        this.isFirstLogin = true;
        this.GREEN_MIN_LENGTH_DEFAULT = 8;
        // tslint:disable:max-line-length
        this.ERROR_MESSAGES = {
            minlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_missmatch: gettext('Password confirmation does not match.'),
            maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
            password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
            remote_error: gettext('Server error occurred.'),
            email: gettext('Invalid email address.'),
            password_change: gettext('Your password is expired. Please set a new password.'),
            password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
            tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
            pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            pattern_newPassword: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
            international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
            phone_number_error: gettext('Could not update phone number.'),
            pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
            passwordConfirm: gettext('Password confirmation does not match.'),
            tfaExpired: gettext('Two-factor authentication token expired.')
        };
        // tslint:enable:max-line-length
        this.SUCCESS_MESSAGES = {
            password_changed: gettext('Password changed. You can now log in using new password.'),
            password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
            resend_sms: gettext('Verification code SMS resent.'),
            send_sms: gettext('Verification code SMS sent.')
        };
        this.passwordStrengthSetting = {
            enforcePasswordStrength: false,
            greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT,
            passwordStrengthValidity: false
        };
        this.localhostRegExp = new RegExp('localhost');
        this.localhostIpRegExp = new RegExp('127.0.0.1');
        this.showTenantRegExp = new RegExp('showTenant');
        this.autoLogout();
        this.initLoginOptions();
    }
    /**
     * Returns the current tenant.
     * @return The tenant name.
     */
    LoginService.prototype.getTenant = function () {
        return this.client.tenant;
    };
    LoginService.prototype.initLoginOptions = function () {
        var loginOptions = this.ui.state.loginOptions || [];
        var isOAuth2 = function (_a) {
            var type = _a.type, grantType = _a.grantType;
            return type === 'OAUTH2' && grantType === 'AUTHORIZATION_CODE';
        };
        this.loginMode = loginOptions.find(function (_a) {
            var type = _a.type;
            return type === 'OAUTH2_INTERNAL';
        }) ||
            loginOptions.find(function (_a) {
                var type = _a.type;
                return type === 'BASIC';
            }) ||
            loginOptions.find(isOAuth2) || { type: 'BASIC' };
        this.oauthOptions = loginOptions.find(isOAuth2) || {};
    };
    LoginService.prototype.redirectToOauth = function () {
        var initRequest = this.oauthOptions.initRequest;
        var fullPath = (this.location ? this.location._platformLocation : window).location
            .href;
        var redirectUrl = encodeURIComponent(fullPath);
        var originUriParam = (initRequest.includes('?') ? '&' : '?') + "originUri=" + redirectUrl;
        window.location.href = "" + initRequest + originUriParam;
    };
    LoginService.prototype.autoLogout = function () {
        var _this = this;
        var errorPattern = /invalid\scredentials.*pin.*generate/i;
        var isTfaExpired = function (data) {
            return data && typeof data.message === 'string' && errorPattern.test(data.message);
        };
        this.ui.currentUser
            .pipe(switchMap(function (u) {
            return u ? _this.api.hookResponse(function (_a) {
                var response = _a.response;
                return response.status === 401;
            }) : EMPTY;
        }))
            .subscribe(function (apiCall) { return __awaiter(_this, void 0, void 0, function () {
            var response, willLogout, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = apiCall.response;
                        willLogout = false;
                        if (!isTfaExpired(response.data)) return [3 /*break*/, 1];
                        willLogout = true;
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(typeof response.json === 'function')) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.clone().json()];
                    case 2:
                        data = _a.sent();
                        if (isTfaExpired(data)) {
                            willLogout = true;
                        }
                        _a.label = 3;
                    case 3:
                        if (willLogout) {
                            this.logout(false);
                            setTimeout(function () { return _this.alert.danger(_this.ERROR_MESSAGES.tfaExpired); }, 500);
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
     * @return The min length for password or default value.
     */
    LoginService.prototype.getGreenMinLength = function () {
        return __awaiter(this, void 0, void 0, function () {
            var greenMinLength;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBasicAuthLoginOption()];
                    case 1:
                        greenMinLength = ((_a.sent()) || { greenMinLength: null }).greenMinLength;
                        this.passwordStrengthSetting.greenMinLength = greenMinLength || this.GREEN_MIN_LENGTH_DEFAULT;
                        return [2 /*return*/, this.passwordStrengthSetting.greenMinLength];
                }
            });
        });
    };
    /**
     * Checks if password strength is enforced for system
     * by retrieving value of `enforceStrength` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    LoginService.prototype.getEnforcePasswordStrength = function (refresh) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                        var enforcePasswordStrength = get(loginOption, 'enforceStrength');
                        if (isString(enforcePasswordStrength)) {
                            _this.passwordStrengthSetting.enforcePasswordStrength = enforcePasswordStrength === 'true' ? true : false;
                        }
                        else {
                            _this.passwordStrengthSetting.enforcePasswordStrength = !!enforcePasswordStrength;
                        }
                        return _this.passwordStrengthSetting.enforcePasswordStrength;
                    })];
            });
        });
    };
    /**
     * Checks if password strength is enforced for particular tenant
     * by retrieving value of `strengthValidity` property from loginOptions response
     * @param refresh boolean used to refresh the app state where result of loginOptions response is stored.
     * If false, it takes value from memory,
     * if true, it refresh the app state value and then retrives data.
     * @return boolean value, true if enforced, false otherwise.
     */
    LoginService.prototype.getPasswordStrengthValidity = function (refresh) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getBasicAuthLoginOption(refresh).then(function (loginOption) {
                        var strengthValidity = get(loginOption, 'strengthValidity');
                        if (isString(strengthValidity)) {
                            _this.passwordStrengthSetting.passwordStrengthValidity = strengthValidity === 'true' ? true : false;
                        }
                        else {
                            _this.passwordStrengthSetting.passwordStrengthValidity = !!strengthValidity;
                        }
                        return _this.passwordStrengthSetting.passwordStrengthValidity;
                    })];
            });
        });
    };
    /**
     * Function determines if enforced strength checks should be enabled for current tenant
     * based on properties retrieved from loginOptions
     * @param options object containing specific options:
     *    - {refresh: true} - refreshes values of app state and returns fresh values as result of call
     * @return boolean value, true if strength is enforced for tenant, false otherwise.
     */
    LoginService.prototype.getPasswordStrengthEnforced = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var refresh;
            return __generator(this, function (_a) {
                refresh = options && options.refresh;
                return [2 /*return*/, Promise.all([this.getEnforcePasswordStrength(refresh), this.getPasswordStrengthValidity(refresh)]).then(function (values) {
                        var _a = __read(values, 2), enforcePasswordStrength = _a[0], passwordStrengthValidity = _a[1];
                        return enforcePasswordStrength || passwordStrengthValidity;
                    })];
            });
        });
    };
    /**
     * Clears all backend errors.
     */
    LoginService.prototype.cleanMessages = function () {
        this.alert.clearAll();
    };
    /**
     * Adds a new success message
     * @param successKey The key of the success message as used in SUCCESS_MESSAGES
     */
    LoginService.prototype.addSuccessMessage = function (successKey) {
        var successMessage = this.SUCCESS_MESSAGES[successKey];
        if (successMessage) {
            this.alert.add({
                text: successMessage,
                type: 'success',
                timeout: 0
            });
        }
    };
    /**
     * Returns the current strategy. Defaults to cookie, if a token
     * is found in local or session storage we switch to basic auth.
     * @returns The current auth strategy.
     */
    LoginService.prototype.getAuthStrategy = function () {
        var authStrategy = this.cookieAuth;
        var token = this.getStoredToken();
        var tfa = this.getStoredTfaToken();
        if (token) {
            authStrategy = this.basicAuth;
            this.setCredentials({ token: token, tfa: tfa }, this.basicAuth);
        }
        return authStrategy;
    };
    /**
     * Forces the use of basic auth as strategy with this credentials.
     * @param credentials The credentials to use.
     */
    LoginService.prototype.useBasicAuth = function (credentials) {
        this.setCredentials(credentials, this.basicAuth);
        return this.basicAuth;
    };
    /**
     * Tries to login a user with the given credentials.
     * If successful, the current tenant and user is set. If not an error
     * is thrown. It also verifies if the user is allowed to open the
     * current app.
     * @param auth The authentication strategy used.
     * @param credentials The credentials to try to login.
     */
    LoginService.prototype.login = function (auth, credentials) {
        if (auth === void 0) { auth = this.getAuthStrategy(); }
        return __awaiter(this, void 0, void 0, function () {
            var tenantRes, tenant, userRes, user, supportUserName, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.client.setAuth(auth);
                        return [4 /*yield*/, this.tenant.current()];
                    case 1:
                        tenantRes = _a.sent();
                        tenant = tenantRes.data;
                        return [4 /*yield*/, this.switchLoginMode(credentials)];
                    case 2:
                        if (_a.sent()) {
                            auth = this.cookieAuth;
                        }
                        return [4 /*yield*/, this.user.current()];
                    case 3:
                        userRes = _a.sent();
                        user = userRes.data;
                        return [4 /*yield*/, this.verifyAppAccess()];
                    case 4:
                        _a.sent();
                        supportUserName = this.getSupportUserName(credentials);
                        token = this.setCredentials({
                            tenant: tenant.name,
                            user: (supportUserName ? supportUserName + "$" : '') + user.userName
                        }, auth);
                        if (token) {
                            this.storeBasicAuthToken(token);
                        }
                        return [4 /*yield*/, this.authFulfilled(tenant, user, supportUserName)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Saves tenant, user and support user info to the app state.
     * @param tenant The current tenant object.
     * @param user The current user object.
     * @param supportUserName The current support user name.
     */
    LoginService.prototype.authFulfilled = function (tenant, user, supportUserName) {
        return __awaiter(this, void 0, void 0, function () {
            var data, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!tenant) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.tenant.current()];
                    case 1:
                        data = (_a.sent()).data;
                        tenant = data;
                        this.client.tenant = tenant.name;
                        _a.label = 2;
                    case 2:
                        if (!!user) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.user.current()];
                    case 3:
                        data = (_a.sent()).data;
                        user = data;
                        _a.label = 4;
                    case 4:
                        if (!supportUserName) {
                            supportUserName = null;
                        }
                        this.ui.setUser({ user: user, supportUserName: supportUserName });
                        this.ui.currentTenant.next(tenant);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Switch the login mode to CookieAuth if the
     * user has configured to use it in loginOptions.
     * @param credentials The credentials for that login
     */
    LoginService.prototype.switchLoginMode = function (credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var isPasswordGrantLogin, params, urlParams, res, data, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isPasswordGrantLogin = this.isPasswordGrantLogin(credentials);
                        if (!(isPasswordGrantLogin && credentials)) return [3 /*break*/, 6];
                        params = new URLSearchParams({
                            grant_type: 'PASSWORD',
                            username: credentials.user,
                            password: credentials.password,
                            tfa_code: credentials.tfa
                        });
                        urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
                        credentials.tenant = urlParams.get('tenant_id');
                        return [4 /*yield*/, this.client.fetch("tenant/oauth?" + urlParams.toString(), {
                                method: 'POST',
                                body: params.toString(),
                                headers: {
                                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                                }
                            })];
                    case 1:
                        res = _a.sent();
                        if (!!res.ok) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, res.json()];
                    case 3:
                        data = _a.sent();
                        throw { res: res, data: data };
                    case 4:
                        ex_1 = _a.sent();
                        throw ex_1;
                    case 5:
                        this.client.setAuth(this.cookieAuth);
                        this.cleanLocalStorage();
                        this.basicAuth.logout();
                        _a.label = 6;
                    case 6: return [2 /*return*/, isPasswordGrantLogin];
                }
            });
        });
    };
    LoginService.prototype.isPasswordGrantLogin = function (credentials) {
        return !!(!this.isSupportUser(credentials) &&
            this.loginMode &&
            this.loginMode.type === this.OAUTH2_INTERNAL_TYPE);
    };
    /**
     * Verifies if the provided credentials use a support user to log in or not.
     * @param credentials Credentials to check.
     * @returns True if user is a support user.
     */
    LoginService.prototype.isSupportUser = function (credentials) {
        return credentials && credentials.user.includes('$');
    };
    /**
     * Verifies if the tenant input field should be shown
     * or not.
     * @returns If true, show the tenant input.
     */
    LoginService.prototype.showTenant = function () {
        return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
    };
    /**
     * Logs the user out
     * @param reload If set to false, the page will not reload
     */
    LoginService.prototype.logout = function (reload) {
        if (reload === void 0) { reload = true; }
        return __awaiter(this, void 0, void 0, function () {
            var resData, _a, basicRes, cookieRes, ex_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resData = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 6]);
                        return [4 /*yield*/, this.reset()];
                    case 2:
                        _a = __read.apply(void 0, [_b.sent(), 2]), basicRes = _a[0], cookieRes = _a[1];
                        return [4 /*yield*/, cookieRes.json()];
                    case 3:
                        resData = _b.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        ex_2 = _b.sent();
                        this.alert.removeLastDanger();
                        return [3 /*break*/, 6];
                    case 5:
                        if (resData && resData.url) {
                            this.redirect(resData.url);
                        }
                        else if (reload) {
                            this.location.replaceState({}, '', '', '');
                            window.location.reload();
                        }
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resets the stored auth-data
     */
    LoginService.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.cleanLocalStorage();
                this.cleanSessionStorage();
                this.realtime.disconnect();
                this.ui.currentUser.next(null);
                return [2 /*return*/, Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()])];
            });
        });
    };
    /**
     * Saves the TFA token to local or session storage.
     * @param tfaToken The tfa token to save.
     * @param storage The storage to use (local or session).
     */
    LoginService.prototype.saveTFAToken = function (tfaToken, storage) {
        storage.setItem(this.TFATOKEN_KEY, tfaToken);
    };
    /**
     * Request the manifest -> on 401 user has no access to that application
     * and we throw the error up to the login form.
     */
    LoginService.prototype.verifyAppAccess = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.ui.loadManifest()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        if (!(ex_3.res && ex_3.res.status === 404 && this.isLocal())) {
                            throw ex_3;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets the tenant to the client and updates the credentials on the
     * auth strategy.
     * @param credentials The name of the tenant.
     * @param authStrategy The authentication strategy used.
     * @return Returns the token if basic auth, otherwise undefined.
     */
    LoginService.prototype.setCredentials = function (credentials, authStrategy) {
        if (credentials.tenant) {
            this.client.tenant = credentials.tenant;
        }
        // Check if a token is already set (case for support user login)
        // if yes -> we just need to update the user, and reuse the token
        // of the support user.
        // Therefore we need to pass user and tenant, to get
        // just the stored token and nothing else (see BasicAuth.ts:31).
        var token = this.basicAuth.updateCredentials({
            tenant: credentials.tenant,
            user: credentials.user
        });
        var newCredentials = __assign({ token: token }, credentials);
        return authStrategy.updateCredentials(newCredentials);
    };
    /**
     * Verifies if the current user is a developer or not.
     * Running on localhost means development mode.
     */
    LoginService.prototype.isLocal = function () {
        var hostname = window.location.hostname;
        return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
    };
    /**
     * Save the token to local or session storage.
     * @param token The token to save.
     * @param storage The storage to use (local or session).
     */
    LoginService.prototype.saveToken = function (token, storage) {
        storage.setItem(this.TOKEN_KEY, token);
    };
    LoginService.prototype.storeBasicAuthToken = function (token) {
        this.saveToken(token, sessionStorage);
        if (this.rememberMe) {
            this.saveToken(token, localStorage);
        }
    };
    LoginService.prototype.cleanLocalStorage = function () {
        localStorage.removeItem(this.TOKEN_KEY);
        localStorage.removeItem(this.TFATOKEN_KEY);
    };
    LoginService.prototype.cleanSessionStorage = function () {
        sessionStorage.removeItem(this.TOKEN_KEY);
        sessionStorage.removeItem(this.TFATOKEN_KEY);
    };
    LoginService.prototype.isShowTenant = function () {
        return this.showTenantRegExp.test(window.location.href);
    };
    LoginService.prototype.redirect = function (url) {
        window.location.href = url;
    };
    LoginService.prototype.getBasicAuthLoginOption = function (refresh) {
        return __awaiter(this, void 0, void 0, function () {
            var loginOptions, basicAuthLoginOption;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!refresh) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.ui.refreshLoginOptions()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        loginOptions = this.ui.state.loginOptions || [];
                        basicAuthLoginOption = loginOptions.find(function (_a) {
                            var type = _a.type;
                            return type === 'BASIC';
                        });
                        return [2 /*return*/, Promise.resolve(basicAuthLoginOption)];
                }
            });
        });
    };
    /**
     * Gets support user name from credentials.
     * @param credentials Credentials object (defaults to the stored one).
     * @returns Support user name.
     */
    LoginService.prototype.getSupportUserName = function (credentials) {
        if (credentials === void 0) { credentials = this.getStoredCredentials(); }
        if (!credentials) {
            return null;
        }
        var supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
        return supportUserName;
    };
    /**
     * Gets credentials object from the stored token.
     * @returns Credentials object.
     */
    LoginService.prototype.getStoredCredentials = function () {
        var token = this.getStoredToken();
        if (!token) {
            return null;
        }
        return this.decodeToken(token);
    };
    /**
     * Gets stored token from local storage or session storage.
     * @returns Stored token.
     */
    LoginService.prototype.getStoredToken = function () {
        return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
    };
    /**
     * Gets stored TFA token from local storage or session storage.
     * @returns Stored TFA token.
     */
    LoginService.prototype.getStoredTfaToken = function () {
        return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
    };
    /**
     * Decodes token to credentials object.
     * @param token Token to decode.
     * @returns Credentials object.
     */
    LoginService.prototype.decodeToken = function (token) {
        var decoded = decodeURIComponent(escape(window.atob(token)));
        var split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
        return {
            tenant: split[2],
            user: split[3],
            password: split[4]
        };
    };
    LoginService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: BasicAuth },
        { type: CookieAuth },
        { type: AppStateService },
        { type: UserService },
        { type: TenantService },
        { type: Realtime },
        { type: AlertService },
        { type: ApiService$1 },
        { type: LocationStrategy, decorators: [{ type: Optional }] }
    ]; };
    LoginService = __decorate([
        Injectable(),
        __param(9, Optional())
    ], LoginService);
    return LoginService;
}());

var PasswordConfirmModalComponent = /** @class */ (function () {
    function PasswordConfirmModalComponent(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    PasswordConfirmModalComponent.prototype.passwordConfirm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var supportUserName, userId, credentials, strategy, newClient, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.password) return [3 /*break*/, 5];
                        supportUserName = this.ui.currentSupportUserName.value;
                        userId = this.ui.currentUser.value.id;
                        credentials = {
                            password: this.password,
                            user: "" + (supportUserName ? supportUserName + "$" : '') + userId,
                            tenant: this.client.tenant
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        this.loading = true;
                        strategy = clone(this.loginService.useBasicAuth({}));
                        delete credentials.tfa;
                        strategy.updateCredentials(credentials);
                        newClient = this.createNewClient(strategy, this.client.baseUrl);
                        return [4 /*yield*/, newClient.user.current()];
                    case 2:
                        _a.sent();
                        this.emitSuccessAndClose();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1.res && e_1.res.status === 401 && e_1.data && /pin|totp/i.test(e_1.data.message)) {
                            this.emitSuccessAndClose();
                        }
                        else {
                            this.alert.danger(gettext("Provided password doesn't match your current one."));
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        this.loading = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PasswordConfirmModalComponent.prototype.cancel = function () {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    };
    PasswordConfirmModalComponent.prototype.createNewClient = function (strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    };
    PasswordConfirmModalComponent.prototype.emitSuccessAndClose = function () {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    };
    PasswordConfirmModalComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: AppStateService },
        { type: FetchClient },
        { type: AlertService },
        { type: LoginService }
    ]; };
    __decorate([
        Output()
    ], PasswordConfirmModalComponent.prototype, "passwordConfirmedEmitter", void 0);
    __decorate([
        ViewChild('modal', { static: false })
    ], PasswordConfirmModalComponent.prototype, "modal", void 0);
    PasswordConfirmModalComponent = __decorate([
        Component({
            selector: 'c8y-password-confirm-modal',
            template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group>\r\n      <label translate for=\"currentPassword\">Current password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Current password' | translate }}\"\r\n        required\r\n      />\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Save' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
        })
    ], PasswordConfirmModalComponent);
    return PasswordConfirmModalComponent;
}());

var PasswordService = /** @class */ (function () {
    function PasswordService(modalService) {
        this.modalService = modalService;
        this.DEFAULT_PASSWORD_MIN_LENGTH = 8;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    PasswordService.prototype.confirmPassword = function () {
        var modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        return modalInstance.content.passwordConfirmedEmitter.pipe(take(1));
    };
    PasswordService.prototype.hasLowerCase = function (password) {
        return (password.search(/[a-z]/) !== -1);
    };
    PasswordService.prototype.hasUpperCase = function (password) {
        return (password.search(/[A-Z]/) !== -1);
    };
    PasswordService.prototype.hasNumbers = function (password) {
        return (password.search(/[0-9]/) !== -1);
    };
    PasswordService.prototype.hasSpecialChars = function (password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    };
    PasswordService.prototype.getStrengthColor = function (password) {
        var passwordStrength = filter$1([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    };
    PasswordService.prototype.getDefaultPasswordMinLength = function () {
        return this.DEFAULT_PASSWORD_MIN_LENGTH;
    };
    PasswordService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    PasswordService = __decorate([
        Injectable()
    ], PasswordService);
    return PasswordService;
}());

var UserTotpSetupComponent = /** @class */ (function () {
    function UserTotpSetupComponent(user, modalService, modal, loginService) {
        this.user = user;
        this.modalService = modalService;
        this.modal = modal;
        this.loginService = loginService;
    }
    UserTotpSetupComponent.prototype.totpSetupVerified = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.user.activateTotp()];
                    case 1:
                        _a.sent();
                        this.modal.hide();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.modalService.acknowledge(gettext('Logout required'), gettext('You must log out in order to apply your changes'), Status.WARNING, gettext('Log out'))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.loginService.logout()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    UserTotpSetupComponent.prototype.close = function () {
        this.modal.hide();
    };
    UserTotpSetupComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: ModalService },
        { type: BsModalRef },
        { type: LoginService }
    ]; };
    UserTotpSetupComponent = __decorate([
        Component({
            selector: 'c8y-user-totp-setup',
            template: "<c8y-modal [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <button\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"close\"\n    ><span aria-hidden=\"true\">\u00D7</span></button>\n    <h3 class=\"text-center\" translate>Set up two-factor authentication</h3>\n  </ng-container>\n  <c8y-totp-setup></c8y-totp-setup>\n  <c8y-totp-challenge (onSuccess)=\"totpSetupVerified($event)\"></c8y-totp-challenge>\n</c8y-modal>\n"
        })
    ], UserTotpSetupComponent);
    return UserTotpSetupComponent;
}());

var UserEditComponent = /** @class */ (function () {
    function UserEditComponent(state, translate, passwordService, modalConfirmService, bsModalService, alert, userService, tenantLoginOptionsService, tenantService) {
        this.state = state;
        this.translate = translate;
        this.passwordService = passwordService;
        this.modalConfirmService = modalConfirmService;
        this.bsModalService = bsModalService;
        this.alert = alert;
        this.userService = userService;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.tenantService = tenantService;
        this.loading = false;
        this.onUser = new EventEmitter();
        this.onLanguage = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.userHasActiveTotp = false;
        this.userCanSetupTotp = false;
        this.isPhoneRequired = false;
    }
    Object.defineProperty(UserEditComponent.prototype, "user", {
        get: function () { return this._user; },
        set: function (u) {
            this._user = clone(u);
            this.userIsExternal = u.customProperties.userOrigin === 'OAUTH2';
            this.isPhoneRequired = this.isPhoneRequired && u.twoFactorAuthenticationEnabled;
        },
        enumerable: true,
        configurable: true
    });
    UserEditComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentTenant, _a, enabledOnSystemLevel, enabledOnTenantLevel;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.tenantService.current()];
                    case 1:
                        currentTenant = (_b.sent()).data;
                        return [4 /*yield*/, this.tenantService.getTfaSettings(currentTenant)];
                    case 2:
                        _a = _b.sent(), enabledOnSystemLevel = _a.enabledOnSystemLevel, enabledOnTenantLevel = _a.enabledOnTenantLevel;
                        this.isTfaEnabled = enabledOnSystemLevel || enabledOnTenantLevel;
                        return [4 /*yield*/, this.initializeTotpSettings()];
                    case 3:
                        _b.sent();
                        if (this.user.twoFactorAuthenticationEnabled && !this.userCanSetupTotp) {
                            this.isPhoneRequired = true;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(UserEditComponent.prototype, "langs", {
        get: function () {
            return this.state.state.langs;
        },
        enumerable: true,
        configurable: true
    });
    UserEditComponent.prototype.setupTotp = function () {
        this.bsModalService.show(UserTotpSetupComponent, { class: 'modal-sm' });
        this.cancel(); // to close the user edit modal and prevent console errors on logout
    };
    UserEditComponent.prototype.cancel = function () {
        this.onCancel.emit();
    };
    UserEditComponent.prototype.save = function () {
        if (!this.loading) {
            this._user.password ? this.saveAfterPasswordConfirmation() : this.onUser.emit(this._user);
        }
    };
    UserEditComponent.prototype.onNewPasswordChanged = function (newPassword) {
        this._user.password = newPassword.password;
    };
    UserEditComponent.prototype.initializeTotpSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, totpActivity, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        _a = this;
                        return [4 /*yield*/, this.canUserSetupTotp()];
                    case 1:
                        _a.userCanSetupTotp = _b.sent();
                        if (!this.userCanSetupTotp) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.userService.getActivityTotp()];
                    case 2:
                        totpActivity = (_b.sent()).data;
                        this.userHasActiveTotp = totpActivity.isActive;
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        ex_1 = _b.sent();
                        this.alert.removeLastDanger();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    UserEditComponent.prototype.canUserSetupTotp = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loginOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tenantLoginOptionsService.detail()];
                    case 1:
                        loginOptions = (_a.sent()).data.loginOptions;
                        return [2 /*return*/, loginOptions.some(function (_a) {
                                var _b = _a.tfaStrategy, tfaStrategy = _b === void 0 ? '' : _b;
                                return tfaStrategy.toLowerCase() === 'totp';
                            })];
                }
            });
        });
    };
    UserEditComponent.prototype.saveAfterPasswordConfirmation = function () {
        var _this = this;
        this.passwordService.confirmPassword().subscribe(function (confirmed) {
            if (confirmed) {
                _this.onUser.emit(_this._user);
            }
        });
    };
    UserEditComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: TranslateService },
        { type: PasswordService },
        { type: ModalService },
        { type: BsModalService },
        { type: AlertService },
        { type: UserService },
        { type: TenantLoginOptionsService },
        { type: TenantService }
    ]; };
    __decorate([
        Input()
    ], UserEditComponent.prototype, "lang", void 0);
    __decorate([
        Input()
    ], UserEditComponent.prototype, "loading", void 0);
    __decorate([
        Input()
    ], UserEditComponent.prototype, "user", null);
    __decorate([
        Output()
    ], UserEditComponent.prototype, "onUser", void 0);
    __decorate([
        Output()
    ], UserEditComponent.prototype, "onLanguage", void 0);
    __decorate([
        Output()
    ], UserEditComponent.prototype, "onCancel", void 0);
    UserEditComponent = __decorate([
        Component({
            selector: 'c8y-user-edit',
            template: "<form #userForm=\"ngForm\" (ngSubmit)=\"userForm.form.valid && save()\">\n  <div class=\"alert alert-warning\" role=\"alert\" *ngIf=\"userIsExternal\" translate>\n    You cannot edit the user since it is managed via your authorization server.\n  </div>\n  <c8y-form-group>\n    <label translate for=\"userName\">Username (e.g. email)</label>\n    <input\n      id=\"userName\"\n      class=\"form-control\"\n      [(ngModel)]=\"user.userName\"\n      name=\"userName\"\n      autocomplete=\"off\"\n      required\n      maxlength=\"254\"\n      placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n      [disabled]=\"user.id\"\n      c8yDefaultValidation=\"user\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate for=\"displayName\">Login alias</label>\n    <input\n      id=\"displayName\"\n      class=\"form-control\"\n      [(ngModel)]=\"user.displayName\"\n      name=\"displayName\"\n      autocomplete=\"off\"\n      maxlength=\"254\"\n      placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n      [disabled]=\"userIsExternal\"\n      c8yDefaultValidation=\"loginAlias\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group [hasWarning]=\"!user.email\">\n    <label translate for=\"userEmail\">Email</label>\n    <input\n      id=\"userEmail\"\n      class=\"form-control\"\n      type=\"email\"\n      name=\"email\"\n      [maxlength]=\"254\"\n      autocomplete=\"off\"\n      placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n      [(ngModel)]=\"user.email\"\n      email\n      [required]=\"user.newsletter\"\n      [disabled]=\"userIsExternal\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"!user.email\" translate\n        >Note that email is required to reset password.</c8y-message\n      >\n    </c8y-messages>\n  </c8y-form-group>\n\n  <div class=\"row\" style=\"margin-left:-15px; margin-right:-15px\">\n    <div class=\"col-sm-6\">\n      <c8y-form-group>\n        <label translate for=\"userFirstName\">First name</label>\n        <input\n          id=\"userFirstName\"\n          class=\"form-control\"\n          autocomplete=\"off\"\n          maxlength=\"50\"\n          name=\"firstName\"\n          [(ngModel)]=\"user.firstName\"\n          [disabled]=\"userIsExternal\"\n        />\n      </c8y-form-group>\n    </div>\n    <div class=\"col-sm-6\">\n      <c8y-form-group>\n        <label translate for=\"userLastName\">Last name</label>\n        <input\n          id=\"userLastName\"\n          class=\"form-control\"\n          autocomplete=\"off\"\n          maxlength=\"50\"\n          name=\"lastName\"\n          [(ngModel)]=\"user.lastName\"\n          [disabled]=\"userIsExternal\"\n        />\n      </c8y-form-group>\n    </div>\n  </div>\n\n  <c8y-form-group>\n    <label translate for=\"userTelephone\">Telephone</label>\n    <input\n      id=\"userTelephone\"\n      class=\"form-control\"\n      autocomplete=\"off\"\n      name=\"phone\"\n      maxlength=\"254\"\n      [(ngModel)]=\"user.phone\"\n      placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n      c8yPhoneValidation\n      c8yDefaultValidation=\"phoneNumber\"\n      [required]=\"isPhoneRequired\"\n      [disabled]=\"userIsExternal\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate for=\"userLang\">Language</label>\n    <div class=\"c8y-select-wrapper\">\n      <select\n        id=\"userLang\"\n        class=\"form-control\"\n        #selectLang\n        name=\"lang\"\n        [(ngModel)]=\"lang\"\n        (change)=\"onLanguage.emit(selectLang.value)\"\n        [disabled]=\"userIsExternal\"\n      >\n        <option *ngFor=\"let lang of langs\" [value]=\"lang\">{{\n          translate.getNativeLanguage(lang)\n        }}</option>\n      </select>\n      <span></span>\n    </div>\n  </c8y-form-group>\n\n  <div class=\"form-group\" *ngIf=\"!userIsExternal\">\n    <label class=\"control-label\">{{ 'Login options' | translate }}</label>\n    <c8y-new-password (password)=\"onNewPasswordChanged($event)\"></c8y-new-password>\n    <button\n      title=\"{{ 'Set up two-factor authentication' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"setupTotp()\"\n      *ngIf=\"userCanSetupTotp && !userHasActiveTotp && isTfaEnabled\"\n    >\n      {{ 'Set up two-factor authentication' | translate }}\n    </button>\n  </div>\n\n  <c8y-form-group *ngIf=\"!!(state.state$ | async).newsletter\">\n    <label translate>Newsletter</label>\n    <label\n      title=\"{{ 'Send me information about outages, maintenance or updates.' | translate }}\"\n      class=\"c8y-checkbox\"\n    >\n      <input\n        type=\"checkbox\"\n        name=\"newsletter\"\n        [(ngModel)]=\"user.newsletter\"\n        [disabled]=\"userIsExternal\"\n      />\n      <span></span>\n      <span>\n        {{ 'Send me information about outages, maintenance or updates.' | translate }}\n      </span>\n    </label>\n  </c8y-form-group>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n    >\n      {{ 'Cancel' | translate }}\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"!userForm.form.valid || userForm.form.pristine || loading || userIsExternal\"\n    >\n      {{ 'Save' | translate }}\n    </button>\n  </div>\n</form>\n"
        })
    ], UserEditComponent);
    return UserEditComponent;
}());

var UserMenuOutletComponent = /** @class */ (function () {
    function UserMenuOutletComponent(ui, bsModalService, modalService, loginService, translateService, tenantService, alertService, user, optionsService) {
        this.ui = ui;
        this.bsModalService = bsModalService;
        this.modalService = modalService;
        this.loginService = loginService;
        this.translateService = translateService;
        this.tenantService = tenantService;
        this.alertService = alertService;
        this.user = user;
        this.optionsService = optionsService;
    }
    UserMenuOutletComponent.prototype.copyIt = function (text) {
        var handler = {
            handleEvent: function (e) {
                e.clipboardData.setData('text/plain', text);
                e.preventDefault();
            }
        };
        document.addEventListener('copy', handler);
        var copied;
        try {
            copied = document.execCommand('copy');
        }
        catch (e) {
            copied = false;
        }
        if (copied) {
            this.alertService.addByText('success', gettext('Copied to clipboard.'));
        }
        else {
            this.alertService.addByText('danger', gettext('Could not copy to clipboard.'));
        }
        document.removeEventListener('copy', handler);
    };
    UserMenuOutletComponent.prototype.editUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.bsModalService.show(UserEditModalComponent);
                return [2 /*return*/];
            });
        });
    };
    UserMenuOutletComponent.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loginService.logout()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    UserMenuOutletComponent.prototype.activateSupportAccess = function () {
        return __awaiter(this, void 0, void 0, function () {
            var title, companyName, textWithCompany, textWithoutCompany, finalQuestion, body, labels, successMsg, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        title = gettext('Activate support user access');
                        companyName = this.optionsService.get('companyName', 'Cumulocity');
                        textWithCompany = gettext(
                        // tslint:disable-next-line:max-line-length
                        'You are about to allow a support user from {{companyName}} to access your tenant to help you with your issue.');
                        textWithoutCompany = gettext(
                        // tslint:disable-next-line:max-line-length
                        'You are about to allow a support user to access your tenant to help you with your issue.');
                        finalQuestion = gettext('Do you want to proceed?');
                        body = [
                            this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                companyName: companyName
                            }),
                            this.translateService.instant(finalQuestion)
                        ].join(' ');
                        labels = {
                            ok: gettext('Activate access'),
                            cancel: gettext('Cancel')
                        };
                        successMsg = gettext('Support user access activated.');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, this.modalService.confirm(title, body, Status.DANGER, labels)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.tenantService.enableSupportUser()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.refreshCurrentUser()];
                    case 4:
                        _a.sent();
                        this.alertService.success(successMsg);
                        return [3 /*break*/, 6];
                    case 5:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    UserMenuOutletComponent.prototype.deactivateSupportAccess = function () {
        return __awaiter(this, void 0, void 0, function () {
            var title, companyName, textWithCompany, textWithoutCompany, currentUser, isTenantAdmin, tenantAdminNote, finalQuestion, body, labels, successMsg, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        title = gettext('Deactivate support user access');
                        companyName = this.optionsService.get('companyName', 'Cumulocity');
                        textWithCompany = gettext(
                        // tslint:disable-next-line:max-line-length
                        'You are about to block a support user from {{companyName}} from accessing your tenant to help you with your issue.');
                        textWithoutCompany = gettext(
                        // tslint:disable-next-line:max-line-length
                        'You are about to block a support user from accessing your tenant to help you with your issue.');
                        return [4 /*yield*/, this.user.current()];
                    case 1:
                        currentUser = (_a.sent()).data;
                        return [4 /*yield*/, this.user.hasRole(currentUser, 'ROLE_TENANT_ADMIN')];
                    case 2:
                        isTenantAdmin = _a.sent();
                        tenantAdminNote = gettext(
                        // tslint:disable-next-line:max-line-length
                        'Deactivating support access as tenant admin will disable all other support requests on your tenant.');
                        finalQuestion = gettext('Do you want to proceed?');
                        body = [
                            this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                companyName: companyName
                            }),
                            isTenantAdmin ? this.translateService.instant(tenantAdminNote) : '',
                            this.translateService.instant(finalQuestion)
                        ]
                            .filter(Boolean)
                            .join(' ');
                        labels = {
                            ok: gettext('Deactivate access'),
                            cancel: gettext('Cancel')
                        };
                        successMsg = gettext('Support user access deactivated.');
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 7, , 8]);
                        return [4 /*yield*/, this.modalService.confirm(title, body, Status.DANGER, labels)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.tenantService.disableSupportUser()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.refreshCurrentUser()];
                    case 6:
                        _a.sent();
                        this.alertService.success(successMsg);
                        return [3 /*break*/, 8];
                    case 7:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    UserMenuOutletComponent.prototype.getSortedItems = function () {
        return sortBy(Array.from(this.items), this.byPriority);
    };
    UserMenuOutletComponent.prototype.refreshCurrentUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentUserResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.user.current()];
                    case 1:
                        currentUserResult = _a.sent();
                        this.ui.currentUser.next(currentUserResult.data);
                        return [2 /*return*/];
                }
            });
        });
    };
    UserMenuOutletComponent.prototype.byPriority = function (item) {
        return -item.priority;
    };
    UserMenuOutletComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: BsModalService },
        { type: ModalService },
        { type: LoginService },
        { type: TranslateService$1 },
        { type: TenantService },
        { type: AlertService },
        { type: UserService },
        { type: OptionsService }
    ]; };
    __decorate([
        Input()
    ], UserMenuOutletComponent.prototype, "items", void 0);
    UserMenuOutletComponent = __decorate([
        Component({
            selector: 'c8y-user-menu-outlet',
            template: "<div\n  dropdown\n  class=\"dropdown\"\n>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    dropdownToggle\n    style=\"white-space: nowrap\"\n  >\n    <span\n      class=\"hidden-xs text-truncate right-m\"\n      style=\"vertical-align: text-bottom; max-width: 104px; display: inline-block\"\n      title=\"{{ui.currentUser | async | shortenUserName}}\"\n    >\n      {{ui.currentUser | async | shortenUserName}}\n    </span>\n    <i\n      [c8yIcon]=\"'c8y-user'\"\n      class=\"fa-2x\"\n    ></i>\n  </button>\n  <ul\n    *dropdownMenu\n    class=\"dropdown-menu dropdown-menu-right\"\n    style=\"max-width: 240px;\"\n  >\n    <ng-container *ngFor=\"let item of getSortedItems()\">\n      <ng-container *ngIf=\"item.template\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!item.template\">\n        <li (click)=\"item.click()\">\n          <a style=\"cursor: pointer\" [attr.href]=\"item.link\" [attr.target]=\"item.target\">\n            <i [c8yIcon]=\"item.icon\"></i>\n            {{item.label | translate}}\n          </a>\n        </li>\n      </ng-container>\n    </ng-container>\n    <li\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n      role=\"separator\"\n      class=\"divider\"\n    ></li>\n    <li\n      class=\"dropdown-header bg-gray-white\"\n      style=\"white-space: normal; margin-top: -1px;\"\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n    >\n      <div class=\"flex-row\">\n        <i\n          [c8yIcon]=\"'info-circle'\"\n          class=\"text-info flex-item-v-start\"\n          style=\"margin: 1px 6px 0 -3px; font-size: 14px;\"\n        ></i>\n        <span class=\"text-muted text-truncate\">\n          {{'Tenant ID' | translate}}: <strong>\n            <span class=\"text-primary\" (click)=\"$event.stopPropagation(); copyIt(ui.currentTenant.value.name)\"\n              style=\"cursor: pointer\">\n              {{ui.currentTenant.value.name}}&nbsp;<i [c8yIcon]=\"'clipboard'\"></i></span>\n            </strong><br>\n          {{'Backend' | translate}}: <strong>{{(ui.state$ | async).versions.backend}}</strong><br>\n          {{'UI' | translate }}: <strong>{{ui.uiVersion}}</strong>\n        </span>\n      </div>\n    </li>\n  </ul>\n</div>\n\n<!-- the default items -->\n<c8y-user-menu-item\n  [icon]=\"'user'\"\n  [label]=\"'User settings' | translate\"\n  [priority]=\"20\"\n  (click)=\"editUser()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  [icon]=\"'sign-out'\"\n  [label]=\"'Logout' | translate\"\n  (click)=\"logout()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"!(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'phone'\"\n  [label]=\"'Activate support' | translate\"\n  (click)=\"activateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'phone'\"\n  [label]=\"'Deactivate support' | translate\"\n  (click)=\"deactivateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.state$ | async).supportUrl\"\n  [icon]=\"'question-circle'\"\n  [link]=\"(ui.state$ | async).supportUrl\"\n  [target]=\"'_blank'\"\n  [label]=\"'Request support' | translate\"\n></c8y-user-menu-item>\n"
        })
    ], UserMenuOutletComponent);
    return UserMenuOutletComponent;
}());

var PasswordCheckListComponent = /** @class */ (function () {
    function PasswordCheckListComponent(loginService, passwordStrengthChecker, passwordService) {
        var _this = this;
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (e.g. abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (e.g. ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (e.g. 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (e.g. !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: function (password) { return password.length >= _this.minGreenLength; },
                icon: '',
                contextualColor: ''
            }
        ];
    }
    Object.defineProperty(PasswordCheckListComponent.prototype, "password", {
        set: function (password) {
            if (typeof password === 'string') {
                this.onPasswordChange(password);
            }
        },
        enumerable: true,
        configurable: true
    });
    PasswordCheckListComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.loginService.getGreenMinLength()];
                    case 1:
                        _a.minGreenLength = _b.sent();
                        if (!this.minGreenLength) {
                            this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(PasswordCheckListComponent.prototype, "translateParams", {
        get: function () {
            return {
                length: this.minGreenLength
            };
        },
        enumerable: true,
        configurable: true
    });
    PasswordCheckListComponent.prototype.onPasswordChange = function (password) {
        this.checklist = map$1(this.checklist, function (requirement) {
            var checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    };
    PasswordCheckListComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: PasswordService },
        { type: PasswordService }
    ]; };
    __decorate([
        Input('password')
    ], PasswordCheckListComponent.prototype, "password", null);
    PasswordCheckListComponent = __decorate([
        Component({
            selector: 'c8y-password-check-list',
            template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n"
        })
    ], PasswordCheckListComponent);
    return PasswordCheckListComponent;
}());

var PasswordConfirm = /** @class */ (function () {
    function PasswordConfirm(passwordConfirm) {
        this.passwordConfirm = passwordConfirm;
    }
    PasswordConfirm_1 = PasswordConfirm;
    PasswordConfirm.prototype.validate = function (abControl) {
        var value = abControl.value;
        var controlToCompareWith = abControl.root.get(this.passwordConfirm);
        if (controlToCompareWith && value !== controlToCompareWith.value) {
            return { passwordConfirm: true };
        }
        return null;
    };
    var PasswordConfirm_1;
    PasswordConfirm.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['passwordConfirm',] }] }
    ]; };
    PasswordConfirm = PasswordConfirm_1 = __decorate([
        Directive({
            selector: '[passwordConfirm]',
            providers: [
                {
                    provide: NG_VALIDATORS,
                    useExisting: PasswordConfirm_1,
                    multi: true
                }
            ]
        }),
        __param(0, Attribute('passwordConfirm'))
    ], PasswordConfirm);
    return PasswordConfirm;
}());

var PasswordStrengthCheckerService = /** @class */ (function () {
    function PasswordStrengthCheckerService() {
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    PasswordStrengthCheckerService.prototype.hasLowerCase = function (password) {
        return (password.search(/[a-z]/) !== -1);
    };
    PasswordStrengthCheckerService.prototype.hasUpperCase = function (password) {
        return (password.search(/[A-Z]/) !== -1);
    };
    PasswordStrengthCheckerService.prototype.hasNumbers = function (password) {
        return (password.search(/[0-9]/) !== -1);
    };
    PasswordStrengthCheckerService.prototype.hasSpecialChars = function (password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    };
    PasswordStrengthCheckerService.prototype.getStrengthColor = function (password) {
        var passwordStrength = filter$1([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 3) {
            return this.GREEN;
        }
        else if (passwordStrength >= 3) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    };
    PasswordStrengthCheckerService = __decorate([
        Injectable()
    ], PasswordStrengthCheckerService);
    return PasswordStrengthCheckerService;
}());

var PasswordStrengthComponent = /** @class */ (function () {
    function PasswordStrengthComponent(passwordStrengthCheckerService) {
        this.passwordStrengthCheckerService = passwordStrengthCheckerService;
        this.strength = new EventEmitter();
        this.password = '';
    }
    Object.defineProperty(PasswordStrengthComponent.prototype, "password", {
        set: function (password) {
            if (typeof password === 'string') {
                this.model = this.passwordStrengthCheckerService.getStrengthColor(password);
                this.strength.emit(this.model);
            }
        },
        enumerable: true,
        configurable: true
    });
    PasswordStrengthComponent.ctorParameters = function () { return [
        { type: PasswordService }
    ]; };
    __decorate([
        Input('password')
    ], PasswordStrengthComponent.prototype, "password", null);
    __decorate([
        Output()
    ], PasswordStrengthComponent.prototype, "strength", void 0);
    PasswordStrengthComponent = __decorate([
        Component({
            selector: 'c8y-password-strength',
            template: "<div class=\"password-strength password-{{ model.colorName }}\">\r\n  <label class=\"password-strength-label small\" translate>\r\n    Password strength\r\n  </label>\r\n  <div>\r\n    <div class=\"password-bar\"></div>\r\n  </div>\r\n  <span class=\"small\">\r\n    {{ model.description | translate }}\r\n  </span>\r\n</div>\r\n"
        })
    ], PasswordStrengthComponent);
    return PasswordStrengthComponent;
}());

var NewPasswordComponent = /** @class */ (function () {
    function NewPasswordComponent(loginService) {
        this.loginService = loginService;
        this.password = new EventEmitter();
        this.model = {};
        this.changePassword = false;
        this.passwordEnforced = false;
    }
    NewPasswordComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loadPasswordStrengthSettings();
        this.loginService.getGreenMinLength().then(function (value) {
            _this.minlength = value;
        });
    };
    NewPasswordComponent.prototype.newPasswordChanged = function () {
        this.password.emit({
            password: this.model.newPassword,
            passwordStrength: this.model.strength
        });
    };
    NewPasswordComponent.prototype.loadPasswordStrengthSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.loginService.getPasswordStrengthEnforced({ refresh: true })];
                    case 1:
                        _a.passwordEnforced = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    NewPasswordComponent.prototype.showPasswordStrength = function () {
        return this.model.newPassword && this.model.newPassword.length >= this.minlength;
    };
    NewPasswordComponent.prototype.toggleChangePassword = function () {
        this.changePassword = !this.changePassword;
        if (!this.changePassword) {
            this.password.emit({});
            this.model = {};
        }
    };
    NewPasswordComponent.ctorParameters = function () { return [
        { type: LoginService }
    ]; };
    __decorate([
        Output()
    ], NewPasswordComponent.prototype, "password", void 0);
    NewPasswordComponent = __decorate([
        Component({
            selector: 'c8y-new-password',
            template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\" class=\"row content-flex-50\">\n  <div class=\"col-7\">\n    <c8y-form-group>\n      <label for=\"newPassword\" translate>Password</label>\n      <input\n        id=\"newPassword\"\n        name=\"newPassword\"\n        type=\"password\"\n        #newPassword=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPassword\"\n        (change)=\"newPasswordChanged()\"\n        (input)=\"newPasswordConfirm.control.updateValueAndValidity()\"\n        required\n        c8yDefaultValidation=\"password\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label for=\"newConfirmPassword\" translate>Confirm password</label>\n      <input\n        id=\"newConfirmPassword\"\n        name=\"newPasswordConfirm\"\n        type=\"password\"\n        #newPasswordConfirm=\"ngModel\"\n        class=\"form-control\"\n        [(ngModel)]=\"model.newPasswordConfirm\"\n        required\n        passwordConfirm=\"newPassword\"\n        autocomplete=\"new-password\"\n      />\n    </c8y-form-group>\n  </div>\n  <div class=\"col-5\">\n    <c8y-password-strength\n      [password]=\"model.newPassword\"\n      (strength)=\"model.strength = $event\"\n    ></c8y-password-strength>\n\n    <c8y-password-check-list\n      class=\"m-t-32\"\n      [password]=\"model.newPassword\"\n      [hidden]=\"!passwordEnforced\"\n    ></c8y-password-check-list>\n  </div>\n</div>\n",
            viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
        })
    ], NewPasswordComponent);
    return NewPasswordComponent;
}());

var PhoneValidationDirective = /** @class */ (function () {
    function PhoneValidationDirective() {
    }
    PhoneValidationDirective_1 = PhoneValidationDirective;
    PhoneValidationDirective.prototype.validate = function (control) {
        var valid = this.validateInternationalPhoneNumber(control);
        return valid ? null : {
            internationalPhoneNumber: true
        };
    };
    PhoneValidationDirective.prototype.validateInternationalPhoneNumber = function (control) {
        var numberValid;
        try {
            var phoneNumber = parsePhoneNumberFromString(control.value);
            numberValid = phoneNumber.isValid();
            if (numberValid && control.value !== phoneNumber.format('E.164')) {
                control.setValue(phoneNumber.format('E.164'), { emitEvent: false, emitModelToViewChange: false });
            }
        }
        catch (e) {
            numberValid = !control.value;
        }
        return numberValid;
    };
    var PhoneValidationDirective_1;
    PhoneValidationDirective = PhoneValidationDirective_1 = __decorate([
        Directive({
            selector: '[c8yPhoneValidation]',
            providers: [{ provide: NG_VALIDATORS, useExisting: PhoneValidationDirective_1, multi: true }]
        })
    ], PhoneValidationDirective);
    return PhoneValidationDirective;
}());

// tslint:disable: max-line-length
// @dynamic
var ValidationPattern = /** @class */ (function () {
    function ValidationPattern() {
    }
    ValidationPattern.get = function (key) {
        var pattern = this.rules[key];
        return pattern;
    };
    ValidationPattern.messages = {
        deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
        domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
            'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
        email: gettext('Invalid email address.'),
        internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
        loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
        max: gettext('Max value: {{ value }}'),
        min: gettext('Min value: {{ value }}'),
        opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
        password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
        passwordConfirm: gettext('Passwords do not match.'),
        passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
        phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
        required: gettext('This field is required.'),
        tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
            'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
        urlSegment: gettext('Slash, single or double dots and white space not allowed'),
        user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
    };
    ValidationPattern.rules = {
        deviceId: {
            pattern: /^[^\s/]*$/
        },
        domain: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
        },
        groupName: {
            maxLength: 254
        },
        hostname: {
            pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
        },
        ip: {
            pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        opcuaBrowsePath: {
            pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
        },
        password: {
            pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
        },
        phoneNumber: {
            pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
        },
        tenantId: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
        },
        user: {
            pattern: /^[^\\/\s$:+]*$/
        },
        urlSegment: {
            pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
        },
        loginAlias: {
            pattern: /^[^\\/$:+]*$/
        }
    };
    return ValidationPattern;
}());

var DefaultValidationDirective = /** @class */ (function () {
    function DefaultValidationDirective() {
        this.c8yDefaultValidation = '';
    }
    DefaultValidationDirective_1 = DefaultValidationDirective;
    DefaultValidationDirective.prototype.validate = function (control) {
        var _a;
        if (!control.value) {
            return null;
        }
        var validation = ValidationPattern.get(this.c8yDefaultValidation);
        if (!validation) {
            throw new Error("Pattern " + this.c8yDefaultValidation + " not found.");
        }
        var valid = true;
        if (validation.pattern) {
            valid = validation.pattern.test(control.value);
        }
        if (validation.maxLength) {
            valid = control.value.length < validation.maxLength;
        }
        if (validation.minLength) {
            valid = control.value.length >= validation.minLength;
        }
        return valid ? null : (_a = {}, _a[this.c8yDefaultValidation] = true, _a);
    };
    var DefaultValidationDirective_1;
    __decorate([
        Input()
    ], DefaultValidationDirective.prototype, "c8yDefaultValidation", void 0);
    DefaultValidationDirective = DefaultValidationDirective_1 = __decorate([
        Directive({
            selector: '[c8yDefaultValidation]',
            providers: [{ provide: NG_VALIDATORS, useExisting: DefaultValidationDirective_1, multi: true }]
        })
    ], DefaultValidationDirective);
    return DefaultValidationDirective;
}());

var MinValidationDirective = /** @class */ (function () {
    function MinValidationDirective() {
        this.min = '';
    }
    MinValidationDirective_1 = MinValidationDirective;
    MinValidationDirective.prototype.validate = function (control) {
        var parsedMin = parseInt(this.min, 10);
        if (isUndefined(control.value) || !this.min) {
            return null;
        }
        var valid = true;
        valid = (control.value !== null) ? !(control.value < parsedMin) : true;
        return valid ? null : { min: { value: parsedMin } };
    };
    var MinValidationDirective_1;
    __decorate([
        Input()
    ], MinValidationDirective.prototype, "min", void 0);
    MinValidationDirective = MinValidationDirective_1 = __decorate([
        Directive({
            selector: '[min]',
            providers: [{ provide: NG_VALIDATORS, useExisting: MinValidationDirective_1, multi: true }]
        })
    ], MinValidationDirective);
    return MinValidationDirective;
}());

var MaxValidationDirective = /** @class */ (function () {
    function MaxValidationDirective() {
        this.max = '';
    }
    MaxValidationDirective_1 = MaxValidationDirective;
    MaxValidationDirective.prototype.validate = function (control) {
        var parsedMax = parseInt(this.max, 10);
        if (isUndefined(control.value) || !this.max) {
            return null;
        }
        var valid = true;
        valid = !(control.value > parsedMax);
        return valid ? null : { max: { value: parsedMax } };
    };
    var MaxValidationDirective_1;
    __decorate([
        Input()
    ], MaxValidationDirective.prototype, "max", void 0);
    MaxValidationDirective = MaxValidationDirective_1 = __decorate([
        Directive({
            selector: '[max]',
            providers: [{ provide: NG_VALIDATORS, useExisting: MaxValidationDirective_1, multi: true }]
        })
    ], MaxValidationDirective);
    return MaxValidationDirective;
}());

var MessageDirective = /** @class */ (function () {
    function MessageDirective() {
    }
    __decorate([
        Input()
    ], MessageDirective.prototype, "name", void 0);
    __decorate([
        Input()
    ], MessageDirective.prototype, "text", void 0);
    MessageDirective = __decorate([
        Directive({
            selector: 'c8y-message',
        })
    ], MessageDirective);
    return MessageDirective;
}());

var MessagesComponent = /** @class */ (function () {
    function MessagesComponent(translateService) {
        this.translateService = translateService;
        this.show = {};
        this.defaults = ValidationPattern.messages;
        this.messages = [];
        this.messageMap = {};
    }
    MessagesComponent.prototype.ngAfterContentInit = function () {
        this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce(function (messages, directive) {
            messages[directive.name] = directive.text;
            return messages;
        }, {}));
    };
    MessagesComponent.prototype.changVisibility = function (show) {
        this.show = show;
        this.ngOnChanges();
    };
    MessagesComponent.prototype.ngOnChanges = function () {
        var _this = this;
        if (this.show) {
            this.messages = Object.keys(this.show)
                .map(function (key) { return _this.toMessage(key, _this.show[key]); });
        }
        else {
            this.messages = [];
        }
    };
    MessagesComponent.prototype.toMessage = function (key, value) {
        return this.translateService.instant(this.messageMap[key], value);
    };
    MessagesComponent.ctorParameters = function () { return [
        { type: TranslateService$1 }
    ]; };
    __decorate([
        Input()
    ], MessagesComponent.prototype, "show", void 0);
    __decorate([
        Input()
    ], MessagesComponent.prototype, "defaults", void 0);
    __decorate([
        ContentChildren(MessageDirective)
    ], MessagesComponent.prototype, "customMessages", void 0);
    MessagesComponent = __decorate([
        Component({
            selector: 'c8y-messages',
            template: "<small class=\"form-control-feedback-message\">\n  <div style=\"display:block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
        })
    ], MessagesComponent);
    return MessagesComponent;
}());

/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
var FormGroupComponent = /** @class */ (function () {
    function FormGroupComponent() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    Object.defineProperty(FormGroupComponent.prototype, "error", {
        get: function () {
            return this.status === 'error' || this.hasError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "warning", {
        get: function () {
            return this.status === 'warning' || this.hasWarning;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "success", {
        get: function () {
            return this.status === 'success' || this.hasSuccess;
        },
        enumerable: true,
        configurable: true
    });
    FormGroupComponent.prototype.ngAfterContentInit = function () {
        this.initNgModel();
    };
    FormGroupComponent.prototype.initNgModel = function () {
        var _this = this;
        if (this.model) {
            this.model.valueAccessor.registerOnTouched(function () {
                if (_this.model.control && !_this.model.control.dirty) {
                    _this.model.control.markAsDirty();
                    _this.model.control.updateValueAndValidity({ onlySelf: true });
                }
            });
            this.subscription = merge$1(this.model.valueChanges, this.model.statusChanges)
                .pipe(filter(function () { return _this.model.dirty && !_this.novalidation; }), debounce(function () { return (_this.hasError ? timer(10) : timer(_this.VALIDATION_DEBOUNCE_MS)); }))
                .subscribe(function () { return _this.update(); });
        }
    };
    FormGroupComponent.prototype.update = function () {
        this.hasError = this.model.status === 'INVALID';
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(this.model.errors);
        }
        else {
            this.errors = this.model.errors;
        }
    };
    FormGroupComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    __decorate([
        Input()
    ], FormGroupComponent.prototype, "hasError", void 0);
    __decorate([
        Input()
    ], FormGroupComponent.prototype, "hasWarning", void 0);
    __decorate([
        Input()
    ], FormGroupComponent.prototype, "hasSuccess", void 0);
    __decorate([
        Input()
    ], FormGroupComponent.prototype, "novalidation", void 0);
    __decorate([
        Input()
    ], FormGroupComponent.prototype, "status", void 0);
    __decorate([
        HostBinding('class.has-error')
    ], FormGroupComponent.prototype, "error", null);
    __decorate([
        HostBinding('class.has-warning')
    ], FormGroupComponent.prototype, "warning", null);
    __decorate([
        HostBinding('class.has-success')
    ], FormGroupComponent.prototype, "success", null);
    __decorate([
        ContentChild(MessagesComponent, { static: false })
    ], FormGroupComponent.prototype, "customErrorMessage", void 0);
    __decorate([
        ContentChild(NgModel, { static: true })
    ], FormGroupComponent.prototype, "model", void 0);
    FormGroupComponent = __decorate([
        Component({
            selector: 'c8y-form-group',
            template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
            host: {
                class: 'form-group'
            }
        })
    ], FormGroupComponent);
    return FormGroupComponent;
}());

var InputGroupListComponent = /** @class */ (function () {
    function InputGroupListComponent() {
        this.plus = true;
        this.minus = true;
        this.onRemove = new EventEmitter();
        this.onAdd = new EventEmitter();
    }
    InputGroupListComponent.prototype.add = function () {
        this.onAdd.emit(this.index);
    };
    InputGroupListComponent.prototype.remove = function () {
        this.onRemove.emit(this.index);
    };
    __decorate([
        Input()
    ], InputGroupListComponent.prototype, "plus", void 0);
    __decorate([
        Input()
    ], InputGroupListComponent.prototype, "minus", void 0);
    __decorate([
        Input()
    ], InputGroupListComponent.prototype, "index", void 0);
    __decorate([
        Output()
    ], InputGroupListComponent.prototype, "onRemove", void 0);
    __decorate([
        Output()
    ], InputGroupListComponent.prototype, "onAdd", void 0);
    InputGroupListComponent = __decorate([
        Component({
            selector: 'c8y-input-group-list',
            template: "<ng-container>\n  <div class=\"input-group\">\n    <ng-content></ng-content>\n    <div class=\"input-group-btn\">\n      <button\n        *ngIf=\"minus\"\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"remove()\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n      <button\n        *ngIf=\"plus\"\n        title=\"{{ 'Add' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"add()\"\n      >\n        <i class=\"fa fa-plus-circle\"></i>\n      </button>\n    </div>\n  </div>\n</ng-container>\n"
        })
    ], InputGroupListComponent);
    return InputGroupListComponent;
}());

var InputGroupListContainerDirective = /** @class */ (function () {
    function InputGroupListContainerDirective() {
    }
    InputGroupListContainerDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.listProjections.map(function (element) {
            if (element !== _this.listProjections.last) {
                setTimeout(function () {
                    element.plus = false;
                });
            }
        });
        this.listProjections.changes.subscribe(function (elements) {
            if (elements.length === 1) {
                setTimeout(function () {
                    elements.first.plus = true;
                    elements.first.minus = false;
                });
                return;
            }
            elements.map(function (element) {
                setTimeout(function () {
                    element.minus = true;
                });
                if (element !== elements.last) {
                    setTimeout(function () {
                        element.plus = false;
                    });
                }
                if (element === elements.last) {
                    setTimeout(function () {
                        element.plus = true;
                    });
                }
            });
        });
    };
    __decorate([
        ContentChildren(InputGroupListComponent)
    ], InputGroupListContainerDirective.prototype, "listProjections", void 0);
    InputGroupListContainerDirective = __decorate([
        Directive({
            selector: '[c8yInputGroupListContainer]'
        })
    ], InputGroupListContainerDirective);
    return InputGroupListContainerDirective;
}());

var JsonValidationPrettifierDirective = /** @class */ (function () {
    function JsonValidationPrettifierDirective(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    JsonValidationPrettifierDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(function () { return _this.clearValidationMessage(); }), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(function (value) {
            _this.validateInputAndPrettify(value);
        });
    };
    JsonValidationPrettifierDirective.prototype.ngOnDestroy = function () {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    JsonValidationPrettifierDirective.prototype.validateInputAndPrettify = function (value) {
        if (value) {
            try {
                var validJsonObject = JSON.parse(value);
                var pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    };
    JsonValidationPrettifierDirective.prototype.setErrorAndValidationMessage = function () {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    };
    JsonValidationPrettifierDirective.prototype.clearValidationMessage = function () {
        this.invalidJSON.emit(undefined);
    };
    JsonValidationPrettifierDirective.ctorParameters = function () { return [
        { type: NgControl }
    ]; };
    __decorate([
        Output()
    ], JsonValidationPrettifierDirective.prototype, "invalidJSON", void 0);
    JsonValidationPrettifierDirective = __decorate([
        Directive({
            selector: 'textarea[prettyValidJson]'
        })
    ], JsonValidationPrettifierDirective);
    return JsonValidationPrettifierDirective;
}());

var TextAreaRowHeightDirective = /** @class */ (function () {
    function TextAreaRowHeightDirective(elem, renderer) {
        this.elem = elem;
        this.renderer = renderer;
        this.rows = 1;
        this.minHeightPerRow = 20;
    }
    TextAreaRowHeightDirective.prototype.ngAfterViewInit = function () {
        var convertedValue = Number(this.heightPerRow);
        if (this.heightPerRow && convertedValue && convertedValue > this.minHeightPerRow) {
            this.setHeight(this.rows * convertedValue + "px");
        }
        else {
            this.setHeight(this.rows * this.minHeightPerRow + "px");
        }
    };
    TextAreaRowHeightDirective.prototype.setHeight = function (value) {
        this.renderer.setStyle(this.elem.nativeElement, 'height', value);
    };
    TextAreaRowHeightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        HostBinding('rows')
    ], TextAreaRowHeightDirective.prototype, "rows", void 0);
    __decorate([
        Input('heightPerRow')
    ], TextAreaRowHeightDirective.prototype, "heightPerRow", void 0);
    TextAreaRowHeightDirective = __decorate([
        Directive({
            selector: 'textarea[heightPerRow]'
        })
    ], TextAreaRowHeightDirective);
    return TextAreaRowHeightDirective;
}());

var RequiredInputPlaceholderDirective = /** @class */ (function () {
    function RequiredInputPlaceholderDirective(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    RequiredInputPlaceholderDirective.prototype.ngAfterViewChecked = function () {
        if (this.el && this.el.nativeElement && this.el.nativeElement.required !== undefined) {
            var required = this.el.nativeElement.required && !this.shouldSkipRequiredHint;
            var placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== required) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, required));
            }
        }
    };
    RequiredInputPlaceholderDirective.prototype.getTextForPlaceholder = function (placeholder, required) {
        if (placeholder === void 0) { placeholder = ''; }
        if (required === void 0) { required = false; }
        this.req = required;
        var requiredText = "(" + this.translationService.instant(gettext('required')) + ")";
        var requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? placeholder + " " + requiredText : requiredText;
    };
    RequiredInputPlaceholderDirective.prototype.updatePlaceholder = function (placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    };
    RequiredInputPlaceholderDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: TranslateService$1 }
    ]; };
    RequiredInputPlaceholderDirective = __decorate([
        Directive({
            selector: 'input[required]'
        })
    ], RequiredInputPlaceholderDirective);
    return RequiredInputPlaceholderDirective;
}());

var IpRangeInputListComponent = /** @class */ (function () {
    function IpRangeInputListComponent() {
    }
    Object.defineProperty(IpRangeInputListComponent.prototype, "data", {
        get: function () {
            return this.ipRangeList;
        },
        set: function (list) {
            this.ipRangeList = list;
            if (this.ipRangeList.length === 0) {
                this.add();
            }
        },
        enumerable: true,
        configurable: true
    });
    IpRangeInputListComponent.prototype.add = function () {
        this.ipRangeList.push({ ip: '', cidr: undefined });
    };
    IpRangeInputListComponent.prototype.remove = function (index) {
        this.ipRangeList.splice(index, 1);
    };
    __decorate([
        Input()
    ], IpRangeInputListComponent.prototype, "data", null);
    IpRangeInputListComponent = __decorate([
        Component({
            selector: 'c8y-ip-range-input-list',
            template: "<c8y-form-group class=\"m-t-8 m-b-8\">\n  <ul c8yInputGroupListContainer class=\"list-unstyled\">\n    <li class=\"m-b-8\" *ngFor=\"let item of data; let i = index\">\n      <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n        <input\n          type=\"text\"\n          name=\"ipAddress\"\n          class=\"form-control m-r-4\"\n          placeholder=\"{{ 'IP range start, e.g.' | translate }} 192.168.0.1\"\n          style=\"flex-grow: 2;\"\n          [(ngModel)]=\"item.ip\"\n          [required]=\"true\"\n          #ipAddress\n        />\n        <input\n          type=\"number\"\n          name=\"cidr\"\n          [min]=\"0\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 20\"\n          [(ngModel)]=\"item.cidr\"\n          [required]=\"true\"\n          #cidr\n        />\n      </c8y-input-group-list>\n    </li>\n  </ul>\n</c8y-form-group>\n"
        })
    ], IpRangeInputListComponent);
    return IpRangeInputListComponent;
}());

var FilterInputComponent = /** @class */ (function () {
    function FilterInputComponent() {
        this.onSearch = new EventEmitter();
        this.filterChange$ = new Subject();
        this.filterTerm = '';
        this.CARRIAGE_RETURN_KEY = 13;
        this.CARRIAGE_RETURN_CODE = 'Enter';
    }
    FilterInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.reset();
        this.filterChange$
            .pipe(debounce(function (event) {
            return event.code === _this.CARRIAGE_RETURN_CODE || event.keyCode === _this.CARRIAGE_RETURN_KEY
                ? timer(10)
                : timer(300);
        }), map(function (e) { return e.target.value; }), distinctUntilChanged())
            .subscribe(function (filterTerm) {
            _this.filterTerm = filterTerm;
            _this.onSearch.emit(filterTerm);
        });
    };
    FilterInputComponent.prototype.reset = function () {
        this.filterTerm = '';
        this.onSearch.emit('');
    };
    FilterInputComponent.prototype.ngOnDestroy = function () {
        this.filterChange$.complete();
    };
    __decorate([
        Input()
    ], FilterInputComponent.prototype, "icon", void 0);
    __decorate([
        Output()
    ], FilterInputComponent.prototype, "onSearch", void 0);
    FilterInputComponent = __decorate([
        Component({
            selector: 'c8y-filter',
            template: "<div class=\"input-group input-group-search\">\n  <input\n    class=\"form-control\"\n    placeholder=\"{{ 'Filter\u2026' | translate }}\"\n    type=\"text\"\n    [value]=\"filterTerm\"\n    (keyup)=\"filterChange$.next($event)\"\n  />\n  <span class=\"input-group-btn\">\n    <button class=\"btn btn-clean\" (click)=\"reset()\">\n      <i [c8yIcon]=\"filterTerm.length === 0 ? icon : 'close'\"></i>\n    </button>\n  </span>\n</div>\n"
        })
    ], FilterInputComponent);
    return FilterInputComponent;
}());

/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 */
var FormsModule = /** @class */ (function () {
    function FormsModule() {
    }
    FormsModule = __decorate([
        NgModule({
            imports: [CommonModule, FormsModule$1],
            exports: [
                PhoneValidationDirective,
                DefaultValidationDirective,
                MinValidationDirective,
                MaxValidationDirective,
                FormsModule$1,
                FormGroupComponent,
                MessageDirective,
                MessagesComponent,
                InputGroupListComponent,
                InputGroupListContainerDirective,
                JsonValidationPrettifierDirective,
                TextAreaRowHeightDirective,
                RequiredInputPlaceholderDirective,
                IpRangeInputListComponent,
                FilterInputComponent
            ],
            declarations: [
                PhoneValidationDirective,
                DefaultValidationDirective,
                MinValidationDirective,
                MaxValidationDirective,
                FormGroupComponent,
                MessageDirective,
                MessagesComponent,
                InputGroupListComponent,
                InputGroupListContainerDirective,
                JsonValidationPrettifierDirective,
                TextAreaRowHeightDirective,
                RequiredInputPlaceholderDirective,
                IpRangeInputListComponent,
                FilterInputComponent
            ]
        })
    ], FormsModule);
    return FormsModule;
}());

var TotpChallengeComponent = /** @class */ (function () {
    function TotpChallengeComponent(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        /**
         * Calls the verify endpoint if set to true (default true)
         */
        this.verify = true;
        /**
         * Emits the token on success.
         */
        this.onSuccess = new EventEmitter();
        this.model = {
            token: ''
        };
        this.loading = false;
        this.hasError = false;
    }
    TotpChallengeComponent.prototype.verifyCode = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.loading = true;
                        this.hasError = false;
                        if (!this.verify) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.users.verifyTotpCode(this.model.token)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.onSuccess.emit(this.model.token);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.hasError = true;
                        this.alert.removeLastDanger();
                        this.loading = false;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TotpChallengeComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: UserService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], TotpChallengeComponent.prototype, "verify", void 0);
    __decorate([
        Output()
    ], TotpChallengeComponent.prototype, "onSuccess", void 0);
    __decorate([
        Input()
    ], TotpChallengeComponent.prototype, "loading", void 0);
    __decorate([
        Input()
    ], TotpChallengeComponent.prototype, "hasError", void 0);
    TotpChallengeComponent = __decorate([
        Component({
            selector: 'c8y-totp-challenge',
            template: "<form\n  #totpForm=\"ngForm\"\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"verifyCode()\"\n  novalidate\n>\n\n  <c8y-form-group\n    [hasError]=\"hasError\"\n    [novalidation]=\"true\"\n  >\n    <label\n      translate\n      for=\"totpToken\"\n    >Verification code</label>\n    <input\n      id=\"totpToken\"\n      [(ngModel)]=\"model.token\"\n      name=\"totpToken\"\n      type=\"text\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      autocomplete=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{'Verification code' | translate}}\"\n      required\n    >\n    <c8y-messages>\n      <c8y-message *ngIf=\"hasError\" translate>\n        Invalid verification code. In case of key loss, please contact your platform administrator.\n      </c8y-message>\n    </c8y-messages>\n    <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n      In case of key loss, please contact your platform administrator.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\" \n    [disabled]=\"!totpForm.form.valid || loading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >Verify</button>\n\n</form>\n",
            viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
        })
    ], TotpChallengeComponent);
    return TotpChallengeComponent;
}());

var SmsChallengeComponent = /** @class */ (function () {
    function SmsChallengeComponent(loginService, users, alert) {
        this.loginService = loginService;
        this.users = users;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.model = {
            smsToken: ''
        };
        this.isLoading = false;
        this.resendTfa = '0';
    }
    SmsChallengeComponent.prototype.verifyTFACode = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isLoading = true;
                        if (!this.useOAuthInternal()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.verifyCodeWithOauth()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.verifyCodeWithBasicAuth()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        this.isLoading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    SmsChallengeComponent.prototype.resendTFASms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        this.isLoading = true;
                        return [4 /*yield*/, this.users.verifyTFACode(this.resendTfa)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.res.status === 403) {
                            this.loginService.cleanMessages();
                            this.loginService.addSuccessMessage('resend_sms');
                        }
                        else {
                            this.alert.addServerFailure(e_1);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SmsChallengeComponent.prototype.useOAuthInternal = function () {
        return this.loginService.isPasswordGrantLogin(this.credentials);
    };
    SmsChallengeComponent.prototype.verifyCodeWithOauth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, e_2, resStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        credentials = this.credentials;
                        return [4 /*yield*/, this.loginService.switchLoginMode(__assign({}, credentials, { tfa: this.model.smsToken }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loginService.verifyAppAccess()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.loginService.authFulfilled()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        resStatus = e_2.res && e_2.res.status;
                        if (resStatus === 401) {
                            // it is assumed that the user and password are correct so it must be the tfa code
                            this.alert.danger(gettext('Invalid code'));
                        }
                        else {
                            this.alert.addServerFailure(e_2);
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SmsChallengeComponent.prototype.verifyCodeWithBasicAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, tfaToken, e_3, resStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.users.verifyTFACode(this.model.smsToken)];
                    case 1:
                        res = (_a.sent()).res;
                        tfaToken = res.headers.get('tfatoken');
                        this.credentials.tfa = tfaToken;
                        this.loginWithTFA(tfaToken);
                        return [3 /*break*/, 3];
                    case 2:
                        e_3 = _a.sent();
                        resStatus = e_3.res && e_3.res.status;
                        // BE returns 403 in case of invalid tfa code
                        if (resStatus === 403) {
                            this.alert.danger(gettext('Invalid code'));
                        }
                        else {
                            this.alert.addServerFailure(e_3);
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SmsChallengeComponent.prototype.loginWithTFA = function (tfaToken) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials)];
                    case 1:
                        _a.sent();
                        this.loginService.saveTFAToken(tfaToken, sessionStorage);
                        if (this.loginService.rememberMe) {
                            this.loginService.saveTFAToken(tfaToken, localStorage);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_4 = _a.sent();
                        this.alert.addServerFailure(e_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SmsChallengeComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: UserService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], SmsChallengeComponent.prototype, "credentials", void 0);
    __decorate([
        Output()
    ], SmsChallengeComponent.prototype, "onCancel", void 0);
    SmsChallengeComponent = __decorate([
        Component({
            selector: 'c8y-sms-challenge',
            template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Insert the code received via SMS</div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Verification code' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"top-m-sm\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"btn btn-link btn-sm pull-right\"\n      (click)=\"onCancel.emit()\"\n      translate\n      >Login</a\n    >\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"resendTFASms()\"\n      translate\n      >Send new code</a\n    >\n  </div>\n</form>\n"
        })
    ], SmsChallengeComponent);
    return SmsChallengeComponent;
}());

var TotpSetupComponent = /** @class */ (function () {
    function TotpSetupComponent(user, alert) {
        this.user = user;
        this.alert = alert;
    }
    Object.defineProperty(TotpSetupComponent.prototype, "qrCodeImage", {
        get: function () {
            return this.totpSecret ? this.totpSecret.secretQrUrl : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TotpSetupComponent.prototype, "secret", {
        get: function () {
            return this.totpSecret ? this.totpSecret.rawSecret : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TotpSetupComponent.prototype, "qrData", {
        get: function () {
            // TODO: waiting for BE:, now we need extract it from secretQrUrl
            // https://cumulocity.atlassian.net/browse/MTM-36387
            // return this.totpSecret ? this.totpSecret.qrData : '';
            var otpAuth = this.qrCodeImage.split('chl=')[1];
            if (!otpAuth) {
                this.alert.danger(gettext('Failed to generate a QR code.'));
                return '';
            }
            return decodeURIComponent(otpAuth);
        },
        enumerable: true,
        configurable: true
    });
    TotpSetupComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.user.generateTotpSecret()];
                    case 1:
                        data = (_a.sent()).data;
                        this.totpSecret = data;
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alert.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TotpSetupComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: AlertService }
    ]; };
    TotpSetupComponent = __decorate([
        Component({
            selector: 'c8y-totp-setup',
            template: "<div class=\"text-center\">\n  <p\n    class=\"lead bottom-m-md\"\n    translate\n  >\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n\n  <qrcode\n    *ngIf=\"totpSecret\"\n    [width]=\"300\"\n    [qrdata]=\"qrData\"\n    [cssClass]=\"'bottom-m-md'\"\n    [errorCorrectionLevel]=\"'M'\"\n  ></qrcode>\n  <p class=\"text-center text-muted\">\n    {{secret}}\n  </p>\n</div>\n"
        })
    ], TotpSetupComponent);
    return TotpSetupComponent;
}());

var LoginViews;
(function (LoginViews) {
    LoginViews[LoginViews["None"] = 0] = "None";
    LoginViews[LoginViews["Credentials"] = 1] = "Credentials";
    LoginViews[LoginViews["RecoverPassword"] = 2] = "RecoverPassword";
    LoginViews[LoginViews["SmsChallenge"] = 3] = "SmsChallenge";
    LoginViews[LoginViews["ChangePassword"] = 4] = "ChangePassword";
    LoginViews[LoginViews["TotpChallenge"] = 5] = "TotpChallenge";
    LoginViews[LoginViews["TotpSetup"] = 6] = "TotpSetup";
    LoginViews[LoginViews["ProvidePhoneNumber"] = 7] = "ProvidePhoneNumber";
})(LoginViews || (LoginViews = {}));

var ProvidePhoneNumberComponent = /** @class */ (function () {
    function ProvidePhoneNumberComponent(loginService, alert, userService) {
        this.loginService = loginService;
        this.alert = alert;
        this.userService = userService;
        this.onCancel = new EventEmitter();
        this.onChangeView = new EventEmitter();
        this.requestInProgress = false;
        this.sendTfa = '0';
    }
    ProvidePhoneNumberComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, 4, 5]);
                        this.requestInProgress = true;
                        return [4 /*yield*/, this.userService.savePhoneNumber(this.phoneNumber)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.sendTFASms()];
                    case 2:
                        _a.sent();
                        this.onChangeView.emit({
                            view: LoginViews.SmsChallenge,
                            credentials: this.credentials
                        });
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        this.alert.addServerFailure(e_1);
                        return [3 /*break*/, 5];
                    case 4:
                        this.requestInProgress = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ProvidePhoneNumberComponent.prototype.sendTFASms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.userService.verifyTFACode(this.sendTfa)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        if (e_2.res.status === 403) {
                            this.loginService.cleanMessages();
                            this.loginService.addSuccessMessage('send_sms');
                        }
                        else {
                            throw e_2;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ProvidePhoneNumberComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: AlertService },
        { type: UserService }
    ]; };
    __decorate([
        Input()
    ], ProvidePhoneNumberComponent.prototype, "credentials", void 0);
    __decorate([
        Output()
    ], ProvidePhoneNumberComponent.prototype, "onCancel", void 0);
    __decorate([
        Output()
    ], ProvidePhoneNumberComponent.prototype, "onChangeView", void 0);
    ProvidePhoneNumberComponent = __decorate([
        Component({
            selector: 'c8y-provide-phone-number',
            template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"save()\" novalidate>\n  <c8y-form-group>\n    <label translate>Provide your phone number</label>\n\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"phoneNumber\"\n      #contactPhone=\"ngModel\"\n      type=\"text\"\n      name=\"phone\"\n      autocomplete=\"off\"\n      placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n      c8yPhoneValidation\n      c8yDefaultValidation=\"phoneNumber\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Save and continue' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    [disabled]=\"requestInProgress || twoFactorForm.invalid\"\n  >\n    {{ 'Save and continue' | translate }}\n  </button>\n\n  <div class=\"m-t-16\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"btn btn-link pull-right\"\n      href=\"#\"\n      (click)=\"onCancel.emit()\"\n    >\n      {{ 'Login' | translate }}\n    </a>\n  </div>\n</form>\n"
        })
    ], ProvidePhoneNumberComponent);
    return ProvidePhoneNumberComponent;
}());

/**
 * The angular module definition for new password.
 * @exports PasswordStrengthComponent
 * @exports PasswordCheckListComponent
 * @exports PasswordConfirm
 * @exports NewPasswordComponent
 * @exports PasswordConfirmModalComponent
 */
var AuthenticationModule = /** @class */ (function () {
    function AuthenticationModule() {
    }
    AuthenticationModule = __decorate([
        NgModule({
            declarations: [
                TotpChallengeComponent,
                PasswordConfirm,
                PasswordStrengthComponent,
                PasswordCheckListComponent,
                NewPasswordComponent,
                PasswordConfirmModalComponent,
                SmsChallengeComponent,
                TotpSetupComponent,
                ProvidePhoneNumberComponent
            ],
            imports: [FormsModule, TooltipModule, CommonModule, ModalModule, QRCodeModule],
            exports: [
                TotpChallengeComponent,
                PasswordStrengthComponent,
                PasswordCheckListComponent,
                PasswordConfirm,
                NewPasswordComponent,
                PasswordConfirmModalComponent,
                SmsChallengeComponent,
                TotpSetupComponent,
                ProvidePhoneNumberComponent
            ],
            entryComponents: [PasswordConfirmModalComponent],
            providers: [PasswordStrengthCheckerService, PasswordService]
        })
    ], AuthenticationModule);
    return AuthenticationModule;
}());

var UserTotpRevokeComponent = /** @class */ (function () {
    function UserTotpRevokeComponent(users, alert) {
        this.users = users;
        this.alert = alert;
        this.revokeEmitter = new EventEmitter();
    }
    UserTotpRevokeComponent.prototype.revoke = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.users.totpRevokeSecret(this.user)];
                    case 1:
                        _a.sent();
                        this.alert.success(gettext('User TOTP secret revoked.'));
                        this.revokeEmitter.next();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        this.alert.addServerFailure(e_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    UserTotpRevokeComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], UserTotpRevokeComponent.prototype, "user", void 0);
    __decorate([
        Output('revoke')
    ], UserTotpRevokeComponent.prototype, "revokeEmitter", void 0);
    UserTotpRevokeComponent = __decorate([
        Component({
            selector: 'c8y-user-totp-revoke',
            template: "<button\n  type=\"button\"\n  class=\"btn btn-default\"\n  [popover]=\"confirm\"\n  [popoverTitle]=\"'Revoke TOTP secret' | translate\"\n  #popover=\"bs-popover\"\n  placement=\"right\"\n>\n  <i c8yIcon=\"key\"></i> {{ 'Revoke TOTP secret' | translate }}\n</button>\n\n<ng-template #confirm>\n  <p class=\"m-b-16\" translate>\n    This action will revoke the user's stored TOTP secret which will require a new setup.\n  </p>\n  <button\n    title=\"{{ 'Revoke' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-danger\"\n    (click)=\"revoke(); popover.hide()\"\n    translate\n  >\n    Revoke\n  </button>\n  <button\n    title=\"{{ 'Cancel' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    (click)=\"popover.hide()\"\n    translate\n  >\n    Cancel\n  </button>\n</ng-template>\n"
        })
    ], UserTotpRevokeComponent);
    return UserTotpRevokeComponent;
}());

/**
 * The angular module definition for the user menu.
 * @exports UserMenuComponent
 * @exports UserMenuItemComponent
 * @exports UserEditComponent
 * @exports UserEditModalComponent
 */
var UserModule = /** @class */ (function () {
    function UserModule() {
    }
    UserModule = __decorate([
        NgModule({
            declarations: [
                UserMenuOutletComponent,
                UserEditComponent,
                UserEditModalComponent,
                UserMenuItemComponent,
                UserTotpSetupComponent,
                UserTotpRevokeComponent,
            ],
            imports: [
                FormsModule,
                CommonModule,
                ModalModule,
                BsDropdownModule,
                AuthenticationModule,
                AlertModule,
                RouterModule$1,
                TooltipModule.forRoot(),
                PopoverModule
            ],
            exports: [
                UserMenuOutletComponent,
                UserMenuItemComponent,
                UserEditComponent,
                UserEditModalComponent,
                UserTotpSetupComponent,
                UserTotpRevokeComponent
            ],
            entryComponents: [
                UserEditModalComponent,
                UserTotpSetupComponent,
                UserTotpRevokeComponent
            ]
        })
    ], UserModule);
    return UserModule;
}());

/**
 * The angular module definition for the header of the application.
 * @exports HeaderBarComponent
 * @exports TitleComponent
 * @exports TitleOutletComponent
 * @exports AppIconComponent
 * @exports AppSwitcherComponent
 */
var HeaderModule = /** @class */ (function () {
    function HeaderModule() {
    }
    HeaderModule = __decorate([
        NgModule({
            declarations: [
                TitleComponent,
                HeaderBarComponent,
                TitleOutletComponent,
                AppIconComponent,
                AppSwitcherComponent,
                RightDrawerComponent
            ],
            imports: [
                BsDropdownModule,
                UserModule,
                SearchModule,
                CommonModule,
                ActionModule,
                BreadcrumbModule,
                NavigatorModule,
                ProductExperienceModule
            ],
            exports: [
                HeaderBarComponent,
                TitleComponent,
                TitleOutletComponent,
                AppIconComponent,
                AppSwitcherComponent,
                RightDrawerComponent
            ]
        })
    ], HeaderModule);
    return HeaderModule;
}());

var ChangePasswordComponent = /** @class */ (function () {
    function ChangePasswordComponent(loginService, users, passwordStrengthCheckerService, options, alert) {
        this.loginService = loginService;
        this.users = users;
        this.passwordStrengthCheckerService = passwordStrengthCheckerService;
        this.options = options;
        this.alert = alert;
        this.onChangeView = new EventEmitter();
        this.passwordPattern = /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/;
        this.isLoading = false;
        this.model = {
            tenantId: '',
            email: '',
            newPassword: '',
            newPasswordConfirm: ''
        };
        this.emailReadOnly = false;
        this.passwordStrengthEnforced = false;
        this.TOKEN_PARAM = 'token';
        this.EMAIL_PARAM = 'email';
    }
    ChangePasswordComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.model.tenantId = this.loginService.getTenant();
                        this.model.email = this.options.get(this.EMAIL_PARAM, '');
                        this.emailReadOnly = !!this.model.email;
                        _a = this;
                        return [4 /*yield*/, this.loginService.getPasswordStrengthEnforced()];
                    case 1:
                        _a.passwordStrengthEnforced = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ChangePasswordComponent.prototype.changePassword = function () {
        return __awaiter(this, void 0, void 0, function () {
            var passwordStrengthColor, resetPassword, res, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        passwordStrengthColor = this.passwordStrengthCheckerService.getStrengthColor(this.model.newPassword);
                        resetPassword = {
                            token: this.credentials.token,
                            email: this.model.email,
                            newPassword: this.model.newPassword,
                            passwordStrength: passwordStrengthColor.passwordStrength
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        this.isLoading = true;
                        return [4 /*yield*/, this.users.resetPassword(resetPassword, this.model.tenantId)];
                    case 2:
                        res = (_a.sent()).res;
                        if (res.status === 200) {
                            this.loginService.addSuccessMessage('password_changed');
                            this.credentials.token = undefined;
                            this.options.set(this.TOKEN_PARAM, undefined);
                            this.onChangeView.emit({ view: LoginViews.Credentials });
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        this.alert.addServerFailure(e_1);
                        return [3 /*break*/, 5];
                    case 4:
                        this.loginService.reset();
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ChangePasswordComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: UserService },
        { type: PasswordService },
        { type: OptionsService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], ChangePasswordComponent.prototype, "credentials", void 0);
    __decorate([
        Output()
    ], ChangePasswordComponent.prototype, "onChangeView", void 0);
    ChangePasswordComponent = __decorate([
        Component({
            selector: 'c8y-change-password',
            template: "<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"changePassword()\"\n  #changePasswordForm=\"ngForm\"\n  novalidate\n>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n      [readonly]=\"emailReadOnly\"\n    />\n  </c8y-form-group>\n\n  <div class=\"row content-flex-50\">\n    <div class=\"col-7\">\n      <c8y-form-group>\n        <label translate>New password</label>\n        <input\n          [(ngModel)]=\"model.newPassword\"\n          #newPassword=\"ngModel\"\n          type=\"password\"\n          name=\"newPassword\"\n          class=\"form-control\"\n          placeholder=\"{{ 'New password' | translate }}\"\n          [pattern]=\"passwordPattern\"\n          autocomplete=\"new-password\"\n          [passwordStrengthEnforced]='passwordStrengthEnforced'\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"pattern\"\n            [text]=\"loginService.ERROR_MESSAGES.pattern_newPassword\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n\n      <c8y-form-group>\n        <label translate>Confirm password</label>\n        <input\n          [(ngModel)]=\"model.newPasswordConfirm\"\n          #newPasswordConfirm=\"ngModel\"\n          type=\"password\"\n          name=\"newPasswordConfirm\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Confirm password' | translate }}\"\n          passwordConfirm=\"newPassword\"\n          autocomplete=\"new-password\"\n          required\n        />\n        <c8y-messages>\n          <c8y-message\n            name=\"passwordConfirm\"\n            [text]=\"loginService.ERROR_MESSAGES.passwordConfirm\"\n          ></c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n    </div>\n    <div class=\"col-5\">\n      <c8y-password-strength\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword\"\n      ></c8y-password-strength>\n      <c8y-password-check-list\n        class=\"m-t-32\"\n        [password]=\"model.newPassword\"\n        [hidden]=\"!model.newPassword || !passwordStrengthEnforced\"\n      ></c8y-password-check-list>\n    </div>\n  </div>\n\n  <button\n    title=\"{{ 'Set password' | translate }}\"\n    [disabled]=\"!changePasswordForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Set password\n  </button>\n</form>\n"
        })
    ], ChangePasswordComponent);
    return ChangePasswordComponent;
}());

var CredentialsComponent = /** @class */ (function () {
    function CredentialsComponent(loginService, alert, ui) {
        this.loginService = loginService;
        this.alert = alert;
        this.ui = ui;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {};
        this.isLoading = false;
        this.showLoginForm = false;
        this.showBasicAuth = false;
        this.oauthOptions = {};
        this.PASSWORD_RESET_HEADER_NAME = 'passwordresettoken';
        this.NO_PHONE_HEADER_NAME = 'NoPhoneHeader';
    }
    CredentialsComponent.prototype.ngOnInit = function () {
        var _a = this.loginService, oauthOptions = _a.oauthOptions, loginMode = _a.loginMode;
        this.model.tenant = this.loginService.getTenant();
        this.showLoginForm =
            typeof loginMode.visibleOnLoginPage === 'undefined' || loginMode.visibleOnLoginPage;
        this.showBasicAuth = loginMode.type === 'BASIC';
        this.oauthOptions = oauthOptions;
    };
    CredentialsComponent.prototype.redirectToOauth = function () {
        this.loginService.redirectToOauth();
    };
    /**
     * Allows to login into the application using basic auth.
     * If successful logged in the client is set in shared/cumulocity.service.ts
     */
    CredentialsComponent.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var basicAuth, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        this.isLoading = true;
                        basicAuth = this.loginService.useBasicAuth(this.model);
                        return [4 /*yield*/, this.loginService.login(basicAuth, this.model)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.res && e_1.res.headers && e_1.res.headers.get(this.PASSWORD_RESET_HEADER_NAME)) {
                            this.handlePasswordReset(e_1.res);
                        }
                        else if (e_1.res && e_1.res.status === 401 && /pin/i.test(e_1.data.message)) {
                            this.handleSmsChallenge(e_1.data.message);
                        }
                        else if (e_1.res && e_1.res.status === 401 && /TOTP/i.test(e_1.data.message)) {
                            this.handleTotpChallenge(e_1.data.message);
                        }
                        else if (e_1.res &&
                            e_1.res.headers &&
                            e_1.res.headers.get(this.NO_PHONE_HEADER_NAME) &&
                            !this.loginService.isSupportUser(this.model)) {
                            this.handleNoPhoneNumberProvided();
                        }
                        else {
                            this.loginService.reset();
                            this.alert.addServerFailure(e_1);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CredentialsComponent.prototype.handlePasswordReset = function (e) {
        this.alert.removeLastDanger();
        this.model.token = e.headers.get(this.PASSWORD_RESET_HEADER_NAME);
        this.onChangeView.emit({ view: LoginViews.ChangePassword, credentials: this.model });
    };
    CredentialsComponent.prototype.handleTotpChallenge = function (message) {
        if (/TOTP setup required/i.test(message)) {
            this.onChangeView.emit({ view: LoginViews.TotpSetup, credentials: this.model });
        }
        else {
            this.onChangeView.emit({ view: LoginViews.TotpChallenge, credentials: this.model });
        }
    };
    CredentialsComponent.prototype.handleSmsChallenge = function (message) {
        if (/pin has already been generated/i.test(message)) {
            this.alert.warning(gettext('The verification code was already sent. For a new verification code, please click on the link above.'));
        }
        this.alert.removeLastDanger();
        this.onChangeView.emit({ view: LoginViews.SmsChallenge, credentials: this.model });
    };
    CredentialsComponent.prototype.handleNoPhoneNumberProvided = function () {
        this.onChangeView.emit({ view: LoginViews.ProvidePhoneNumber, credentials: this.model });
        this.alert.warning(gettext('Two-factor authentication has been turned on for this account. Provide your phone number above to save it in your user profile and start receiving verification codes via SMS.'));
    };
    CredentialsComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: AlertService },
        { type: AppStateService }
    ]; };
    __decorate([
        Output()
    ], CredentialsComponent.prototype, "onChangeView", void 0);
    CredentialsComponent = __decorate([
        Component({
            selector: 'c8y-credentials',
            template: "<div id=\"oauth\" *ngIf=\"oauthOptions.initRequest && oauthOptions.visibleOnLoginPage\">\n  <button\n    title=\"{{ oauthOptions.buttonName | translate }}\"\n    (click)=\"redirectToOauth()\"\n    class=\"btn btn-block btn-lg form-group\"\n  >\n    <i [c8yIcon]=\"'sign-in'\" class=\"pull-left\"></i>\n    {{ oauthOptions.buttonName | translate }}\n  </button>\n</div>\n\n<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"login()\"\n  #loginForm=\"ngForm\"\n  *ngIf=\"showLoginForm\"\n  novalidate\n>\n  <div\n    class=\"legend form-block center\"\n    *ngIf=\"!(oauthOptions.initRequest && oauthOptions.visibleOnLoginPage); else orLegend\"\n    translate\n  >\n    Login\n  </div>\n  <ng-template #orLegend>\n    <div class=\"legend form-block center\" translate>or</div>\n  </ng-template>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"user\" translate>Username</label>\n    <input\n      [(ngModel)]=\"model.user\"\n      #user=\"ngModel\"\n      type=\"text\"\n      name=\"user\"\n      id=\"user\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. joe or joe.doe@example.com`LOCALIZE`' | translate }}\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"password\" translate>Password</label>\n    <input\n      [(ngModel)]=\"model.password\"\n      #password=\"ngModel\"\n      type=\"password\"\n      name=\"password\"\n      id=\"password\"\n      class=\"form-control\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <div class=\"form-group\" *ngIf=\"showBasicAuth\">\n    <label title=\"{{ 'Remember me' | translate }}\" class=\"c8y-checkbox\">\n      <input type=\"checkbox\" name=\"remember\" [(ngModel)]=\"loginService.rememberMe\" />\n      <span></span>\n      <span>{{ 'Remember me' | translate }}</span>\n    </label>\n  </div>\n  <button\n    title=\"{{ 'Log in' | translate }}\"\n    [disabled]=\"!loginForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Log in' | translate }}\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <a\n      title=\"{{ 'Forgot password?' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.RecoverPassword })\"\n      >{{ 'Forgot password?' | translate }}</a\n    >\n  </div>\n  <div class=\"text-center top-m-sm\" *ngIf=\"!!(ui.state$ | async).loginExtraLink\">\n    <a\n      title=\"{{ (ui.state$ | async).loginExtraLink.label }}\"\n      [href]=\"(ui.state$ | async).loginExtraLink.url\"\n      class=\"btn btn-link btn-sm\"\n    >\n      {{ (ui.state$ | async).loginExtraLink.label }}</a\n    >\n  </div>\n</form>\n"
        })
    ], CredentialsComponent);
    return CredentialsComponent;
}());

var LoginComponent = /** @class */ (function () {
    /**
     * Just DI.
     */
    function LoginComponent(loginService, options, alert) {
        this.loginService = loginService;
        this.options = options;
        this.alert = alert;
        this.currentView = LoginViews.None;
        this.LOGIN_VIEWS = LoginViews;
        this.disabled = false;
        this.credentials = {};
        this.displayAlerts = false;
        this.TOKEN_PARAM = 'token';
    }
    LoginComponent.prototype.ngOnInit = function () {
        var token = this.getResetPasswordToken();
        if (this.loginService.isFirstLogin) {
            if (!token) {
                this.loginAutomatically();
            }
            else {
                this.credentials.token = token;
                this.reset();
            }
        }
        this.loginService.isFirstLogin = false;
    };
    LoginComponent.prototype.handleLoginTemplate = function (event) {
        this.currentView = event.view;
        this.credentials = event.credentials || {};
    };
    LoginComponent.prototype.onkeyup = function (event) {
        if (event.key !== 'Enter') {
            this.loginService.cleanMessages();
        }
    };
    LoginComponent.prototype.reset = function () {
        this.loginService.reset();
        this.setView();
        this.loginService.cleanMessages();
    };
    LoginComponent.prototype.loginAutomatically = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, loginMode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.loginService.login()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        loginMode = this.loginService.loginMode.type;
                        if (loginMode === 'OAUTH2') {
                            this.loginService.redirectToOauth();
                        }
                        else {
                            this.reset();
                            if (loginMode === 'OAUTH2_INTERNAL' && window.location.protocol !== 'https:') {
                                this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                            }
                            else if (e_1.res && e_1.res.status === 403) {
                                this.alert.addServerFailure(e_1);
                            }
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LoginComponent.prototype.setView = function () {
        if (this.credentials && this.credentials.token) {
            this.handleLoginTemplate({ view: LoginViews.ChangePassword, credentials: this.credentials });
        }
        else {
            this.handleLoginTemplate({ view: LoginViews.Credentials });
        }
    };
    LoginComponent.prototype.getResetPasswordToken = function () {
        var token = this.options.get(this.TOKEN_PARAM);
        if (token) {
            this.options.set(this.TOKEN_PARAM, undefined); // only use once
        }
        return token;
    };
    LoginComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: OptionsService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], LoginComponent.prototype, "name", void 0);
    __decorate([
        HostListener('keyup', ['$event'])
    ], LoginComponent.prototype, "onkeyup", null);
    LoginComponent = __decorate([
        Component({
            selector: 'c8y-login',
            template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <div class=\"card-block\">\n    <img class=\"mainlogo\">\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-provide-phone-number\n      *ngSwitchCase=\"LOGIN_VIEWS.ProvidePhoneNumber\"\n      (onCancel)=\"reset()\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-provide-phone-number>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </div>\n</div>\n"
        })
    ], LoginComponent);
    return LoginComponent;
}());

var RecoverPasswordComponent = /** @class */ (function () {
    function RecoverPasswordComponent(users, loginService) {
        this.users = users;
        this.loginService = loginService;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.isLoading = false;
        this.model = {
            email: '',
            tenantId: ''
        };
    }
    RecoverPasswordComponent.prototype.ngOnInit = function () {
        this.model.tenantId = this.loginService.getTenant();
    };
    RecoverPasswordComponent.prototype.resetPassword = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        this.isLoading = true;
                        return [4 /*yield*/, this.users.sendPasswordResetMail(this.model.email, this.model.tenantId)];
                    case 1:
                        res = (_a.sent()).res;
                        if (res.status === 200) {
                            this.loginService.addSuccessMessage('password_reset_requested');
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        this.loginService.reset();
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RecoverPasswordComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: LoginService }
    ]; };
    __decorate([
        Output()
    ], RecoverPasswordComponent.prototype, "onChangeView", void 0);
    RecoverPasswordComponent = __decorate([
        Component({
            selector: 'c8y-recover-password',
            template: "<form #resetForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n  <div class=\"legend form-block center\" translate>Forgot password?</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Reset password' | translate }}\"\n    [disabled]=\"!resetForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Reset password\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <p>\n      <a\n        title=\"{{ 'Login' | translate }}\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.Credentials })\"\n        translate\n        >Login</a\n      >\n    </p>\n  </div>\n</form>\n"
        })
    ], RecoverPasswordComponent);
    return RecoverPasswordComponent;
}());

var TotpAuthComponent = /** @class */ (function () {
    function TotpAuthComponent(loginService, userService, alert) {
        this.loginService = loginService;
        this.userService = userService;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.loading = false;
        this.hasError = false;
    }
    Object.defineProperty(TotpAuthComponent.prototype, "isSetup", {
        get: function () {
            return this.view === LoginViews.TotpSetup;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * In case of a setup we need the user to be authorized
     * first.
     */
    TotpAuthComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.view === this.LOGIN_VIEWS.TotpSetup)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    TotpAuthComponent.prototype.onTotpSuccess = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, 7, 8]);
                        this.loading = true;
                        this.hasError = false;
                        this.credentials.tfa = code;
                        if (!this.isSetup) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.userService.activateTotp()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.loginService.verifyAppAccess()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.loginService.authFulfilled()];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 6:
                        e_1 = _a.sent();
                        this.alert.removeLastDanger();
                        if (e_1.data && e_1.data.message === 'Access is denied') {
                            this.alert.addServerFailure(e_1);
                        }
                        if (e_1.data && e_1.data.message === 'Authentication failed! : User account is locked') {
                            this.alert.warning(gettext('Authentication failed due to: user account is locked.'));
                        }
                        else {
                            this.hasError = true;
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        this.loading = false;
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    TotpAuthComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: UserService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], TotpAuthComponent.prototype, "credentials", void 0);
    __decorate([
        Input()
    ], TotpAuthComponent.prototype, "view", void 0);
    __decorate([
        Output()
    ], TotpAuthComponent.prototype, "onCancel", void 0);
    TotpAuthComponent = __decorate([
        Component({
            selector: 'c8y-totp-auth',
            template: "<div\n  class=\"legend form-block center\"\n  translate\n>Two-factor authentication</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\"></c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n></c8y-totp-challenge>\n\n<div class=\"top-m-sm text-center\">\n  <a\n    title=\"{{ 'Cancel' | translate }}\"\n    class=\"btn btn-link btn-sm\"\n    (click)=\"onCancel.emit()\"\n    translate\n  >Cancel</a>\n</div>\n"
        })
    ], TotpAuthComponent);
    return TotpAuthComponent;
}());

var StrengthValidatorService = /** @class */ (function () {
    function StrengthValidatorService(passwordService) {
        this.passwordService = passwordService;
    }
    StrengthValidatorService.prototype.isStrong = function (password) {
        return this.isPasswordGreen(this.passwordService.getStrengthColor(password).passwordStrength);
    };
    StrengthValidatorService.prototype.isPasswordGreen = function (strength) {
        return strength === PasswordStrength.GREEN;
    };
    StrengthValidatorService.ctorParameters = function () { return [
        { type: PasswordService }
    ]; };
    StrengthValidatorService.ngInjectableDef = ɵɵdefineInjectable({ factory: function StrengthValidatorService_Factory() { return new StrengthValidatorService(ɵɵinject(PasswordService)); }, token: StrengthValidatorService, providedIn: "root" });
    StrengthValidatorService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], StrengthValidatorService);
    return StrengthValidatorService;
}());

var PasswordStrengthValidatorDirective = /** @class */ (function () {
    function PasswordStrengthValidatorDirective(passwordService) {
        this.passwordService = passwordService;
    }
    PasswordStrengthValidatorDirective_1 = PasswordStrengthValidatorDirective;
    Object.defineProperty(PasswordStrengthValidatorDirective.prototype, "passwordStrengthEnforced", {
        set: function (value) {
            this.forced = value;
        },
        enumerable: true,
        configurable: true
    });
    PasswordStrengthValidatorDirective.prototype.validate = function (control) {
        var strengthFulfilled = this.passwordService.isStrong(control.value || '');
        var enforcementForcedAndNotFulfilled = this.forced && !strengthFulfilled;
        return enforcementForcedAndNotFulfilled ? { passwordStrength: true } : null;
    };
    var PasswordStrengthValidatorDirective_1;
    PasswordStrengthValidatorDirective.ctorParameters = function () { return [
        { type: StrengthValidatorService }
    ]; };
    __decorate([
        Input()
    ], PasswordStrengthValidatorDirective.prototype, "passwordStrengthEnforced", null);
    PasswordStrengthValidatorDirective = PasswordStrengthValidatorDirective_1 = __decorate([
        Directive({
            selector: '[passwordStrengthEnforced]',
            providers: [{ provide: NG_VALIDATORS, useExisting: PasswordStrengthValidatorDirective_1, multi: true }]
        })
    ], PasswordStrengthValidatorDirective);
    return PasswordStrengthValidatorDirective;
}());

/**
 * The angular module definition for the login.
 * @exports LoginComponent
 */
var LoginModule = /** @class */ (function () {
    function LoginModule() {
    }
    LoginModule_1 = LoginModule;
    LoginModule.forRoot = function () {
        return {
            ngModule: LoginModule_1,
            providers: LoginModule_1.providers()
        };
    };
    LoginModule.providers = function () {
        return [LoginService];
    };
    var LoginModule_1;
    LoginModule = LoginModule_1 = __decorate([
        NgModule({
            declarations: [
                LoginComponent,
                RecoverPasswordComponent,
                ChangePasswordComponent,
                CredentialsComponent,
                TotpAuthComponent,
                PasswordStrengthValidatorDirective
            ],
            imports: [
                FormsModule$1,
                TooltipModule,
                CommonModule,
                AuthenticationModule,
                AlertModule,
                FormsModule
            ],
            exports: [LoginComponent]
        })
    ], LoginModule);
    return LoginModule;
}());

var TabComponent = /** @class */ (function () {
    function TabComponent(tabs) {
        this.tabs = tabs;
        this.label = '';
    }
    TabComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        setTimeout(function () { return _this.tabs.add(_this); });
    };
    TabComponent.prototype.ngOnDestroy = function () {
        this.tabs.remove(this);
    };
    TabComponent.ctorParameters = function () { return [
        { type: TabsService }
    ]; };
    __decorate([
        ViewChild('tpl', { static: false })
    ], TabComponent.prototype, "template", void 0);
    __decorate([
        Input()
    ], TabComponent.prototype, "path", void 0);
    __decorate([
        Input()
    ], TabComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], TabComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], TabComponent.prototype, "priority", void 0);
    __decorate([
        Input()
    ], TabComponent.prototype, "orientation", void 0);
    TabComponent = __decorate([
        Component({
            selector: 'c8y-tab',
            template: '<ng-template #tpl><ng-content></ng-content></ng-template>'
        })
    ], TabComponent);
    return TabComponent;
}());

var TabsOutletComponent = /** @class */ (function () {
    function TabsOutletComponent(router, renderer, el) {
        this.router = router;
        this.renderer = renderer;
        this.el = el;
        this.tabs = [];
        this.orientation = 'vertical';
        this.navigatorOpen = false;
        this.showLeft = false;
        this.showRight = false;
    }
    Object.defineProperty(TabsOutletComponent.prototype, "isNavigatorOpen", {
        get: function () {
            return this.navigatorOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabsOutletComponent.prototype, "hasTabs", {
        get: function () {
            var visibleTabs = [];
            if (this.tabs) {
                visibleTabs = this.tabs.filter(function (tab) { return tab.hide !== true; });
            }
            return visibleTabs.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabsOutletComponent.prototype, "isHorizontal", {
        get: function () {
            return this.orientation === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabsOutletComponent.prototype, "isVertical", {
        get: function () {
            return this.orientation !== 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    TabsOutletComponent.prototype.ngOnDestroy = function () {
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    };
    TabsOutletComponent.prototype.ngAfterContentInit = function () {
        if (this.orientation === 'horizontal') {
            this.scrollSubscribe();
        }
    };
    TabsOutletComponent.prototype.isActive = function (tab) {
        if (tab && tab.path) {
            return this.router.isActive(tab.path, false);
        }
        else {
            return false;
        }
    };
    TabsOutletComponent.prototype.navigateTo = function (path) {
        this.router.navigate([path]);
    };
    TabsOutletComponent.prototype.scroll = function (direction) {
        if (direction === void 0) { direction = 'right'; }
        var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
        var multiplier = direction === 'left' ? -1 : 1;
        var targetScroll = scrollLeft + width * multiplier;
        if (targetScroll < 0) {
            targetScroll = 0;
        }
        if (targetScroll > widthScroll - width) {
            targetScroll = widthScroll - width;
        }
        // TODO: we should animate this
        this.container.nativeElement.scrollLeft = targetScroll;
    };
    TabsOutletComponent.prototype.scrollSubscribe = function () {
        var _this = this;
        var unlisten;
        this.scrollSubscription = merge$1(fromEvent(this.container.nativeElement, 'scroll'), fromEventPattern(function (handler) {
            unlisten = _this.renderer.listen('window', 'resize', handler);
        }, function () { return unlisten(); })).pipe(debounceTime(250)).subscribe(function () { return _this.updateScroll(); });
    };
    TabsOutletComponent.prototype.updateScroll = function () {
        var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
        this.showLeft = !!scrollLeft;
        this.showRight = widthScroll > width + scrollLeft;
    };
    TabsOutletComponent.prototype.getDimensions = function () {
        var elTabs = this.tabsContainer.nativeElement;
        var el = this.container.nativeElement;
        var widthScroll = elTabs.scrollWidth;
        var width = el.clientWidth;
        var scrollLeft = el.scrollLeft;
        return { widthScroll: widthScroll, width: width, scrollLeft: scrollLeft };
    };
    TabsOutletComponent.ctorParameters = function () { return [
        { type: Router },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], TabsOutletComponent.prototype, "tabs", void 0);
    __decorate([
        Input()
    ], TabsOutletComponent.prototype, "orientation", void 0);
    __decorate([
        Input()
    ], TabsOutletComponent.prototype, "navigatorOpen", void 0);
    __decorate([
        HostBinding('class.navigator-open')
    ], TabsOutletComponent.prototype, "isNavigatorOpen", null);
    __decorate([
        HostBinding('class.page-tabs')
    ], TabsOutletComponent.prototype, "hasTabs", null);
    __decorate([
        HostBinding('class.page-tabs-horizontal')
    ], TabsOutletComponent.prototype, "isHorizontal", null);
    __decorate([
        HostBinding('class.page-tabs-vertical')
    ], TabsOutletComponent.prototype, "isVertical", null);
    __decorate([
        ViewChild('container', { read: ElementRef, static: true })
    ], TabsOutletComponent.prototype, "container", void 0);
    __decorate([
        ViewChild('left', { read: ElementRef, static: false })
    ], TabsOutletComponent.prototype, "leftBtn", void 0);
    __decorate([
        ViewChild('right', { read: ElementRef, static: false })
    ], TabsOutletComponent.prototype, "rightBtn", void 0);
    __decorate([
        ViewChild('tabsContainer', { read: ElementRef, static: false })
    ], TabsOutletComponent.prototype, "tabsContainer", void 0);
    TabsOutletComponent = __decorate([
        Component({
            selector: 'c8y-tabs-outlet,c8y-ui-tabs',
            template: "<div #container class=\"tabContainer hidden-xs\">\n  <button class=\"tabs-slider tabs-slider-left\" #left *ngIf=\"showLeft\" (click)=\"scroll('left')\">\n    <i [c8yIcon]=\"'chevron-left'\"></i>\n  </button>\n  <button class=\"tabs-slider tabs-slider-right\" #right *ngIf=\"showRight\" (click)=\"scroll('right')\">\n    <i [c8yIcon]=\"'chevron-right'\"></i>\n  </button>\n  <ul class=\"nav nav-tabs nav-tabsc8y\" #tabsContainer>\n    <li [ngClass]=\"{'active': rla.isActive}\" *ngFor=\"let tab of tabs\">\n      <a [routerLink]=\"tab.path\" routerLinkActive #rla=\"routerLinkActive\" title=\"{{tab?.label | translate}}\">\n        <i [c8yIcon]=\"tab?.icon\" *ngIf=\"!tab.template && tab?.icon\"></i>\n        <span class=\"txt\" *ngIf=\"!tab.template\">{{tab?.label | translate}}</span>\n        <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\n      </a>\n    </li>\n  </ul>\n</div>\n\n<div class=\"visible-xs mobile-tabs\">\n  <div class=\"c8y-select-wrapper\">\n    <select (change)=\"navigateTo($event.target.value)\" #select>\n      <option *ngFor=\"let tab of tabs\" [value]=\"tab.path\" [selected]=\"isActive(tab)\">\n        {{tab?.label | translate}}\n      </option>\n    </select>\n  </div>\n</div>\n"
        })
    ], TabsOutletComponent);
    return TabsOutletComponent;
}());

var TabsModule = /** @class */ (function () {
    function TabsModule() {
    }
    TabsModule = __decorate([
        NgModule({
            declarations: [
                TabsOutletComponent,
                TabComponent
            ],
            imports: [
                CommonModule,
                RouterModule$1.forChild([])
            ],
            exports: [
                TabsOutletComponent,
                TabComponent
            ]
        })
    ], TabsModule);
    return TabsModule;
}());

var CookieBannerPreferencesModalComponent = /** @class */ (function () {
    function CookieBannerPreferencesModalComponent(cookieBannerService) {
        this.cookieBannerService = cookieBannerService;
        this.closeSubject = new Subject();
        this.title = gettext('Cookie preferences');
        this.labels = { ok: gettext('Save settings'), cancel: gettext('Cancel') };
        this.status = Status.INFO;
    }
    CookieBannerPreferencesModalComponent.prototype.ngOnInit = function () {
        this.configCookiePreferencesList = this.cookieBannerService.transformCookiePreferencesToList(this.configCookiePreferences);
    };
    CookieBannerPreferencesModalComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.modalRef.result];
                    case 1:
                        _a.sent();
                        this.onClose();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.onDismiss();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CookieBannerPreferencesModalComponent.prototype.onClose = function () {
        var cookiePref = this.cookieBannerService.transformCookiePreferencesListToCookiePreferences(this.configCookiePreferencesList);
        this.closeSubject.next(cookiePref);
        this.closeSubject.complete();
    };
    CookieBannerPreferencesModalComponent.prototype.onDismiss = function () {
        this.closeSubject.next(undefined);
        this.closeSubject.complete();
    };
    CookieBannerPreferencesModalComponent.prototype.getCookieDescription = function (cookieType) {
        return this.cookieBannerService.getCookieDescription(cookieType);
    };
    CookieBannerPreferencesModalComponent.ctorParameters = function () { return [
        { type: CookieBannerService }
    ]; };
    __decorate([
        ViewChild('modalRef', { static: false })
    ], CookieBannerPreferencesModalComponent.prototype, "modalRef", void 0);
    CookieBannerPreferencesModalComponent = __decorate([
        Component({
            selector: 'c8y-cookie-banner-preferences-modal',
            template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n"
        })
    ], CookieBannerPreferencesModalComponent);
    return CookieBannerPreferencesModalComponent;
}());

var CookieBannerComponent = /** @class */ (function () {
    function CookieBannerComponent(bsModalService, cookieBannerService) {
        this.bsModalService = bsModalService;
        this.cookieBannerService = cookieBannerService;
        this.shouldDisable = false;
    }
    CookieBannerComponent.prototype.ngOnInit = function () {
        this.settings = this.cookieBannerService.getCookieBannerSettings();
        this.cookiePreferences = this.cookieBannerService.getCookiePreferencesConfig();
        this.shouldShowCookieBanner();
    };
    CookieBannerComponent.prototype.onConfigurePreferences = function () {
        var _this = this;
        this.disableButtons(true);
        var initialState = {
            configCookiePreferences: this.cookiePreferences
        };
        var modalRef = this.bsModalService.show(CookieBannerPreferencesModalComponent, {
            initialState: initialState
        });
        modalRef.content.closeSubject.subscribe(function (userCookiePreferences) {
            _this.disableButtons(false);
            if (userCookiePreferences) {
                _this.cookieBannerService.setCookies(userCookiePreferences);
                _this.setCookieBannerVisibility(false);
            }
        });
    };
    CookieBannerComponent.prototype.acceptCookies = function () {
        this.cookieBannerService.setCookies(this.cookiePreferences || { required: true });
        this.setCookieBannerVisibility(false);
    };
    CookieBannerComponent.prototype.shouldShowCookieBanner = function () {
        this.setCookieBannerVisibility(this.cookieBannerService.shouldShowCookieBanner());
    };
    CookieBannerComponent.prototype.disableButtons = function (shouldDisable) {
        this.shouldDisable = shouldDisable;
    };
    CookieBannerComponent.prototype.setCookieBannerVisibility = function (shouldShow) {
        this.showBanner = shouldShow;
        this.cookieBannerService.isCookieBannerShowed$.next(shouldShow);
    };
    CookieBannerComponent.ctorParameters = function () { return [
        { type: BsModalService },
        { type: CookieBannerService }
    ]; };
    CookieBannerComponent = __decorate([
        Component({
            selector: 'c8y-cookie-banner',
            template: "<div class=\"c8y-cookie-banner\">\n  <div class=\"container\">\n    <div class=\"row p-t-16 p-b-16\" *ngIf=\"showBanner\">\n      <div class=\"col-md-2\" *ngIf=\"settings.cookieBannerTitle\">\n        <h3>{{ settings.cookieBannerTitle | translate }}</h3>\n        <div class=\"p-b-16 visible-sm visible-xs\"></div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"cookie-banner-content text-pre\">\n          {{ settings.cookieBannerText | translate }}\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16 visible-sm visible-xs\"></div>\n            <button\n              class=\"btn btn-primary btn-block\"\n              (click)=\"acceptCookies()\"\n              [disabled]=\"shouldDisable\"\n            >\n              {{ 'Agree and proceed' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\" *ngIf=\"!!cookiePreferences\">\n            <div class=\"p-b-16\"></div>\n            <button class=\"btn btn-default btn-block\" (click)=\"onConfigurePreferences()\" [disabled]=\"shouldDisable\">\n              {{ 'Configure preferences' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16\"></div>\n            <a\n              class=\"btn btn-default btn-block\"\n              href=\"{{ settings.policyUrl }}\"\n              target=\"_blank\"\n              *ngIf=\"settings.policyUrl\"\n            >\n              {{ 'Privacy policy' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], CookieBannerComponent);
    return CookieBannerComponent;
}());

/**
 * The module which allows to bootstrap a custom application.
 * Use it as `bootstrap: []` component in your main app module
 * or as `<c8y-bootstrap>` in your main app.
 */
var BootstrapModule = /** @class */ (function () {
    function BootstrapModule() {
    }
    BootstrapModule = __decorate([
        NgModule({
            declarations: [BootstrapComponent, CookieBannerComponent, CookieBannerPreferencesModalComponent],
            imports: [
                FormsModule$1,
                CommonModule,
                HeaderModule,
                LoginModule,
                RouterModule$1,
                TabsModule,
                ActionBarModule,
                AlertModule,
                NavigatorModule,
                TooltipModule,
                ModalModule
            ],
            exports: [BootstrapComponent],
            entryComponents: [BootstrapComponent, CookieBannerPreferencesModalComponent],
            providers: [CookieBannerService]
        })
    ], BootstrapModule);
    return BootstrapModule;
}());

/**
 * A drop-zone which is a file selector allowing users to select file(s) from their file system, either natively or by drag and drop.
 *
 * ## Example:
 *
 * ```html
 *  <div>
 *    <c8y-drop-area
 *      (dropped)="uploadFile($event)"
 *      [icon]="'upload'">
 *    </c8y-drop-area>
 *  </div>
 * ```
 */
var DropAreaComponent = /** @class */ (function () {
    function DropAreaComponent() {
        this.title = gettext('Upload file');
        this.message = gettext('Drop file here');
        this.icon = 'plus-square';
        this.loadingMessage = gettext('Uploading…');
        /** Affects displaying both the drop zone and the list of dropped files. */
        this.alwaysShow = false;
        this.clickToOpen = true;
        this.loading = false;
        this.progress = -1; // -1 = spinner
        this.dropped = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.isOver = false;
        this.errors = false;
    }
    DropAreaComponent.prototype.ngOnInit = function () {
        this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
        if (this.files && this.files.length > 0) {
            this.onFilesSelected(this.files);
        }
    };
    /**
     * Toggles the style of the drop zone element when a file is dragged over the component.
     */
    DropAreaComponent.prototype.toggle = function ($event) {
        this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
        this.onOver();
    };
    /**
     * Shows computer browser with files to drop into drop-area zone.
     */
    DropAreaComponent.prototype.showPicker = function ($event) {
        this.preventDefault($event);
        this.picker.nativeElement.value = '';
        this.picker.nativeElement.click();
    };
    /**
     * Triggered when file is on over drop area, but not dropped.
     */
    DropAreaComponent.prototype.onOver = function () {
        if (!this.isOver) {
            this.isOver = true;
            document.addEventListener('dragover', this.preventDefault);
            document.addEventListener('drop', this.preventDefault);
        }
    };
    /**
     * Triggered when file is dropped.
     */
    DropAreaComponent.prototype.onPick = function ($event) {
        this.errors = false;
        this.preventDefault($event);
        this.onFilesSelected($event.target.files);
    };
    /**
     * Handle file when it is dropped into drop-area.
     */
    DropAreaComponent.prototype.onDrop = function ($event) {
        this.preventDefault($event);
        this.onFilesSelected($event.dataTransfer.files);
        this.stopDragging();
    };
    /**
     * Checks condition what should be displayed: drop-area zone or list of dropped files.
     */
    DropAreaComponent.prototype.shouldShowFilesList = function () {
        return (this.alwaysShow &&
            !this.isFilesArrayEmpty() &&
            !this.hasEmptyFiles() &&
            !this.isTooManyFiles());
    };
    /**
     * Triggered when file is picked over web application.
     */
    DropAreaComponent.prototype.stopDragging = function () {
        document.removeEventListener('dragover', this.preventDefault);
        document.removeEventListener('drop', this.preventDefault);
        this.isOver = false;
    };
    /**
     * Delete files already dropped files.
     */
    DropAreaComponent.prototype.onDelete = function () {
        delete this.files;
        delete this.filesNameString;
        this.clearErrors();
        this.dropped.emit(undefined);
    };
    DropAreaComponent.prototype.onFilesSelected = function (files) {
        this.files = files;
        this.filesNameString = this.getFilesNamesAsString(files);
        this.errors = false;
        if (!this.isFilesArrayEmpty() && !this.isTooManyFiles()) {
            if (this.hasEmptyFiles()) {
                this.errors = true;
                this.errorMessage = gettext('File must not be empty, select another one.');
            }
            else {
                this.dropped.emit(this.compose(files));
            }
        }
        else {
            this.errors = true;
            this.errorMessage = gettext('Too many files selected.');
        }
    };
    DropAreaComponent.prototype.getFilesNamesAsString = function (files) {
        return map$1(files, function (_a) {
            var name = _a.name;
            return name;
        }).join(', ');
    };
    DropAreaComponent.prototype.isFilesArrayEmpty = function () {
        return get(this, 'files.length', 0) === 0;
    };
    DropAreaComponent.prototype.isTooManyFiles = function () {
        return get(this, 'files.length', 0) > this.maxAllowedFiles;
    };
    DropAreaComponent.prototype.hasEmptyFiles = function () {
        var result = true;
        if (!this.isFilesArrayEmpty()) {
            result = this.isAnyFileEmpty();
        }
        return result;
    };
    DropAreaComponent.prototype.isAnyFileEmpty = function () {
        return some(Array.from(this.files), ['size', 0]);
    };
    DropAreaComponent.prototype.clearErrors = function () {
        delete this.errorMessage;
        this.errors = false;
    };
    DropAreaComponent.prototype.preventDefault = function ($event) {
        if ($event) {
            $event.preventDefault();
        }
    };
    DropAreaComponent.prototype.compose = function (files) {
        var _this = this;
        return Array.from(files).map(function (file) { return ({
            file: file,
            readAsJson: function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = JSON).parse;
                        return [4 /*yield*/, this.read(file, ReadAsType.TEXT)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            }); }); },
            readAsText: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.read(file, ReadAsType.TEXT)];
            }); }); },
            readAsArrayBuffer: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.read(file, ReadAsType.ARRAY_BUFFER)];
            }); }); },
            readAsBinaryString: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.read(file, ReadAsType.BINARY_STRING)];
            }); }); },
            readAsDataURL: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.read(file, ReadAsType.DATA_URL)];
            }); }); }
        }); });
    };
    DropAreaComponent.prototype.read = function (file, type) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var reader = new FileReader();
                        switch (type) {
                            case ReadAsType.TEXT: {
                                reader.readAsText(file);
                                break;
                            }
                            case ReadAsType.ARRAY_BUFFER: {
                                reader.readAsArrayBuffer(file);
                                break;
                            }
                            case ReadAsType.BINARY_STRING: {
                                reader.readAsBinaryString(file);
                                break;
                            }
                            case ReadAsType.DATA_URL: {
                                reader.readAsDataURL(file);
                                break;
                            }
                        }
                        reader.onload = function () { return _this.onLoad(reader, resolve, reject); };
                    })];
            });
        });
    };
    DropAreaComponent.prototype.onLoad = function (reader, resolve, reject) {
        if (reader.readyState !== 2) {
            return;
        }
        if (reader.error) {
            reject(reader.error);
        }
        resolve(reader.result);
    };
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "message", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "loadingMessage", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "alwaysShow", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "clickToOpen", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "loading", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "progress", void 0);
    __decorate([
        Output()
    ], DropAreaComponent.prototype, "dropped", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "maxAllowedFiles", void 0);
    __decorate([
        Input()
    ], DropAreaComponent.prototype, "files", void 0);
    __decorate([
        ViewChild('area', { static: true })
    ], DropAreaComponent.prototype, "area", void 0);
    __decorate([
        ViewChild('zone', { static: false })
    ], DropAreaComponent.prototype, "zone", void 0);
    __decorate([
        ViewChild('picker', { static: false })
    ], DropAreaComponent.prototype, "picker", void 0);
    DropAreaComponent = __decorate([
        Component({
            selector: 'c8y-drop-area',
            template: "<div\n  class=\"drop-zone\"\n  *ngIf=\"!shouldShowFilesList()\"\n  [ngClass]=\"{ 'has-errors': errors }\"\n  [style.pointerEvents]=\"loading ? 'none' : 'auto'\"\n  #zone\n  (dragleave)=\"stopDragging()\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onOver()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\"\n>\n  <div class=\"file-placeholder\"  [ngClass]=\"{ 'drag-over': isOver }\">\n    <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n      <p class=\"flex-item-middle m-r-8\">\n        {{ loadingMessage | translate }}\n      </p>\n      <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\"\n          style=\"min-width: 50%; margin: 0;\">\n        <div\n          class=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuenow=\"0\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          [style.width]=\"progress + '%'\"\n        ></div>\n      </div>\n      <div class=\"spinner\" *ngIf=\"progress === -1\" \n        style=\"position: relative; margin: 0;\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder pointer\">\n      <i class=\"fa fw fa-{{ icon }}\"></i>\n      <p *ngIf=\"!errors\">\n        <b>{{ message | translate }}</b>\n        <br />\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate>or click to browse your computer.</span>\n      </p>\n      <div *ngIf=\"errors\" class=\"has-errors\">\n        <p class=\"form-control-feedback-message\">\n          {{ errorMessage | translate }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"drop-zone\" *ngIf=\"shouldShowFilesList()\"\n  [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\">\n  <div *ngIf=\"loading\" class=\"d-flex p-4 flex-center\">\n    <p class=\"flex-item-middle m-r-8\">\n      {{ loadingMessage | translate }}\n    </p>\n    <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\"\n      style=\"min-width: 50%; margin:0;\">\n      <div\n        class=\"progress-bar\"\n        role=\"progressbar\"\n        aria-valuenow=\"0\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [style.width]=\"progress + '%'\"\n      ></div>\n    </div>\n    <div class=\"spinner\" *ngIf=\"progress === -1\" \n      style=\"position: relative; margin: 0;\">\n      <div class=\"rect1\"></div>\n      <div class=\"rect2\"></div>\n      <div class=\"rect3\"></div>\n      <div class=\"rect4\"></div>\n      <div class=\"rect5\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!loading\" class=\"file-placeholder p-4\">\n    <div class=\"flex-row p-4\">\n      <i c8yIcon=\"file-o\" class=\"m-r-8\"></i>\n      <span title=\"{{ filesNameString }}\" class=\"text-truncate\">\n        {{ filesNameString }}\n      </span>\n      <button\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean showOnHover flex-item-right\"\n        >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n\n<input\n  #picker\n  *ngIf=\"clickToOpen\"\n  (change)=\"onPick($event)\"\n  multiple\n  type=\"file\"\n  style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\"\n/>\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n"
        })
    ], DropAreaComponent);
    return DropAreaComponent;
}());
var ReadAsType;
(function (ReadAsType) {
    ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
    ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
    ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
    ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
})(ReadAsType || (ReadAsType = {}));

/**
 * The angular module definition for a drop-area.
 * @exports DropAreaComponent
 */
var DropAreaModule = /** @class */ (function () {
    function DropAreaModule() {
    }
    DropAreaModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
            ],
            exports: [
                DropAreaComponent,
            ],
            declarations: [
                DropAreaComponent,
            ]
        })
    ], DropAreaModule);
    return DropAreaModule;
}());

/**
 * User can upload a binary directly or use an URL.
 *
 * ## Usage Example:
 *
 * ```html
 * <div>
 * <c8y-file-picker [maxAllowedFiles]="1" (onFilesPicked)="onFile($event)">
 * </c8y-file-picker>
 * </div>
 * ```
 */
var FilePickerComponent = /** @class */ (function () {
    function FilePickerComponent() {
        this.onFilesPicked = new EventEmitter();
        this.maxAllowedFiles = Infinity;
        this.uploadChoice = 'uploadBinary';
    }
    /**
     * @ignore
     */
    FilePickerComponent.prototype.ngOnInit = function () {
        if (this.fileBinary) {
            this.droppedFiles = [this.fileBinary];
        }
    };
    /**
     * Triggered by dropped file in component and pass it into drop-area component.
     */
    FilePickerComponent.prototype.onFileDropped = function (droppedFiles) {
        this.onFilesPicked.emit({
            droppedFiles: droppedFiles
        });
    };
    /**
     * Triggered when user changes upload choice, from upload url to upload binary.
     */
    FilePickerComponent.prototype.clearInputFromUrl = function () {
        delete this.fileUrl;
        this.fileToSave = {
            url: undefined
        };
        this.onFilesPicked.emit(this.fileToSave);
    };
    /**
     * Triggered when user changes upload choice, to avoid cumulation of droppedFiles.
     */
    FilePickerComponent.prototype.clearSelectedFiles = function () {
        this.dropArea.onDelete();
        this.fileToSave = {
            droppedFiles: undefined
        };
        this.onFilesPicked.emit(this.fileToSave);
    };
    /**
     * Triggered when user puts binary's url to upload.
     */
    FilePickerComponent.prototype.onFileUrlChange = function (urlStr) {
        this.fileToSave = {
            url: urlStr
        };
        this.onFilesPicked.emit(this.fileToSave);
    };
    __decorate([
        ViewChild(DropAreaComponent, { static: true })
    ], FilePickerComponent.prototype, "dropArea", void 0);
    __decorate([
        Output()
    ], FilePickerComponent.prototype, "onFilesPicked", void 0);
    __decorate([
        Input()
    ], FilePickerComponent.prototype, "maxAllowedFiles", void 0);
    __decorate([
        Input()
    ], FilePickerComponent.prototype, "uploadChoice", void 0);
    __decorate([
        Input()
    ], FilePickerComponent.prototype, "fileUrl", void 0);
    __decorate([
        Input()
    ], FilePickerComponent.prototype, "fileBinary", void 0);
    FilePickerComponent = __decorate([
        Component({
            selector: 'c8y-file-picker',
            template: "<div class=\"form-group\">\n  <label title=\"{{ 'Upload a binary' | translate }}\" class=\"c8y-radio radio-inline\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadBinary\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearInputFromUrl()\"\n    />\n    <span></span>\n    <span>{{ 'Upload a binary' | translate }}</span>\n  </label>\n  <label title=\"{{ 'Use a URL' | translate }}\" class=\"c8y-radio radio-inline\">\n    <input\n      #radio\n      type=\"radio\"\n      value=\"uploadUrl\"\n      name=\"uploadChoice\"\n      [(ngModel)]=\"uploadChoice\"\n      (click)=\"clearSelectedFiles()\"\n    />\n    <span></span>\n    <span>{{ 'Use a URL' | translate }}</span>\n  </label>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadBinary'\">\n  <c8y-form-group class=\"m-0\">\n    <c8y-drop-area\n      class=\"drop-area-sm\"\n      (dropped)=\"onFileDropped($event)\"\n      [title]=\"'Drop file or click to browse' | translate\"\n      [maxAllowedFiles]=\"maxAllowedFiles\"\n      [files]=\"droppedFiles\"\n    >\n    </c8y-drop-area>\n  </c8y-form-group>\n</div>\n\n<div [hidden]=\"uploadChoice !== 'uploadUrl'\">\n  <c8y-form-group class=\"m-0\">\n    <div class=\"m-b-4 p-b-8\">\n      <div class=\"input-group\">\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"globe\"></i>\n        </span>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"fileUrl\"\n          [(ngModel)]=\"fileUrl\"\n          (ngModelChange)=\"onFileUrlChange($event)\"\n          placeholder=\"{{ 'e.g.' | translate }} http://example.com/binary.zip\"\n          required\n        />\n      </div>\n    </div>\n  </c8y-form-group>\n</div>\n"
        })
    ], FilePickerComponent);
    return FilePickerComponent;
}());

/**
 * The angular module definition for a drop-area.
 * @exports FilePickerComponent
 */
var FilePickerModule = /** @class */ (function () {
    function FilePickerModule() {
    }
    FilePickerModule = __decorate([
        NgModule({
            imports: [
                FormsModule,
                CommonModule$1,
                DropAreaModule,
                FormsModule$1,
                CommonModule
            ],
            exports: [
                FilePickerComponent,
            ],
            declarations: [
                FilePickerComponent,
            ]
        })
    ], FilePickerModule);
    return FilePickerModule;
}());

var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent() {
        this.onDateSelected = new EventEmitter();
    }
    DatePickerComponent.prototype.ngOnInit = function () {
        this.fgDatePicker = new FormGroup({
            dateFrom: new FormControl(),
            dateTo: new FormControl()
        });
    };
    DatePickerComponent.prototype.filter = function () {
        this.onDateSelected.emit(this.fgDatePicker.value);
    };
    DatePickerComponent.prototype.clearFilter = function () {
        this.fgDatePicker.setValue({
            dateFrom: null,
            dateTo: null
        });
        this.onDateSelected.emit(null);
    };
    __decorate([
        Output()
    ], DatePickerComponent.prototype, "onDateSelected", void 0);
    DatePickerComponent = __decorate([
        Component({
            selector: 'c8y-date-picker',
            template: "<form [formGroup]=\"fgDatePicker\">\n  <c8y-form-group class=\"datepicker\">\n    <input\n      formControlName=\"dateFrom\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Date from' | translate }}\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today' }\"\n    />\n  </c8y-form-group>\n  <c8y-form-group class=\"datepicker\">\n    <input\n      formControlName=\"dateTo\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Date to' | translate }}\"\n      bsDatepicker\n      [bsConfig]=\"{ customTodayClass: 'today' }\"\n    />\n  </c8y-form-group>\n  <button\n    *ngIf=\"fgDatePicker.get('dateFrom').value || fgDatePicker.get('dateTo').value\"\n    title=\"{{ 'Apply selection' | translate }}\"\n    type=\"submit\"\n    class=\"btn btn-link\"\n    (click)=\"filter()\"\n  >\n    <i c8y-icon=\"filter\"></i>\n    {{ 'Apply`selection`' | translate }}\n  </button>\n  <button\n    *ngIf=\"fgDatePicker.get('dateFrom').value || fgDatePicker.get('dateTo').value\"\n    title=\"{{ 'Clear selection' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-link\"\n    (click)=\"clearFilter()\"\n  >\n    <i c8y-icon=\"times\"></i>\n    {{ 'Clear`selection`' | translate }}\n  </button>\n</form>\n"
        })
    ], DatePickerComponent);
    return DatePickerComponent;
}());

/**
 * The angular module definition for a date picker - it allows you to pick either one date or a range of two.
 * @exports DatePickerComponent
 */
var DatePickerModule = /** @class */ (function () {
    function DatePickerModule() {
    }
    DatePickerModule = __decorate([
        NgModule({
            imports: [
                FormsModule,
                CommonModule$1,
                FormsModule$1,
                ReactiveFormsModule,
                BsDropdownModule.forRoot(),
                BsDatepickerModule.forRoot(),
                CommonModule
            ],
            exports: [DatePickerComponent],
            declarations: [DatePickerComponent]
        })
    ], DatePickerModule);
    return DatePickerModule;
}());

var ViewContext;
(function (ViewContext) {
    ViewContext["Device"] = "device/:id";
    ViewContext["Group"] = "group/:id";
    ViewContext["User"] = "users/:id";
    ViewContext["Application"] = "applications/:id";
    ViewContext["SubscribedApplications"] = "subscribedApplications/:id";
    ViewContext["Tenant"] = "tenants/:id";
    ViewContext["Report"] = "reports/:id";
})(ViewContext || (ViewContext = {}));

var RouterTabsResolver = /** @class */ (function () {
    function RouterTabsResolver(injector, router) {
        this.injector = injector;
        this.router = router;
    }
    Object.defineProperty(RouterTabsResolver.prototype, "routerStateSnapshot", {
        get: function () {
            return this.router.routerState.snapshot;
        },
        enumerable: true,
        configurable: true
    });
    RouterTabsResolver.prototype.resolve = function (route) {
        var _this = this;
        var latestChildren = this.router.config.find(function (r) { return route.routeConfig.path === r.path; }).children;
        return from(latestChildren || []).pipe(mergeMap(function (child) {
            return from(_this.getGuards(child)).pipe(map(function (guard) { return guard.canActivate(route, _this.routerStateSnapshot); }), mergeMap(function (result) {
                if (isObservable(result)) {
                    return result;
                }
                if (result && typeof result.then === 'function') {
                    return from(result);
                }
                return of(result);
            }), tap(function (result) {
                if (Array.isArray(result)) {
                    child.tabs = result;
                }
            }), every(function (result) { return !!result; }), filter(function (result) { return result; }), mergeMap(function () { return (Array.isArray(child.tabs) ? from(child.tabs) : of(child)); }), map(function (result) {
                return result.label || result.path
                    ? {
                        label: result.label,
                        icon: result.icon,
                        path: decodeURIComponent(route.url.join('/')) + "/" + result.path,
                        priority: result.priority,
                        hide: result.hide
                    }
                    : undefined;
            }));
        }), filter(function (tabs) { return !!tabs; }), toArray());
    };
    RouterTabsResolver.prototype.getGuards = function (child) {
        var _this = this;
        var guards = (child.canActivate || []).map(function (guard) {
            return _this.injector.get(guard);
        });
        if (child.data && child.data.showIf) {
            guards.push({ canActivate: child.data.showIf });
        }
        return guards;
    };
    RouterTabsResolver.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    RouterTabsResolver = __decorate([
        Injectable()
    ], RouterTabsResolver);
    return RouterTabsResolver;
}());

var ViewContextServices = /** @class */ (function () {
    function ViewContextServices() {
    }
    ViewContextServices.contextToService = function (context) {
        return ViewContextServices.services.get(context);
    };
    ViewContextServices.services = new Map([
        [ViewContext.Device, InventoryService],
        [ViewContext.Group, InventoryService],
        [ViewContext.User, UserService],
        [ViewContext.Application, ApplicationService],
        [ViewContext.SubscribedApplications, ApplicationService],
        [ViewContext.Tenant, TenantService],
        [ViewContext.Report, InventoryService]
    ]);
    return ViewContextServices;
}());

var ContextRouteService = /** @class */ (function () {
    function ContextRouteService(tabsResolver, tabsService, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
    }
    ContextRouteService.prototype.init = function (route) {
        var _this = this;
        this.routerSubscription = this.router.events
            .pipe(filter(function (e) { return e instanceof NavigationEnd; }))
            .subscribe(function () { return _this.redirectToFirstTab(); });
        this.dataSubscription = route.data
            .pipe(merge(this.updatedContext(route), this.refreshTrigger), switchMap(function () { return _this.tabsResolver.resolve(route.snapshot); }))
            .subscribe(function (tabs) { return _this.updateTabs(tabs); });
    };
    ContextRouteService.prototype.destroy = function () {
        var _this = this;
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
    };
    ContextRouteService.prototype.refreshContext = function () {
        this.refreshTrigger.next();
    };
    ContextRouteService.prototype.updatedContext = function (route) {
        var data = route.snapshot.data;
        var serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            var service = this.injector.get(serviceInstance);
            var detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
            var contextRegex_1 = new RegExp(detailsUrlRegex, 'i');
            var childrenRegex_1 = new RegExp(detailsUrlRegex + "/child", 'i');
            var filterResponse = function (_a) {
                var url = _a.url, method = _a.method;
                var contextChanged = contextRegex_1.test(url) && ['POST', 'PUT'].includes(method);
                var childrenAffected = childrenRegex_1.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    };
    ContextRouteService.prototype.updateTabs = function (tabs) {
        var _this = this;
        if (tabs === void 0) { tabs = []; }
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
        this.lastAddedTabs = tabs;
        tabs.forEach(function (t) { return _this.tabsService.add(t); });
        this.redirectToFirstTab();
    };
    ContextRouteService.prototype.redirectToFirstTab = function () {
        var _this = this;
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.subscribe(function (tab) {
                if (tab) {
                    _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    };
    ContextRouteService.prototype.needsRedirect = function () {
        var tree = this.router.parseUrl(this.router.url);
        var groups = tree.root.children[PRIMARY_OUTLET];
        var isContextRoute = groups.segments.length === 2;
        return isContextRoute;
    };
    ContextRouteService.ctorParameters = function () { return [
        { type: RouterTabsResolver },
        { type: TabsService },
        { type: Router },
        { type: ApiService$1 },
        { type: Injector }
    ]; };
    ContextRouteService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ContextRouteService_Factory() { return new ContextRouteService(ɵɵinject(RouterTabsResolver), ɵɵinject(TabsService), ɵɵinject(Router), ɵɵinject(ApiService$1), ɵɵinject(INJECTOR)); }, token: ContextRouteService, providedIn: "root" });
    ContextRouteService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ContextRouteService);
    return ContextRouteService;
}());

/**
 * A hook to use for Multi Provider extension.
 */
var HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A service which defines routes
 */
var RouterService = /** @class */ (function () {
    function RouterService(factories, router, tabsService, contextRouteService) {
        var _this = this;
        this.router = router;
        this.tabsService = tabsService;
        this.contextRouteService = contextRouteService;
        fromFactories(factories).subscribe(function (routes) {
            _this.addRoute(routes);
        });
    }
    /**
     * Refresh the current context
     */
    RouterService.prototype.refresh = function () {
        this.contextRouteService.refreshContext();
    };
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    RouterService.prototype.addRoute = function (route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    };
    RouterService.prototype.addRoutes = function (routes) {
        var _this = this;
        var emptyRoute = this.router.config.find(function (r) { return r.path === '**'; });
        this.router.resetConfig(__spread(this.router.config.filter(function (r) { return r.path !== '**'; }), routes.map(function (r) { return _this.convertRoute(_this.router.config, r); }), [
            emptyRoute
        ]).filter(Boolean));
    };
    RouterService.prototype.convertRoute = function (initialConfig, route) {
        if (route.context) {
            initialConfig.forEach(function (r) {
                if (r.data && r.data.context === route.context) {
                    r.children = __spread([route], (r.children || []));
                }
            });
            return;
        }
        return route;
    };
    RouterService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_ONCE_ROUTE,] }] },
        { type: Router },
        { type: TabsService },
        { type: ContextRouteService }
    ]; };
    RouterService.ngInjectableDef = ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(ɵɵinject(HOOK_ONCE_ROUTE, 8), ɵɵinject(Router), ɵɵinject(TabsService), ɵɵinject(ContextRouteService)); }, token: RouterService, providedIn: "root" });
    RouterService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()), __param(0, Inject(HOOK_ONCE_ROUTE))
    ], RouterService);
    return RouterService;
}());

var ContextRouteComponent = /** @class */ (function () {
    function ContextRouteComponent(route, contextRouteService) {
        this.route = route;
        this.contextRouteService = contextRouteService;
    }
    ContextRouteComponent.prototype.ngOnInit = function () {
        this.contextRouteService.init(this.route);
    };
    ContextRouteComponent.prototype.ngOnDestroy = function () {
        this.contextRouteService.destroy();
    };
    ContextRouteComponent.prototype.refreshTabs = function () {
        this.contextRouteService.refreshContext();
    };
    ContextRouteComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: ContextRouteService }
    ]; };
    ContextRouteComponent = __decorate([
        Component({
            selector: 'c8y-context-route',
            template: "<router-outlet></router-outlet>\n"
        })
    ], ContextRouteComponent);
    return ContextRouteComponent;
}());

var ApiService = /** @class */ (function () {
    function ApiService(client) {
        this.client = client;
        this.callsSubject = new Subject();
        this.calls = this.callsSubject.asObservable();
        this.hookIntoClientFetch();
    }
    ApiService.prototype.hookResponse = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'finish';
        }), filter(hookFilter));
    };
    ApiService.prototype.hookRequest = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'start';
        }), filter(hookFilter));
    };
    ApiService.prototype.onFinish = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.callsSubject.next(__assign({ phase: 'finish' }, call));
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.onStart = function (call) {
        this.callsSubject.next(__assign({ phase: 'start' }, call));
    };
    ApiService.prototype.resolveData = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            var response, method, cb;
            return __generator(this, function (_a) {
                response = call.response, method = call.method;
                if ('data' in response) {
                    return [2 /*return*/, Promise.resolve({ data: response.data, method: method })];
                }
                else {
                    cb = function (data) { return ({ data: data, method: method }); };
                    return [2 /*return*/, response.clone().json().then(cb, cb)];
                }
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.hookIntoClientFetch = function () {
        var _this = this;
        var fetch = this.client.fetch.bind(this.client);
        this.client.fetch = function (url, options) {
            if (options === void 0) { options = { method: 'GET' }; }
            return __awaiter(_this, void 0, void 0, function () {
                var method, fetchPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    method = options.method;
                    this.onStart({ options: options, method: method, url: url });
                    fetchPromise = fetch(url, options);
                    if (typeof options.responseInterceptor === 'function') {
                        fetchPromise = fetchPromise.then(options.responseInterceptor);
                    }
                    fetchPromise.then(function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); }, function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); });
                    return [2 /*return*/, fetchPromise];
                });
            });
        };
    };
    ApiService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    ApiService = __decorate([
        Injectable()
    ], ApiService);
    return ApiService;
}());



var services = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FetchClient: FetchClient,
    BasicAuth: BasicAuth,
    CookieAuth: CookieAuth,
    Realtime: Realtime,
    EventBinaryService: EventBinaryService,
    EventService: EventService,
    InventoryService: InventoryService,
    MeasurementService: MeasurementService,
    AlarmService: AlarmService,
    OperationBulkService: OperationBulkService,
    OperationService: OperationService,
    ApplicationService: ApplicationService,
    UserService: UserService,
    TenantService: TenantService,
    SystemOptionsService: SystemOptionsService$1,
    TenantOptionsService: TenantOptionsService$1,
    TenantSecurityOptionsService: TenantSecurityOptionsService,
    TenantLoginOptionsService: TenantLoginOptionsService,
    AuditService: AuditService,
    InventoryRoleService: InventoryRoleService,
    InventoryBinaryService: InventoryBinaryService,
    DeviceRegistrationService: DeviceRegistrationService,
    DeviceRegistrationBulkService: DeviceRegistrationBulkService,
    UserRoleService: UserRoleService,
    UserGroupService: UserGroupService,
    IdentityService: IdentityService,
    TrustedCertificateService: TrustedCertificateService
});

function toProvider(provide) {
    var deps = [FetchClient, Realtime];
    if (provide === FetchClient) {
        deps = [CookieAuth];
    }
    if (provide === BasicAuth || provide === CookieAuth) {
        deps = [];
    }
    if (provide === Realtime) {
        deps = [FetchClient];
    }
    return { provide: provide, useClass: provide, deps: deps };
}
var ɵ0 = function (k) { return toProvider(services[k]); };
var providers = Object.keys(services).map(ɵ0)
    .concat([
    { provide: ApiService, useClass: ApiService, deps: [FetchClient] }
]);
// @dynamic
var DataModule = /** @class */ (function () {
    function DataModule() {
    }
    DataModule_1 = DataModule;
    DataModule.providers = function () {
        return providers;
    };
    DataModule.forRoot = function () {
        return {
            ngModule: DataModule_1,
            providers: providers
        };
    };
    var DataModule_1;
    DataModule = DataModule_1 = __decorate([
        NgModule()
    ], DataModule);
    return DataModule;
}());

var ContextRouteGuard = /** @class */ (function () {
    function ContextRouteGuard(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    ContextRouteGuard.prototype.canActivate = function (route) {
        var id = route.paramMap.get('id');
        var service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(function (contextData) { return (route.data = __assign({}, route.data, { contextData: contextData })); }), map(function () { return true; }), catchError(function (ex) { return of(false); }));
    };
    ContextRouteGuard.prototype.service = function (route) {
        var serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    };
    ContextRouteGuard.prototype.detailCached = function (service, id) {
        var cache = this.getCache(service);
        var cached = cache[id];
        if (!cached) {
            var params = service instanceof InventoryService ? { withChildren: false } : undefined;
            cached = from(service.detail(id, params)).pipe(map(function (_a) {
                var data = _a.data;
                return data;
            }), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    };
    ContextRouteGuard.prototype.clearDetailCached = function (service, id) {
        var cache = this.getCache(service);
        delete cache[id];
    };
    ContextRouteGuard.prototype.getCache = function (service) {
        var cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    };
    ContextRouteGuard.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ContextRouteGuard = __decorate([
        Injectable()
    ], ContextRouteGuard);
    return ContextRouteGuard;
}());

var EmptyComponent = /** @class */ (function () {
    function EmptyComponent() {
    }
    EmptyComponent = __decorate([
        Component({ selector: 'empty', template: '' })
    ], EmptyComponent);
    return EmptyComponent;
}());

var routes = [{
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }];
// tslint:disable-next-line: forin
for (var key in ViewContext) {
    var context = ViewContext[key];
    routes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context: context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver,
        }
    });
}
var RouterModule = /** @class */ (function () {
    function RouterModule(routerService) {
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    RouterModule_1 = RouterModule;
    RouterModule.providers = function () {
        return [
            ContextRouteGuard,
            RouterTabsResolver,
            RouterService
        ];
    };
    RouterModule.forRoot = function () {
        return {
            ngModule: RouterModule_1,
            providers: RouterModule_1.providers()
        };
    };
    var RouterModule_1;
    RouterModule.ctorParameters = function () { return [
        { type: RouterService }
    ]; };
    RouterModule = RouterModule_1 = __decorate([
        NgModule({
            declarations: [ContextRouteComponent, EmptyComponent],
            imports: [
                RouterModule$1.forRoot(routes),
                HeaderModule,
                CommonModule
            ],
            entryComponents: [ContextRouteComponent, EmptyComponent]
        })
    ], RouterModule);
    return RouterModule;
}());

var _a$1, _b$1;
// TODO remove  when c8y-icon will works
var SendStatus;
(function (SendStatus) {
    SendStatus["AVAILABLE"] = "AVAILABLE";
    SendStatus["UNAVAILABLE"] = "UNAVAILABLE";
    SendStatus["UNKNOWN"] = "UNKNOWN";
    SendStatus["MAINTENANCE"] = "MAINTENANCE";
    SendStatus["NOT_MONITORED"] = "NOT_MONITORED";
})(SendStatus || (SendStatus = {}));
var PushStatus;
(function (PushStatus) {
    PushStatus["CONNECTED"] = "CONNECTED";
    PushStatus["DISCONNECTED"] = "DISCONNECTED";
    PushStatus["UNKNOWN"] = "UNKNOWN";
    PushStatus["MAINTENANCE"] = "MAINTENANCE";
})(PushStatus || (PushStatus = {}));
var SendStatusLabels;
(function (SendStatusLabels) {
    SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
    SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
    SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
    SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
    SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(SendStatusLabels || (SendStatusLabels = {}));
var PushStatusLabels;
(function (PushStatusLabels) {
    PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
    PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
    PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
    PushStatusLabels[PushStatusLabels["MAINTENANCE"] = gettext('Device is under maintenance')] = "MAINTENANCE";
})(PushStatusLabels || (PushStatusLabels = {}));
var deviceAvailabilityIconMap = {
    sendData: (_a$1 = {},
        _a$1[SendStatus.AVAILABLE] = {
            icon: 'long-arrow-right',
            class: 'statusOk'
        },
        _a$1[SendStatus.UNAVAILABLE] = {
            icon: 'long-arrow-right',
            class: 'statusNok'
        },
        _a$1[SendStatus.UNKNOWN] = {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        _a$1[SendStatus.NOT_MONITORED] = {
            icon: 'long-arrow-right',
            class: 'statusUnknown'
        },
        _a$1),
    push: (_b$1 = {},
        _b$1[PushStatus.CONNECTED] = {
            icon: 'long-arrow-left',
            class: 'statusOk'
        },
        _b$1[PushStatus.DISCONNECTED] = {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        _b$1[PushStatus.UNKNOWN] = {
            icon: 'long-arrow-left',
            class: 'statusUnknown'
        },
        _b$1[PushStatus.MAINTENANCE] = {
            icon: 'wrench',
            class: 'statusAlert'
        },
        _b$1),
    device: {
        MAINTENANCE: {
            icon: 'wrench',
            class: 'statusAlert'
        }
    }
};
var ɵ0$1 = function (lastMessage, translateService) {
    var date = formatDate(new Date(lastMessage), 'medium', translateService.currentLang);
    return translateService.instant(gettext('Device last request:\n{{date}}'), { date: date });
};
var tooltips = {
    sendStatusConnected: ɵ0$1,
    sendStatusDisconnected: gettext('Connection not monitored'),
    pushStatusConnected: gettext('Connection to device established'),
    pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
    maintenance: gettext('Device is under maintenance')
};

var DeviceStatusComponent = /** @class */ (function () {
    function DeviceStatusComponent(translateService) {
        this.translateService = translateService;
    }
    Object.defineProperty(DeviceStatusComponent.prototype, "node", {
        set: function (value) {
            this._mo = value.mo || value;
        },
        enumerable: true,
        configurable: true
    });
    DeviceStatusComponent.prototype.get = function () {
        return this._mo;
    };
    DeviceStatusComponent.prototype.ngOnChanges = function () {
        this.setStatusProperites();
    };
    DeviceStatusComponent.prototype.ngAfterContentInit = function () {
        this.setStatusProperites();
    };
    DeviceStatusComponent.prototype.setStatusProperites = function () {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus =
            this.availabilityStatus || (this.requiredAvailability ? 'UNKNOWN' : 'NOT_MONITORED');
    };
    DeviceStatusComponent.prototype.status = function () {
        var statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    };
    DeviceStatusComponent.prototype.getMaintenanceStatus = function () {
        return {
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        };
    };
    DeviceStatusComponent.prototype.getSendPushStatus = function () {
        return {
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        };
    };
    DeviceStatusComponent.prototype.getSendStatusTooltip = function (device) {
        var availability = device && device.c8y_Availability;
        var lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    };
    DeviceStatusComponent.prototype.getPushStatusTooltip = function (isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    };
    DeviceStatusComponent.ctorParameters = function () { return [
        { type: TranslateService$1 }
    ]; };
    __decorate([
        Input('mo')
    ], DeviceStatusComponent.prototype, "node", null);
    DeviceStatusComponent = __decorate([
        Component({
            selector: 'device-status',
            template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    title=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
        })
    ], DeviceStatusComponent);
    return DeviceStatusComponent;
}());

/**
 * The angular module definition for a device-status.
 * @exports DeviceStatusComponent
 */
var DeviceStatusModule = /** @class */ (function () {
    function DeviceStatusModule() {
    }
    DeviceStatusModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                TooltipModule
            ],
            exports: [
                DeviceStatusComponent
            ],
            declarations: [
                DeviceStatusComponent
            ]
        })
    ], DeviceStatusModule);
    return DeviceStatusModule;
}());

var GuideHrefDirective = /** @class */ (function () {
    function GuideHrefDirective(elementRef) {
        this.elementRef = elementRef;
        this.htmlAnchor = this.elementRef.nativeElement;
        if (!this.htmlAnchor.hasAttribute('target')) {
            this.htmlAnchor.setAttribute('target', '_blank');
        }
    }
    Object.defineProperty(GuideHrefDirective.prototype, "baseHref", {
        set: function (href) {
            this.htmlAnchor.href = href + "/" + this.c8yGuideHref;
        },
        enumerable: true,
        configurable: true
    });
    GuideHrefDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input('c8y-guide-href')
    ], GuideHrefDirective.prototype, "c8yGuideHref", void 0);
    GuideHrefDirective = __decorate([
        Directive({
            selector: '[c8y-guide-href]'
        })
    ], GuideHrefDirective);
    return GuideHrefDirective;
}());

var GuideDocsComponent = /** @class */ (function () {
    function GuideDocsComponent(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    GuideDocsComponent.prototype.ngOnInit = function () {
        this.baseUrl = this.docs.getBaseUrl();
    };
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    GuideDocsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
    };
    /**
     * Find and modify anchor elements
     */
    GuideDocsComponent.prototype.replaceAnchorAttributes = function () {
        var _this = this;
        var anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(function (a) {
            var guideHref = _this.baseUrl + "/" + a.getAttribute('c8y-guide-href');
            _this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                _this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    };
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    GuideDocsComponent.prototype.findGuideAnchors = function (el) {
        var _this = this;
        var isAnchor = function () { return el.nodeName === 'A'; };
        var hasGuideHrefAttr = function () { return !!el.attributes.getNamedItem('c8y-guide-href'); };
        var hasChildren = function () { return el.childNodes && el.childNodes.length > 0; };
        var result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach(function (node) {
                var searchResult = _this.findGuideAnchors(node);
                if (searchResult) {
                    result = __spread(result, searchResult);
                }
            });
        }
        return result;
    };
    GuideDocsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.links.forEach(function (guide) {
            guide.baseHref = _this.baseUrl;
        });
    };
    GuideDocsComponent.prototype.ngOnDestroy = function () {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    };
    GuideDocsComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        ContentChildren(GuideHrefDirective, { descendants: true })
    ], GuideDocsComponent.prototype, "links", void 0);
    __decorate([
        ContentChild(ForceHtmlTranslateDirective, { static: false })
    ], GuideDocsComponent.prototype, "translateDirective", void 0);
    GuideDocsComponent = __decorate([
        Component({
            selector: '[c8y-guide-docs]',
            template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
        })
    ], GuideDocsComponent);
    return GuideDocsComponent;
}());

var DocsModule = /** @class */ (function () {
    function DocsModule() {
    }
    DocsModule = __decorate([
        NgModule({
            declarations: [
                GuideHrefDirective,
                GuideDocsComponent
            ],
            imports: [CommonModule$1],
            exports: [
                GuideHrefDirective,
                GuideDocsComponent
            ],
            providers: [DocsService],
        })
    ], DocsModule);
    return DocsModule;
}());

var ArrayTypeComponent = /** @class */ (function (_super) {
    __extends(ArrayTypeComponent, _super);
    function ArrayTypeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArrayTypeComponent_1 = ArrayTypeComponent;
    ArrayTypeComponent.prototype.ngOnInit = function () {
        if (this.to.required && !this.field.fieldGroup.length) {
            this.add();
        }
    };
    var ArrayTypeComponent_1;
    ArrayTypeComponent.CONFIG = {
        types: [{ name: 'array', component: ArrayTypeComponent_1 }]
    };
    ArrayTypeComponent = ArrayTypeComponent_1 = __decorate([
        Component({
            selector: 'c8y-array-type',
            template: "<div role=\"group\"\n  [attr.aria-labelledby]=\"id + '-fieldset'\"\n>\n  <div id=\"{{id + '-fieldset'}}\"\n    class=\"legend form-block\"\n    *ngIf=\"to.label || to.description\"\n  >\n    {{ to.label }}\n    <button\n      *ngIf=\"to.description\"\n      class=\"btn-clean text-14 m-l-4 flex-item-middle\"\n      [popover]=\"to.description\"\n      placement=\"right\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i class=\"fa fw fa-question-circle-o text-primary\"></i>\n    </button>\n  </div>\n\n  <div class=\"form-control-feedback-message has-error\"\n    role=\"alert\"\n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n\n  <div *ngFor=\"let field of field.fieldGroup; let i = index\" class=\"input-group-array\">\n    <formly-field [field]=\"field\">\n    </formly-field>\n    <div class=\"input-group-btn\">\n      <button\n        class=\"btn btn-clean flex-item-right\"\n        title=\"{{ 'Delete' | translate }}\"\n        (click)=\"remove(i)\"\n      >\n        <i class=\"text-danger fa fw fa-minus-circle\"></i>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"p-t-8\">\n    <button\n      title=\"{{ 'Add \\{\\{ label \\}\\}' | translate: field?.fieldArray?.templateOptions }}\"\n      class=\"btn-add-block\"\n      (click)=\"add()\"\n    >\n      <i class=\"fa fw fa-plus-square\"></i>\n      <span ngNonBindable translate [translateParams]=\"field?.fieldArray?.templateOptions\"\n        >Add {{ label }}</span\n      >\n    </button>\n  </div>\n</div>\n"
        })
    ], ArrayTypeComponent);
    return ArrayTypeComponent;
}(FieldArrayType));

var FieldCheckbox = /** @class */ (function (_super) {
    __extends(FieldCheckbox, _super);
    function FieldCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                indeterminate: true,
                formCheck: 'custom' // 'custom' | 'custom-inline' | 'custom-switch' | 'stacked' | 'inline' | 'nolabel'
            }
        };
        return _this;
    }
    FieldCheckbox_1 = FieldCheckbox;
    var FieldCheckbox_1;
    FieldCheckbox.CONFIG = {
        types: [
            {
                name: 'checkbox',
                component: FieldCheckbox_1
            },
            {
                name: 'boolean',
                extends: 'checkbox'
            }
        ]
    };
    FieldCheckbox = FieldCheckbox_1 = __decorate([
        Component({
            selector: 'c8y-field-checkbox',
            template: "  <label class=\"c8y-checkbox\" [class.has-error]=\"showError\">\n    <input\n      type=\"checkbox\"\n      [class.is-invalid]=\"showError\"\n      [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n      [class.position-static]=\"to.formCheck === 'nolabel'\"\n      [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n      [indeterminate]=\"to.indeterminate && formControl.value == null\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n    /><span></span><span> {{ to.label }} </span>\n    <span *ngIf=\"to.required && to.hideRequiredMarker !== true\"><em class=\"m-l-4\" translate>(required)</em></span>\n    <button\n      *ngIf=\"!!to.description\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i class=\"fa fw fa-question-circle-o text-primary\"></i>\n  </button>\n  </label>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FieldCheckbox);
    return FieldCheckbox;
}(FieldType));

var WrapperFormField = /** @class */ (function (_super) {
    __extends(WrapperFormField, _super);
    function WrapperFormField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxHelpBlockLength = 64;
        return _this;
    }
    WrapperFormField_1 = WrapperFormField;
    WrapperFormField.prototype.ngOnInit = function () {
        this.showDescriptionAsPopup =
            this.field.type === 'radio' ||
                (this.to.description && this.to.description.length > this.maxHelpBlockLength);
    };
    var WrapperFormField_1;
    WrapperFormField.CONFIG = {
        wrappers: [{ name: 'c8y-form-field', component: WrapperFormField_1 }]
    };
    WrapperFormField = WrapperFormField_1 = __decorate([
        Component({
            selector: 'c8y-wrapper-form-field',
            template: "<div class=\"form-group\" [class.has-error]=\"showError\">\n  <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n    {{ to.label }}\n    <button\n      *ngIf=\"to.description && showDescriptionAsPopup\"\n      class=\"btn-clean m-l-4 flex-item-middle\"\n      [popover]=\"to.description\"\n      placement=\"auto\"\n      outsideClick=\"true\"\n      type=\"button\"\n    >\n      <i class=\"fa fw fa-question-circle-o text-primary\"></i>\n    </button>\n  </label>\n\n  <ng-template #fieldComponent></ng-template>\n\n  <div *ngIf=\"showError\" class=\"c8y-messages\">\n    <formly-validation-message\n      class=\"form-control-feedback-message\"\n      [field]=\"field\"\n    ></formly-validation-message>\n  </div>\n\n  <div class=\"help-block\" *ngIf=\"!showError && to.description && !showDescriptionAsPopup\">\n    {{ to.description }}\n  </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], WrapperFormField);
    return WrapperFormField;
}(FieldWrapper));

var FieldInput = /** @class */ (function (_super) {
    __extends(FieldInput, _super);
    function FieldInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldInput_1 = FieldInput;
    Object.defineProperty(FieldInput.prototype, "type", {
        get: function () {
            return this.to.type || 'text';
        },
        enumerable: true,
        configurable: true
    });
    var FieldInput_1;
    FieldInput.CONFIG = {
        types: [
            {
                name: 'input',
                component: FieldInput_1,
                wrappers: ['c8y-form-field']
            },
            { name: 'string', extends: 'input' },
            {
                name: 'number',
                extends: 'input',
                defaultOptions: {
                    templateOptions: {
                        type: 'number'
                    }
                }
            },
            {
                name: 'integer',
                extends: 'input',
                defaultOptions: {
                    templateOptions: {
                        type: 'number'
                    }
                }
            }
        ]
    };
    FieldInput = FieldInput_1 = __decorate([
        Component({
            selector: 'c8y-field-input',
            template: "<input\n  *ngIf=\"type !== 'number'; else numberTmp\"\n  [type]=\"type\"\n  [formControl]=\"formControl\"\n  class=\"form-control\"\n  [formlyAttributes]=\"field\"\n  [required]=\"to.required\"\n  [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n  [class.is-invalid]=\"showError\"\n/>\n<ng-template #numberTmp>\n  <input\n    type=\"number\"\n    [formControl]=\"formControl\"\n    class=\"form-control\"\n    [formlyAttributes]=\"field\"\n    [required]=\"to.required\"\n    [attr.autocomplete]=\"to.autocomplete ? to.autocomplete : null\"\n    [class.is-invalid]=\"showError\"\n  />\n</ng-template>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FieldInput);
    return FieldInput;
}(FieldType));

var ObjectTypeComponent = /** @class */ (function (_super) {
    __extends(ObjectTypeComponent, _super);
    function ObjectTypeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObjectTypeComponent_1 = ObjectTypeComponent;
    var ObjectTypeComponent_1;
    ObjectTypeComponent.CONFIG = {
        types: [{ name: 'object', component: ObjectTypeComponent_1 }]
    };
    ObjectTypeComponent = ObjectTypeComponent_1 = __decorate([
        Component({
            selector: 'c8y-object-type',
            template: "<div role=\"group\"\n  [attr.aria-labelledby]=\"id + '-fieldset'\" \n>\n  <div id=\"{{id + '-fieldset'}}\" \n    class=\"legend form-block\" \n    *ngIf=\"to.label\"\n  >{{ to.label }}</div>\n  <p *ngIf=\"to.description\">{{ to.description }}</p>\n  <div class=\"form-control-feedback-message has-error\" \n    role=\"alert\" \n    *ngIf=\"showError && formControl.errors\"\n  >\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n  <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n</div>\n"
        })
    ], ObjectTypeComponent);
    return ObjectTypeComponent;
}(FieldType));

var FieldRadio = /** @class */ (function (_super) {
    __extends(FieldRadio, _super);
    function FieldRadio() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom' // 'custom' | 'custom-inline' | 'stacked' | 'inline'
            }
        };
        return _this;
    }
    FieldRadio_1 = FieldRadio;
    var FieldRadio_1;
    FieldRadio.CONFIG = {
        types: [
            {
                name: 'radio',
                component: FieldRadio_1,
                wrappers: ['c8y-form-field']
            }
        ]
    };
    FieldRadio = FieldRadio_1 = __decorate([
        Component({
            selector: 'c8y-field-radio',
            template: "<label\n  *ngFor=\"let option of to.options | formlySelectOptions: field | async; let i = index\"\n  [title]=\"option.label\"\n  class=\"c8y-radio\"\n>\n  <input\n    type=\"radio\"\n    [id]=\"id + '_' + i\"\n    [name]=\"field.name || id\"\n    [attr.value]=\"option.value\"\n    [value]=\"option.value\"\n    [formControl]=\"formControl\"\n    [formlyAttributes]=\"field\"\n    [attr.disabled]=\"option.disabled || formControl.disabled ? true : null\"\n  />\n  <span></span>\n  <span>{{ option.label }}</span>\n</label>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FieldRadio);
    return FieldRadio;
}(FieldType));

var FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(function (type) { return type['CONFIG']; }).reduce(function (formlyConfig, typeConfig) {
        return (__assign({}, formlyConfig, { types: __spread(formlyConfig.types, (typeConfig.types || [])), wrappers: __spread(formlyConfig.wrappers, (typeConfig.wrappers || [])) }));
    }, { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
var DynamicFormsUIThemeModule = /** @class */ (function () {
    function DynamicFormsUIThemeModule() {
    }
    DynamicFormsUIThemeModule = __decorate([
        NgModule({
            declarations: __spread(FIELD_TYPES),
            entryComponents: __spread(FIELD_TYPES),
            imports: [
                CommonModule$1,
                PopoverModule,
                ReactiveFormsModule,
                TranslateModule,
                FormsModule,
                FormlyModule,
                FormlySelectModule
            ],
            providers: [
                {
                    provide: FORMLY_CONFIG,
                    useFactory: fieldTypeFactory,
                    multi: true
                }
            ]
        })
    ], DynamicFormsUIThemeModule);
    return DynamicFormsUIThemeModule;
}());

var TranslateExtension = /** @class */ (function () {
    function TranslateExtension(translate, parser) {
        this.translate = translate;
        this.parser = parser;
    }
    TranslateExtension.prototype.prePopulate = function (field) {
        var _this = this;
        var to = field.templateOptions || {};
        if (!to.label || to._translated) {
            return;
        }
        to._translated = true;
        field.expressionProperties = __assign({}, (field.expressionProperties || {}), { 'templateOptions.label': to.label ? this.translate.stream(to.label) : to.label, 'templateOptions.description': to.description
                ? this.translate.stream(to.description)
                : to.description, 'templateOptions.placeholder': to.placeholder
                ? combineLatest([
                    this.translate.stream(to.placeholder),
                    this.translate.stream(gettext('e.g. {{ example }}'))
                ]).pipe(map(function (_a) {
                    var _b = __read(_a, 2), placeholder = _b[0], expression = _b[1];
                    return _this.parser.interpolate(expression, { example: placeholder });
                }))
                : to.placeholder, 'templateOptions.options': (isObservable(to.options) ? to.options : of(to.options)).pipe(map(function (options) {
                return (options || []).map(function (option) { return (__assign({}, option, { label: _this.translate.instant(option.label) })); });
            })) });
    };
    return TranslateExtension;
}());
function registerTranslateExtension(translate, parser) {
    return {
        extensions: [
            {
                name: 'translate',
                extension: new TranslateExtension(translate, parser)
            }
        ]
    };
}

var ɵ0$2 = registerTranslateExtension;
var I18nModule$1 = /** @class */ (function () {
    function I18nModule() {
    }
    I18nModule = __decorate([
        NgModule({
            imports: [FormlyModule, TranslateModule],
            providers: [
                {
                    provide: FORMLY_CONFIG,
                    multi: true,
                    useFactory: ɵ0$2,
                    deps: [TranslateService$1, TranslateParser]
                }
            ]
        })
    ], I18nModule);
    return I18nModule;
}());

var C8yJSONSchema = /** @class */ (function (_super) {
    __extends(C8yJSONSchema, _super);
    function C8yJSONSchema() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    C8yJSONSchema.prototype.toFieldConfig = function (schema, options) {
        return _super.prototype.toFieldConfig.call(this, schema, this.c8yOptions((options || {}).map));
    };
    C8yJSONSchema.prototype.c8yOptions = function (map) {
        return {
            map: function (mappedField, mapSource) {
                var result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = __assign({}, result, { defaultValue: mapSource.const, templateOptions: __assign({}, result.templateOptions, { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = __assign({}, result, { templateOptions: __assign({}, result.templateOptions, { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = __assign({}, result, { templateOptions: __assign({}, result.templateOptions, { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = __assign({}, result, { type: 'radio' });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    };
    C8yJSONSchema = __decorate([
        Injectable()
    ], C8yJSONSchema);
    return C8yJSONSchema;
}(FormlyJsonschema));

function c8yValidationConfigFactory(translate) {
    return {
        validationMessages: [
            {
                name: 'required',
                message: function () {
                    return translate.stream(gettext('This field is required.'));
                }
            },
            {
                name: 'pattern',
                message: function (error, field) {
                    return translate.stream(gettext('Does not match pattern {{ requiredPattern }}'), error);
                }
            }
        ]
    };
}

var ɵ0$3 = c8yValidationConfigFactory;
var ValidationModule = /** @class */ (function () {
    function ValidationModule() {
    }
    ValidationModule = __decorate([
        NgModule({
            imports: [TranslateModule, FormlyModule],
            providers: [
                {
                    provide: FORMLY_CONFIG,
                    multi: true,
                    useFactory: ɵ0$3,
                    deps: [TranslateService$1]
                }
            ]
        })
    ], ValidationModule);
    return ValidationModule;
}());

var DynamicFormsModule = /** @class */ (function () {
    function DynamicFormsModule() {
    }
    DynamicFormsModule = __decorate([
        NgModule({
            imports: [
                CommonModule$1,
                ReactiveFormsModule,
                I18nModule$1,
                ValidationModule,
                DynamicFormsUIThemeModule,
                FormlyModule.forRoot()
            ],
            providers: [C8yJSONSchema],
            exports: [FormlyModule, ReactiveFormsModule]
        })
    ], DynamicFormsModule);
    return DynamicFormsModule;
}());

/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 */
var HOOK_COMPONENTS = new InjectionToken('Hook Dynamic Component');
/**
 * A hook to add dynamic components to the UI (e.g. widgets).
 * @deprecated: Use HOOK_COMPONENTS
 */
var HOOK_COMPONENT = new InjectionToken('Hook Dynamic Component @deprecated');

var DynamicComponentService = /** @class */ (function (_super) {
    __extends(DynamicComponentService, _super);
    function DynamicComponentService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromFactories([function () { return _this.injector.get(HOOK_COMPONENTS, []); }, function () { return _this.getComponentsViaDeprecatedHook(); }], router, false);
        _this.items$.subscribe(function (cmps) {
            cmps.forEach(function (cmp) {
                _this.state.add(cmp);
            });
            _this.emitNewState();
        });
        return _this;
    }
    DynamicComponentService.prototype.getComponentsViaDeprecatedHook = function () {
        var componentsViaDeprecatedHook = this.injector.get(HOOK_COMPONENT, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_COMPONENT is now deprecated. Use HOOK_COMPONENTS instead.');
        }
        return componentsViaDeprecatedHook;
    };
    DynamicComponentService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(DynamicComponentService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    DynamicComponentService.prototype.getById$ = function (id) {
        return this.state$.pipe(filter(function (cmps) { return cmps.size > 0; }), mergeMap(function (cmps) {
            return of(Array.from(cmps).find(function (cmp) { return cmp.id === id; }));
        }), take(1));
    };
    DynamicComponentService.prototype.add = function (component) {
        this.state.add(component);
        this.emitNewState();
    };
    DynamicComponentService.prototype.remove = function (component) {
        this.state.delete(component);
        this.emitNewState();
    };
    DynamicComponentService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    DynamicComponentService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(ɵɵinject(INJECTOR), ɵɵinject(Router)); }, token: DynamicComponentService, providedIn: "root" });
    DynamicComponentService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], DynamicComponentService);
    return DynamicComponentService;
}(StateService));

/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [{
 *      provide: HOOK_COMPONENT,
 *      multi: true,
 *      useValue: [{
 *          id: 'test-component',
 *          label: 'My test component',
 *          description: 'this is test component',
 *          component: TestComponent
 *      }],
 *  ...
 *  }]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
var DynamicComponentComponent = /** @class */ (function () {
    /**
     * @ignore only DI
     */
    function DynamicComponentComponent(componentFactoryResolver, dynamicComponentService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentService = dynamicComponentService;
        /**
         * DynamicComponents can have two modes, an edit (config) and an view (component) mode.
         * By default it is shown in the component mode.
         */
        this.mode = 'component';
        /**
         * Disable this to hide the error that is shown if the component was not found.
         */
        this.notFoundError = true;
        /**
         * @ignore
         */
        this.expandErrorDetails = false;
    }
    /**
     * Calls the dynamic component life cycle hook. Currently only
     * supporting onBeforeSave, a hook which is called before a config component
     * is saved.
     */
    DynamicComponentComponent.prototype.callLifeCycleHooks = function () {
        return this.callOnBeforeSaveHook();
    };
    /**
     * @ignore
     */
    DynamicComponentComponent.prototype.ngOnChanges = function () {
        var _this = this;
        this.dynamicComponentService
            .getById$(this.componentId)
            .subscribe(function (cmp) { return _this.loadComponent(cmp); });
    };
    DynamicComponentComponent.prototype.loadComponent = function (dynamicComponent) {
        try {
            this.error = undefined;
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
            this.host.clear();
            this.componentRef = this.host.createComponent(componentFactory);
            this.componentRef.instance.config = this.config;
        }
        catch (ex) {
            this.error = ex;
        }
    };
    DynamicComponentComponent.prototype.callOnBeforeSaveHook = function () {
        if (!this.componentRef) {
            return of(true);
        }
        var hook = this.componentRef.instance.onBeforeSave;
        if (hook) {
            var result = hook.call(this.componentRef.instance, this.config);
            if (isUndefined(result)) {
                return of(true);
            }
            return isObservable(result) ? result : of(result);
        }
        return of(true);
    };
    DynamicComponentComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: DynamicComponentService }
    ]; };
    __decorate([
        Input()
    ], DynamicComponentComponent.prototype, "componentId", void 0);
    __decorate([
        Input()
    ], DynamicComponentComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], DynamicComponentComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], DynamicComponentComponent.prototype, "notFoundError", void 0);
    __decorate([
        ViewChild('host', { read: ViewContainerRef, static: true })
    ], DynamicComponentComponent.prototype, "host", void 0);
    DynamicComponentComponent = __decorate([
        Component({
            selector: 'c8y-dynamic-component',
            template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted top-m-sm\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i class=\"fa fa-chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
        })
    ], DynamicComponentComponent);
    return DynamicComponentComponent;
}());

var DynamicComponentModule = /** @class */ (function () {
    function DynamicComponentModule() {
    }
    DynamicComponentModule = __decorate([
        NgModule({
            declarations: [DynamicComponentComponent],
            imports: [CommonModule$1, CollapseModule, RouterModule$1.forChild([]), I18nModule],
            exports: [DynamicComponentComponent],
            providers: [DynamicComponentService]
        })
    ], DynamicComponentModule);
    return DynamicComponentModule;
}());

var DashboardChildActionComponent = /** @class */ (function () {
    function DashboardChildActionComponent() {
    }
    __decorate([
        ViewChild('template', { static: false })
    ], DashboardChildActionComponent.prototype, "template", void 0);
    DashboardChildActionComponent = __decorate([
        Component({
            selector: 'c8y-dashboard-child-action',
            template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>\n"
        })
    ], DashboardChildActionComponent);
    return DashboardChildActionComponent;
}());

var DashboardChildTitleComponent = /** @class */ (function () {
    function DashboardChildTitleComponent() {
    }
    DashboardChildTitleComponent = __decorate([
        Component({
            selector: 'c8y-dashboard-child-title',
            template: "<div class=\"card-title\">\n  <ng-content></ng-content>\n</div>\n"
        })
    ], DashboardChildTitleComponent);
    return DashboardChildTitleComponent;
}());

/**
 * Displays a CSS grid which is customizable by the customer. You can set
 * `c8y-dashboard-child`-components on it or position any element on it by
 * setting the grid CSS properties. On change (resize, or rearrange) the
 * component emits an change event.
 *
 * ## Example:
 *
 * ```html
 * <c8y-title>Hello from outlet</c8y-title>
 *
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
 * </c8y-action-bar-item>
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="isFrozen = !isFrozen">
 *     <i [c8yIcon]="isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *   </button>
 * </c8y-action-bar-item>
 *
 * <c8y-dashboard (dashboardChange)="dashboardChange($event)">
 *   <c8y-dashboard-child
 *     [isFrozen]="isFrozen"
 *     title="dynamic"
 *     *ngFor="let widget of widgets"
 *     #current
 *   >
 *     x: {{ current.x }}<br />
 *     y: {{ current.y }}<br />
 *     width: {{ current.width }}<br />
 *     height: {{ current.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="1"
 *     [width]="3"
 *     [height]="2"
 *     [data]="widget"
 *     [class]="'card card-dashboard panel-title-regular panel-content-branded panel-title-overlay'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>World!</span>
 *     </c8y-dashboard-child-title>
 *     x: {{ cpWidget.x }}<br />
 *     y: {{ cpWidget.y }}<br />
 *     width: {{ cpWidget.width }}<br />
 *     height: {{ cpWidget.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget2
 *     [isFrozen]="isFrozen"
 *     [x]="8"
 *     [y]="1"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card card-dashboard panel-content-dark'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>Hello!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget2.isFrozen = !cpWidget2.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget2.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget2.x }}<br />
 *     y: {{ cpWidget2.y }}<br />
 *     width: {{ cpWidget2.width }}<br />
 *     height: {{ cpWidget2.height }}<br />
 *   </c8y-dashboard-child>
 *
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * </c8y-dashboard>
 * ```
 */
var DashboardComponent = /** @class */ (function () {
    function DashboardComponent(element, sanitizer) {
        this.element = element;
        this.sanitizer = sanitizer;
        /**
         * The amount of columns on that dashboard.
         */
        this.columns = 12;
        /**
         * The spacing between each children in pixel.
         */
        this.gap = 12;
        /**
         * The amount of rows to dusplay. Set to auto to
         * auto extend the rows.
         */
        this.rows = 'auto';
        /**
         * An event fired if the dashboard was changed.
         */
        this.dashboardChange = new EventEmitter();
        this.lastRow = 1;
        this.DEFAULT_ROW_SIZE = 68;
    }
    Object.defineProperty(DashboardComponent.prototype, "columnSize", {
        /**
         * The current column size.
         */
        get: function () {
            return this.dashboardRect.width / this.columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardComponent.prototype, "rowSize", {
        /**
         * The current row size.
         */
        get: function () {
            return this.rows === 'auto' ? this.DEFAULT_ROW_SIZE : this.calculateRowSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardComponent.prototype, "inlineStyle", {
        /**
         * Returns all positioning styles. Nasty workaround for that issue:
         * https://github.com/angular/angular/issues/9343
         */
        get: function () {
            return this.sanitizer.bypassSecurityTrustStyle("\n        -ms-grid-columns: (1fr)[" + this.columns + "];\n        grid-template-columns: repeat(" + this.columns + ", 1fr);\n        " + (this.rows !== 'auto' ? "grid-template-rows: repeat(" + this.rows + ", 1fr);" : '') + "\n        grid-auto-rows: " + (this.rowSize + this.gap) + "px;\n        -ms-grid-rows: (" + (this.rowSize + this.gap) + "px)[" + (this.rows === 'auto' ? this.lastRow : this.rows) + "];\n        margin: -" + this.gap + "px;\n      ");
        },
        enumerable: true,
        configurable: true
    });
    DashboardComponent.prototype.ngAfterContentInit = function () {
        this.onResize();
        this.getLastRow();
    };
    DashboardComponent.prototype.onResize = function () {
        this.updateRectSize();
    };
    /**
     * Gets the last row
     * (mainly for IE11 which doesn't support grid-auto-rows CSS property)
     */
    DashboardComponent.prototype.getLastRow = function () {
        var lastRow = 1;
        this.children.forEach(function (widget) {
            if (lastRow < widget.y + widget.width) {
                lastRow = widget.y + widget.width;
            }
        });
        this.lastRow = lastRow + 1;
    };
    /**
     * Updates the current rect size of the dashboard.
     */
    DashboardComponent.prototype.updateRectSize = function () {
        var ele = this.element.nativeElement;
        this.dashboardRect = ele.getBoundingClientRect();
    };
    DashboardComponent.prototype.emitChange = function (widget) {
        this.dashboardChange.emit({ source: widget, children: this.children.toArray() });
    };
    DashboardComponent.prototype.calculateRowSize = function () {
        return this.dashboardRect.height / this.rows;
    };
    DashboardComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer }
    ]; };
    __decorate([
        ContentChildren(forwardRef(function () { return DashboardChildComponent; }))
    ], DashboardComponent.prototype, "children", void 0);
    __decorate([
        Input()
    ], DashboardComponent.prototype, "columns", void 0);
    __decorate([
        Input()
    ], DashboardComponent.prototype, "gap", void 0);
    __decorate([
        Input()
    ], DashboardComponent.prototype, "rows", void 0);
    __decorate([
        Output()
    ], DashboardComponent.prototype, "dashboardChange", void 0);
    __decorate([
        HostBinding('attr.style')
    ], DashboardComponent.prototype, "inlineStyle", null);
    __decorate([
        HostListener('window:resize')
    ], DashboardComponent.prototype, "onResize", null);
    DashboardComponent = __decorate([
        Component({
            selector: 'c8y-dashboard',
            template: "<ng-content></ng-content>\n",
            host: {
                class: 'c8y-grid-dashboard dashboard-grid'
            },
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DashboardComponent);
    return DashboardComponent;
}());

var DashboardChildChange = /** @class */ (function () {
    function DashboardChildChange(childToChange) {
        this.MIN_WIDTH = 2;
        this.MIN_HEIGHT = 1;
        this.PIXEL_SIZE_THRESHOLD = 10;
        this.diffX = 0;
        this.diffY = 0;
        this.dashboard = childToChange.dashboard;
        this.children = childToChange.dashboard.children
            ? childToChange.dashboard.children.filter(function (child) { return childToChange !== child; })
            : [];
        this.child = childToChange;
    }
    Object.defineProperty(DashboardChildChange.prototype, "resize$", {
        get: function () {
            var _this = this;
            return this.child.dragSource.moved.pipe(map(function (move) { return _this.getPixelSize(move); }), tap(function (resizeDimension) { return _this.setPixelSize(resizeDimension); }), map(function (resizeDimension) { return _this.getDimensionSize(resizeDimension); }), distinctUntilChanged(function (prev, next) { return prev.width === next.width && prev.height === next.height; }), map(function (dimension) { return _this.setDimension(dimension); }), this.arrangePipe());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardChildChange.prototype, "drag$", {
        get: function () {
            var _this = this;
            return this.child.dragSource.moved.pipe(map(function (move) { return _this.getDimensionPosition(move); }), filter(function (dimension) {
                return dimension.x >= 0 &&
                    dimension.x <= _this.dashboard.columns - _this.child.width &&
                    dimension.y >= 0;
            }), distinctUntilChanged(function (prev, next) { return prev.x === next.x && prev.y === next.y; }), this.arrangePipe());
        },
        enumerable: true,
        configurable: true
    });
    DashboardChildChange.prototype.findFreeDimension = function () {
        var y = -1;
        var x = 0;
        var found = false;
        var _a = this.child, width = _a.width, height = _a.height;
        if (width > this.dashboard.columns) {
            throw new Error('The child does not fit on the current dashboard.');
        }
        do {
            x = 0;
            y++;
            while (x + width <= this.dashboard.columns) {
                if (this.getCollided({ x: x, y: y, width: width, height: height }).length === 0) {
                    found = true;
                    break;
                }
                x++;
            }
        } while (!found);
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.collapseUpAll = function () {
        return sortBy(__spread([this.child], this.children), ['y']).forEach(function (w) {
            var ds = new DashboardChildChange(w);
            var newPosition = ds.collapseUp(w);
            ds.setDimension(newPosition);
        });
    };
    DashboardChildChange.prototype.arrangeAll = function (arrange) {
        var current = arrange.current, scan = arrange.scan, spacing = arrange.spacing, origin = arrange.origin;
        var collided = this.getCollided(current, sortBy(scan, ['y']));
        return collided.map(function (child) {
            var ds = new DashboardChildChange(child);
            ds.setDimension(__assign({}, child, { y: spacing }));
            return {
                current: child,
                scan: scan.filter(function (w) { return w !== child; }),
                spacing: child.y + child.height,
                origin: origin
            };
        });
    };
    DashboardChildChange.prototype.arrangePipe = function () {
        var _this = this;
        return pipe(map(function (dimension) {
            return ({
                current: dimension,
                scan: _this.children,
                spacing: dimension.y + dimension.height,
                origin: __assign({}, dimension)
            });
        }), expand(function (dimensions) { return _this.arrangeAll(dimensions); }), map(function (_a) {
            var origin = _a.origin;
            return origin;
        }), map(function (dimension) { return _this.setDimension(dimension, true); }), tap(function () { return _this.collapseUpAll(); }), tap(function () { return _this.dashboard.getLastRow(); }));
    };
    DashboardChildChange.prototype.collapseUp = function (dimension) {
        var y = dimension.y;
        while (y > 0) {
            if (this.getCollided(__assign({}, dimension, { y: y - 1 })).length !== 0) {
                break;
            }
            y--;
        }
        return __assign({}, dimension, { y: y });
    };
    DashboardChildChange.prototype.setDimension = function (dimension, notIfColliding) {
        if (notIfColliding === void 0) { notIfColliding = false; }
        if (notIfColliding && this.getCollided(dimension).length > 0) {
            return;
        }
        this.child.x = dimension.x;
        this.child.y = dimension.y;
        if (dimension.width >= this.MIN_WIDTH &&
            dimension.x + dimension.width <= this.dashboard.columns) {
            this.child.width = dimension.width;
        }
        else if (dimension.width < this.MIN_WIDTH) {
            dimension.width = this.MIN_WIDTH;
        }
        else {
            dimension.width = this.dashboard.columns - dimension.x;
        }
        if (dimension.height >= this.MIN_HEIGHT) {
            this.child.height = dimension.height;
        }
        else {
            dimension.height = this.MIN_WIDTH;
        }
        return dimension;
    };
    DashboardChildChange.prototype.setPixelSize = function (_a) {
        var width = _a.width, height = _a.height;
        if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
            this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
        }
        if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
            this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
        }
    };
    DashboardChildChange.prototype.getPixelSize = function (moveEvent) {
        var draggedElement = moveEvent.source.element.nativeElement.parentNode;
        if (!this.diffX) {
            var rect = draggedElement.getBoundingClientRect();
            this.diffX = rect.left;
            this.diffY = rect.top;
        }
        var _a = moveEvent.pointerPosition, x = _a.x, y = _a.y;
        var width = Math.round(x - this.diffX);
        var height = Math.round(y - this.diffY);
        return { width: width, height: height, pointer: { x: x, y: y } };
    };
    DashboardChildChange.prototype.getDimensionSize = function (resizePosition) {
        var _a = this.child, x = _a.x, y = _a.y;
        var ds = this.dashboard.dashboardRect;
        var column = this.dashboard.columnSize;
        var row = this.dashboard.rowSize + this.dashboard.gap;
        var width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
        var height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.getDimensionPosition = function (moveEvent) {
        var draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
        if (!this.diffX) {
            var rect = draggedElement.getBoundingClientRect();
            this.diffX = moveEvent.pointerPosition.x - rect.left;
            this.diffY = moveEvent.pointerPosition.y - rect.top;
        }
        var left = moveEvent.pointerPosition.x - this.diffX;
        var top = moveEvent.pointerPosition.y - this.diffY;
        var _a = this.child, width = _a.width, height = _a.height;
        var ds = this.dashboard.dashboardRect;
        var column = this.dashboard.columnSize;
        var row = this.dashboard.rowSize + this.dashboard.gap / 2;
        var x = Math.round((left - ds.left) / column);
        var y = Math.round((top - ds.top) / row);
        return { x: x, y: y, width: width, height: height };
    };
    DashboardChildChange.prototype.doesCollide = function (a, b) {
        if (b.x === undefined) {
            return false;
        }
        return !(a.y + a.height - 1 < b.y ||
            a.y > b.y + b.height - 1 ||
            a.x + a.width - 1 < b.x ||
            a.x > b.x + b.width - 1);
    };
    DashboardChildChange.prototype.getCollided = function (currentDimension, dimensions) {
        var _this = this;
        if (dimensions === void 0) { dimensions = this.children; }
        var collided = dimensions.filter(function (dimension) { return _this.doesCollide(currentDimension, dimension); });
        return collided;
    };
    return DashboardChildChange;
}());

/**
 * A dashboard child allows to position elements
 * correctly on a grid. The user can then resize and
 * rearrange the elements, as long as they are not `frozen`.
 *
 * By setting `c8y-dashboard-child-actions` and
 * `c8y-dashboard-child-title` on the element you can add
 * custom actions or a custom title to the current child.
 *
 * By adding the correct branded classes, you can define
 * the look and feel of the child. By default it is displayed
 * as a card.
 *
 * Example:
 *
 * ```html
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * ```
 */
var DashboardChildComponent = /** @class */ (function () {
    function DashboardChildComponent(dashboard, sanitizer, element) {
        this.dashboard = dashboard;
        this.sanitizer = sanitizer;
        this.element = element;
        this.actions = [];
        this.isResize = false;
        this.isDragging = false;
        this.klasses = {};
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        /**
         * The width of the component in grid-columns.
         */
        this.width = 1;
        /**
         * The height of the component in grid-rows.
         */
        this.height = 1;
        /**
         * The margin of the child in pixel.
         */
        this.margin = 12;
        /**
         * If a dashboard is frozen, all children cannot be moved
         * or resized.
         */
        this.isFrozen = false;
        /**
         * The child content is initialized, as soon it is scrolled into viewport
         */
        this.useIntersection = false;
        /**
         * An event fired if a child change is started (dragging or resizing)
         */
        this.changeStart = new EventEmitter();
        /**
         * An event fired if a child change is ended
         */
        this.changeEnd = new EventEmitter();
        /**
         * All classes added to this child
         */
        this.class = {};
        /**
         * An indicator if the child is intersected (that mean visible for the user)
         */
        this.intersected = false;
    }
    Object.defineProperty(DashboardChildComponent.prototype, "pxWidth", {
        /**
         * Updates the pixel width of the child (used for resizing)
         */
        set: function (value) {
            this._pxWidth = value + "px";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardChildComponent.prototype, "pxHeight", {
        /**
         * Updates the pixel height of the child (used for resizing)
         */
        set: function (value) {
            this._pxHeight = value + "px";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardChildComponent.prototype, "inlineStyle", {
        /**
         * nasty workaround for that issue:
         * https://github.com/angular/angular/issues/9343
         */
        get: function () {
            return this.sanitizer.bypassSecurityTrustStyle("\n    grid-column-start: " + (this.x + 1) + ";\n    -ms-grid-column: " + (this.x + 1) + ";\n    grid-row-start: " + (this.y + 1) + ";\n    -ms-grid-row: " + (this.y + 1) + ";\n    grid-column-end: span " + this.width + ";\n    -ms-grid-column-span: " + this.width + ";\n    grid-row-end: span " + this.height + ";\n    -ms-grid-row-span: " + this.height + ";\n    display: block;\n    margin: " + (this.margin || 12) + "px;\n    ");
        },
        enumerable: true,
        configurable: true
    });
    DashboardChildComponent.prototype.ngOnChanges = function () {
        this.klasses = __assign({ card: true, 'card-dashboard': true, disabled: this.isFrozen, 'on-resize': this.isResize }, this.class);
    };
    DashboardChildComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.x === undefined || this.y === undefined) {
            setTimeout(function () { return _this.setDynamicDimension(); });
        }
        if (this.useIntersection && 'IntersectionObserver' in window) {
            var intersectionObserver_1 = new IntersectionObserver(function (event) { return (_this.intersected = _this.childInView(event[0], intersectionObserver_1)); });
            intersectionObserver_1.observe(this.element.nativeElement);
        }
        else {
            this.intersected = true;
        }
    };
    DashboardChildComponent.prototype.setDynamicDimension = function () {
        var ds = new DashboardChildChange(this);
        var _a = ds.findFreeDimension(), x = _a.x, y = _a.y;
        this.x = x;
        this.y = y;
    };
    DashboardChildComponent.prototype.resizeStarted = function ($event) {
        this.isResize = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        var positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.resize$.subscribe();
        this.changeStart.emit(this);
        this.ngOnChanges();
    };
    DashboardChildComponent.prototype.dragStarted = function ($event) {
        this.isDragging = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        var positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.drag$.subscribe();
        this.changeStart.emit(this);
    };
    DashboardChildComponent.prototype.reset = function ($event) {
        this.isResize = false;
        this.isDragging = false;
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        this.ngOnChanges();
        if ($event) {
            $event.source.reset();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
            this.dashboard.emitChange(this);
            this.changeEnd.emit(this);
        }
    };
    DashboardChildComponent.prototype.childInView = function (event, observer) {
        if (event.isIntersecting) {
            observer.unobserve(event.target);
            return true;
        }
        return false;
    };
    DashboardChildComponent.ctorParameters = function () { return [
        { type: DashboardComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return DashboardComponent; }),] }] },
        { type: DomSanitizer },
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(DashboardChildActionComponent)
    ], DashboardChildComponent.prototype, "actions", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "x", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "y", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "width", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "height", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "margin", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "isFrozen", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "useIntersection", void 0);
    __decorate([
        Output()
    ], DashboardChildComponent.prototype, "changeStart", void 0);
    __decorate([
        Output()
    ], DashboardChildComponent.prototype, "changeEnd", void 0);
    __decorate([
        Input()
    ], DashboardChildComponent.prototype, "class", void 0);
    __decorate([
        HostBinding('attr.style')
    ], DashboardChildComponent.prototype, "inlineStyle", null);
    DashboardChildComponent = __decorate([
        Component({
            selector: 'c8y-dashboard-child',
            template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <div class=\"optionsBtn dropdown\" dropdown container=\"body\">\n          <a\n            title=\"{{ 'Settings' | translate }}\"\n            href=\"\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </a>\n          <ul\n            class=\"dropdown-menu dropdown-menu-right\"\n            style=\"right: -41px;top: 3px;\"\n            *dropdownMenu\n          >\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n",
            host: {
                class: 'dashboard-grid-child'
            }
        }),
        __param(0, Inject(forwardRef(function () { return DashboardComponent; })))
    ], DashboardChildComponent);
    return DashboardChildComponent;
}());

var WidgetsDashboardComponent = /** @class */ (function () {
    function WidgetsDashboardComponent() {
        this.settings = {
            isFrozen: false,
            isDisabled: false,
            widgetMargin: 12,
            translateWidgetTitle: false,
            defaultHeight: 4,
            defaultWidth: 4,
            allowFullscreen: false,
            canDelete: true,
            isLoading: false,
        };
        this.onAddWidget = new EventEmitter();
        this.onEditWidget = new EventEmitter();
        this.onDeleteWidget = new EventEmitter();
        this.onChangeDashboard = new EventEmitter();
        this.onEditDashboard = new EventEmitter();
        this.onDeleteDashboard = new EventEmitter();
        this.onFreeze = new EventEmitter();
        this.onChangeStart = new EventEmitter();
        this.onChangeEnd = new EventEmitter();
    }
    Object.defineProperty(WidgetsDashboardComponent.prototype, "_settings", {
        set: function (settings) {
            this.settings = __assign({}, this.settings, settings);
        },
        enumerable: true,
        configurable: true
    });
    WidgetsDashboardComponent.prototype.toggleFullscreen = function () {
        var elem = document.body;
        var doc = document;
        if (!this.fullScreen()) {
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            }
            else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
            else if (elem.mozRequestFullScreen) {
                elem.mozRequestFullScreen();
            }
            else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
            }
        }
        else if (doc.exitFullscreen) {
            doc.exitFullscreen();
        }
        else if (doc.msExitFullscreen) {
            doc.msExitFullscreen();
        }
        else if (doc.mozCancelFullScreen) {
            doc.mozCancelFullScreen();
        }
        else if (doc.webkitExitFullscreen) {
            doc.webkitExitFullscreen();
        }
    };
    WidgetsDashboardComponent.prototype.fullScreen = function () {
        var doc = document;
        return !!(doc.fullscreenElement ||
            doc.mozFullScreenElement ||
            doc.webkitFullscreenElement ||
            doc.msFullscreenElement);
    };
    __decorate([
        Input()
    ], WidgetsDashboardComponent.prototype, "widgets", void 0);
    __decorate([
        Input()
    ], WidgetsDashboardComponent.prototype, "context", void 0);
    __decorate([
        Input()
    ], WidgetsDashboardComponent.prototype, "contextDashboard", void 0);
    __decorate([
        Input('settings')
    ], WidgetsDashboardComponent.prototype, "_settings", null);
    __decorate([
        Input()
    ], WidgetsDashboardComponent.prototype, "breadcrumb", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onAddWidget", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onEditWidget", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onDeleteWidget", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onChangeDashboard", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onEditDashboard", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onDeleteDashboard", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onFreeze", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onChangeStart", void 0);
    __decorate([
        Output()
    ], WidgetsDashboardComponent.prototype, "onChangeEnd", void 0);
    WidgetsDashboardComponent = __decorate([
        Component({
            selector: 'c8y-widgets-dashboard',
            template: "<c8y-title *ngIf=\"!!settings.title\">\n  {{ settings.title | translate }}\n</c8y-title>\n\n<c8y-breadcrumb *ngIf=\"!!breadcrumb\">\n  <c8y-breadcrumb-item\n    [icon]=\"breadcrumb.icon\"\n    [label]=\"breadcrumb.label\"\n    [path]=\"breadcrumb.path\"\n  ></c8y-breadcrumb-item>\n</c8y-breadcrumb>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onAddWidget.observers.length\">\n  <button\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onAddWidget.emit()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i> {{ 'Add widget' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onEditDashboard.observers.length\">\n  <button\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onEditDashboard.emit()\"\n  >\n    <i c8yIcon=\"pencil\"></i> {{ 'Edit' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"settings.allowFullscreen\">\n  <button class=\"btn btn-link\" (click)=\"toggleFullscreen()\">\n    <i [c8yIcon]=\"fullScreen() ? 'compress' : 'expand'\"></i> {{ 'Full screen' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"navbar-form\"\n  *ngIf=\"onFreeze.observers.length\"\n>\n  <button\n    title=\"{{ 'Lock/unlock this dashboard' | translate }}\"\n    class=\"btn btn-default\"\n    [ngClass]=\"{ active: settings.isFrozen }\"\n    (click)=\"onFreeze.emit(settings)\"\n    [disabled]=\"settings.isDisabled\"\n    uib-btn-checkbox\n  >\n    <i [c8yIcon]=\"settings.isFrozen ? 'lock' : 'unlock'\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'more'\"\n  [priority]=\"-3000\"\n  *ngIf=\"settings.canDelete && onDeleteDashboard.observers.length\"\n>\n  <button (click)=\"onDeleteDashboard.emit()\" [disabled]=\"settings.isFrozen || settings.isDisabled\">\n    <i c8yIcon=\"trash\"></i>&nbsp;<span translate>Delete dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- empty state -->\n<div class=\"c8y-empty-state text-center\" *ngIf=\"!settings.isLoading && widgets.length === 0\">\n  <h1 class=\"c8y-icon c8y-icon-device c8y-icon-duocolor\"></h1>\n  <h3 translate>No widgets to display.</h3>\n  <div *ngIf=\"!settings.isFrozen && onAddWidget.observers.length\">\n    <p translate>Add widgets to this dashboard.</p>\n    <div>\n      <button\n        [disabled]=\"settings.isFrozen || settings.isDisabled\"\n        (click)=\"onAddWidget.emit()\"\n        class=\"btn btn-primary\"\n        translate\n      >\n        Add widget\n      </button>\n    </div>\n    <p c8y-guide-docs>\n      <small forceHtmlTranslate ngNonBindable\n        >Find out more in the\n        <a c8y-guide-href=\"users-guide/cockpit/#dashboards\">User guide`KEEP_ORIGINAL`</a>.</small\n      >\n    </p>\n  </div>\n</div>\n<!-- /.empty settings -->\n\n<div class=\"col-xs-12 text-center\" *ngIf=\"settings.isLoading\">\n  <div class=\"spinner\" style=\"position: relative;\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n\n<c8y-dashboard\n  (dashboardChange)=\"onChangeDashboard.emit($event)\"\n  #dashboard\n  *ngIf=\"!settings.isLoading\"\n>\n  <c8y-dashboard-child\n    *ngFor=\"let widget of widgets\"\n    [x]=\"widget._x\"\n    [y]=\"widget._y\"\n    [width]=\"widget._width || settings.defaultWidth\"\n    [height]=\"widget._height || settings.defaultHeight\"\n    [margin]=\"settings.widgetMargin\"\n    [isFrozen]=\"settings.isFrozen || settings.isDisabled\"\n    [class]=\"widget.classes\"\n    [data]=\"widget\"\n    [useIntersection]=\"true\"\n    (changeStart)=\"onChangeStart.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    (changeEnd)=\"onChangeEnd.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    #child\n  >\n    <c8y-dashboard-child-title>\n      <span *ngIf=\"settings.translateWidgetTitle\"> {{ widget.title | translate }}</span>\n      <span *ngIf=\"!settings.translateWidgetTitle\">\n        {{ widget.title }}\n      </span>\n    </c8y-dashboard-child-title>\n    <c8y-dashboard-child-action *ngIf=\"onEditWidget.observers.length\">\n      <button (click)=\"onEditWidget.emit({ widget: widget, source: child, dashboard: dashboard })\">\n        <i c8yIcon=\"pencil\"></i>&nbsp;<span translate>Edit</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dashboard-child-action *ngIf=\"onDeleteWidget.observers.length\">\n      <button\n        (click)=\"onDeleteWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"trash\"></i>&nbsp;<span translate>Remove</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dynamic-component\n      [componentId]=\"widget.componentId || widget.name\"\n      [config]=\"\n        widget.templateUrl || widget.widgetComponent\n          ? { child: widget, dashboard: contextDashboard, context: context }\n          : widget.config\n      \"\n      *ngIf=\"child.intersected\"\n    ></c8y-dynamic-component>\n  </c8y-dashboard-child>\n</c8y-dashboard>\n",
            host: {
                style: "\n      display: block;\n    ",
                class: 'dashboard c8y-grid-dashboard'
            }
        })
    ], WidgetsDashboardComponent);
    return WidgetsDashboardComponent;
}());

var DashboardModule = /** @class */ (function () {
    function DashboardModule() {
    }
    DashboardModule = __decorate([
        NgModule({
            declarations: [
                DashboardChildComponent,
                DashboardComponent,
                DashboardChildTitleComponent,
                DashboardChildActionComponent,
                WidgetsDashboardComponent
            ],
            imports: [
                CommonModule,
                ActionBarModule,
                DynamicComponentModule,
                DragDropModule,
                BsDropdownModule.forRoot(),
                HeaderModule,
                DocsModule,
                BreadcrumbModule,
            ],
            exports: [
                DashboardComponent,
                DashboardChildComponent,
                DashboardChildTitleComponent,
                DashboardChildActionComponent,
                WidgetsDashboardComponent
            ]
        })
    ], DashboardModule);
    return DashboardModule;
}());

/**
 * Template to be used to override the icons inside the step header.
 */
var C8yStepperIcon = /** @class */ (function () {
    function C8yStepperIcon(templateRef) {
        this.templateRef = templateRef;
    }
    C8yStepperIcon.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    __decorate([
        Input('c8yStepperIcon')
    ], C8yStepperIcon.prototype, "name", void 0);
    C8yStepperIcon = __decorate([
        Directive({
            selector: 'ng-template[c8yStepperIcon]'
        })
    ], C8yStepperIcon);
    return C8yStepperIcon;
}());

/**
 * C8yStepper extends the CdkStepper. You can use cdk based functionality and inputs.
 * Additional to that you are able to modify the behavior and also the look and feel when
 * using the C8yStepper.
 *
 * The C8yStepper is used to present any step-based process to the user.
 * A stepper, C8yStepper and/or CdkStepper is the parent of cdk-steps.
 * Each cdk-step represents one step in the whole process that you want to provide to the user.
 *
 * The C8yStepper will create, based on the given cdk-steps, a kind of stepper-progress which looks like this:
 * (1)---(2)---(3)---(n)
 * The stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.
 * You are able to override icons for each step in the stepper-progress with a template. You are also able to activate
 * default-icons for states like 'edit' and 'done'.
 *
 * To force users through every provided step, set the stepper to 'linear'.
 * This will disable the possibility to move for example from step one to step three.
 *
 * Whenever it comes to validation try to use formGroups. It is possible to
 * assign a formGroup to a cdk-step input called [stepControl], which automatically respects the
 * validation-rules that you created for this formGroup. If fields are required but not filled or
 * any other validation, like a pattern, is not matched the formGroup will be invalid. In this case
 * stepping in a linear stepper to the next step gets impossible.
 *
 * If there is the need to execute asynchronous code you have at least two possibilities.
 * First: As you learned, a cdk-step works with formGroups and Validators, so you are able to use
 * asyncValidators as well.
 * Second: The C8yStepper provides an event-emitter onStepChange which is called whenever a step-button (1)--(2)--(n)
 * in the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can
 * use this EventEmitter to call for example a custom navigate-method which performs first any async-call and then moves
 * on to the given step.
 *
 * @example
 * ```
 * <c8y-stepper
 * (onStepChange)="navigate($event)"
 * [disableDefaultIcons]="{ edit: true, done: false }"
 * [customClasses]="['m-l-40', 'm-r-40', 'm-t-32']"
 * linear
 * >
 * <!-- override icons -->
 * <ng-template c8yStepperIcon="final">
 *   <span [c8yIcon]="'hand-peace-o'"></span>
 * </ng-template>
 *
 * <cdk-step [stepControl]="formGroupStepOne" label="Name of the hero">
 *   <div class="m-l-40 m-r-40 m-t-32">
 *     <h4 class="p-b-8" translate>What is the name of your hero?</h4>
 *     <c8y-form-group>
 *      <div [formGroup]="formGroupStepOne">
 *       <input
 *         class="form-control"
 *         type="text"
 *         formControlName="name"
 *         placeholder="Mister X"
 *         #nameRef
 *         required
 *       />
 *       <c8y-messages>
 *         <c8y-message *ngIf="!formGroupStepOne.untouched && !nameRef.value" translate
 *           >Enter the name of the Superhero</c8y-message
 *         >
 *       </c8y-messages>
 *      </div>
 *     </c8y-form-group>
 *   </div>
 *   <c8y-stepper-buttons></c8y-stepper-buttons>
 * </cdk-step>
 * <cdk-step>
 *  ...
 * </cdk-step state="final">
 * </c8y-stepper>
 * ```
 */
var C8yStepper = /** @class */ (function (_super) {
    __extends(C8yStepper, _super);
    function C8yStepper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Optional
         * Indicator if icons for edit and done state should be shown in step-header buttons
         */
        _this.disableDefaultIcons = { edit: true, done: true };
        /**
         * Will emit the step index number whenever a step-header button was clicked
         * It listens to the stepIndex Subject.
         */
        _this.onStepChange = new EventEmitter();
        /** Consumer-specified template-refs to be used to override the header icons. */
        _this._iconOverrides = {};
        _this._stepIndex = new Subject();
        return _this;
    }
    C8yStepper_1 = C8yStepper;
    C8yStepper.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._icons.forEach(function (_a) {
            var name = _a.name, templateRef = _a.templateRef;
            return (_this._iconOverrides[name] = templateRef);
        });
        this._stepIndexSubscription = this._stepIndex.subscribe(function (index) { return _this.onStepChange.emit(index); });
    };
    C8yStepper.prototype.ngOnDestroy = function () {
        if (this._stepIndexSubscription && !this._stepIndexSubscription.closed) {
            this._stepIndexSubscription.unsubscribe();
        }
    };
    /**
     * Manipulates the state based on the disabledDefaultIcons Input()
     * Changing edit or done to false will change the icons within step-header buttons
     * @param index step index
     * @param state step state, like 'done', 'edit', 'error'
     */
    C8yStepper.prototype.getIndicatorType = function (index, state) {
        var stepState = this._getIndicatorType(index, state);
        var _state = state;
        switch (stepState) {
            case STEP_STATE.EDIT:
                if (!this.disableDefaultIcons.edit) {
                    _state = STEP_STATE.EDIT;
                }
                break;
            case STEP_STATE.DONE:
                if (!this.disableDefaultIcons.done) {
                    _state = STEP_STATE.DONE;
                }
                else {
                    _state = '_done';
                }
                break;
        }
        return _state;
    };
    /**
     * Pushs the step index to the subject
     * @param index step index
     */
    C8yStepper.prototype.setIndex = function (index) {
        this._stepIndex.next(index);
    };
    var C8yStepper_1;
    __decorate([
        Input()
    ], C8yStepper.prototype, "disableDefaultIcons", void 0);
    __decorate([
        Input()
    ], C8yStepper.prototype, "customClasses", void 0);
    __decorate([
        Output()
    ], C8yStepper.prototype, "onStepChange", void 0);
    __decorate([
        ContentChildren(C8yStepperIcon, { descendants: true })
    ], C8yStepper.prototype, "_icons", void 0);
    C8yStepper = C8yStepper_1 = __decorate([
        Component({
            selector: 'c8y-stepper',
            template: "<ul class=\"c8y-stepper\" [ngClass]=\"customClasses\">\n  <li *ngFor=\"let step of steps; let i = index\">\n    <c8y-stepper-progress\n      [iconOverrides]=\"_iconOverrides\"\n      [state]=\"getIndicatorType(i, step.state)\"\n      [index]=\"i\"\n      [selected]=\"selectedIndex === i\"\n      (onStepClicked)=\"setIndex($event)\"\n      title=\"{{ step.label | translate }}\"\n      [ngClass]=\"{'active': selectedIndex === i}\"\n    >\n    </c8y-stepper-progress>\n    <div class=\"c8y-step__label\"  title=\"{{ step.label | translate }}\">\n      {{ step.label | translate }}\n    </div>\n  </li>\n</ul>\n<ng-container [ngTemplateOutlet]=\"selected.content\"></ng-container>\n",
            providers: [{ provide: CdkStepper, useExisting: C8yStepper_1 }]
        })
    ], C8yStepper);
    return C8yStepper;
}(CdkStepper));

var C8yStepperProgress = /** @class */ (function () {
    function C8yStepperProgress() {
        /** Emits the index: number of the step which was clicked */
        this.onStepClicked = new EventEmitter();
    }
    /** Called on click and emits the step index */
    C8yStepperProgress.prototype.stepSelected = function () {
        this.onStepClicked.emit(this.index);
    };
    __decorate([
        Input()
    ], C8yStepperProgress.prototype, "iconOverrides", void 0);
    __decorate([
        Input()
    ], C8yStepperProgress.prototype, "index", void 0);
    __decorate([
        Input()
    ], C8yStepperProgress.prototype, "selected", void 0);
    __decorate([
        Input()
    ], C8yStepperProgress.prototype, "state", void 0);
    __decorate([
        Output()
    ], C8yStepperProgress.prototype, "onStepClicked", void 0);
    C8yStepperProgress = __decorate([
        Component({
            selector: 'c8y-stepper-progress',
            template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{ active: selected, 'step-done': state === 'done' || state === '_done' }\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
        })
    ], C8yStepperProgress);
    return C8yStepperProgress;
}());

/**
 * C8yStepperButtons provides a convinient way to have, according to
 * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
 * step-process. Buttons rendered with the help of this component will use the branding css.
 *
 * By default all steps with this component in use will render a next button, expect the last step.
 * The other way around, every step using this component will render a back button, expect the first step.
 * To get a cancel button rendered you need to handle the onCancel event.
 * For next and back button you don't need to handle the available events onNext and onBack because default behavior
 * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
 * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
 * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
 * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
 * on your own.
 *
 * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
 * {next?: string, back?: string, cancel?: string}
 *
 * The [pending] input is of type boolean and will enable css animation for the next button when true.
 *
 * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
 * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
 * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
 *
 * @example
 * ```
 * <c8y-stepper>
 *  <cdk-step>
 *    <!--
 *      your html code
 *          ...
 *          ...    -->
 *    <c8y-stepper-buttons
 *     (onNext)="save()"
 *     [labels]="{ next: 'Save' }"
 *     [pending]="pendingStatus"
 *     ></c8y-stepper-buttons>
 *  </cdk-step>
 * </c8y-stepper>
 *
 * // in your component:
 * async save() {
 *   this.pendingStatus = true;
 *   // your async request goes here ...
 *   // await something();
 *   this.pendingStatus = false;
 *   this.stepper.next();
 * }
 * ```
 */
var C8yStepperButtons = /** @class */ (function () {
    function C8yStepperButtons(stepper, step) {
        this.stepper = stepper;
        this.step = step;
        /**
         * Optional
         * Indicates if a request is pending and sets the next button
         * to disabled when true
         */
        this.pending = false;
        /**
         * Disabled state of a button
         */
        this.disabled = false;
        /**
         * EventEmitter which emits when cancel button is clicked
         */
        this.onCancel = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
         */
        this.onNext = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
         */
        this.onBack = new EventEmitter();
        /**
         * EventEmitter which emits when the optional custom button is clicked
         */
        this.onCustom = new EventEmitter();
        /**
         * Indicator which button should be shown.
         * Based on the cdk-steps within the c8y-stepper
         * next and back buttons are rendered.
         */
        this.showBtns = {
            cancel: false,
            back: false,
            next: false,
            custom: false
        };
    }
    C8yStepperButtons.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.showBtns.cancel = this.onCancel.observers.length > 0;
        this.showBtns.custom = this.onCustom.observers.length > 0;
        if (this.stepper && this.stepper.steps && this.step) {
            this.showBtns.back = this.stepper.steps.first !== this.step;
            this.showBtns.next = this.stepper.steps.last !== this.step;
        }
        if (this.step && this.step.stepControl) {
            this.disabled = this.step.stepControl.invalid;
            this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(function (status) {
                _this.disabled = _this.step.stepControl.invalid;
            });
        }
    };
    C8yStepperButtons.prototype.ngOnChanges = function (changes) {
        /**
         * Disable save/next button while the status is pending
         * This will prevent multiple clicks and therefore multiple requests
         */
        if (changes && changes.pending) {
            this.disabled = changes.pending.currentValue;
        }
    };
    C8yStepperButtons.prototype.ngOnDestroy = function () {
        if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
            this.statusChangeSubscription.unsubscribe();
        }
    };
    /**
     * Gets called when cancel button is clicked.
     * It will emit immediate.
     */
    C8yStepperButtons.prototype.cancel = function () {
        this.onCancel.emit();
    };
    /**
     * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.next() as default.
     */
    C8yStepperButtons.prototype.next = function () {
        if (this.onNext.observers.length > 0) {
            this.onNext.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.next();
        }
    };
    /**
     * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.previous() as default.
     */
    C8yStepperButtons.prototype.back = function () {
        this.stepper.selected.completed = false;
        if (this.onBack.observers.length > 0) {
            this.onBack.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.previous();
        }
    };
    /**
     * Gets called when the custom button is clicked.
     * It will emit immediately.
     */
    C8yStepperButtons.prototype.custom = function () {
        this.onCustom.emit();
    };
    C8yStepperButtons.ctorParameters = function () { return [
        { type: C8yStepper, decorators: [{ type: Host }] },
        { type: CdkStep, decorators: [{ type: Host }] }
    ]; };
    __decorate([
        Input()
    ], C8yStepperButtons.prototype, "labels", void 0);
    __decorate([
        Input()
    ], C8yStepperButtons.prototype, "pending", void 0);
    __decorate([
        Input()
    ], C8yStepperButtons.prototype, "disabled", void 0);
    __decorate([
        Output()
    ], C8yStepperButtons.prototype, "onCancel", void 0);
    __decorate([
        Output()
    ], C8yStepperButtons.prototype, "onNext", void 0);
    __decorate([
        Output()
    ], C8yStepperButtons.prototype, "onBack", void 0);
    __decorate([
        Output()
    ], C8yStepperButtons.prototype, "onCustom", void 0);
    C8yStepperButtons = __decorate([
        Component({
            selector: 'c8y-stepper-buttons',
            template: "<div class=\"text-center\">\n  <button *ngIf=\"showBtns.cancel\" (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\">\n    <span *ngIf=\"labels?.cancel; else cancelLabel\">{{ labels?.cancel | translate }}</span>\n    <ng-template #cancelLabel>\n      <span>{{ 'Cancel' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.back\"\n    type=\"button\"\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    [disabled]=\"pending\"\n  >\n    <span *ngIf=\"labels?.back; else backLabel\">{{ labels?.back | translate }}</span>\n    <ng-template #backLabel>\n      <span>{{ 'Back' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    *ngIf=\"showBtns.custom\"\n    (click)=\"custom()\"\n    type=\"button\"\n    class=\"btn\"\n    [ngClass]=\"{\n      'btn-default': showBtns.next,\n      'btn-primary': !showBtns.next,\n      'btn-pending': pending\n    }\"\n    [disabled]=\"pending || disabled\"\n  >\n    <span *ngIf=\"labels?.custom; else customLabel\">{{ labels?.custom | translate }}</span>\n    <ng-template #customLabel>\n      <span>{{ 'Complete' | translate }}</span>\n    </ng-template>\n  </button>\n  <button\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n  >\n    <span *ngIf=\"labels?.next; else nextLabel\">{{ labels?.next | translate }}</span>\n    <ng-template #nextLabel>\n      <span>{{ 'Next' | translate }}</span>\n    </ng-template>\n  </button>\n</div>\n"
        }),
        __param(0, Host()), __param(1, Host())
    ], C8yStepperButtons);
    return C8yStepperButtons;
}());

var ɵ0$4 = { displayDefaultIndicatorType: false };
/**
 * The angular module definition for c8y-stepper (Wizard).
 * @exports C8yStepper
 * @exports C8yStepperIcon
 * @exports C8yStepperButtons
 * @exports CdkStep
 */
var StepperModule = /** @class */ (function () {
    function StepperModule() {
    }
    StepperModule = __decorate([
        NgModule({
            imports: [CommonModule, CdkStepperModule, TooltipModule],
            declarations: [C8yStepper, C8yStepperIcon, C8yStepperProgress, C8yStepperButtons],
            exports: [C8yStepper, CdkStep, C8yStepperIcon, C8yStepperButtons],
            providers: [
                {
                    /**
                     * This emables additional states, like: edit, done and error
                     * These states are used to display custom icons, if needed.
                     * Any change in here will most probably result in not showing custom icons anymore
                     */
                    provide: STEPPER_GLOBAL_OPTIONS,
                    useValue: ɵ0$4
                }
            ]
        })
    ], StepperModule);
    return StepperModule;
}());

/**
 * Actions are functions that can be executed on the
 * current list item. They are displayed next to the
 * item and can be grouped in a dropdown.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *     Delete
 *   </c8y-li-action>
 *   <c8y-li-action (click)="(false)" icon="rocket">
 *     Launch to space
 *   </c8y-li-action>
 * </c8y-li>
 * ```
 */
var ListItemActionComponent = /** @class */ (function () {
    function ListItemActionComponent() {
        /**
         * An EventEmitter to determine what to do if the
         * action is triggered.
         */
        this.click = new EventEmitter();
    }
    __decorate([
        ViewChild('template', { static: false })
    ], ListItemActionComponent.prototype, "template", void 0);
    __decorate([
        Input()
    ], ListItemActionComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], ListItemActionComponent.prototype, "icon", void 0);
    __decorate([
        Output()
    ], ListItemActionComponent.prototype, "click", void 0);
    ListItemActionComponent = __decorate([
        Component({
            selector: 'c8y-list-item-action, c8y-li-action',
            template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n"
        })
    ], ListItemActionComponent);
    return ListItemActionComponent;
}());

/**
 * Display collapsed content on a list item. Can be
 * used for more detailed information. Use it with
 * content projection.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-collapsed>
 *     <strong>I am only visible if extended</strong>
 *   </c8y-collapsed>
 * </c8y-li>
 * ```
 */
var ListItemCollapseComponent = /** @class */ (function () {
    function ListItemCollapseComponent() {
        /**
         * The way how to toggle collapse state.
         * button (default) - additional button for toggle collapse state
         * row - toggling collapse state by clicking to entire row.
         */
        this.collapseWay = 'button';
    }
    __decorate([
        Input()
    ], ListItemCollapseComponent.prototype, "collapseWay", void 0);
    ListItemCollapseComponent = __decorate([
        Component({
            selector: 'c8y-list-item-collapse, c8y-li-collapse',
            template: "<ng-content></ng-content>\n"
        })
    ], ListItemCollapseComponent);
    return ListItemCollapseComponent;
}());

/**
 * The footer can be used with either content projection
 * or a simple string as an input.
 *
 * @example
 * ```html
 * <c8y-li>
 *   Content
 *   <c8y-li-footer>I am a footer</c8y-li-footer>
 * </c8y-li>
 * ```
 */
var ListItemFooterComponent = /** @class */ (function () {
    function ListItemFooterComponent() {
    }
    __decorate([
        Input()
    ], ListItemFooterComponent.prototype, "footer", void 0);
    ListItemFooterComponent = __decorate([
        Component({
            selector: 'c8y-list-item-footer, c8y-li-footer',
            template: "<span *ngIf=\"footer\">{{footer}}</span>\n<ng-content></ng-content>\n"
        })
    ], ListItemFooterComponent);
    return ListItemFooterComponent;
}());

/**
 * A list item is a representation of an item inside a list and
 * can be used to compose different styles in a list (mainly in a
 * <c8y-group-list>-component but also in others like the
 * <c8y-typeahead>-component):
 *  - a list with a footer
 *  - a list with one or multiple actions
 *  - an icon
 *  - a checkbox or radio input
 *
 * The item can be composed via content projection. The following
 * example shows a radio list with an icon, two actions
 * and a footer:
 * ```html
 * <c8y-list-group>
 *   <c8y-li
 *     *c8yFor="
 *       let device of devices;
 *       let i = index;
 *     "
 *   >
 *     <c8y-li-radio (onSelect)="updateSelected($event, device)"></c8y-li-radio>
 *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
 *     {{ i + 1 }}. {{ device.name || '-' }}
 *     <c8y-li-footer>
 *       Device id: <a [routerLink]="['/device', device.id]">{{ device.id }}</a>
 *     </c8y-li-footer>
 *     <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *       Delete
 *     </c8y-li-action>
 *     <c8y-li-action (click)="(false)" icon="rocket">
 *       Launch to space
 *     </c8y-li-action>
 *   </c8y-li>
 * </c8y-list-group>
 * ```
 */
var ListItemComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function ListItemComponent(element) {
        this.element = element;
        /**
         * If set to true, the class "active" is added which
         * indicates that the current row is active.
         */
        this.active = false;
        /**
         * Indicates if the current list item is collapsed. You can trigger the collapsing from
         * any element event by toggling this value.
         *
         * @example
         * ```html
         * <c8y-li #li (click)="li.collapsed = !li.collapsed">
         *  Toggle
         *  <c8y-li-collapse>
         *    I can be toggled by clicking on the row.
         *  </c8y-li-collapse
         * </c8y-li>
         * ``
         */
        this.collapsed = true;
        /**
         * An event emitter which is triggered when the user collapses the content
         * via the chevron on the right.
         */
        this.collapsedChange = new EventEmitter();
        /**
         * @ignore
         */
        this.showFooter = false;
        /**
         * @ignore
         */
        this.showActions = false;
        /**
         * @ignore
         */
        this.showCollapse = false;
        /**
         * @ignore
         */
        this.dropdownUp = false;
        this.pulse$ = new Subject();
        this.destroy$ = new Subject();
        this.ACTION_ITEM_HEIGHT = 40;
    }
    /**
     * @ignore
     */
    ListItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.pulse$
            .pipe(filter(function (apply) { return !!apply; }), tap(function () { return _this.element.nativeElement.classList.remove('c8y-list--pulse'); }), delay(100), tap(function () { return _this.element.nativeElement.classList.add('c8y-list--pulse'); }), takeUntil(this.destroy$))
            .subscribe();
    };
    /**
     * @ignore
     */
    ListItemComponent.prototype.ngAfterContentChecked = function () {
        this.actions = this.itemActions.toArray();
        this.showFooter = this.itemFooter != null;
        this.showActions = this.itemActions.length > 0;
        this.showCollapse = this.itemCollapse != null;
    };
    /**
     * @ignore
     */
    ListItemComponent.prototype.ngOnDestroy = function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * A helper function which helps to determine if the dropdown
     * should toggle up.
     */
    ListItemComponent.prototype.showDropdownUp = function () {
        var listItemRect = this.element.nativeElement.getBoundingClientRect();
        var dropdownTop = listItemRect.top;
        var dropdownHeightWithToggle = (1 + this.itemActions.length) * this.ACTION_ITEM_HEIGHT;
        var availableHeight = window.innerHeight;
        var dropdownDownFits = dropdownTop + dropdownHeightWithToggle <= availableHeight;
        this.dropdownUp = !dropdownDownFits;
    };
    /**
     * Toggles the collapse state and emits this state as
     * collapsedChange output as boolean.
     * @param $event Pass optional an event to stop propagation.
     */
    ListItemComponent.prototype.toggleCollapsed = function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.collapsed = !this.collapsed;
        this.collapsedChange.emit(this.collapsed);
    };
    /**
     * Highlights the list-item. This method should be used to show the
     * user that something within this item was changed.
     */
    ListItemComponent.prototype.pulse = function () {
        this.pulse$.next(true);
    };
    ListItemComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        HostBinding('class.active')
    ], ListItemComponent.prototype, "active", void 0);
    __decorate([
        Input()
    ], ListItemComponent.prototype, "collapsed", void 0);
    __decorate([
        Output()
    ], ListItemComponent.prototype, "collapsedChange", void 0);
    __decorate([
        ContentChild(ListItemFooterComponent, { static: false })
    ], ListItemComponent.prototype, "itemFooter", void 0);
    __decorate([
        ContentChildren(ListItemActionComponent)
    ], ListItemComponent.prototype, "itemActions", void 0);
    __decorate([
        ContentChild(ListItemCollapseComponent, { static: false })
    ], ListItemComponent.prototype, "itemCollapse", void 0);
    ListItemComponent = __decorate([
        Component({
            selector: 'c8y-list-item, c8y-li',
            template: "<div [ngClass]=\"{ 'expanded': !collapsed, interact: (itemCollapse && itemCollapse.collapseWay === 'row')}\">\n  <div class=\"c8y-list__item__block\">\n    <ng-content select=\"c8y-list-item-radio, c8y-li-radio\"></ng-content>\n    <ng-content select=\"c8y-list-item-checkbox, c8y-li-checkbox\"></ng-content>\n\n    <ng-content select=\"c8y-list-item-icon, c8y-li-icon\"></ng-content>\n\n    <div class=\"c8y-list__item__body text-truncate-wrap\" (click)=\"(itemCollapse && itemCollapse.collapseWay === 'row') && toggleCollapsed()\">\n      <ng-content select=\"c8y-list-item-body, c8y-li-body\"></ng-content>\n      <ng-content></ng-content>\n      <div class=\"c8y-list__item__footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"c8y-list-item-footer, c8y-li-footer\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"c8y-list__item__actions\" *ngIf=\"(showCollapse && (itemCollapse && itemCollapse.collapseWay === 'button')) || showActions\">\n      <button\n        class=\"collapse-btn\"\n        title=\"{{ 'Expand' | translate }}\"\n        type=\"button\"\n        (click)=\"toggleCollapsed($event)\"\n        [attr.aria-expanded]=\"!collapsed\"\n        *ngIf=\"showCollapse && itemCollapse.collapseWay === 'button'\"\n      >\n        <i [c8yIcon]=\"'chevron-down'\"></i>\n      </button>\n      <div\n        class=\"dropdown\"\n        dropdown\n        [dropup]=\"dropdownUp\"\n        *ngIf=\"showActions\"\n        (onShown)=\"showDropdownUp()\"\n      >\n        <button\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          title=\"{{ 'Actions' | translate }}\"\n          type=\"button\"\n          aria-haspopup=\"true\"\n        >\n          <i [c8yIcon]=\"'ellipsis-v'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-content select=\"c8y-list-item-action, c8y-li-action\"></ng-content>\n          <ng-container *ngFor=\"let action of actions\">\n            <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n\n      <ng-content select=\"c8y-list-item-action, c8y-li-action\" *ngIf=\"showActions\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"showCollapse\" [collapse]=\"collapsed\" [isAnimated]=\"true\">\n    <div class=\"c8y-list__item__collapse--container\">\n      <ng-content select=\"c8y-list-item-collapse, c8y-li-collapse\"></ng-content>\n    </div>\n  </div>\n</div>\n",
            host: {
                class: 'c8y-list__item'
            }
        })
    ], ListItemComponent);
    return ListItemComponent;
}());

/**
 * The li-body component can be used to define the body.
 * Usually it doesn't need to be used, as it is the default
 * content projected to a <c8y-li>.
 */
var ListItemBodyComponent = /** @class */ (function () {
    function ListItemBodyComponent() {
    }
    __decorate([
        Input()
    ], ListItemBodyComponent.prototype, "body", void 0);
    ListItemBodyComponent = __decorate([
        Component({
            selector: 'c8y-list-item-body, c8y-li-body',
            template: "<span *ngIf=\"body\">{{body}}</span>\n<ng-content></ng-content>\n"
        })
    ], ListItemBodyComponent);
    return ListItemBodyComponent;
}());

/**
 * A component to display a radio button in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-radio></c8y-li-radio>
 * </c8y-li>
 * ```
 */
var ListItemRadioComponent = /** @class */ (function () {
    function ListItemRadioComponent() {
        /**
         * Indicates if the radio is selected.
         */
        this.selected = false;
        /**
         * The name of the radio (use different names for different radio groups).
         */
        this.name = 'list_item_radio';
        /**
         * Indicates if the radio is disabled.
         */
        this.disabled = false;
        /**
         * An event emitted as soon as the radio is selected.
         */
        this.onSelect = new EventEmitter();
    }
    ListItemRadioComponent_1 = ListItemRadioComponent;
    /**
     * Resets the native radio element.
     */
    ListItemRadioComponent.prototype.reset = function () {
        this.radio.nativeElement.checked = false;
    };
    /**
     * @ignore
     */
    ListItemRadioComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    };
    /**
     * Triggered when the radio is changed.
     * @param checked Should it be checked or not?
     */
    ListItemRadioComponent.prototype.change = function (checked) {
        this.onSelect.emit(checked);
        this.model = this.value;
        if (this.onChange) {
            this.onChange(this.model);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    };
    /**
     * Registers an onChange event.
     */
    ListItemRadioComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * Registers an onTouch event.
     */
    ListItemRadioComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @ignore
     */
    ListItemRadioComponent.prototype.writeValue = function (value) {
        this.model = value;
    };
    var ListItemRadioComponent_1;
    __decorate([
        ViewChild('radio', { static: true })
    ], ListItemRadioComponent.prototype, "radio", void 0);
    __decorate([
        Input()
    ], ListItemRadioComponent.prototype, "selected", void 0);
    __decorate([
        Input()
    ], ListItemRadioComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], ListItemRadioComponent.prototype, "disabled", void 0);
    __decorate([
        Output()
    ], ListItemRadioComponent.prototype, "onSelect", void 0);
    __decorate([
        Input()
    ], ListItemRadioComponent.prototype, "value", void 0);
    ListItemRadioComponent = ListItemRadioComponent_1 = __decorate([
        Component({
            selector: 'c8y-list-item-radio, c8y-li-radio',
            template: "<label class=\"c8y-radio\">\n  <input\n    #radio\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"change($event.target.checked); (false)\"\n    [disabled]=\"disabled\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
            host: {
                class: 'c8y-list__item__radio'
            },
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return ListItemRadioComponent_1; })
                }
            ]
        })
    ], ListItemRadioComponent);
    return ListItemRadioComponent;
}());

/**
 * Allows to display a timeline. Should be used with
 * content projection.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li-timeline>
 *     24.April 2020
 *     <c8y-li>
 *       Hello
 *     </c8y-li>
 *   </c8y-li-timeline>
 * </c8y-list-group>
 * ```
 */
var ListItemTimelineComponent = /** @class */ (function () {
    function ListItemTimelineComponent() {
    }
    ListItemTimelineComponent = __decorate([
        Component({
            selector: 'c8y-list-item-timeline, c8y-li-timeline',
            template: "<small class=\"c8y-list--timeline__item__date\">\n  <ng-content></ng-content>\n</small>\n<ng-content select=\"c8y-li, c8y-list-item\"></ng-content>\n",
            host: {
                class: 'c8y-list--timeline__item'
            }
        })
    ], ListItemTimelineComponent);
    return ListItemTimelineComponent;
}());

/**
 * List groups are flexible and powerful components for displaying
 * both simple lists of elements and complex ones with custom content.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li>
 *     Plain <strong>Text</strong>
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-icon [icon]="'rocket'"></c8y-li-icon>
 *     Icon
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-radio></c8y-li-radio>
 *     Radio
 *   </c8y-li>
 *   <c8y-li>
 *     <c8y-li-checkbox></c8y-li-checkbox>
 *     Checkbox
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-footer>
 *       Footer
 *     </c8y-li-footer>
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-action icon="rocket">
 *       Launch
 *     </c8y-li-action>
 *   </c8y-li>
 *   <c8y-li>
 *     Content
 *     <c8y-li-collapse>
 *       Collapsed content
 *     </c8y-li-collapse>
 *   </c8y-li>
 * </c8y-list-group>
 * ```
 */
var ListGroupComponent = /** @class */ (function () {
    function ListGroupComponent() {
        /**
         * @ignore
         */
        this.timeline = false;
    }
    /**
     * @ignore
     */
    ListGroupComponent.prototype.ngAfterContentChecked = function () {
        this.timeline = !!this.timelineComponent;
    };
    __decorate([
        HostBinding('class.c8y-list--timeline')
    ], ListGroupComponent.prototype, "timeline", void 0);
    __decorate([
        ContentChild(ListItemTimelineComponent, { static: false })
    ], ListGroupComponent.prototype, "timelineComponent", void 0);
    ListGroupComponent = __decorate([
        Component({
            selector: 'c8y-list-group',
            template: "<ng-content></ng-content>\n\n",
            host: {
                class: 'c8y-list__group'
            }
        })
    ], ListGroupComponent);
    return ListGroupComponent;
}());

/**
 * An icon to display on a list item. Use it with content projection.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-icon="rocket"></c8y-li-icon>
 * </c8y-li>
 * ```
 */
var ListItemIconComponent = /** @class */ (function () {
    function ListItemIconComponent() {
    }
    __decorate([
        Input()
    ], ListItemIconComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], ListItemIconComponent.prototype, "status", void 0);
    ListItemIconComponent = __decorate([
        Component({
            selector: 'c8y-list-item-icon, c8y-li-icon',
            template: "<i [c8yIcon]=\"icon\" [ngClass]=\"status\" *ngIf=\"icon\"></i>\n<ng-content></ng-content>",
            host: {
                class: 'c8y-list__item__icon'
            }
        })
    ], ListItemIconComponent);
    return ListItemIconComponent;
}());

/**
 * A component to display checkboxes in a c8y-li. Use it with content projection. It
 * can be used standalone or with an ngModel.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-checkbox></c8y-li-checkbox>
 * </c8y-li>
 * ```
 */
var ListItemCheckboxComponent = /** @class */ (function (_super) {
    __extends(ListItemCheckboxComponent, _super);
    function ListItemCheckboxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indicates if the checkbox is selected.
         */
        _this.selected = false;
        /**
         * Indicates if the checkbox is disabled.
         */
        _this.disabled = false;
        /**
         * An event emitted as soon as the checkbox is selected.
         */
        _this.onSelect = new EventEmitter();
        return _this;
    }
    ListItemCheckboxComponent_1 = ListItemCheckboxComponent;
    /**
     * @ignore
     */
    ListItemCheckboxComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selected && !changes.selected.firstChange) {
            this.onSelect.emit(changes.selected.currentValue);
        }
    };
    /**
     * Selects the checkbox.
     * @param value The value to pass.
     */
    ListItemCheckboxComponent.prototype.select = function (value) {
        this.onSelect.emit(value);
        this.onChange(value);
    };
    var ListItemCheckboxComponent_1;
    __decorate([
        Input()
    ], ListItemCheckboxComponent.prototype, "selected", void 0);
    __decorate([
        Input()
    ], ListItemCheckboxComponent.prototype, "disabled", void 0);
    __decorate([
        Output()
    ], ListItemCheckboxComponent.prototype, "onSelect", void 0);
    ListItemCheckboxComponent = ListItemCheckboxComponent_1 = __decorate([
        Component({
            selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
            template: "<label class=\"c8y-checkbox\">\n  <input\n    type=\"checkbox\"\n    class=\"form-control\"\n    [disabled]=\"disabled\"\n    [checked]=\"selected\"\n    (change)=\"select($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
            host: {
                class: 'c8y-list__item__check'
            },
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return ListItemCheckboxComponent_1; })
                }
            ]
        })
    ], ListItemCheckboxComponent);
    return ListItemCheckboxComponent;
}(CheckboxControlValueAccessor));

/**
 * The list-group module allows you to compose different styles
 * of lists used in Cumulocity IoT. They can consist of plain
 * text, actions, icons and more.
 *
 * @example
 * ```html
 * <c8y-list-group>
 *   <c8y-li>Item 1<c8y-li>
 *   <c8y-li>Item 2<c8y-li>
 * </c8y-list-group>
 * ```
 */
var ListGroupModule = /** @class */ (function () {
    function ListGroupModule() {
    }
    ListGroupModule = __decorate([
        NgModule({
            imports: [CommonModule, CollapseModule.forRoot(), BsDropdownModule],
            declarations: [
                ListGroupComponent,
                ListItemComponent,
                ListItemIconComponent,
                ListItemBodyComponent,
                ListItemFooterComponent,
                ListItemActionComponent,
                ListItemCollapseComponent,
                ListItemCheckboxComponent,
                ListItemRadioComponent,
                ListItemTimelineComponent
            ],
            exports: [
                ListGroupComponent,
                ListItemComponent,
                ListItemIconComponent,
                ListItemBodyComponent,
                ListItemFooterComponent,
                ListItemActionComponent,
                ListItemCollapseComponent,
                ListItemCheckboxComponent,
                ListItemRadioComponent,
                ListItemTimelineComponent
            ]
        })
    ], ListGroupModule);
    return ListGroupModule;
}());

var AuditLogComponent = /** @class */ (function () {
    function AuditLogComponent(audit) {
        this.audit = audit;
    }
    AuditLogComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.source) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.audit.list({
                                withTotalPages: true,
                                source: this.source
                            })];
                    case 1:
                        _a.records = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AuditLogComponent.ctorParameters = function () { return [
        { type: AuditService }
    ]; };
    __decorate([
        Input()
    ], AuditLogComponent.prototype, "source", void 0);
    AuditLogComponent = __decorate([
        Component({
            selector: 'c8y-audit-log',
            template: "<div class=\"inner-scroll\">\n  <ul class=\"timeline-list list-condensed m-t-16\">\n    <li class=\"timeline-list-item flex-row\" *c8yFor=\"let record of records\">\n      <small class=\"timeline-item-date text-right\">\n        <span>{{ record.time | c8yDate }}</span>\n      </small>\n      <div class=\"timeline-item-content flex-row\">\n        <div class=\"list-item-body\">\n          <div class=\"row text-break-word\">\n            <div class=\"col-md-5\">\n              <span class=\"text-truncate\">{{ record.activity | translate }}</span>\n              <small class=\"text-muted\">{{ record.user }}</small>\n            </div>\n            <div class=\"col-md-7\">\n              <div class=\"small text-truncate-wrap\">{{ record.text | translate }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n"
        })
    ], AuditLogComponent);
    return AuditLogComponent;
}());

/** The angular module definition for audit log. */
var AuditLogModule = /** @class */ (function () {
    function AuditLogModule() {
    }
    AuditLogModule = __decorate([
        NgModule({
            declarations: [AuditLogComponent],
            imports: [CommonModule],
            exports: [AuditLogComponent]
        })
    ], AuditLogModule);
    return AuditLogModule;
}());

/* tslint:disable:max-classes-per-file */
var CellRendererContext = /** @class */ (function () {
    function CellRendererContext() {
    }
    return CellRendererContext;
}());
var CellRendererDefDirective = /** @class */ (function () {
    function CellRendererDefDirective(template) {
        this.template = template;
    }
    CellRendererDefDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    CellRendererDefDirective = __decorate([
        Directive({ selector: '[c8yCellRendererDef]' })
    ], CellRendererDefDirective);
    return CellRendererDefDirective;
}());
var HeaderCellRendererDefDirective = /** @class */ (function () {
    function HeaderCellRendererDefDirective(template) {
        this.template = template;
    }
    HeaderCellRendererDefDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    HeaderCellRendererDefDirective = __decorate([
        Directive({ selector: '[c8yHeaderCellRendererDef]' })
    ], HeaderCellRendererDefDirective);
    return HeaderCellRendererDefDirective;
}());

/* tslint:disable:max-classes-per-file */
var FilteringFormRendererContext = /** @class */ (function () {
    function FilteringFormRendererContext() {
    }
    return FilteringFormRendererContext;
}());
var FilteringFormRendererDefDirective = /** @class */ (function () {
    function FilteringFormRendererDefDirective(template) {
        this.template = template;
    }
    FilteringFormRendererDefDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FilteringFormRendererDefDirective = __decorate([
        Directive({ selector: '[c8yFilteringFormRendererDef]' })
    ], FilteringFormRendererDefDirective);
    return FilteringFormRendererDefDirective;
}());

var ColumnDirective = /** @class */ (function () {
    function ColumnDirective() {
    }
    __decorate([
        Input()
    ], ColumnDirective.prototype, "name", void 0);
    __decorate([
        ContentChild(CellRendererDefDirective, { static: false })
    ], ColumnDirective.prototype, "cellRendererDef", void 0);
    __decorate([
        ContentChild(HeaderCellRendererDefDirective, { static: false })
    ], ColumnDirective.prototype, "headerCellRendererDef", void 0);
    __decorate([
        ContentChild(FilteringFormRendererDefDirective, { static: false })
    ], ColumnDirective.prototype, "filteringFormRendererDef", void 0);
    ColumnDirective = __decorate([
        Directive({ selector: 'c8y-column' })
    ], ColumnDirective);
    return ColumnDirective;
}());

var minColumnGridTrackSize = 80;
var ratiosByColumnTypes = {
    icon: 1,
    numeric: 1,
    'text-short': 1.67,
    'text-long': 3.33
};
var FilteringActionType;
(function (FilteringActionType) {
    FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
    FilteringActionType["ResetFilter"] = "RESET_FILTER";
})(FilteringActionType || (FilteringActionType = {}));

var GridDataSource = /** @class */ (function () {
    function GridDataSource() {
        this.loadingSubject = new BehaviorSubject(false);
        this.dataSourceSubject = new BehaviorSubject([]);
        this.dataStatsSubject = new BehaviorSubject({
            size: 0,
            filteredSize: 0,
            currentPage: 0,
            currentPageSize: 0,
            firstPageSize: 0
        });
        this.dataSelectionSubject = new BehaviorSubject({
            filteredDataIds: []
        });
        this.resultListSubject = new Subject();
        this.loading$ = this.loadingSubject.asObservable();
        this.data$ = this.dataSourceSubject.asObservable();
        this.stats$ = this.dataStatsSubject.asObservable();
        this.selection$ = this.dataSelectionSubject.asObservable();
        this.resultList$ = this.resultListSubject.asObservable();
    }
    GridDataSource.prototype.connect = function (collectionViewer) {
        return this.data$;
    };
    GridDataSource.prototype.disconnect = function (collectionViewer) {
        this.loadingSubject.complete();
        this.dataSourceSubject.complete();
        this.dataStatsSubject.complete();
        this.dataSelectionSubject.complete();
    };
    GridDataSource.prototype.loadData = function (_a) {
        var _this = this;
        var rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey, infiniteScroll = _a.infiniteScroll, _b = _a.reload, reload = _b === void 0 ? false : _b;
        var clientSideData$ = this.toObservable(rows).pipe(map(function (initialData) {
            var filteredSize = 0;
            var filteredDataIds = [];
            var transformedData = flow(function (data) { return _this.doClientSideSearch({ data: data, columns: columns, searchText: searchText }); }, function (data) { return _this.doClientSideFiltering({ data: data, columns: columns }); }, function (data) { return _this.doClientSideSorting({ data: data, columns: columns }); }, function (data) {
                filteredSize = data.length;
                filteredDataIds = selectable
                    ? data.map(function (item) { return item[selectionPrimaryKey]; })
                    : filteredDataIds;
                return data;
            }, function (data) { return _this.doClientSidePagination({ data: data, pagination: pagination }); })(initialData);
            _this.dataStatsSubject.next({
                size: initialData.length,
                filteredSize: filteredSize,
                currentPage: pagination.currentPage,
                currentPageSize: transformedData.length,
                firstPageSize: pagination.pageSize
            });
            _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds });
            return transformedData;
        }));
        var serverSideData$ = defer(function () {
            return _this.toObservable(serverSideDataCallback({
                columns: columns,
                searchText: searchText,
                pagination: pagination,
                selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
            }));
        }).pipe(map(function (result) {
            var data = result.data, paging = result.paging, size = result.size, filteredSize = result.filteredSize, filteredDataIds = result.filteredDataIds;
            _this.dataStatsSubject.next({
                size: size,
                filteredSize: filteredSize,
                currentPage: paging.currentPage,
                currentPageSize: data.length,
                nextPage: paging.nextPage,
                firstPageSize: paging.pageSize
            });
            _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
            _this.resultListSubject.next(result);
            return data;
        }));
        var data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
        of([])
            .pipe(tap(function () { return _this.loadingSubject.next(true); }), switchMap(function () { return data$; }), catchError(function (err) {
            _this.dataStatsSubject.next({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            _this.dataSelectionSubject.next({ filteredDataIds: [] });
            return of([]);
        }), finalize(function () { return _this.loadingSubject.next(false); }))
            .subscribe(function (result) {
            var data = infiniteScroll && !reload ? __spread(_this.dataSourceSubject.value, result) : result;
            _this.dataSourceSubject.next(data);
        });
    };
    GridDataSource.prototype.resolveValue = function (x, path) {
        return get(x, path);
    };
    GridDataSource.prototype.resolveFunction = function (x) {
        return typeof x === 'function' ? x() : x;
    };
    GridDataSource.prototype.normalizeNil = function (x) {
        return isNil(x) ? '' : x;
    };
    GridDataSource.prototype.doClientSideFiltering = function (_a) {
        var _this = this;
        var data = _a.data, columns = _a.columns;
        return columns.reduce(function (result, column) {
            var filterPredicate = column.filterPredicate;
            if (typeof filterPredicate === 'string') {
                return _this.doClientSideSearch({
                    data: result,
                    columns: [column],
                    searchText: filterPredicate
                });
            }
            if (typeof filterPredicate === 'function') {
                return result.filter(function (item) { return filterPredicate(item, column.path); });
            }
            return result;
        }, data);
    };
    GridDataSource.prototype.doClientSideSearch = function (_a) {
        var _this = this;
        var data = _a.data, columns = _a.columns, searchText = _a.searchText;
        var propPaths = columns.map(function (_a) {
            var path = _a.path;
            return path;
        }).filter(function (column) { return !isNil(column); });
        var regexSearch = this.createRegexSearch(searchText);
        return data.filter(function (item) {
            var itemWithResolvedValues = flow(function (x) { return pick(x, propPaths); }, function (x) { return mapValues(x, _this.resolveFunction); }, function (x) { return omitBy(x, isNil); })(item);
            var cellValues = Object.values(itemWithResolvedValues);
            return cellValues.some(function (cellValue) { return regexSearch.test(cellValue.toString()); });
        });
    };
    GridDataSource.prototype.doClientSideSorting = function (_a) {
        var data = _a.data, columns = _a.columns;
        var actives = columns.filter(function (_a) {
            var sortOrder = _a.sortOrder;
            return !!sortOrder;
        });
        var sortingState = {
            paths: actives.map(function (_a) {
                var path = _a.path;
                return path;
            }),
            orders: actives.map(function (_a) {
                var sortOrder = _a.sortOrder;
                return sortOrder;
            })
        };
        return orderBy(data, sortingState.paths, sortingState.orders);
    };
    GridDataSource.prototype.doClientSidePagination = function (_a) {
        var data = _a.data, pagination = _a.pagination;
        return pagination
            ? get(chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
            : data;
    };
    GridDataSource.prototype.createRegexSearch = function (filterValue) {
        return RegExp(escapeRegExpPattern(filterValue), 'i');
    };
    GridDataSource.prototype.toObservable = function (x) {
        return isObservable(x) ? x : x instanceof Promise ? from(x) : of(x);
    };
    return GridDataSource;
}());
/**
 *
 * @param string pattern Regex pattern.
 * @return string The escaped regex.
 * @see https://stackoverflow.com/a/3561711/2013891
 */
function escapeRegExpPattern(pattern) {
    if (pattern === void 0) { pattern = ''; }
    return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

var DataGridComponent = /** @class */ (function () {
    function DataGridComponent(sanitizer, hostRef, cd, cfr) {
        this.sanitizer = sanitizer;
        this.hostRef = hostRef;
        this.cd = cd;
        this.cfr = cfr;
        this.title = gettext('Items');
        this.loadMoreItemsLabel = gettext('Load more items');
        this.loadingItemsLabel = gettext('Loading items…');
        this.noMatchingItemsLabel = gettext('No matching items.');
        this.dataSource = new GridDataSource();
        this.filteringLabelsParams = {
            filteredItemsCount: 0,
            allItemsCount: 0
        };
        this.paginationLabelParams = {
            pageFirstItemIdx: 0,
            pageLastItemIdx: 0,
            itemsTotal: 0
        };
        this.possiblePageSizes = [10, 15, 20, 30, 50];
        this.minPossiblePageSize = Math.min.apply(Math, __spread(this.possiblePageSizes));
        this.selectable = false;
        this.selectionPrimaryKey = 'id';
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true
        };
        this.rowMouseOver = new EventEmitter();
        this.rowMouseLeave = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.onConfigChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.columnNames = [];
        this.styles = {
            tableCursor: 'auto',
            gridTemplateColumns: undefined,
            gridInfiniteScrollColumn: undefined
        };
        this.searchText$ = new EventEmitter();
        this.searchText = '';
        this.filteringApplied = false;
        this.totalPagesCount = Infinity;
        this.selectedItemIds = [];
        this.currentPageSelectionState = {
            allSelected: false,
            allDeselected: true
        };
        this.builtInActionType = {
            Edit: "EDIT" /* Edit */,
            Delete: "DELETE" /* Delete */,
            Export: "EXPORT" /* Export */
        };
        this.resizeHandleMouseDown$ = new EventEmitter();
        this.resizeHandleContainerMouseMove$ = new EventEmitter();
        this.resizeHandleContainerMouseUp$ = new EventEmitter();
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(DataGridComponent.prototype, "_columns", {
        set: function (columns) {
            this.columns = columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_rows", {
        set: function (rows) {
            this.rows = rows || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_pagination", {
        set: function (pagination) {
            this.pagination = pagination;
            var pageSize = get(this.pagination, 'pageSize');
            if (pageSize &&
                !this.possiblePageSizes.find(function (possiblePageSize) { return possiblePageSize === pageSize; })) {
                this.pagination = __assign({}, this.pagination, { pageSize: 10 });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_infiniteScroll", {
        set: function (infiniteScroll) {
            this.infiniteScroll = infiniteScroll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_serverSideDataCallback", {
        set: function (serverSideDataCallback) {
            this.serverSideDataCallback = serverSideDataCallback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectable", {
        set: function (selectable) {
            this.selectable = selectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectionPrimaryKey", {
        set: function (selectionPrimaryKey) {
            this.selectionPrimaryKey = selectionPrimaryKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_displayOptions", {
        set: function (displayOptions) {
            this.displayOptions = __assign({}, this.displayOptions, displayOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_actionControls", {
        set: function (actionControls) {
            this.actionControls = actionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_bulkActionControls", {
        set: function (bulkActionControls) {
            this.bulkActionControls = bulkActionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    DataGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.searchText$
            .pipe(takeUntil(this.unsubscribe$), debounceTime(300), distinctUntilChanged(), tap(function (searchText) {
            _this.searchText = searchText;
        }))
            .subscribe(function () {
            _this.reload();
        });
        if (this.selectable) {
            combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (_a) {
                var _b = __read(_a, 1), data = _b[0];
                var currentPageEmpty = data.length === 0;
                _this.currentPageSelectionState = {
                    allSelected: currentPageEmpty ? false : data.every(function (item) { return _this.isItemSelected(item); }),
                    allDeselected: currentPageEmpty ? true : data.every(function (item) { return !_this.isItemSelected(item); })
                };
            });
        }
        this.dataSource.stats$.pipe(takeUntil(this.unsubscribe$)).subscribe(function (stats) {
            _this.createLoadMoreComponent(stats);
            _this.updateFilteringLabelsParams(stats);
            _this.updatePaginationLabelParams(stats);
        });
        if (this.refresh) {
            this.refresh.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {
                _this.cancel();
                _this.reload();
            });
        }
    };
    DataGridComponent.prototype.ngOnChanges = function () {
        this.updateColumns();
        this.loadData();
    };
    DataGridComponent.prototype.ngAfterViewInit = function () {
        this.updateGridColumnsSize();
        this.thEls = this.thRefs.toArray().map(function (_a) {
            var nativeElement = _a.nativeElement;
            return nativeElement;
        });
        this.setupResizeHandle();
    };
    DataGridComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    DataGridComponent.prototype.trackByName = function (index, item) {
        return item.name;
    };
    DataGridComponent.prototype.resolveCellValue = function (row, path) {
        var _this = this;
        return flow([
            function (x) { return _this.dataSource.resolveValue(x, path); },
            this.dataSource.resolveFunction,
            this.dataSource.normalizeNil
        ])(row);
    };
    DataGridComponent.prototype.changeSortOrder = function (columnName) {
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        if (column) {
            var sortOrder = column.sortOrder;
            if (!sortOrder) {
                this.updateSorting([columnName], 'asc');
            }
            else if (sortOrder === 'asc') {
                this.updateSorting([columnName], 'desc');
            }
            else {
                this.updateSorting([columnName], '');
            }
        }
    };
    DataGridComponent.prototype.updateSorting = function (columnNames, sortOrder) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return __assign({}, column, { sortOrder: sortOrder });
            }
            return column;
        });
        this.emitConfigChange();
        this.reload();
    };
    DataGridComponent.prototype.applyFilter = function (columnName, dropdown, filteringModifier) {
        this.updateFiltering([columnName], {
            type: FilteringActionType.ApplyFilter,
            payload: { filteringModifier: filteringModifier }
        });
        dropdown.hide();
    };
    DataGridComponent.prototype.resetFilter = function (columnName, dropdown) {
        this.updateFiltering([columnName], { type: FilteringActionType.ResetFilter });
        dropdown.hide();
    };
    DataGridComponent.prototype.clearFilters = function () {
        this.updateFiltering(this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        }), {
            type: FilteringActionType.ResetFilter
        });
    };
    DataGridComponent.prototype.updateFiltering = function (columnNames, action) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return __assign({}, column, (action.type === FilteringActionType.ApplyFilter
                    ? action.payload.filteringModifier
                    : { filterPredicate: undefined, externalFilterQuery: undefined }));
            }
            return column;
        });
        this.updateFilteringApplied();
        this.reload();
    };
    DataGridComponent.prototype.updateFilteringApplied = function () {
        this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
    };
    DataGridComponent.prototype.isColumnFilteringApplied = function (column) {
        var filterable = column.filterable, filterPredicate = column.filterPredicate, externalFilterQuery = column.externalFilterQuery;
        return !!(filterable && (filterPredicate || externalFilterQuery));
    };
    DataGridComponent.prototype.updatePagination = function (_a) {
        var itemsPerPage = _a.itemsPerPage, page = _a.page;
        this.pagination = __assign({}, this.pagination, { pageSize: itemsPerPage, currentPage: page });
        this.loadData();
        this.emitConfigChange();
    };
    DataGridComponent.prototype.reload = function () {
        this.pagination = __assign({}, this.pagination, { currentPage: 1 });
        this.recreateLoadMoreComponent = true;
        this.loadData(true);
        this.scrollToTop();
    };
    DataGridComponent.prototype.loadNextPage = function () {
        var _this = this;
        this.pagination = __assign({}, this.pagination, { currentPage: this.pagination.nextPage });
        this.loadData();
        return this.dataSource.resultList$
            .pipe(take(1)) // in order for `toPromise` to work, the observable needs to complete
            .toPromise()
            .then(function (result) {
            return __assign({}, result, { paging: __assign({}, result.paging, { next: _this.loadNextPage.bind(_this) }) });
        });
    };
    DataGridComponent.prototype.getCellRendererSpec = function (_a) {
        var value = _a.value, row = _a.row, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'CELL', value: value, row: row, columnName: columnName });
    };
    DataGridComponent.prototype.getHeaderCellRendererSpec = function (_a) {
        var value = _a.value, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'HEADER', value: value, row: undefined, columnName: columnName });
    };
    DataGridComponent.prototype.getFilteringFormRendererSpec = function (_a) {
        var column = _a.column, dropdown = _a.dropdown;
        return {
            renderer: get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                column.filteringFormRendererComponent,
            context: {
                property: column,
                applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                resetFilter: this.resetFilter.bind(this, column.name, dropdown)
            }
        };
    };
    DataGridComponent.prototype.setAllItemsSelected = function (selected) {
        var _this = this;
        this.dataSource.selection$
            .pipe(first())
            .subscribe(function (_a) {
            var filteredDataIds = _a.filteredDataIds;
            return _this.setItemsSelected(filteredDataIds, selected);
        });
    };
    DataGridComponent.prototype.setAllItemsInCurrentPageSelected = function (selected) {
        var _this = this;
        this.dataSource.data$.pipe(first()).subscribe(function (data) { return _this.setItemsSelected(data, selected); });
    };
    DataGridComponent.prototype.setItemsSelected = function (items, selected) {
        var _this = this;
        var itemIds = items.map(function (item) {
            return typeof item === 'object' ? item[_this.selectionPrimaryKey] : item;
        });
        this.selectedItemIds = selected
            ? union(this.selectedItemIds, itemIds)
            : without.apply(void 0, __spread([this.selectedItemIds], itemIds));
        this.itemsSelect.emit(this.selectedItemIds);
    };
    DataGridComponent.prototype.cancel = function () {
        this.selectedItemIds = [];
        this.itemsSelect.emit(this.selectedItemIds);
    };
    DataGridComponent.prototype.isItemSelected = function (item) {
        return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
    };
    DataGridComponent.prototype.onColumnDrop = function (_a) {
        var previousIndex = _a.previousIndex, currentIndex = _a.currentIndex;
        var differentIndex = previousIndex !== currentIndex;
        if (differentIndex) {
            var column = this.columns.splice(previousIndex, 1);
            this.columns.splice(currentIndex, 0, column[0]);
        }
        this.updateColumnNames();
        this.updateGridColumnsSize();
    };
    DataGridComponent.prototype.updateGridColumnsSize = function () {
        this.styles = __assign({}, this.styles, { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                .filter(function (column) { return column.visible; })
                .map(function (_a) {
                var gridTrackSize = _a.gridTrackSize;
                return gridTrackSize;
            })
                .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle("1 / span " + this.columns.filter(function (column) { return column.visible; }).length) });
        this.emitConfigChange();
    };
    DataGridComponent.prototype.emitConfigChange = function () {
        var columns = this.columns.map(function (_a) {
            var visible = _a.visible, sortOrder = _a.sortOrder;
            return ({ visible: visible, sortOrder: sortOrder });
        });
        this.onConfigChange.emit({ columns: columns, pagination: this.pagination });
    };
    DataGridComponent.prototype.updateColumns = function () {
        var specialColumn = {
            gridTrackSize: '42px',
            sortable: false,
            positionFixed: true
        };
        this.columns = __spread([
            this.selectable ? __assign({}, specialColumn, { name: "checkbox" /* Checkbox */ }) : undefined
        ], this.columns, [
            this.actionControls.length > 0
                ? __assign({}, specialColumn, { name: "actions" /* Actions */ }) : undefined
        ]).filter(Boolean)
            .map(this.withColumnDefaults);
        this.updateColumnNames();
        this.updateGridColumnsSize();
        this.updateFilteringApplied();
    };
    DataGridComponent.prototype.withColumnDefaults = function (column) {
        var dataType = column.dataType || "text-short" /* TextShort */;
        var headerCSSClassName = column.headerCSSClassName, cellCSSClassName = column.cellCSSClassName;
        return __assign({ visible: true, positionFixed: false, sortable: true, sortOrder: '', filterable: false }, column, { dataType: dataType, gridTrackSize: column.gridTrackSize ||
                "minmax(" + minColumnGridTrackSize + "px, " + ratiosByColumnTypes[dataType] + "fr)", headerCSSClassName: (typeof headerCSSClassName === 'string'
                ? headerCSSClassName.split(' ')
                : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                [] });
    };
    DataGridComponent.prototype.updateColumnNames = function () {
        this.columnNames = this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        });
    };
    DataGridComponent.prototype.setupResizeHandle = function () {
        var _this = this;
        var resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(takeUntil(this.unsubscribe$), tap(function () { return _this.clearMouseHighlights(); }), mergeMap(function (_a) {
            var event = _a.event, targetColumnName = _a.targetColumnName;
            _this.columns = _this.columns.map(function (column) {
                if (column.name === targetColumnName) {
                    return __assign({}, column, { headerCSSClassName: union(column.headerCSSClassName, ['header--being-resized']) });
                }
                return column;
            });
            _this.headerBeingResized = {
                columnName: targetColumnName,
                el: event.target.parentNode
            };
            _this.styles = __assign({}, _this.styles, { tableCursor: 'col-resize' });
            return _this.resizeHandleContainerMouseMove$.pipe(tap(function () { return _this.clearMouseHighlights(); }), takeUntil(_this.resizeHandleContainerMouseUp$));
        }));
        resizeHandleDrag$.subscribe(function (event) {
            requestAnimationFrame(function () {
                _this.columns = _this.columns.map(function (column, i) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        var wrapper = _this.hostRef.nativeElement;
                        // Read wrapper's offset left relative to the document.
                        var horizontalOffset = wrapper.getBoundingClientRect().left;
                        // Adjust with the wrapper horizontal scroll position.
                        var horizontalScrollOffset = wrapper.scrollLeft - horizontalOffset;
                        // Calculate the desired width.
                        var width = horizontalScrollOffset + event.clientX - (_this.headerBeingResized.el.offsetLeft || 0);
                        return __assign({}, column, { 
                            // Update the column object with the new size value, enforce our minimum size.
                            gridTrackSize: Math.max(minColumnGridTrackSize, width) + "px" });
                    }
                    // For the other headers which don't have a set width, fix it to their computed width.
                    if (column.gridTrackSize.startsWith('minmax')) {
                        return __assign({}, column, { 
                            // isn't fixed yet (it would be a px value)
                            gridTrackSize: parseInt$1(_this.thEls[i].clientWidth) + "px" });
                    }
                    return column;
                });
                /*
                 * Update the column sizes.
                 * Note: grid-template-columns sets the width for all columns in one value.
                 */
                _this.updateGridColumnsSize();
            });
        });
        this.resizeHandleContainerMouseUp$.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {
            if (_this.headerBeingResized) {
                _this.columns = _this.columns.map(function (column) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        return __assign({}, column, { headerCSSClassName: without(column.headerCSSClassName, 'header--being-resized') });
                    }
                    return column;
                });
                _this.headerBeingResized = undefined;
                _this.styles = __assign({}, _this.styles, { tableCursor: 'auto' });
            }
        });
    };
    DataGridComponent.prototype.clearMouseHighlights = function () {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    };
    DataGridComponent.prototype._getCellRendererSpec = function (_a) {
        var type = _a.type, value = _a.value, row = _a.row, columnName = _a.columnName;
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        var columnRenderer = this.getColumnRenderer(column);
        var rendererTemplate = get(columnRenderer, (type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef') + ".template");
        var cellRendererComponent = column.cellRendererComponent, headerCellRendererComponent = column.headerCellRendererComponent;
        var rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
        return {
            renderer: rendererTemplate || rendererComponent,
            context: {
                value: value,
                item: row,
                property: column
            }
        };
    };
    DataGridComponent.prototype.getColumnRenderer = function (column) {
        return this.columnRenderers.toArray().find(function (_a) {
            var name = _a.name;
            return name === column.name;
        });
    };
    DataGridComponent.prototype.loadData = function (reload) {
        if (reload === void 0) { reload = false; }
        var _a = this, rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey, infiniteScroll = _a.infiniteScroll;
        this.dataSource.loadData({
            rows: rows,
            columns: columns,
            pagination: pagination,
            searchText: searchText,
            serverSideDataCallback: serverSideDataCallback,
            selectable: selectable,
            selectionPrimaryKey: selectionPrimaryKey,
            infiniteScroll: infiniteScroll,
            reload: reload
        });
    };
    DataGridComponent.prototype.updateFilteringLabelsParams = function (stats) {
        this.filteringLabelsParams = {
            filteredItemsCount: stats.filteredSize,
            allItemsCount: stats.size
        };
    };
    DataGridComponent.prototype.updatePaginationLabelParams = function (stats) {
        this.pagination.nextPage = stats.nextPage;
        var pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
        this.paginationLabelParams = {
            pageFirstItemIdx: pageFirstItemIdx,
            pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
            itemsTotal: stats.filteredSize
        };
    };
    DataGridComponent.prototype.createLoadMoreComponent = function (stats) {
        if (this.infiniteScroll &&
            stats &&
            stats.nextPage &&
            (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
            this.recreateLoadMoreComponent = false;
            this.infiniteScrollContainer.clear();
            var componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
            var componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
            instance.hidden = this.infiniteScroll === 'hidden';
            instance.paging = {
                nextPage: stats.nextPage,
                next: this.loadNextPage.bind(this)
            };
            instance.loadNextLabel = this.loadMoreItemsLabel;
            instance.loadingLabel = this.loadingItemsLabel;
            this.loadMoreComponent = instance;
        }
        else if (this.loadMoreComponent && !stats.nextPage) {
            this.loadMoreComponent.paging = {
                nextPage: null
            };
        }
    };
    DataGridComponent.prototype.scrollToTop = function () {
        if (this.infiniteScroll) {
            this.scrollContainer.nativeElement.scrollTop = 0;
        }
    };
    DataGridComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], DataGridComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], DataGridComponent.prototype, "loadMoreItemsLabel", void 0);
    __decorate([
        Input()
    ], DataGridComponent.prototype, "loadingItemsLabel", void 0);
    __decorate([
        Input()
    ], DataGridComponent.prototype, "noMatchingItemsLabel", void 0);
    __decorate([
        Input()
    ], DataGridComponent.prototype, "refresh", void 0);
    __decorate([
        Input('columns')
    ], DataGridComponent.prototype, "_columns", null);
    __decorate([
        Input('rows')
    ], DataGridComponent.prototype, "_rows", null);
    __decorate([
        Input('pagination')
    ], DataGridComponent.prototype, "_pagination", null);
    __decorate([
        Input('infiniteScroll')
    ], DataGridComponent.prototype, "_infiniteScroll", null);
    __decorate([
        Input('serverSideDataCallback')
    ], DataGridComponent.prototype, "_serverSideDataCallback", null);
    __decorate([
        Input('selectable')
    ], DataGridComponent.prototype, "_selectable", null);
    __decorate([
        Input('selectionPrimaryKey')
    ], DataGridComponent.prototype, "_selectionPrimaryKey", null);
    __decorate([
        Input('displayOptions')
    ], DataGridComponent.prototype, "_displayOptions", null);
    __decorate([
        Input('actionControls')
    ], DataGridComponent.prototype, "_actionControls", null);
    __decorate([
        Input('bulkActionControls')
    ], DataGridComponent.prototype, "_bulkActionControls", null);
    __decorate([
        Input()
    ], DataGridComponent.prototype, "itemsSelectLimit", void 0);
    __decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseOver", void 0);
    __decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseLeave", void 0);
    __decorate([
        Output()
    ], DataGridComponent.prototype, "rowClick", void 0);
    __decorate([
        Output()
    ], DataGridComponent.prototype, "onConfigChange", void 0);
    __decorate([
        Output()
    ], DataGridComponent.prototype, "itemsSelect", void 0);
    __decorate([
        ContentChildren(ColumnDirective)
    ], DataGridComponent.prototype, "columnRenderers", void 0);
    __decorate([
        ViewChild('scroll', { static: true })
    ], DataGridComponent.prototype, "scrollContainer", void 0);
    __decorate([
        ViewChild('infiniteScrollContainer', { static: false, read: ViewContainerRef })
    ], DataGridComponent.prototype, "infiniteScrollContainer", void 0);
    __decorate([
        ViewChildren(CdkHeaderCell, { read: ElementRef })
    ], DataGridComponent.prototype, "thRefs", void 0);
    DataGridComponent = __decorate([
        Component({
            selector: 'c8y-data-grid',
            template: "<div class=\"table-data-grid-scroll\" #scroll>\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator\">\n    <h4 class=\"m-r-16\">{{ title | translate }}</h4>\n    <span *ngIf=\"!filteringApplied\">\n      <span class=\"label label-warning m-r-4\" translate>No filters</span>\n      <small\n        *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n        class=\"m-r-4\"\n        ngNonBindable\n        translate\n        [translateParams]=\"filteringLabelsParams\"\n        >{{ filteredItemsCount }} of {{ allItemsCount }} items</small\n      >\n    </span>\n    <span *ngIf=\"filteringApplied\">\n      <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n        <span class=\"badge badge-info m-r-4\">\n          {{ (dataSource.stats$ | async).filteredSize }}\n        </span>\n        <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n          >of {{ allItemsCount }} items</small\n        >\n      </ng-container>\n      <button\n        title=\" {{ 'Clear filters' | translate }}\"\n        class=\"m-l-8 btn btn-xs btn-default m-r-4\"\n        (click)=\"clearFilters()\"\n      >\n        {{ 'Clear filters' | translate }}\n      </button>\n    </span>\n    <span class=\"hidden-xs hidden-sm\">\n      <button\n        class=\"btn-clean text-primary\"\n        popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n        placement=\"right\"\n        triggers=\"focus\"\n      >\n        <i c8yIcon=\"question-circle-o\"></i>\n      </button>\n    </span>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <div\n          class=\"dropdown\"\n          dropdown\n          [insideClick]=\"true\"\n          container=\"body\"\n          placement=\"bottom left\"\n        >\n          <button\n            title=\"{{ 'Configure columns' | translate }}\"\n            class=\"btnbar-btn c8y-dropdown\"\n            dropdownToggle\n          >\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i>\n            <span>{{ 'Configure columns' | translate }}</span>\n          </button>\n\n          <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after p-0 \">\n                      <label\n                        title=\"{{ (column.header | translate) || column.name }}\"\n                        class=\"c8y-checkbox p-l-16 p-r-32 p-t-8 p-b-8 flex-item-v-stretch\"\n                      >\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize()\"\n                        />\n                        <span></span>\n                        <span>{{ (column.header | translate) || column.name }}</span>\n                      </label>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          title=\"{{ 'Reload' | translate }}\"\n          class=\"btnbar-btn\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"searchText = ''; reload()\"\n        >\n          <i c8yIcon=\"refresh\"></i>\n          <span>{{ 'Reload' | translate }}</span>\n        </button>\n\n        <div *ngIf=\"!serverSideDataCallback\" class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span\n          *ngIf=\"!itemsSelectLimit; else limit\"\n          ngNonBindable\n          translate\n          [translateParams]=\"{ count: selectedItemIds.length }\"\n        >\n          {{ count }} selected items.\n        </span>\n        <ng-template #limit>\n          <span\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: selectedItemIds.length, limit: itemsSelectLimit }\"\n          >\n            {{ count }} selected items out of {{ limit }} allowed\n          </span>\n        </ng-template>\n\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"selectedItemIds.length >= pagination.pageSize && !itemsSelectLimit\">\n          <a (click)=\"setAllItemsSelected(true)\" style=\"cursor: pointer\">\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <button\n              title=\"{{ 'Export' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Export\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"sign-out\"></i>\n              <span>{{ 'Export' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ 'Delete' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Delete\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"trash\"></i>\n              <span>{{ 'Delete' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ bulkActionControl.text | translate }}\"\n              *ngSwitchDefault\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n              <span>{{ bulkActionControl.text | translate }}</span>\n            </button>\n          </ng-container>\n\n          <button title=\"{{ 'Cancel' | translate }}\" class=\"btnbar-btn\" (click)=\"cancel()\">\n            <i c8yIcon=\"times\"></i>\n            <span>{{ 'Cancel' | translate }}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\" [cdkColumnDef]=\"column.name\">\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div *ngIf=\"!itemsSelectLimit\">\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n                [disabled]=\"selectedItemIds.length >= itemsSelectLimit && !isItemSelected(row)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <button\n                  *ngSwitchCase=\"builtInActionType.Edit\"\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ 'Edit' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"pencil\"></i>\n                </button>\n                <button\n                  *ngSwitchCase=\"builtInActionType.Delete\"\n                  class=\"btn btn-dot showOnHover\"\n                  title=\"{{ 'Delete' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                </button>\n                <button\n                  *ngSwitchDefault\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ actionControl.text | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                </button>\n              </ng-container>\n            </ng-container>\n\n            <div *ngIf=\"actionControls.length > 2\" class=\"dropdown\" dropdown>\n              <button\n                title=\"{{ 'Actions' | translate }}\"\n                class=\"dropdown-toggle c8y-dropdown\"\n                dropdownToggle\n              >\n                <i c8yIcon=\"ellipsis-v\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                  <button\n                    title=\"{{ 'Edit' | translate }}\"\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"pencil\"></i>\n                    {{ 'Edit' | translate }}\n                  </button>\n                  <button\n                    title=\"{{ 'Delete' | translate }}\"\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"trash\"></i>\n                    {{ 'Delete' | translate }}\n                  </button>\n                  <button\n                    title=\"{{ 'Export' | translate }}\"\n                    *ngSwitchCase=\"builtInActionType.Export\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"download\"></i>\n                    {{ 'Export' | translate }}\n                  </button>\n                  <button\n                    title=\"{{ actionControl.text | translate }}\"\n                    *ngSwitchDefault\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                    {{ actionControl.text | translate }}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  (\n                    [{\n                      columnName: column.name, \n                      value: ((column.header | translate) || column.name) \n                    }]\n                      | map:getHeaderCellRendererSpec:this\n                  ) as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              placement=\"bottom left\"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    (\n                      [{\n                        columnName: column.name, \n                        value: ((column.header | translate) || column.name) \n                      }]\n                        | map:getHeaderCellRendererSpec:this\n                    ) as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      (\n                        [{\n                          column: column, \n                          dropdown: dropdown \n                        }]\n                          | map:getFilteringFormRendererSpec:this\n                      ) as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer [spec]=\"filteringFormRendererSpec\">\n                    </c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            >\n            </span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                (\n                  [{ \n                    value: resolveCellValue(row, column.path), \n                    row: row, \n                    columnName: column.name \n                  }]\n                    | map:getCellRendererSpec:this\n                ) as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container *ngIf=\"infiniteScroll\">\n      <tr cdk-footer-row *cdkFooterRowDef=\"['infiniteScrollFooter']\"></tr>\n    </ng-container>\n  </table>\n\n  <div *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\" class=\"text-center\">\n    <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n  </div>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <div class=\"c8y-empty-state\">\n        <h1 c8yIcon=\"search\"></h1>\n        <div>\n          <p>\n            <strong>{{ noMatchingItemsLabel | translate }}</strong>\n          </p>\n          <small>{{ 'Refine your search terms' | translate }}</small>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\"\n          >{{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}</span\n        >\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\">{{ 'Items per page' | translate }}</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        [class.hidden]=\"totalPagesCount <= 1\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount = $event\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n"
        })
    ], DataGridComponent);
    return DataGridComponent;
}());

var CellRendererComponent = /** @class */ (function () {
    function CellRendererComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
    }
    Object.defineProperty(CellRendererComponent.prototype, "_spec", {
        set: function (spec) {
            this.spec = spec;
        },
        enumerable: true,
        configurable: true
    });
    CellRendererComponent.prototype.ngOnChanges = function () {
        if (!this.prevSpec) {
            this.prevSpec = this.spec;
        }
        var renderer = this.spec.renderer;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
    };
    CellRendererComponent.prototype.ngDoCheck = function () {
        if (!this.spec.context.value === this.prevSpec.context.value) {
            this.prevSpec = this.spec;
            this.cd.markForCheck();
        }
    };
    CellRendererComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('spec')
    ], CellRendererComponent.prototype, "_spec", null);
    CellRendererComponent = __decorate([
        Component({
            selector: 'c8y-cell-renderer',
            template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  {{ spec.context.value }}\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CellRendererComponent);
    return CellRendererComponent;
}());

var FilteringFormRendererComponent = /** @class */ (function () {
    function FilteringFormRendererComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.defaultRendererFilterText = '';
    }
    Object.defineProperty(FilteringFormRendererComponent.prototype, "_spec", {
        set: function (spec) {
            this.spec = spec;
        },
        enumerable: true,
        configurable: true
    });
    FilteringFormRendererComponent.prototype.ngOnChanges = function () {
        var _a = this.spec, renderer = _a.renderer, context = _a.context;
        if (renderer instanceof TemplateRef) {
            this.rendererType = 'TEMPLATE';
        }
        else if (renderer instanceof Type) {
            this.rendererType = 'COMPONENT';
            this.rendererInjector = Injector.create({
                providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                parent: this.injector
            });
        }
        var filterPredicate = context.property.filterPredicate;
        if (typeof filterPredicate === 'string') {
            this.defaultRendererFilterText = filterPredicate;
        }
    };
    FilteringFormRendererComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('spec')
    ], FilteringFormRendererComponent.prototype, "_spec", null);
    FilteringFormRendererComponent = __decorate([
        Component({
            selector: 'c8y-filtering-form-renderer',
            template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group\">\n    <label translate>Filter text</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    />\n  </div>\n  <div class=\"flex-row\">\n    <button\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n      translate\n    >\n      Reset\n    </button>\n    <button\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n      translate\n    >\n      Apply\n    </button>\n  </div>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FilteringFormRendererComponent);
    return FilteringFormRendererComponent;
}());

var DataGridModule = /** @class */ (function () {
    function DataGridModule() {
    }
    DataGridModule = __decorate([
        NgModule({
            imports: [
                CommonModule$1,
                CdkTableModule,
                DragDropModule,
                FormsModule$1,
                ReactiveFormsModule,
                CommonModule,
                BsDropdownModule.forRoot(),
                PopoverModule.forRoot(),
                PaginationModule.forRoot()
            ],
            declarations: [
                CellRendererDefDirective,
                HeaderCellRendererDefDirective,
                CellRendererComponent,
                FilteringFormRendererDefDirective,
                FilteringFormRendererComponent,
                ColumnDirective,
                DataGridComponent
            ],
            exports: [
                CellRendererDefDirective,
                HeaderCellRendererDefDirective,
                FilteringFormRendererDefDirective,
                ColumnDirective,
                DataGridComponent
            ],
            entryComponents: [DataGridComponent]
        })
    ], DataGridModule);
    return DataGridModule;
}());

/**
 * A component which shows a context help in
 * the action bar.
 *
 * @example
 * ```html
 * <c8y-help src="/users-guide/cockpit/#dashboards"></c8y-help>
 * ```
 */
var HelpComponent = /** @class */ (function () {
    /**
     * @ignore Only private DI
     */
    function HelpComponent(docsService, appState, translateService) {
        this.docsService = docsService;
        this.appState = appState;
        this.translateService = translateService;
        /**
         * The source of the documentation. Used to link to the documentation as well as
         * to parse the source to display.
         */
        this.src = '';
        /**
         * Indicates if the help dialog is collapsed.
         */
        this.isCollapsed = true;
        /**
         * The priority where the help icon should be shown in the action bar
         */
        this.priority = Infinity;
        /**
         * An title. Set in open by passing the source.
         */
        this.title = '';
        /**
         * The content. Set in open by passing the source.
         */
        this.content = [];
        /**
         * Indicates if the component is loading.
         */
        this.isLoading = true;
        /**
         * Indicates if the component failed loading the source.
         */
        this.hasError = false;
        this.SUPPORTED_LANGUAGES = ['en'];
    }
    Object.defineProperty(HelpComponent.prototype, "isSupportedLanguage", {
        /**
         * Identifies if the current user language is supported
         * Currently only English is supported.
         */
        get: function () {
            return this.SUPPORTED_LANGUAGES.indexOf(this.translateService.currentLang) > -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Builds the URL based on the src. The Base URL can be set in the application options docBaseUrl.
     * @param src The source of the help on the guide.
     */
    HelpComponent.prototype.getUrl = function (src) {
        if (src === void 0) { src = ''; }
        var version = this.parseVersion(this.appState.uiVersion);
        var url = this.docsService.getBaseUrl();
        return "" + url + (url.endsWith('/') ? '' : '/') + version + (src.startsWith('/') ? src : "/" + src);
    };
    /**
     * Toggles the visibility of the help dialog.
     */
    HelpComponent.prototype.toggle = function () {
        if (this.isCollapsed) {
            this.open();
            return;
        }
        this.close();
    };
    /**
     * Closes the help dialog.
     */
    HelpComponent.prototype.close = function () {
        this.isCollapsed = true;
        this.clean();
    };
    /**
     * Opens the help dialog.
     */
    HelpComponent.prototype.open = function () {
        this.isCollapsed = false;
        this.isLoading = true;
        this.requestContent();
        if (!this.icon) {
            this.icon = this.resolveIcon();
        }
    };
    /**
     * @ignore
     */
    HelpComponent.prototype.ngAfterContentChecked = function () {
        var _this = this;
        if (this.content.length > 0 && this.helpContent) {
            this.content.forEach(function (ele) {
                _this.helpContent.nativeElement.append(ele);
            });
        }
    };
    HelpComponent.prototype.requestContent = function () {
        var _this = this;
        var req = new XMLHttpRequest();
        req.onreadystatechange = function () { return _this.render(req); };
        req.addEventListener('load', function () { return _this.render(req); });
        req.open('GET', this.getUrl(this.src));
        req.responseType = 'document';
        req.setRequestHeader('Accept', 'text/html');
        req.send();
    };
    HelpComponent.prototype.clean = function () {
        this.title = '';
        this.isLoading = true;
        this.hasError = false;
        this.content = [];
        if (this.helpContent) {
            this.helpContent.nativeElement.innerHTML = '';
        }
    };
    HelpComponent.prototype.parseVersion = function (uiVersion) {
        var version = uiVersion.split('.')[0];
        var majorNumber = Math.floor(parseInt(version, 10) / 100);
        var minorNumber = parseInt(version, 10) - majorNumber * 100;
        return majorNumber + "." + minorNumber + ".0";
    };
    HelpComponent.prototype.resolveIcon = function () {
        try {
            var icon = Array.from(document.querySelector('nav .active i').classList).find(function (classes) { return classes.startsWith('c8y-') || classes.startsWith('fa-'); });
            return icon.replace('fa-', '');
        }
        catch (ex) {
            return 'question-circle-o';
        }
    };
    HelpComponent.prototype.render = function (req) {
        var e_1, _a;
        if (req.readyState === 4) {
            this.isLoading = false;
            if (req.status === 200) {
                var sectionSplit = this.src.split('#');
                // TODO: change here the selectors when DOC team defined the section element
                var sectionQuery = "#" + sectionSplit[sectionSplit.length - 1] + " h2";
                var sectionNode = req.response.querySelector(sectionQuery);
                var allPossibleElementsToAttach = Array.from(sectionNode.parentElement.children).slice(1);
                this.title = sectionNode.innerText.trim();
                try {
                    for (var allPossibleElementsToAttach_1 = __values(allPossibleElementsToAttach), allPossibleElementsToAttach_1_1 = allPossibleElementsToAttach_1.next(); !allPossibleElementsToAttach_1_1.done; allPossibleElementsToAttach_1_1 = allPossibleElementsToAttach_1.next()) {
                        var ele = allPossibleElementsToAttach_1_1.value;
                        if (ele.tagName.toLowerCase() === 'h3') {
                            break;
                        }
                        this.content.push(ele);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (allPossibleElementsToAttach_1_1 && !allPossibleElementsToAttach_1_1.done && (_a = allPossibleElementsToAttach_1.return)) _a.call(allPossibleElementsToAttach_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                this.hasError = true;
            }
        }
    };
    HelpComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: AppStateService },
        { type: TranslateService$1 }
    ]; };
    __decorate([
        Input()
    ], HelpComponent.prototype, "src", void 0);
    __decorate([
        Input()
    ], HelpComponent.prototype, "isCollapsed", void 0);
    __decorate([
        Input()
    ], HelpComponent.prototype, "priority", void 0);
    __decorate([
        Input()
    ], HelpComponent.prototype, "icon", void 0);
    __decorate([
        ViewChild('helpContent', { static: false, read: ElementRef })
    ], HelpComponent.prototype, "helpContent", void 0);
    HelpComponent = __decorate([
        Component({
            selector: 'c8y-help',
            template: "<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"pull-right\"\n  [priority]=\"priority\"\n  *ngIf=\"isSupportedLanguage\"\n>\n  <button\n    class=\"btn btn-help\"\n    [title]=\"'Open help' | translate\"\n    (click)=\"toggle()\"\n    [attr.aria-expanded]=\"!isCollapsed\"\n    aria-controls=\"collapseHelp\"\n  >\n    <i\n      [c8yIcon]=\"'question-circle-o'\"\n      class=\"text-info text-16\"\n    ></i>\n  </button>\n</c8y-action-bar-item>\n\n<div\n  id=\"collapseHelp\"\n  class=\"c8y-help-drawer\"\n  [collapse]=\"isCollapsed\"\n  [isAnimated]=\"true\"\n>\n  <div\n    class=\"p-24\"\n    #docOutlet\n  >\n    <div\n      *ngIf=\"isLoading\"\n    >\n      <c8y-loading></c8y-loading>\n    </div>\n\n    <div *ngIf=\"!isLoading\">\n      <div class=\"d-flex\">\n        <i\n          [c8yIcon]=\"icon\"\n          class=\"c8y-icon-duocolor icon-48\"\n        ></i>\n        <div\n          class=\"p-l-16 flex-grow\"\n          *ngIf=\"!hasError\"\n        >\n          <h3 class=\"text-light m-b-16\">{{title}}</h3>\n          <div\n            id=\"helpContent\"\n            class=\"help-content\"\n            #helpContent\n          ></div>\n\n          <button\n            class=\"btn btn-default\"\n            (click)=\"toggle()\"\n            [title]=\"'Close help' | translate\"\n            [attr.aria-expanded]=\"!isCollapsed\"\n            aria-controls=\"collapseHelp\"\n          >Close</button>\n          <a\n            href=\"{{getUrl(src)}}\"\n            class=\"btn btn-primary\"\n            target=\"_blank\"\n            translate\n          >\n            Check the User guide\n          </a>\n        </div>\n\n        <div\n          class=\"p-l-16 flex-grow\"\n          *ngIf=\"hasError\"\n        >\n          <h3\n            class=\"text-light m-b-16\"\n            translate\n          >Sorry, that didn't work</h3>\n          <div class=\"help-content\">\n            <p translate>The content couldn't be loaded.</p>\n          </div>\n\n          <button\n            class=\"btn btn-default\"\n            (click)=\"toggle()\"\n            [title]=\"'Close help' | translate\"\n            [attr.aria-expanded]=\"!isCollapsed\"\n            aria-controls=\"collapseHelp\"\n            translate\n          >Close</button>\n          <a\n            href=\"{{getUrl()}}\"\n            class=\"btn btn-primary\"\n            target=\"_blank\"\n            translate\n          >\n            Open the User guide\n          </a>\n\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n"
        })
    ], HelpComponent);
    return HelpComponent;
}());

/**
 * Provides components which allow to display help elements
 * inside the app.
 * @exports HelpComponent A component which shows a context help in
 *                        the action bar.
 */
var HelpModule = /** @class */ (function () {
    function HelpModule() {
    }
    HelpModule = __decorate([
        NgModule({
            declarations: [HelpComponent],
            imports: [CommonModule, CollapseModule.forRoot(), ActionBarModule],
            exports: [HelpComponent],
            providers: []
        })
    ], HelpModule);
    return HelpModule;
}());

var RealtimeButtonComponent = /** @class */ (function () {
    function RealtimeButtonComponent() {
    }
    Object.defineProperty(RealtimeButtonComponent.prototype, "active", {
        get: function () {
            return !!this.service && this.service.active;
        },
        enumerable: true,
        configurable: true
    });
    RealtimeButtonComponent.prototype.toggle = function () {
        if (this.service) {
            this.active ? this.service.stop() : this.service.start();
        }
    };
    __decorate([
        Input()
    ], RealtimeButtonComponent.prototype, "service", void 0);
    RealtimeButtonComponent = __decorate([
        Component({
            selector: 'c8y-realtime-btn',
            template: "<button\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  title=\"{{ 'Toggle realtime' | translate }}\"\n  (click)=\"toggle()\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"{ active: active, inactive: !active }\"></span>\n  <span translate>Realtime</span>\n</button>\n"
        })
    ], RealtimeButtonComponent);
    return RealtimeButtonComponent;
}());

var RealtimeModule = /** @class */ (function () {
    function RealtimeModule() {
    }
    RealtimeModule = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [RealtimeButtonComponent],
            exports: [RealtimeButtonComponent]
        })
    ], RealtimeModule);
    return RealtimeModule;
}());

var ModalSelectionMode;
(function (ModalSelectionMode) {
    ModalSelectionMode["SINGLE"] = "single";
    ModalSelectionMode["MULTI"] = "multi";
})(ModalSelectionMode || (ModalSelectionMode = {}));

var SelectModalComponent = /** @class */ (function () {
    function SelectModalComponent(bsModalRef) {
        var _this = this;
        this.bsModalRef = bsModalRef;
        this.subTitle = gettext('Select from the list of items matching the device type');
        this.mode = ModalSelectionMode.MULTI;
        this.disableSelected = true;
        this.showFilter = true;
        this.areMoreEntries = false;
        this.result = new EventEmitter();
        this.search = new EventEmitter();
        this.selected = false;
        this.filterTerm = '';
        this.listItems = [];
        this.debouncer = new Subject();
        this._labels = { ok: gettext('Confirm'), cancel: gettext('Cancel') };
        this.debouncer.pipe(debounceTime(500)).subscribe(function (value) {
            _this.search.emit(value);
        });
    }
    Object.defineProperty(SelectModalComponent.prototype, "labels", {
        get: function () {
            return this._labels;
        },
        set: function (labels) {
            var _a = labels || {}, _b = _a.ok, ok = _b === void 0 ? this.labels.ok : _b, _c = _a.cancel, cancel = _c === void 0 ? this.labels.cancel : _c;
            this._labels = { ok: ok, cancel: cancel };
        },
        enumerable: true,
        configurable: true
    });
    SelectModalComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var itemsPromise, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(changes.items && changes.items.currentValue)) return [3 /*break*/, 2];
                        itemsPromise = changes.items.currentValue.map(function (item) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, selected;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = item;
                                        return [4 /*yield*/, item.options];
                                    case 1:
                                        _a.options = _b.sent();
                                        selected = item.options.find(function (option) { return option.selected; });
                                        if (selected) {
                                            item.selectedId = selected.obj.id;
                                            if (this.disableSelected) {
                                                item.options.map(function (option) { return assign(option, { disabled: true }); });
                                            }
                                        }
                                        return [2 /*return*/, item];
                                }
                            });
                        }); });
                        _a = this;
                        return [4 /*yield*/, Promise.all(itemsPromise)];
                    case 1:
                        _a.listItems = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    SelectModalComponent.prototype.updatePipe = function (filterTerm) {
        this.debouncer.next(filterTerm);
        this.filterTerm = filterTerm;
    };
    SelectModalComponent.prototype.updateChoice = function (_a) {
        var item = _a.item, id = _a.id;
        if (this.mode === 'single') {
            this.listItems.map(function (value) { return (value.selectedId = undefined); });
        }
        item.selectedId = id;
        this.selected = true;
    };
    SelectModalComponent.prototype.dismiss = function () {
        this.bsModalRef.hide();
    };
    SelectModalComponent.prototype.select = function () {
        this.result.emit(this.getOutput());
        this.bsModalRef.hide();
    };
    SelectModalComponent.prototype.ngOnDestroy = function () {
        this.debouncer.complete();
        this.result.complete();
        this.search.complete();
    };
    SelectModalComponent.prototype.getOutput = function () {
        return this.listItems
            .filter(function (item) { return item.selectedId; })
            .map(function (item) { return item.options.find(function (option) { return item.selectedId === option.obj.id; }); })
            .filter(function (option) { return !option.selected; })
            .map(function (selectedOption) { return selectedOption.obj; });
    };
    SelectModalComponent.ctorParameters = function () { return [
        { type: BsModalRef }
    ]; };
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "subTitle", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "items", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "disableSelected", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "showFilter", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "areMoreEntries", void 0);
    __decorate([
        Input()
    ], SelectModalComponent.prototype, "labels", null);
    __decorate([
        Output()
    ], SelectModalComponent.prototype, "result", void 0);
    __decorate([
        Output()
    ], SelectModalComponent.prototype, "search", void 0);
    SelectModalComponent = __decorate([
        Component({
            selector: 'c8y-select-modal',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <span c8yIcon=\"{{ icon }}\"></span>\n    <h4 class=\"text-uppercase\">\n      {{ title | translate }}\n    </h4>\n  </div>\n  <div class=\"p-16 text-center separator-bottom\">\n    <p class=\"m-b-8\">{{ subTitle | translate }}</p>\n    <c8y-filter *ngIf=\"showFilter\" [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"p-l-16 p-r-16\">\n      <div class=\"panel m-t-8 m-b-8\" *ngIf=\"!items || items.length === 0\">\n        <div class=\"c8y-empty-state text-left\">\n          <h1 c8yIcon=\"{{ icon }} \" class=\"c8y-icon-duocolor\"></h1>\n          <p translate>No items to display.</p>\n        </div>\n      </div>\n    </div>\n    <c8y-list-group>\n      <c8y-li *ngFor=\"let item of listItems | selectModalFilterPipe: filterTerm\">\n        <c8y-li-icon>\n          <i c8yIcon=\"{{ icon }}\"></i>\n        </c8y-li-icon>\n\n        <c8y-li-body class=\"content-flex-30\">\n          <div class=\"col-9\">\n            <div *ngFor=\"let bodyPart of item.body\" [ngClass]=\"bodyPart.class\">\n              <c8y-highlight\n                [title]=\"bodyPart.value\"\n                [pattern]=\"filterTerm\"\n                [text]=\"bodyPart.value\"\n              ></c8y-highlight>\n            </div>\n          </div>\n\n          <div class=\"col-3 text-right\" *ngIf=\"item.additionalInformation\">\n            <div [ngClass]=\"item.additionalInformation.class\">\n              {{ item.additionalInformation.value }}\n            </div>\n          </div>\n        </c8y-li-body>\n\n        <c8y-li-collapse>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let option of item.options\">\n              <c8y-li-radio\n                [name]=\"mode === 'single' ? 'single' : item.groupId\"\n                (onSelect)=\"updateChoice({ item: item, id: option.obj.id })\"\n                [disabled]=\"option.disabled\"\n                [selected]=\"option.selected\"\n              >\n              </c8y-li-radio>\n              <c8y-li-body class=\"content-flex-50\">\n                <div\n                  *ngFor=\"let optionPart of option.body; let i = index\"\n                  [ngClass]=\"optionPart.class\"\n                >\n                  <c8y-highlight [pattern]=\"filterTerm\" [text]=\"optionPart.value\"></c8y-highlight>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </c8y-li-collapse>\n      </c8y-li>\n      <div *ngIf=\"areMoreEntries\">\n        <div class=\"alert alert-info m-t-16 m-r-8 m-l-8\" translate>\n          Some entries might not be shown. Try narrowing search criteria.\n        </div>\n      </div>\n    </c8y-list-group>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      *ngIf=\"labels.cancel\"\n      class=\"btn btn-default\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button\n      title=\"{{ labels.ok | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"select()\"\n      [disabled]=\"!selected\"\n    >\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], SelectModalComponent);
    return SelectModalComponent;
}());

var SelectModalFilterPipe = /** @class */ (function () {
    function SelectModalFilterPipe() {
    }
    SelectModalFilterPipe.prototype.transform = function (items, filterTerm) {
        var _this = this;
        return filterTerm.trim().length === 0
            ? items
            : items.filter(function (item) {
                var allValues = _this.extractValues(item);
                var filteredValues = allValues.filter(function (value) { return _this.filterContainString(value, filterTerm); });
                return filteredValues.length > 0;
            });
    };
    SelectModalFilterPipe.prototype.filterContainString = function (value, filterTerm) {
        var term = filterTerm.toLowerCase().trim();
        return value && value.toLowerCase().indexOf(term) > -1;
    };
    SelectModalFilterPipe.prototype.extractValues = function (item) {
        var _this = this;
        var values = [];
        if (item.value) {
            values.push(item.value);
        }
        Object.keys(item).forEach(function (key) {
            if (Array.isArray(item[key])) {
                item[key].forEach(function (obj) { return values.concat(_this.extractValues(obj)); });
            }
            if (item[key] instanceof Object) {
                values = values.concat(_this.extractValues(item[key]));
            }
        });
        return values;
    };
    SelectModalFilterPipe = __decorate([
        Pipe({
            name: 'selectModalFilterPipe',
        })
    ], SelectModalFilterPipe);
    return SelectModalFilterPipe;
}());

var SelectModalModule = /** @class */ (function () {
    function SelectModalModule() {
    }
    SelectModalModule = __decorate([
        NgModule({
            imports: [
                BsDropdownModule.forRoot(),
                CommonModule,
                ListGroupModule,
                SearchModule,
                FormsModule
            ],
            exports: [
                SelectModalComponent,
                SelectModalFilterPipe
            ],
            declarations: [
                SelectModalComponent,
                SelectModalFilterPipe
            ]
        })
    ], SelectModalModule);
    return SelectModalModule;
}());

var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    SelectComponent.prototype.preventClick = function (evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    };
    SelectComponent.prototype.isOpenChange = function (isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    };
    SelectComponent.prototype.outterSelected = function (item) {
        var selected = this.selected;
        var isSelected = function () { return false; };
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = function (i) { return selected.indexOf(i) > -1; };
        }
        return isSelected(item);
    };
    SelectComponent.prototype.isSelected = function (item) {
        return this.itemsSelected.has(item);
    };
    SelectComponent.prototype.isAllItemsSelected = function () {
        return this.itemsSelected.size === this.items.length;
    };
    SelectComponent.prototype.isAllFilteredSelected = function () {
        return this.itemsSelected.size === this.filteredItems.length;
    };
    SelectComponent.prototype.applyChanges = function () {
        var selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    };
    SelectComponent.prototype.selectAll = function (checked) {
        var _this = this;
        this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
    };
    SelectComponent.prototype.onChangeItem = function (checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    };
    SelectComponent.prototype.updateFiltered = function (term) {
        if (term) {
            var search_1 = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(function (_a) {
                var name = _a.name;
                return search_1.test(name);
            });
        }
        else {
            this.filteredItems = this.items;
        }
    };
    SelectComponent.prototype.getSelectAllToggleStatus = function () {
        var label = this.getLabel();
        var checked = this.isAllSelected();
        var indeterminate = !checked && this.itemsSelected.size > 0;
        return { label: label, checked: checked, indeterminate: indeterminate };
    };
    SelectComponent.prototype.ngOnChanges = function (changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.updateLabel = function () {
        var _this = this;
        var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(function (_a) {
                var name = _a.name;
                return name;
            }).join(', ');
        }
    };
    SelectComponent.prototype.updateSelected = function () {
        var _this = this;
        var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
        itemsSelected.clear();
        items.forEach(function (item) {
            if (_this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    };
    SelectComponent.prototype.isAllSelected = function () {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.getLabel = function () {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    };
    __decorate([
        Input()
    ], SelectComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], SelectComponent.prototype, "selectedLabel", void 0);
    __decorate([
        Input()
    ], SelectComponent.prototype, "applyLabel", void 0);
    __decorate([
        Input()
    ], SelectComponent.prototype, "items", void 0);
    __decorate([
        Input()
    ], SelectComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], SelectComponent.prototype, "onChange", void 0);
    __decorate([
        ViewChild(BsDropdownDirective, { static: false })
    ], SelectComponent.prototype, "dropdown", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], SelectComponent.prototype, "preventClick", null);
    SelectComponent = __decorate([
        Component({
            selector: 'c8y-select',
            template: "<div\n  class=\"c8y-child-assets-selector  dropdown fit-h\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Filter' | translate }}\u2026\"\n          (keyup)=\"updateFiltered($event.target.value)\"\n          [(ngModel)]=\"searchFilter\"\n        />\n        <span class=\"input-group-addon\">\n          <i class=\"fa fa-search\" *ngIf=\"!textFilter\"></i>\n          <i class=\"fa fa-times text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"multiselect-item\">\n      <label\n        [title]=\"getSelectAllToggleStatus().label\"\n        class=\"c8y-checkbox input-sm\"\n        ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n      >\n        <input\n          type=\"checkbox\"\n          [checked]=\"getSelectAllToggleStatus().checked\"\n          (change)=\"selectAll($event.target.checked)\"\n          [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n          style=\"margin-top:0;\"\n        />\n        <span></span>\n        <span class=\"label-text \">\n          {{ getSelectAllToggleStatus().label }}\n        </span>\n      </label>\n    </li>\n\n    <li class=\"multiselect-item-container\">\n      <ul class=\"list-unstyled\">\n        <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n          <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n            <input\n              type=\"checkbox\"\n              [checked]=\"isSelected(item)\"\n              (change)=\"onChangeItem($event.target.checked, item)\"\n              style=\"margin-top:0\"\n            />\n            <span></span>\n            <span class=\"label-text \">\n              {{ item.name | translate }}\n            </span>\n          </label>\n        </li>\n      </ul>\n    </li>\n    <li class=\"divider\"></li>\n    <li>\n      <button\n        title=\"{{ applyLabel | translate }}\"\n        class=\"btn btn-primary btn-block\"\n        (click)=\"applyChanges()\"\n      >\n        {{ applyLabel | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
        })
    ], SelectComponent);
    return SelectComponent;
}());

var TypeaheadComponent = /** @class */ (function () {
    function TypeaheadComponent() {
        this.required = false;
        this.disabled = false;
        this.allowFreeEntries = true;
        this.displayProperty = 'name';
        this.name = this.displayProperty;
        this.container = '';
        this.selected = {
            id: null
        };
        this.selectedChange = new EventEmitter();
        this.onSearch = new EventEmitter();
        this.KEYCODE_UP = 38;
        this.KEYCODE_DOWN = 40;
        this.KEYCODE_TAB = 9;
        this.KEYCODE_ENTER = 13;
        this.KEYCODE_ESC = 27;
    }
    TypeaheadComponent_1 = TypeaheadComponent;
    TypeaheadComponent.prototype.writeValue = function (value) {
        this.selected = value;
    };
    TypeaheadComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TypeaheadComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TypeaheadComponent.prototype.doBlur = function () {
        if (this.onTouched) {
            this.onTouched();
        }
    };
    TypeaheadComponent.prototype.getDisplayProperty = function () {
        return get(this.selected, this.displayProperty, '');
    };
    TypeaheadComponent.prototype.onShown = function () {
        this.searchControl.nativeElement.focus();
    };
    TypeaheadComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    TypeaheadComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscription = fromEvent(this.searchControl.nativeElement, 'keydown')
            .pipe(map(function (e) { return _this.handleKeyboard(e); }), filter(function (e) { return e; }), debounceTime(200), map(function (e) { return e.target.value; }), distinctUntilChanged())
            .subscribe(function (value) {
            _this.selected = {
                id: null
            };
            set(_this.selected, _this.displayProperty, value || '');
            _this.onChange(_this.selected);
            _this.selectedChange.emit(_this.selected);
            _this.onSearch.emit(value);
        });
    };
    TypeaheadComponent.prototype.handleKeyboard = function (event) {
        var keyCode = event.keyCode;
        if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
            var items = this.list.toArray();
            var index = findIndex(items, function (item) { return item.active; });
            if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                if (index > -1) {
                    event.preventDefault();
                    items[index].element.nativeElement.click();
                }
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
            }
            else {
                this.dropdown.show();
                var upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                if (index > -1) {
                    items[index].active = false;
                }
                if (items[index + upOrDown]) {
                    items[index + upOrDown].active = true;
                }
            }
            return;
        }
        else if (keyCode === this.KEYCODE_ESC) {
            event.stopPropagation();
            this.dropdown.hide();
            this.searchControl.nativeElement.blur();
            return;
        }
        else {
            this.dropdown.show();
        }
        return event;
    };
    TypeaheadComponent.prototype.validate = function (ctrl) {
        if (this.required && !this.getDisplayProperty()) {
            return { required: true };
        }
        if (!this.allowFreeEntries && this.selected && this.selected.id === null) {
            return { notExisting: true };
        }
        return null;
    };
    var TypeaheadComponent_1;
    __decorate([
        ViewChild('searchControl', { static: false })
    ], TypeaheadComponent.prototype, "searchControl", void 0);
    __decorate([
        ViewChild('dropdown', { static: false })
    ], TypeaheadComponent.prototype, "dropdown", void 0);
    __decorate([
        ContentChildren(ListItemComponent)
    ], TypeaheadComponent.prototype, "list", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "required", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "allowFreeEntries", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "displayProperty", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "container", void 0);
    __decorate([
        Input()
    ], TypeaheadComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], TypeaheadComponent.prototype, "selectedChange", void 0);
    __decorate([
        Output()
    ], TypeaheadComponent.prototype, "onSearch", void 0);
    TypeaheadComponent = TypeaheadComponent_1 = __decorate([
        Component({
            selector: 'c8y-typeahead',
            template: "<div\n  class=\"c8y-child-assets-selector dropdown\"\n  dropdown\n  [container]=\"container\"\n  placement=\"bottom left\"\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div class=\"input-group input-group-dropdown\" dropdownToggle>\n    <input\n      #searchControl\n      type=\"text\"\n      class=\"form-control text-truncate p-r-24\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [disabled]=\"disabled\"\n      title=\"{{ placeholder | translate }}\"\n    />\n\n    <span\n      class=\"label label-info\"\n      style=\"position: absolute; right: 40px; top: 10px; z-index: 10;\"\n      translate\n      *ngIf=\"\n        selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false\n      \"\n      >New</span\n    >\n\n    <span class=\"input-group-btn\">\n      <button type=\"button\" class=\"btn btn-clean\" [disabled]=\"disabled\">\n        <i class=\"dropdown-caret\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group class=\"dropdown-menu dropdown-menu--modal\" *dropdownMenu>\n    <ng-content select=\"c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return TypeaheadComponent_1; })
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return TypeaheadComponent_1; }),
                    multi: true
                }
            ]
        })
    ], TypeaheadComponent);
    return TypeaheadComponent;
}());

/**
 * The angular module definition for a select.
 * @exports SelectComponent
 */
var SelectModule = /** @class */ (function () {
    function SelectModule() {
    }
    SelectModule = __decorate([
        NgModule({
            imports: [
                BsDropdownModule.forRoot(),
                CommonModule,
                ListGroupModule,
                FormsModule
            ],
            exports: [
                SelectComponent,
                TypeaheadComponent
            ],
            declarations: [
                SelectComponent,
                TypeaheadComponent
            ]
        })
    ], SelectModule);
    return SelectModule;
}());

var CoreModule = /** @class */ (function () {
    function CoreModule() {
    }
    CoreModule_1 = CoreModule;
    CoreModule.forRoot = function () {
        return {
            ngModule: CoreModule_1,
            providers: __spread(CommonModule.providers(), LoginModule.providers())
        };
    };
    var CoreModule_1;
    CoreModule = CoreModule_1 = __decorate([
        NgModule({
            exports: [
                ActionBarModule,
                ActionModule,
                AlertModule,
                AuditLogModule,
                BootstrapModule,
                BreadcrumbModule,
                CommonModule,
                DataGridModule,
                DropAreaModule,
                HeaderModule,
                LoginModule,
                ModalModule,
                NavigatorModule,
                AuthenticationModule,
                SearchModule,
                SelectModule,
                TabsModule,
                UserModule,
                FormsModule,
                DeviceStatusModule,
                DocsModule,
                StepperModule,
                DynamicComponentModule,
                DashboardModule,
                ListGroupModule,
                SelectModalModule,
                FilePickerModule,
                DatePickerModule,
                ProductExperienceModule,
                HelpModule,
                RealtimeModule
            ]
        })
    ], CoreModule);
    return CoreModule;
}());

var QuickLinkComponent = /** @class */ (function () {
    function QuickLinkComponent() {
        this.classes = '';
    }
    QuickLinkComponent.prototype.ngOnInit = function () {
        this.classes = "card-block text-center " + kebabCase(this.label);
    };
    __decorate([
        Input()
    ], QuickLinkComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], QuickLinkComponent.prototype, "label", void 0);
    QuickLinkComponent = __decorate([
        Component({
            selector: 'c8y-quick-link',
            template: "<div [class]=\"classes\" title=\"{{ label | translate }}\">\r\n  <h1 class=\"text-gray-darker\">\r\n    <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\r\n  </h1>\r\n  <p class=\"text-muted\">{{ label | translate }}</p>\r\n</div>\r\n"
        })
    ], QuickLinkComponent);
    return QuickLinkComponent;
}());

var QuickLinkModule = /** @class */ (function () {
    function QuickLinkModule() {
    }
    QuickLinkModule = __decorate([
        NgModule({
            declarations: [QuickLinkComponent],
            imports: [CoreModule],
            exports: [QuickLinkComponent],
            providers: []
        })
    ], QuickLinkModule);
    return QuickLinkModule;
}());

var HOOK_DYNAMIC_PROVIDER_CONFIG = new InjectionToken('Dynamic Provider Config');

var ProviderConfigurationNodeFactory = /** @class */ (function () {
    function ProviderConfigurationNodeFactory(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    ProviderConfigurationNodeFactory.prototype.get = function () {
        var _this = this;
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            var canActivate = this.config
                .map(function (c) {
                return c.navigation.canActivate && c.navigation.canActivate.length
                    ? c.navigation.canActivate.map(function (ca) { return _this.injector.get(ca); })
                    : undefined;
            })
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map(function (canActivateResult) {
                return _this.config
                    .map(function (c, index) {
                    return canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined;
                })
                    .filter(function (el) { return !!el; });
            }), tap(function (nodes) { return (_this.nodes = nodes); }));
        }
        return this.nodes;
    };
    ProviderConfigurationNodeFactory.prototype.checkCanActivate = function (ca) {
        if (!!ca && ca.length) {
            var canActivateResult = ca
                .map(function (canActivate) { return canActivate.canActivate(undefined, undefined); })
                .map(this.wrapIntoObservable.bind(this));
            return forkJoin(canActivateResult).pipe(map(function (caResult) { return caResult.reduce(function (acc, curr) { return acc && curr; }); }));
        }
        return of(true);
    };
    ProviderConfigurationNodeFactory.prototype.isPromise = function (obj) {
        return !!obj && typeof obj.then === 'function';
    };
    ProviderConfigurationNodeFactory.prototype.wrapIntoObservable = function (value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    };
    ProviderConfigurationNodeFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
        { type: Injector }
    ]; };
    ProviderConfigurationNodeFactory = __decorate([
        Injectable(),
        __param(0, Optional()),
        __param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
    ], ProviderConfigurationNodeFactory);
    return ProviderConfigurationNodeFactory;
}());

var ProviderConfigurationService = /** @class */ (function (_super) {
    __extends(ProviderConfigurationService, _super);
    function ProviderConfigurationService(client, activatedRoute) {
        var _this = _super.call(this, client) || this;
        _this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.baseUrl');
        _this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.configurationEndpoint.listUrl');
        return _this;
    }
    ProviderConfigurationService_1 = ProviderConfigurationService;
    ProviderConfigurationService.prototype.detail = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, ProviderConfigurationService_1.NO_DETAIL_ID)];
            });
        });
    };
    ProviderConfigurationService.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, entity)];
            });
        });
    };
    ProviderConfigurationService.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, ProviderConfigurationService_1.NO_DETAIL_ID)];
            });
        });
    };
    /** There is a single provider configuration per tenant and detail URL is not needed */
    ProviderConfigurationService.prototype.getDetailUrl = function (_) {
        return this.listUrl;
    };
    var ProviderConfigurationService_1;
    ProviderConfigurationService.NO_DETAIL_ID = null;
    ProviderConfigurationService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: ActivatedRoute }
    ]; };
    ProviderConfigurationService = ProviderConfigurationService_1 = __decorate([
        Injectable()
    ], ProviderConfigurationService);
    return ProviderConfigurationService;
}(Service));

var ProviderDefinitionsService = /** @class */ (function (_super) {
    __extends(ProviderDefinitionsService, _super);
    function ProviderDefinitionsService(client, activatedRoute) {
        var _this = _super.call(this, client) || this;
        _this.baseUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.baseUrl');
        _this.listUrl = get(activatedRoute, 'snapshot.data.endpoint.definitionsEndpoint.listUrl');
        return _this;
    }
    ProviderDefinitionsService.prototype.list = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this)];
            });
        });
    };
    ProviderDefinitionsService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: ActivatedRoute }
    ]; };
    ProviderDefinitionsService = __decorate([
        Injectable()
    ], ProviderDefinitionsService);
    return ProviderDefinitionsService;
}(Service));

var ProviderConfigurationComponent = /** @class */ (function () {
    function ProviderConfigurationComponent(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
        var _this = this;
        this.permissions = permissions;
        this.activatedRoute = activatedRoute;
        this.modalService = modalService;
        this.alertService = alertService;
        this.providerDefinitionsService = providerDefinitionsService;
        this.providerConfigurationService = providerConfigurationService;
        this.jsonschema = jsonschema;
        this.layout$ = this.activatedRoute.data.pipe(map(function (config) { return config.layout; }), tap(function (layout) { return (_this.layout = layout); }), tap(function (layout) {
            return (_this.options.formState.disabled = !_this.permissions.hasAllRoles(layout.saveRoles));
        }));
        this.changeProvider$ = new BehaviorSubject(null);
        this.providerInput$ = new BehaviorSubject('');
        this.form = new FormGroup({});
        this.fields = [];
        this.options = {
            formState: {
                disabled: false
            }
        };
        this.reload$ = new BehaviorSubject(null);
        this.updatedConfiguration$ = new Subject();
    }
    ProviderConfigurationComponent.prototype.ngOnInit = function () {
        var _this = this;
        var allProviders$ = from(this.providerDefinitionsService.list()).pipe(map(function (result) { return result.data; }), shareReplay(1));
        this.providers$ = combineLatest(allProviders$, this.providerInput$).pipe(map(function (_a) {
            var _b = __read(_a, 2), providers = _b[0], input = _b[1];
            return input
                ? providers.filter(function (el) { return el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0; })
                : providers;
        }), shareReplay(1));
        this.configuration$ = merge$1(this.updatedConfiguration$, this.reload$.pipe(switchMap(function () {
            return from(_this.providerConfigurationService.detail()).pipe(catchError(function () { return of({}); }));
        }), map(function (result) { return result.data; }))).pipe(map(this.removeEncryptedValues), shareReplay(1));
        this.selectedProvider$ = combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(tap(function (_a) {
            var _b = __read(_a, 3), _ = _b[0], configuration = _b[1], newProvider = _b[2];
            return (_this.model = newProvider
                ? pick(_this.model, 'sms.senderName', 'sms.senderAddress')
                : configuration);
        }), map(function (_a) {
            var _b = __read(_a, 3), providers = _b[0], configuration = _b[1], newProvider = _b[2];
            return newProvider ||
                find$1(providers, function (provider) { return get(configuration, 'provider') === provider.id; });
        }), tap(function (provider) {
            if (provider) {
                var config = _this.jsonschema.toFieldConfig(get(provider, 'schema'));
                if (config.fieldGroup) {
                    config.fieldGroup.forEach(function (fieldConfig) {
                        ɵdefineHiddenProp(fieldConfig, '_keyPath', {
                            key: fieldConfig.key,
                            path: [fieldConfig.key]
                        });
                        fieldConfig.expressionProperties = {
                            'templateOptions.disabled': 'formState.disabled'
                        };
                    });
                }
                _this.fields = [config];
                _this.form = new FormGroup({});
            }
        }), shareReplay(1));
    };
    ProviderConfigurationComponent.prototype.saveProviderConfiguration = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.providerConfigurationService.update(this.model)];
                    case 1:
                        res = _a.sent();
                        this.changeProvider$.next(null);
                        this.updatedConfiguration$.next(res.data);
                        this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                        this.form.markAsPristine();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        this.alertService.addServerFailure(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ProviderConfigurationComponent.prototype.deleteProviderConfiguration = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, Status.DANGER, {
                                ok: this.layout.deleteConfigurationModalOkBtnLabel,
                                cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.providerConfigurationService.delete()];
                    case 2:
                        _a.sent();
                        this.reload$.next();
                        this.alertService.success(this.layout.configurationDeletedSuccessMsg);
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        if (err_2) {
                            this.alertService.addServerFailure(err_2);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProviderConfigurationComponent.prototype.removeEncryptedValues = function (configuration) {
        return mapValues(configuration, function (value) { return (value === '<<Encrypted>>' ? undefined : value); });
    };
    ProviderConfigurationComponent.ctorParameters = function () { return [
        { type: Permissions },
        { type: ActivatedRoute },
        { type: ModalService },
        { type: AlertService },
        { type: ProviderDefinitionsService },
        { type: ProviderConfigurationService },
        { type: C8yJSONSchema }
    ]; };
    ProviderConfigurationComponent = __decorate([
        Component({
            selector: 'c8y-sms-gateway',
            template: "<c8y-title>\n  {{ (layout$ | async).pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async).cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async).description\" class=\"bottom-m\">\n            {{ (layout$ | async).description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async).providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async).saveRoles)\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async).providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async).providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async).deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"!(configuration$ | async)?.provider\"\n          title=\"{{ (layout$ | async).deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async).saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async).saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
            providers: [ProviderConfigurationService, ProviderDefinitionsService]
        })
    ], ProviderConfigurationComponent);
    return ProviderConfigurationComponent;
}());

var ProviderConfigurationRouteFactory = /** @class */ (function () {
    function ProviderConfigurationRouteFactory(config) {
        this.config = flatten(config);
    }
    ProviderConfigurationRouteFactory.prototype.get = function () {
        return this.config.map(function (c) { return ({
            path: c.navigation.path,
            component: ProviderConfigurationComponent,
            canActivate: c.navigation.canActivate,
            data: {
                layout: c.layout,
                endpoint: c.endpoint
            }
        }); });
    };
    ProviderConfigurationRouteFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
    ]; };
    ProviderConfigurationRouteFactory = __decorate([
        Injectable(),
        __param(0, Optional()), __param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
    ], ProviderConfigurationRouteFactory);
    return ProviderConfigurationRouteFactory;
}());

var ProviderConfigurationModule = /** @class */ (function () {
    function ProviderConfigurationModule() {
    }
    ProviderConfigurationModule_1 = ProviderConfigurationModule;
    ProviderConfigurationModule.config = function (config) {
        return {
            ngModule: ProviderConfigurationModule_1,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    };
    var ProviderConfigurationModule_1;
    ProviderConfigurationModule = ProviderConfigurationModule_1 = __decorate([
        NgModule({
            declarations: [ProviderConfigurationComponent],
            exports: [ProviderConfigurationComponent],
            imports: [CoreModule, CommonModule, DynamicFormsModule],
            entryComponents: [ProviderConfigurationComponent],
            providers: [
                {
                    provide: HOOK_ONCE_ROUTE,
                    useClass: forwardRef(function () { return ProviderConfigurationRouteFactory; }),
                    multi: true
                },
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: forwardRef(function () { return ProviderConfigurationNodeFactory; }),
                    multi: true
                }
            ]
        })
    ], ProviderConfigurationModule);
    return ProviderConfigurationModule;
}());

var RealtimeMessage = /** @class */ (function () {
    function RealtimeMessage() {
    }
    return RealtimeMessage;
}());

/**
 * A wrapper class for handling realtime notifications in RxJS fashion.
 */
var RealtimeService = /** @class */ (function () {
    function RealtimeService(realtime) {
        this.realtime = realtime;
        this.subjects$ = new Map();
        this.isActive = true;
    }
    Object.defineProperty(RealtimeService.prototype, "active", {
        /**
         * A flag displaying if realtime notifications are currently active.
         */
        get: function () {
            return this.isActive;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get an Observable of all realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of notifications wrapped as [[RealtimeMessage]]
     */
    RealtimeService.prototype.onAll$ = function (entityOrId) {
        var _this = this;
        var subject$ = this.getSubjectForChannel(entityOrId);
        return subject$.pipe(finalize(function () {
            if (subject$.observers.length === 1 && subject$.observers[0].closed) {
                subject$.stop();
                _this.subjects$.delete(subject$.channel);
            }
        }));
    };
    /**
     * Subscribes again all realtime channels with active observers.
     */
    RealtimeService.prototype.start = function () {
        if (!this.isActive) {
            this.subjects$.forEach(function (subject$) {
                subject$.start();
            });
            this.isActive = true;
        }
    };
    /**
     * Stops realtime notifications and unsubscribes all realtime channels.
     */
    RealtimeService.prototype.stop = function () {
        if (this.isActive) {
            this.subjects$.forEach(function (subject$) {
                subject$.stop();
            });
            this.isActive = false;
        }
    };
    /**
     * Get an Observable of all CREATE realtime notifications.
     *
     * @returns An [[Observable]] of newly created entity objects.
     */
    RealtimeService.prototype.onCreate$ = function () {
        return this.onAll$().pipe(filter(function (msg) { return msg.realtimeAction === 'CREATE'; }), map(function (msg) { return msg.data; }));
    };
    /**
     * Get an Observable of all UPDATE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of updated entity objects.
     */
    RealtimeService.prototype.onUpdate$ = function (entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(function (msg) { return msg.realtimeAction === 'UPDATE'; }), map(function (msg) { return msg.data; }));
    };
    /**
     * Get an Observable of all DELETE realtime notifications.
     *
     * @param {string | number | IIdentified} entityOrId Entity object or id
     *
     * @returns An [[Observable]] of deleted entity objects.
     */
    RealtimeService.prototype.onDelete$ = function (entityOrId) {
        return this.onAll$(entityOrId).pipe(filter(function (msg) { return msg.realtimeAction === 'DELETE'; }), map(function (msg) { return coerceNumberProperty(msg.data); }));
    };
    RealtimeService.prototype.getIdString = function (reference) {
        var id;
        if (typeof reference === 'object') {
            id = reference.id;
        }
        else {
            id = reference;
        }
        return String(id);
    };
    RealtimeService.prototype.getChannel = function (entityOrId) {
        return entityOrId ? this.channel().replace('*', this.getIdString(entityOrId)) : this.channel();
    };
    RealtimeService.prototype.getSubjectForChannel = function (entityOrId) {
        var channel = this.getChannel(entityOrId);
        var subject$;
        if (this.subjects$.has(channel)) {
            subject$ = this.subjects$.get(channel);
        }
        else {
            subject$ = new RealtimeSubject(channel, this.realtime);
            this.subjects$.set(channel, subject$);
        }
        return subject$;
    };
    return RealtimeService;
}());
// tslint:disable-next-line: max-classes-per-file
var RealtimeSubject = /** @class */ (function (_super) {
    __extends(RealtimeSubject, _super);
    function RealtimeSubject(realtimeChannel, realtime) {
        var _this = _super.call(this) || this;
        _this.realtimeChannel = realtimeChannel;
        _this.realtime = realtime;
        _this.start();
        return _this;
    }
    Object.defineProperty(RealtimeSubject.prototype, "channel", {
        get: function () {
            return this.realtimeChannel;
        },
        enumerable: true,
        configurable: true
    });
    RealtimeSubject.prototype.start = function () {
        var _this = this;
        if (!this.realtimeSubscription) {
            this.realtimeSubscription = this.realtime.subscribe(this.realtimeChannel, function (msg) {
                var data = {
                    channel: msg.channel,
                    data: msg.data.data,
                    id: msg.id,
                    realtimeAction: msg.data.realtimeAction
                };
                _this.next(data);
            });
        }
    };
    RealtimeSubject.prototype.stop = function () {
        if (this.realtimeSubscription) {
            this.realtime.unsubscribe(this.realtimeSubscription);
            this.realtimeSubscription = null;
        }
    };
    return RealtimeSubject;
}(Subject));

/**
 * A service for handling bulk operation realtime notifications in RxJS fashion.
 */
var OperationBulkRealtimeService = /** @class */ (function (_super) {
    __extends(OperationBulkRealtimeService, _super);
    function OperationBulkRealtimeService(realtime) {
        return _super.call(this, realtime) || this;
    }
    OperationBulkRealtimeService.prototype.channel = function () {
        return '/bulkOperations/*';
    };
    OperationBulkRealtimeService.ctorParameters = function () { return [
        { type: Realtime }
    ]; };
    OperationBulkRealtimeService = __decorate([
        Injectable()
    ], OperationBulkRealtimeService);
    return OperationBulkRealtimeService;
}(RealtimeService));

var ManagedObjectRealtimeService = /** @class */ (function (_super) {
    __extends(ManagedObjectRealtimeService, _super);
    function ManagedObjectRealtimeService(realtime) {
        return _super.call(this, realtime) || this;
    }
    ManagedObjectRealtimeService.prototype.channel = function () {
        return '/managedobjects/*';
    };
    ManagedObjectRealtimeService.ctorParameters = function () { return [
        { type: Realtime }
    ]; };
    ManagedObjectRealtimeService = __decorate([
        Injectable()
    ], ManagedObjectRealtimeService);
    return ManagedObjectRealtimeService;
}(RealtimeService));

/**
 * Barrel to export /core
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActionBarComponent, ActionBarItemComponent, ActionBarModule, ActionBarService, ActionComponent, ActionModule, ActionOutletComponent, ActionService, AlertComponent, AlertDetailsComponent, AlertModule, AlertOutletComponent, AlertService, AlertTextComponent, AppIconComponent, AppStateService, AppSwitcherComponent, ApplicationOptions, AuthenticationModule, BootstrapComponent, BootstrapModule, BreadcrumbComponent, BreadcrumbItemComponent, BreadcrumbModule, BreadcrumbOutletComponent, BreadcrumbService, C8yJSONSchema, C8yStepper, C8yStepperButtons, C8yStepperIcon, C8yStepperProgress, CachedLocaleDictionaryService, CellRendererComponent, CellRendererContext, CellRendererDefDirective, ChangePasswordComponent, ColumnDirective, CommonModule, ConfirmModalComponent, ContextRouteComponent, ContextRouteGuard, ContextRouteService, CookieBannerComponent, CoreModule, CredentialsComponent, DashboardChildActionComponent, DashboardChildChange, DashboardChildComponent, DashboardChildTitleComponent, DashboardComponent, DashboardModule, DataGridComponent, DataGridModule, DatePickerComponent, DatePickerModule, DatePipe, DefaultValidationDirective, DeviceStatusComponent, DeviceStatusModule, DocsModule, DocsService, DropAreaComponent, DropAreaModule, DynamicComponentComponent, DynamicComponentModule, DynamicComponentService, DynamicFormsModule, ES_MAX_TIME_MILLISECONDS, EmptyComponent, FilePickerComponent, FilePickerModule, FilterInputComponent, FilteringActionType, FilteringFormRendererComponent, FilteringFormRendererContext, FilteringFormRendererDefDirective, ForOfDirective, FormGroupComponent, FormsModule, GainsightService, GridDataSource, GuideDocsComponent, GuideHrefDirective, HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_COMPONENT, HOOK_COMPONENTS, HOOK_DOCS, HOOK_DYNAMIC_PROVIDER_CONFIG, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE, HOOK_OPTIONS, HOOK_PATTERN_MESSAGES, HOOK_SEARCH, HOOK_TABS, HeaderBarComponent, HeaderCellRendererDefDirective, HeaderModule, HeaderService, HelpComponent, HelpModule, HighlightComponent, HumanizeAppNamePipe, HumanizePipe, I18nModule, ICONS, ICON_LIST, IconDirective, InputGroupListComponent, InputGroupListContainerDirective, IpRangeInputListComponent, JsonValidationPrettifierDirective, LANGUAGES, LOCALE_PATH, ListGroupComponent, ListGroupModule, ListItemActionComponent, ListItemBodyComponent, ListItemCheckboxComponent, ListItemCollapseComponent, ListItemComponent, ListItemFooterComponent, ListItemIconComponent, ListItemRadioComponent, ListItemTimelineComponent, LoadMoreComponent, LoadingComponent, LoginComponent, LoginModule, LoginService, LoginViews, MESSAGES, ManagedObjectRealtimeService, MapFunctionPipe, MaxValidationDirective, MessageDirective, MessagesComponent, MinValidationDirective, MissingTranslationCustomHandler, ModalComponent, ModalModule, ModalSelectionMode, ModalService, NavigatorIconComponent, NavigatorItemComponent, NavigatorModule, NavigatorNode, NavigatorNodeComponent, NavigatorNodeRoot, NavigatorOutletComponent, NavigatorService, NewPasswordComponent, OperationBulkRealtimeService, OptionsService, OutletDirective, PasswordCheckListComponent, PasswordConfirm, PasswordConfirmModalComponent, PasswordService, PasswordStrengthCheckerService, PasswordStrengthComponent, PasswordStrengthValidatorDirective, PatternMessagesService, Permissions, PhoneValidationDirective, PopoverConfirmComponent, ProductExperienceDirective, ProductExperienceModule, ProgressBarComponent, ProviderConfigurationComponent, ProviderConfigurationModule, ProviderConfigurationNodeFactory, ProviderConfigurationRouteFactory, ProviderConfigurationService, ProviderDefinitionsService, PushStatus, PushStatusLabels, QuickLinkComponent, QuickLinkModule, RealtimeButtonComponent, RealtimeMessage, RealtimeModule, RealtimeService, RecoverPasswordComponent, RequiredInputPlaceholderDirective, RightDrawerComponent, RouterModule, RouterService, RouterTabsResolver, SearchComponent, SearchModule, SearchOutletComponent, SearchResultEmptyComponent, SearchService, SelectComponent, SelectModalComponent, SelectModalFilterPipe, SelectModalModule, SelectModule, SendStatus, SendStatusLabels, ShortenUserNamePipe, SmsChallengeComponent, StateService, Status, StepperModule, StrengthValidatorService, TabComponent, TabsModule, TabsOutletComponent, TabsService, TenantUiService, TextAreaRowHeightDirective, TitleComponent, TitleOutletComponent, TotpAuthComponent, TotpChallengeComponent, TotpSetupComponent, TranslateCustomLoader, TranslateParserCustom, TranslateService, TypeaheadComponent, UserEditComponent, UserEditModalComponent, UserMenuItemComponent, UserMenuOutletComponent, UserMenuService, UserModule, UserPreferencesService, UserPreferencesStorageInventory, UserPreferencesStorageLocal, UserTotpRevokeComponent, UserTotpSetupComponent, ValidationPattern, ViewContext, ViewContextServices, WidgetsDashboardComponent, _, deviceAvailabilityIconMap, fromFactories, fromTrigger, getActivatedRoute, getAngularLocalesLanguageString, gettext, initializeServices, languagesFactory, loadLocale, localeId, localePathFactory, memoize, minColumnGridTrackSize, operationStatusClasses, operationStatusIcons, parse, ratiosByColumnTypes, resolveInjectedFactories, routes, sortByPriority, stateToFactory, statusAlert, statusClasses, statusIcons, throttle, tooltips, translateLoaderFactory, trimTranslationKey, ɵ0$1 as ɵ0, ForceHtmlTranslateDirective as ɵa, IfAllowedDirective as ɵb, CookieBannerService as ɵc, CookieBannerPreferencesModalComponent as ɵd, ProvidePhoneNumberComponent as ɵe, PasswordService as ɵf, I18nModule$1 as ɵg, TranslateExtension as ɵh, registerTranslateExtension as ɵi, ValidationModule as ɵj, c8yValidationConfigFactory as ɵk, FIELD_TYPES as ɵl, fieldTypeFactory as ɵm, DynamicFormsUIThemeModule as ɵn, FieldCheckbox as ɵo, ArrayTypeComponent as ɵp, WrapperFormField as ɵq, FieldInput as ɵr, FieldRadio as ɵs, ObjectTypeComponent as ɵt, AuditLogModule as ɵu, AuditLogComponent as ɵv, HOOK_ONCE_ROUTE as ɵw, HOOK_NAVIGATOR_NODES as ɵx };
//# sourceMappingURL=c8y-ngx-components.js.map
