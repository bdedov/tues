import { __decorate, __awaiter, __generator } from 'tslib';
import { Injectable, ViewContainerRef, ViewChild, TemplateRef, Component, NgModule } from '@angular/core';
import { Router } from '@angular/router';
import { gettext, AlertService, CoreModule, HOOK_ACTION_BAR } from '@c8y/ngx-components';
import { FetchClient, ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';

var ImpactSubscriptionService = /** @class */ (function () {
    function ImpactSubscriptionService(client) {
        this.client = client;
        this.microserviceUrl = '/service/impact';
        this.header = { 'Content-Type': 'application/json' };
    }
    ImpactSubscriptionService.prototype.refreshDeviceResources = function (deviceId) {
        var options = {
            method: 'PUT',
            headers: this.header
        };
        return this.client.fetch(this.microserviceUrl + "/refresh/" + deviceId, options);
    };
    ImpactSubscriptionService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    ImpactSubscriptionService = __decorate([
        Injectable()
    ], ImpactSubscriptionService);
    return ImpactSubscriptionService;
}());

var RefreshActionComponent = /** @class */ (function () {
    function RefreshActionComponent(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    RefreshActionComponent.prototype.ngOnInit = function () {
        this.vcRef.createEmbeddedView(this.templateCopy);
    };
    RefreshActionComponent.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, deviceId, res, data, _a, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.router &&
                            this.router.routerState &&
                            this.router.routerState.snapshot &&
                            this.router.routerState.snapshot.url;
                        deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
                        if (!deviceId) return [3 /*break*/, 10];
                        this.requestInProgress = true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 8, , 9]);
                        return [4 /*yield*/, this.impactService.refreshDeviceResources(deviceId)];
                    case 2:
                        res = _b.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 6];
                        if (!res.json) return [3 /*break*/, 4];
                        return [4 /*yield*/, res.json()];
                    case 3:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = undefined;
                        _b.label = 5;
                    case 5:
                        data = _a;
                        this.alert.addServerFailure({ data: data, res: res });
                        return [3 /*break*/, 7];
                    case 6:
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                        _b.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        ex_1 = _b.sent();
                        this.alert.addServerFailure(ex_1);
                        return [3 /*break*/, 9];
                    case 9:
                        this.requestInProgress = false;
                        return [3 /*break*/, 11];
                    case 10:
                        this.alert.danger(gettext('Could not find device ID in URL.'));
                        _b.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    RefreshActionComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Router },
        { type: ImpactSubscriptionService },
        { type: AlertService }
    ]; };
    __decorate([
        ViewChild('templateCopy', { read: TemplateRef, static: true })
    ], RefreshActionComponent.prototype, "templateCopy", void 0);
    RefreshActionComponent = __decorate([
        Component({
            selector: 'c8y-impact-refresh-action',
            template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i class=\"fa fa-refresh\" [ngClass]=\"{ 'fa-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
        })
    ], RefreshActionComponent);
    return RefreshActionComponent;
}());

var ImpactActionFactory = /** @class */ (function () {
    function ImpactActionFactory(applicationService) {
        this.applicationService = applicationService;
    }
    ImpactActionFactory_1 = ImpactActionFactory;
    ImpactActionFactory.prototype.get = function (activeRoute) {
        return __awaiter(this, void 0, void 0, function () {
            var actions, data, contextData, isDeviceInfoTab, showRefreshActionButton, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        actions = [];
                        data = !activeRoute.parent || activeRoute.snapshot.data.context
                            ? activeRoute.snapshot.data
                            : activeRoute.parent.snapshot.data;
                        contextData = data.contextData;
                        isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
                        _a = isDeviceInfoTab &&
                            contextData &&
                            contextData.c8y_ImpactResourceInfo;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.applicationService.isAvailable(ImpactActionFactory_1.applicationName)];
                    case 1:
                        /* call application service only for relevant devices to reduce number of service calls! */
                        _a = (_b.sent()).data;
                        _b.label = 2;
                    case 2:
                        showRefreshActionButton = _a;
                        if (showRefreshActionButton) {
                            actions.push({
                                priority: 500,
                                placement: 'right',
                                template: RefreshActionComponent
                            });
                        }
                        return [2 /*return*/, actions];
                }
            });
        });
    };
    var ImpactActionFactory_1;
    ImpactActionFactory.applicationName = 'impact';
    ImpactActionFactory.ctorParameters = function () { return [
        { type: ApplicationService }
    ]; };
    ImpactActionFactory = ImpactActionFactory_1 = __decorate([
        Injectable()
    ], ImpactActionFactory);
    return ImpactActionFactory;
}());

var ImpactProtocolModule = /** @class */ (function () {
    function ImpactProtocolModule() {
    }
    ImpactProtocolModule = __decorate([
        NgModule({
            declarations: [RefreshActionComponent],
            imports: [CoreModule],
            providers: [
                ImpactSubscriptionService,
                { provide: HOOK_ACTION_BAR, useClass: ImpactActionFactory, multi: true }
            ],
            entryComponents: [RefreshActionComponent]
        })
    ], ImpactProtocolModule);
    return ImpactProtocolModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ImpactActionFactory, ImpactProtocolModule, ImpactSubscriptionService, RefreshActionComponent };
//# sourceMappingURL=c8y-ngx-components-protocol-impact.js.map
