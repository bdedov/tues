import { __extends, __decorate, __param, __awaiter, __generator, __assign } from 'tslib';
import { ElementRef, Injector, Input, Directive, ViewChild, forwardRef, Component, Inject, Injectable, EventEmitter, Output, NgModule } from '@angular/core';
import { QueriesUtil, InventoryService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { cloneDeep, get, map, sortBy, remove, transform, identity, assign, forEach } from 'lodash-es';
import { FilteringFormRendererContext, CellRendererContext, gettext, SendStatus, PushStatus, FilteringActionType, DataGridComponent, CommonModule, FormsModule, DeviceStatusModule, DataGridModule } from '@c8y/ngx-components';
import { UpgradeComponent } from '@angular/upgrade/static';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';

// TODO: MTM-31785: find replacement for schema-form ng1 library
var SchemaFormComponent = /** @class */ (function (_super) {
    __extends(SchemaFormComponent, _super);
    function SchemaFormComponent(elementRef, injector) {
        return _super.call(this, 'c8ySchemaForm', elementRef, injector) || this;
    }
    SchemaFormComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], SchemaFormComponent.prototype, "schema", void 0);
    __decorate([
        Input()
    ], SchemaFormComponent.prototype, "model", void 0);
    __decorate([
        Input('form')
    ], SchemaFormComponent.prototype, "inputForm", void 0);
    __decorate([
        Input('options')
    ], SchemaFormComponent.prototype, "inputOptions", void 0);
    SchemaFormComponent = __decorate([
        Directive({
            selector: 'c8y-schema-form'
        })
    ], SchemaFormComponent);
    return SchemaFormComponent;
}(UpgradeComponent));

var BaseFilteringFormRendererComponent = /** @class */ (function () {
    function BaseFilteringFormRendererComponent(context) {
        this.context = context;
    }
    BaseFilteringFormRendererComponent.prototype.ngOnInit = function () {
        var column = this.context.property;
        this.schema = cloneDeep(column.filteringConfig.schema);
        this.form = cloneDeep(column.filteringConfig.form);
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    };
    BaseFilteringFormRendererComponent.prototype.canApply = function () {
        return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
    };
    BaseFilteringFormRendererComponent.prototype.applyFilter = function () {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    };
    BaseFilteringFormRendererComponent.prototype.resetFilter = function () {
        this.context.resetFilter();
    };
    BaseFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: FilteringFormRendererContext }
    ]; };
    __decorate([
        ViewChild(forwardRef(function () { return SchemaFormComponent; }), { static: false })
    ], BaseFilteringFormRendererComponent.prototype, "schemaFormComponent", void 0);
    BaseFilteringFormRendererComponent = __decorate([
        Component({
            template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
        })
    ], BaseFilteringFormRendererComponent);
    return BaseFilteringFormRendererComponent;
}());

var BaseDeviceGridColumn = /** @class */ (function () {
    function BaseDeviceGridColumn() {
        this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;
    }
    return BaseDeviceGridColumn;
}());

var AlarmsCellRendererComponent = /** @class */ (function () {
    function AlarmsCellRendererComponent(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
    AlarmsCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(function () { return DeviceGridService; }),] }] }
    ]; };
    AlarmsCellRendererComponent = __decorate([
        Component({
            template: "<a [href]=\"deviceGridService.getAlarmsHref(context.item)\" class=\"listLink\">\n  <small\n    class=\"status critical\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.critical\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.critical }} <i [c8yIcon]=\"'warning'\"></i>\n  </small>\n  <small\n    class=\"status major\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.major\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.major }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status minor\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.minor\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.minor }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status warning\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.warning\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.warning }} <i [c8yIcon]=\"'circle'\"></i>\n  </small>\n</a>\n"
        }),
        __param(1, Inject(forwardRef(function () { return DeviceGridService; })))
    ], AlarmsCellRendererComponent);
    return AlarmsCellRendererComponent;
}());

var AlarmsDeviceGridColumn = /** @class */ (function (_super) {
    __extends(AlarmsDeviceGridColumn, _super);
    function AlarmsDeviceGridColumn() {
        var _this = _super.call(this) || this;
        _this.name = 'alarms';
        _this.header = gettext('Alarms');
        _this.cellRendererComponent = AlarmsCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    critical: {
                        type: 'boolean'
                    },
                    major: {
                        type: 'boolean'
                    },
                    minor: {
                        type: 'boolean'
                    },
                    warning: {
                        type: 'boolean'
                    },
                    none: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with active') + "</span>:</label>"
                },
                {
                    key: 'critical',
                    title: gettext('Critical alarms')
                },
                {
                    key: 'major',
                    title: gettext('Major alarms')
                },
                {
                    key: 'minor',
                    title: gettext('Minor alarms')
                },
                {
                    key: 'warning',
                    title: gettext('Warnings')
                },
                {
                    key: 'none',
                    title: gettext('No alarms')
                }
            ],
            getFilter: function (model) {
                var filter = {};
                var ors = [];
                if (model.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], function (sev) {
                            var zero = {};
                            var has = { __not: { __has: undefined } };
                            var key = "c8y_ActiveAlarmsStatus." + sev;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
        return _this;
    }
    return AlarmsDeviceGridColumn;
}(BaseDeviceGridColumn));

var GroupCellRendererComponent = /** @class */ (function () {
    function GroupCellRendererComponent(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
    GroupCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(function () { return DeviceGridService; }),] }] }
    ]; };
    GroupCellRendererComponent = __decorate([
        Component({
            template: "<span\n  title=\"{{\n    deviceGridService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n  class=\"text-truncate\"\n>\n  {{\n    deviceGridService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n"
        }),
        __param(1, Inject(forwardRef(function () { return DeviceGridService; })))
    ], GroupCellRendererComponent);
    return GroupCellRendererComponent;
}());

var GroupFilteringFormRendererComponent = /** @class */ (function () {
    function GroupFilteringFormRendererComponent(context) {
        this.context = context;
        this.preselected = [];
    }
    GroupFilteringFormRendererComponent.prototype.ngOnInit = function () {
        var column = this.context.property;
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.preselected = this.model.selectedNodes || [];
    };
    GroupFilteringFormRendererComponent.prototype.applyFilter = function () {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    };
    GroupFilteringFormRendererComponent.prototype.resetFilter = function () {
        this.context.resetFilter();
    };
    GroupFilteringFormRendererComponent.prototype.selectionChanged = function (nodes) {
        this.model.selectedNodes = nodes;
    };
    GroupFilteringFormRendererComponent.ctorParameters = function () { return [
        { type: FilteringFormRendererContext }
    ]; };
    GroupFilteringFormRendererComponent = __decorate([
        Component({
            template: "<c8y-asset-selector\n  [selected]=\"preselected\"\n  (onChange)=\"selectionChanged($event)\"\n></c8y-asset-selector>\n\n<div class=\"data-grid__dropdown__footer d-flex separator-top\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
        })
    ], GroupFilteringFormRendererComponent);
    return GroupFilteringFormRendererComponent;
}());

var GroupDeviceGridColumn = /** @class */ (function (_super) {
    __extends(GroupDeviceGridColumn, _super);
    function GroupDeviceGridColumn() {
        var _this = _super.call(this) || this;
        _this.name = 'group';
        _this.header = gettext('Group');
        _this.cellRendererComponent = GroupCellRendererComponent;
        _this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            getFilter: function (model) {
                var filter = {};
                if (model.selectedNodes) {
                    filter.__or = model.selectedNodes.map(function (mo) {
                        if (mo.c8y_DeviceQueryString) {
                            return { __useFilterQueryString: mo.c8y_DeviceQueryString };
                        }
                        return { __bygroupid: mo.id };
                    });
                }
                return filter;
            }
        };
        _this.sortable = false;
        return _this;
    }
    return GroupDeviceGridColumn;
}(BaseDeviceGridColumn));

var ImeiDeviceGridColumn = /** @class */ (function (_super) {
    __extends(ImeiDeviceGridColumn, _super);
    function ImeiDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var self = _this;
        _this.path = 'c8y_Mobile.imei';
        _this.name = 'imei';
        _this.header = gettext('IMEI');
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    imeis: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'imeis',
                    title: gettext('Show devices with IMEI'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'imeis[]',
                            notitle: true,
                            placeholder: gettext('e.g. 46543432321, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.imeis.length) {
                    filter[self.path] = { __in: model.imeis };
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path }]
        };
        return _this;
    }
    return ImeiDeviceGridColumn;
}(BaseDeviceGridColumn));

var ModelCellRendererComponent = /** @class */ (function () {
    function ModelCellRendererComponent(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
    ModelCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(function () { return DeviceGridService; }),] }] }
    ]; };
    ModelCellRendererComponent = __decorate([
        Component({
            template: "\n    {{ deviceGridService.getModel(context.item) }}\n  "
        }),
        __param(1, Inject(forwardRef(function () { return DeviceGridService; })))
    ], ModelCellRendererComponent);
    return ModelCellRendererComponent;
}());

var ModelDeviceGridColumn = /** @class */ (function (_super) {
    __extends(ModelDeviceGridColumn, _super);
    function ModelDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var hardwareModelPath = 'c8y_Hardware.model';
        var vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
        _this.name = 'model';
        _this.header = gettext('Model');
        _this.cellRendererComponent = ModelCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    models: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'models',
                    title: gettext('Show devices with model'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'models[]',
                            notitle: true,
                            placeholder: gettext('e.g. ModelName, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.models.length) {
                    filter.__or = (_a = {},
                        _a[hardwareModelPath] = { __in: model.models },
                        _a[vendingModelPath] = { __in: model.models },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
        };
        return _this;
    }
    return ModelDeviceGridColumn;
}(BaseDeviceGridColumn));

var NameCellRendererComponent = /** @class */ (function () {
    function NameCellRendererComponent(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
    NameCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(function () { return DeviceGridService; }),] }] }
    ]; };
    NameCellRendererComponent = __decorate([
        Component({
            template: "\n    <a\n      [href]=\"deviceGridService.getDeviceHref(context.item)\"\n      title=\"{{ deviceGridService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ deviceGridService.getProperName(context.item) }}\n    </a>\n  "
        }),
        __param(1, Inject(forwardRef(function () { return DeviceGridService; })))
    ], NameCellRendererComponent);
    return NameCellRendererComponent;
}());

var NameDeviceGridColumn = /** @class */ (function (_super) {
    __extends(NameDeviceGridColumn, _super);
    function NameDeviceGridColumn() {
        var _this = _super.call(this) || this;
        _this.name = 'name';
        _this.path = 'name';
        _this.header = gettext('Name');
        _this.cellCSSClassName = "data-record-header" /* Header */;
        _this.cellRendererComponent = NameCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    names: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'names',
                    title: gettext('Show devices with name'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'names[]',
                            notitle: true,
                            placeholder: gettext('e.g. My Device, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.names.length) {
                    filter.name = { __in: model.names };
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path }]
        };
        return _this;
    }
    return NameDeviceGridColumn;
}(BaseDeviceGridColumn));

var RegistrationDateCellRendererComponent = /** @class */ (function () {
    function RegistrationDateCellRendererComponent(context) {
        this.context = context;
    }
    RegistrationDateCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext }
    ]; };
    RegistrationDateCellRendererComponent = __decorate([
        Component({
            template: "\n    {{ context.value | c8yDate }}\n  "
        })
    ], RegistrationDateCellRendererComponent);
    return RegistrationDateCellRendererComponent;
}());

var RegistrationDateDeviceGridColumn = /** @class */ (function (_super) {
    __extends(RegistrationDateDeviceGridColumn, _super);
    function RegistrationDateDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var self = _this;
        _this.path = 'creationTime';
        _this.name = 'registrationDate';
        _this.header = gettext('Registration date');
        _this.cellRendererComponent = RegistrationDateCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    registrationDate: {
                        type: 'object',
                        properties: {
                            after: {
                                type: 'string',
                                format: 'datetime'
                            },
                            before: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            form: [
                {
                    key: 'registrationDate.after',
                    title: gettext('Show devices registered after'),
                    maxDateKey: 'registrationDate.before'
                },
                {
                    key: 'registrationDate.before',
                    title: gettext('And before`date`'),
                    minDateKey: 'registrationDate.after'
                }
            ],
            getFilter: function (model) {
                var _a, _b;
                var filter = {};
                var dates = model && model.registrationDate;
                if (dates && (dates.after || dates.before)) {
                    filter.__and = [];
                    if (dates.after) {
                        var after = self.formatDate(dates.after);
                        filter.__and.push({
                            __or: (_a = {},
                                _a[self.path] = { __gt: after },
                                _a[self.path + ".date"] = { __gt: after },
                                _a)
                        });
                    }
                    if (dates.before) {
                        var before = self.formatDate(dates.before);
                        filter.__and.push({
                            __or: (_b = {},
                                _b[self.path] = { __lt: before },
                                _b[self.path + ".date"] = { __lt: before },
                                _b)
                        });
                    }
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path + ".date" }, { path: _this.path }]
        };
        return _this;
    }
    RegistrationDateDeviceGridColumn.prototype.formatDate = function (dateToFormat) {
        return new Date(dateToFormat).toISOString();
    };
    return RegistrationDateDeviceGridColumn;
}(BaseDeviceGridColumn));

var SerialNumberCellRendererComponent = /** @class */ (function () {
    function SerialNumberCellRendererComponent(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
    SerialNumberCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(function () { return DeviceGridService; }),] }] }
    ]; };
    SerialNumberCellRendererComponent = __decorate([
        Component({
            template: "\n    {{ deviceGridService.getSerialNumber(context.item) }}\n  "
        }),
        __param(1, Inject(forwardRef(function () { return DeviceGridService; })))
    ], SerialNumberCellRendererComponent);
    return SerialNumberCellRendererComponent;
}());

var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
    __extends(SerialNumberDeviceGridColumn, _super);
    function SerialNumberDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        _this.name = 'serialNumber';
        _this.header = gettext('Serial number');
        _this.cellRendererComponent = SerialNumberCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'serialNumbers',
                    title: gettext('Show devices with serial number'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = (_a = {},
                        _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                        _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
        return _this;
    }
    return SerialNumberDeviceGridColumn;
}(BaseDeviceGridColumn));

var StatusCellRendererComponent = /** @class */ (function () {
    function StatusCellRendererComponent(context) {
        this.context = context;
    }
    StatusCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext }
    ]; };
    StatusCellRendererComponent = __decorate([
        Component({
            template: "\n    <device-status [mo]=\"context.item\"></device-status>\n  "
        })
    ], StatusCellRendererComponent);
    return StatusCellRendererComponent;
}());

var StatusDeviceGridColumn = /** @class */ (function (_super) {
    __extends(StatusDeviceGridColumn, _super);
    function StatusDeviceGridColumn() {
        var _a, _b, _c, _d, _e, _f, _g;
        var _this = _super.call(this) || this;
        var responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';
        var responseIntervalLessThanOrEqualTo0 = (_a = {}, _a[responseIntervalPath] = { __le: 0 }, _a);
        var responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };
        var availabilityStatusPath = 'c8y_Availability.status';
        var availabilityStatusAvailable = (_b = {}, _b[availabilityStatusPath] = SendStatus.AVAILABLE, _b);
        var availabilityStatusUnavailable = (_c = {}, _c[availabilityStatusPath] = SendStatus.UNAVAILABLE, _c);
        var availabilityStatusMaintenance = (_d = {}, _d[availabilityStatusPath] = SendStatus.MAINTENANCE, _d);
        var availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };
        var connectionStatusPath = 'c8y_Connection.status';
        var connectionStatusConnected = (_e = {}, _e[connectionStatusPath] = PushStatus.CONNECTED, _e);
        var connectionStatusDisconnected = (_f = {}, _f[connectionStatusPath] = PushStatus.DISCONNECTED, _f);
        var connectionStatusMaintenance = (_g = {}, _g[connectionStatusPath] = PushStatus.MAINTENANCE, _g);
        var deviceUnderMaintenance = {
            __or: [
                responseIntervalLessThanOrEqualTo0,
                availabilityStatusMaintenance,
                connectionStatusMaintenance
            ]
        };
        var deviceNotUnderMaintenance = {
            // using __and of __nots because backend does not support __not with __ors
            __and: [
                { __not: responseIntervalLessThanOrEqualTo0 },
                { __not: availabilityStatusMaintenance },
                { __not: connectionStatusMaintenance }
            ]
        };
        _this.name = 'status';
        _this.header = gettext('Status');
        _this.dataType = "icon" /* Icon */;
        _this.cellRendererComponent = StatusCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendOnline: {
                        type: 'boolean'
                    },
                    sendOffline: {
                        type: 'boolean'
                    },
                    sendUnknown: {
                        type: 'boolean'
                    },
                    sendNotMonitored: {
                        type: 'boolean'
                    },
                    pushOnline: {
                        type: 'boolean'
                    },
                    pushOffline: {
                        type: 'boolean'
                    },
                    pushNotMonitored: {
                        type: 'boolean'
                    },
                    maintenance: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with send status') + "</span>:</label>"
                },
                {
                    key: 'sendOnline',
                    title: gettext('Online')
                },
                {
                    key: 'sendOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'sendUnknown',
                    title: gettext('Unknown')
                },
                {
                    key: 'sendNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with push status') + "</span>:</label>"
                },
                {
                    key: 'pushOnline',
                    title: gettext('Online')
                },
                {
                    key: 'pushOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'pushNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with maintenance status') + "</span>:</label>"
                },
                {
                    key: 'maintenance',
                    title: gettext('Device is under maintenance')
                }
            ],
            getFilter: function (model) {
                var filter = {};
                var ors = [];
                if (model) {
                    if (model.sendOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]
                        });
                    }
                    if (model.sendOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]
                        });
                    }
                    if (model.sendUnknown) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]
                        });
                    }
                    if (model.sendNotMonitored || model.pushNotMonitored) {
                        ors.push(responseIntervalNotDefined);
                    }
                    if (model.pushOnline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusConnected]
                        });
                    }
                    if (model.pushOffline) {
                        ors.push({
                            __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]
                        });
                    }
                    if (model.maintenance) {
                        ors.push(deviceUnderMaintenance);
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
        return _this;
    }
    return StatusDeviceGridColumn;
}(BaseDeviceGridColumn));

var SystemIdDeviceGridColumn = /** @class */ (function (_super) {
    __extends(SystemIdDeviceGridColumn, _super);
    function SystemIdDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var self = _this;
        _this.path = 'id';
        _this.name = 'systemId';
        _this.header = gettext('System ID');
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    ids: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'ids',
                    title: gettext('Show devices with system ID'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'ids[]',
                            notitle: true,
                            placeholder: gettext('e.g. 10300, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.ids.length) {
                    filter[self.path] = { __in: model.ids };
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path }]
        };
        return _this;
    }
    return SystemIdDeviceGridColumn;
}(BaseDeviceGridColumn));

var DeviceGridService = /** @class */ (function () {
    function DeviceGridService(inventoryService, translateService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.queriesUtil = new QueriesUtil();
    }
    DeviceGridService.prototype.getDefaultColumns = function () {
        return [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
    };
    DeviceGridService.prototype.getDefaultPagination = function () {
        return {
            pageSize: 10,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getInfiniteScrollPagination = function () {
        return {
            pageSize: 50,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getDefaultActionControls = function () {
        var _this = this;
        return [
            {
                type: "DELETE" /* Delete */,
                callback: function (item) { return _this.delete(item); }
            }
        ];
    };
    DeviceGridService.prototype.getDefaultBulkActionControls = function () {
        return [];
    };
    DeviceGridService.prototype.getProperName = function (device) {
        var id = device.id, name = device.name;
        return name ? name : this.translateService.instant('Device {{id}}', { id: id });
    };
    DeviceGridService.prototype.getModel = function (device) {
        var hardware = this.getHardware(device);
        return hardware && hardware.model;
    };
    DeviceGridService.prototype.getSerialNumber = function (device) {
        var hardware = this.getHardware(device);
        var serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    };
    DeviceGridService.prototype.getParentsNames = function (device, featuredParentId) {
        var assetParentsReferences = device.assetParents.references;
        var assetParents = map(assetParentsReferences, 'managedObject');
        var sortedByName = sortBy(assetParents, ['name']);
        var featuredItems = remove(sortedByName, { id: featuredParentId });
        var items = featuredItems.concat(sortedByName);
        var names = map(items, 'name');
        return names.join(', ');
    };
    DeviceGridService.prototype.getDeviceHref = function (device) {
        return "#/device/" + device.id;
    };
    DeviceGridService.prototype.getAlarmsHref = function (device) {
        return this.getDeviceHref(device) + "/alarms";
    };
    DeviceGridService.prototype.delete = function (device) {
        console.log('should delete', device);
    };
    DeviceGridService.prototype.getDevices = function (columns, pagination) {
        return __awaiter(this, void 0, void 0, function () {
            var filters;
            return __generator(this, function (_a) {
                filters = __assign({}, this.getDevicesFilters(columns, pagination), { withParents: true });
                return [2 /*return*/, this.inventoryService.list(filters)];
            });
        });
    };
    DeviceGridService.prototype.getDevicesCount = function (columns, pagination) {
        return __awaiter(this, void 0, void 0, function () {
            var filters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = __assign({}, this.getDevicesFilters(columns, pagination), { pageSize: 1, currentPage: 1 });
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getDevicesTotal = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = {
                            q: '',
                            pageSize: 1,
                            withTotalPages: true
                        };
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getDeviceQueryString = function (columns) {
        return this.queriesUtil.buildQuery(this.getQueryObj(columns));
    };
    DeviceGridService.prototype.getHardware = function (device) {
        var hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    };
    DeviceGridService.prototype.isVendme = function (device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    };
    DeviceGridService.prototype.getDevicesFilters = function (columns, pagination) {
        return {
            q: this.getDeviceQueryString(columns),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    };
    DeviceGridService.prototype.getQueryObj = function (columns) {
        var _this = this;
        return transform(columns, function (query, column) { return _this.extendQueryByColumn(query, column); }, {
            __filter: {},
            __orderby: []
        });
    };
    DeviceGridService.prototype.extendQueryByColumn = function (query, column) {
        if (column.filterable && column.externalFilterQuery) {
            var getFilter = column.filteringConfig.getFilter || identity;
            var queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(function (obj) { return query.__filter.__and.push(obj); });
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            var cs_1 = {};
            forEach(column.sortingConfig.pathSortingConfigs, function (pathSortingConfig) {
                cs_1[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs_1);
        }
        return query;
    };
    DeviceGridService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TranslateService }
    ]; };
    DeviceGridService = __decorate([
        Injectable()
    ], DeviceGridService);
    return DeviceGridService;
}());

var DeviceGridComponent = /** @class */ (function () {
    function DeviceGridComponent(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.title = gettext('Devices');
        this.loadMoreItemsLabel = gettext('Load more devices');
        this.loadingItemsLabel = gettext('Loading devices…');
        this.noMatchingItemsLabel = gettext('No matching devices.');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = this.deviceGridService.getDefaultColumns();
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.actionControls = this.deviceGridService.getDefaultActionControls();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    Object.defineProperty(DeviceGridComponent.prototype, "_columns", {
        set: function (value) {
            if (value) {
                this.columns = value;
            }
            else {
                this.columns = this.deviceGridService.getDefaultColumns();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_pagination", {
        set: function (value) {
            if (value) {
                this.pagination = value;
            }
            else {
                this.pagination = this.deviceGridService.getDefaultPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_infiniteScroll", {
        set: function (infiniteScroll) {
            this.infiniteScroll = infiniteScroll;
            this.pagination = this.deviceGridService.getInfiniteScrollPagination();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_actionControls", {
        set: function (value) {
            if (value) {
                this.actionControls = value;
            }
            else {
                this.actionControls = this.deviceGridService.getDefaultActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceGridComponent.prototype, "_bulkActionControls", {
        set: function (value) {
            if (value) {
                this.bulkActionControls = value;
            }
            else {
                this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    DeviceGridComponent.prototype.trackByName = function (_index, column) {
        return column.name;
    };
    DeviceGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, res, data, paging, filteredSize, size;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.deviceGridService.getDevices(dataSourceModifier.columns, dataSourceModifier.pagination)];
                    case 1:
                        _a = _b.sent(), res = _a.res, data = _a.data, paging = _a.paging;
                        return [4 /*yield*/, this.deviceGridService.getDevicesCount(dataSourceModifier.columns, dataSourceModifier.pagination)];
                    case 2:
                        filteredSize = _b.sent();
                        return [4 /*yield*/, this.deviceGridService.getDevicesTotal()];
                    case 3:
                        size = _b.sent();
                        this.onColumnsChange.emit(dataSourceModifier.columns);
                        this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns));
                        return [2 /*return*/, {
                                res: res,
                                data: data,
                                paging: paging,
                                filteredSize: filteredSize,
                                size: size
                            }];
                }
            });
        });
    };
    DeviceGridComponent.prototype.updateFiltering = function (columnNames, action) {
        var type = action.type;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    };
    DeviceGridComponent.ctorParameters = function () { return [
        { type: DeviceGridService }
    ]; };
    __decorate([
        Input()
    ], DeviceGridComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], DeviceGridComponent.prototype, "loadMoreItemsLabel", void 0);
    __decorate([
        Input()
    ], DeviceGridComponent.prototype, "loadingItemsLabel", void 0);
    __decorate([
        Input()
    ], DeviceGridComponent.prototype, "noMatchingItemsLabel", void 0);
    __decorate([
        Input('columns')
    ], DeviceGridComponent.prototype, "_columns", null);
    __decorate([
        Input('pagination')
    ], DeviceGridComponent.prototype, "_pagination", null);
    __decorate([
        Input('infiniteScroll')
    ], DeviceGridComponent.prototype, "_infiniteScroll", null);
    __decorate([
        Input('actionControls')
    ], DeviceGridComponent.prototype, "_actionControls", null);
    __decorate([
        Input()
    ], DeviceGridComponent.prototype, "selectable", void 0);
    __decorate([
        Input('bulkActionControls')
    ], DeviceGridComponent.prototype, "_bulkActionControls", null);
    __decorate([
        Output()
    ], DeviceGridComponent.prototype, "onColumnsChange", void 0);
    __decorate([
        Output()
    ], DeviceGridComponent.prototype, "onDeviceQueryStringChange", void 0);
    __decorate([
        ViewChild(DataGridComponent, { static: true })
    ], DeviceGridComponent.prototype, "dataGrid", void 0);
    DeviceGridComponent = __decorate([
        Component({
            selector: 'c8y-device-grid',
            template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadMoreItemsLabel]=\"loadMoreItemsLabel\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [noMatchingItemsLabel]=\"noMatchingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [infiniteScroll]=\"infiniteScroll\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
        })
    ], DeviceGridComponent);
    return DeviceGridComponent;
}());

var DeviceGridModule = /** @class */ (function () {
    function DeviceGridModule() {
    }
    DeviceGridModule = __decorate([
        NgModule({
            imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],
            declarations: [
                DeviceGridComponent,
                BaseFilteringFormRendererComponent,
                GroupFilteringFormRendererComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent,
                SchemaFormComponent
            ],
            exports: [
                DeviceGridComponent,
                BaseFilteringFormRendererComponent,
                GroupFilteringFormRendererComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent,
                SchemaFormComponent
            ],
            entryComponents: [
                DeviceGridComponent,
                BaseFilteringFormRendererComponent,
                GroupFilteringFormRendererComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent
            ],
            providers: [DeviceGridService]
        })
    ], DeviceGridModule);
    return DeviceGridModule;
}());

var CustomDeviceGridColumn = /** @class */ (function (_super) {
    __extends(CustomDeviceGridColumn, _super);
    function CustomDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var self = _this;
        _this.name = 'custom';
        _this.header = gettext('Custom');
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    exists: {
                        type: 'boolean',
                        default: false,
                        title: gettext('Only rows where value is defined')
                    },
                    equals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'exists'
                },
                {
                    key: 'equals',
                    title: gettext('Only rows where value equals to:'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'equals[]',
                            notitle: true,
                            placeholder: gettext('e.g. value, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.exists) {
                    filter.__has = self.path;
                }
                if (model.equals) {
                    filter[self.path] = { __in: model.equals };
                }
                return filter;
            }
        };
        _this.sortable = true;
        return _this;
    }
    Object.defineProperty(CustomDeviceGridColumn.prototype, "sortingConfig", {
        get: function () {
            return {
                pathSortingConfigs: [{ path: this.path }]
            };
        },
        enumerable: true,
        configurable: true
    });
    return CustomDeviceGridColumn;
}(BaseDeviceGridColumn));

var TypeDeviceGridColumn = /** @class */ (function (_super) {
    __extends(TypeDeviceGridColumn, _super);
    function TypeDeviceGridColumn() {
        var _this = _super.call(this) || this;
        _this.name = 'type';
        _this.path = 'type';
        _this.header = gettext('Type');
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    types: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'types',
                    title: gettext('Show devices with type'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'types[]',
                            notitle: true,
                            placeholder: gettext('e.g. MyType, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.types.length) {
                    filter.type = { __in: model.types };
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };
        return _this;
    }
    return TypeDeviceGridColumn;
}(BaseDeviceGridColumn));

/**
 * Generated bundle index. Do not edit.
 */

export { AlarmsCellRendererComponent, AlarmsDeviceGridColumn, BaseDeviceGridColumn, BaseFilteringFormRendererComponent, CustomDeviceGridColumn, DeviceGridComponent, DeviceGridModule, DeviceGridService, GroupCellRendererComponent, GroupDeviceGridColumn, GroupFilteringFormRendererComponent, ImeiDeviceGridColumn, ModelCellRendererComponent, ModelDeviceGridColumn, NameCellRendererComponent, NameDeviceGridColumn, RegistrationDateCellRendererComponent, RegistrationDateDeviceGridColumn, SchemaFormComponent, SerialNumberCellRendererComponent, SerialNumberDeviceGridColumn, StatusCellRendererComponent, StatusDeviceGridColumn, SystemIdDeviceGridColumn, TypeDeviceGridColumn, BaseFilteringFormRendererComponent as ɵa, GroupFilteringFormRendererComponent as ɵb, StatusCellRendererComponent as ɵc, NameCellRendererComponent as ɵd, ModelCellRendererComponent as ɵe, SerialNumberCellRendererComponent as ɵf, GroupCellRendererComponent as ɵg, RegistrationDateCellRendererComponent as ɵh, AlarmsCellRendererComponent as ɵi };
//# sourceMappingURL=c8y-ngx-components-device-grid.js.map
