import { __awaiter, __generator, __assign, __decorate } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { FetchClient, BasicAuth, CookieAuth, Realtime, EventBinaryService, EventService, InventoryService, MeasurementService, AlarmService, OperationBulkService, OperationService, ApplicationService, UserService, TenantService, SystemOptionsService, TenantOptionsService, TenantSecurityOptionsService, TenantLoginOptionsService, AuditService, InventoryRoleService, InventoryBinaryService, DeviceRegistrationService, DeviceRegistrationBulkService, UserRoleService, UserGroupService, IdentityService, TrustedCertificateService } from '@c8y/client';
export { AlarmService, ApplicationService, AuditService, BasicAuth, CookieAuth, DeviceRegistrationBulkService, DeviceRegistrationService, EventBinaryService, EventService, FetchClient, IdentityService, InventoryBinaryService, InventoryRoleService, InventoryService, MeasurementService, OperationBulkService, OperationService, Realtime, SystemOptionsService, TenantLoginOptionsService, TenantOptionsService, TenantSecurityOptionsService, TenantService, TrustedCertificateService, UserGroupService, UserRoleService, UserService } from '@c8y/client';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';

var ApiService = /** @class */ (function () {
    function ApiService(client) {
        this.client = client;
        this.callsSubject = new Subject();
        this.calls = this.callsSubject.asObservable();
        this.hookIntoClientFetch();
    }
    ApiService.prototype.hookResponse = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'finish';
        }), filter(hookFilter));
    };
    ApiService.prototype.hookRequest = function (hookFilter) {
        return this.callsSubject.pipe(filter(function (_a) {
            var phase = _a.phase;
            return phase === 'start';
        }), filter(hookFilter));
    };
    ApiService.prototype.onFinish = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.callsSubject.next(__assign({ phase: 'finish' }, call));
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.onStart = function (call) {
        this.callsSubject.next(__assign({ phase: 'start' }, call));
    };
    ApiService.prototype.resolveData = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            var response, method, cb;
            return __generator(this, function (_a) {
                response = call.response, method = call.method;
                if ('data' in response) {
                    return [2 /*return*/, Promise.resolve({ data: response.data, method: method })];
                }
                else {
                    cb = function (data) { return ({ data: data, method: method }); };
                    return [2 /*return*/, response.clone().json().then(cb, cb)];
                }
                return [2 /*return*/];
            });
        });
    };
    ApiService.prototype.hookIntoClientFetch = function () {
        var _this = this;
        var fetch = this.client.fetch.bind(this.client);
        this.client.fetch = function (url, options) {
            if (options === void 0) { options = { method: 'GET' }; }
            return __awaiter(_this, void 0, void 0, function () {
                var method, fetchPromise;
                var _this = this;
                return __generator(this, function (_a) {
                    method = options.method;
                    this.onStart({ options: options, method: method, url: url });
                    fetchPromise = fetch(url, options);
                    if (typeof options.responseInterceptor === 'function') {
                        fetchPromise = fetchPromise.then(options.responseInterceptor);
                    }
                    fetchPromise.then(function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); }, function (response) { return _this.onFinish({ response: response, url: url, options: options, method: method }); });
                    return [2 /*return*/, fetchPromise];
                });
            });
        };
    };
    ApiService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    ApiService = __decorate([
        Injectable()
    ], ApiService);
    return ApiService;
}());



var services = /*#__PURE__*/Object.freeze({
    __proto__: null,
    FetchClient: FetchClient,
    BasicAuth: BasicAuth,
    CookieAuth: CookieAuth,
    Realtime: Realtime,
    EventBinaryService: EventBinaryService,
    EventService: EventService,
    InventoryService: InventoryService,
    MeasurementService: MeasurementService,
    AlarmService: AlarmService,
    OperationBulkService: OperationBulkService,
    OperationService: OperationService,
    ApplicationService: ApplicationService,
    UserService: UserService,
    TenantService: TenantService,
    SystemOptionsService: SystemOptionsService,
    TenantOptionsService: TenantOptionsService,
    TenantSecurityOptionsService: TenantSecurityOptionsService,
    TenantLoginOptionsService: TenantLoginOptionsService,
    AuditService: AuditService,
    InventoryRoleService: InventoryRoleService,
    InventoryBinaryService: InventoryBinaryService,
    DeviceRegistrationService: DeviceRegistrationService,
    DeviceRegistrationBulkService: DeviceRegistrationBulkService,
    UserRoleService: UserRoleService,
    UserGroupService: UserGroupService,
    IdentityService: IdentityService,
    TrustedCertificateService: TrustedCertificateService
});

function toProvider(provide) {
    var deps = [FetchClient, Realtime];
    if (provide === FetchClient) {
        deps = [CookieAuth];
    }
    if (provide === BasicAuth || provide === CookieAuth) {
        deps = [];
    }
    if (provide === Realtime) {
        deps = [FetchClient];
    }
    return { provide: provide, useClass: provide, deps: deps };
}
var ɵ0 = function (k) { return toProvider(services[k]); };
var providers = Object.keys(services).map(ɵ0)
    .concat([
    { provide: ApiService, useClass: ApiService, deps: [FetchClient] }
]);
// @dynamic
var DataModule = /** @class */ (function () {
    function DataModule() {
    }
    DataModule_1 = DataModule;
    DataModule.providers = function () {
        return providers;
    };
    DataModule.forRoot = function () {
        return {
            ngModule: DataModule_1,
            providers: providers
        };
    };
    var DataModule_1;
    DataModule = DataModule_1 = __decorate([
        NgModule()
    ], DataModule);
    return DataModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ApiService, DataModule, ɵ0 };
//# sourceMappingURL=c8y-ngx-components-api.js.map
