{"version":3,"file":"c8y-ngx-components-sms-gateway.js","sources":["ng://@c8y/ngx-components/sms-gateway/pattern-messages.data.ts","ng://@c8y/ngx-components/sms-gateway/sms-gateway.guard.ts","ng://@c8y/ngx-components/sms-gateway/sms-gateway.module.ts","ng://@c8y/ngx-components/sms-gateway/c8y-ngx-components-sms-gateway.ts"],"sourcesContent":["import { gettext } from '@c8y/ngx-components';\n\nexport const MESSAGES = {\n  '^Sender name$': {\n    gettext: gettext('Sender name')\n  },\n  '^Sender name used for sent SMS$': {\n    gettext: gettext('Sender name used for sent SMS')\n  },\n  '^Sender address$': {\n    gettext: gettext('Sender address')\n  },\n  '^Sender address used for sent SMS$': {\n    gettext: gettext('Sender address used for sent SMS')\n  },\n  '^Username$': {\n    gettext: gettext('Username')\n  },\n  '^Password$': {\n    gettext: gettext('Password')\n  },\n  '^Licence key$': {\n    gettext: gettext('License key')\n  },\n  '^Key$': {\n    gettext: gettext('Key')\n  },\n  '^API base URL$': {\n    gettext: gettext('API base URL')\n  },\n  '^API URL$': {\n    gettext: gettext('API URL')\n  },\n  '^oauth$': {\n    gettext: gettext('OAuth')\n  },\n  '^basic$': {\n    gettext: gettext('Basic')\n  },\n  '^Authentication method$': {\n    gettext: gettext('Authentication method')\n  },\n  '^Defines which authentication method is used with the provider$': {\n    gettext: gettext('Defines which authentication method is used with the provider')\n  },\n  '^Static headers$': {\n    gettext: gettext('Static headers')\n  },\n  '^Static headers that should be added to requests towards the provider$': {\n    gettext: gettext('Static headers that should be added to requests towards the provider')\n  },\n  '^OAuth token URL$': {\n    gettext: gettext('OAuth token URL')\n  },\n  '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {\n    gettext: gettext(\n      'URL where the OAuth token is requested from (required if OAuth method is chosen)'\n    )\n  },\n  '^OAuth toke mime type$': {\n    gettext: gettext('OAuth token mime type')\n  },\n  '^Overrides the OAuth token response mime type$': {\n    gettext: gettext('Overrides the OAuth token response mime type')\n  },\n  '^OAuth access toke type$': {\n    gettext: gettext('OAuth access token type')\n  },\n  '^Overrides the OAuth access token type$': {\n    gettext: gettext('Overrides the OAuth access token type')\n  },\n  '^Global configuration$': {\n    gettext: gettext('Global configuration')\n  },\n  '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {\n    gettext: gettext(\n      'Enables or disables the settings globally for all tenants (only possible in management tenant)'\n    )\n  },\n  '^API key$': {\n    gettext: gettext('API key')\n  },\n  '^Inherit to subtenants$': {\n    gettext: gettext('Inherit to subtenants')\n  },\n  \"^Enables or disables if this tenant's configuration may be inherited to subtenants$\": {\n    gettext: gettext(\n      'Enables or disables the option to inherit the tenant configuration to subtenants'\n    )\n  },\n  '^Login$': {\n    gettext: gettext('Login')\n  },\n  '^Source business unit ID$': {\n    gettext: gettext('Source business unit ID')\n  },\n  '^Client ID$': {\n    gettext: gettext('Client ID')\n  },\n  '^Client secret$': {\n    gettext: gettext('Client secret')\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SmsGatewayGuard implements CanActivate {\n  private static readonly applicationName = 'sms-gateway';\n  private showSMSProvider: Promise<boolean>;\n\n  constructor(private permissions: Permissions, private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSMSProvider === undefined) {\n      const hasRole: Promise<boolean> = Promise.resolve(this.permissions.hasRole('ROLE_SMS_READ'));\n\n      this.showSMSProvider = hasRole.then(\n        (hasPermissions: boolean) =>\n          hasPermissions &&\n          this.applicationService\n            .isAvailable(SmsGatewayGuard.applicationName)\n            .then(result => result && result.data)\n      );\n    }\n\n    return this.showSMSProvider;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { gettext, HOOK_PATTERN_MESSAGES, ProviderConfigurationModule } from '@c8y/ngx-components';\nimport { MESSAGES } from './pattern-messages.data';\nimport { SmsGatewayGuard } from './sms-gateway.guard';\n\n@NgModule({\n  imports: [\n    ProviderConfigurationModule.config([\n      {\n        navigation: {\n          label: gettext('SMS provider'),\n          path: 'smsgateway',\n          icon: 'envelope-o',\n          parent: gettext('Settings'),\n          priority: 1000,\n          canActivate: [SmsGatewayGuard]\n        },\n        layout: {\n          pageTitle: gettext('SMS provider'),\n          cardTitle: gettext('Credentials'),\n          description: gettext(\n            'Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'\n          ),\n          providerName: gettext('SMS provider'),\n          providerNamePlaceholder: gettext('Select or type to filter providers'),\n          providerNameNoMatchesHint: gettext('Select one of the existing providers.'),\n          deleteRoles: ['ROLE_SMS_ADMIN'],\n          deleteBtnLabel: gettext('Delete'),\n          saveRoles: ['ROLE_SMS_ADMIN'],\n          saveBtnLabel: gettext('Save'),\n          configurationUpdatedSuccessMsg: gettext('Credentials updated.'),\n          deleteConfigurationModalTitle: gettext('Delete credentials'),\n          deleteConfigurationModalBody: gettext(\n            `You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?`\n          ),\n          deleteConfigurationModalOkBtnLabel: gettext('Delete'),\n          configurationDeletedSuccessMsg: gettext('Credentials deleted.')\n        },\n        endpoint: {\n          definitionsEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'definitions'\n          },\n          configurationEndpoint: {\n            baseUrl: 'service/messaging/providers',\n            listUrl: 'configuration'\n          }\n        }\n      }\n    ])\n  ],\n  providers: [SmsGatewayGuard, { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true }]\n})\nexport class SmsGatewayModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}