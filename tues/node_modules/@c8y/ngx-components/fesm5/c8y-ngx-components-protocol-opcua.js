import { __decorate, __awaiter, __generator, __extends, __read, __param } from 'tslib';
import { Input, Component, Injectable, EventEmitter, Output, ElementRef, Directive, forwardRef, Injector, ViewChild, ChangeDetectorRef, ViewChildren, Optional, NgModule } from '@angular/core';
import { ControlContainer, NgModelGroup, NG_VALIDATORS, NgForm, ReactiveFormsModule } from '@angular/forms';
import { get, omit, isEmpty, some, isEqual, assign, cloneDeep, unset, set, has } from 'lodash-es';
import { FetchClient, InventoryService } from '@c8y/client';
import { BehaviorSubject, merge } from 'rxjs';
import { Router, RouterModule } from '@angular/router';
import { AlertService, gettext, AppStateService, DropAreaComponent, ContextRouteComponent, ViewContext, CoreModule, FormsModule, DropAreaModule, DeviceStatusModule, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { UpgradeComponent, downgradeComponent } from '@angular/upgrade/static';
import { NestedTreeControl, CdkTreeModule } from '@angular/cdk/tree';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { get as get$1, find, assign as assign$1, findIndex, omit as omit$1, pick, toInteger, unset as unset$1, set as set$1, clone } from 'lodash';
import { TranslateService } from '@ngx-translate/core';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { map } from 'rxjs/operators';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { module } from 'angular';
import { registerNgModule } from '@c8y/ng1-modules/core/bootstrap';

var OpcuaDeviceProtocolMappingCustomAction = /** @class */ (function () {
    function OpcuaDeviceProtocolMappingCustomAction() {
        this.hasCustomAction = false;
        // no translation needed
        this.placeholders = '${value}, ${serverId}, ${nodeId}, ${deviceId}';
    }
    OpcuaDeviceProtocolMappingCustomAction.prototype.getHeaderPair = function () {
        return { key: '', value: '' };
    };
    Object.defineProperty(OpcuaDeviceProtocolMappingCustomAction.prototype, "headers", {
        get: function () {
            return this.customAction.headers;
        },
        enumerable: true,
        configurable: true
    });
    OpcuaDeviceProtocolMappingCustomAction.prototype.addHeader = function () {
        var headers = this.customAction.headers;
        headers.push(this.getHeaderPair());
    };
    OpcuaDeviceProtocolMappingCustomAction.prototype.updateCustomAction = function () {
        this.hasCustomAction = !this.hasCustomAction;
    };
    OpcuaDeviceProtocolMappingCustomAction.prototype.removeCustomAction = function (index) {
        var headers = this.customAction.headers;
        headers.splice(index, 1);
    };
    OpcuaDeviceProtocolMappingCustomAction.prototype.trackByIndex = function (index) {
        return index;
    };
    OpcuaDeviceProtocolMappingCustomAction.prototype.ngOnInit = function () {
        if (get(this.customAction, 'endpoint')) {
            this.hasCustomAction = true;
        }
    };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolMappingCustomAction.prototype, "customAction", void 0);
    OpcuaDeviceProtocolMappingCustomAction = __decorate([
        Component({
            selector: 'opcua-device-protocol-mapping-customaction',
            template: "<div class=\"list-group\" style=\"box-shadow:none;\">\n  <div class=\"list-group-item\">\n    <div class=\"flex-row\">\n      <div class=\"list-item-switch\">\n        <label class=\"c8y-switch\">\n          <input\n            type=\"checkbox\"\n            name=\"hasCustomAction\"\n            [(ngModel)]=\"hasCustomAction\"\n            (click)=\"updateCustomAction()\"\n          />\n          <span></span>\n        </label>\n      </div>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"wrench\"></i>\n      </div>\n      <div class=\"list-item-title\" translate>\n        Custom action\n      </div>\n    </div>\n    <div [collapse]=\"!hasCustomAction\" [isAnimated]=\"true\">\n      <div class=\"top-p-sm\" *ngIf=\"hasCustomAction\">\n        <fieldset ngModelGroup=\"headers\">\n          <div class=\"legend form-block\" translate>Headers</div>\n          <div class=\"tight-grid flex-row hidden-xs\">\n            <div class=\"col-sm-4\">\n              <label translate>Key</label>\n            </div>\n            <div class=\"col-sm-4\">\n              <label translate>Value</label>\n            </div>\n          </div>\n          <div\n            *ngFor=\"let header of headers; trackBy: trackByIndex; let i = index; last as isLast\"\n            class=\"flex-row tight-grid row\"\n            [ngModelGroup]=\"i\"\n          >\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Key</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"key\"\n                    placeholder=\"{{ 'e.g.' | translate }} Content-Type\"\n                    required\n                    [(ngModel)]=\"header.key\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-5 col-sm-4\">\n              <c8y-form-group class=\"form-group-sm\">\n                <label class=\"visible-xs\" translate>Value</label>\n                <div class=\"input-group\">\n                  <input\n                    class=\"form-control\"\n                    type=\"text\"\n                    name=\"value\"\n                    placeholder=\"{{ 'e.g.' | translate }} application/json\"\n                    required\n                    [(ngModel)]=\"header.value\"\n                  />\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-xs-2\">\n              <div class=\"form-group\">\n                <label class=\"visible-xs\">&nbsp;</label>\n                <button class=\"btn btn-clean\" *ngIf=\"customAction.headers.length !== 1\">\n                  <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"removeCustomAction(i)\"></i>\n                </button>\n                <button class=\"btn btn-clean\" *ngIf=\"isLast\">\n                  <i c8yIcon=\"plus-circle\" class=\"text-primary\" (click)=\"addHeader()\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n        <div class=\"legend form-block\" translate>Action</div>\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label>\n                <span translate>Endpoint</span>\n              </label>\n              <div class=\"input-group\">\n                <input\n                  class=\"form-control\"\n                  type=\"text\"\n                  name=\"endpoint\"\n                  placeholder=\"{{ 'e.g.' | translate }} http://localhost:1080/cucumber\"\n                  required\n                  [(ngModel)]=\"customAction.endpoint\"\n                />\n              </div>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group class=\"form-group-sm\">\n              <label translate>Body template</label>\n              <textarea\n                #model='ngModel'\n                [heightPerRow]=\"40\"\n                class=\"form-control\"\n                rows=\"3\"\n                name=\"bodyTemplate\"\n                placeholder=\"({{'required' | translate}})\"\n                [(ngModel)]=\"customAction.bodyTemplate\"\n                required\n              ></textarea>\n              <div class=\"help-block\" *ngIf=\"model.untouched || !model.errors\">\n                {{ 'The following placeholders are available:' | translate }} {{ placeholders }}\n              </div>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
        })
    ], OpcuaDeviceProtocolMappingCustomAction);
    return OpcuaDeviceProtocolMappingCustomAction;
}());

var AddressSpaceService = /** @class */ (function () {
    function AddressSpaceService(fetchClient) {
        this.client = fetchClient;
        this.microserviceUrl = '/service/opcua-mgmt-service/address-space';
        this.header = { 'Content-Type': 'application/json' };
        this.nodeNavigationData$ = new BehaviorSubject({
            node: undefined,
            selectedAncestorIds: []
        });
    }
    AddressSpaceService.prototype.resetTreeToRootNode = function () {
        this.triggerNodeToOpen({ node: undefined, selectedAncestorIds: [] });
    };
    AddressSpaceService.prototype.triggerNodeToOpen = function (nodeNavigationData) {
        this.nodeNavigationData$.next(nodeNavigationData);
    };
    AddressSpaceService.prototype.getNodeNavData$ = function () {
        return this.nodeNavigationData$.asObservable();
    };
    AddressSpaceService.prototype.getNode = function (serverId, nodeId) {
        if (serverId && serverId.length > 0) {
            if (nodeId && nodeId.length > 0) {
                return this.getNodeById(serverId, nodeId);
            }
            return this.getRootNode(serverId);
        }
    };
    AddressSpaceService.prototype.getRootNode = function (serverId) {
        if (serverId && serverId.length > 0) {
            var options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(this.microserviceUrl + "/" + serverId, options);
        }
    };
    AddressSpaceService.prototype.getNodeById = function (serverId, nodeId) {
        if (serverId && nodeId && serverId.length > 0 && nodeId.length > 0) {
            var options = {
                method: 'GET',
                headers: this.header
            };
            var param = encodeURIComponent(nodeId);
            return this.client.fetch(this.microserviceUrl + "/" + serverId + "?nodeId=" + param, options);
        }
    };
    AddressSpaceService.prototype.getChildrenOf = function (node, serverId) {
        if (serverId && node.nodeId && serverId.length > 0 && node.nodeId.length > 0) {
            var options = {
                method: 'GET',
                headers: this.header
            };
            var param = encodeURIComponent(node.nodeId);
            return this.client.fetch(this.microserviceUrl + "/" + serverId + "/children?nodeId=" + param, options);
        }
    };
    AddressSpaceService.prototype.childrenAvailable = function (nodeReferences) {
        if (!nodeReferences || nodeReferences.length === 0) {
            return false;
        }
        return nodeReferences.some(function (ref) { return !ref.inverse && ref.hierarchical; });
    };
    AddressSpaceService.prototype.getSearchedNodes = function (searchKey, serverId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, options, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "service/opcua-mgmt-service/search/" + serverId + "/";
                        options = {
                            headers: this.header,
                            params: {
                                searchString: '*' + searchKey + '*'
                            }
                        };
                        return [4 /*yield*/, this.client.fetch(url, options)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.json()];
                }
            });
        });
    };
    AddressSpaceService.prototype.getIcon = function (nodeClassName) {
        var iconList = {
            Object: 'cube',
            Variable: 'th-list',
            Method: 'random',
            View: 'window-maximize',
            ObjectType: 'c8y-group',
            VariableType: 'c8y-group',
            ReferenceType: 'c8y-group',
            DataType: 'c8y-group'
        };
        return iconList[nodeClassName] || 'circle';
    };
    AddressSpaceService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    AddressSpaceService = __decorate([
        Injectable()
    ], AddressSpaceService);
    return AddressSpaceService;
}());

var OpcuaAddressSpaceDetailComponent = /** @class */ (function () {
    function OpcuaAddressSpaceDetailComponent(addressSpaceService) {
        this.addressSpaceService = addressSpaceService;
        this.selected = false;
        this.showDetails = false;
        this.toggleAttrDetail = new EventEmitter();
    }
    Object.defineProperty(OpcuaAddressSpaceDetailComponent.prototype, "node", {
        set: function (n) {
            this._node = n;
            if (n) {
                this.setNodeData(n);
            }
            else {
                // remove details from current view
                this.showDetails = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    OpcuaAddressSpaceDetailComponent.prototype.setNodeData = function (nodeData) {
        this.showDetails = true;
        var attributes = nodeData.attributes, references = nodeData.references;
        this.nodeDataRef = references;
        var omitList = [
            'attributes',
            'references',
            'children',
            'currentlyLoadingChildren',
            'expanded',
            'browsePath',
            'relativePath',
            'parentNode'
        ];
        this.nodeDataAttr = Object.assign({}, attributes, omit(nodeData, omitList));
    };
    OpcuaAddressSpaceDetailComponent.prototype.toggleDetail = function (node) {
        this.showDetails = !this.showDetails;
        this.toggleAttrDetail.emit(node);
    };
    OpcuaAddressSpaceDetailComponent.prototype.navigateTo = function (ancestors) {
        var nodeNavData = {
            node: this._node,
            selectedAncestorIds: ancestors
        };
        this.toggleDetail(this._node);
        this.addressSpaceService.triggerNodeToOpen(nodeNavData);
    };
    OpcuaAddressSpaceDetailComponent.ctorParameters = function () { return [
        { type: AddressSpaceService }
    ]; };
    __decorate([
        Input()
    ], OpcuaAddressSpaceDetailComponent.prototype, "node", null);
    __decorate([
        Output()
    ], OpcuaAddressSpaceDetailComponent.prototype, "toggleAttrDetail", void 0);
    OpcuaAddressSpaceDetailComponent = __decorate([
        Component({
            selector: 'opcua-address-space-detail',
            template: "<div\n  class=\"card flex-scroll bottom-m-xs split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator \">\n    <h4>{{ 'Attributes' | translate }}</h4>\n    <button\n      class=\"close flex-item-right visible-sm visible-xs\"\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"toggleDetail(nodeDataAttr)\"\n    >\n      &times;\n    </button>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataAttr | keyvalue\">\n            <td>{{ item.key }}</td>\n            <td *ngIf=\"item.key === 'absolutePaths'\" class=\"text-break-word\">\n              {{ item.value | json }}\n            </td>\n            <td *ngIf=\"item.key === 'ancestorNodeIds'\" class=\"text-break-word\">\n              <a *ngFor=\"let value of item.value\" (click)=\"navigateTo(value)\">\n                {{ value | json }}</a\n              >\n            </td>\n            <td *ngIf=\"item.key !== 'absolutePaths' && item.key !== 'ancestorNodeIds'\">\n              {{ item.value }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n<div\n  class=\"card flex-scroll split-row-2 animated fast\"\n  style=\"pointer-events: all\"\n  [ngClass]=\"{ fadeInRightBig: showDetails, fadeOutRightBig: !showDetails }\"\n>\n  <div class=\"card-header separator\">\n    <h4>{{ 'References' | translate }}</h4>\n  </div>\n  <div class=\"card-inner-scroll\">\n    <div class=\"card-block\">\n      <table class=\"table table-striped table-condensed\">\n        <colgroup>\n          <col width=\"50%\" />\n          <col width=\"50%\" />\n        </colgroup>\n        <thead>\n          <tr>\n            <th>{{ 'Attribute' | translate }}</th>\n            <th>{{ 'Value' | translate }}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of nodeDataRef\">\n            <td>{{ item.referenceLabel }}</td>\n            <td class=\"text-break-word\">{{ item.targetLabel }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n"
        })
    ], OpcuaAddressSpaceDetailComponent);
    return OpcuaAddressSpaceDetailComponent;
}());

var OpcuaService = /** @class */ (function () {
    function OpcuaService(client, inventoryService, router, alertService) {
        this.client = client;
        this.inventoryService = inventoryService;
        this.router = router;
        this.alertService = alertService;
        this.microserviceUrl = '/service/opcua-mgmt-service/server';
        this.deviceTypeProtocolUrl = '/service/opcua-mgmt-service/deviceTypes';
        this.header = { 'Content-Type': 'application/json' };
        this.binaryService = inventoryService.binary;
    }
    OpcuaService.prototype.getServers = function (id) {
        if (id && id.length > 0) {
            var options = {
                method: 'GET',
                headers: this.header
            };
            return this.client.fetch(this.microserviceUrl + "/" + id, options);
        }
    };
    OpcuaService.prototype.createServer = function (data) {
        if (this.doesGatewayIdExist(data)) {
            this.cleanUpPayload(data);
            var options = {
                method: 'POST',
                headers: this.header,
                body: JSON.stringify(data)
            };
            return this.client.fetch("" + this.microserviceUrl, options);
        }
    };
    OpcuaService.prototype.updateServer = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            var options, res, data, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.doesGatewayIdExist(server) && this.doesIdExist(server))) return [3 /*break*/, 6];
                        this.cleanUpPayload(server);
                        options = {
                            method: 'POST',
                            headers: this.header,
                            body: JSON.stringify(server)
                        };
                        return [4 /*yield*/, this.client.fetch("" + this.microserviceUrl, options)];
                    case 1:
                        res = _a.sent();
                        data = void 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, res.json()];
                    case 3:
                        data = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        if (res.status !== 200) {
                            this.alertService.addServerFailure({ data: data, res: res });
                        }
                        else {
                            return [2 /*return*/, data];
                        }
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaService.prototype.removeServer = function (data) {
        if (this.doesGatewayIdExist(data) && this.doesIdExist(data)) {
            var options = {
                method: 'DELETE'
            };
            return this.client.fetch(this.microserviceUrl + "/" + data.gatewayId + "/" + data.id, options);
        }
    };
    OpcuaService.prototype.getKeystore = function (binaryId) {
        if (binaryId && binaryId.length > 0) {
            return this.inventoryService.detail(binaryId);
        }
        return null;
    };
    OpcuaService.prototype.uploadKeystore = function (file) {
        if (file && file.size > 0) {
            return this.binaryService.create(file);
        }
        return Promise.reject('Invalid file');
    };
    OpcuaService.prototype.updateKeystore = function (id, file) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(id && id.length > 0 && file && file.size > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.removeKeystore(id)];
                    case 1:
                        res = (_a.sent()).res;
                        if (res && res.status === 204) {
                            return [2 /*return*/, this.uploadKeystore(file)];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, Promise.reject('Invalid file')];
                }
            });
        });
    };
    OpcuaService.prototype.removeKeystore = function (id) {
        if (id && id.length > 0) {
            return this.binaryService.delete(id);
        }
    };
    OpcuaService.prototype.getMoId = function () {
        var currentUrl = this.router.routerState.snapshot.url;
        var isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        if (isDevice) {
            return currentUrl.match(/\d+/)[0];
        }
        return '';
    };
    OpcuaService.prototype.getId = function () {
        var currentUrl = this.router.routerState.snapshot.url;
        var isDeviceprotocol = new RegExp(/deviceprotocols/).test(currentUrl);
        if (isDeviceprotocol && RegExp(/\d+$/).test(currentUrl)) {
            return currentUrl.match(/\d+$/)[0];
        }
    };
    OpcuaService.prototype.getDeviceProtocol = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = {
                    method: 'GET',
                    headers: this.header,
                };
                return [2 /*return*/, this.client.fetch(this.deviceTypeProtocolUrl + "/" + id, options)];
            });
        });
    };
    OpcuaService.prototype.updateDeviceProtocol = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = {
                    method: 'PUT',
                    headers: this.header,
                    body: JSON.stringify(data)
                };
                return [2 /*return*/, this.client.fetch(this.deviceTypeProtocolUrl + "/" + data.id, options)];
            });
        });
    };
    OpcuaService.prototype.createDeviceProtocol = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = {
                    method: 'POST',
                    headers: this.header,
                    body: JSON.stringify(data)
                };
                return [2 /*return*/, this.client.fetch("" + this.deviceTypeProtocolUrl, options)];
            });
        });
    };
    OpcuaService.prototype.doesGatewayIdExist = function (data) {
        return data && data.gatewayId && data.gatewayId.length > 0;
    };
    OpcuaService.prototype.doesIdExist = function (data) {
        return data && data.id && data.id.length > 0 && data.id !== 'new';
    };
    OpcuaService.prototype.cleanUpPayload = function (data) {
        if (data) {
            if (data.id && data.id === 'new') {
                delete data.id;
            }
            if (data.quickInfo) {
                delete data.quickInfo;
            }
        }
    };
    OpcuaService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: InventoryService },
        { type: Router },
        { type: AlertService }
    ]; };
    OpcuaService = __decorate([
        Injectable()
    ], OpcuaService);
    return OpcuaService;
}());

var OpcuaAgentGuard = /** @class */ (function () {
    function OpcuaAgentGuard() {
        this.type = 'c8y_OPCUA_Device_Agent';
    }
    OpcuaAgentGuard.prototype.canActivate = function (_a) {
        var data = _a.data;
        var contextData = data.contextData;
        return contextData && contextData.type === this.type;
    };
    OpcuaAgentGuard = __decorate([
        Injectable()
    ], OpcuaAgentGuard);
    return OpcuaAgentGuard;
}());

var OpcuaDeviceProtocolBrowsePathValidation = /** @class */ (function () {
    function OpcuaDeviceProtocolBrowsePathValidation(el) {
        this.el = el;
    }
    OpcuaDeviceProtocolBrowsePathValidation_1 = OpcuaDeviceProtocolBrowsePathValidation;
    OpcuaDeviceProtocolBrowsePathValidation.prototype.validate = function (control) {
        if (control.value) {
            if (!this.isValidJson(control.value)) {
                return { invalidBrowsePathNotation: true };
            }
            else {
                if (this.isBrowsePathUnique(control.value)) {
                    return { browsePathNotUnique: true };
                }
            }
        }
        return null;
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.isValidJson = function (value) {
        try {
            var browsePath = JSON.parse(value);
            return !isEmpty(browsePath);
        }
        catch (error) {
            return false;
        }
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.toArray = function (str) {
        return JSON.parse(str);
    };
    OpcuaDeviceProtocolBrowsePathValidation.prototype.isBrowsePathUnique = function (value) {
        var _this = this;
        var mappings = this.getMappings();
        var found = some(mappings, function (item) {
            if (isEqual(item.browsePath, _this.toArray(value)) && item.id !== _this.model.id) {
                return item;
            }
        });
        return found ? true : false;
    };
    var OpcuaDeviceProtocolBrowsePathValidation_1;
    OpcuaDeviceProtocolBrowsePathValidation.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolBrowsePathValidation.prototype, "getMappings", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolBrowsePathValidation.prototype, "model", void 0);
    OpcuaDeviceProtocolBrowsePathValidation = OpcuaDeviceProtocolBrowsePathValidation_1 = __decorate([
        Directive({
            selector: '[c8yBrowsePathValidator][ngModel]',
            providers: [
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return OpcuaDeviceProtocolBrowsePathValidation_1; }),
                    multi: true
                }
            ]
        })
    ], OpcuaDeviceProtocolBrowsePathValidation);
    return OpcuaDeviceProtocolBrowsePathValidation;
}());

var OpcuaDeviceProtocolObjectMapping = /** @class */ (function (_super) {
    __extends(OpcuaDeviceProtocolObjectMapping, _super);
    function OpcuaDeviceProtocolObjectMapping(elementRef, injector) {
        return _super.call(this, 'c8yObjectMapping', elementRef, injector) || this;
    }
    OpcuaDeviceProtocolObjectMapping.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolObjectMapping.prototype, "mapping", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolObjectMapping.prototype, "customActions", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolObjectMapping.prototype, "autoObserveParams", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolObjectMapping.prototype, "hideAutoObserve", void 0);
    OpcuaDeviceProtocolObjectMapping = __decorate([
        Directive({
            selector: 'c8y-object-mapping'
        })
    ], OpcuaDeviceProtocolObjectMapping);
    return OpcuaDeviceProtocolObjectMapping;
}(UpgradeComponent));

var OpcuaDeviceProtocolMapping = /** @class */ (function () {
    function OpcuaDeviceProtocolMapping(alertService, addressSpaceService) {
        var _this = this;
        this.alertService = alertService;
        this.addressSpaceService = addressSpaceService;
        this.onAction = new EventEmitter();
        this.isPathFocused = false;
        this.isBrowsePathUniq = true;
        this.dataReporting = 'default';
        this.isTreeOpen = false;
        this.isNew = false;
        this.resetModel = false;
        this.moId = '';
        this.getMappings = function () { return _this.getParentAttr('mappings'); };
    }
    OpcuaDeviceProtocolMapping.prototype.toggleDetail = function () {
        this.isDetailOpen = !this.isDetailOpen;
        if (this.resetModel) {
            this.initialFormSetup();
        }
    };
    OpcuaDeviceProtocolMapping.prototype.ngOnInit = function () {
        this.dataReportingName = 'ReportingMode' + this.index;
        this.initialFormSetup();
    };
    OpcuaDeviceProtocolMapping.prototype.ngOnChanges = function (changes) {
        if (changes._model.previousValue &&
            !isEqual(this._model, changes._model.previousValue.SimpleChange)) {
            if (this.mapping && this.mapping.name === this._model.name) {
                this.mapping.id = this._model.id;
            }
        }
    };
    OpcuaDeviceProtocolMapping.prototype.initialFormSetup = function () {
        var mapping = {
            id: '',
            browsePath: [],
            name: '',
            subscriptionType: {
                type: 'None'
            }
        };
        var customAction = {
            headers: [{ key: 'Authorization', value: '' }, { key: 'Content-Type', value: '' }],
            bodyTemplate: '',
            type: 'HttpPost',
            endpoint: ''
        };
        this.mapping = assign({}, mapping, cloneDeep(this._model));
        if (isEmpty(this.mapping.browsePath)) {
            this.isNew = true;
            this.isDetailOpen = true;
        }
        else {
            this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
            this.nodeDisplayName = this.mapping.name;
        }
        if (this.referencedRootNodeId) {
            this.referencedNode = { nodeId: this.referencedRootNodeId };
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
        else {
            this.referencedNode = { nodeId: '' };
        }
        if (get(this.mapping, 'customAction')) {
            this.customAction = assign(customAction, get(this.mapping, 'customAction'));
            this.customAction.headers = this.mapHeadersObjectToList(get(this.customAction, 'headers'));
        }
        else {
            this.customAction = assign({}, customAction);
        }
        unset(this.mapping, 'customAction');
        if (get(this._model, 'subscriptionType')) {
            this.dataReporting = 'custom';
        }
        else {
            this.dataReporting = 'default';
        }
        this.resetModel = false;
    };
    OpcuaDeviceProtocolMapping.prototype.showAddressSpaceTree = function () {
        return !isEmpty(this.referencedServerId);
    };
    OpcuaDeviceProtocolMapping.prototype.ngAfterViewInit = function () {
        if (get(this.mapping, 'subscriptionType') &&
            get(this.mapping, 'subscriptionType.type') !== 'None') {
            this.dataReporting = 'custom';
        }
    };
    OpcuaDeviceProtocolMapping.prototype.mapHeadersObjectToList = function (headers) {
        if (Object.keys(headers).length > 0) {
            return Object.keys(headers).map(function (item) {
                return { key: item, value: headers[item] };
            });
        }
    };
    OpcuaDeviceProtocolMapping.prototype.stringfyBrowsePath = function (path) {
        return JSON.stringify(path);
    };
    OpcuaDeviceProtocolMapping.prototype.updateBrowsePath = function (node) {
        this.mapping.browsePath = node.relativePath;
        this.nodeDisplayName = node.displayName;
        this.mapping.name = this.nodeDisplayName;
        this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
        this.browsePathModel.control.markAsDirty();
    };
    OpcuaDeviceProtocolMapping.prototype.updateDisplayname = function () {
        this.mapping.name = this.nodeDisplayName;
    };
    OpcuaDeviceProtocolMapping.prototype.updateBrowsePathInput = function () {
        if (this.browsePath) {
            try {
                this.mapping.browsePath = JSON.parse(this.browsePath);
            }
            catch (error) {
                return;
            }
        }
    };
    OpcuaDeviceProtocolMapping.prototype.save = function () {
        if (this.dataReporting === 'default') {
            unset(this.mapping, 'subscriptionType');
        }
        if (get(this.mapping, 'measurementCreation')) {
            var measurementCreation = this.mapping.measurementCreation;
            set(measurementCreation, 'fragmentName', get(measurementCreation, 'type'));
        }
        var customAction = this.subFormRef.value.customAction;
        var modifiedCustomAction;
        if (customAction.hasCustomAction) {
            var reducedHeaders = this.customAction.headers.reduce(function (result, item) {
                result[item.key] = item.value;
                return result;
            }, {});
            modifiedCustomAction = assign({}, this.customAction, { headers: reducedHeaders });
        }
        this.onAction.emit({
            action: 'save',
            data: assign({}, this.mapping, { customAction: modifiedCustomAction })
        });
        this.isDetailOpen = false;
    };
    OpcuaDeviceProtocolMapping.prototype.cancel = function () {
        this.isDetailOpen = false;
        this.resetModel = true;
        if (this.mapping.id === 'new') {
            this.onAction.emit({ action: 'delete', data: assign({}, this.mapping) });
        }
    };
    OpcuaDeviceProtocolMapping.prototype.onDelete = function () {
        this.onAction.emit({ action: 'delete', data: this.mapping });
    };
    OpcuaDeviceProtocolMapping.prototype.canSave = function (variableForm) {
        var _this = this;
        var areValid = function () {
            return variableForm.valid && _this.objectMappingForm.$componentScope.mappingForm.$valid;
        };
        var areDirty = function () {
            return variableForm.dirty || _this.objectMappingForm.$componentScope.mappingForm.$dirty;
        };
        return areValid() && areDirty();
    };
    OpcuaDeviceProtocolMapping.prototype.isActive = function () {
        return this.isDetailOpen;
    };
    OpcuaDeviceProtocolMapping.prototype.setTreeFromRefNode = function () {
        if (this.referencedRootNodeId) {
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
    };
    OpcuaDeviceProtocolMapping.ctorParameters = function () { return [
        { type: AlertService },
        { type: AddressSpaceService }
    ]; };
    __decorate([
        ViewChild(OpcuaDeviceProtocolObjectMapping, { static: false })
    ], OpcuaDeviceProtocolMapping.prototype, "objectMappingForm", void 0);
    __decorate([
        ViewChild('variableForm', { static: false })
    ], OpcuaDeviceProtocolMapping.prototype, "subFormRef", void 0);
    __decorate([
        ViewChild('browsePathModel', { static: false })
    ], OpcuaDeviceProtocolMapping.prototype, "browsePathModel", void 0);
    __decorate([
        Input('resource')
    ], OpcuaDeviceProtocolMapping.prototype, "_model", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolMapping.prototype, "index", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolMapping.prototype, "getParentAttr", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolMapping.prototype, "referencedServerId", void 0);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolMapping.prototype, "referencedRootNodeId", void 0);
    __decorate([
        Output()
    ], OpcuaDeviceProtocolMapping.prototype, "onAction", void 0);
    OpcuaDeviceProtocolMapping = __decorate([
        Component({
            selector: 'opcua-device-protocol-mapping',
            template: "<div class=\"list-group-item collapsible\" [ngClass]=\"{ expanded: isDetailOpen }\">\n  <div class=\"flex-row\" (click)=\"toggleDetail()\">\n    <div class=\"list-item-actions\">\n      <button class=\"btn btn-clean showOnHover flex-item-right\" title=\"{{ 'Delete' | translate }}\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Expand' | translate }}\"\n        class=\"collapse-btn\"\n        [ngClass]=\"{ active: isDetailOpen }\"\n      >\n        <i class=\"fa fw fa-chevron-down\"></i>\n      </button>\n    </div>\n\n    <div class=\"list-item-icon\">\n      <i c8yIcon=\"sliders\"></i>\n    </div>\n\n    <div class=\"list-item-body\">\n      <div class=\"row flex-row\">\n        <div class=\"col-sm-7 col-xs-12\">\n          <p>\n            {{ nodeDisplayName }}<br />\n            <small\n              *ngIf=\"mapping.browsePath.length > 0\"\n              class=\"text-muted text-truncate\"\n              title=\"{{ mapping.browsePath | json }}\"\n              >{{ mapping.browsePath | json }}</small\n            >\n          </p>\n          <p></p>\n        </div>\n        <div class=\"col-sm-4 col-xs-10\">\n          <div class=\"list-functionalities\">\n            <label class=\"small right-m hidden-xs\" translate>Functionalities</label>&nbsp;\n            <c8y-object-mapping-status-icons [mapping]=\"mapping\"></c8y-object-mapping-status-icons>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"detail\" [collapse]=\"!isDetailOpen\" [isAnimated]=\"true\">\n    <div class=\"form\" [ngModelGroup]=\"index\" #variableForm=\"ngModelGroup\" *ngIf=\"isDetailOpen\">\n      <div class=\"row top-p-sm\">\n        <c8y-form-group class=\"col-md-4\" [status]=\"!isBrowsePathUniq ? 'error' : ''\">\n          <label translate>Path</label>\n          <div\n            class=\"dropdown\"\n            dropdown\n            #dropdown=\"bs-dropdown\"\n            [insideClick]=\"true\"\n            style=\"width:100%;\"\n          >\n            <input\n              class=\"form-control\"\n              c8yBrowsePathValidator\n              [getMappings]=\"getMappings\"\n              [model]=\"mapping\"\n              type=\"text\"\n              name=\"browsePath\"\n              dropdownToggle\n              placeholder=\"{{ 'e.g.' | translate }} {{ ['2:Node1', '2:SubNode1'] | json }}\"\n              [(ngModel)]=\"browsePath\"\n              (change)=\"updateBrowsePathInput()\"\n              (focus)=\"setTreeFromRefNode()\"\n              required\n              #browsePathModel=\"ngModel\"\n            />\n            <div\n              *dropdownMenu\n              class=\"dropdown-menu panel-inner-scroll\"\n              style=\"max-height:200px; width: 100%;\"\n            >\n              <opcua-address-space-tree\n                *ngIf=\"showAddressSpaceTree()\"\n                [node]=\"referencedNode\"\n                [moId]=\"referencedServerId\"\n                (selectedNode)=\"updateBrowsePath($event); dropdown.hide()\"\n              ></opcua-address-space-tree>\n            </div>\n          </div>\n          <c8y-messages>\n            <c8y-message\n              name=\"invalidBrowsePathNotation\"\n              text=\"{{ 'Must be a valid array of strings.' | translate }}\"\n            ></c8y-message>\n            <c8y-message\n              name=\"browsePathNotUnique\"\n              text=\"{{ 'Variable with this path is already added.' | translate }}\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group class=\"col-md-4\">\n          <label translate>Name</label>\n          <div class=\"input-group\">\n            <input\n              class=\"form-control\"\n              type=\"test\"\n              name=\"displayName\"\n              placeholder=\"{{ 'e.g. childDevice2' | translate }} \"\n              required\n              [(ngModel)]=\"nodeDisplayName\"\n              (change)=\"updateDisplayname()\"\n            />\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"row\" ngModelGroup=\"dataReportingSection\">\n        <c8y-form-group class=\"col-sm-4 col-md-3 col-lg-2\">\n          <label>\n            <span translate>Data reporting</span>\n          </label>\n          <div class=\"input-group\">\n            <label title=\"{{ 'Default' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"default\"\n              />\n              <span></span>\n              <span>{{ 'Default' | translate }}</span>\n            </label>\n            <label title=\"{{ 'Custom' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"custom\"\n              />\n              <span></span>\n              <span>{{ 'Custom' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n        <div\n          class=\"col-sm-8 col-md-9 col-lg-10\"\n          *ngIf=\"dataReporting === 'custom'\"\n          ngModelGroup=\"overriddenSubscription\"\n        >\n          <opcua-device-protocol-data-reporting\n            [model]=\"mapping\"\n          ></opcua-device-protocol-data-reporting>\n        </div>\n      </div>\n\n      <c8y-object-mapping [mapping]=\"mapping\" [hideAutoObserve]=\"true\"></c8y-object-mapping>\n      <div ngModelGroup=\"customAction\">\n        <opcua-device-protocol-mapping-customaction\n          [customAction]=\"customAction\"\n        ></opcua-device-protocol-mapping-customaction>\n      </div>\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        id=\"cancelBtn\"\n        class=\"btn btn-default top-m-md bottom-m-lg\"\n        style=\"min-width: 100px;\"\n        (click)=\"cancel()\"\n      >\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        id=\"saveBtn\"\n        class=\"btn btn-primary top-m-md bottom-m-lg\"\n        style=\"min-width: 100px;\"\n        (click)=\"save()\"\n        [disabled]=\"!canSave(variableForm)\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</div>\n",
            viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
        })
    ], OpcuaDeviceProtocolMapping);
    return OpcuaDeviceProtocolMapping;
}());

var OpcuaDeviceProtocolDetailComponent = /** @class */ (function () {
    function OpcuaDeviceProtocolDetailComponent(changeDetectorRef, opcuaService, alertService, router) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.router = router;
        this.initialModel = {
            id: '',
            fieldbusType: 'opcuaV2',
            description: '',
            unit: '',
            fieldbusVersion: 4,
            name: '',
            referencedServerId: '',
            referencedRootNodeId: '',
            subscriptionType: {
                type: 'None'
            },
            mappings: [],
            overriddenSubscriptions: [],
            applyConstraints: {
                browsePathMatchesRegex: '',
                matchesNodeIds: [],
                serverObjectHasFragment: '',
                matchesServerIds: []
            },
            enabled: ''
        };
        this.isLoaded = true;
        this.getParentAttr = function (key) { return get$1(_this.model, key); };
    }
    OpcuaDeviceProtocolDetailComponent.prototype.ngAfterContentChecked = function () {
        this.changeDetectorRef.detectChanges();
    };
    OpcuaDeviceProtocolDetailComponent.prototype.getMapping = function () {
        return this.model.mappings;
    };
    OpcuaDeviceProtocolDetailComponent.prototype.getEmptyMappingObject = function () {
        return {
            id: 'new',
            browsePath: []
        };
    };
    OpcuaDeviceProtocolDetailComponent.prototype.getOverriddenSubscriptionsByPath = function (browsePath) {
        return find(this.model.overriddenSubscriptions, { browsePath: browsePath });
    };
    OpcuaDeviceProtocolDetailComponent.prototype.getStructuredResource = function (resource) {
        var overriddenSubscriptions = this.getOverriddenSubscriptionsByPath(resource.browsePath);
        var result = assign$1({}, resource);
        if (overriddenSubscriptions) {
            result = assign$1({}, resource, { subscriptionType: overriddenSubscriptions.subscriptionType });
        }
        return result;
    };
    OpcuaDeviceProtocolDetailComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var id, res, data, _a, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = this.opcuaService.getId();
                        if (!id) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.opcuaService.getDeviceProtocol(id)];
                    case 1:
                        res = _b.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        this.isLoaded = false;
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, res.json()];
                    case 6:
                        data = _b.sent();
                        if (data && data.applyConstraints === null) {
                            delete data.applyConstraints;
                        }
                        if (data && data.subscriptionType === null) {
                            delete data.subscriptionType;
                        }
                        this.model = assign$1(this.initialModel, data);
                        if (!this.model.mappings) {
                            this.model.mappings = [];
                        }
                        this.model = assign$1(this.initialModel, this.updateViableMapping(data));
                        this.isLoaded = false;
                        _b.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaDeviceProtocolDetailComponent.prototype.updateViableMapping = function (model) {
        var mappings = model.mappings;
        var result = [];
        if (mappings) {
            result = mappings.map(function (item, i) {
                return assign$1(item, { id: i });
            });
        }
        return assign$1(model, { mappings: result });
    };
    OpcuaDeviceProtocolDetailComponent.prototype.trackByIndex = function (index) {
        return index;
    };
    OpcuaDeviceProtocolDetailComponent.prototype.addVariable = function () {
        this.model.mappings.push(this.getEmptyMappingObject());
    };
    OpcuaDeviceProtocolDetailComponent.prototype.updateVariable = function (mappingObject) {
        var mappings = this.model.mappings;
        var index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
        if (mappingObject.id === 'new') {
            mappingObject.id = mappings.length;
        }
        mappings.push(mappingObject);
    };
    OpcuaDeviceProtocolDetailComponent.prototype.removeVariable = function (mappingObject) {
        var mappings = this.model.mappings;
        var index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
    };
    OpcuaDeviceProtocolDetailComponent.prototype.actionHandler = function (actionObject) {
        switch (actionObject.action) {
            case 'save':
                this.updateVariable(actionObject.data);
                break;
            case 'delete':
                this.removeVariable(actionObject.data);
                break;
        }
    };
    OpcuaDeviceProtocolDetailComponent.prototype.extractOverridSubscriptionType = function (_mapping) {
        var overriddenSubscriptions = [];
        var variableMapping = [];
        _mapping.forEach(function (element) {
            if (element.id !== 'new') {
                if (element.subscriptionType) {
                    overriddenSubscriptions.push(assign$1({ browsePath: element.browsePath }, { subscriptionType: element.subscriptionType }));
                }
                variableMapping.push(omit$1(element, ['subscriptionType']));
            }
        });
        return [variableMapping, overriddenSubscriptions];
    };
    OpcuaDeviceProtocolDetailComponent.prototype.prepareRequestJson = function (_model) {
        var requestJson = {};
        var _a = __read(this.extractOverridSubscriptionType(_model.mappings), 2), mappings = _a[0], overriddenSubscriptions = _a[1];
        requestJson = assign$1(requestJson, pick(_model, Object.keys(this.initialModel)), {
            mappings: mappings,
            overriddenSubscriptions: overriddenSubscriptions
        });
        return requestJson;
    };
    OpcuaDeviceProtocolDetailComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.opcuaService.updateDeviceProtocol(this.prepareRequestJson(this.model))];
                    case 1:
                        res = _a.sent();
                        if (res && res.status === 200) {
                            this.router.navigate(['deviceprotocols']);
                            this.alertService.success(gettext('Device protocol saved.'));
                        }
                        else {
                            this.alertService.addServerFailure({ res: res });
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.danger(gettext('Failed to save. Try again.'));
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaDeviceProtocolDetailComponent.prototype.canSave = function (deviceTypeForm) {
        if (this.instanceList) {
            var activeInstances = this.instanceList.filter(function (item) { return item.isActive(); });
            if (activeInstances.length > 0) {
                return true;
            }
        }
        return !deviceTypeForm.form.valid;
    };
    OpcuaDeviceProtocolDetailComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: OpcuaService },
        { type: AlertService },
        { type: Router }
    ]; };
    __decorate([
        ViewChildren(OpcuaDeviceProtocolMapping)
    ], OpcuaDeviceProtocolDetailComponent.prototype, "instanceList", void 0);
    OpcuaDeviceProtocolDetailComponent = __decorate([
        Component({
            selector: 'opcua-device-protocol-detail',
            template: "<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<div>\n  <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\">\n    <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Variables</h4>\n      </div>\n      <div class=\"list-group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n        <opcua-device-protocol-mapping\n          *ngFor=\"let resource of getMapping(); trackBy: trackByIndex; let i = index\"\n          [index]=\"i\"\n          [referencedServerId]=\"model.referencedServerId\"\n          [referencedRootNodeId]=\"model.referencedRootNodeId\"\n          [resource]=\"getStructuredResource(resource)\"\n          [getParentAttr]=\"getParentAttr\"\n          (onAction)=\"actionHandler($event)\"\n        >\n        </opcua-device-protocol-mapping>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-empty-state text-left\" *ngIf=\"model.mappings.length === 0\">\n          <h1 c8yIcon=\"sliders\"></h1>\n          <p translate>No variables to display. Click below to add.</p>\n        </div>\n        <button\n          title=\"{{ 'Add variable' | translate }}\"\n          class=\"btn-add-block addVariableBtn\"\n          (click)=\"addVariable()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'Add variable' | translate }}\n        </button>\n      </div>\n    </div>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Data reporting</h4>\n      </div>\n      <div class=\"card-block\" ngModelGroup=\"subscription\">\n        <opcua-device-protocol-data-reporting\n          [groupName]=\"'subscription'\"\n          [model]=\"model\"\n        ></opcua-device-protocol-data-reporting>\n      </div>\n    </div>\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 translate>Auto apply constraints</h4>\n      </div>\n      <div class=\"card-block overflow-visible\" ngModelGroup=\"autoApply\">\n        <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n      </div>\n    </div>\n\n    <span>\n      <div class=\"text-center page-footer m-t-16\">\n        <div class=\"btn-save-wrapper animated\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            translate\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </span>\n  </form>\n</div>\n"
        })
    ], OpcuaDeviceProtocolDetailComponent);
    return OpcuaDeviceProtocolDetailComponent;
}());

var OpcuaDeviceProtocolDataReportingComponent = /** @class */ (function () {
    function OpcuaDeviceProtocolDataReportingComponent() {
        this.onSubscriptionChange = new EventEmitter();
        this.subscription = {
            type: 'None'
        };
        this.subscriptionParameters = {
            samplingRate: undefined,
            deadbandType: 'None',
            deadbandValue: undefined,
            ranges: '',
            queueSize: undefined,
            dataChangeTrigger: 'Status',
            discardOldest: true
        };
        this.cyclicReadParameters = {
            rate: undefined
        };
        this.types = [
            { value: 'None', label: gettext('None') },
            { value: 'CyclicRead', label: gettext('Cyclic read') },
            { value: 'Subscription', label: gettext('Subscription') }
        ];
        this.filters = [
            { value: 'None', label: gettext('None') },
            { value: 'absolute', label: gettext('Absolute') },
            { value: 'percent', label: gettext('Percent') }
        ];
        this.triggers = [
            { value: 'Status', label: gettext('Status') },
            { value: 'StatusValue', label: gettext('Status/Value') },
            { value: 'StatusValueTimestamp', label: gettext('Status/Value/Timestamp') }
        ];
        this.discard = [
            { value: true, label: gettext('oldest`data`') },
            { value: false, label: gettext('newest`data`') }
        ];
        this.requireCyclic = false;
        this.requireSubscription = false;
        this.subscriptionTypeName = 'subscriptionType';
        this.parseReadingInterval = function ($event) { return toInteger($event.target.value); };
    }
    Object.defineProperty(OpcuaDeviceProtocolDataReportingComponent.prototype, "model", {
        set: function (_model) {
            if (_model.subscriptionType) {
                this.subscription = _model.subscriptionType;
                if (this.subscription.type === 'CyclicRead') {
                    this.cyclicReadParameters = _model.subscriptionType.cyclicReadParameters;
                    this.requireCyclic = true;
                    this.requireSubscription = false;
                }
                if (this.subscription.type === 'Subscription') {
                    this.subscriptionParameters = _model.subscriptionType.subscriptionParameters;
                    this.requireCyclic = false;
                    this.requireSubscription = true;
                }
                if (this.subscription.type === 'None') {
                    this.requireCyclic = false;
                    this.requireSubscription = false;
                }
            }
            this._model = _model;
            this.subscriptionTypeName = 'subscriptionType' + _model.id;
        },
        enumerable: true,
        configurable: true
    });
    OpcuaDeviceProtocolDataReportingComponent.prototype.updateModel = function () {
        var _this = this;
        setTimeout(function () {
            unset$1(_this.subscription, 'subscriptionParameters');
            unset$1(_this.subscription, 'cyclicReadParameters');
            if (_this.subscription.type === 'CyclicRead') {
                _this.requireCyclic = true;
                _this.requireSubscription = false;
                set$1(_this.subscription, 'cyclicReadParameters', _this.cyclicReadParameters);
            }
            else if (_this.subscription.type === 'Subscription') {
                _this.requireCyclic = false;
                _this.requireSubscription = true;
                set$1(_this.subscription, 'subscriptionParameters', _this.subscriptionParameters);
            }
            else if (_this.subscription.type === 'None') {
                _this.requireCyclic = false;
                _this.requireSubscription = false;
            }
        });
    };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolDataReportingComponent.prototype, "model", null);
    __decorate([
        Input()
    ], OpcuaDeviceProtocolDataReportingComponent.prototype, "groupName", void 0);
    __decorate([
        Output()
    ], OpcuaDeviceProtocolDataReportingComponent.prototype, "onSubscriptionChange", void 0);
    OpcuaDeviceProtocolDataReportingComponent = __decorate([
        Component({
            selector: 'opcua-device-protocol-data-reporting',
            template: "<c8y-form-group>\n  <label translate>Mechanism</label>\n  <label\n    title=\"{{ mechanism.label | translate }}\"\n    class=\"c8y-radio radio-inline\"\n    *ngFor=\"let mechanism of types\"\n  >\n    <input\n      type=\"radio\"\n      name=\"{{subscriptionTypeName}}\"\n      [value]=\"mechanism.value\"\n      [(ngModel)]=\"subscription.type\"\n      (change)=\"updateModel()\"\n      required\n    />\n    <span></span>\n    <span>{{ mechanism.label | translate }}</span>\n  </label>\n</c8y-form-group>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'CyclicRead'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-md-4 col-lg-3\">\n    <c8y-form-group>\n      <label translate>Reading interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"rate\"\n          [(ngModel)]=\"cyclicReadParameters.rate\"\n          placeholder=\"{{ 'e.g.' | translate }} 50\"\n          [required]=\"requireCyclic\"\n          min=\"50\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\">\n          {{ 'msec' | translate }}\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n</div>\n\n<div class=\"row collapse\" [collapse]=\"subscription.type != 'Subscription'\" [isAnimated]=\"true\">\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Sampling interval</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"samplingRate\"\n          [(ngModel)]=\"subscriptionParameters.samplingRate\"\n          placeholder=\"{{ 'e.g.' | translate }} 500\"\n          [required]=\"requireSubscription\"\n          min=\"0\"\n        />\n        <span class=\"input-group-addon units\" title=\"{{ 'Milliseconds' | translate }}\" translate>\n          msec\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Queue size</label>\n      <div class=\"input-group\">\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"queueSize\"\n          [(ngModel)]=\"subscriptionParameters.queueSize\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          min=\"1\"\n        />\n        <span class=\"input-group-addon\">\n          <strong translate>Discard</strong>&nbsp;\n          <label\n            *ngFor=\"let discardOption of discard\"\n            title=\"{{ discardOption.label | translate }}\"\n            class=\"c8y-radio radio-inline\"\n          >\n            <input\n              type=\"radio\"\n              name=\"discard\"\n              [value]=\"discardOption.value\"\n              [(ngModel)]=\"subscriptionParameters.discardOldest\"\n              [required]=\"requireSubscription\"\n            />\n            <span></span>\n            <span>{{ discardOption.label | translate }}</span>\n          </label>\n        </span>\n      </div>\n    </c8y-form-group>\n  </div>\n  <div class=\"clearfix\"></div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Data change trigger</label>\n      <label\n        *ngFor=\"let trigger of triggers\"\n        title=\"{{ trigger.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"dataChangeTrigger\"\n          [value]=\"trigger.value\"\n          [(ngModel)]=\"subscriptionParameters.dataChangeTrigger\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ trigger.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n  </div>\n  <div class=\"col-sm-6 col-lg-4\">\n    <c8y-form-group>\n      <label translate>Deadband filter</label>\n      <label\n        *ngFor=\"let deadbandFilter of filters\"\n        title=\"{{ deadbandFilter.label | translate }}\"\n        class=\"c8y-radio radio-inline\"\n      >\n        <input\n          type=\"radio\"\n          name=\"deadbandType\"\n          [value]=\"deadbandFilter.value\"\n          [(ngModel)]=\"subscriptionParameters.deadbandType\"\n          [required]=\"requireSubscription\"\n        />\n        <span></span>\n        <span>{{ deadbandFilter.label | translate }}</span>\n      </label>\n    </c8y-form-group>\n    <div [collapse]=\"subscriptionParameters.deadbandType == 'None'\" [isAnimated]=\"true\">\n      <c8y-form-group>\n        <label translate>Deadband value</label>\n        <input\n          class=\"form-control\"\n          type=\"number\"\n          name=\"deadbandValue\"\n          [(ngModel)]=\"subscriptionParameters.deadbandValue\"\n          placeholder=\"{{ 'e.g.' | translate }} 10\"\n          [required]=\"subscriptionParameters.deadbandType != 'None'\"\n          min=\"0\"\n        />\n      </c8y-form-group>\n    </div>\n  </div>\n</div>\n",
            viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
        })
    ], OpcuaDeviceProtocolDataReportingComponent);
    return OpcuaDeviceProtocolDataReportingComponent;
}());

var OpcuaDeviceProtocolObjectMappingStatus = /** @class */ (function (_super) {
    __extends(OpcuaDeviceProtocolObjectMappingStatus, _super);
    function OpcuaDeviceProtocolObjectMappingStatus(elementRef, injector) {
        return _super.call(this, 'c8yObjectMappingStatusIcons', elementRef, injector) || this;
    }
    OpcuaDeviceProtocolObjectMappingStatus.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolObjectMappingStatus.prototype, "mapping", void 0);
    OpcuaDeviceProtocolObjectMappingStatus = __decorate([
        Directive({
            selector: 'c8y-object-mapping-status-icons'
        })
    ], OpcuaDeviceProtocolObjectMappingStatus);
    return OpcuaDeviceProtocolObjectMappingStatus;
}(UpgradeComponent));

var OpcuaAddressSpaceComponent = /** @class */ (function () {
    function OpcuaAddressSpaceComponent(addressSpaceService, opcuaService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.selectednode = false;
        this.loading = false;
        this.searchInProgress = false;
        this.focusStatus = new EventEmitter();
        this.moId = '';
    }
    OpcuaAddressSpaceComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.filterLabel = gettext('Filter…');
                this.moId = this.opcuaService.getMoId();
                return [2 /*return*/];
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.ngOnDestroy = function () {
        // The BehaviourSubject will store the last array of ancestorNodes from the previous search
        // this would cause the component while subscribing in the init-phase to the subject to travers
        // to the last searched node again. From user perspective it does not make sense, because the user
        // left the Address space (tab) and should loose the context and just request a new search or
        // browse the tree manually.
        this.addressSpaceService.resetTreeToRootNode();
    };
    OpcuaAddressSpaceComponent.prototype.searchNodes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.searchInProgress = true;
                        this.clearNodeListAndCheckSearchString();
                        if (!this.isSearch) return [3 /*break*/, 2];
                        this.currentNode = undefined;
                        _a = this;
                        return [4 /*yield*/, this.addressSpaceService.getSearchedNodes(this.searchKey, this.moId)];
                    case 1:
                        _a.nodeList = _b.sent();
                        this.searchInProgress = false;
                        this.nodeList.resultLabel = gettext('Results found');
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.clearNodeListAndCheckSearchString = function () {
        this.isSearch = this.searchKey !== undefined && this.searchKey !== '' ? true : false;
        if (!this.isSearch) {
            this.searchInProgress = false;
        }
    };
    OpcuaAddressSpaceComponent.prototype.clearSearch = function () {
        this.isSearch = false;
        this.searchKey = '';
        this.currentNode = undefined;
    };
    OpcuaAddressSpaceComponent.prototype.getIcon = function (nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    };
    OpcuaAddressSpaceComponent.prototype.selectNode = function (node) {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(node && node.nodeId && node.nodeId.length > 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.addressSpaceService.getNodeById(this.moId, node.nodeId)];
                    case 1:
                        res = _b.sent();
                        _a = this.toggleCurrentNode;
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a.apply(this, [(_b.sent())]);
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceComponent.prototype.toggleCurrentNode = function (node) {
        this.currentNode = this.isNodeSet(node) ? undefined : node;
    };
    OpcuaAddressSpaceComponent.prototype.backHandler = function (node) {
        this.isSearch = false;
        this.focusStatus.emit(node);
        this.toggleCurrentNode(node);
    };
    OpcuaAddressSpaceComponent.prototype.isNodeSet = function (node) {
        if (this.currentNode !== undefined && this.currentNode.nodeId === node.nodeId) {
            return true;
        }
        return false;
    };
    OpcuaAddressSpaceComponent.ctorParameters = function () { return [
        { type: AddressSpaceService },
        { type: OpcuaService }
    ]; };
    __decorate([
        Output()
    ], OpcuaAddressSpaceComponent.prototype, "focusStatus", void 0);
    OpcuaAddressSpaceComponent = __decorate([
        Component({
            selector: 'opcua-address-space',
            template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-5 col-xs-12 scroll-column no-gutter-r\">\n    <div class=\"card bg-gray-lighter split-scroll flex-scroll\">\n      <div class=\"card-block separator-bottom\">\n        <div class=\"input-group input-group-search\" style=\"margin: -4px 0;\">\n          <input\n            class=\"form-control\"\n            type=\"search\"\n            placeholder=\"{{ filterLabel | translate }}\"\n            (keydown.enter)=\"searchNodes()\"\n            [(ngModel)]=\"searchKey\"\n          />\n          <span class=\"input-group-btn\">\n            <button *ngIf=\"!isSearch\" type=\"submit\" class=\"btn btn-clean\" (click)=\"searchNodes()\">\n              <i c8yIcon=\"search\"></i>\n            </button>\n            <button *ngIf=\"isSearch\" class=\"btn btn-clean\" (click)=\"clearSearch()\">\n              <i c8yIcon=\"times\"></i>\n            </button>\n          </span>\n        </div>\n        <div *ngIf=\"isSearch && !loading\" class=\"p-t-16\">\n          <p *ngIf=\"!searchInProgress\">\n            <em>{{ nodeList.resultLabel | translate }}</em\n            >&nbsp;\n            <span class=\"badge badge-info\">{{ nodeList?.length }}</span>\n          </p>\n        </div>\n      </div>\n\n      <div style=\"padding: 8px;\" *ngIf=\"(isSearch && loading) || searchInProgress\">\n        <div class=\"spinner\" style=\"position: relative\">\n          <div class=\"rect1\"></div>\n          <div class=\"rect2\"></div>\n          <div class=\"rect3\"></div>\n          <div class=\"rect4\"></div>\n          <div class=\"rect5\"></div>\n        </div>\n      </div>\n\n      <div class=\"flex-content-scroll\" *ngIf=\"isSearch && !loading && !searchInProgress\">\n        <div\n          class=\"list-group list-group-links\"\n          *ngIf=\"isSearch && !loading\"\n          style=\"box-shadow: none;\"\n        >\n          <button\n            *ngFor=\"let nodeItem of nodeList\"\n            (click)=\"selectNode(nodeItem)\"\n            [ngClass]=\"{ 'list-group-item flex-row': true }\"\n          >\n            <div class=\"list-group-icon m-r-4\">\n              <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(nodeItem.nodeClassName)\"></i>\n            </div>\n            <div class=\"list-item-body text-truncate\">\n              <span tile=\"nodeId\">{{ nodeItem.nodeId }}</span> {{ nodeItem.displayName }}\n            </div>\n          </button>\n        </div>\n      </div>\n      <div class=\"flex-content-scroll\" *ngIf=\"!isSearch\">\n        <opcua-address-space-tree\n          (selectedNode)=\"toggleCurrentNode($event)\"\n          [focusEmitter]=\"focusStatus\"\n        ></opcua-address-space-tree>\n      </div>\n    </div>\n  </div>\n  <opcua-address-space-detail\n    [node]=\"currentNode\"\n    class=\"col-md-7 col-xs-12 scroll-column no-gutter-l\"\n    style=\"pointer-events: none;\"\n    (toggleAttrDetail)=\"backHandler($event)\"\n  ></opcua-address-space-detail>\n</div>\n"
        })
    ], OpcuaAddressSpaceComponent);
    return OpcuaAddressSpaceComponent;
}());

var OpcuaMicroserviceGuard = /** @class */ (function () {
    function OpcuaMicroserviceGuard(app) {
        this.app = app;
        this.microserviceName = 'opcua-mgmt-service';
    }
    OpcuaMicroserviceGuard.prototype.canActivate = function () {
        if (!this.checkApp) {
            this.checkApp = this.app.isApplicationAvailable(this.microserviceName);
        }
        return this.checkApp;
    };
    OpcuaMicroserviceGuard.ctorParameters = function () { return [
        { type: AppStateService }
    ]; };
    OpcuaMicroserviceGuard = __decorate([
        Injectable()
    ], OpcuaMicroserviceGuard);
    return OpcuaMicroserviceGuard;
}());

var OpcuaServerConfigComponent = /** @class */ (function () {
    function OpcuaServerConfigComponent(opcuaService) {
        this.fileName = '';
        this.targetConnectionState = '1';
        this.minIntervalNumber = 1;
        this.connectionStatusLabel = '';
        this.canceled = new EventEmitter();
        this.removed = new EventEmitter();
        this.saved = new EventEmitter();
        this.changePassword = false;
        this.initialPasswordRequired = true;
        this.NONE = 'NONE';
        this.SIGN = 'SIGN';
        this.SIGN_ENC = 'SIGN_ENCRYPT';
        this.securityPolicies = {
            sign: [
                "BASIC256_" + this.SIGN,
                "BASIC128RSA15_" + this.SIGN,
                "BASIC256SHA256_" + this.SIGN
            ],
            sign_enc: [
                "BASIC256_" + this.SIGN_ENC,
                "BASIC128RSA15_" + this.SIGN_ENC,
                "BASIC256SHA256_" + this.SIGN_ENC,
            ]
        };
        this.ANONYM = {
            id: 1,
            value: gettext('Anonymous')
        };
        this.USER_PASSWORD = {
            id: 2,
            value: gettext('Username/Password')
        };
        this.KEY_BASED = {
            id: 3,
            value: gettext('Key-based Authentication')
        };
        this.initialKeystore = {
            lastModified: 0,
            name: '',
            type: '',
            slice: null,
            size: 0
        };
        this.keystore = this.initialKeystore;
        this.authSwitch = false;
        this.opcuaService = opcuaService;
    }
    Object.defineProperty(OpcuaServerConfigComponent.prototype, "server", {
        get: function () {
            return this._server;
        },
        set: function (server) {
            if (server) {
                this._server = cloneDeep(server);
                this.model = cloneDeep(server);
                this.fileName = this.model.config.keystoreFilename;
                if (server.id && server.id === 'new') {
                    // enabled connection state
                    this.targetConnectionState = '1';
                    this.model.config.targetConnectionState = 'enabled';
                }
                else {
                    this.targetConnectionState = (this.model.config.targetConnectionState === 'enabled') ? '1' : '0';
                }
                this.updateConnectionStatusLabel(this._server);
                this.setNewPassword();
            }
        },
        enumerable: true,
        configurable: true
    });
    OpcuaServerConfigComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.authSwitch = false;
                this.securityModes = [
                    this.NONE,
                    this.SIGN,
                    this.SIGN_ENC
                ];
                this.authenticationModes = [
                    this.ANONYM,
                    this.USER_PASSWORD,
                    this.KEY_BASED
                ];
                this.setCurrentAuthenticationMode();
                this.setCurrentSecurityMode();
                return [2 /*return*/];
            });
        });
    };
    OpcuaServerConfigComponent.prototype.ngOnChanges = function () {
        this.setCurrentSecurityMode();
        this.setCurrentAuthenticationMode();
    };
    OpcuaServerConfigComponent.prototype.cancel = function () {
        this.canceled.emit(this.model);
    };
    OpcuaServerConfigComponent.prototype.remove = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.removeKeystore(this.model)];
                    case 1:
                        _a.sent();
                        this.removed.emit(this.model);
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServerConfigComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, userPassword;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.keystore && this.keystore.size > 0 && this.keystore.name && this.keystore.name.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.uploadKeystore(this.model.config.keystoreBinaryId)];
                    case 1:
                        response = _a.sent();
                        if (response && response.data && response.data.id) {
                            this.model.config.keystoreBinaryId = response.data.id;
                        }
                        // if the keystore was uploaded successful we can remove
                        // the local keystore. This will prevent another request to binary api
                        // when the user will edit other inputs in the form and hit save again.
                        this.keystore = this.initialKeystore;
                        _a.label = 2;
                    case 2:
                        // will remove keystore (binary) when the user switched
                        // authentication settings from key-based to anonymous or username/password
                        if (this.authSwitch) {
                            this.removeKeystore(this.server);
                        }
                        userPassword = this.getModelConfig('userPassword');
                        if (userPassword && userPassword.length > 0) {
                            this.model.config.passwordEncrypted = false;
                        }
                        this.saved.emit(this.model);
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServerConfigComponent.prototype.uploadFile = function (droppedFiles) {
        if (droppedFiles.length === 1) {
            this.keystore = droppedFiles[0].file;
            this.fileName = this.keystore.name;
        }
        else {
            // dropped more than one file
            console.warn('Tried to import... Import aborted.');
        }
    };
    OpcuaServerConfigComponent.prototype.setPolicy = function (data) {
        if (data === this.NONE) {
            this.model.config.securityMode = this.NONE;
        }
        else if (data === this.SIGN) {
            this.model.config.securityMode = this.securityPolicies.sign[0];
        }
        else if (data === this.SIGN_ENC) {
            this.model.config.securityMode = this.securityPolicies.sign_enc[0];
        }
    };
    OpcuaServerConfigComponent.prototype.setServerConnection = function (data) {
        this.model.config.targetConnectionState = (data !== '0') ? 'enabled' : 'disabled';
    };
    OpcuaServerConfigComponent.prototype.updateAuthentication = function (data) {
        if (data && data.id) {
            switch (data.id) {
                // Anonymous
                case 1:
                    this.resetUserAuthentication();
                    this.resetKeyBasedAuthentication();
                    break;
                // User/Password
                case 2:
                    this.resetKeyBasedAuthentication();
                    this.restoreUserData();
                    this.setNewPassword();
                    break;
                // Key-based
                case 3:
                    this.resetUserAuthentication();
                    this.restoreKeyBasedData();
                    break;
                default:
                    console.warn('Invalid authentication id', data.id);
                    break;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.updateConnectionStatusLabel = function (server) {
        var connected = server.c8y_Connection && server.c8y_Connection.status === 'CONNECTED';
        var label = connected ? gettext('Connected') : gettext('Disconnected');
        this.connectionStatusLabel = label;
    };
    OpcuaServerConfigComponent.prototype.setNewPassword = function () {
        var username = this.getModelConfig('userName');
        if (username && username.length > 0) {
            // userName is given, NO need to change the password because it is already set
            this.changePassword = false;
            this.initialPasswordRequired = false;
        }
        else {
            // no userName in response, so require the user to set the initial pw
            this.changePassword = true;
            this.initialPasswordRequired = true;
        }
    };
    OpcuaServerConfigComponent.prototype.toggleChangePassword = function () {
        this.changePassword = !this.changePassword;
        // When the user hides the pw-input field but has entered a
        // string to it before, we need to discard the changes reflected in the model
        // otherwise we PUT it with the model when user hits the save button
        if (!this.changePassword) {
            if (this.getModelConfig('userPassword')) {
                delete this.model.config.userPassword;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.uploadKeystore = function (binaryId) {
        if (!binaryId) {
            return this.opcuaService.uploadKeystore(this.keystore);
        }
        else if (binaryId && binaryId.length > 0) {
            // update existing binary
            return this.opcuaService.updateKeystore(binaryId, this.keystore);
        }
    };
    OpcuaServerConfigComponent.prototype.removeKeystore = function (server) {
        if (server &&
            server.config &&
            server.config.keystoreBinaryId &&
            server.config.keystoreBinaryId.length > 0) {
            this.authSwitch = false;
            return this.opcuaService.removeKeystore(this.server.config.keystoreBinaryId);
        }
    };
    OpcuaServerConfigComponent.prototype.resetUserAuthentication = function () {
        this.model.config.userName = null;
        this.model.config.userPassword = null;
        this.model.config.userIdentityMode = 'none';
    };
    OpcuaServerConfigComponent.prototype.resetKeyBasedAuthentication = function () {
        this.authSwitch = true;
        this.model.config.keystorePass = null;
        this.model.config.certificatePass = null;
        this.model.config.keystoreBinaryId = '';
        this.model.config.keystoreFilename = '';
        this.model.config.userIdentityMode = 'none';
    };
    OpcuaServerConfigComponent.prototype.restoreUserData = function () {
        this.model.config.userName = this._server.config.userName;
        this.model.config.userIdentityMode = 'userAndPassword';
    };
    OpcuaServerConfigComponent.prototype.restoreKeyBasedData = function () {
        this.authSwitch = false;
        this.model.config.keystorePass = this._server.config.keystorePass;
        this.model.config.certificatePass = this._server.config.certificatePass;
        this.model.config.keystoreBinaryId = this._server.config.keystoreBinaryId;
        this.model.config.keystoreFilename = this._server.config.keystoreFilename;
        this.model.config.userIdentityMode = 'certificate';
    };
    OpcuaServerConfigComponent.prototype.getServerConfig = function () {
        var cfg = {
            securityMode: this.NONE,
            userIdentityMode: 'none'
        };
        if (this.server && this.server.config) {
            cfg = this.server.config;
        }
        return cfg;
    };
    OpcuaServerConfigComponent.prototype.setCurrentSecurityMode = function () {
        var securityMode = this.getServerConfig().securityMode;
        if (securityMode) {
            var foundInSign = this.securityPolicies.sign.find(function (el) { return el === securityMode; });
            if (foundInSign) {
                this.currentSecMode = this.SIGN;
            }
            else {
                var foundInSignEncrypt = this.securityPolicies.sign_enc.find(function (el) { return el === securityMode; });
                foundInSignEncrypt ? this.currentSecMode = this.SIGN_ENC : this.currentSecMode = this.NONE;
            }
        }
    };
    OpcuaServerConfigComponent.prototype.setCurrentAuthenticationMode = function () {
        var userIdentityMode = this.getServerConfig().userIdentityMode;
        switch (userIdentityMode) {
            case 'certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            case 'userAndPassword':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Anonymous':
                this.authenticationMode = this.ANONYM;
                break;
            case 'UserName':
                this.authenticationMode = this.USER_PASSWORD;
                break;
            case 'Certificate':
                this.authenticationMode = this.KEY_BASED;
                break;
            default:
                this.authenticationMode = this.ANONYM;
                break;
        }
    };
    OpcuaServerConfigComponent.prototype.getModelConfig = function (fragment) {
        if (this.model && this.model.config) {
            if (fragment && fragment.length > 0) {
                return has(this.model.config, fragment) ? this.model.config["" + fragment] : undefined;
            }
        }
        return undefined;
    };
    OpcuaServerConfigComponent.ctorParameters = function () { return [
        { type: OpcuaService }
    ]; };
    __decorate([
        ViewChild('opcuaConfigForm', { static: false })
    ], OpcuaServerConfigComponent.prototype, "opcuaConfigForm", void 0);
    __decorate([
        ViewChild(DropAreaComponent, { static: false })
    ], OpcuaServerConfigComponent.prototype, "dropArea", void 0);
    __decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "canceled", void 0);
    __decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "removed", void 0);
    __decorate([
        Output()
    ], OpcuaServerConfigComponent.prototype, "saved", void 0);
    __decorate([
        Input()
    ], OpcuaServerConfigComponent.prototype, "server", null);
    OpcuaServerConfigComponent = __decorate([
        Component({
            selector: 'opcua-server-config',
            template: "<form #opcuaConfigForm=\"ngForm\" class=\"card card-scroll\" *ngIf=\"server\">\n  <div class=\"card-header\" style=\"flex-wrap: wrap;\">\n    <button\n      class=\"btn btn-clean visible-sm visible-xs\"\n      title=\"{{ 'Back' | translate }}\"\n      (click)=\"cancel()\"\n    >\n      <i c8y-icon=\"chevron-left\" class=\"fa fw fa-chevron-left\"></i\n      ><span translate>Back</span></button\n    ><br />\n    <!-- SERVER NAME -->\n    <label class=\"editable\" style=\"width: 100%;\">\n      <input\n        type=\"text\"\n        class=\"form-control input-lg\"\n        placeholder=\"{{ 'Server name' | translate }}\"\n        id=\"name\"\n        name=\"name\"\n        [(ngModel)]=\"model.name\"\n        required\n      />\n    </label>\n  </div>\n  <div class=\"inner-scroll\">\n    <div class=\"card-block bg-gray-lighter top-p-md\">\n      <div class=\"tight-grid\">\n        <div class=\"col-sm-6\">\n          <label style=\"width: 100%;\" translate>Server connection</label>\n          <button\n            type=\"button\"\n            class=\"btn top-m-xs\"\n            name=\"serverConnection\"\n            [(ngModel)]=\"targetConnectionState\"\n            (ngModelChange)=\"setServerConnection($event)\"\n            btnCheckbox\n            btnCheckboxTrue=\"1\"\n            btnCheckboxFalse=\"0\"\n          >\n            <span\n              title=\"{{ 'Enabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '1'\"\n              translate\n              >Enabled</span\n            >\n            <span\n              title=\"{{ 'Disabled' | translate }}\"\n              [hidden]=\"targetConnectionState !== '0'\"\n              translate\n              >Disabled</span\n            >\n          </button>\n        </div>\n        <div class=\"col-sm-6\">\n          <label translate>Connection status</label>\n          <div class=\"form-control-static\">\n            <device-status class=\"right-p-sm\" [mo]=\"server\"></device-status>\n            <span>{{ connectionStatusLabel | translate }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-block\">\n      <!-- SERVER URL-->\n      <c8y-form-group>\n        <label for=\"configServerUrl\" translate>Server URL</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"configServerUrl\"\n          name=\"serverUrl\"\n          [(ngModel)]=\"model.config.serverUrl\"\n          c8yDefaultValidation=\"opcuaBrowsePath\"\n          required\n        />\n      </c8y-form-group>\n\n      <!-- TIMEOUT & STATUS-CHECK-INTERVAL-->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <c8y-form-group>\n            <label for=\"config.timeout\" translate>Timeout</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.timeout\"\n                name=\"timeout\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 30\"\n                [(ngModel)]=\"model.config.timeout\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n        <div class=\"col-md-6\">\n          <c8y-form-group>\n            <label for=\"config.statusCheckInterval\" translate>Status check interval</label>\n            <div class=\"input-group\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                id=\"config.statusCheckInterval\"\n                name=\"statusCheckInterval\"\n                [min]=\"minIntervalNumber\"\n                placeholder=\"{{ 'e.g.' | translate }} 40\"\n                [(ngModel)]=\"model.config.statusCheckInterval\"\n                required\n              />\n              <span class=\"input-group-addon units\" translate>\n                seconds\n              </span>\n            </div>\n          </c8y-form-group>\n        </div>\n      </div>\n\n      <!-- SECURITY MODE -->\n      <div class=\"tight-grid\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <!-- NONE, SIGN, SIGN & ENCRYPT-->\n            <label for=\"config.securityMode\" translate>Security mode</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                class=\"form-control\"\n                id=\"config.securityMode\"\n                [(ngModel)]=\"currentSecMode\"\n                (ngModelChange)=\"setPolicy($event)\"\n                name=\"securityMode\"\n                required\n              >\n                <option *ngFor=\"let mode of securityModes\" [ngValue]=\"mode\">{{ mode }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode === NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.securityPolicy\"\n              name=\"securityPolicy\"\n              [readonly]=\"true\"\n              [(ngModel)]=\"model.config.securityMode\"\n              required\n            />\n          </div>\n        </div>\n        <div *ngIf=\"currentSecMode !== NONE\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.securityPolicy\" translate>Security policy</label>\n            <div class=\"c8y-select-wrapper\">\n              <select\n                *ngIf=\"currentSecMode === SIGN\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <select\n                *ngIf=\"currentSecMode === SIGN_ENC\"\n                class=\"form-control\"\n                id=\"config.securityPolicy\"\n                [(ngModel)]=\"model.config.securityMode\"\n                name=\"securityPolicy\"\n                required\n              >\n                <option *ngFor=\"let policy of securityPolicies.sign_enc\" [ngValue]=\"policy\">{{\n                  policy\n                }}</option>\n              </select>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- AUTHENTICATION -->\n      <div class=\"form-group\">\n        <label for=\"config.authenticationMode\" translate>Authentication</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            id=\"config.authenticationMode\"\n            [(ngModel)]=\"authenticationMode\"\n            name=\"authenticationMode\"\n            (ngModelChange)=\"updateAuthentication($event)\"\n            required\n          >\n            <option *ngFor=\"let auth of authenticationModes\" [ngValue]=\"auth\">{{\n              auth.value | translate\n            }}</option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n\n      <!-- User/Pw-->\n      <div *ngIf=\"authenticationMode.id === 2\" class=\"tight-grid\">\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"config.userName\" translate>Username</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              id=\"config.userName\"\n              name=\"userName\"\n              placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n              [(ngModel)]=\"model.config.userName\"\n              autocomplete=\"new-password\"\n              required\n            />\n          </div>\n        </div>\n        <!-- change password section BEGINS-->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\" *ngIf=\"!initialPasswordRequired\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n              <ng-container *ngIf=\"!changePassword\">\n                {{ 'Change password' | translate }}\n              </ng-container>\n              <ng-container *ngIf=\"changePassword\">\n                {{ 'Cancel password change' | translate }}\n              </ng-container>\n            </button>\n          </div>\n\n          <div class=\"form-group\">\n            <div *ngIf=\"changePassword\">\n              <label for=\"config.password\" translate>Password</label>\n              <input\n                type=\"password\"\n                class=\"form-control\"\n                id=\"config.userPassword\"\n                name=\"password\"\n                [(ngModel)]=\"model.config.userPassword\"\n                autocomplete=\"new-password\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n        <!-- change password section ENDS-->\n      </div>\n      <!-- Key-based -->\n      <div *ngIf=\"authenticationMode.id === 3\" class=\"tight-grid\">\n        <!-- KEYSTORE PASSWORD -->\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.keystorePass\" translate>Keystore password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.keystorePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.keystorePass\"\n              required\n            />\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"config.certificatePass\" translate>Certificate password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"config.certificatePass\"\n              name=\"keystorePass\"\n              [(ngModel)]=\"model.config.certificatePass\"\n              required\n            />\n          </div>\n        </div>\n        <!-- UPLOAD KEYSTORE -->\n        <div class=\"col-md-12\">\n          <div class=\"form-group\">\n            <label for=\"certificateUpload\" translate>Upload keystore</label>\n            <input\n              type=\"text\"\n              [readonly]=\"true\"\n              name=\"certificateUpload\"\n              class=\"form-control bottom-m-sm\"\n              [ngModel]=\"fileName\"\n              placeholder=\"{{ 'e.g.' | translate }} yourKeystore.jks\"\n              required\n            />\n            <c8y-drop-area\n              (dropped)=\"uploadFile($event)\"\n              [loadingMessage]=\"'Importing, please wait.' | translate\"\n              [title]=\"'Import keystore with jks file extension' | translate\"\n            >\n            </c8y-drop-area>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"card-footer separator text-center\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"cancel()\" translate>\n      Cancel\n    </button>\n    <button title=\"{{ 'Remove' | translate }}\" class=\"btn btn-danger\" (click)=\"remove()\" translate>\n      Remove\n    </button>\n    <!-- Add [disabled]=\"method()\" when form is invalid-->\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      [disabled]=\"!opcuaConfigForm.valid\"\n      translate\n    >\n      Save\n    </button>\n  </div> \n</form>\n"
        })
    ], OpcuaServerConfigComponent);
    return OpcuaServerConfigComponent;
}());

var OpcuaServerListComponent = /** @class */ (function () {
    function OpcuaServerListComponent() {
        this.serverList = [];
        this.present = new EventEmitter();
    }
    OpcuaServerListComponent.prototype.presentConfig = function (server) {
        server.active = true;
        this.present.emit(server);
    };
    __decorate([
        Input()
    ], OpcuaServerListComponent.prototype, "serverList", void 0);
    __decorate([
        Output()
    ], OpcuaServerListComponent.prototype, "present", void 0);
    OpcuaServerListComponent = __decorate([
        Component({
            selector: 'opcua-server-list',
            template: "<!-- add active class to c8y-stacked-item when clicked -->\n<div\n  class=\"c8y-stacked-item\"\n  [class.active]=\"server.active\"\n  *ngFor=\"let server of serverList\"\n  (click)=\"presentConfig(server)\"\n>\n  <i [c8yIcon]=\"'server'\" style=\"font-size:1.4em;\" class=\"text-gray-darker\"></i>\n  <div class=\"left-p-md text-truncate\">\n    <p id=\"serverName\" class=\"text-truncate\">{{ server.name }}</p>\n    <small id=\"serverUrl\" class=\"text-truncate text-muted\">{{ server.config.serverUrl }}</small>\n  </div>\n  <div class=\"flex-item-right left-p-sm\" style=\"display: flex;\">\n    <device-status class=\"right-p-sm\" [mo]=\"server\"></device-status>\n    <a\n      title=\"{{ server.quickInfo.padlockMsg | translate }}\"\n      placement=\"left\"\n      class=\"text-gray-darker\"\n    >\n      <i [c8yIcon]=\"server.quickInfo.padlock\"></i>\n    </a>\n  </div>\n</div>\n"
        })
    ], OpcuaServerListComponent);
    return OpcuaServerListComponent;
}());

var OpcuaServerGuard = /** @class */ (function () {
    function OpcuaServerGuard() {
        this.type = 'c8y_OpcuaServer';
    }
    OpcuaServerGuard.prototype.canActivate = function (_a) {
        var data = _a.data;
        var contextData = data.contextData;
        return contextData && contextData.type === this.type;
    };
    OpcuaServerGuard = __decorate([
        Injectable()
    ], OpcuaServerGuard);
    return OpcuaServerGuard;
}());

var OpcuaServersComponent = /** @class */ (function () {
    function OpcuaServersComponent(opcuaService, alertService, translateService, context) {
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.context = context;
        this.serverObjectList = [];
        this.initialServerObject = {
            id: '',
            name: 'New Server',
            config: {
                securityMode: 'NONE',
                keystorePass: null,
                keystoreBinaryId: null,
                keystoreFilename: '',
                certificatePass: null,
                serverUrl: '',
                userName: '',
                userPassword: '',
                rescanCron: null,
                timeout: null,
                autoReconnect: true,
                statusCheckInterval: null,
                valid: true
            },
            quickInfo: {
                padlock: 'unlock',
                padlockMsg: ''
            },
            active: true
        };
        this.active = false;
        this.moId = '';
        this.NEW_SERVER_ID = 'new';
        this.initialServerObject.id = this.NEW_SERVER_ID;
    }
    OpcuaServersComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, data, _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.moId = this.opcuaService.getMoId();
                        if (!(this.moId && this.moId.length > 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.opcuaService.getServers(this.moId)];
                    case 1:
                        res = _c.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _c.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        return [3 /*break*/, 7];
                    case 5:
                        _b = this;
                        return [4 /*yield*/, res.json()];
                    case 6:
                        _b.serverObjectList = (_c.sent());
                        this.serverObjectList.map(function (server) { return _this.setQuickInfo(server); });
                        _c.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.localServerObjectExist = function () {
        var _this = this;
        return !!this.serverObjectList.find(function (server) { return server.id === _this.NEW_SERVER_ID; });
    };
    OpcuaServersComponent.prototype.addServer = function () {
        var server = this.initialServerObject;
        this.serverObjectList.push(server);
        this.onPresent(server);
    };
    OpcuaServersComponent.prototype.onSaved = function (server) {
        if (server && server.id) {
            server.gatewayId = this.moId;
            if (server.id === this.NEW_SERVER_ID) {
                this.createServer(server);
            }
            else {
                this.updateServer(server);
            }
        }
    };
    OpcuaServersComponent.prototype.reloadTabs = function () {
        if (this.context) {
            this.context.refreshTabs();
        }
    };
    OpcuaServersComponent.prototype.onCanceled = function (server) {
        if (server && server.id && server.id === this.NEW_SERVER_ID) {
            this.removeServerObjectListById(server.id);
        }
        else {
            // update activity status for UI
            this.serverObjectList.forEach(function (item) {
                if (item.id === server.id) {
                    item.active = false;
                }
            });
            // When server id is not 'new' we just close the details
            delete this.server;
        }
    };
    OpcuaServersComponent.prototype.onRemoved = function (server) {
        if (server.id === this.NEW_SERVER_ID) {
            this.onCanceled(server);
        }
        else {
            this.removeServer(server);
        }
    };
    OpcuaServersComponent.prototype.getKeystore = function (binaryId) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.getKeystore(binaryId)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.onPresent = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            var mo, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(server &&
                            server.id !== this.NEW_SERVER_ID &&
                            server.config &&
                            server.config.keystoreBinaryId)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.getKeystore(server.config.keystoreBinaryId)];
                    case 2:
                        mo = _a.sent();
                        server.config.keystoreFilename = mo.name;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.server = Object.assign({}, server);
                        console.log('Could not get existing keystore:', ex_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.serverObjectList.length > 0) {
                            this.serverObjectList.forEach(function (item) {
                                item.active = false;
                                if (item.id === server.id) {
                                    item.active = true;
                                    server.active = item.active;
                                }
                            });
                            this.setQuickInfo(server);
                            this.server = Object.assign({}, server);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.createServer = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            var response, svr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.createServer(server)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        svr = (_a.sent());
                        this.updateServerObjectListById(this.NEW_SERVER_ID, svr);
                        this.reloadTabs();
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.updateServer = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            var updatedServer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.opcuaService.updateServer(server)];
                    case 1:
                        updatedServer = (_a.sent());
                        if (updatedServer) {
                            this.updateServerObjectListById(updatedServer.id, updatedServer);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.removeServer = function (server) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.opcuaService.removeServer(server)];
                    case 1:
                        _a.sent();
                        this.removeServerObjectListById(server.id);
                        this.reloadTabs();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_2 = _a.sent();
                        console.log('Could not remove OPC UA server:', ex_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaServersComponent.prototype.removeServerObjectListById = function (id) {
        var _this = this;
        this.serverObjectList.forEach(function (item, index) {
            if (item.id === id) {
                _this.serverObjectList.splice(index, 1);
                delete _this.server;
            }
        });
    };
    OpcuaServersComponent.prototype.updateServerObjectListById = function (id, server) {
        var idx = this.serverObjectList.findIndex(function (item) { return item.id === id; });
        if (idx > -1) {
            this.setQuickInfo(server);
            this.serverObjectList[idx] = server;
        }
        delete this.server;
    };
    OpcuaServersComponent.prototype.setQuickInfo = function (server) {
        server.quickInfo = {
            padlock: 'unlock',
            padlockMsg: ''
        };
        if (server && server.config) {
            if (server.config.securityMode) {
                server.quickInfo.padlock = server.config.securityMode !== 'NONE' ? 'lock' : 'unlock';
                server.quickInfo.padlockMsg = this.translateService.instant(gettext('The security policy is set to {{param}}.'), { param: server.config.securityMode });
            }
        }
    };
    OpcuaServersComponent.ctorParameters = function () { return [
        { type: OpcuaService },
        { type: AlertService },
        { type: TranslateService },
        { type: ContextRouteComponent, decorators: [{ type: Optional }] }
    ]; };
    OpcuaServersComponent = __decorate([
        Component({
            selector: 'opcua-servers',
            template: "<div class=\"row split-scroll\">\n  <div class=\"col-md-6 scroll-column has-footer\">\n    <div class=\"c8y-nav-stacked inner-scroll\">\n      <h4 class=\"bottom-m-sm\" translate>OPC UA servers</h4>\n      <p class=\"bottom-m-lg\" translate>\n        Below you can configure one or more OPC UA servers. The OPC UA agent will connect to these servers if they are enabled and the connection state is set to \"connected\".\n      </p>\n      <opcua-server-list [serverList]=\"serverObjectList\" (present)=\"onPresent($event)\">\n      </opcua-server-list>\n    </div>\n    <div class=\"scroll-column-footer\">\n      <button\n        title=\"{{ 'Add server' | translate }}\"\n        class=\"btn btn-add-block\"\n        [disabled]=\"localServerObjectExist()\"\n        (click)=\"addServer()\"\n      >\n        <i [c8yIcon]=\"'plus-circle'\"></i>\n        {{ 'Add server' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <opcua-server-config\n    class=\"col-md-6 scroll-column fast animated\"\n    [ngClass]=\"{ slideInRight: server, slideOutRight: !server }\"\n    (canceled)=\"onCanceled($event)\"\n    (removed)=\"onRemoved($event)\"\n    (saved)=\"onSaved($event)\"\n    [server]=\"server\"\n  >\n  </opcua-server-config>\n</div>\n"
        }),
        __param(3, Optional())
    ], OpcuaServersComponent);
    return OpcuaServersComponent;
}());

var OpcuaDeviceProtocolDescription = /** @class */ (function () {
    function OpcuaDeviceProtocolDescription() {
        this.moId = '';
    }
    Object.defineProperty(OpcuaDeviceProtocolDescription.prototype, "model", {
        set: function (_model) {
            this.moId = _model.referencedServerId;
            this._model = _model;
            this.autoScan = _model.enabled ? '1' : '0';
        },
        enumerable: true,
        configurable: true
    });
    OpcuaDeviceProtocolDescription.prototype.setAutoScanOption = function (data) {
        this._model.enabled = data !== '0' ? true : false;
    };
    __decorate([
        Input()
    ], OpcuaDeviceProtocolDescription.prototype, "model", null);
    OpcuaDeviceProtocolDescription = __decorate([
        Component({
            selector: 'opcua-device-protocol-description',
            template: "<div class=\"card bottom-m-xs\">\n  <div class=\"card-block\">\n    <div class=\"row\">\n      <div class=\"col-md-7\">\n        <div class=\"form-group\">\n          <label translate>Name</label>\n          <label class=\"editable\" [ngClass]=\"{'updated': ctrlName.dirty}\">\n            <input type=\"text\" class=\"form-control\" name=\"name\" #ctrlName=\"ngModel\" [(ngModel)]=\"_model.name\">\n          </label>\n        </div>\n        <div class=\"form-group\">\n          <label translate>Description</label>\n          <label class=\"editable\" [ngClass]=\"{'updated': ctrlDescription.dirty}\">\n            <textarea class=\"form-control\" rows=\"1\" name=\"description\" #ctrlDescription=\"ngModel\"\n              [(ngModel)]=\"_model.description\"></textarea>\n            <span *ngIf=\"_model.description\">{{ _model.description }}</span>\n          </label>\n        </div>\n        <div class=\"flex-row\">\n          <div style=\"min-width: 120px;\">\n            <button type=\"button\" class=\"btn top-m-xs\" name=\"autoScanAddressSpace\" [(ngModel)]=\"autoScan\"\n              (ngModelChange)=\"setAutoScanOption($event)\" btnCheckbox btnCheckboxTrue=\"1\" btnCheckboxFalse=\"0\"\n              ngDefaultControl>\n              <span *ngIf=\"autoScan === '1'\"><i c8yIcon=\"check\" class=\"text-success\"></i>\n                {{ 'Active' | translate }}</span>\n              <span *ngIf=\"autoScan === '0'\">\n                <i c8yIcon=\"ban\" class=\"text-danger\"></i> {{ 'Inactive' | translate }}</span>\n            </button>\n          </div>\n          <small class=\"m-l-16 text-muted\">\n            {{\n              'When active, the gateway scans the address space of all servers and automatically applies\n            this device protocol to all nodes matching the criteria.'\n                | translate\n            }}\n          </small>\n        </div>\n      </div>\n      <div class=\"col-md-5\">\n        <dl class=\"dl-horizontal\" style=\"margin-bottom:0;\">\n          <dt><label translate>Device protocol type</label></dt>\n          <dd>\n            <span class=\"label label-info right-m-sm\" style=\"text-transform: capitalize;\">{{\n              _model.fieldbusType\n            }}</span>\n          </dd>\n          <dt><label class=\"small\" translate>ID</label></dt>\n          <dd style=\"font-size:1.5em\">{{ _model.id }}</dd>\n          <dt><label class=\"small\" translate>Date created</label></dt>\n          <dd>{{ _model.creationTime | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Last update</label></dt>\n          <dd>{{ _model.lastUpdated | c8yDate }}</dd>\n          <dt><label class=\"small\" translate>Fieldbus version</label></dt>\n          <dd>{{ _model.fieldbusVersion }}</dd>\n        </dl>\n      </div>\n    </div>\n  </div>\n</div>",
            viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
        })
    ], OpcuaDeviceProtocolDescription);
    return OpcuaDeviceProtocolDescription;
}());

var DynamicDataSource = /** @class */ (function () {
    function DynamicDataSource(treeControl, addressSpaceService, serverId) {
        this.treeControl = treeControl;
        this.addressSpaceService = addressSpaceService;
        this.serverId = serverId;
        this.dataChange = new BehaviorSubject([]);
        this.treeControl.isExpanded = function (node) { return node.expanded; };
    }
    Object.defineProperty(DynamicDataSource.prototype, "data", {
        get: function () {
            return this.dataChange.value;
        },
        set: function (value) {
            this.treeControl.dataNodes = value;
            this.dataChange.next(value);
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataSource.prototype.connect = function (collectionViewer) {
        var _this = this;
        this.treeControl.expansionModel.onChange.subscribe(function (change) {
            if (change.added || change.removed) {
                _this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(function () { return _this.data; }));
    };
    /** Handle expand/collapse behaviors */
    DynamicDataSource.prototype.handleTreeControl = function (change) {
        var _this = this;
        if (change.added) {
            change.added.forEach(function (node) { return _this.toggleNode(node, true); });
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(function (node) { return _this.toggleNode(node, false); });
        }
    };
    /**
     * Toggle the node, remove from display list
     */
    DynamicDataSource.prototype.toggleNode = function (addressSpaceNode, expand) {
        return __awaiter(this, void 0, void 0, function () {
            var res, children;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!addressSpaceNode.children || addressSpaceNode.children.length === 0)) return [3 /*break*/, 3];
                        addressSpaceNode.currentlyLoadingChildren = true;
                        return [4 /*yield*/, this.addressSpaceService.getChildrenOf(addressSpaceNode, this.serverId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        children = (_a.sent());
                        addressSpaceNode.children = children || [];
                        addressSpaceNode.children = addressSpaceNode.children.map(function (node) {
                            node.parentNode = addressSpaceNode;
                            return node;
                        });
                        addressSpaceNode.currentlyLoadingChildren = false;
                        this.treeControl.expand(addressSpaceNode);
                        _a.label = 3;
                    case 3:
                        addressSpaceNode.expanded = expand && addressSpaceNode.children.length > 0;
                        this.refreshNestedTree(this.data);
                        return [2 /*return*/, Promise.resolve(addressSpaceNode)];
                }
            });
        });
    };
    DynamicDataSource.prototype.catch = function () {
        // do nothing
    };
    DynamicDataSource.prototype.refreshNestedTree = function (treeData) {
        // necessary to rerender tree, otherwise new nodes will not
        // appear, but they are added to the list.
        this.data = [];
        this.dataChange.next(treeData);
        this.triggerResize(); // to resize the modal window when creating a new device protocol
    };
    DynamicDataSource.prototype.triggerResize = function () {
        setTimeout(function () {
            try {
                window.dispatchEvent(new Event('resize'));
            }
            catch (error) {
                // do nothing
            }
        }, 200);
    };
    return DynamicDataSource;
}());

var OpcuaAddressSpaceTreeComponent = /** @class */ (function () {
    function OpcuaAddressSpaceTreeComponent(addressSpaceService, opcuaService, alertService) {
        var _this = this;
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.getChildren = function (node) { return (node.expanded ? node.children : []); };
        this.hasChild = function (_, _nodeData) {
            return _this.addressSpaceService.childrenAvailable(_nodeData.references);
        };
    }
    Object.defineProperty(OpcuaAddressSpaceTreeComponent.prototype, "moId", {
        set: function (id) {
            this._moId = id || undefined;
        },
        enumerable: true,
        configurable: true
    });
    OpcuaAddressSpaceTreeComponent.prototype.ngOnInit = function () {
        this.initializeDataSet();
    };
    OpcuaAddressSpaceTreeComponent.prototype.ngOnChanges = function (changes) {
        if (changes.moId && (changes.moId.currentValue !== changes.moId.previousValue)) {
            this.initializeDataSet();
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.initializeDataSet = function () {
        var _this = this;
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .subscribe(function (nodeNavData) { return _this.openNode(nodeNavData); });
        this.subscriptionRef = this.focusEmitter.subscribe(function (node) {
            _this.focused = _this.isFocusedNode(node) ? undefined : node;
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.ngOnDestroy = function () {
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.openNode = function (nodeNavData) {
        return __awaiter(this, void 0, void 0, function () {
            var node, selectedAncestorIds, nodeId, clonedAncestors, n;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        node = nodeNavData.node, selectedAncestorIds = nodeNavData.selectedAncestorIds;
                        // We just set the nodeId when the selectedAncestorIds variable an empty array.
                        // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
                        // from the root node.
                        if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                            nodeId = node.nodeId;
                        }
                        // Always recreate the tree when routing to a specific nested node,
                        // because previous modifications to the tree-structure could cause errors
                        // while traversing with 'old' tree-data
                        // -----------------
                        // setupTree is able to handle nodeId = undefined
                        return [4 /*yield*/, this.setupTree(nodeId)];
                    case 1:
                        // Always recreate the tree when routing to a specific nested node,
                        // because previous modifications to the tree-structure could cause errors
                        // while traversing with 'old' tree-data
                        // -----------------
                        // setupTree is able to handle nodeId = undefined
                        _a.sent();
                        if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                            return [2 /*return*/];
                        }
                        if (!(nodeNavData && this.dataSource)) return [3 /*break*/, 3];
                        clonedAncestors = clone(selectedAncestorIds);
                        clonedAncestors.shift();
                        return [4 /*yield*/, this.dataSource.toggleNode(this.dataSource.data[0], true)];
                    case 2:
                        n = _a.sent();
                        this.setChildNodes(n.children, clonedAncestors);
                        this.toggleFocusedNode(node);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.setChildNodes = function (nodes, ids) {
        var _this = this;
        if (nodes) {
            ids.forEach(function (id) { return __awaiter(_this, void 0, void 0, function () {
                var match, idx, toggledNode;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            match = nodes.find(function (n) { return n.nodeId === id; });
                            if (!(match && ids.length > 0)) return [3 /*break*/, 2];
                            idx = ids.findIndex(function (value) { return value === id; });
                            if (idx >= 0) {
                                ids.splice(idx, 1);
                            }
                            return [4 /*yield*/, this.dataSource.toggleNode(match, true)];
                        case 1:
                            toggledNode = _a.sent();
                            this.setChildNodes(toggledNode.children, ids);
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        }
    };
    OpcuaAddressSpaceTreeComponent.prototype.setupTree = function (nodeId) {
        return __awaiter(this, void 0, void 0, function () {
            var res, data, _a, rootNode;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.loading = true;
                        if (!this._moId || this._moId.length === 0) {
                            this._moId = this.opcuaService.getMoId();
                        }
                        return [4 /*yield*/, this.addressSpaceService.getNode(this._moId, nodeId)];
                    case 1:
                        res = _b.sent();
                        if (!res) return [3 /*break*/, 8];
                        if (!(res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        this.dataSource = undefined;
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, res.json()];
                    case 6:
                        rootNode = (_b.sent());
                        this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                        this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                        this.dataSource.data = [rootNode];
                        _b.label = 7;
                    case 7:
                        this.loading = false;
                        return [3 /*break*/, 9];
                    case 8:
                        this.loading = false;
                        _b.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    OpcuaAddressSpaceTreeComponent.prototype.getMoId = function () {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    };
    OpcuaAddressSpaceTreeComponent.prototype.getIcon = function (nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    };
    OpcuaAddressSpaceTreeComponent.prototype.toggleFocusedNode = function (node) {
        var relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    };
    OpcuaAddressSpaceTreeComponent.prototype.isFocusedNode = function (node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    };
    OpcuaAddressSpaceTreeComponent.prototype.getRelativePath = function (node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    };
    OpcuaAddressSpaceTreeComponent.ctorParameters = function () { return [
        { type: AddressSpaceService },
        { type: OpcuaService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "moId", null);
    __decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "node", void 0);
    __decorate([
        Input()
    ], OpcuaAddressSpaceTreeComponent.prototype, "focusEmitter", void 0);
    __decorate([
        Output()
    ], OpcuaAddressSpaceTreeComponent.prototype, "selectedNode", void 0);
    OpcuaAddressSpaceTreeComponent = __decorate([
        Component({
            selector: 'opcua-address-space-tree',
            template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" (click)=\"toggleFocusedNode(node)\"\n    [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\">\n      <span>\n        <i class=\"right-m-xs\" \n        [c8yIcon]=\"getIcon(node.nodeClassName)\" \n        [ngClass]=\"{'strong':isFocusedNode(node)}\" \n        style=\"cursor: pointer\"></i>\n        {{node.displayName}}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button cdkTreeNodeToggle class=\"btn-clean text-primary right-m-xs\" [disabled]=\"node.currentlyLoadingChildren\">\n          <i class=\"fa\" [ngClass]=\"{'fa-plus-square': !node.expanded, 'fa-minus-square': node.expanded}\"></i>\n        </button>\n        <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(node.nodeClassName)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"></i>\n        <span (click)=\"toggleFocusedNode(node)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"> {{node.displayName}} </span>\n        <span class=\"left-m-xs\" [style.visibility]=\"node.currentlyLoadingChildren ? 'visible': 'hidden'\">\n          <i class=\"fa fa-circle-o-notch fa-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div style=\"padding: 8px;\" *ngIf=\"loading\">\n  <div class=\"spinner\" style=\"position: relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>"
        })
    ], OpcuaAddressSpaceTreeComponent);
    return OpcuaAddressSpaceTreeComponent;
}());

var OpcuaAutoApplySettingsComponent = /** @class */ (function () {
    function OpcuaAutoApplySettingsComponent(inventoryService) {
        this.inventoryService = inventoryService;
        this.opcuaServers = [];
        this.selected = [];
        this.constraints = {
            browsePathMatchesRegex: '',
            matchesNodeIds: [],
            serverObjectHasFragment: '',
            matchesServerIds: []
        };
        this.placeholderSelectServerIds = gettext('Select server IDs from list');
    }
    OpcuaAutoApplySettingsComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, matchesServerIds;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryService.list({
                            pageSize: 1000,
                            withTotalPages: true,
                            type: 'c8y_OpcuaServer'
                        })];
                    case 1:
                        data = (_a.sent()).data;
                        this.opcuaServers = data;
                        this.selected = [];
                        matchesServerIds = this.constraints.matchesServerIds;
                        data.forEach(function (server) {
                            if (matchesServerIds &&
                                matchesServerIds.length > 0 &&
                                matchesServerIds.find(function (itemId) { return itemId === server.id; })) {
                                _this.selected.push(server);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(OpcuaAutoApplySettingsComponent.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (model) {
            if (model && model.applyConstraints) {
                this.constraints = model.applyConstraints;
            }
            this._model = model;
        },
        enumerable: true,
        configurable: true
    });
    OpcuaAutoApplySettingsComponent.prototype.serverIdsSelected = function (items) {
        if (this.constraints) {
            this.constraints.matchesServerIds = items.map(function (item) { return item.id; });
        }
        this.selected = items;
    };
    OpcuaAutoApplySettingsComponent.prototype.onChangeNodeId = function (event) {
        if (event.target.checked) {
            this.showRootNodes = true;
            this.add();
        }
        else {
            this.showRootNodes = false;
            this.constraints.matchesNodeIds = [];
        }
    };
    OpcuaAutoApplySettingsComponent.prototype.onChangeShowServerIds = function (event) {
        if (!event.target.checked) {
            this.constraints.matchesServerIds = [];
            this.showServerIds = false;
            this.selected = [];
        }
        else {
            this.showServerIds = true;
        }
    };
    OpcuaAutoApplySettingsComponent.prototype.onChangeShowBrowsePath = function (event) {
        if (!event.target.checked) {
            this.constraints.browsePathMatchesRegex = '';
            this.showBrowsePath = false;
        }
        else {
            this.showBrowsePath = true;
        }
    };
    OpcuaAutoApplySettingsComponent.prototype.onChangeShowServerFragment = function (event) {
        if (!event.target.checked) {
            this.constraints.serverObjectHasFragment = '';
            this.showServerFragment = false;
        }
        else {
            this.showServerFragment = true;
        }
    };
    OpcuaAutoApplySettingsComponent.prototype.add = function () {
        this.constraints.matchesNodeIds.push('');
    };
    OpcuaAutoApplySettingsComponent.prototype.remove = function (index) {
        this.constraints.matchesNodeIds.splice(index, 1);
    };
    OpcuaAutoApplySettingsComponent.prototype.trackByFn = function (index, item) {
        return index;
    };
    OpcuaAutoApplySettingsComponent.ctorParameters = function () { return [
        { type: InventoryService }
    ]; };
    __decorate([
        Input()
    ], OpcuaAutoApplySettingsComponent.prototype, "model", null);
    OpcuaAutoApplySettingsComponent = __decorate([
        Component({
            selector: 'opcua-auto-apply',
            template: "<div class=\"row\">\n  <div class=\"col-md-4\">\n    <p translate>\n      Specifying auto-apply constraints allows you to limit the scope where the device protocols are\n      applied, for example by specifying a set of possible servers or node IDs.\n    </p>\n    <p translate>\n      If no constraints are set, device protocols are applied at any fitting location on the OPC UA\n      server.\n    </p>\n  </div>\n\n  <div class=\"col-md-6\">\n    <ul class=\"list-group\" style=\"box-shadow: none;\">\n      <!-- Limit device type to a set of servers -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to a set of servers' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.matchesServerIds !== null && constraints.matchesServerIds.length > 0\n            \"\n            (change)=\"onChangeShowServerIds($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to a set of servers' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [collapse]=\"\n            (!showServerIds &&\n              (constraints.matchesServerIds !== null && constraints.matchesServerIds.length < 1)) ||\n            (!showServerIds && constraints.matchesServerIds === null)\n          \"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <c8y-select\n              [items]=\"opcuaServers\"\n              [selected]=\"selected\"\n              [placeholder]=\"placeholderSelectServerIds\"\n              (onChange)=\"serverIdsSelected($event)\"\n            >\n            </c8y-select>\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type scope in the address space -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol scope in the address space' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length > 0\n            \"\n            (change)=\"onChangeShowBrowsePath($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol scope in the address space' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"\n            (!showBrowsePath &&\n              constraints.browsePathMatchesRegex !== null &&\n              constraints.browsePathMatchesRegex.length < 1) ||\n            (!showBrowsePath && constraints.browsePathMatchesRegex === null)\n          \"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"browsePath\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} /objects/devices/.*\"\n              [(ngModel)]=\"constraints.browsePathMatchesRegex\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to servers with a certain fragment-->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to servers with a certain fragment' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length > 0\"\n            (change)=\"onChangeShowServerFragment($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to servers with a certain fragment' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showServerFragment && constraints.serverObjectHasFragment !== null && constraints.serverObjectHasFragment.length < 1) || (!showServerFragment && constraints.serverObjectHasFragment === null)\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"serverFragment\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_SomeServerMarker\"\n              [(ngModel)]=\"constraints.serverObjectHasFragment\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to a specific root node ID -->\n      <li class=\"list-group-item\">\n        <label\n          title=\"{{ 'Limit device protocol to specific root nodes ID' | translate }}\"\n          class=\"c8y-checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length > 0\"\n            (change)=\"onChangeNodeId($event)\"\n          />\n          <span></span>\n          <span class=\"m-l-8\">\n            {{ 'Limit device protocol to specific root nodes ID' | translate }}\n          </span>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"(!showRootNodes && constraints.matchesNodeIds !== null && constraints.matchesNodeIds.length < 1) || ( !showRootNodes && constraints.matchesNodeIds === null)\"\n        >\n            <ul c8yInputGroupListContainer class=\"list-unstyled p-t-16\">\n              <li\n                class=\"m-b-8\"\n                *ngFor=\"let item of constraints.matchesNodeIds; let i = index; trackBy: trackByFn\"\n              >\n                <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n                  <c8y-form-group class=\"form-group--tooltip-validation\">\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{ 'e.g.' | translate }} nodeId\"\n                      [(ngModel)]=\"constraints.matchesNodeIds[i]\"\n                      [required]=\"true\"\n                    />\n                  </c8y-form-group>\n                </c8y-input-group-list>\n              </li>\n            </ul> \n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n"
        })
    ], OpcuaAutoApplySettingsComponent);
    return OpcuaAutoApplySettingsComponent;
}());

var routes = [
    {
        context: ViewContext.Device,
        path: 'opcua-servers',
        component: OpcuaServersComponent,
        label: gettext('OPC UA server'),
        icon: 'server',
        canActivate: [OpcuaAgentGuard, OpcuaMicroserviceGuard]
    },
    {
        context: ViewContext.Device,
        path: 'address-space',
        component: OpcuaAddressSpaceComponent,
        label: gettext('Address space'),
        icon: 'sitemap',
        canActivate: [OpcuaServerGuard, OpcuaMicroserviceGuard]
    }
];
var deviceProtocolRoutes = [
    {
        path: 'deviceprotocols/opcuaV2/:id',
        component: OpcuaDeviceProtocolDetailComponent
    }
];
var ɵ0 = routes;
var OpcuaProtocolModule = /** @class */ (function () {
    function OpcuaProtocolModule() {
    }
    OpcuaProtocolModule = __decorate([
        NgModule({
            declarations: [
                OpcuaServersComponent,
                OpcuaServerListComponent,
                OpcuaServerConfigComponent,
                OpcuaAddressSpaceComponent,
                OpcuaAddressSpaceTreeComponent,
                OpcuaAddressSpaceDetailComponent,
                OpcuaDeviceProtocolDescription,
                OpcuaDeviceProtocolDetailComponent,
                OpcuaDeviceProtocolDataReportingComponent,
                OpcuaDeviceProtocolMapping,
                OpcuaDeviceProtocolObjectMapping,
                OpcuaDeviceProtocolMappingCustomAction,
                OpcuaDeviceProtocolObjectMappingStatus,
                OpcuaAutoApplySettingsComponent,
                OpcuaDeviceProtocolBrowsePathValidation
            ],
            imports: [
                CoreModule,
                FormsModule,
                ReactiveFormsModule,
                DropAreaModule,
                ButtonsModule,
                CdkTreeModule,
                RouterModule.forRoot(deviceProtocolRoutes, { useHash: true }),
                TooltipModule.forRoot(),
                PopoverModule.forRoot(),
                DeviceStatusModule,
                BrowserAnimationsModule,
                CollapseModule.forRoot(),
                BsDropdownModule.forRoot()
            ],
            entryComponents: [
                OpcuaAddressSpaceTreeComponent,
                OpcuaAddressSpaceComponent,
                OpcuaServersComponent
            ],
            providers: [
                OpcuaAgentGuard,
                OpcuaServerGuard,
                OpcuaMicroserviceGuard,
                OpcuaService,
                AddressSpaceService,
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                }
            ]
        })
    ], OpcuaProtocolModule);
    return OpcuaProtocolModule;
}());

var opcuaAddressSpaceTreeComponent = downgradeComponent({
    component: OpcuaAddressSpaceTreeComponent,
    inputs: ['moId'],
    outputs: ['selectedNode']
});

var NAME = 'c8y.upgrade.opcua';
var angularJsModule = module(NAME, [])
    .directive('c8yOpcuaAddressSpaceTree', opcuaAddressSpaceTreeComponent);
var ng1Modules = [NAME];
registerNgModule(ng1Modules);

/**
 * Generated bundle index. Do not edit.
 */

export { AddressSpaceService, DynamicDataSource, OpcuaAddressSpaceComponent, OpcuaAddressSpaceDetailComponent, OpcuaAddressSpaceTreeComponent, OpcuaAgentGuard, OpcuaAutoApplySettingsComponent, OpcuaDeviceProtocolBrowsePathValidation, OpcuaDeviceProtocolDataReportingComponent, OpcuaDeviceProtocolDescription, OpcuaDeviceProtocolDetailComponent, OpcuaDeviceProtocolMapping, OpcuaDeviceProtocolMappingCustomAction, OpcuaDeviceProtocolObjectMapping, OpcuaDeviceProtocolObjectMappingStatus, OpcuaMicroserviceGuard, OpcuaProtocolModule, OpcuaServerConfigComponent, OpcuaServerGuard, OpcuaServerListComponent, OpcuaServersComponent, OpcuaService, ng1Modules, ɵ0 };
//# sourceMappingURL=c8y-ngx-components-protocol-opcua.js.map
