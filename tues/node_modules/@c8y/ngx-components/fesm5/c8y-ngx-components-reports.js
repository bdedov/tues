import { __awaiter, __generator, __decorate } from 'tslib';
import { Injectable, EventEmitter, Output, Component, Input, NgModule } from '@angular/core';
import { gettext, AlertService, OptionsService, CoreModule, FormsModule } from '@c8y/ngx-components';
import { orderBy, remove, some, isEqual, cloneDeep } from 'lodash-es';
import { InventoryService, FetchClient, UserService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { formatDate } from '@angular/common';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { module } from 'angular';
import { registerNgModule } from '@c8y/ng1-modules/core/bootstrap';
import { downgradeComponent, downgradeInjectable } from '@angular/upgrade/static';

var ReportsService = /** @class */ (function () {
    function ReportsService(alertService, inventoryService, client) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.ERROR_MESSAGES = {
            pattern_multiEmail: gettext('Invalid email addresses.'),
            pattern_singleEmail: gettext('Invalid email address.')
        };
        this.microserviceUrl = '/service/reporting/schedule';
        this.headers = { 'Content-Type': 'application/json' };
    }
    ReportsService.prototype.getExport = function (exportId) {
        return __awaiter(this, void 0, void 0, function () {
            var exp, exportDetail, data, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryService.detail(exportId)];
                    case 1:
                        exportDetail = _a.sent();
                        data = exportDetail.data, res = exportDetail.res;
                        if (res.status !== 200) {
                            this.alertService.addServerFailure({ data: data, res: res });
                        }
                        else {
                            exp = data ? data : {};
                        }
                        return [2 /*return*/, exp];
                }
            });
        });
    };
    ReportsService.prototype.getScheduleList = function (exportId) {
        return __awaiter(this, void 0, void 0, function () {
            var exp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExport(exportId)];
                    case 1:
                        exp = _a.sent();
                        return [2 /*return*/, this.extractScheduleListFromExport(exp)];
                }
            });
        });
    };
    ReportsService.prototype.extractScheduleListFromExport = function (exp) {
        var scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    };
    ReportsService.prototype.addSchedule = function (schedule, exportId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [], [schedule])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.prototype.updateSchedule = function (oldSchedule, schedule, exportId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [oldSchedule], [schedule])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.prototype.updateSchedules = function (exportId, schedulesToRemove, schedulesToAdd) {
        if (schedulesToRemove === void 0) { schedulesToRemove = []; }
        if (schedulesToAdd === void 0) { schedulesToAdd = []; }
        return __awaiter(this, void 0, void 0, function () {
            var success, exp, schedules, _a, data, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        success = false;
                        return [4 /*yield*/, this.getExport(exportId)];
                    case 1:
                        exp = _b.sent();
                        schedules = this.extractScheduleListFromExport(exp);
                        remove(schedules, function (schedule) {
                            return some(schedulesToRemove, function (scheduleToRemove) { return isEqual(schedule, scheduleToRemove); });
                        });
                        schedules.push.apply(schedules, schedulesToAdd);
                        exp.c8y_ScheduleConfiguration = schedules;
                        return [4 /*yield*/, this.inventoryService.update(exp)];
                    case 2:
                        _a = _b.sent(), data = _a.data, res = _a.res;
                        if (!(res.status === 200)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.reschedule(exportId)];
                    case 3:
                        success = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        this.alertService.addServerFailure({ data: data, res: res });
                        _b.label = 5;
                    case 5: return [2 /*return*/, success];
                }
            });
        });
    };
    ReportsService.prototype.reschedule = function (exportId) {
        return __awaiter(this, void 0, void 0, function () {
            var options, rescheduling;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: 'PUT',
                            headers: this.headers
                        };
                        return [4 /*yield*/, this.client.fetch(this.microserviceUrl + "/" + exportId, options)];
                    case 1:
                        rescheduling = _a.sent();
                        return [2 /*return*/, rescheduling.status === 200];
                }
            });
        });
    };
    ReportsService.prototype.deleteSchedule = function (schedule, exportId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [schedule], [])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.ctorParameters = function () { return [
        { type: AlertService },
        { type: InventoryService },
        { type: FetchClient }
    ]; };
    ReportsService = __decorate([
        Injectable()
    ], ReportsService);
    return ReportsService;
}());

var ActionType;
(function (ActionType) {
    ActionType["CREATE"] = "create";
    ActionType["EDIT"] = "edit";
    ActionType["DUPLICATE"] = "duplicate";
})(ActionType || (ActionType = {}));
var Base;
(function (Base) {
    Base[Base["Initial"] = 1] = "Initial";
    Base[Base["Hour"] = 2] = "Hour";
    Base[Base["Day"] = 3] = "Day";
    Base[Base["Week"] = 4] = "Week";
    Base[Base["Month"] = 5] = "Month";
    Base[Base["Year"] = 6] = "Year";
})(Base || (Base = {}));

var CronService = /** @class */ (function () {
    function CronService(translateService) {
        this.translateService = translateService;
        this.daysOfWeekPosix = [];
        this.daysOfMonth = [
            { value: '1', label: '1.' },
            { value: '2', label: '2.' },
            { value: '3', label: '3.' },
            { value: '4', label: '4.' },
            { value: '5', label: '5.' },
            { value: '6', label: '6.' },
            { value: '7', label: '7.' },
            { value: '8', label: '8.' },
            { value: '9', label: '9.' },
            { value: '10', label: '10.' },
            { value: '11', label: '11.' },
            { value: '12', label: '12.' },
            { value: '13', label: '13.' },
            { value: '14', label: '14.' },
            { value: '15', label: '15.' },
            { value: '16', label: '16.' },
            { value: '17', label: '17.' },
            { value: '18', label: '18.' },
            { value: '19', label: '19.' },
            { value: '20', label: '20.' },
            { value: '21', label: '21.' },
            { value: '22', label: '22.' },
            { value: '23', label: '23.' },
            { value: '24', label: '24.' },
            { value: '25', label: '25.' },
            { value: '26', label: '26.' },
            { value: '27', label: '27.' },
            { value: '28', label: '28.' },
            { value: '29', label: '29.' },
            { value: '30', label: '30.' },
            { value: '31', label: '31.' }
        ];
        this.months = [];
        this.hours = [];
        this.minutes = [];
        this.intervals = [
            { value: 2, label: gettext('Hour') },
            { value: 3, label: gettext('Day') },
            { value: 4, label: gettext('Week') },
            { value: 5, label: gettext('Month') },
            { value: 6, label: gettext('Year') }
        ];
        for (var x = 0; x < 24; x++) {
            this.hours.push({ value: x.toString(), label: "" + x });
        }
        for (var x = 0; x < 60; x = x + 5) {
            this.minutes.push({ value: x.toString(), label: "" + x });
        }
        for (var x = 0; x < 7; x++) {
            this.daysOfWeekPosix.push({
                value: x.toString(),
                label: this.getWeekDayName({ weekday: x })
            });
        }
        for (var x = 1; x < 13; x++) {
            this.months.push({
                value: x.toString(),
                label: this.getMonthName({ month: x })
            });
        }
    }
    CronService.prototype.generateCron = function (cronConfig) {
        var cron = '';
        cron = cronConfig.minute ? "" + cronConfig.minute : '*';
        cron += cronConfig.hour ? " " + cronConfig.hour : ' *';
        cron += cronConfig.day ? " " + cronConfig.day : ' *';
        cron += cronConfig.month ? " " + cronConfig.month : ' *';
        cron += cronConfig.weekday ? " " + cronConfig.weekday : ' *';
        return cron;
    };
    CronService.prototype.generateCronConfig = function (cron) {
        var parts = cron.split(/\s+/);
        var cronConfig = {
            minute: parts[0],
            hour: parts[1],
            day: parts[2],
            month: parts[3],
            weekday: parts[4]
        };
        return cronConfig;
    };
    CronService.prototype.getBase = function (cronConfig) {
        var base = Base.Initial;
        if (cronConfig.minute !== '*' &&
            cronConfig.hour === '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Hour;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Day;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday !== '*') {
            base = Base.Week;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Month;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month !== '*' &&
            cronConfig.weekday === '*') {
            base = Base.Year;
        }
        else {
            // cronConfig invalid
        }
        return base;
    };
    CronService.prototype.validateModels = function (base, cronConfig) {
        var valid;
        switch (base) {
            case Base.Initial: // Please select
                valid = false;
                break;
            case Base.Hour:
                if (cronConfig.minute !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Day:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Week:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Month:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Year:
                if (cronConfig.minute !== '*' &&
                    cronConfig.hour !== '*' &&
                    cronConfig.day !== '*' &&
                    cronConfig.month !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            default:
                valid = false;
        }
        return valid;
    };
    CronService.prototype.clearNextModels = function (base, cronConfig) {
        if (base === Base.Initial) {
            // please select, delete all
            // cron expression: every minute at second 0
            cronConfig.minute = '*';
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Hour) {
            // hour, don't delete minutes
            // cron expression: every hour, at whatever minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Day) {
            // day, don't delete minutes and hours
            // cron expression: every day of every month, at whatever hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Week) {
            // week, delete month and day
            // cron expression: every month, at whatever weekday, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = cronConfig.weekday === '*' || cronConfig.weekday === '?' ? this.daysOfWeekPosix[0].value : cronConfig.weekday;
        }
        else if (base === Base.Month) {
            // month, delete month and weekday
            // cron expression: every month, at whatever day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Year) {
            // year, delete weekday
            // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = cronConfig.month === '*' ? this.months[0].value : cronConfig.month;
            cronConfig.weekday = '*';
        }
    };
    CronService.prototype.getWeekDayName = function (cronConfig) {
        var date = new Date(0);
        var firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
        date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
        return formatDate(date, 'EEEE', this.translateService.currentLang);
    };
    CronService.prototype.getMonthDayName = function (cronConfig) {
        var name = '';
        this.daysOfMonth.forEach(function (item) {
            if (item.value === cronConfig.day) {
                name = item.label;
            }
        });
        return name;
    };
    CronService.prototype.getMonthName = function (cronConfig) {
        var date = new Date(0);
        date.setMonth(parseInt(cronConfig.month, 10) - 1);
        return formatDate(date, 'LLLL', this.translateService.currentLang);
    };
    CronService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    CronService = __decorate([
        Injectable()
    ], CronService);
    return CronService;
}());

var ScheduleModalComponent = /** @class */ (function () {
    function ScheduleModalComponent(reportsService, modalRef, cronService) {
        this.reportsService = reportsService;
        this.modalRef = modalRef;
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.ActionType = ActionType;
        this.multiEmailPattern = /^([a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*,?)*$/i;
        this.singleEmailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
        this.cronExpression = '* * * * *';
        this.validCron = false;
        this.emitterPayload = {
            success: false,
            message: '',
            schedule: { timestamp: undefined, emailConfig: undefined, cronConfig: undefined }
        };
        this.placeholdersInfo = gettext('Available placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to downloadable file is: {tenant-domain}/inventory/binaries/{binaryId}.');
    }
    ScheduleModalComponent.prototype.ngOnInit = function () {
        this.oldSchedule = cloneDeep(this.schedule);
        this.populateEmailFieldsFromSchedule(this.schedule);
        this.cronExpression = this.cronService.generateCron(this.schedule.cronConfig);
        this.validCron = this.cronService.validateModels(this.cronService.getBase(this.schedule.cronConfig), this.schedule.cronConfig);
    };
    ScheduleModalComponent.prototype.populateEmailFieldsFromSchedule = function (schedule) {
        if (schedule.emailConfig.to && schedule.emailConfig.to.length) {
            this.emailTo = schedule.emailConfig.to.toString();
        }
        if (schedule.emailConfig.cc && schedule.emailConfig.cc.length) {
            this.emailCc = schedule.emailConfig.cc.toString();
        }
        if (schedule.emailConfig.bcc && schedule.emailConfig.bcc.length) {
            this.emailBcc = schedule.emailConfig.bcc.toString();
        }
        if (schedule.emailConfig.replyTo) {
            this.emailReplyTo = schedule.emailConfig.replyTo;
        }
        if (schedule.emailConfig.subject) {
            this.emailSubject = schedule.emailConfig.subject;
        }
        if (schedule.emailConfig.text) {
            this.emailText = schedule.emailConfig.text;
        }
    };
    ScheduleModalComponent.prototype.save = function () {
        this.populateScheduleFromCronExpression();
        this.populateScheduleFromEmailFields();
        if (this.actionType === ActionType.CREATE || this.actionType === ActionType.DUPLICATE) {
            var date = new Date();
            var timestamp = date.getTime();
            this.schedule.timestamp = timestamp;
        }
        this.emitterPayload.success = true;
        this.emitterPayload.schedule = this.schedule;
        this.modalRef.hide();
        // signal to the parent component to update list
        this.emitter.emit(this.emitterPayload);
    };
    ScheduleModalComponent.prototype.cancel = function () {
        this.modalRef.hide();
    };
    ScheduleModalComponent.prototype.getCron = function (cron) {
        this.validCron = cron.valid;
        if (cron.valid) {
            this.cronExpression = cron.cron;
        }
    };
    ScheduleModalComponent.prototype.populateScheduleFromCronExpression = function () {
        this.schedule.cronConfig = this.cronService.generateCronConfig(this.cronExpression);
    };
    ScheduleModalComponent.prototype.convertStringOfEmailsToArray = function (stringOfEmails) {
        var arr = [];
        if (stringOfEmails) {
            var parts = stringOfEmails.split(',');
            parts.forEach(function (item) {
                if (item) {
                    arr.push(item);
                }
            });
        }
        return arr;
    };
    ScheduleModalComponent.prototype.populateScheduleFromEmailFields = function () {
        this.schedule.emailConfig.to = this.emailTo
            ? this.convertStringOfEmailsToArray(this.emailTo)
            : null;
        this.schedule.emailConfig.cc = this.emailCc
            ? this.convertStringOfEmailsToArray(this.emailCc)
            : null;
        this.schedule.emailConfig.bcc = this.emailBcc
            ? this.convertStringOfEmailsToArray(this.emailBcc)
            : null;
        this.schedule.emailConfig.replyTo = this.emailReplyTo;
        this.schedule.emailConfig.subject = this.emailSubject;
        this.schedule.emailConfig.text = this.emailText;
    };
    ScheduleModalComponent.ctorParameters = function () { return [
        { type: ReportsService },
        { type: BsModalRef },
        { type: CronService }
    ]; };
    __decorate([
        Output()
    ], ScheduleModalComponent.prototype, "emitter", void 0);
    ScheduleModalComponent = __decorate([
        Component({
            selector: 'schedule-modal',
            template: "<div class=\"modal-header text-center bg-primary\">\n  <header class=\"text-white\">\n    <div style=\"font-size: 62px;\">\n      <span c8yIcon=\"c8y-report\"></span>\n    </div>\n    <h4 class=\"text-uppercase\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" translate>New export schedule</span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" translate>Edit export schedule</span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" translate>Duplicate export schedule</span>\n    </h4>\n  </header>\n</div>\n\n<div class=\"modal-body\">\n  <p class=\"lead text-center p-t-24 m-b-0\" translate>On schedule send export via email</p>\n</div>\n<div class=\"modal-inner-scroll smart-rule-control\">\n  <form #scheduleForm=\"ngForm\" class=\"edit-smart-rule-details\">\n    <div class=\"list-group\">\n      <div class=\"list-group-item bg-gray-white\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light m-r-8\">1</span>\n          <strong translate>Frequency</strong>\n        </div>\n        <div class=\"p-t-16\">\n          <div class=\"form-group\">\n            <cron [cronIn]=\"cronExpression\" (emitter)=\"getCron($event)\" name=\"cron\"></cron>\n          </div>\n        </div>\n      </div>\n      <div class=\"list-group-item\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light m-r-8\">2</span>\n          <div class=\"d-inline-block\">\n            <strong translate>Send email</strong>\n            <p class=\"help-block text-muted small p-absolute\">\n              <i class=\"text-info m-r-4 text-14\" c8yIcon=\"info-circle\"></i>\n              <span translate>Enter one or more valid email addresses, separated with a comma.</span>\n            </p>\n          </div>\n        </div>\n        <div class=\"p-t-24\">\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Send to</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                name=\"to\"\n                [(ngModel)]=\"emailTo\"\n                placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                required\n                [pattern]=\"multiEmailPattern\"\n              />\n              <c8y-messages>\n                <c8y-message\n                  name=\"pattern\"\n                  [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>CC</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"cc\"\n                placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                [(ngModel)]=\"emailCc\"\n                [pattern]=\"multiEmailPattern\"\n              />\n              <c8y-messages>\n                <c8y-message\n                  name=\"pattern\"\n                  [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>BCC</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"bcc\"\n                placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                [(ngModel)]=\"emailBcc\"\n                [pattern]=\"multiEmailPattern\"\n              />\n              <c8y-messages>\n                <c8y-message\n                  name=\"pattern\"\n                  [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Reply to (single email address)</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"replyTo\"\n                placeholder=\"{{ 'e.g. joe.doe@example.com (single email address)`LOCALIZE`' | translate }}\"\n                [(ngModel)]=\"emailReplyTo\"\n                [pattern]=\"singleEmailPattern\"\n              />\n              <c8y-messages>\n                <c8y-message\n                  name=\"pattern\"\n                  [text]=\"reportsService.ERROR_MESSAGES.pattern_singleEmail\"\n                ></c8y-message>\n              </c8y-messages>\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Subject</label>\n            <c8y-form-group>\n              <input\n                type=\"text\"\n                class=\"form-control span\"\n                name=\"subject\"\n                [(ngModel)]=\"emailSubject\"\n                placeholder=\"{{ 'e.g. Daily report' | translate }}\"\n                required\n              />\n            </c8y-form-group>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label\" translate>Message</label>\n            <c8y-form-group>\n              <textarea\n                class=\"form-control\"\n                name=\"text\"\n                [(ngModel)]=\"emailText\"\n                placeholder=\"{{ 'Message' | translate }}\"\n                rows=\"4\"\n                required\n              ></textarea>\n              <p class=\"help-block text-muted\">\n                {{ placeholdersInfo | translate }}\n              </p>\n            </c8y-form-group>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-default\" (click)=\"cancel()\" title=\"{{ 'Cancel' | translate }}\">\n    {{ 'Cancel' | translate }}\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"!validCron || !scheduleForm.form.valid\"\n  >\n    <span>\n      <span *ngIf=\"actionType === ActionType.CREATE\" title=\"{{ 'Create' | translate }}\">\n        {{ 'Create' | translate }}\n      </span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" title=\"{{ 'Save' | translate }}\">\n        {{ 'Save' | translate }}\n      </span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" title=\"{{ 'Duplicate' | translate }}\">\n        {{ 'Duplicate' | translate }}\n      </span>\n    </span>\n  </button>\n</div>\n"
        })
    ], ScheduleModalComponent);
    return ScheduleModalComponent;
}());

var ExportSchedulesComponent = /** @class */ (function () {
    function ExportSchedulesComponent(reportsService, bsModalService, cronService, translateService, userService, optionsService) {
        this.reportsService = reportsService;
        this.bsModalService = bsModalService;
        this.cronService = cronService;
        this.translateService = translateService;
        this.userService = userService;
        this.optionsService = optionsService;
        this.onSchedulesUpdate = new EventEmitter();
        this.scheduleList = [];
        this.initialSchedule = {
            timestamp: null,
            emailConfig: {
                to: [],
                cc: [],
                bcc: [],
                replyTo: '',
                text: '',
                subject: ''
            },
            cronConfig: {
                minute: '0',
                hour: '0',
                day: '1',
                month: '1',
                weekday: '?'
            }
        };
        this.listClass = 'interact-list';
        this.sortReverse = false;
        this.isOpen = {};
        this.isEditMenuOpen = false;
        this.currentUserEmail = '';
        this.hasRequiredRole = false;
        this.defaultExportEmailTemplate = this.translateService.instant(gettext('File with exported data can be downloaded from {tenant-domain}/inventory/binaries/{binaryId}.'));
        this.loadingStatus = {
            inProgress: false,
            done: false,
            error: false
        };
    }
    Object.defineProperty(ExportSchedulesComponent.prototype, "exportId", {
        set: function (exportId) {
            this._exportId = exportId;
        },
        enumerable: true,
        configurable: true
    });
    ExportSchedulesComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, currentUserEmail, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.checkRole()];
                    case 1:
                        _a.hasRequiredRole = _d.sent();
                        this.getScheduleList(true);
                        return [4 /*yield*/, this.getCurrentUserEmail()];
                    case 2:
                        currentUserEmail = _d.sent();
                        _b = this.initialSchedule.emailConfig;
                        return [4 /*yield*/, this.optionsService.getTenantOption('configuration', 'export.data.mail.text', this.defaultExportEmailTemplate)];
                    case 3:
                        _b.text = _d.sent();
                        this.initialSchedule.emailConfig.to = currentUserEmail;
                        _c = this;
                        return [4 /*yield*/, this.reportsService.getExport(this._exportId)];
                    case 4:
                        _c.exp = _d.sent();
                        this.initialSchedule.emailConfig.subject = this.translateService.instant(gettext('Export of "{{expName}}"'), { expName: this.exp.name });
                        return [2 /*return*/];
                }
            });
        });
    };
    ExportSchedulesComponent.prototype.ngOnChanges = function () {
        this.translateButtonTitles();
    };
    ExportSchedulesComponent.prototype.translateButtonTitles = function () {
        this.buttonLabels = {
            edit: this.translateService.instant(gettext('Edit schedule')),
            editNoPermission: this.translateService.instant(gettext('Edit schedule - no permissions')),
            duplicate: this.translateService.instant(gettext('Duplicate schedule')),
            duplicateNoPermission: this.translateService.instant(gettext('Duplicate schedule - no permissions')),
            delete: this.translateService.instant(gettext('Delete schedule')),
            deleteNoPermission: this.translateService.instant(gettext('Delete schedule - no permissions'))
        };
    };
    ExportSchedulesComponent.prototype.getCurrentUserEmail = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userService.current()];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data && data.email ? [data.email] : []];
                }
            });
        });
    };
    ExportSchedulesComponent.prototype.checkRole = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, role, hasRole;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userService.current()];
                    case 1:
                        data = (_a.sent()).data;
                        role = 'ROLE_SCHEDULE_REPORT_ADMIN';
                        hasRole = this.userService.hasRole(data, role);
                        return [2 /*return*/, hasRole];
                }
            });
        });
    };
    ExportSchedulesComponent.prototype.getScheduleList = function (withProgress) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (withProgress) {
                            this.loadingStatus.inProgress = true;
                        }
                        _a = this;
                        return [4 /*yield*/, this.reportsService.getScheduleList(this._exportId)];
                    case 1:
                        _a.scheduleList = _b.sent();
                        if (withProgress) {
                            this.loadingStatus.inProgress = false;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ExportSchedulesComponent.prototype.addSchedule = function () {
        this.openAddEditModal(this._exportId, this.initialSchedule, ActionType.CREATE);
    };
    ExportSchedulesComponent.prototype.editSchedule = function (schedule, index, event) {
        if (this.hasRequiredRole) {
            event.preventDefault();
            this.openAddEditModal(this._exportId, schedule, ActionType.EDIT, index);
        }
    };
    ExportSchedulesComponent.prototype.duplicateSchedule = function (schedule, event) {
        event.preventDefault();
        this.openAddEditModal(this._exportId, schedule, ActionType.DUPLICATE);
    };
    ExportSchedulesComponent.prototype.openAddEditModal = function (exportId, schedule, actionType, index) {
        var _this = this;
        var payload = { actionType: actionType, exportId: exportId, schedule: cloneDeep(schedule) };
        var modalOptions = { class: 'modal-sm', initialState: payload };
        this.modalRef = this.bsModalService.show(ScheduleModalComponent, modalOptions);
        this.modalRef.content.emitter.subscribe(function (load) {
            return _this.getMessageFromModal(load, index);
        });
    };
    ExportSchedulesComponent.prototype.getMessageFromModal = function (payload, index) {
        if (payload.success) {
            if (index !== undefined) {
                this.scheduleList[index] = payload.schedule;
            }
            else {
                this.scheduleList.push(payload.schedule);
            }
            this.onSchedulesUpdate.emit(this.scheduleList);
        }
    };
    ExportSchedulesComponent.prototype.removeSchedule = function (schedule, index, event) {
        event.preventDefault();
        this.scheduleList.splice(index, 1);
        this.onSchedulesUpdate.emit(this.scheduleList);
    };
    ExportSchedulesComponent.ctorParameters = function () { return [
        { type: ReportsService },
        { type: BsModalService },
        { type: CronService },
        { type: TranslateService },
        { type: UserService },
        { type: OptionsService }
    ]; };
    __decorate([
        Input()
    ], ExportSchedulesComponent.prototype, "exportId", null);
    __decorate([
        Output()
    ], ExportSchedulesComponent.prototype, "onSchedulesUpdate", void 0);
    ExportSchedulesComponent = __decorate([
        Component({
            selector: 'export-schedules',
            template: "<div>\n  <div *ngIf=\"loadingStatus.inProgress\" class=\"flex-row\">\n    <c8y-loading></c8y-loading>\n    <span translate>Retrieving schedules\u2026</span>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && loadingStatus.done && loadingStatus.error\">\n    <div class=\"alert alert-warning max-width-100\" translate>\n      Could not load schedules list.\n    </div>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && !loadingStatus.done && !loadingStatus.error\">\n    <div class=\"c8y-empty-state text-center max-width-100\" *ngIf=\"!scheduleList.length\">\n      <h1 c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></h1>\n      <h3 translate>No export schedules defined.</h3>\n    </div>\n\n    <div class=\"c8y-list__group\" *ngIf=\"scheduleList.length\">\n      <div class=\"c8y-list__item hidden-xs\">\n        <div class=\"c8y-list__item__block\">\n          <div class=\"c8y-list__item__icon\">\n            <i class=\"fa\"></i>\n          </div>\n          <div class=\"c8y-list__item__body\">\n            <div class=\"flex-row\">\n              <div class=\"col-sm-6\">\n                <label class=\"m-0\">\n                  {{ 'Description' | translate }}\n                </label>\n              </div>\n              <div class=\"col-sm-6 m-r-40\">\n                <label class=\"m-0\">\n                  {{ 'Frequency' | translate }}\n                </label>\n              </div>\n            </div>\n          </div>\n          <span></span>\n        </div>\n      </div>\n\n      <div\n        class=\"c8y-list__item flex-row pointer\"\n        *ngFor=\"let schedule of scheduleList; index as i\"\n        (click)=\"editSchedule(schedule, i, $event)\"\n      >\n        <div class=\"c8y-list__item__block\">\n          <div class=\"c8y-list__item__icon\">\n            <i c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></i>\n          </div>\n          <div class=\"c8y-list__item__body flex-row\">\n            <div class=\"col-sm-6 col-xs-6\">\n              <div class=\"text-truncate\" title=\"{{ schedule.emailConfig.subject }}\">\n                {{ schedule.emailConfig.subject }}\n              </div>\n            </div>\n            <div class=\"col-sm-6 col-xs-6\">\n              <div class=\"flex-row\" style=\"align-items: baseline;\">\n                <i c8yIcon=\"calendar\" class=\"text-muted m-r-4\"></i>\n                <span class=\"smart-rule-information\">\n                  <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 2\" translate>\n                    Hourly: {{ schedule.cronConfig.minute | number: '2.0-0' }} minute(s) past the\n                    hour.\n                  </span>\n                  <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 3\" translate>\n                    Daily: at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                      schedule.cronConfig.minute | number: '2.0-0'\n                    }}.\n                  </span>\n                  <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 4\" translate>\n                    Weekly: {{ cronService.getWeekDayName(schedule.cronConfig) }}, at\n                    {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                      schedule.cronConfig.minute | number: '2.0-0'\n                    }}.\n                  </span>\n                  <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 5\" translate>\n                    Monthly: {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the\n                    month, at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                      schedule.cronConfig.minute | number: '2.0-0'\n                    }}.\n                  </span>\n                  <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 6\" translate>\n                    Yearly: {{ cronService.getMonthName(schedule.cronConfig) }},\n                    {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the month, at\n                    {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                      schedule.cronConfig.minute | number: '2.0-0'\n                    }}.\n                  </span>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"c8y-list__item__actions\" (click)=\"$event.stopPropagation()\">\n            <div class=\"settings dropdown\" dropdown>\n              <button\n                class=\"dropdown-toggle c8y-dropdown\"\n                dropdownToggle\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n                title=\"{{ 'Actions' | translate }}\"\n              >\n                <i [c8yIcon]=\"'ellipsis-v'\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"hasRequiredRole ? buttonLabels.edit : buttonLabels.editNoPermission\"\n                    (click)=\"editSchedule(schedule, i, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'pencil'\"></i> {{ 'Edit' | translate }}\n                  </button>\n                </li>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"\n                      hasRequiredRole ? buttonLabels.duplicate : buttonLabels.duplicateNoPermission\n                    \"\n                    (click)=\"duplicateSchedule(schedule, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'copy'\"></i> {{ 'Duplicate' | translate }}\n                  </button>\n                </li>\n                <li role=\"menuitem\">\n                  <button\n                    [title]=\"\n                      hasRequiredRole ? buttonLabels.delete : buttonLabels.deleteNoPermission\n                    \"\n                    (click)=\"removeSchedule(schedule, i, $event)\"\n                    [disabled]=\"!hasRequiredRole\"\n                  >\n                    <i [c8yIcon]=\"'trash'\"></i> {{ 'Delete' | translate }}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"alert alert-warning max-width-100\" *ngIf=\"!hasRequiredRole\" role=\"alert\" translate>\n    You don't have the permission required to schedule exports.\n  </div>  \n  <button\n    type=\"button\"\n    class=\"btn-add-block m-t-16\"\n    title=\"{{ 'Add schedule' | translate }}\"\n    (click)=\"addSchedule()\"\n    [disabled]=\"!hasRequiredRole\"\n  >\n    <i [c8yIcon]=\"'plus-circle'\"></i>\n    {{ 'Add schedule' | translate }}\n  </button>\n</div>\n"
        })
    ], ExportSchedulesComponent);
    return ExportSchedulesComponent;
}());

var CronComponent = /** @class */ (function () {
    function CronComponent(cronService) {
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.emittedCron = {
            valid: false,
            cron: ''
        };
        this.base = Base.Initial;
        //
    }
    CronComponent.prototype.ngOnInit = function () {
        this.daysOfWeekPosix = this.cronService.daysOfWeekPosix;
        this.daysOfMonth = this.cronService.daysOfMonth;
        this.months = this.cronService.months;
        this.hours = this.cronService.hours;
        this.minutes = this.cronService.minutes;
        this.intervals = this.cronService.intervals;
        this.cronConfig = this.cronService.generateCronConfig(this.cronIn);
        this.base = this.cronService.getBase(this.cronConfig);
    };
    CronComponent.prototype.onChangeSelect = function () {
        this.cronService.clearNextModels(this.base, this.cronConfig);
        this.emittedCron.valid = this.cronService.validateModels(this.base, this.cronConfig);
        this.emittedCron.cron = this.cronService.generateCron(this.cronConfig);
        this.emitter.emit(this.emittedCron);
    };
    CronComponent.ctorParameters = function () { return [
        { type: CronService }
    ]; };
    __decorate([
        Input()
    ], CronComponent.prototype, "cronIn", void 0);
    __decorate([
        Output()
    ], CronComponent.prototype, "emitter", void 0);
    CronComponent = __decorate([
        Component({
            selector: 'cron',
            template: "<div class=\"cron-wrap\">\n  <div class=\"form-group smart-cron-job-every\">\n    <label for=\"smart-cron-job-every\" class=\"control-label\" translate>\n      Interval\n    </label>\n    <div class=\"\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control\"\n          id=\"smart-cron-job-every\"\n          [(ngModel)]=\"base\"\n          required=\"true\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngIf=\"base === 1\" value=\"1\" translate>\n            Select\u2026\n          </option>\n          <option *ngFor=\"let baseInterval of intervals\" [ngValue]=\"baseInterval.value\">\n            {{ baseInterval.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group smart-cron-job-on col-md-6\" *ngIf=\"base == 4\">\n      <label class=\"control-label\" for=\"smart-cron-job-on\" translate>\n        Day\n      </label>\n\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"cron-select form-control day-value\"\n          id=\"smart-cron-job-on\"\n          [(ngModel)]=\"cronConfig.weekday\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfWeek of daysOfWeekPosix\" [ngValue]=\"dayOfWeek.value\">\n            {{ dayOfWeek.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-of col-md-6\" *ngIf=\"base == 6\">\n      <label for=\"smart-cron-job-of\" class=\"control-label\" translate>\n        Month\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-of\"\n            class=\"cron-select form-control month-value\"\n            [(ngModel)]=\"cronConfig.month\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let month of months\" [ngValue]=\"month.value\">\n              {{ month.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-group smart-cron-job-on-the col-md-6\" *ngIf=\"base >= 5\">\n      <label for=\"smart-cron-job-on-the\" class=\"control-label\" translate>\n        Day\n      </label>\n      <div>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-on-the\"\n            class=\"cron-select form-control day-of-month-value\"\n            [(ngModel)]=\"cronConfig.day\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let dayOfMonth of daysOfMonth\" [ngValue]=\"dayOfMonth.value\">\n              {{ dayOfMonth.label | translate }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-at\" *ngIf=\"base >= 2\">\n    <label for=\"smart-cron-job-at-hour\" class=\"control-label\">\n      <span *ngIf=\"base >= 3\" translate>Time</span>\n      <span *ngIf=\"base < 3\" translate>Minutes</span>\n    </label>\n    <div>\n      <div class=\"form-inline\">\n        <div class=\"c8y-select-wrapper\" *ngIf=\"base >= 3\">\n          <select\n            id=\"smart-cron-job-at-hour\"\n            class=\"cron-select form-control hour-value\"\n            [(ngModel)]=\"cronConfig.hour\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let hour of hours\" [ngValue]=\"hour.value\">\n              {{ hour.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n        <span *ngIf=\"base >= 3\"> : </span>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"cron-select form-control minute-value\"\n            id=\"smart-cron-job-at-minute\"\n            [(ngModel)]=\"cronConfig.minute\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let minute of minutes\" [ngValue]=\"minute.value\">\n              {{ minute.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], CronComponent);
    return CronComponent;
}());

/**
 * The angular module definition for reports.
 * @exports ExportSchedulesComponent
 * @exports ScheduleModalComponent
 * @exports CronComponent
 */
var ReportsModule = /** @class */ (function () {
    function ReportsModule() {
    }
    ReportsModule = __decorate([
        NgModule({
            declarations: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
            imports: [CoreModule, FormsModule, BsDropdownModule, TooltipModule],
            entryComponents: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
            providers: [ReportsService, CronService],
            exports: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]
        })
    ], ReportsModule);
    return ReportsModule;
}());

var exportSchedulesComponent = downgradeComponent({
    component: ExportSchedulesComponent
});

var reportsService = downgradeInjectable(ReportsService);

var NAME = 'c8y.upgrade.reports';
var angularJsModule = module(NAME, [])
    .directive('c8yExportSchedules', exportSchedulesComponent)
    .service('c8yReportsService', reportsService);
var ng1Modules = [NAME];
registerNgModule(ng1Modules);

/**
 * Generated bundle index. Do not edit.
 */

export { ActionType, Base, CronComponent, CronService, ExportSchedulesComponent, ReportsModule, ReportsService, ScheduleModalComponent, ng1Modules };
//# sourceMappingURL=c8y-ngx-components-reports.js.map
