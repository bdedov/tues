import { __extends, __awaiter, __generator, __values, __decorate, __assign, __param } from 'tslib';
import { gettext, NavigatorNode, DeviceStatusComponent, ModalService, AlertService, BreadcrumbService, AppStateService, ModalModule, DeviceStatusModule, HOOK_NAVIGATOR_NODES, CommonModule } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { Subject, empty } from 'rxjs';
import { InjectionToken, Injectable, Optional, Inject, NgModule, EventEmitter, Input, Output, Component, ChangeDetectorRef } from '@angular/core';
import { PagingStrategy, InventoryService, UserService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { filter, mergeMap, takeUntil } from 'rxjs/operators';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TranslateService } from '@ngx-translate/core';

var LoadMoreNode = /** @class */ (function (_super) {
    __extends(LoadMoreNode, _super);
    function LoadMoreNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.priority = -Infinity;
        _this.label = gettext('Load more');
        _this.icon = 'plus';
        _this.droppable = true;
        return _this;
    }
    return LoadMoreNode;
}(NavigatorNode));

var GroupFragment;
(function (GroupFragment) {
    GroupFragment["groupType"] = "c8y_DeviceGroup";
    GroupFragment["subGroupType"] = "c8y_DeviceSubgroup";
    GroupFragment["groupFragmentType"] = "c8y_IsDeviceGroup";
    GroupFragment["dataBrokerSourceFragment"] = "c8y_BrokerSource";
    GroupFragment["dynamicGroupType"] = "c8y_DynamicGroup";
    GroupFragment["dynamicGroupFragment"] = "c8y_IsDynamicGroup";
    GroupFragment["dynamicGroupColumnConfig"] = "c8y_UIDeviceFilterConfig";
    GroupFragment["dynamicGroupQueryString"] = "c8y_DeviceQueryString";
})(GroupFragment || (GroupFragment = {}));

var Action;
(function (Action) {
    Action[Action["FETCH"] = 0] = "FETCH";
    Action[Action["NEXT"] = 1] = "NEXT";
    Action[Action["REFRESH"] = 2] = "REFRESH";
    Action[Action["LOADING_DONE"] = 3] = "LOADING_DONE";
})(Action || (Action = {}));

var AssetNode = /** @class */ (function (_super) {
    __extends(AssetNode, _super);
    function AssetNode(service, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.service = service;
        _this.root = _this.root || false;
        _this.mo = _this.mo || {};
        _this.path = _this.root
            ? 'group'
            : _this.isDeviceOrProbablyChildDevice
                ? "device/" + _this.mo.id
                : "group/" + _this.mo.id;
        _this.draggable = !_this.service.moduleConfig.disableDragAndDrop && !_this.root;
        _this.droppable =
            !_this.service.moduleConfig.disableDragAndDrop && !_this.isDeviceOrProbablyChildDevice;
        _this.routerLinkExact = _this.root;
        _this.updateIcon(false);
        _this.onUpdateSubscription = _this.service
            .onUpdate(_this)
            .subscribe(function (_a) {
            var data = _a.data, method = _a.method;
            return _this.refresh(data, method);
        });
        return _this;
    }
    Object.defineProperty(AssetNode.prototype, "label", {
        get: function () {
            return (this.root && gettext('Groups')) || this.mo.name || '--';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "hasChildren", {
        get: function () {
            return this.root || this.service.groups.isGroup(this.mo);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "iconComponent", {
        get: function () {
            return this.isDeviceOrProbablyChildDevice ? DeviceStatusComponent : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "isDevice", {
        get: function () {
            return !!this.mo.c8y_IsDevice;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "isDeviceOrProbablyChildDevice", {
        get: function () {
            return this.isDevice || this.isNeitherDeviceOrGroup;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "isNeitherDeviceOrGroup", {
        get: function () {
            var _a = this.service.groups, isGroup = _a.isGroup, isDynamicGroup = _a.isDynamicGroup;
            return !isGroup(this.mo) && !isDynamicGroup(this.mo) && !this.isDevice && !this.root;
        },
        enumerable: true,
        configurable: true
    });
    AssetNode.prototype.openOnStart = function (url) {
        var urlRegex = /^\/group\//;
        if (this.root) {
            if (this.service.moduleConfig.openOnStart || urlRegex.test(url)) {
                return true;
            }
        }
        var matches = url.match(/\/(group)\/(\d+)/);
        var isMatch = false;
        if (matches) {
            var id_1 = matches[2];
            isMatch = []
                .concat(get(this.mo, 'childAssets.references', []))
                .some(function (_a) {
                var managedObject = _a.managedObject;
                return managedObject.id === id_1;
            });
            return isMatch;
        }
        return false;
    };
    AssetNode.prototype.refresh = function (mo, method) {
        if (mo === void 0) { mo = {}; }
        if (method === void 0) { method = 'GET'; }
        if (mo.id === this.mo.id) {
            this.mo = mo;
        }
        else if (method === 'DELETE') {
            this.parents.forEach(function (node) { return node.refresh(); });
            return;
        }
        if (this.events) {
            this.events.next(Action.REFRESH);
        }
    };
    AssetNode.prototype.click = function (options) {
        if (options === void 0) { options = {}; }
        if (this.isDeviceOrProbablyChildDevice) {
            this.service.preferBreadcrumb(this.parents);
            return;
        }
        this.hookEvents();
        this.updateIcon(options.open);
        if (options.open) {
            this.events.next(Action.FETCH);
        }
    };
    AssetNode.prototype.sort = function () {
        this.children.sort(function (a, b) {
            if (a.priority > b.priority) {
                return -1;
            }
            else if (a.priority < b.priority) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    AssetNode.prototype.addManagedObject = function (mo) {
        var childAdditions = this.mo.childAdditions;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode(mo));
        }
    };
    AssetNode.prototype.isChildAddition = function (childAdditions, mo) {
        return (childAdditions && childAdditions.references.some(function (_a) {
            var id = _a.managedObject.id;
            return id === mo.id;
        }));
    };
    AssetNode.prototype.destroy = function () {
        this.onUpdateSubscription.unsubscribe();
    };
    Object.defineProperty(AssetNode.prototype, "canDrop", {
        get: function () {
            var _this = this;
            var nodeToMove = this.service.draggedData;
            if (nodeToMove) {
                var shouldGetChildOfItsOwn = !!nodeToMove.find(function (child) { return child === _this; });
                var isAlreadyChild = this.children.some(function (child) { return child.mo && child.mo.id === nodeToMove.mo.id; });
                var preventMove = this === nodeToMove || shouldGetChildOfItsOwn || isAlreadyChild;
                return this.droppable && !preventMove;
            }
            return this.droppable;
        },
        enumerable: true,
        configurable: true
    });
    AssetNode.prototype.dragStart = function ($event) {
        _super.prototype.dragStart.call(this, $event);
        this.service.draggedData = this;
        this.service.rootNode.droppable = !this.isDeviceOrProbablyChildDevice;
    };
    AssetNode.prototype.dragEnd = function ($event) {
        _super.prototype.dragEnd.call(this, $event);
    };
    AssetNode.prototype.drop = function ($event) {
        return __awaiter(this, void 0, void 0, function () {
            var nodeToMove;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.drop.call(this, $event);
                        nodeToMove = this.service.draggedData;
                        if (!this.canDrop) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.moveNode(nodeToMove)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.draggedHover = false;
                        this.service.draggedData = undefined;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.hookEvents = function () {
        var _this = this;
        if (!this.events) {
            this.events = new Subject();
            this.events.subscribe(function (evt) {
                if (!_this.loading) {
                    _this.handleEvent(evt);
                }
            });
        }
    };
    AssetNode.prototype.fetch = function () {
        return this.root ? this.service.getRootNodes() : this.service.getGroupItems(this.mo.id);
    };
    AssetNode.prototype.handleEvent = function (evt) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(!this.children.length && evt === Action.FETCH)) return [3 /*break*/, 2];
                        this.loading = true;
                        _a = this.addNodes;
                        return [4 /*yield*/, this.fetch()];
                    case 1:
                        _a.apply(this, [_c.sent()]);
                        this.loading = false;
                        return [3 /*break*/, 5];
                    case 2:
                        if (!(evt === Action.NEXT)) return [3 /*break*/, 4];
                        this.loadMoreNode.loading = true;
                        _b = this.addNodes;
                        return [4 /*yield*/, this.paging.next()];
                    case 3:
                        _b.apply(this, [_c.sent()]);
                        this.loadMoreNode.loading = false;
                        return [3 /*break*/, 5];
                    case 4:
                        if (evt === Action.REFRESH) {
                            this.loading = false;
                            this.paging = undefined;
                            this.loadMoreNode = undefined;
                            this.empty();
                            this.events.next(Action.FETCH);
                        }
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.addNodes = function (res) {
        var _this = this;
        if (res.paging) {
            var _a = (this.paging = res.paging), currentPage = _a.currentPage, nextPage = _a.nextPage, pageSize = _a.pageSize;
            if (currentPage === 1) {
                this.empty();
            }
            var itemsCount = res.data.length;
            var moreItemsAvailable = !!nextPage && itemsCount === pageSize;
            this.toggleLoadMore(moreItemsAvailable);
        }
        (res.data || res).map(function (mo) { return _this.addManagedObject(mo); });
        this.events.next(Action.LOADING_DONE);
    };
    AssetNode.prototype.toggleLoadMore = function (show) {
        var _this = this;
        if (!this.loadMoreNode && show) {
            this.loadMoreNode = new LoadMoreNode();
            this.add(this.loadMoreNode);
            this.loadMoreNode.click = function () { return _this.events.next(Action.NEXT); };
        }
        if (this.loadMoreNode) {
            this.loadMoreNode.hidden = !show;
        }
    };
    AssetNode.prototype.moveNode = function (nodeToMove) {
        return __awaiter(this, void 0, void 0, function () {
            var isCopy, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, 7, 8]);
                        return [4 /*yield*/, this.showDropConfirm(nodeToMove)];
                    case 1:
                        isCopy = _a.sent();
                        return [4 /*yield*/, this.verifyNodeAccess(nodeToMove)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.addMovedNode(nodeToMove)];
                    case 3:
                        _a.sent();
                        if (!!isCopy) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.removeMovedNode(nodeToMove)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.expand();
                        return [3 /*break*/, 8];
                    case 6:
                        ex_1 = _a.sent();
                        if (ex_1) {
                            this.service.alert.addServerFailure(ex_1);
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        this.draggedHover = false;
                        this.service.draggedData = undefined;
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.showDropConfirm = function (nodeToMove) {
        return __awaiter(this, void 0, void 0, function () {
            var buttons;
            return __generator(this, function (_a) {
                this.confirm.title = gettext('Move');
                this.confirm.message = gettext('Do you want to move the group?');
                buttons = [
                    {
                        label: gettext('Cancel'),
                        action: function () { return Promise.reject(); }
                    },
                    {
                        label: gettext('Move'),
                        status: 'default',
                        action: function () { return Promise.resolve(false); }
                    }
                ];
                if (nodeToMove.isDeviceOrProbablyChildDevice) {
                    this.confirm.title = gettext('Move or add');
                    this.confirm.message = gettext('Do you want to move or add the device?');
                    buttons.push({
                        label: gettext('Add'),
                        status: 'primary',
                        action: function () { return Promise.resolve(true); }
                    });
                }
                return [2 /*return*/, this.confirm.show(buttons)];
            });
        });
    };
    AssetNode.prototype.verifyNodeAccess = function (nodeToMove) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.service.inventory.update({ id: nodeToMove.mo.id })];
            });
        });
    };
    AssetNode.prototype.addMovedNode = function (nodeToMove) {
        return __awaiter(this, void 0, void 0, function () {
            var mo, data, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.root) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.service.inventory.update({
                                id: nodeToMove.mo.id,
                                type: GroupFragment.groupType
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        mo = data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.service.inventory.childAssetsAdd(nodeToMove.mo, this.mo)];
                    case 3:
                        data = (_a.sent()).data;
                        mo = data;
                        _a.label = 4;
                    case 4:
                        this.addManagedObject(mo);
                        return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.removeMovedNode = function (nodeToMove) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, parent_1, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, 9, 10]);
                        _a = __values(nodeToMove.parents), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 7];
                        parent_1 = _b.value;
                        if (parent_1.mo && parent_1.mo.type === GroupFragment.dynamicGroupType) {
                            return [3 /*break*/, 7]; // smart groups don't need to be changed
                        }
                        if (!parent_1.root) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.service.inventory.update({
                                id: nodeToMove.mo.id,
                                type: GroupFragment.subGroupType
                            })];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.service.inventory.childAssetsRemove(nodeToMove.mo, parent_1.mo)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        parent_1.remove(nodeToMove);
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.updateIcon = function (open) {
        this.icon = this.service.groups.icon(
        // if it's root we are going to pass a fake mo to get the same icon as groups
        this.root ? { type: GroupFragment.groupType } : this.mo, open);
    };
    return AssetNode;
}(NavigatorNode));

var DynamicGroupNode = /** @class */ (function (_super) {
    __extends(DynamicGroupNode, _super);
    function DynamicGroupNode(service, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, service, config) || this;
        _this.service = service;
        _this.draggable = false;
        _this.droppable = false;
        return _this;
    }
    Object.defineProperty(DynamicGroupNode.prototype, "hasChildren", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicGroupNode.prototype, "query", {
        get: function () {
            return this.mo.c8y_DeviceQueryString;
        },
        enumerable: true,
        configurable: true
    });
    DynamicGroupNode.prototype.fetch = function () {
        return this.service.getDynamicGroupItems(this.query);
    };
    return DynamicGroupNode;
}(AssetNode));

var ASSET_NAVIGATOR_CONFIG = new InjectionToken('AssetNodeConfig');

var DeviceGroupService = /** @class */ (function () {
    function DeviceGroupService() {
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'circle',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = "_" + GroupFragment.dataBrokerSourceFragment;
    }
    DeviceGroupService.prototype.isGroup = function (mo) {
        return !!mo[GroupFragment.groupFragmentType] || mo.type === GroupFragment.groupType || mo.type === GroupFragment.subGroupType;
    };
    DeviceGroupService.prototype.isDynamicGroup = function (mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    };
    DeviceGroupService.prototype.isDataBroker = function (mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive];
    };
    DeviceGroupService.prototype.isDataBrokerActive = function (mo) {
        return !!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive];
    };
    DeviceGroupService.prototype.icon = function (mo, open) {
        var type = 'other';
        if (this.isDynamicGroup(mo)) {
            type = 'dynamicGroup';
        }
        else if (this.isDataBrokerActive(mo)) {
            type = 'brokerSource';
        }
        else if (this.isDataBroker(mo)) {
            type = 'brokerSourceInactive';
        }
        else if (this.isGroup(mo)) {
            type = 'group';
        }
        var icon = this.icons[type];
        return (open && icon.iconOpen) || icon.icon;
    };
    DeviceGroupService = __decorate([
        Injectable()
    ], DeviceGroupService);
    return DeviceGroupService;
}());

var AssetNodeService = /** @class */ (function () {
    function AssetNodeService(inventory, groups, apiService, modal, alert, breadcrumbService, user, appState, moduleConfig) {
        this.inventory = inventory;
        this.groups = groups;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.moduleConfig = moduleConfig;
        this.firstUrl = true;
        this.PAGE_SIZE = 20;
        this.moduleConfig = __assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
    }
    AssetNodeService.prototype.createRootNode = function () {
        this.rootNode = this.createAssetNode({
            root: true,
            priority: this.moduleConfig.rootNodePriority
        });
        return this.rootNode;
    };
    AssetNodeService.prototype.createDynamicGroupNode = function (config) {
        return new DynamicGroupNode(this, config);
    };
    AssetNodeService.prototype.createAssetNode = function (config) {
        return new AssetNode(this, config);
    };
    AssetNodeService.prototype.createChildNode = function (managedObject) {
        var type = managedObject.type;
        var config = { mo: managedObject };
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    };
    AssetNodeService.prototype.getRootNodes = function () {
        if (this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            var query = this.rootQueryFilter();
            var rootNodeFilter = this.createFilter({
                query: query,
                pageSize: this.PAGE_SIZE,
                withChildren: false,
                onlyRoots: true
            });
            return this.inventory.list(rootNodeFilter);
        }
        else {
            var groupFilter = this.createFilter({
                fragmentType: GroupFragment.groupFragmentType,
                withTotalPages: true,
                withChildren: false,
                pageSize: this.PAGE_SIZE,
                onlyRoots: true
            });
            return this.inventory
                .list$(groupFilter, {
                hot: false,
                pagingStrategy: PagingStrategy.NONE,
                realtime: false
            })
                .toPromise();
        }
    };
    AssetNodeService.prototype.getGroupItems = function (moId) {
        return this.inventory.childAssetsList(moId, { withChildren: false, pageSize: this.PAGE_SIZE, query: this.groupQueryFilter(moId) });
    };
    AssetNodeService.prototype.getDynamicGroupItems = function (query) {
        var dynamicGroupfilter = this.createFilter({ q: query });
        return this.inventory.list(dynamicGroupfilter);
    };
    AssetNodeService.prototype.groupQueryFilter = function (moId) {
        return "$filter=(bygroupid(" + moId + "))$orderby=name";
    };
    AssetNodeService.prototype.rootQueryFilter = function () {
        var moduleConfig = this.moduleConfig;
        var rootFilter = ["(type eq '" + GroupFragment.groupType + "')"];
        if (moduleConfig.smartGroups) {
            rootFilter.push("(type eq '" + GroupFragment.dynamicGroupType + "' and has(" + GroupFragment.dynamicGroupFragment + ") and not(has(" + GroupFragment.dynamicGroupFragment + ".invisible)))");
        }
        return "$filter=(" + rootFilter.join(' or ') + ")$orderby=name";
    };
    AssetNodeService.prototype.onUpdate = function (_a) {
        var _this = this;
        var mo = _a.mo, root = _a.root;
        if (mo.id) {
            return this.apiService
                .hookResponse(function (_a) {
                var url = _a.url, method = _a.method;
                return ['PUT', 'DELETE', 'POST'].includes(method) &&
                    RegExp("((inventory/managedObjects)|(service/smartgroup/smartgroups))/" + mo.id).test(url);
            })
                .pipe(filter(function () { return !_this.draggedData; }), mergeMap(this.apiService.resolveData), filter(function (response) { return !response.data.c8y_Dashboard; }));
        }
        else if (root) {
            return this.apiService.hookResponse(function (_a) {
                var url = _a.url, method = _a.method, options = _a.options;
                return RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                    method === 'POST' &&
                    _this.isNewManagedObjectRoot(options);
            });
        }
        else {
            return empty();
        }
    };
    AssetNodeService.prototype.isNewManagedObjectRoot = function (options) {
        if (options === void 0) { options = {}; }
        var data = options.data;
        var isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    };
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    AssetNodeService.prototype.preferBreadcrumb = function (parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    };
    AssetNodeService.prototype.createFilter = function (extraParams) {
        if (extraParams === void 0) { extraParams = {}; }
        var params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return __assign({}, params, extraParams);
    };
    AssetNodeService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: DeviceGroupService },
        { type: ApiService },
        { type: ModalService },
        { type: AlertService },
        { type: BreadcrumbService },
        { type: UserService },
        { type: AppStateService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
    ]; };
    AssetNodeService = __decorate([
        Injectable(),
        __param(8, Optional()), __param(8, Inject(ASSET_NAVIGATOR_CONFIG))
    ], AssetNodeService);
    return AssetNodeService;
}());

var AssetNodeFactory = /** @class */ (function () {
    function AssetNodeFactory(service) {
        this.service = service;
    }
    AssetNodeFactory.prototype.get = function () {
        if (!this.service.rootNode) {
            this.service.createRootNode();
        }
        return this.service.rootNode;
    };
    AssetNodeFactory.ctorParameters = function () { return [
        { type: AssetNodeService }
    ]; };
    AssetNodeFactory = __decorate([
        Injectable()
    ], AssetNodeFactory);
    return AssetNodeFactory;
}());

var AssetsNavigatorModule = /** @class */ (function () {
    function AssetsNavigatorModule() {
    }
    AssetsNavigatorModule_1 = AssetsNavigatorModule;
    AssetsNavigatorModule.config = function (config) {
        return {
            ngModule: AssetsNavigatorModule_1,
            providers: [
                {
                    provide: ASSET_NAVIGATOR_CONFIG, useValue: config
                }
            ],
        };
    };
    var AssetsNavigatorModule_1;
    AssetsNavigatorModule = AssetsNavigatorModule_1 = __decorate([
        NgModule({
            declarations: [],
            imports: [
                ModalModule,
                DeviceStatusModule
            ],
            providers: [
                ModalService,
                AssetNodeService,
                DeviceGroupService,
                {
                    provide: HOOK_NAVIGATOR_NODES, useClass: AssetNodeFactory, multi: true
                }
            ],
            entryComponents: [DeviceStatusComponent]
        })
    ], AssetsNavigatorModule);
    return AssetsNavigatorModule;
}());

var GroupNode = /** @class */ (function (_super) {
    __extends(GroupNode, _super);
    // FIXME: Currently hasChildren returns true if it is a group,
    //        Issue is, that we disable the children in the API
    //        getGroupItems service call due to performance. This leads
    //        to that the dropdown chevron is shown always. Issue is,
    //        that even if we return the chevrons, we have no way to determine
    //        if the childAssets contain groups or other assets (like dashboards).
    // get hasChildren() {
    //  return this.root || this.service.groups.isGroup(this.mo) && (this.mo as IManagedObject).childAssets.references.length > 0;
    // }
    /**
     * Creates a new node which shows only groups.
     *
     * @param service The service to use.
     * @param config  The default configuration of the node.
     */
    function GroupNode(service, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, service, config) || this;
        _this.service = service;
        return _this;
    }
    return GroupNode;
}(AssetNode));

var GroupNodeService = /** @class */ (function (_super) {
    __extends(GroupNodeService, _super);
    function GroupNodeService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.PAGE_SIZE = 5;
        return _this;
    }
    GroupNodeService.prototype.createGroupNode = function (config) {
        return new GroupNode(this, config);
    };
    GroupNodeService.prototype.createChildNode = function (managedObject) {
        var config = { mo: managedObject };
        return this.createGroupNode(config);
    };
    GroupNodeService.prototype.subassetsQueryFilter = function () {
        var moduleConfig = this.moduleConfig;
        var groupFilter = ["(type eq '" + GroupFragment.groupType + "')"];
        if (moduleConfig.smartGroups) {
            groupFilter.push("(has(" + GroupFragment.groupFragmentType + "))");
            groupFilter.push("(type eq '" + GroupFragment.dynamicGroupType + "' and has(" + GroupFragment.dynamicGroupFragment + ") and not(has(" + GroupFragment.dynamicGroupFragment + ".invisible)))");
        }
        return "$filter=(" + groupFilter.join(' or ') + ")$orderby=name";
    };
    GroupNodeService.prototype.getGroupItems = function (moId) {
        return this.inventory.childAssetsList(moId, {
            query: this.subassetsQueryFilter(),
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            withTotalPages: true
        });
    };
    GroupNodeService = __decorate([
        Injectable()
    ], GroupNodeService);
    return GroupNodeService;
}(AssetNodeService));

/**
 * Displays a hierarchical tree selector for assets.
 */
var AssetSelectorComponent = /** @class */ (function () {
    /**
     * @ignore only DI
     */
    function AssetSelectorComponent(groupNodeService) {
        this.groupNodeService = groupNodeService;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onChange = new EventEmitter();
    }
    /**
     * @ignore
     */
    AssetSelectorComponent.prototype.ngOnInit = function () {
        this.rootNode = this.groupNodeService.createGroupNode({ root: true });
    };
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    AssetSelectorComponent.prototype.select = function (selectedMo) {
        var index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(selectedMo);
        }
        this.onChange.emit(this.selected);
    };
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    AssetSelectorComponent.prototype.deselect = function (selectedMo) {
        var index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.onChange.emit(this.selected);
    };
    AssetSelectorComponent.prototype.getIndexOfSelected = function (selected, selectedMo) {
        return selected.findIndex(function (mo) { return mo.id === selectedMo.id; });
    };
    AssetSelectorComponent.ctorParameters = function () { return [
        { type: GroupNodeService }
    ]; };
    __decorate([
        Input()
    ], AssetSelectorComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], AssetSelectorComponent.prototype, "onChange", void 0);
    AssetSelectorComponent = __decorate([
        Component({
            selector: 'c8y-asset-selector',
            template: "<c8y-asset-selector-node [node]=\"rootNode\" [preselected]=\"selected\"></c8y-asset-selector-node>\n"
        })
    ], AssetSelectorComponent);
    return AssetSelectorComponent;
}());

var AssetSelectorNodeComponent = /** @class */ (function () {
    /**
     * @ignore only di
     */
    function AssetSelectorNodeComponent(translateService, cd, parentNode) {
        this.translateService = translateService;
        this.cd = cd;
        this.parentNode = parentNode;
        /**
         * All preselected items
         */
        this.preselected = [];
        /**
         *  Should the path be shown
         */
        this.showPath = false;
        /**
         * @ignore
         */
        this.level = 0;
        /**
         * The selection status of the node
         */
        this.checked = false;
        /**
         * @ignore
         */
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(AssetSelectorNodeComponent.prototype, "expandTitle", {
        /**
         * @ignore
         */
        get: function () {
            return !this.node.open ? gettext('Expand') : gettext('Collapse');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ignore
     */
    AssetSelectorNodeComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.breadcrumb = this.node.label;
                this.setupBreadcrumbsAndLevel(this.node);
                if (this.node instanceof GroupNode) {
                    this.node.hookEvents();
                }
                // open on startup
                if (this.node.root) {
                    this.click();
                }
                if (this.node.events) {
                    this.node.events
                        .pipe(takeUntil(this.unsubscribe$), filter(function (a) { return a === Action.LOADING_DONE; }))
                        .subscribe(function () {
                        _this.cd.markForCheck();
                    });
                }
                this.checked = this.isPreselected();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Opens a node.
     */
    AssetSelectorNodeComponent.prototype.click = function () {
        this.node.open = !this.node.open;
        this.node.click({ open: this.node.open });
    };
    /**
     * TODO: Only level used. Breadcrumbs needs to be implemented.
     */
    AssetSelectorNodeComponent.prototype.setupBreadcrumbsAndLevel = function (node) {
        if (node.parents && node.parents.length) {
            var parent_1 = node.parents[0];
            this.breadcrumb = this.translateService.instant(parent_1.label) + ' > ' + this.breadcrumb;
            this.level++;
            this.setupBreadcrumbsAndLevel(parent_1);
        }
    };
    /**
     * Selects the node and emits a change on the parent component.
     * @param node The node to select.
     */
    AssetSelectorNodeComponent.prototype.selected = function (node) {
        this.checked = !this.checked;
        this.updateSelection(node.mo);
    };
    /**
     * @ignore
     */
    AssetSelectorNodeComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    };
    AssetSelectorNodeComponent.prototype.isPreselected = function () {
        if (this.node.root || !this.node.mo) {
            return false;
        }
        return this.parentNode.getIndexOfSelected(this.preselected, this.node.mo) > -1;
    };
    AssetSelectorNodeComponent.prototype.updateSelection = function (selectedMo) {
        if (this.checked) {
            this.parentNode.select(selectedMo);
            return;
        }
        this.parentNode.deselect(selectedMo);
    };
    AssetSelectorNodeComponent.ctorParameters = function () { return [
        { type: TranslateService },
        { type: ChangeDetectorRef },
        { type: AssetSelectorComponent }
    ]; };
    __decorate([
        Input()
    ], AssetSelectorNodeComponent.prototype, "node", void 0);
    __decorate([
        Input()
    ], AssetSelectorNodeComponent.prototype, "preselected", void 0);
    __decorate([
        Input()
    ], AssetSelectorNodeComponent.prototype, "showPath", void 0);
    AssetSelectorNodeComponent = __decorate([
        Component({
            selector: 'c8y-asset-selector-node',
            template: "<div\n  class=\"d-flex collapsible\"\n  [ngClass]=\"{ 'expanded separator-top': node.open }\"\n  title=\"{{ breadcrumb | translate }}\"\n  *ngIf=\"!node.root && !node.hidden\"\n>\n  <div\n    class=\"p-t-8 p-b-8 m-r-8\"\n    [ngStyle]=\"{ 'padding-left': level < 6 ? (level - 1) * 8 + 'px' : '24px' }\"\n    [style.visibility]=\"node.routerLinkExact ? 'hidden' : 'visible'\"\n  >\n    <label class=\"c8y-checkbox\" style=\"margin-top: 1px;\">\n      <input type=\"checkbox\" (change)=\"selected(node)\" [checked]=\"checked\" />\n      <span></span>\n    </label>\n  </div>\n  <div\n    class=\"flex-grow flex-item-middle p-t-8 p-b-8 text-truncate p-r-8\"\n    [style.cursor]=\"node.routerLinkExact ? 'pointer' : 'normal'\"\n    (click)=\"node.routerLinkExact ? node.click() : ''\"\n  >\n    <i\n      [c8yIcon]=\"node.icon\"\n      *ngIf=\"node.icon === 'c8y-group-smart'\"\n      [title]=\"'Smart group' | translate\"\n      class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n    ></i>\n    <i\n      [c8yIcon]=\"node.icon\"\n      *ngIf=\"node.icon !== 'c8y-group-smart'\"\n      [title]=\"'Group' | translate\"\n      class=\"c8y-icon c8y-icon-duocolor m-r-4 text-16\"\n    ></i>\n    <span title=\"{{ breadcrumb }}\">\n      {{ node.label | translate }}\n      <!-- use just for search results to display the path -->\n      <p *ngIf=\"showPath\" class=\"text-truncate\">\n        <small class=\"text-muted\" title=\"{{ breadcrumb }}\">\n          <em>{{ breadcrumb }}</em>\n        </small>\n      </p>\n      <!-- up to here -->\n    </span>\n  </div>\n  <div>\n    <button\n      [title]=\"expandTitle\"\n      class=\"collapse-btn btn\"\n      (click)=\"click()\"\n      [attr.aria-expanded]=\"!node.open\"\n    >\n      <i c8yIcon=\"angle-down\" [ngClass]=\"{ 'text-primary': node.open }\"></i>\n    </button>\n  </div>\n</div>\n<div class=\"collapse\" [ngClass]=\"{ 'separator-bottom': node.open }\" [collapse]=\"!node.open\">\n  <c8y-asset-selector-node\n    *ngFor=\"let childNode of node.children\"\n    [node]=\"childNode\"\n    [preselected]=\"preselected || []\"\n  ></c8y-asset-selector-node>\n</div>\n"
        })
    ], AssetSelectorNodeComponent);
    return AssetSelectorNodeComponent;
}());

var AssetSelectorModule = /** @class */ (function () {
    function AssetSelectorModule() {
    }
    AssetSelectorModule = __decorate([
        NgModule({
            imports: [CommonModule, CollapseModule, BsDropdownModule],
            exports: [AssetSelectorNodeComponent, AssetSelectorComponent],
            providers: [GroupNodeService],
            declarations: [AssetSelectorNodeComponent, AssetSelectorComponent]
        })
    ], AssetSelectorModule);
    return AssetSelectorModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ASSET_NAVIGATOR_CONFIG, Action, AssetNode, AssetNodeFactory, AssetNodeService, AssetSelectorComponent, AssetSelectorModule, AssetSelectorNodeComponent, AssetsNavigatorModule, DeviceGroupService, DynamicGroupNode, GroupFragment, GroupNode, GroupNodeService, LoadMoreNode };
//# sourceMappingURL=c8y-ngx-components-assets-navigator.js.map
