import { __assign, __decorate } from 'tslib';
import { Injectable, EventEmitter, Input, Output, ViewChild, Component, NgModule } from '@angular/core';
import { FetchClient } from '@c8y/client';
import { from, Subject, fromEvent, interval, NEVER, of } from 'rxjs';
import { flatMap, merge, debounce, scan, tap, switchMap, takeUntil, filter, finalize, catchError, delay, repeat } from 'rxjs/operators';
import { CommonModule } from '@c8y/ngx-components';
import { ButtonsModule } from 'ngx-bootstrap/buttons';

var AppLogsService = /** @class */ (function () {
    function AppLogsService(client) {
        this.client = client;
        this.BASE_PATH_APPLICATION = 'application/applications';
        this.header = {
            Accept: 'application/vnd.com.nsn.cumulocity.applicationLogs+json;charset=UTF-8;ver=0.9'
        };
    }
    AppLogsService.prototype.getLogs$ = function (appId, instanceName, params) {
        if (params === void 0) { params = {}; }
        var url = this.BASE_PATH_APPLICATION + "/" + appId + "/logs/" + instanceName;
        var defaultConfig = {
            headers: this.header,
            method: 'GET'
        };
        var formattedDateFrom = params.dateFrom ? this.formatDate(params.dateFrom) : null;
        var formattedDateTo = params.dateTo ? this.formatDate(params.dateTo) : null;
        var modifiedParams = __assign({}, params, (formattedDateFrom && { dateFrom: formattedDateFrom }), (formattedDateTo && { dateTo: formattedDateTo }));
        var config = params ? __assign({}, defaultConfig, { params: modifiedParams }) : __assign({}, defaultConfig);
        return from(this.client.fetch(url, config)).pipe(flatMap(function (res) { return res.json(); }));
    };
    AppLogsService.prototype.formatDate = function (dateToFormat) {
        return new Date(dateToFormat).toISOString();
    };
    AppLogsService.ctorParameters = function () { return [
        { type: FetchClient }
    ]; };
    AppLogsService = __decorate([
        Injectable()
    ], AppLogsService);
    return AppLogsService;
}());

var AppLogsAutoRefreshComponent = /** @class */ (function () {
    function AppLogsAutoRefreshComponent(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = true;
        this.onNewLogs = new EventEmitter();
        this.toggleState = function (currentState) { return !currentState; };
    }
    Object.defineProperty(AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", {
        set: function (areDisabled) {
            this.isAutoRefreshDisabled = areDisabled;
            if (areDisabled && this.isAutoRefreshOn) {
                this.isAutoRefreshOn = false;
                this.cancel$.next(false);
            }
        },
        enumerable: true,
        configurable: true
    });
    AppLogsAutoRefreshComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(function () { return interval(300); }), scan(this.toggleState, false), tap(function (isAutoRefreshOn) { return _this.setButtonState(isAutoRefreshOn); }), switchMap(function (isOn) { return (isOn ? _this.watchForNewLogs() : NEVER); }));
        this.subscription = clicks$.subscribe();
    };
    AppLogsAutoRefreshComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    AppLogsAutoRefreshComponent.prototype.setButtonState = function (isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
    };
    AppLogsAutoRefreshComponent.prototype.watchForNewLogs = function () {
        var _this = this;
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(function (isAutoRefreshOn) { return isAutoRefreshOn === false; }))), finalize(function () {
            _this.isAutoRefreshOn = false;
        }));
    };
    AppLogsAutoRefreshComponent.prototype.startPolling = function () {
        var _this = this;
        return of(1).pipe(switchMap(function () { return _this.getNewLogs().pipe(catchError(function (er) { return of(_this.getEmptyLogsJson()); })); }), tap(function (logs) { return _this.updateLogsToOutput(logs); }), delay(10000), repeat());
    };
    AppLogsAutoRefreshComponent.prototype.getNewLogs = function () {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    };
    AppLogsAutoRefreshComponent.prototype.getAppId = function () {
        return this.mo.applicationId;
    };
    AppLogsAutoRefreshComponent.prototype.getInstanceName = function () {
        return this.selectedInstance.name;
    };
    AppLogsAutoRefreshComponent.prototype.updateLogsToOutput = function (newLogs) {
        var dateFrom = newLogs.dateFrom, dateTo = newLogs.dateTo;
        if (dateFrom && dateTo) {
            this.logsToOutput = __assign({}, newLogs);
            this.onNewLogs.emit(this.logsToOutput);
        }
    };
    AppLogsAutoRefreshComponent.prototype.getEmptyLogsJson = function () {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    };
    AppLogsAutoRefreshComponent.ctorParameters = function () { return [
        { type: AppLogsService }
    ]; };
    __decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "selectedInstance", void 0);
    __decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "mo", void 0);
    __decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", null);
    __decorate([
        Output()
    ], AppLogsAutoRefreshComponent.prototype, "onNewLogs", void 0);
    __decorate([
        ViewChild('autoRefresh', { static: true })
    ], AppLogsAutoRefreshComponent.prototype, "button", void 0);
    AppLogsAutoRefreshComponent = __decorate([
        Component({
            selector: 'c8y-app-logs-auto-refresh',
            template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
        })
    ], AppLogsAutoRefreshComponent);
    return AppLogsAutoRefreshComponent;
}());

var AppLogsAutoRefreshModule = /** @class */ (function () {
    function AppLogsAutoRefreshModule() {
    }
    AppLogsAutoRefreshModule = __decorate([
        NgModule({
            declarations: [AppLogsAutoRefreshComponent],
            exports: [AppLogsAutoRefreshComponent],
            imports: [CommonModule, ButtonsModule],
            entryComponents: [AppLogsAutoRefreshComponent],
            providers: [AppLogsService]
        })
    ], AppLogsAutoRefreshModule);
    return AppLogsAutoRefreshModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AppLogsAutoRefreshComponent, AppLogsAutoRefreshModule, AppLogsService };
//# sourceMappingURL=c8y-ngx-components-app-logs.js.map
