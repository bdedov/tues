{"version":3,"file":"c8y-ngx-components-device-grid.js","sources":["ng://@c8y/ngx-components/device-grid/schema-form.component.ts","ng://@c8y/ngx-components/device-grid/columns/base.filtering-form-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/base.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/alarms.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/alarms.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/group.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/group.filtering-form-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/group.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/imei.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/model.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/model.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/name.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/name.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/registration-date.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/registration-date.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/serial-number.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/serial-number.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/status.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/status.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/system-id.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/device-grid.service.ts","ng://@c8y/ngx-components/device-grid/device-grid.component.ts","ng://@c8y/ngx-components/device-grid/device-grid.module.ts","ng://@c8y/ngx-components/device-grid/columns/custom.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/type.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/c8y-ngx-components-device-grid.ts"],"sourcesContent":["import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n// TODO: MTM-31785: find replacement for schema-form ng1 library\n@Directive({\n  selector: 'c8y-schema-form'\n})\nexport class SchemaFormComponent extends UpgradeComponent {\n  @Input() schema: any;\n  @Input() model: any;\n  @Input('form') inputForm?: any;\n  @Input('options') inputOptions?: any;\n\n  constructor(elementRef: ElementRef, injector: Injector) {\n    super('c8ySchemaForm', elementRef, injector);\n  }\n}\n","import { Component, forwardRef, OnInit, ViewChild } from '@angular/core';\nimport { get, cloneDeep } from 'lodash-es';\nimport { FilteringFormRendererContext } from '@c8y/ngx-components';\nimport { SchemaFormComponent } from '../schema-form.component';\nimport { DeviceGridColumn } from '../device-grid.models';\n\n@Component({\n  templateUrl: './base.filtering-form-renderer.component.html'\n})\nexport class BaseFilteringFormRendererComponent implements OnInit {\n  @ViewChild(forwardRef(() => SchemaFormComponent), { static: false }) schemaFormComponent: any;\n\n  schema;\n  form;\n  model;\n  options;\n\n  constructor(public context: FilteringFormRendererContext) {}\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n    this.schema = cloneDeep(column.filteringConfig.schema);\n    this.form = cloneDeep(column.filteringConfig.form);\n    this.model = cloneDeep(column.externalFilterQuery || {});\n    this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };\n  }\n\n  canApply() {\n    return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.model\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n}\n","import { Type } from '@angular/core';\nimport { ColumnDataType, SortOrder, FilterPredicateFunction } from '@c8y/ngx-components';\nimport {\n  DeviceGridColumn,\n  DeviceGridColumnFilteringConfig,\n  DeviceGridColumnSortingConfig\n} from '../device-grid.models';\nimport { BaseFilteringFormRendererComponent } from './base.filtering-form-renderer.component';\n\nexport class BaseDeviceGridColumn implements DeviceGridColumn {\n  name: string;\n  path?: string;\n  header?: string;\n  dataType?: ColumnDataType;\n\n  visible?: boolean;\n  positionFixed?: boolean;\n  gridTrackSize?: string;\n\n  headerCSSClassName?: string | string[];\n  headerCellRendererComponent?: Type<any>;\n\n  cellCSSClassName?: string | string[];\n  cellRendererComponent?: Type<any>;\n\n  sortable?: boolean;\n  sortingConfig?: DeviceGridColumnSortingConfig;\n  sortOrder?: SortOrder;\n\n  filterable?: boolean;\n  filteringConfig?: DeviceGridColumnFilteringConfig;\n  filteringFormRendererComponent?: Type<any>;\n  filterPredicate?: string | FilterPredicateFunction;\n  externalFilterQuery?: string | object;\n\n  constructor() {\n    this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  templateUrl: './alarms.cell-renderer.component.html'\n})\nexport class AlarmsCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';\nimport { gettext } from '@c8y/ngx-components';\nimport { map } from 'lodash-es';\n\nexport class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    this.name = 'alarms';\n    this.header = gettext('Alarms');\n    this.cellRendererComponent = AlarmsCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          critical: {\n            type: 'boolean'\n          },\n          major: {\n            type: 'boolean'\n          },\n          minor: {\n            type: 'boolean'\n          },\n          warning: {\n            type: 'boolean'\n          },\n          none: {\n            type: 'boolean'\n          }\n        }\n      },\n      form: [\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext('Show devices with active')}</span>:</label>`\n        },\n        {\n          key: 'critical',\n          title: gettext('Critical alarms')\n        },\n        {\n          key: 'major',\n          title: gettext('Major alarms')\n        },\n        {\n          key: 'minor',\n          title: gettext('Minor alarms')\n        },\n        {\n          key: 'warning',\n          title: gettext('Warnings')\n        },\n        {\n          key: 'none',\n          title: gettext('No alarms')\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n        if (model.critical) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });\n        }\n        if (model.major) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });\n        }\n        if (model.minor) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });\n        }\n        if (model.warning) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });\n        }\n        if (model.none) {\n          ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });\n          ors.push({\n            __and: map(['critical', 'major', 'minor', 'warning'], sev => {\n              const zero = {};\n              const has = { __not: { __has: undefined } };\n              const key = `c8y_ActiveAlarmsStatus.${sev}`;\n              zero[key] = 0;\n              has.__not.__has = key;\n              return { __or: [zero, has] };\n            })\n          });\n        }\n        if (ors.length) {\n          filter.__or = ors;\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [\n        { path: 'c8y_ActiveAlarmsStatus.critical' },\n        { path: 'c8y_ActiveAlarmsStatus.major' },\n        { path: 'c8y_ActiveAlarmsStatus.minor' },\n        { path: 'c8y_ActiveAlarmsStatus.warning' }\n      ]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  templateUrl: './group.cell-renderer.component.html'\n})\nexport class GroupCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport { FilteringFormRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridColumn } from '../device-grid.models';\n\n@Component({\n  templateUrl: './group.filtering-form-renderer.component.html'\n})\nexport class GroupFilteringFormRendererComponent implements OnInit {\n  model: any;\n  preselected: string[] = [];\n\n  constructor(public context: FilteringFormRendererContext) {}\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n    this.model = cloneDeep(column.externalFilterQuery || {});\n    this.preselected = this.model.selectedNodes || [];\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.model\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n\n  selectionChanged(nodes) {\n    this.model.selectedNodes = nodes;\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { GroupCellRendererComponent } from './group.cell-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './group.filtering-form-renderer.component';\nimport { gettext } from '@c8y/ngx-components';\nimport { IManagedObject } from '@c8y/client';\n\nexport class GroupDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    this.name = 'group';\n    this.header = gettext('Group');\n    this.cellRendererComponent = GroupCellRendererComponent;\n    this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;\n    this.filterable = true;\n    this.filteringConfig = {\n      getFilter(model) {\n        const filter: any = {};\n        if (model.selectedNodes) {\n          filter.__or = model.selectedNodes.map((mo: IManagedObject) => {\n            if (mo.c8y_DeviceQueryString) {\n              return { __useFilterQueryString: mo.c8y_DeviceQueryString };\n            }\n            return { __bygroupid: mo.id };\n          });\n        }\n        return filter;\n      }\n    };\n    this.sortable = false;\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class ImeiDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const self = this;\n\n    this.path = 'c8y_Mobile.imei';\n    this.name = 'imei';\n    this.header = gettext('IMEI');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          imeis: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'imeis',\n          title: gettext('Show devices with IMEI'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'imeis[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. 46543432321, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.imeis.length) {\n          filter[self.path] = { __in: model.imeis };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    {{ deviceGridService.getModel(context.item) }}\n  `\n})\nexport class ModelCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { ModelCellRendererComponent } from './model.cell-renderer.component';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class ModelDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const hardwareModelPath = 'c8y_Hardware.model';\n    const vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';\n\n    this.name = 'model';\n    this.header = gettext('Model');\n    this.cellRendererComponent = ModelCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          models: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'models',\n          title: gettext('Show devices with model'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'models[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. ModelName, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.models.length) {\n          filter.__or = {\n            [hardwareModelPath]: { __in: model.models },\n            [vendingModelPath]: { __in: model.models }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    <a\n      [href]=\"deviceGridService.getDeviceHref(context.item)\"\n      title=\"{{ deviceGridService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ deviceGridService.getProperName(context.item) }}\n    </a>\n  `\n})\nexport class NameCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { NameCellRendererComponent } from './name.cell-renderer.component';\nimport { ColumnDataRecordClassName } from '@c8y/ngx-components';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class NameDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    this.name = 'name';\n    this.path = 'name';\n    this.header = gettext('Name');\n    this.cellCSSClassName = ColumnDataRecordClassName.Header;\n    this.cellRendererComponent = NameCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          names: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'names',\n          title: gettext('Show devices with name'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'names[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. My Device, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.names.length) {\n          filter.name = { __in: model.names };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    {{ context.value | c8yDate }}\n  `\n})\nexport class RegistrationDateCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { RegistrationDateCellRendererComponent } from './registration-date.cell-renderer.component';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class RegistrationDateDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const self = this;\n\n    this.path = 'creationTime';\n    this.name = 'registrationDate';\n    this.header = gettext('Registration date');\n    this.cellRendererComponent = RegistrationDateCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          registrationDate: {\n            type: 'object',\n            properties: {\n              after: {\n                type: 'string',\n                format: 'datetime'\n              },\n              before: {\n                type: 'string',\n                format: 'datetime'\n              }\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'registrationDate.after',\n          title: gettext('Show devices registered after'),\n          maxDateKey: 'registrationDate.before'\n        },\n        {\n          key: 'registrationDate.before',\n          title: gettext('And before`date`'),\n          minDateKey: 'registrationDate.after'\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const dates = model && model.registrationDate;\n        if (dates && (dates.after || dates.before)) {\n          filter.__and = [];\n          if (dates.after) {\n            const after = self.formatDate(dates.after);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __gt: after },\n                [`${self.path}.date`]: { __gt: after }\n              }\n            });\n          }\n          if (dates.before) {\n            const before = self.formatDate(dates.before);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __lt: before },\n                [`${self.path}.date`]: { __lt: before }\n              }\n            });\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]\n    };\n  }\n\n  protected formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    {{ deviceGridService.getSerialNumber(context.item) }}\n  `\n})\nexport class SerialNumberCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class SerialNumberDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';\n    const vendingSerialNumberPath =\n      'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';\n\n    this.name = 'serialNumber';\n    this.header = gettext('Serial number');\n    this.cellRendererComponent = SerialNumberCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          serialNumbers: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'serialNumbers',\n          title: gettext('Show devices with serial number'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'serialNumbers[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. 54321-123, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.serialNumbers.length) {\n          filter.__or = {\n            [hardwareSerialNumberPath]: { __in: model.serialNumbers },\n            [vendingSerialNumberPath]: { __in: model.serialNumbers }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    <device-status [mo]=\"context.item\"></device-status>\n  `\n})\nexport class StatusCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { StatusCellRendererComponent } from './status.cell-renderer.component';\nimport { ColumnDataType, PushStatus, SendStatus } from '@c8y/ngx-components';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class StatusDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';\n    const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };\n    const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };\n\n    const availabilityStatusPath = 'c8y_Availability.status';\n    const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };\n    const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };\n    const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };\n    const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };\n\n    const connectionStatusPath = 'c8y_Connection.status';\n    const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };\n    const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };\n    const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };\n\n    const deviceUnderMaintenance = {\n      __or: [\n        responseIntervalLessThanOrEqualTo0,\n        availabilityStatusMaintenance,\n        connectionStatusMaintenance\n      ]\n    };\n    const deviceNotUnderMaintenance = {\n      // using __and of __nots because backend does not support __not with __ors\n      __and: [\n        { __not: responseIntervalLessThanOrEqualTo0 },\n        { __not: availabilityStatusMaintenance },\n        { __not: connectionStatusMaintenance }\n      ]\n    };\n\n    this.name = 'status';\n    this.header = gettext('Status');\n    this.dataType = ColumnDataType.Icon;\n    this.cellRendererComponent = StatusCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          sendOnline: {\n            type: 'boolean'\n          },\n          sendOffline: {\n            type: 'boolean'\n          },\n          sendUnknown: {\n            type: 'boolean'\n          },\n          sendNotMonitored: {\n            type: 'boolean'\n          },\n          pushOnline: {\n            type: 'boolean'\n          },\n          pushOffline: {\n            type: 'boolean'\n          },\n          pushNotMonitored: {\n            type: 'boolean'\n          },\n          maintenance: {\n            type: 'boolean'\n          }\n        }\n      },\n      form: [\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with send status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'sendOnline',\n          title: gettext('Online')\n        },\n        {\n          key: 'sendOffline',\n          title: gettext('Offline')\n        },\n        {\n          key: 'sendUnknown',\n          title: gettext('Unknown')\n        },\n        {\n          key: 'sendNotMonitored',\n          title: gettext('Not monitored')\n        },\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with push status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'pushOnline',\n          title: gettext('Online')\n        },\n        {\n          key: 'pushOffline',\n          title: gettext('Offline')\n        },\n        {\n          key: 'pushNotMonitored',\n          title: gettext('Not monitored')\n        },\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with maintenance status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'maintenance',\n          title: gettext('Device is under maintenance')\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n\n        if (model) {\n          if (model.sendOnline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]\n            });\n          }\n          if (model.sendOffline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]\n            });\n          }\n          if (model.sendUnknown) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]\n            });\n          }\n          if (model.sendNotMonitored || model.pushNotMonitored) {\n            ors.push(responseIntervalNotDefined);\n          }\n          if (model.pushOnline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, connectionStatusConnected]\n            });\n          }\n          if (model.pushOffline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]\n            });\n          }\n          if (model.maintenance) {\n            ors.push(deviceUnderMaintenance);\n          }\n\n          if (ors.length) {\n            filter.__or = ors;\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: availabilityStatusPath }]\n    };\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class SystemIdDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const self = this;\n\n    this.path = 'id';\n    this.name = 'systemId';\n    this.header = gettext('System ID');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          ids: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'ids',\n          title: gettext('Show devices with system ID'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'ids[]',\n              notitle: true,\n              placeholder: gettext('e.g. 10300, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.ids.length) {\n          filter[self.path] = { __in: model.ids };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';\nimport { ActionControl, BulkActionControl, Pagination, Row } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { assign, forEach, get, identity, map, remove, sortBy, transform } from 'lodash-es';\nimport { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';\nimport { GroupDeviceGridColumn } from './columns/group.device-grid-column';\nimport { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';\nimport { ModelDeviceGridColumn } from './columns/model.device-grid-column';\nimport { NameDeviceGridColumn } from './columns/name.device-grid-column';\nimport { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';\nimport { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';\nimport { StatusDeviceGridColumn } from './columns/status.device-grid-column';\nimport { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';\nimport { DeviceGridActionType, DeviceGridColumn } from './device-grid.models';\n\n@Injectable()\nexport class DeviceGridService {\n  queriesUtil: QueriesUtil;\n\n  constructor(\n    private inventoryService: InventoryService,\n    private translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  getDefaultColumns(): DeviceGridColumn[] {\n    return [\n      new StatusDeviceGridColumn(),\n      new NameDeviceGridColumn(),\n      new ModelDeviceGridColumn(),\n      new SerialNumberDeviceGridColumn(),\n      new GroupDeviceGridColumn(),\n      new RegistrationDateDeviceGridColumn(),\n      new SystemIdDeviceGridColumn(),\n      new ImeiDeviceGridColumn(),\n      new AlarmsDeviceGridColumn()\n    ];\n  }\n\n  getDefaultPagination(): Pagination {\n    return {\n      pageSize: 10,\n      currentPage: 1\n    };\n  }\n\n  getInfiniteScrollPagination(): Pagination {\n    return {\n      pageSize: 50,\n      currentPage: 1\n    };\n  }\n\n  getDefaultActionControls(): ActionControl[] {\n    return [\n      {\n        type: DeviceGridActionType.Delete,\n        callback: (item: Row) => this.delete(item as IManagedObject)\n      }\n    ];\n  }\n\n  getDefaultBulkActionControls(): BulkActionControl[] {\n    return [];\n  }\n\n  getProperName(device: IManagedObject): string {\n    const { id, name } = device;\n    return name ? name : this.translateService.instant('Device {{id}}', { id });\n  }\n\n  getModel(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    return hardware && hardware.model;\n  }\n\n  getSerialNumber(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';\n    return hardware && hardware[serialPropertyName];\n  }\n\n  getParentsNames(device: IManagedObject, featuredParentId?: string | number): string {\n    const assetParentsReferences = device.assetParents.references;\n    const assetParents = map(assetParentsReferences, 'managedObject');\n    const sortedByName = sortBy(assetParents, ['name']);\n    const featuredItems = remove(sortedByName, { id: featuredParentId });\n    const items = featuredItems.concat(sortedByName);\n    const names = map(items, 'name');\n    return names.join(', ');\n  }\n\n  getDeviceHref(device: IManagedObject): string {\n    return `#/device/${device.id}`;\n  }\n\n  getAlarmsHref(device: IManagedObject): string {\n    return `${this.getDeviceHref(device)}/alarms`;\n  }\n\n  delete(device: IManagedObject) {\n    console.log('should delete', device);\n  }\n\n  async getDevices(columns: DeviceGridColumn[], pagination: Pagination) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination),\n      withParents: true\n    };\n    return this.inventoryService.list(filters);\n  }\n\n  async getDevicesCount(columns: DeviceGridColumn[], pagination: Pagination) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination),\n      pageSize: 1,\n      currentPage: 1\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  async getDevicesTotal(): Promise<number> {\n    const filters = {\n      q: '',\n      pageSize: 1,\n      withTotalPages: true\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  getDeviceQueryString(columns: DeviceGridColumn[]): string {\n    return this.queriesUtil.buildQuery(this.getQueryObj(columns));\n  }\n\n  private getHardware(device: IManagedObject): any {\n    const hardwarePropertyName = this.isVendme(device)\n      ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'\n      : 'c8y_Hardware';\n    return device && device[hardwarePropertyName];\n  }\n\n  private isVendme(device: IManagedObject) {\n    return device.type === 'com_nsn_startups_vendme_VendingMachine';\n  }\n\n  private getDevicesFilters(columns: DeviceGridColumn[], pagination: Pagination) {\n    return {\n      q: this.getDeviceQueryString(columns),\n      pageSize: pagination.pageSize,\n      currentPage: pagination.currentPage,\n      withTotalPages: true\n    };\n  }\n\n  private getQueryObj(columns: DeviceGridColumn[]): any {\n    return transform(columns, (query, column) => this.extendQueryByColumn(query, column), {\n      __filter: {},\n      __orderby: []\n    });\n  }\n\n  private extendQueryByColumn(query: any, column: DeviceGridColumn): void {\n    if (column.filterable && column.externalFilterQuery) {\n      const getFilter = column.filteringConfig.getFilter || identity;\n      const queryObj = getFilter(column.externalFilterQuery);\n\n      if (queryObj.__or) {\n        query.__filter.__and = query.__filter.__and || [];\n        query.__filter.__and.push(queryObj);\n      } else if (queryObj.__and && get(query, '__filter.__and')) {\n        queryObj.__and.map(obj => query.__filter.__and.push(obj));\n      } else {\n        assign(query.__filter, queryObj);\n      }\n    }\n\n    if (column.sortable && column.sortOrder) {\n      const cs = {};\n      forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {\n        cs[pathSortingConfig.path] =\n          (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);\n      });\n      query.__orderby.push(cs);\n    }\n    return query;\n  }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport {\n  ActionControl,\n  BulkActionControl,\n  DataGridComponent,\n  DataSourceModifier,\n  FilteringActionType,\n  FilteringModifier,\n  gettext,\n  LoadMoreMode,\n  Pagination,\n  ServerSideDataResult\n} from '@c8y/ngx-components';\nimport { DeviceGridColumn } from './device-grid.models';\nimport { DeviceGridService } from './device-grid.service';\n\n@Component({\n  selector: 'c8y-device-grid',\n  templateUrl: './device-grid.component.html'\n})\nexport class DeviceGridComponent {\n  @Input() title: string = gettext('Devices');\n  @Input() loadMoreItemsLabel = gettext('Load more devices');\n  @Input() loadingItemsLabel: string = gettext('Loading devices…');\n  @Input() noMatchingItemsLabel: string = gettext('No matching devices.');\n  @Input('columns') set _columns(value: DeviceGridColumn[]) {\n    if (value) {\n      this.columns = value;\n    } else {\n      this.columns = this.deviceGridService.getDefaultColumns();\n    }\n  }\n  @Input('pagination') set _pagination(value: Pagination) {\n    if (value) {\n      this.pagination = value;\n    } else {\n      this.pagination = this.deviceGridService.getDefaultPagination();\n    }\n  }\n  infiniteScroll: LoadMoreMode;\n  @Input('infiniteScroll') set _infiniteScroll(infiniteScroll: LoadMoreMode) {\n    this.infiniteScroll = infiniteScroll;\n    this.pagination = this.deviceGridService.getInfiniteScrollPagination();\n  }\n  @Input('actionControls') set _actionControls(value: ActionControl[]) {\n    if (value) {\n      this.actionControls = value;\n    } else {\n      this.actionControls = this.deviceGridService.getDefaultActionControls();\n    }\n  }\n  @Input() selectable: boolean = false;\n  @Input('bulkActionControls') set _bulkActionControls(value: BulkActionControl[]) {\n    if (value) {\n      this.bulkActionControls = value;\n    } else {\n      this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();\n    }\n  }\n  @Output() onColumnsChange: EventEmitter<DeviceGridColumn[]> = new EventEmitter<\n    DeviceGridColumn[]\n  >();\n  @Output() onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n\n  columns: DeviceGridColumn[] = this.deviceGridService.getDefaultColumns();\n  pagination: Pagination = this.deviceGridService.getDefaultPagination();\n  actionControls: ActionControl[] = this.deviceGridService.getDefaultActionControls();\n  bulkActionControls: BulkActionControl[] = this.deviceGridService.getDefaultBulkActionControls();\n  serverSideDataCallback: any;\n\n  @ViewChild(DataGridComponent, { static: true })\n  dataGrid: DataGridComponent;\n\n  constructor(public deviceGridService: DeviceGridService) {\n    this.serverSideDataCallback = this.onDataSourceModifier.bind(this);\n  }\n\n  trackByName(_index, column: DeviceGridColumn): string {\n    return column.name;\n  }\n\n  async onDataSourceModifier(\n    dataSourceModifier: DataSourceModifier\n  ): Promise<ServerSideDataResult> {\n    const { res, data, paging } = await this.deviceGridService.getDevices(\n      dataSourceModifier.columns,\n      dataSourceModifier.pagination\n    );\n    const filteredSize: number = await this.deviceGridService.getDevicesCount(\n      dataSourceModifier.columns,\n      dataSourceModifier.pagination\n    );\n    const size: number = await this.deviceGridService.getDevicesTotal();\n\n    this.onColumnsChange.emit(dataSourceModifier.columns);\n    this.onDeviceQueryStringChange.emit(\n      this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns)\n    );\n\n    return {\n      res,\n      data,\n      paging,\n      filteredSize,\n      size\n    };\n  }\n\n  updateFiltering(\n    columnNames: string[],\n    action: {\n      type: FilteringActionType;\n      payload?: { filteringModifier: FilteringModifier };\n    }\n  ) {\n    const { type } = action;\n    if (type === FilteringActionType.ResetFilter) {\n      this.dataGrid.clearFilters();\n    } else {\n      this.dataGrid.updateFiltering(columnNames, action);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DataGridModule, DeviceStatusModule, FormsModule } from '@c8y/ngx-components';\nimport { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';\nimport { DeviceGridComponent } from './device-grid.component';\nimport { DeviceGridService } from './device-grid.service';\n\nimport { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';\n\nimport { StatusCellRendererComponent } from './columns/status.cell-renderer.component';\nimport { NameCellRendererComponent } from './columns/name.cell-renderer.component';\nimport { ModelCellRendererComponent } from './columns/model.cell-renderer.component';\nimport { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';\nimport { GroupCellRendererComponent } from './columns/group.cell-renderer.component';\nimport { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';\nimport { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';\nimport { SchemaFormComponent } from './schema-form.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],\n  declarations: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent,\n    SchemaFormComponent\n  ],\n  exports: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent,\n    SchemaFormComponent\n  ],\n  entryComponents: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent\n  ],\n  providers: [DeviceGridService]\n})\nexport class DeviceGridModule {}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext } from '@c8y/ngx-components';\n\nexport class CustomDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const self = this;\n\n    this.name = 'custom';\n    this.header = gettext('Custom');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          exists: {\n            type: 'boolean',\n            default: false,\n            title: gettext('Only rows where value is defined')\n          },\n          equals: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'exists'\n        },\n        {\n          key: 'equals',\n          title: gettext('Only rows where value equals to:'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'equals[]',\n              notitle: true,\n              placeholder: gettext('e.g. value, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.exists) {\n          filter.__has = self.path;\n        }\n        if (model.equals) {\n          filter[self.path] = { __in: model.equals };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n  }\n\n  get sortingConfig() {\n    return {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from './base.device-grid-column';\n\nexport class TypeDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    this.name = 'type';\n    this.path = 'type';\n    this.header = gettext('Type');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          types: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'types',\n          title: gettext('Show devices with type'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'types[]',\n              notitle: true,\n              placeholder: gettext('e.g. MyType, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.types.length) {\n          filter.type = { __in: model.types };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AlarmsCellRendererComponent as ɵi} from './columns/alarms.cell-renderer.component';\nexport {BaseFilteringFormRendererComponent as ɵa} from './columns/base.filtering-form-renderer.component';\nexport {GroupCellRendererComponent as ɵg} from './columns/group.cell-renderer.component';\nexport {GroupFilteringFormRendererComponent as ɵb} from './columns/group.filtering-form-renderer.component';\nexport {ModelCellRendererComponent as ɵe} from './columns/model.cell-renderer.component';\nexport {NameCellRendererComponent as ɵd} from './columns/name.cell-renderer.component';\nexport {RegistrationDateCellRendererComponent as ɵh} from './columns/registration-date.cell-renderer.component';\nexport {SerialNumberCellRendererComponent as ɵf} from './columns/serial-number.cell-renderer.component';\nexport {StatusCellRendererComponent as ɵc} from './columns/status.cell-renderer.component';"],"names":["tslib_1.__extends","tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}