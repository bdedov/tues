{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","path","replace","split","isArray","slice","FORMLY_VALIDATORS","assignFieldValue","paths","root","parent","undefined","k","pop","reduce","model","assignModelValue","isObject","test","clone","getFieldValue","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","splice","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","called","emitEvent","_a","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","lazyRender","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_resolver","_injector","resolveComponentFactory","destroy","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","ChangeDetectorRef","markForCheck","_buildField","ComponentFactoryResolver","Injector","unregisterControl","control","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","FormGroup","key_2","removeControl","setParent","findControl","registerControl","templateOptions","disabled","disable","enable","registerOnDisabledChange","FormControl","patchValue","setControl","_hide","status","updateValueAndValidity","emit","_forEachChild","cb","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","checkExpressionChange","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","clearControl","setValidators","setAsyncValidators","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","resetModel","_initialModel","resetForm","reset","emitModelChange","rootKey","control_1","valueChanges","distinctUntilChanged","modelOptions","updateOn","debounce","default","debounceTime","onlySelf","parsers","parserFn","tslib_1.__spread","join","observers","unshift","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","hooksObservers","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","resetRefs","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","changeDetectorRef","detectChanges","hooks","sub_1","lifecycle","render","setStyle","setAttribute","filter","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","listener","eventName","to","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","id","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","Directive","host","(focus)","(blur)","(change)","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","of","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","checkLocked","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","this_1","_evalExpression","Observable","subscribe_1","setExprValue","subscription_1","onInit_1","onInit","onDestroy_1","onDestroy","hideExpression","hide","parentExpression","evalStringExpression","argNames","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","hideExpressionResult","hidden","setDisabledState","resetOnHide","every","target","lastIndex","emitExpressionChanges","property","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLength","maxLength","min","max","validatorOption","isPromise","obj","then","handleAsyncResult","handleResult","ctrl","childCtrl","setErrors","childErrors","FieldFormExtension","addFormControl","fieldsToUpdate","controlOptions","componentType","c_1","enabled","updateControlValidity","asyncValidator","mergeValidators","composeAsync","childrenToUpdate","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","getFieldId","label","placeholder","resetFieldOnHide","setDefaultValue","parent_1","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"4lBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAGhC,SAAgBI,EAAOP,EAAGQ,GACtB,IAAIT,EAAI,GACR,IAAK,IAAIV,KAAKW,EAAOf,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,IAAMmB,EAAEC,QAAQpB,GAAK,IAC9EU,EAAEV,GAAKW,EAAEX,IACb,GAAS,MAALW,GAAqD,mBAAjCf,OAAOyB,sBACtB,CAAA,IAAIT,EAAI,EAAb,IAAgBZ,EAAIJ,OAAOyB,sBAAsBV,GAAIC,EAAIZ,EAAEe,OAAQH,IAC3DO,EAAEC,QAAQpB,EAAEY,IAAM,GAAKhB,OAAOU,UAAUgB,qBAAqBN,KAAKL,EAAGX,EAAEY,MACvEF,EAAEV,EAAEY,IAAMD,EAAEX,EAAEY,KAE1B,OAAOF,EAGX,SAwDgBa,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWf,EAAI,EAChE,OAAIa,EAAUA,EAAET,KAAKQ,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKZ,GAAKY,EAAET,SAAQS,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEZ,KAAMkB,MAAON,KAKhD,SAAgBO,EAAOP,EAAGX,GACtB,IAAIY,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBQ,EAAYb,EAA3BP,EAAIa,EAAET,KAAKQ,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANpB,GAAsB,EAANA,QAAcmB,EAAIpB,EAAEgB,QAAQE,MAAMG,EAAGC,KAAKF,EAAEH,OAExE,MAAOM,GAAShB,EAAI,CAAEgB,MAAOA,WAEzB,IACQH,IAAMA,EAAEF,OAASL,EAAIb,EAAU,YAAIa,EAAET,KAAKJ,WAExC,GAAIO,EAAG,MAAMA,EAAEgB,OAE7B,OAAOF,EAGX,SAAgBG,IACZ,IAAK,IAAIH,EAAK,GAAIrB,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CqB,EAAKA,EAAGI,OAAON,EAAOjB,UAAUF,KACpC,OAAOqB,EC/HX,SAAgBK,EAAWC,GACzB,IAAKA,EAAMC,IACT,MAAO,GAIT,IAAKD,EAAME,UAAYF,EAAME,SAASD,MAAQD,EAAMC,IAAK,KACnDE,EAAiB,GACrB,GAAyB,iBAAdH,EAAMC,IAAkB,KAC3BA,GAAkC,IAA5BD,EAAMC,IAAIpB,QAAQ,KAC1BmB,EAAMC,IACND,EAAMC,IAAIG,QAAQ,aAAc,OACpCD,GAA6B,IAAtBF,EAAIpB,QAAQ,KAAcoB,EAAII,MAAM,KAAO,CAACJ,QAEnDE,EADS3C,MAAM8C,QAAQN,EAAMC,KACtBD,EAAMC,IAAIM,MAAM,GAEhB,CAAC,GAAGP,EAAMC,KAGnBD,EAAME,SAAW,CAAED,IAAKD,EAAMC,IAAKE,KAAIA,GAGzC,OAAOH,EAAME,SAASC,KAAKI,MAAM,GAGnC,IAAaC,EAAoB,CAAC,WAAY,UAAW,YAAa,YAAa,MAAO,OAE1F,SAAgBC,EAAiBT,EAA+BV,OAC1DoB,EAAQX,EAAWC,GACvB,GAAqB,IAAjBU,EAAMlC,OAAV,CAKA,QADImC,EAAOX,EACJW,EAAKC,QAEVF,EAAKb,EAAOE,EADZY,EAAOA,EAAKC,QACqBF,GAGnC,GAAIpB,IAAUuB,WAAab,EAAiB,UAA5C,KACQc,EAAIJ,EAAMK,aACNL,EAAMM,OAAM,SAAEC,EAAOd,GAAS,OAAAc,EAAMd,IAAS,IAAIQ,EAAKM,OACvDH,QAOb,SAAgBI,EAAiBD,EAAYP,EAAiBpB,GAC5D,IAAK,IAAIjB,EAAI,EAAGA,EAAKqC,EAAMlC,OAAS,EAAIH,IAAK,KACrC8B,EAAOO,EAAMrC,GACd4C,EAAMd,IAAUgB,EAASF,EAAMd,MAClCc,EAAMd,GAAQ,QAAQiB,KAAKV,EAAMrC,EAAI,IAAM,GAAK,IAGlD4C,EAAQA,EAAMd,GAGhBc,EAAMP,EAAMA,EAAMlC,OAAS,IAAM6C,EAAM/B,GAbvC4B,CAAiBP,EAAKM,MAAOP,EAAOpB,IAkCtC,SAAgBgC,EAActB,WACxBiB,EAAQjB,EAAMY,OAAOK,UACzB,IAAmB,IAAAM,EAAAC,EAAAzB,EAAWC,IAAMyB,EAAAF,EAAAlC,QAAAoC,EAAAlC,KAAAkC,EAAAF,EAAAlC,OAAE,CAAjC,IAAMc,EAAIsB,EAAAnC,MACb,IAAK2B,EACH,OAAOA,EAETA,EAAQA,EAAMd,wGAGhB,OAAOc,EAGT,SAAgBS,EAAiBC,OAAW,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAtD,UAAAC,OAAAqD,IAAAD,EAAAC,EAAA,GAAAtD,UAAAsD,GAU1C,OATAD,EAAKE,QAAO,SAACC,GACX,IAAK,IAAIC,KAAUD,EACbE,EAAkBN,EAAKK,KAmBd,KAnBwCL,EAAKK,GACxDL,EAAKK,GAAUX,EAAMU,EAAIC,KAyBFE,EAxBCP,EAAKK,GAwBKG,EAxBIJ,EAAIC,GAyBzCb,EAASe,IAASf,EAASgB,IAC7B9E,OAAO+E,eAAeF,KAAU7E,OAAO+E,eAAeD,KACpD3E,MAAM8C,QAAQ4B,KAAS1E,MAAM8C,QAAQ6B,IA1BtCT,EAAiBC,EAAKK,GAASD,EAAIC,KAuB3C,IAA+BE,EAAWC,IAnBjCR,EAGT,SAAgBM,EAAkB3C,GAChC,OAAOA,IAAUuB,WAAuB,OAAVvB,EAGhC,SAAgB+C,EAAY/C,GAC1B,OAAOA,IAAUuB,UAOnB,SAAgByB,EAAWhD,GACzB,MAAyB,mBAAlB,EAST,SAAgB6B,EAASoB,GACvB,OAAY,MAALA,GAA0B,iBAANA,EAO7B,SAAgBlB,EAAM/B,GACpB,IACG6B,EAAS7B,IACPkD,EAAAA,aAAalD,IACiBA,EAAMmD,wCACwC,IAA5E,CAAC,SAAU,WAAY,OAAQ,QAAQ5D,QAAQS,EAAMxB,YAAY4E,MAEpE,OAAOpD,EAIT,GAAIA,EAAMqD,kBAAoBL,EAAWhD,EAAM+B,OAC7C,OAAO/B,EAAM+B,QAGf,GAAI/B,aAAiBsD,EAAAA,gBACnB,OAAO,KAGT,GAAItD,aAAiBuD,KACnB,OAAO,IAAIA,KAAKvD,EAAMwD,WAGxB,GAAItF,MAAM8C,QAAQhB,GAChB,OAAOA,EAAMiB,MAAM,GAAGwC,IAAG,SAACC,GAAK,OAAA3B,EAAM2B,SAKjCC,EAAQ5F,OAAO+E,eAAe9C,GAChC4D,EAAI7F,OAAOW,OAAOiF,GAItB,OAHAC,EAAI7F,OAAOC,eAAe4F,EAAGD,GAGtB5F,OAAO8F,KAAK7D,GAAO0B,OAAM,SAAEoC,EAAQC,OAClCC,EAAWjG,OAAOkG,yBAAyBjE,EAAO+D,GAOxD,OANIC,EAASE,IACXnG,OAAOoG,eAAeL,EAAQC,EAAMC,GAEpCF,EAAOC,GAAQhC,EAAM/B,EAAM+D,IAGtBD,GACNF,GAGL,SAAgBQ,EAAiB1D,EAAYqD,EAAcM,GACzDtG,OAAOoG,eAAezD,EAAOqD,EAAM,CAAEO,YAAY,EAAOC,UAAU,EAAMC,cAAc,IACtF9D,EAAMqD,GAAQM,EAGhB,SAAgBI,EACd9E,EACAoE,EACAW,GAEK/E,EAAEgF,YACLP,EAAiBzE,EAAG,aAAc,IAG/BA,EAAEgF,WAAWZ,KAChBpE,EAAEgF,WAAWZ,GAAQ,QAGnBa,EAAsBjF,EAAEgF,WAAWZ,GAoBvC,OAnB4B,IAAxBa,EAAIrF,QAAQmF,KACdE,EAAIvE,KAAKqE,GACTA,EAAM,CAAEG,aAAclF,EAAEoE,GAAOe,aAAa,IACzB,IAAfF,EAAI1F,SACNkF,EAAiBzE,EAAG,OAAOoE,EAAQpE,EAAEoE,IACrChG,OAAOoG,eAAexE,EAAGoE,EAAM,CAC7BS,cAAc,EACdN,IAAG,WAAQ,OAAAvE,EAAE,OAAOoE,IACpBgB,IAAG,SAAEF,GACH,GAAIA,IAAiBlF,EAAE,OAAOoE,GAAS,KAC/BiB,EAAgBrF,EAAE,OAAOoE,GAC/BpE,EAAE,OAAOoE,GAAUc,EACnBD,EAAIpC,QAAO,SAACyC,GAAY,OAAAA,EAAS,CAAEC,cAAaF,EAAEH,aAAYA,EAAEC,aAAa,YAOvF,WAAa,OAAAF,EAAIO,OAAOP,EAAIrF,QAAQmF,GAAQ,IAG9C,SAAgBU,EAA8BC,EAAWC,OACjDC,EAAiBF,EAAKG,oBAAoBC,KAAKJ,GAEjDK,EAAqB,CAAEC,QAAQ,EAAOC,WAAW,GACrDP,EAAKG,oBAAmB,SAAIK,OAAED,QAAA,IAAAC,EAAA,CAAAD,WAAA,GAAAC,GAAAD,UAAsC,OAAAF,EAAqB,CAAEC,QAAQ,EAAMC,UAAWA,GAAaF,EAAmBE,YACpJN,IAEAI,EAAmBC,QAAUJ,EAAe,CAAEK,UAAWF,EAAmBE,YAC5EP,EAAKG,oBAAsBD,EC3O7B,IAAaO,EAAgB,IAAIC,EAAAA,eAA6B,iBAY9DC,EAAA,WAAA,SAAAA,IAEEzH,KAAA0H,MAAsC,GACtC1H,KAAA2H,WAAkD,GAClD3H,KAAA4H,SAA8C,GAC9C5H,KAAA6H,SAAmE,GACnE7H,KAAA8H,qBAGI,CACFC,WAAY,GACZC,YAAa,IAEfhI,KAAAiI,OAAiC,CAC/BC,kBAAmB,uBACnBC,YAAY,EACZC,UAAS,SAAWjG,GAClB,OAAOA,EAAMkG,aAAelG,EAAMkG,YAAYC,UAAYnG,EAAMkG,YAAYE,SAAYpG,EAAMqG,QAAQC,YAActG,EAAMqG,QAAQC,WAAWC,cAAiBvG,EAAMA,MAAMwG,aAAcxG,EAAMA,MAAMwG,WAAWC,SAGnN5I,KAAA6I,WAAkD,UAElDpB,EAAAvH,UAAA4I,UAAA,SAAUC,GAAV,IAAAC,EAAAhJ,KACM+I,EAAOrB,OACTqB,EAAOrB,MAAMzD,QAAO,SAACgF,GAAQ,OAAAD,EAAKE,QAAQD,KAExCF,EAAOpB,YACToB,EAAOpB,WAAW1D,QAAO,SAACkF,GAAa,OAAAH,EAAKI,aAAaD,KAEvDJ,EAAOnB,UACTmB,EAAOnB,SAAS3D,QAAO,SAACoF,GAAW,OAAAL,EAAKM,WAAWD,KAEjDN,EAAOQ,eACTC,QAAQC,KAAK,yFACbV,EAAOQ,aAAatF,QAAO,SAACyF,GAAe,OAAAV,EAAKW,eAAeD,MAE7DX,EAAOa,oBACTb,EAAOa,mBAAmB3F,QAAO,SAAC0E,GAAc,OAAAK,EAAKa,oBAAoBlB,EAAW9D,KAAM8D,EAAWmB,WAEnGf,EAAOF,YACTE,EAAOF,WAAW5E,QAAO,SAACoB,GAAK,OAAA2D,EAAKH,WAAWxD,EAAER,MAAQQ,EAAE0E,YAEzDhB,EAAOd,SACTjI,KAAKiI,OAAM7H,EAAA,GAAQJ,KAAKiI,OAAWc,EAAOd,UAI9CR,EAAAvH,UAAAgJ,QAAA,SAAQV,GAAR,IAAAQ,EAAAhJ,KACML,MAAM8C,QAAQ+F,GAChBA,EAAQvE,QAAO,SAAE+F,GAAW,OAAAhB,EAAKE,QAAQc,MAEpChK,KAAK0H,MAAMc,EAAQ3D,QACtB7E,KAAK0H,MAAMc,EAAQ3D,MAAK,CAAiBA,KAAM2D,EAAQ3D,OAGzD,CAAC,YAAa,UAAW,kBAAkBZ,QAAO,SAACuB,GAC7CgD,EAAQ3I,eAAe2F,KACzBwD,EAAKtB,MAAMc,EAAQ3D,MAAMW,GAAQgD,EAAQhD,MAIzCgD,EAAQZ,UACVY,EAAQZ,SAAS3D,QAAO,SAAEoF,GAAY,OAAAL,EAAKiB,eAAezB,EAAQ3D,KAAMwE,OAK9E5B,EAAAvH,UAAAgK,QAAA,SAAQrF,GACN,IAAK7E,KAAK0H,MAAM7C,GACd,MAAM,IAAIsF,MAAM,4BAA4BtF,EAAI,mGAKlD,OAFA7E,KAAKoK,kBAAkBvF,GAEhB7E,KAAK0H,MAAM7C,IAGpB4C,EAAAvH,UAAAmK,eAAA,SAAelI,GAAf,IAAA6G,EAAAhJ,UAAe,IAAAmC,IAAAA,EAAA,QACP8G,EAAOjJ,KAAKkK,QAAQ/H,EAAM8G,MAC5BA,EAAKqB,gBACPzG,EAAiB1B,EAAO8G,EAAKqB,oBAGzBC,EAAiBtB,EAAKuB,YAAWxK,KAAKkK,QAAQjB,EAAKuB,YAASF,eAC9DC,GACF1G,EAAiB1B,EAAOoI,GAGtBpI,GAASA,EAAMsI,cACjBtI,EAAMsI,aAAaxG,QAAO,SAAC+F,OACnBM,EAAiBtB,EAAKkB,QAAQF,GAAQM,eACxCA,GACFzG,EAAiB1B,EAAOmI,SAKxBI,EAAe1K,KAAK2K,oBAAoBxI,GAC1CuI,GAAgBA,EAAaE,UAAYF,EAAaE,SAASN,gBACjEzG,EAAiB1B,EAAOuI,EAAaE,SAASN,iBAG3CnI,EAAMyF,UAAYqB,EAAKrB,WAC1BzF,EAAMyF,SAAQ5F,EAAOiH,EAAKrB,YAK9BH,EAAAvH,UAAAyK,oBAAA,SAAoBxI,GAClB,QADkB,IAAAA,IAAAA,EAAA,KACbA,EAAM8G,KACT,OAAO,SAGHA,EAAOjJ,KAAKkK,QAAQ/H,EAAM8G,MAChC,IAAKA,EAAK4B,WAAa5B,EAAoB,cACzC,OAAOA,EAAoB,cAGvB,IAAA3B,EAAAnF,EAAAY,OAAAyF,QAAEsC,EAAAxD,EAAAwD,UAAWC,EAAAzD,EAAAyD,UACbL,EAAeI,EAClBE,wBAAmC/B,EAAK4B,WACxC1K,OAAO4K,GAKV,OAHAlF,EAAiBoD,EAAM,gBAAiByB,GACxCA,EAAaO,UAENhC,EAAoB,eAG7BxB,EAAAvH,UAAAoJ,WAAA,SAAWd,GAAX,IAAAQ,EAAAhJ,MACEA,KAAK4H,SAASY,EAAQ3D,MAAQ2D,GAClBd,OACVc,EAAQd,MAAMzD,QAAO,SAAEgF,GACrBD,EAAKiB,eAAehB,EAAMT,EAAQ3D,SAKxC4C,EAAAvH,UAAAgL,WAAA,SAAWrG,GACT,IAAK7E,KAAK4H,SAAS/C,GACjB,MAAM,IAAIsF,MAAM,+BAA+BtF,EAAI,mGAGrD,OAAO7E,KAAK4H,SAAS/C,IAGvB4C,EAAAvH,UAAA+J,eAAA,SAAehB,EAAcpE,GACtB7E,KAAK0H,MAAMuB,KACdjJ,KAAK0H,MAAMuB,GAAK,IAEbjJ,KAAK0H,MAAMuB,GAAMrB,WACpB5H,KAAK0H,MAAMuB,GAAMrB,SAAW,KAEmB,IAA7C5H,KAAK0H,MAAMuB,GAAMrB,SAAS5G,QAAQ6D,IACpC7E,KAAK0H,MAAMuB,GAAMrB,SAAS9F,KAAK+C,IAInC4C,EAAAvH,UAAAkJ,aAAA,SAAaZ,GACXxI,KAAK2H,WAAWa,EAAQ3D,MAAQ2D,GAGlCf,EAAAvH,UAAAiL,aAAA,SAAatG,GACX,IAAK7E,KAAK2H,WAAW9C,GACnB,MAAM,IAAIsF,MAAM,iCAAiCtF,EAAI,mGAGvD,OAAO7E,KAAK2H,WAAW9C,IAGzB4C,EAAAvH,UAAA2J,oBAAA,SAAoBhF,EAAciF,GAChC9J,KAAK6H,SAAShD,GAAQiF,GAGxBrC,EAAAvH,UAAAkL,oBAAA,SAAoBvG,GAClB,OAAO7E,KAAK6H,SAAShD,IAGvB4C,EAAAvH,UAAAyJ,eAAA,SAAeD,IACb,IAAIA,EAAY2B,UAAQ3B,EAAY4B,QAAQtL,OAGtCyH,EAAAvH,UAAAkK,kBAAR,SAA0BvF,GACxB,GAAK7E,KAAK0H,MAAM7C,GAAM2F,WAAtB,KAIMe,EAAevL,KAAKkK,QAAQlK,KAAK0H,MAAM7C,GAAM2F,YAC9CxK,KAAK0H,MAAM7C,GAAMgG,YACpB7K,KAAK0H,MAAM7C,GAAMgG,UAAYU,EAAaV,WAGvC7K,KAAK0H,MAAM7C,GAAM+C,WACpB5H,KAAK0H,MAAM7C,GAAM+C,SAAW2D,EAAa3D,gCAjM9C4D,EAAAA,WAAUzH,KAAA,CAAC,CAAE0H,WAAY,gHAA1B,GCnBAC,EAAA,WASE,SAAAA,EACUC,EACAC,EACAC,GAFA7L,KAAA2L,aAAAA,EACA3L,KAAA4L,yBAAAA,EACA5L,KAAA6L,SAAAA,SAGVH,EAAAxL,UAAA4L,UAAA,SAAUzD,EAAoC0D,EAAsC3I,EAAYoF,GAAhG,IAAAQ,EAAAhJ,KACE,QAD4C,IAAA+L,IAAAA,EAAA,KACvC/L,KAAK2L,aAAa9C,WAAWmD,KAChC,MAAM,IAAI7B,MAAM,iGAGZhI,EAAQ,CAAE4J,WAAUA,EAAE3I,MAAKA,EAAEiF,YAAWA,EAAEG,QAASxI,KAAKiM,YAAYzD,IAC1E3B,EAA8BwB,EAAW,WAAQ,OAAAW,EAAKkD,WAAW/J,KACjEA,EAAMqG,QAAQ2D,YAAYhK,GAAO,IAG3BuJ,EAAAxL,UAAAgM,WAAR,SAAmB/J,GAAnB,IAAA6G,EAAAhJ,KACEA,KAAKoM,gBAAgBnI,QAAO,SAAC8F,GAAa,OAAAA,EAAUsC,aAAetC,EAAUsC,YAAYlK,KACzFnC,KAAKoM,gBAAgBnI,QAAO,SAAC8F,GAAa,OAAAA,EAAUuC,YAAcvC,EAAUuC,WAAWnK,KAEnFA,EAAM4J,YACR5J,EAAM4J,WAAW9H,QAAO,SAAEsI,GAAM,OAAAvD,EAAKkD,WAAWK,KAGlDvM,KAAKoM,gBAAgBnI,QAAO,SAAC8F,GAAa,OAAAA,EAAUyC,cAAgBzC,EAAUyC,aAAarK,MAGrFuJ,EAAAxL,UAAAkM,cAAR,WAAA,IAAApD,EAAAhJ,KACE,OAAOR,OAAO8F,KAAKtF,KAAK2L,aAAa9C,YAAY3D,IAAG,SAACL,GAAQ,OAAAmE,EAAK2C,aAAa9C,WAAWhE,MAGpF6G,EAAAxL,UAAA+L,YAAR,SAAoBzD,GAApB,IAAAQ,EAAAhJ,KA+CE,OA9CAwI,EAAUA,GAAW,IACbiE,UAAYjE,EAAQiE,WAAa,GAEpCjE,EAAQJ,YACXI,EAAQJ,UAAYpI,KAAK2L,aAAa1D,OAAOG,WAG1CI,EAAQkE,cACX7G,EAAiB2C,EAAS,eAAgB,IAAImE,EAAAA,SAG3CnE,EAAQsC,WACXjF,EAAiB2C,EAAS,YAAaxI,KAAK4L,0BAGzCpD,EAAQuC,WACXlF,EAAiB2C,EAAS,YAAaxI,KAAK6L,UAGzCrD,EAAQoE,wBACXpE,EAAQoE,sBAAwB,IAG7BpE,EAAQqE,gBACXrE,EAAQqE,cAAa,SAAI1K,GACnBA,EAAM2K,gBACR3K,EAAM2K,eAAe7I,QAAO,SAAC8I,GAEDA,EAAIlB,SAASlG,IAAIqH,EAAAA,mBACzBC,iBAIlB9K,EAAM4J,YACR5J,EAAM4J,WAAW9H,QAAO,SAACsI,GAAK,OAAA/D,EAAQqE,cAAcN,OAKrD/D,EAAQ0E,cACX1E,EAAQ0E,YAAW,SAAI/K,GAErB,OADA6G,EAAK8C,UAAU3J,EAAM2E,KAAM3E,EAAM4J,WAAY5J,EAAMiB,MAAOjB,EAAMqG,SACzDrG,IAIJqG,uBAhFVgD,EAAAA,WAAUzH,KAAA,CAAC,CAAE0H,WAAY,oDALjBhE,SAFY0F,EAAAA,gCAA0BC,EAAAA,wLAA/C,GCMA,SAAgBC,EAAkBlL,EAA0BkF,QAAA,IAAAA,IAAAA,GAAA,OACpDP,EAAO3E,EAAMkG,YAAkB,OACrC,GAAKvB,EAAL,KAIMwG,EAAUnL,EAAMkG,YAChBkF,EAAO,CAAElG,UAASA,GACxB,GAAIP,aAAgB0G,EAAAA,UAAW,KACvBC,EAAM3G,EAAK4G,SAASC,UAAS,SAACtI,GAAK,OAAAA,IAAMiI,KAClC,IAATG,GACFG,EAAc9G,EAAMyG,EAAI,WAAQ,OAAAzG,EAAK+G,SAASJ,UAE3C,GAAI3G,aAAgBgH,EAAAA,UAAW,KAC9BjL,EAAQX,EAAWC,GACnB4L,EAAMlL,EAAMA,EAAMlC,OAAS,GAC7BmG,EAAKnB,IAAI,CAACoI,MAAUT,GACtBM,EAAc9G,EAAMyG,EAAI,WAAQ,OAAAzG,EAAKkH,cAAcD,KAIvDT,EAAQW,UAAU,OAGpB,SAAgBC,EAAY/L,GAC1B,GAAIA,EAAMkG,YACR,OAAOlG,EAAMkG,YAGf,IAAkC,IAA9BlG,EAAwB,iBAC1B,OAAO,SAGH2E,EAAO3E,EAAMY,OAAkB,YAErC,OAAO+D,EAAOA,EAAKnB,IAAIzD,EAAWC,IAAU,KAG9C,SAAgBgM,EAAgBhM,EAA+BmL,EAAejG,QAAA,IAAAA,IAAAA,GAAA,IAC5EiG,EAAUA,GAAWnL,EAAMkG,aACL,SACpBxC,EAAiByH,EAAS,UAAW,KAEI,IAAvCA,EAAiB,QAAEtM,QAAQmB,IAC7BmL,EAAiB,QAAExL,KAAKK,IAGrBA,EAAMkG,aAAeiF,IACxBzH,EAAiB1D,EAAO,cAAemL,GAEvCnL,EAAMiM,gBAAgBC,WAAalM,EAAMiM,gBAAgBC,SACzDnI,EAAa/D,EAAMiM,gBAAiB,WAAU,SAAG9G,OAAEf,EAAAe,EAAAf,YAAaD,EAAAgB,EAAAhB,aACzDC,IACHD,EAAenE,EAAMkG,YAAYiG,UAAYnM,EAAMkG,YAAYkG,YAG/DjB,EAAQkB,0BACVlB,EAAQkB,yBAAwB,SAC7B/M,GAAmB,OAAAU,EAAMiM,gBAA8B,aAAI3M,SAK9DsB,EAASZ,EAAMY,OAAkB,YACrC,GAAKA,GAAWZ,EAAMC,IAAtB,KAIMS,EAAQX,EAAWC,GACnBV,EAAQgC,EAActB,GAExBiC,EAAkBkJ,EAAQ7L,QAAU2C,EAAkB3C,IACrD6L,EAAQ7L,QAAUA,KAClB6L,aAAmBmB,EAAAA,cAEtBnB,EAAQoB,WAAWjN,GAGrB,mBAASjB,OACD8B,EAAOO,EAAMrC,GACduC,EAAO4C,IAAI,CAACrD,KACfsL,EACE7K,EACA,CAAEsE,UAASA,GAAE,WACP,OAAAtE,EAAO4L,WAAWrM,EAAM,IAAIwL,EAAAA,UAAU,OAIhD/K,EAAqBA,EAAO4C,IAAI,CAACrD,KAV1B9B,EAAI,EAAGA,EAAKqC,EAAMlC,OAAS,EAAIH,MAA/BA,OAaH4B,EAAMS,EAAMA,EAAMlC,OAAS,GAC5BwB,EAAMyM,OAAS7L,EAAO4C,IAAI,CAACvD,MAAUkL,GACxCM,EACE7K,EACA,CAAEsE,UAASA,GAAE,WACP,OAAAtE,EAAO4L,WAAWvM,EAAKkL,MAKnC,SAAgBtG,EAAe3B,OACvBwJ,EAASxJ,EAAEwJ,OACjBxJ,EAAEyJ,uBAAuB,CAAEzH,WAAW,IAClCwH,IAAWxJ,EAAEwJ,QACdxJ,EAAe,cAA0B0J,KAAK1J,EAAEwJ,QAIrD,SAASjB,EAAc9G,EAA2ByG,EAA8BxG,GAI1ED,aAAgBgH,EAAAA,YAAchH,EAA0B,sBAC1DjB,EAAiBiB,EAAM,uBAAuB,GAC9C,EAAckI,cAAa,SAAIC,GAC7BzP,OACG8F,KAAKwB,EAAK4G,UACVzJ,QAAO,SAAChB,GAAK,OAAA6D,EAAK4G,SAASzK,IAAMgM,EAAGnI,EAAK4G,SAASzK,GAAIA,WAOvD6L,EAAyBhI,EAAKgI,uBAAuB5H,KAAKJ,IACzC,IAAnByG,EAAKlG,YACPP,EAAKgI,uBAAsB,SAAIvB,GAC7BuB,EAAsB1O,EAAA,GAAOmN,GAAQ,GAAE,CAAGlG,WAAW,OAIzDN,KAEuB,IAAnBwG,EAAKlG,YACPP,EAAKgI,uBAAyBA,oBCvEhC,SAAAI,EACUC,EACAxD,EACAyD,EAEgBC,EACJC,GANtB,IAAAtG,EAAAhJ,KACUA,KAAAmP,cAAAA,EACAnP,KAAA2L,aAAAA,EACA3L,KAAAoP,OAAAA,EAGYpP,KAAAsP,gBAAAA,EA7BZtP,KAAAuP,YAAc,IAAIC,EAAAA,aAOpBxP,KAAAqP,WAAY,EAEZrP,KAAAyP,kBAAyB,GAGzBzP,KAAA0P,gBAAkC,GAClC1P,KAAA2P,aAAe,IAAIhD,EAAAA,QACnB3M,KAAA4P,eAAiB5P,KAAK2P,aAAaE,KACzCC,EAAAA,UAAS,WAAO,OAAA9G,EAAKoG,OAAOW,SAASC,eAAeH,KAAKI,EAAAA,KAAK,OAC9DC,UAAS,WAAO,OAAAlH,EAAKoG,OAAOe,WAAU,WAGtCnH,EAAKoH,wBACLpH,EAAKuG,YAAYR,KAAK/F,EAAKyG,kBAAoBjM,EAAMwF,EAAK5F,YAWxC,OAAdiM,GACF7F,QAAQC,KAAK,6JAGfzJ,KAAKqP,UAA2B,OAAdA,KAAyB1D,EAAa1D,OAAOoH,UAwJnE,OA7ME7P,OAAAoG,eACIsJ,EAAAhP,UAAA,QAAK,KACT,WAKE,OAJKF,KAAKqQ,SACRrQ,KAAKqQ,OAAS,IAGTrQ,KAAKqQ,YAPd,SACUjN,GAAcpD,KAAKqQ,OAASrQ,KAAKqP,UAAY7L,EAAMJ,GAASA,mCAStE5D,OAAAoG,eACIsJ,EAAAhP,UAAA,SAAM,KACV,WAAe,OAAOF,KAAKsQ,SAAW,QAFtC,SACWC,GAA+BvQ,KAAKsQ,QAAUtQ,KAAKqP,UAAY7L,EAAM+M,GAAUA,mCAG1F/Q,OAAAoG,eACIsJ,EAAAhP,UAAA,UAAO,KACX,WAAgB,OAAOF,KAAKwQ,cAF5B,SACYhI,GAA8BxI,KAAKwQ,SAAWxQ,KAAKqP,UAAY7L,EAAMgF,GAAWA,mCAI5FhJ,OAAAoG,eAA0BsJ,EAAAhP,UAAA,UAAO,KAAjC,SAAkCuQ,GAC5BA,GAAWA,EAAQC,cAAcC,aACnCnH,QAAQC,KAAK,uLAmCjByF,EAAAhP,UAAA0Q,UAAA,WACqD,yBAA/C5Q,KAAK2L,aAAa1D,OAAOC,mBAC3BlI,KAAKoQ,yBAITlB,EAAAhP,UAAA2Q,YAAA,SAAYC,GAENA,EAAQ1N,OAASpD,KAAKmC,QACxBnC,KAAKmC,MAAMiB,MAAQpD,KAAKoD,OAGtB0N,EAAQP,QAAUvQ,KAAK8G,MDgD/B,SAAgBiK,EAAajK,GAC3BA,EAAc,gBAAYA,EAAc,QACxCA,EAAKkK,cAAc,MACnBlK,EAAKmK,mBAAmB,OAEpBnK,aAAgBgH,EAAAA,WAAahH,aAAgB0G,EAAAA,YAC/ChO,OAAO8F,KAAKwB,EAAK4G,UACdzJ,QAAO,SAAEhB,GAAM,OAAA8N,EAAajK,EAAK4G,SAASzK,MCtD3C8N,CAAa/Q,KAAK8G,OAGhBgK,EAAQP,QAAUO,EAAQhK,MAASgK,EAAQ1N,OAASpD,KAAKyP,oBAAsBqB,EAAQ1N,MAAMkD,gBAC/FtG,KAAK8G,KAAO9G,KAAK8G,MAAI,IAASgH,EAAAA,UAAU,IACxC9N,KAAKkR,aACLlR,KAAKwI,QAAQ2I,qBACbnR,KAAKoR,0BACLpR,KAAKmP,cAAcrD,UAAU9L,KAAK8G,KAAM9G,KAAKuQ,OAAQvQ,KAAKoD,MAAOpD,KAAKwI,SACtExI,KAAKqR,kBAAkBrR,KAAKuQ,UAIhCrB,EAAAhP,UAAAoR,YAAA,WACEtR,KAAK4P,eAAe2B,cACpBvR,KAAKoR,2BAGPlC,EAAAhP,UAAAsR,YAAA,SAAYlK,GAAEA,EAAAlF,QAAKX,EAAA6F,EAAA7F,MACjBmB,EADwB0E,EAAAnF,MACAV,GACxBzB,KAAK2P,aAAanO,QAGpB0N,EAAAhP,UAAAgR,WAAA,WAAA,IAAAlI,EAAAhJ,KACOA,KAAKwI,UACRxI,KAAKwI,QAAU,IAGZxI,KAAKwI,QAAQiJ,aAChBzR,KAAKwI,QAAQiJ,WAAU,SAAIrO,GACzBA,EAAQI,EAAMY,EAAkBhB,GAAmC4F,EAAY,QAAE0I,cAAgBtO,GAC7F4F,EAAK5F,QACP5D,OAAO8F,KAAK0D,EAAK5F,OAAOa,QAAO,SAAChB,GAAK,cAAO+F,EAAK5F,MAAMH,KACvDzD,OAAOa,OAAO2I,EAAK5F,MAAOA,GAAS,KAGX4F,EAAY,QAAEkD,aAIpClD,EAAKR,QAAQC,YAAcO,EAAKR,QAAQC,WAAW6E,UAAYtE,EAAKlC,KACtEkC,EAAKR,QAAQC,WAAWkJ,UAAUvO,GAElC4F,EAAKlC,KAAK8K,MAAMxO,MAKjBpD,KAAKwI,QAAQC,YAAczI,KAAKsP,kBACnCzJ,EAAiB7F,KAAKwI,QAAS,aAAcxI,KAAKsP,iBAClDpJ,EAAalG,KAAKwI,QAAQC,WAAY,YAAW,SAAGnB,GAAEA,EAAAf,cAElDyC,EAAKoH,wBACqBpH,EAAY,QAAE6D,cAAc,CACpDd,WAAY/C,EAAKuH,OACjBnN,MAAO4F,EAAK5F,MACZiF,YAAaW,EAAKlC,KAClB0B,QAASQ,EAAKR,cAMjBxI,KAAKwI,QAAQ2I,qBAChBnR,KAAKwI,QAAQ2I,mBAAkB,WAAS,OAA0BnI,EAAY,QAAE0I,cAAgBlO,EAAMwF,EAAK5F,SAG9EpD,KAAY,QAAEkM,aACjBlM,KAAY,QAAEkM,WAAU,SAAI2F,QAAA,IAAAA,IAAAA,GAAA,GACpD7I,EAAKoI,0BACLpI,EAAKmG,cAAcrD,UAAU9C,EAAKlC,KAAMkC,EAAKuH,OAAQvH,EAAK5F,MAAO4F,EAAKR,SACtEQ,EAAKqI,kBAAkBrI,EAAKuH,QAExBsB,GACF7I,EAAKuG,YAAYR,KAAK/F,EAAKyG,kBAAoBjM,EAAMwF,EAAK5F,WAM1D8L,EAAAhP,UAAAkQ,sBAAR,WACMpQ,KAAKwI,SAAqCxI,KAAY,QAAEmM,aAChCnM,KAAY,QAAEmM,YAAY,CAClDJ,WAAY/L,KAAKuQ,OACjBnN,MAAOpD,KAAKoD,MACZiF,YAAarI,KAAK8G,KAClB0B,QAASxI,KAAKwI,WAKZ0G,EAAAhP,UAAAmR,kBAAR,SAA0Bd,EAA6BuB,GAAvD,IAAA9I,EAAAhJ,UAAuD,IAAA8R,IAAAA,EAAA,IACrDvB,EAAOtM,QAAO,SAAC9B,GACb,GAAIA,EAAMC,MAAQD,EAAM4J,WAAY,KAC5BgG,EAAU5P,EAAMkG,YAClB2J,EAAeD,EAAQC,aAAanC,KAAKoC,EAAAA,wBAEvC3K,EAAAnF,EAAA+P,aAAEC,EAAA7K,EAAA6K,SAAUC,EAAA9K,EAAA8K,WACZD,GAAyB,WAAbA,IAA0BC,GAA+B,EAAnBA,EAASC,aAC/DL,EAAeD,EAAQC,aAAanC,KAAKyC,EAAAA,aAAaF,EAASC,cAGjErJ,EAAK0G,gBAAgB5N,KAAKkQ,EAAa9B,UAAS,SAAEzO,GAE5CsQ,aAAmBtD,EAAAA,aAAesD,EAAiB,SAAiC,EAA5BA,EAAiB,QAAEpR,QAC7EoR,EAAQrD,WAAWjN,EAAO,CAAE4F,WAAW,EAAOkL,UAAU,IAGtDpQ,EAAMqQ,SAAkC,EAAvBrQ,EAAMqQ,QAAQ7R,QACjCwB,EAAMqQ,QAAQvO,QAAO,SAACwO,GAAY,OAAAhR,EAAQgR,EAAShR,KAGrDuH,EAAKwI,YAAY,CAAEpP,IAAKsQ,EAAIZ,EAAY5P,EAAWC,IAAQwQ,KAAK,KAAMlR,MAAKA,EAAEU,MAAKA,WAI9EyQ,EAAYb,EAAQC,aAAwB,UAC9CY,GAAgC,EAAnBA,EAAUjS,QACzBiS,EAAUC,QAAQD,EAAU1P,OAI5Bf,EAAM4J,YAAwC,EAA1B5J,EAAM4J,WAAWpL,QACvCqI,EAAKqI,kBAAkBlP,EAAM4J,WAAY5J,EAAMC,IAAGJ,EAAO8P,EAAY5P,EAAWC,IAAU2P,MAKxF5C,EAAAhP,UAAAkR,wBAAR,WACEpR,KAAK0P,gBAAgBzL,QAAO,SAAC6O,GAAO,OAAAA,EAAIvB,gBACxCvR,KAAK0P,gBAAkB,IAGzBlQ,OAAAoG,eAAYsJ,EAAAhP,UAAA,QAAK,KAAjB,WACE,OAAOF,KAAKuQ,QAAUvQ,KAAKuQ,OAAO,IAAMvQ,KAAKuQ,OAAO,GAAGxN,4DA9N1DgQ,EAAAA,UAAShP,KAAA,CAAC,CACTiP,SAAU,cACVC,SAAU,wSAYVC,UAAW,CAACxH,gDArBLA,SACAjE,SAJkI0L,EAAAA,0CA2EtIC,EAAAA,UAASrP,KAAA,CAAC,sBA1EgBsP,EAAAA,mBAAkBC,WAAA,CAAA,CAAArK,KA2E5CsK,EAAAA,4CAjDFC,EAAAA,qBAEAA,EAAAA,sBAUAA,EAAAA,uBAIAA,EAAAA,2BAIAC,EAAAA,wBACAC,EAAAA,UAAS3P,KAAA,CAAC,cA0LbmL,kBCjME,SAAAyE,EACUhI,EACAiI,EACAC,EACAC,EAEuBC,GALvB/T,KAAA2L,aAAAA,EACA3L,KAAA4T,SAAAA,EACA5T,KAAA6T,SAAAA,EACA7T,KAAA8T,WAAAA,EAzBV9T,KAAAgU,iBAAkB,EAcRhU,KAAAuP,YAAiC,IAAIC,EAAAA,aAGvCxP,KAAAiU,cAA4B,GAC5BjU,KAAAkU,cAAuB,GACvBlU,KAAAmU,eAA6B,GAUnCnU,KAAKgU,gBAAsC,OAApBD,EA8I3B,OAzKEvU,OAAAoG,eAAa+N,EAAAzT,UAAA,QAAK,KAAlB,SAAmBmB,GACjBrB,KAAKgU,iBAAmBxK,QAAQC,KAAK,wCAAwCzJ,KAAKC,YAAY4E,KAAI,4FAGpGrF,OAAAoG,eAAa+N,EAAAzT,UAAA,OAAI,KAAjB,SAAkB4G,GAChB9G,KAAKgU,iBAAmBxK,QAAQC,KAAK,uCAAuCzJ,KAAKC,YAAY4E,KAAI,4FAGnGrF,OAAAoG,eAAa+N,EAAAzT,UAAA,UAAO,KAApB,SAAqBsI,GACnBxI,KAAKgU,iBAAmBxK,QAAQC,KAAK,0CAA0CzJ,KAAKC,YAAY4E,KAAI,4FAqBtG8O,EAAAzT,UAAAkU,mBAAA,WACEpU,KAAKqU,YAAY,qBAGnBV,EAAAzT,UAAAoU,sBAAA,WACEtU,KAAKqU,YAAY,wBAGnBV,EAAAzT,UAAAqU,gBAAA,WACEvU,KAAKqU,YAAY,kBAGnBV,EAAAzT,UAAAsU,mBAAA,WACExU,KAAKqU,YAAY,qBAGnBV,EAAAzT,UAAA0Q,UAAA,WACE5Q,KAAKqU,YAAY,YAGnBV,EAAAzT,UAAAuU,SAAA,WACEzU,KAAKqU,YAAY,WAGnBV,EAAAzT,UAAA2Q,YAAA,SAAYC,GACV9Q,KAAKqU,YAAY,YAAavD,IAGhC6C,EAAAzT,UAAAoR,YAAA,WACEtR,KAAK0U,UAAU1U,KAAKmC,OACpBnC,KAAKiU,cAAchQ,QAAO,SAACsN,GAAe,OAAAA,MAC1CvR,KAAKmU,eAAelQ,QAAO,SAACsN,GAAe,OAAAA,MAC3CvR,KAAKqU,YAAY,cAGXV,EAAAzT,UAAAyU,YAAR,SAAoBC,EAAgCrI,EAA2B3E,GAA/E,IAAAoB,EAAAhJ,KAOE,QAP6E,IAAA4H,IAAAA,EAAA,IACzE5H,KAAK4U,eAAiBA,IACxB5U,KAAK0U,UAAU1U,KAAKmC,OACpBnC,KAAK4U,aAAaC,QAClBjN,EAAW5H,KAAKmC,MAAQnC,KAAKmC,MAAMyF,SAAW,IAG5CA,GAA8B,EAAlBA,EAASjH,OAAY,CAC7B,IAAA2G,EAAA3F,EAAAiG,GAACyB,EAAA/B,EAAA,GAASwN,EAAAxN,EAAA5E,MAAA,GACRmI,EAAA7K,KAAA2L,aAAAT,WAAA7B,GAAAwB,UAEFkK,EAAMH,EAAaI,gBAA8BhV,KAAK6T,SAAS7I,wBAAwBH,IAC7F7K,KAAKiV,mBAAmBF,EAAKxI,GAC7BrG,EAA+B6O,EAAInK,SAAU,iBAAgB,SAAGtD,OAAEf,EAAAe,EAAAf,YAAaI,EAAAW,EAAAX,cAAeL,EAAAgB,EAAAhB,aAC5F,GAAIA,EAAc,KACV4O,EAAUvO,EAAgBA,EAAcwO,SAAW,KACrDD,IAAYA,EAAQE,UACtB9O,EAAa+O,OAAOH,GAEpBlM,EAAK2L,YAAYrO,EAAciG,EAAGuI,IAGnCvO,GAAewO,EAAIO,kBAAkBC,wBAGrC,GAAIhJ,GAAKA,EAAEtD,KAAM,CACd4B,EAAA7K,KAAA2L,aAAAzB,QAAAqC,EAAAtD,MAAA4B,UAAA,IACFkC,EAAM6H,EAAaI,gBAA8BhV,KAAK6T,SAAS7I,wBAAwBH,IAC7F7K,KAAKiV,mBAAmBlI,EAAKR,KAIzBoH,EAAAzT,UAAAmU,YAAR,SAAoBxP,EAAciM,GAChC,GAAI9Q,KAAKmC,OAASnC,KAAKmC,MAAMqT,OAASxV,KAAKmC,MAAMqT,MAAM3Q,MAChDiM,GAAWA,EAAQ3O,OAAO,KACvBP,EAAI5B,KAAKmC,MAAMqT,MAAM3Q,GAAM7E,KAAKmC,OACtC,GAAIwC,EAAAA,aAAa/C,KAAyE,IAAnE,CAAC,SAAU,mBAAoB,iBAAiBZ,QAAQ6D,GAAc,KACrF4Q,EAAM7T,EAAEsO,YACdlQ,KAAKmU,eAAerS,KAAI,WAAO,OAAA2T,EAAIlE,iBAKrCvR,KAAKmC,OAASnC,KAAKmC,MAAMuT,WAAa1V,KAAKmC,MAAMuT,UAAU7Q,IAC7D7E,KAAKmC,MAAMuT,UAAU7Q,GACnB7E,KAAKmC,MAAM2E,KACX9G,KAAKmC,MACLnC,KAAKmC,MAAMiB,MACXpD,KAAKmC,MAAMqG,SAIF,cAAT3D,GAAwBiM,EAAQ3O,QAClCnC,KAAK0U,UAAU5D,EAAQ3O,MAAMwE,eAC7B3G,KAAK2V,WAIDhC,EAAAzT,UAAA+U,mBAAR,SAAgDlI,EAAsB5K,GACpEnC,KAAKkU,cAAcpS,KAAKiL,GACxB5K,EAAM2K,eAAehL,KAAKiL,GAC1BvN,OAAOa,OAAO0M,EAAInC,SAAU,CAAEzI,MAAKA,KAG7BwR,EAAAzT,UAAAyV,OAAR,WAAA,IAAA3M,EAAAhJ,KACOA,KAAKmC,QAIVnC,KAAKiU,cAAchQ,QAAO,SAACsN,GAAe,OAAAA,MAC1CvR,KAAKiU,cAAgB,CACnB/N,EAAalG,KAAKmC,MAAO,OAAM,SAAGmF,OAAEf,EAAAe,EAAAf,YAAaD,EAAAgB,EAAAhB,aAC1C0C,EAAK2C,aAAa1D,OAAOE,WAMxB7B,EACF0C,EAAK4L,aAAaC,QAElB7L,EAAK2L,YAAY3L,EAAK4L,aAAc5L,EAAK7G,QAR3CoE,GAAeyC,EAAK2L,YAAY3L,EAAK4L,aAAc5L,EAAK7G,SACnDoE,GAAgBA,GAAeD,IAClC0C,EAAK4K,SAASgC,SAAS5M,EAAK8K,WAAWpD,cAAe,UAAWpK,EAAe,OAAS,OAU/FJ,EAAalG,KAAKmC,MAAO,YAAW,SAAGmF,OAAEf,EAAAe,EAAAf,YAAaD,EAAAgB,EAAAhB,eAC/CC,GAAgBA,GAAeD,IAClC0C,EAAK4K,SAASiC,aAAa7M,EAAK8K,WAAWpD,cAAe,QAASpK,QAMnEqN,EAAAzT,UAAAwU,UAAR,SAAkBvS,GAAlB,IAAA6G,EAAAhJ,KACMmC,IACEA,EAAM2K,eACR3K,EAAM2K,eAAiB3K,EAAM2K,eAAegJ,OAAM,SAAC/I,GAAO,OAAqC,IAArC/D,EAAKkL,cAAclT,QAAQ+L,KAErFlH,EAAiB7F,KAAKmC,MAAO,iBAAkB,KAInDnC,KAAKkU,cAAgB,wBAhLxBnB,EAAAA,UAAShP,KAAA,CAAC,CACTiP,SAAU,eACVC,SAAU,sFATHxL,SAHwGsO,EAAAA,iBAD1C5I,EAAAA,gCACqD6I,EAAAA,8CA4CvH5C,EAAAA,UAASrP,KAAA,CAAC,wDA7BZyP,EAAAA,qBAIAA,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,2BAIAC,EAAAA,6BAEAC,EAAAA,UAAS3P,KAAA,CAAC,YAAW,CAASkS,KAAMC,EAAAA,iBAAkBC,UAAQ,OA2JjExC,kBChJE,SAAAyC,EACUxC,EACAE,EACUuC,GAFVrW,KAAA4T,SAAAA,EACA5T,KAAA8T,WAAAA,EA/BF9T,KAAAsW,kBAAyB,GACzBtW,KAAAuW,aAAYvU,EACfW,EAAiB,CACpB,WACA,cACA,WACA,WACA,SAQM3C,KAAAwW,SAAW,CACjBC,UAAW,GACXC,OAAQ,CACN,QACA,QACA,UACA,aAaF1W,KAAK2W,SAAWN,EA4IpB,OArJE7W,OAAAoG,eAAIwQ,EAAAlW,UAAA,KAAE,KAAN,WAAkC,OAAOF,KAAKmC,MAAMiM,iBAAmB,oCAEvE5O,OAAAoG,eAAYwQ,EAAAlW,UAAA,oBAAiB,KAA7B,WAAgD,OAAQF,KAAKmC,OAASnC,KAAKmC,MAAoB,cAAM,oCAUrGiU,EAAAlW,UAAA2Q,YAAA,SAAYC,GAAZ,IAAA9H,EAAAhJ,KACM8Q,EAAQ3O,QACVnC,KAAKmC,MAAM0C,MAAQ7E,KAAK6V,aAAa,OAAQ7V,KAAKmC,MAAM0C,MACxD7E,KAAKwW,SAASC,UAAUxS,QAAO,SAAC2S,GAAY,OAAAA,MAC5C5W,KAAKwW,SAASE,OAAOzS,QAAO,SAAC4S,GACvB7N,EAAK8N,IAAM9N,EAAK8N,GAAGD,IACrB7N,EAAKwN,SAASC,UAAU3U,KACtBkH,EAAK4K,SAASmD,OACZ/N,EAAK8K,WAAWpD,cAChBmG,EAAS,SACR9V,GAAM,OAAAiI,EAAK8N,GAAGD,GAAW7N,EAAK7G,MAAOpB,QAM1Cf,KAAK8W,IAAM9W,KAAK8W,GAAGE,YACrB9Q,EAAalG,KAAK8W,GAAI,aAAY,SAAGxP,OAAEhB,EAAAgB,EAAAhB,aAAcK,EAAAW,EAAAX,cAC/CA,GACFnH,OAAO8F,KAAKqB,GAAe1C,QAAO,SAACgT,GAAQ,OAAAjO,EAAKkO,gBAAgBD,KAG9D3Q,GACF9G,OAAO8F,KAAKgB,GAAcrC,QAAO,SAACgT,GAAQ,OAAAjO,EAAK6M,aAAaoB,EAAM3Q,EAAa2Q,QAKrFjX,KAAKmX,iBAAiBrG,EAAQ3O,MAAMwE,eACpC3G,KAAKoX,iBAAiBtG,EAAQ3O,MAAMmE,cACE,IAAlCtG,KAAKqX,kBAAkB1W,UACxBX,KAAKsX,IAAMtX,KAAKmC,MAAMmV,IAAMtX,KAAK6V,aAAa,KAAM7V,KAAKmC,MAAMmV,IAChEpR,EAAalG,KAAKmC,MAAO,QAAO,SAAGmF,OAAEhB,EAAAgB,EAAAhB,aACnC0C,EAAKuO,YAAYjR,OAKnBwK,EAAQwG,IACVtX,KAAK6V,aAAa,KAAM7V,KAAKsX,KAYjClB,EAAAlW,UAAA0Q,UAAA,WAAA,IAAA5H,EAAAhJ,KACEA,KAAKuW,aAAatS,QAAO,SAACgT,OAClBxV,EAAQuH,EAAK8N,GAAGG,GAClBjO,EAAKsN,kBAAkBW,KAAUxV,KACnCuH,EAAKsN,kBAAkBW,GAAQxV,IACR,IAAVA,EACXuH,EAAK6M,aAAaoB,GAAgB,IAAVxV,EAAiBwV,EAAO,GAAGxV,GAEnDuH,EAAKkO,gBAAgBD,OAM7Bb,EAAAlW,UAAAoR,YAAA,WACEtR,KAAKwW,SAASC,UAAUxS,QAAO,SAAC2S,GAAY,OAAAA,MAC5C5W,KAAKmX,iBAAiBnX,KAAKmC,QAG7BiU,EAAAlW,UAAAqX,YAAA,SAAY9V,GAAZ,IAAAuH,EAAAhJ,KACQwX,EAAUxX,KAAKqX,kBAAoBrX,KAAKqX,kBAAkB,GAAK,KACrE,GAAKG,GAAYA,EAAQ9G,cAAc+G,MAAvC,KAIMC,IAAc1X,KAAK2W,SAASgB,eAC7B3X,KAAKqX,kBACLO,KAAI,SAAEtQ,OAAEoJ,EAAApJ,EAAAoJ,cAAoB,OAAA1H,EAAK2N,SAASgB,gBAAkBjH,GAAiBA,EAAcmH,SAAS7O,EAAK2N,SAASgB,iBAEnHlW,IAAUiW,EACZF,EAAQ9G,cAAc+G,SACZhW,GAASiW,GACnBF,EAAQ9G,cAAcoH,SAI1B1B,EAAAlW,UAAA6X,QAAA,SAAQC,GACNhY,KAAKmC,MAAiB,WAAI,EACtBnC,KAAK8W,GAAGW,OACVzX,KAAK8W,GAAGW,MAAMzX,KAAKmC,MAAO6V,IAI9B5B,EAAAlW,UAAA+X,OAAA,SAAOD,GACLhY,KAAKmC,MAAiB,WAAI,EACtBnC,KAAK8W,GAAGgB,MACV9X,KAAK8W,GAAGgB,KAAK9X,KAAKmC,MAAO6V,IAI7B5B,EAAAlW,UAAAgY,SAAA,SAASF,GACHhY,KAAK8W,GAAGqB,QACVnY,KAAK8W,GAAGqB,OAAOnY,KAAKmC,MAAO6V,GAGzBhY,KAAKmC,MAAMkG,aACbrI,KAAKmC,MAAMkG,YAAY+P,eAInBhC,EAAAlW,UAAAkX,iBAAR,SAAyB7K,GAClBA,IAIDA,EAAgB,eAAqD,IAAhDA,EAAgB,aAAEvL,QAAQhB,KAAK8T,YACtDvH,EAAgB,aAAEzK,KAAK9B,KAAK8T,YAE5BjO,EAAiB0G,EAAG,eAAgB,CAACvM,KAAK8T,eAItCsC,EAAAlW,UAAAiX,iBAAR,SAAyB5K,OACjB8L,EAAQ9L,GAAKA,EAAgB,aAAIvM,KAAKqX,kBAAkBrW,QAAQhB,KAAK8T,aAAe,GAC3E,IAAXuE,GACFrY,KAAKmC,MAAoB,aAAEyE,OAAOyR,EAAO,IAIrCjC,EAAAlW,UAAA2V,aAAR,SAAqBoB,EAAcxV,GACjCzB,KAAK4T,SAASiC,aAAa7V,KAAK8T,WAAWpD,cAAeuG,EAAMxV,IAG1D2U,EAAAlW,UAAAgX,gBAAR,SAAwBD,GACtBjX,KAAK4T,SAASsD,gBAAgBlX,KAAK8T,WAAWpD,cAAeuG,wBAzLhEqB,EAAAA,UAASvU,KAAA,CAAC,CACTiP,SAAU,qBACVuF,KAAM,CACJC,UAAW,kBACXC,SAAU,iBACVC,WAAY,iEAViD3C,EAAAA,iBAA7CC,EAAAA,8CAkDf2C,EAAAA,OAAM5U,KAAA,CAAC6U,EAAAA,8CApCTpF,EAAAA,MAAKzP,KAAA,CAAC,gCACNyP,EAAAA,SAiLH4C,KC5LAyC,EAAA,WAAA,SAAAA,KA2BA,OAvBErZ,OAAAoG,eACIiT,EAAA3Y,UAAA,QAAK,KADT,WACc,OAAOF,KAAKmC,MAAMiB,WAChC,SAAU/B,GAAUmI,QAAQC,KAAK,wCAAwCzJ,KAAKC,YAAY4E,KAAI,4FAE9FrF,OAAAoG,eACIiT,EAAA3Y,UAAA,OAAI,KADR,WACa,OAAmBF,KAAKmC,MAAMY,OAAkB,iBAC7D,SAAS+D,GAAQ0C,QAAQC,KAAK,uCAAuCzJ,KAAKC,YAAY4E,KAAI,4FAE1FrF,OAAAoG,eACIiT,EAAA3Y,UAAA,UAAO,KADX,WACgB,OAAOF,KAAKmC,MAAMqG,aAClC,SAAYA,GAAyBgB,QAAQC,KAAK,0CAA0CzJ,KAAKC,YAAY4E,KAAI,4FAEjHrF,OAAAoG,eAAIiT,EAAA3Y,UAAA,MAAG,KAAP,WAAY,OAAOF,KAAKmC,MAAMC,qCAE9B5C,OAAAoG,eAAIiT,EAAA3Y,UAAA,cAAW,KAAf,WAAoB,OAAOF,KAAKmC,MAAMkG,6CAEtC7I,OAAAoG,eAAIiT,EAAA3Y,UAAA,KAAE,KAAN,WAAW,OAAOF,KAAKmC,MAAMiM,iBAAmB,oCAEhD5O,OAAAoG,eAAIiT,EAAA3Y,UAAA,YAAS,KAAb,WAA2B,OAAOF,KAAKwI,QAAQJ,UAAUpI,uCAEzDR,OAAAoG,eAAIiT,EAAA3Y,UAAA,KAAE,KAAN,WAAmB,OAAOF,KAAKmC,MAAMmV,oCAErC9X,OAAAoG,eAAIiT,EAAA3Y,UAAA,YAAS,KAAb,WAAkB,OAAOF,KAAKwI,QAAQiE,WAAa,mEAzBlD+G,EAAAA,qBAGAA,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,SAeHqF,EA3BA,iBAiCE,SAAAC,IAAA,IAAA9P,EACE+P,EAAAnY,KAAAZ,OAAOA,YACPwJ,QAAQC,KAAK,qFAEjB,OALoCuP,EAAAA,EAAAA,GAKpCF,GALoCD,GC3BpCI,EAAA,SAAAF,GASE,SAAAE,EAA+CC,GAA/C,IAAAlQ,EACE+P,EAAAnY,KAAAZ,OAAOA,YALTgJ,EAAAsB,eAAsB,CACpBxE,aAAc,IAMVoT,aAAmBxN,GACrBlC,QAAQC,KAAK,8CAA8CT,EAAK/I,YAAY4E,KAAI,wDA+CtF,OA5D8FmU,EAAAA,EAAAA,GAC5FxZ,OAAAoG,eAAIqT,EAAA/Y,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKmC,MAAiB,6CAe/B8W,EAAA/Y,UAAAoM,WAAA,SAAWnK,GACT,IAAKA,EAAMkG,aAAelG,EAAMC,IAAK,KAC7BkL,EAAUY,EAAY/L,GAC5BgM,EAAgBhM,EAAOmL,GAAoB,IAAIE,EAAAA,UAAU,GAAI,CAAE2E,SAAUhQ,EAAM+P,aAAaC,YAG9FhQ,EAAM4J,WAAa5J,EAAM4J,YAAc,OAEjCpL,EAASwB,EAAMiB,MAAQjB,EAAMiB,MAAMzC,OAAS,EAClD,GAAIwB,EAAM4J,WAAWpL,OAASA,EAC5B,IAAK,IAAIH,EAAI2B,EAAM4J,WAAWpL,OAAS,EAAQA,GAALH,IAAeA,EACvD6M,EAAkBlL,EAAM4J,WAAWvL,IACnC2B,EAAM4J,WAAWnF,OAAOpG,EAAG,GAI/B,IAASA,EAAI2B,EAAM4J,WAAWpL,OAAQH,EAAIG,EAAQH,IAAK,KAC/C+L,EAACnM,EAAA,GAAQoD,EAAMrB,EAAMgX,YAAW,CAAE/W,IAAK,GAAG5B,IAChD2B,EAAM4J,WAAWjK,KAAKyK,KAI1B0M,EAAA/Y,UAAAkZ,IAAA,SAAI5Y,EAAY6Y,EAAoB/R,OAAE8Q,QAAA,IAAA9Q,EAAA,CAAA8Q,aAAA,GAAA9Q,GAAA8Q,YACpC5X,EAAI4D,EAAkB5D,GAAKR,KAAKmC,MAAM4J,WAAWpL,OAASH,EACrDR,KAAKoD,OACRR,EAAiB5C,KAAKmC,MAAO,IAG/BnC,KAAKoD,MAAMwD,OAAOpG,EAAG,EAAG6Y,EAAe7V,EAAM6V,GAAgBrW,WAEtDhD,KAAY,QAAEkM,YAAW,GAChCkM,GAAepY,KAAKqI,YAAY+P,eAGlCa,EAAA/Y,UAAAoZ,OAAA,SAAO9Y,EAAW8G,OAAE8Q,QAAA,IAAA9Q,EAAA,CAAA8Q,aAAA,GAAA9Q,GAAA8Q,YAClBpY,KAAKoD,MAAMwD,OAAOpG,EAAG,GACrB6M,EAAkBrN,KAAKmC,MAAM4J,WAAWvL,IAAI,GAC5CR,KAAKmC,MAAM4J,WAAWnF,OAAOpG,EAAG,GAChCR,KAAKmC,MAAM4J,WAAW9H,QAAO,SAAEsI,EAAGnK,GAAQ,OAAAmK,EAAEnK,IAAM,GAAGA,IAE9CpC,KAAY,QAAEkM,YAAW,GAChCkM,GAAepY,KAAKqI,YAAY+P,wDA/D3B1M,EAAiB4H,WAAA,CAAA,CAAArK,KAcX0P,EAAAA,OAAM5U,KAAA,CAACwD,IAAa,CAAA0B,KAAGsK,EAAAA,cAmDtC0F,EA5DA,CAA8FJ,GCL9FU,EAAA,SAAAR,GAAA,SAAAQ,mDAGA,OAH4FP,EAAAA,EAAAA,2CAEzFtF,EAAAA,UAAS3P,KAAA,CAAC,iBAAgB,CAASkS,KAAMC,EAAAA,iBAAkBC,UAAQ,OACtEoD,EAHA,CAA4FV,iBCD5F,SAAAW,IAAA,IAAAxQ,EAAA,OAAA+P,GAAAA,EAAAlY,MAAAb,KAAAU,YAAAV,YAWEgJ,EAAAsB,eAAiB,CACfxE,aAAc,MAElB,OAJiCkT,EAAAA,EAAAA,uBAVhCjG,EAAAA,UAAShP,KAAA,CAAC,CACTiP,SAAU,eACVC,SAAU,wHAIVsF,KAAM,CACJkB,UAAW,uCAOfD,GAJiCX,GCbjCa,EAAA,WAgBE,SAAAA,EAAoB/N,GAAA3L,KAAA2L,aAAAA,EAgDtB,OA9CE+N,EAAAxZ,UAAA2Q,YAAA,WAAA,IAAA7H,EAAAhJ,KACEA,KAAK2Z,cAAgB3Z,KAAKmC,MAAMkG,YAAYuR,cAAc/J,KACxDgK,EAAAA,UAAU,MACV/J,EAAAA,UAAS,WAAO,OAAAnL,EAAAA,aAAaqE,EAAK8Q,cAC9B9Q,EAAK8Q,aACLC,EAAAA,GAAG/Q,EAAK8Q,kBAKhBta,OAAAoG,eAAI8T,EAAAxZ,UAAA,eAAY,KAAhB,eACQ8Z,EAAYha,KAAKmC,MAAMkG,YAC7B,IAAK,IAAItG,KAASiY,EAAUC,OAC1B,GAAID,EAAUC,OAAOpa,eAAekC,GAAQ,KACtC+H,EAA8C9J,KAAK2L,aAAaP,oBAAoBrJ,GAExF,GAAIuB,EAAS0W,EAAUC,OAAOlY,IAAS,CACrC,GAAIiY,EAAUC,OAAOlY,GAAOmY,UAC1B,OAGEF,EAAUC,OAAOlY,GAAO+H,UAC1BA,EAAUkQ,EAAUC,OAAOlY,GAAO+H,SAgBtC,OAZI9J,KAAKmC,MAAMwG,YAAc3I,KAAKmC,MAAMwG,WAAWd,UAAY7H,KAAKmC,MAAMwG,WAAWd,SAAS9F,KAC5F+H,EAAU9J,KAAKmC,MAAMwG,WAAWd,SAAS9F,IAGvC/B,KAAKmC,MAAMwF,YAAc3H,KAAKmC,MAAMwF,WAAW5F,IAAU/B,KAAKmC,MAAMwF,WAAW5F,GAAO+H,UACxFA,EAAU9J,KAAKmC,MAAMwF,WAAW5F,GAAO+H,SAGrC9J,KAAKmC,MAAMgY,iBAAmBna,KAAKmC,MAAMgY,gBAAgBpY,IAAU/B,KAAKmC,MAAMgY,gBAAgBpY,GAAO+H,UACvGA,EAAU9J,KAAKmC,MAAMgY,gBAAgBpY,GAAO+H,SAGvB,mBAAZA,EACFA,EAAQkQ,EAAUC,OAAOlY,GAAQ/B,KAAKmC,OAGxC2H,wDArDdiJ,EAAAA,UAAShP,KAAA,CAAC,CACTiP,SAAU,4BACVC,SAAU,8BACVmH,gBAAiBC,EAAAA,wBAAwBC,oDATlC7S,oCAYN+L,EAAAA,SAmDHkG,EAhEA,iBCuBE,SAAAa,EAAoBC,GAApB,IAAAxR,EACE+P,EAAAnY,KAAAZ,OAAOA,YADWgJ,EAAAwR,UAAAA,EADZxR,EAAAyR,UAAY,CAAEhK,QAAS,KAAMwC,SAAU,QAIjD,OAlBwC+F,EAAAA,EAAAA,GACtCxZ,OAAAoG,eAAI2U,EAAAra,UAAA,WAAQ,KAAZ,WAUE,OATIF,KAAKmC,OAAUnC,KAAKmC,MAAM8Q,WAAajT,KAAKya,UAAUxH,WACxDjT,KAAKya,UAAY,CACfxH,SAAUjT,KAAKmC,MAAM8Q,SACrBxC,QAASzQ,KAAK8W,GAAG4D,SACb1a,KAAKwa,UAAUG,wBAAwB3a,KAAKmC,MAAM8Q,UAClDjT,KAAKmC,MAAM8Q,WAIZjT,KAAKya,UAAUhK,6DAfzBsC,EAAAA,UAAShP,KAAA,CAAC,CACTiP,SAAU,kBACVC,SAAU,kFALH2H,EAAAA,gBAyBTL,GAlBwC1B,GCYxC,SAAgBgC,EAAeC,EAAyCC,EAAcC,GACpF,OAAIF,aAAsBG,SACjBH,EAAWja,MAAMka,EAASC,KAE1BF,ECfX,iBAAA,SAAAI,KA8SA,OA7SEA,EAAAhb,UAAAmM,YAAA,SAAYlK,GAAZ,IAAA6G,EAAAhJ,KACE,IAAImC,EAAMY,SAAUZ,EAAMqG,QAAQ2D,YAAlC,KAIIgP,GAAc,EAClBhZ,EAAMqG,QAAQ2D,YAAW,SAAII,EAAG6O,GACzBD,IACHA,GAAc,EACdtU,EACE0F,EAAElE,YAAW,WACP,OAAAW,EAAKqS,WAAW9O,EAAG6O,KAE3BD,GAAc,MAKpBD,EAAAhb,UAAAsM,aAAA,SAAarK,GAAb,IAAA6G,EAAAhJ,KACE,GAAKmC,EAAMY,SAAUZ,EAAMmZ,sBAA3B,CAOA,GAFAzV,EAAiB1D,EAAO,wBAAyB,IAE7CA,EAAMoZ,qBAAsB,gBACnBnZ,OACHoZ,EAAqBrZ,EAAMoZ,qBAAqBnZ,GAEtD,GAAkC,iBAAvBoZ,GAAmC/W,EAAW+W,GACvDrZ,EAAMmZ,sBAAsBlZ,GAAO,CACjC0Y,WAAYW,EAAKC,gBACftZ,EACAoZ,EACQ,6BAARpZ,GAAsCD,EAAMY,OAAOwY,sBAAwBpZ,EAAMY,OAAOwY,qBAAqB1b,eAAe,uCAClH,OAAAsC,EAAMY,OAAOqL,gBAAgBC,UACnCrL,YAGI,6BAARZ,GACF5C,OAAOoG,eAAezD,EAAMmZ,sBAAsBlZ,GAAM,kBAAmB,CACzEuD,IAAG,WAAQ,OAAAxD,EAAMiM,gBAAgBC,UACjC7H,IAAG,aACHT,YAAY,EACZE,cAAc,SAGb,GAAIuV,aAA8BG,EAAAA,WAAY,KAC7CC,EAAS,WAAS,OAAA,EACrB1L,UAAS,SAAC/K,GACT6D,EAAK6S,aAAa1Z,EAAOC,EAAK+C,GAC1BhD,EAAMqG,SAAWrG,EAAMqG,QAAQqE,eACjC1K,EAAMqG,QAAQqE,cAAc1K,MAI9B2Z,EAA6BF,IAC3BG,EAAS5Z,EAAMqT,MAAMwG,OAC3B7Z,EAAMqT,MAAMwG,OAAM,WAIhB,OAHqB,OAAjBF,IACFA,EAAeF,KAEVG,GAAUA,EAAO5Z,QAGpB8Z,EAAY9Z,EAAMqT,MAAM0G,UAC9B/Z,EAAMqT,MAAM0G,UAAS,WACnBD,GAAaA,EAAU9Z,GACvB2Z,EAAavK,cACbuK,EAAe,eA3CrB,IAAK,IAAM1Z,KAAOD,EAAMoZ,uBAAbnZ,GAiDTD,EAAMga,uBAEDha,EAAMia,KAEbja,EAAMga,eAAiBnc,KAAK0b,gBAC1B,OACAvZ,EAAMga,eAAc,WAGlB,QADIrZ,EAAOX,EAAMY,OACVD,EAAKC,SAAWD,EAAKsZ,MAC1BtZ,EAAOA,EAAKC,OAGd,OAAOD,EAAKsZ,QAIhBlW,EAAa/D,EAAO,OAAM,SAAGmF,OAAEhB,EAAAgB,EAAAhB,aAAcC,EAAAe,EAAAf,YAC3CpE,EAAMyM,MAAQtI,IACTC,GAAgBA,IAAgC,IAAjBD,IAClCnE,EAAMqG,QAAQoE,sBAAsB9K,KAAKK,OAMzC+Y,EAAAhb,UAAAwb,gBAAR,SAAwBlW,EAAcsV,EAAYuB,GAChD,OAAA,SAAQjZ,EAAYqJ,EAAgBtK,GAClC,IASE,MAR0B,iBAAf2Y,IACTA,EDpHV,SAAgBwB,EAAqBxB,EAAoByB,GACvD,IAKE,OAJ0C,IAAtCzB,EAAW9Z,QAAQ,eACrBwI,QAAQC,KAAK,wGAGRwR,SAAQpa,WAAA,EAAAmB,EAAIua,EAAQ,CAAE,UAAUzB,EAAU,OACjD,MAAO/Y,GACPyH,QAAQzH,MAAMA,IC4GKua,CAAqBxB,EAAY,CAAC,QAAS,YAAa,WAG7C,mBAAfA,IACTA,EAAU,WAAS,QAAEA,IAGfuB,GAAoBA,KAAuBvB,EAAW1X,EAAOqJ,EAAWtK,GAChF,MAAOJ,GAEP,MADAA,EAAM+H,QAAU,+BAA+BtE,EAAI,MAAMzD,EAAM+H,QACzD/H,KAKJmZ,EAAAhb,UAAAmb,WAAR,SAAmBlZ,EAA+BiZ,GAAlD,IAAApS,EAAAhJ,UAAkD,IAAAob,IAAAA,GAAA,GAChDpb,KAAKmM,YAAYhK,EAAOiZ,GAExBjZ,EAAMqG,QAAQoE,sBACX4P,KAAI,SAACjQ,GAAK,OAAAA,EAAE6P,MAAQ,EAAI,IACxBnY,QAAO,SAACsI,GAAK,OAAAvD,EAAKyT,kBAAkBlQ,IAAKA,EAAE6P,MAAOhB,KAErDjZ,EAAMqG,QAAQoE,sBAAwB,IAGhCsO,EAAAhb,UAAAiM,YAAR,SAAoBhK,EAA+BiZ,GAAnD,IAAApS,EAAAhJ,UAAmD,IAAAob,IAAAA,GAAA,OAC7CnO,GAAe,EACnB9K,EAAM4J,WAAW9H,QAAO,SAACsI,GACvBvD,EAAK0T,2BAA2BnQ,EAAG6O,KAAiBnO,GAAe,GAC/DjE,EAAK2T,2BAA2BpQ,EAAG6O,KACrCjZ,EAAMqG,QAAQoE,sBAAsB9K,KAAKyK,GACzCU,GAAe,GAGbV,EAAER,YAAoC,EAAtBQ,EAAER,WAAWpL,QAC/BqI,EAAKmD,YAAYI,EAAG6O,KAIpBnO,GAAgB9K,EAAMqG,SAAWrG,EAAMqG,QAAQqE,eACjD1K,EAAMqG,QAAQqE,cAAc1K,IAIxB+Y,EAAAhb,UAAAwc,2BAAR,SAAmCva,EAA+BiZ,GAChE,IAAKjZ,IAAUA,EAAMmZ,sBACnB,OAAO,MAGLrO,GAAe,EACbsO,EAAuBpZ,EAAMmZ,sBAEnC,IAAK,IAAMlZ,KAAOmZ,EAAsB,KAClCqB,EAAkB/B,EAAeU,EAAqBnZ,GAAK0Y,WAAY,CAAE3Y,MAAKA,GAAI,CAACA,EAAMiB,MAAOjB,EAAMqG,QAAQiE,UAAWtK,IACjH,6BAARC,IACFwa,IAAoBA,IAIpBxB,IACEG,EAAqBnZ,GAAKwa,kBAAoBA,GACzCtZ,EAASsZ,IAAoBC,KAAKC,UAAUF,KAAqBC,KAAKC,UAAUvB,EAAqBnZ,GAAKwa,oBAGjH3P,GAAe,EACfsO,EAAqBnZ,GAAKwa,gBAAkBA,EAC5C5c,KAAK6b,aAAa1Z,EAAOC,EAAKwa,IAIlC,OAAO3P,GAGDiO,EAAAhb,UAAAyc,2BAAR,SAAmCxa,EAA+BiZ,GAChE,IAAKjZ,GAASiC,EAAkBjC,EAAMga,gBACpC,OAAO,MAGHY,IAAkClC,EACtC1Y,EAAMga,eACN,CAAEha,MAAKA,GACP,CAACA,EAAMiB,MAAOjB,EAAMqG,QAAQiE,UAAWtK,IAErC8K,GAAe,EAQnB,OAPI8P,IAAyB5a,EAAMia,MAAQhB,KACzCnO,GAAe,EAEf9K,EAAMia,KAAOW,EACb5a,EAAMiM,gBAAgB4O,OAASD,GAG1B9P,GAGDiO,EAAAhb,UAAA+c,iBAAR,SAAyB9a,EAA0BV,GAAnD,IAAAuH,EAAAhJ,KACMmC,EAAM4J,YACR5J,EAAM4J,WACH+J,OAAM,SAACvJ,GAAK,OAACA,EAAEgP,uBAAyBhP,EAAEgP,qBAAqB1b,eAAe,8BAC9EoE,QAAO,SAACsI,GAAK,OAAAvD,EAAKiU,iBAAiB1Q,EAAG9K,KAGvCU,EAAMC,KAAOD,EAAMiM,gBAAgBC,WAAa5M,IAClDU,EAAMiM,gBAAgBC,SAAW5M,IAI7ByZ,EAAAhb,UAAAuc,kBAAR,SAA0Bta,EAA+Bia,EAAec,GAAxE,IAAAlU,EAAAhJ,KACE,GAAImC,EAAMkG,aAAelG,EAAMC,IAAK,CAClCyD,EAAiB1D,EAAO,WAAYia,IAAQja,EAAMia,WAC5C/W,EAAIlD,EAAMkG,YACU,EAAtBhD,EAAW,QAAE1E,QACfqG,EAAe3B,IAGJ,IAAT+W,GAAiB/W,EAAW,QAAE8X,MAAK,SAAC5Q,GAAK,QAAEA,EAAEqC,SAC/CvB,EAAkBlL,GACd+a,GAAe/a,EAAiB,YAClCA,EAAMkG,YAAYuJ,MAAM,CAAEnQ,MAAOuB,UAAWqL,SAAUlM,EAAMkG,YAAYgG,WACpElM,EAAM4J,aACRnJ,EAAiBT,EAAOa,WAEpBb,EAAMkG,uBAAuBmF,EAAAA,YAC/BrL,EAAM4J,WAAWpL,OAAS,OAId,IAATyb,IACLja,EAAiB,WAAKA,EAAMY,SAAWyB,EAAYrC,EAAM2D,eAAiBtB,EAAYf,EAActB,KACtGS,EAAiBT,EAAOA,EAAM2D,cAEhCqI,EAAgBhM,GACZA,EAAiB,WAAKA,EAAMgX,aAAehX,EAAM4J,YAAc,IAAIpL,UAAYwB,EAAMiB,OAAS,IAAIzC,QAC7FwB,EAAa,QAAE+J,YAAW,IAKnC/J,EAAM4J,YACR5J,EAAM4J,WACH+J,OAAM,SAACvJ,GAAK,OAACA,EAAE4P,iBACflY,QAAO,SAACsI,GAAK,OAAAvD,EAAKyT,kBAAkBlQ,EAAG6P,EAAMc,KAG9C/a,EAAMqG,QAAQkE,cAChBvK,EAAMqG,QAAQkE,aAAalL,KAAI,CAA4BW,MAAKA,EAAE8G,KAAM,SAAUxH,MAAO2a,KAIrFlB,EAAAhb,UAAA2b,aAAR,SAAqB1Z,EAA+BqD,EAAc/D,GAChE,IAIE,QAHI2b,EAASjb,EACPU,IAAgC,IAAvB2C,EAAKxE,QAAQ,KAAcwE,EAAOA,EAAKjD,QAAQ,aAAc,QAAQC,MAAM,KACpF6a,EAAYxa,EAAMlC,OAAS,EACxBH,EAAI,EAAGA,EAAI6c,EAAW7c,IAC7B4c,EAASA,EAAOva,EAAMrC,IAGxB4c,EAAOva,EAAMwa,IAAc5b,EAC3B,MAAOM,GAEP,MADAA,EAAM+H,QAAU,+BAA+BtE,EAAI,MAAMzD,EAAM+H,QACzD/H,EAOR,GAJa,6BAATyD,GAAuCrD,EAAMC,KAC/CpC,KAAKid,iBAAiB9a,EAAOV,GAGA,IAA3B+D,EAAKxE,QAAQ,UAAiB,KAC1BsB,EAAOkD,EAAKjD,QAAQ,WAAY,IACpC+K,EAAUnL,EAAMC,KAAOoD,IAASlD,EAAOH,EAAMkG,YAAclG,EAAMY,OAAOsF,YAAY1C,IAAIrD,IAGxFgL,GACKlJ,EAAkBkJ,EAAQ7L,QAAU2C,EAAkB3C,IACxD6L,EAAQ7L,QAAUA,GAErB6L,EAAQoB,WAAWjN,EAAO,CAAE4F,WAAW,IAI3CrH,KAAKsd,sBAAsBnb,EAAOqD,EAAM/D,IAGlCyZ,EAAAhb,UAAAod,sBAAR,SAA8Bnb,EAA+Bob,EAAkB9b,GACxEU,EAAMqG,QAAQkE,cAInBvK,EAAMqG,QAAQkE,aAAalL,KAAK,CAC9BW,MAAOA,EACP8G,KAAM,oBACNsU,SAAQA,EACR9b,MAAKA,KAGXyZ,kBC7SE,SAAAsC,EAAoB7R,GAAA3L,KAAA2L,aAAAA,EAqJtB,OAnJE6R,EAAAtd,UAAAoM,WAAA,SAAWnK,GACTnC,KAAKyd,oBAAoBtb,EAAO,cAChCnC,KAAKyd,oBAAoBtb,EAAO,oBAG1Bqb,EAAAtd,UAAAud,oBAAR,SAA4Btb,EAA+B8G,GAA3D,IAAAD,EAAAhJ,KACQ2H,EAA4B,GAKlC,GAJa,eAATsB,GAA2B9G,EAAMtC,eAAe,gBAAkBsC,EAAMC,KAC1EuF,EAAW7F,KAAK9B,KAAK0d,6BAA6Bvb,IAGhDA,EAAM8G,GACR,IAAK,IAAM0U,KAAiBxb,EAAM8G,GACV,eAAlB0U,GAAmChe,MAAM8C,QAAQN,EAAM8G,GAAMN,cAC/DxG,EAAM8G,GAAMN,WAAa,CAACxG,EAAM8G,GAAMN,YACtCa,QAAQC,KAAK,aAAatH,EAAMC,IAAG,0FAGnB,eAAlBub,EACIhW,EAAW7F,KAAIjB,MAAf8G,EAAU3F,EAASG,EAAM8G,GAAMN,WAAWzD,IAAG,SAACC,GAAK,OAAA6D,EAAK4U,kBAAkBzb,EAAOgD,OACjFwC,EAAW7F,KAAK9B,KAAK4d,kBAAkBzb,EAAOA,EAAM8G,GAAM0U,GAAgBA,IAKlF9X,EAAiB1D,EAAO,IAAM8G,EAAMtB,IAG9B6V,EAAAtd,UAAAwd,6BAAR,SAAqCvb,OAC/B0b,EAAa,GAWjB,OAVAlb,EAAkBsB,QAAO,SAAC6Z,GAAO,OAAA5X,EAAa/D,EAAMiM,gBAAiB0P,EAAG,SAAGxW,OAAEhB,EAAAgB,EAAAhB,aAAcC,EAAAe,EAAAf,YACzFsX,EAAaA,EAAW/H,OAAM,SAAC1U,GAAK,OAAAA,IAAM0c,IACtB,MAAhBxX,IAAyC,IAAjBA,GAC1BuX,EAAW/b,KAAKgc,IAEbvX,GAAepE,EAAMkG,aACxBrB,EAAe7E,EAAMkG,iBAIzB,SAAQiF,GACN,OAA0B,IAAtBuQ,EAAWld,OACN,KAGFod,EAAAA,WAAWC,QAAQH,EAAW3Y,IAAG,SAAC4Y,yBACjCrc,EAAQU,EAAMiM,gBAAgB0P,GACpC,OAAQA,GACN,IAAK,WACH,OAAOC,EAAAA,WAAWE,SAAS3Q,GAC7B,IAAK,UACH,OAAOyQ,EAAAA,WAAWG,QAAQzc,EAAnBsc,CAA0BzQ,GACnC,IAAK,YACH,OAAOyQ,EAAAA,WAAWI,UAAU1c,EAArBsc,CAA4BzQ,GACrC,IAAK,YACH,OAAOyQ,EAAAA,WAAWK,UAAU3c,EAArBsc,CAA4BzQ,GACrC,IAAK,MACH,OAAOyQ,EAAAA,WAAWM,IAAI5c,EAAfsc,CAAsBzQ,GAC/B,IAAK,MACH,OAAOyQ,EAAAA,WAAWO,IAAI7c,EAAfsc,CAAsBzQ,OAd5ByQ,CAgBHzQ,KAIAkQ,EAAAtd,UAAA0d,kBAAR,SAA0Bzb,EAA+BgH,EAAgBwU,GAAzE,IAAA3U,EAAAhJ,KACMue,EAAmC,KAYvC,GAXyB,iBAAdpV,IACToV,EAAkB/a,EAAMxD,KAAK2L,aAAaR,aAAahC,KAGhC,iBAAdA,GAA0BA,EAAUtE,OAC7C0Z,EAAkB/a,EAAMxD,KAAK2L,aAAaR,aAAahC,EAAUtE,OAC7DsE,EAAUX,UACZ+V,EAAgB/V,QAAUW,EAAUX,UAIf,iBAAdW,GAA0BA,EAAU2R,WAAY,CACjD,IAAAA,EAAA3R,EAAA2R,WAAYtS,EAAA1H,EAAAqI,EAAA,CAAA,eACpBoV,EAAkB,CAChB1Z,KAAM8Y,EACNhV,WAAYmS,EACZtS,QAAuC,EAA9BhJ,OAAO8F,KAAKkD,GAAS7H,OAAa6H,EAAU,MAWzD,MAPyB,mBAAdW,IACToV,EAAkB,CAChB1Z,KAAM8Y,EACNhV,WAAYQ,IAIhB,SAAQmE,OACA2M,EAAcsE,EAAgB5V,WAAW2E,EAASnL,EAAOoc,EAAgB/V,SAC/E,OfmCN,SAAgBgW,EAAUC,GACxB,QAASA,GAA2B,mBAAbA,EAAIC,KepCnBF,CAAUvE,GACLA,EAAOyE,KAAI,SAACvZ,GAAK,OAAA6D,EAAK2V,kBAAkBxc,EAAOwb,IAAkBxY,EAAIA,EAAGoZ,KAG7E5Z,EAAAA,aAAasV,GACRA,EAAOpK,KAAK3K,EAAAA,IAAG,SAACC,GAAK,OAAA6D,EAAK2V,kBAAkBxc,EAAOwb,IAAkBxY,EAAIA,EAAGoZ,MAG9EvV,EAAK4V,aAAazc,EAAOwb,IAAkB1D,EAASA,EAAQsE,KAI/Df,EAAAtd,UAAAye,kBAAR,SAA0Bxc,EAA+B8X,EAAazR,GAMpE,OAJIrG,EAAMqG,SAAWrG,EAAMqG,QAAQqE,eACjC1K,EAAMqG,QAAQqE,cAAc1K,GAGvBnC,KAAK4e,aAAazc,EAAO8X,EAAQzR,IAGlCgV,EAAAtd,UAAA0e,aAAR,SAAqBzc,EAA+B8X,EAAa3S,SAAEzC,EAAAyC,EAAAzC,KAAM2D,EAAAlB,EAAAkB,QACjD,kBAAXyR,IACTA,EAASA,EAAS,OAAIvW,EAAA,IAAMmB,GAAO2D,IAAoB,EAAI9E,QAGvDmb,EAAO1c,EAAMkG,YAuBnB,OAtBAwW,EAAsB,iBAAKA,EAAsB,gBAAEha,IAASga,EAAsB,gBAAEha,KAEhFvB,EAAS2W,IACXza,OAAO8F,KAAK2U,GAAQhW,QAAO,SAACY,SACpBqV,EAAYD,EAAOpV,GAAMqV,UAC3BD,EAAOpV,GAAMqV,WACZ1R,GAAW,IAAI0R,UAEd4E,EAAY5E,EAAY/X,EAAMkG,YAAY1C,IAAIuU,GAAa,KACjE,GAAI4E,EAAW,KACPpb,EAAAuW,EAAApV,GAAa0I,GAAX7J,EAAAwW,UAAWpZ,EAAA4C,EAAA,CAAA,eACnBob,EAAUC,UAAS3e,EAAA,GAAO0e,EAAU7E,QAAU,KAAE3S,EAAA,IAAIzC,GAAO0I,EAAIjG,MAE9DuX,EAAsB,iBAAKhZ,EAAiBgZ,EAAM,kBAAmB,IACtEA,EAAsB,gBAAEha,GAAK,eACrByC,EAAAwX,EAAA7E,QAAA,GAAEvW,EAAAmB,EAAkBma,GAAlB1X,EAAA5D,GAAkB5C,EAAAwG,EAAA,CAAA,iBAAA5D,EAAAA,EAAAA,EAAA,MAC1Bob,EAAUC,UAA8C,IAApCvf,OAAO8F,KAAK0Z,GAAare,OAAe,KAAOqe,OAMpE/E,GAEXuD,kBCtJE,SAAAyB,EAAoBlW,GAAA/I,KAAA+I,OAAAA,EAqHtB,OAnHEkW,EAAA/e,UAAAoM,WAAA,SAAWnK,GACJA,EAAMY,SAIPZ,EAAM4J,aAAe5J,EAAMC,IAC7ByD,EAAiB1D,EAAO,cAAeA,EAAMY,OAAOsF,aAEpDrI,KAAKkf,eAAe/c,KAIxB8c,EAAA/e,UAAAsM,aAAA,SAAarK,GACX,IAAIA,EAAMY,OAAV,KAIMoc,EAAiBnf,KAAKgR,cAAc7O,GACZ,IAA1Bgd,EAAexe,SAIW,IAA1Bwe,EAAexe,OACjBwe,EAAe,GAAG9W,YAAYyG,yBAE7B3M,EAAiB,YAAS8E,yBAIvBgY,EAAA/e,UAAAgf,eAAR,SAAuB/c,OACjBmL,EAAUY,EAAY/L,GAC1B,IAAKmL,EAAS,KACN8R,EAAyC,CAAEjN,SAAUhQ,EAAM+P,aAAaC,UACxE1Q,EAAQU,EAAMC,IAAMqB,EAActB,GAASA,EAAM2D,aAEjDiH,EAAM/M,KAAK+I,OAAS/I,KAAK+I,OAAO4B,oBAAoBxI,GAAS,KACnE,GAAI4K,GAAOA,EAAIsS,eAAiBtS,EAAIsS,cAA6B,cAAG,KAC5DxU,EAAYkC,EAAIsS,cACtB7V,QAAQC,KAAK,eAAeoB,EAAUhG,KAAI,8EAC1CyI,EAAUzC,EAAyB,cAAEpJ,EAAOU,QAG5CmL,EAFSnL,EAAM4J,WAEL,IAAI+B,EAAAA,UAAU,GAAIsR,GAElB,IAAI3Q,EAAAA,YAAYhN,EAAO2d,GAIrCjR,EAAgBhM,EAAOmL,IAGjB2R,EAAA/e,UAAA8Q,cAAR,SAAsB7O,GAAtB,IAAA6G,EAAAhJ,KACMgH,GAAiB,EACrB,GAAI7E,EAAMC,MAAQD,EAAMY,SAAYZ,EAAMC,MAAQD,EAAM4J,WAAa,CAC3D,IAAAuT,EAAAnd,EAAAkG,cACSlG,EAAMiM,iBAAkBjM,EAAMiM,gBAAgBC,UAC/CiR,EAAEC,UAChBD,EAAEhR,QAAQ,CAAEjH,WAAW,EAAOkL,UAAU,IACnC+M,EAAEvc,OAGLiE,GAAiB,EAFjBwY,EAAsBF,IAMtB,OAASA,EAAEnW,WAAa,OAASmW,EAAEG,iBACrCH,EAAEtO,cAAa,eACP7L,EAAI4Y,EAAAA,WAAWC,QAAQhV,EAAK0W,gBAA6Bvd,EAAO,gBAEtE,OAAOgD,EAAIA,EAAEma,GAAK,OAEpBA,EAAErO,mBAAkB,eACZ9L,EAAI4Y,EAAAA,WAAW4B,aAAa3W,EAAK0W,gBAAkCvd,EAAO,qBAEhF,OAAOgD,EAAIA,EAAEma,GAAKvF,EAAAA,GAAG,QAGlBuF,EAAEvc,OAGLiE,GAAiB,EAFjBwY,EAAsBF,QAOtBH,EAAiBnY,EAAiB,CAAC7E,GAAS,GAQlD,OAPCA,EAAM4J,YAAc,IAAI9H,QAAO,SAACsI,OACzBqT,EAAmB5W,EAAKgI,cAAczE,GACvCvF,GACHmY,EAAerd,KAAIjB,MAAnBse,EAAcnd,EAAS4d,MAIpBT,GAGDF,EAAA/e,UAAAwf,gBAAR,SAA2Bvd,EAA+B8G,GAA1D,IAAAD,EAAAhJ,KACQ2H,EAAkB,GAClBtC,EAAIlD,EAAMkG,YAehB,OAdIhD,GAAKA,EAAW,SAA2B,EAAtBA,EAAW,QAAE1E,OACpC0E,EAAW,QACRyQ,OAAM,SAAEvJ,GAA8B,OAACA,EAAEqC,QACzC3K,QAAO,SAAEsI,GAA8B,OAAA5E,EAAW7F,KAAIjB,MAAf8G,EAAU3F,EAASuK,EAAEtD,OAE/DtB,EAAW7F,KAAIjB,MAAf8G,EAAU3F,EAASG,EAAM8G,KAGvB9G,EAAM4J,YACR5J,EAAM4J,WACH+J,OAAM,SAACvJ,GAAK,OAACA,EAAEnK,KAAOmK,EAAER,aACxB9H,QAAO,SAACsI,GAAK,OAAA5E,EAAW7F,KAAIjB,MAAf8G,EAAU3F,EAASgH,EAAK0W,gBAAgBnT,EAAGtD,OAGtDtB,GAEXsX,kBCtHE,SAAAY,EAAoBlU,GAAA3L,KAAA2L,aAAAA,EADZ3L,KAAA8f,OAAS,EA2InB,OAxIED,EAAA3f,UAAAmM,YAAA,SAAYlK,GAEV,GADAnC,KAAK+f,0BAA0B5d,GAAOkK,eAClClK,EAAMY,OAAV,KAIMid,EAAmB7d,EAAMqG,SAAWrG,EAAMqG,QAAQyX,gBAAmBjgB,KAAK2L,aAAa1D,OAAOgY,gBACnGtgB,MAAM8C,QAAQud,GAAmBA,EAAkB,CAACA,IAAkB/b,QAAO,SAACgc,GAC7E,GAAIA,IACFzW,QAAQC,KAAK,sFACMwW,EAAe9d,EAAM4J,WAAY5J,EAAMiB,MAAkBjB,EAAiB,YAAEA,EAAMqG,UAEnG,MAAM,IAAI2B,MAAM,qDAMxB0V,EAAA3f,UAAAoM,WAAA,SAAWnK,GAAX,IAAA6G,EAAAhJ,KACEA,KAAKkgB,iBAAiB/d,GACtBnC,KAAK+f,0BAA0B5d,GAAOmK,aAClCnK,EAAM4J,YACR5J,EAAM4J,WAAW9H,QAAO,SAAEsI,EAAG8L,GAC3B7Y,OAAOoG,eAAe2G,EAAG,SAAU,CAAE5G,IAAG,WAAQ,OAAAxD,GAAO8D,cAAc,IACrEzG,OAAOoG,eAAe2G,EAAG,QAAS,CAAE5G,IAAG,WAAQ,OAAA0S,GAAOpS,cAAc,IACpE+C,EAAK8W,YAKXD,EAAA3f,UAAAsM,aAAA,SAAarK,GACXnC,KAAK+f,0BAA0B5d,GAAOqK,gBAGhCqT,EAAA3f,UAAAggB,iBAAR,SAAyB/d,OACjBW,EAAgCX,EAAY,OAClD,GAAKW,EAAL,CAoDA,GAhDAtD,OAAOoG,eAAezD,EAAO,OAAQ,CAAEwD,IAAG,WAAQ,OAAA7C,EAAKuF,aAAapC,cAAc,IAClFzG,OAAOoG,eAAezD,EAAO,UAAW,CAAEwD,IAAG,WAAQ,OAAA7C,EAAK0F,SAASvC,cAAc,IACjFzG,OAAOoG,eAAezD,EAAO,QAAS,CACpCwD,IAAG,WAAQ,OAAAxD,EAAMC,KAAOD,EAAM4J,WAAatI,EAActB,GAASW,EAAKM,OACvE6C,cAAc,IAGhBpC,EAAiB1B,EAAO,CACtBmV,GjBrDN,SAAgB6I,EAAWL,EAAgB3d,EAA0BkW,GACnE,GAAIlW,EAAMmV,GAAI,OAAOnV,EAAMmV,OACvBrO,EAAO9G,EAAM8G,KAEjB,OADKA,GAAQ9G,EAAM8Q,WAAUhK,EAAO,YAC7B,CAAC6W,EAAQ7W,EAAM9G,EAAMC,IAAKiW,GAAO1F,KAAK,KiBiDrCwN,CAAW,UAAUngB,KAAK8f,OAAU3d,EAAOA,EAAa,OAC5DqT,MAAO,GACPtD,aAAc,GACd9D,gBAAkBjM,EAAM8G,MAAS9G,EAAMC,IAAW,CAChDge,MAAO,GACPC,YAAa,GACb5I,OAAO,EACPpJ,UAAU,GAJiC,KAQ3CrO,KAAK2L,aAAa1D,OAAOqY,mBAC3Bne,EAAiB,WAAI,GAGnBA,EAAMuT,WACRlM,QAAQC,KAAK,yEAIE,oBAAftH,EAAM8G,OAEJ9G,EAAM8Q,UACF9Q,EAAMoZ,sBAAwBpZ,EAAMoZ,qBAAqBtI,YAG3D9Q,EAAM8G,MACRO,QAAQC,KAAK,6EAEftH,EAAM8G,KAAO,oBAGV9G,EAAM8G,MAAQ9G,EAAM4J,aACvB5J,EAAM8G,KAAO,gBAGX9G,EAAM8G,MACRjJ,KAAK2L,aAAatB,eAAelI,GAG/BA,EAAMY,OAAQ,KACZwd,GAAmB/b,EAAYrC,EAAMC,OACnCoC,EAAYrC,EAAM2D,eACnBtB,EAAYf,EAActB,OACxBA,EAAiB,aAAOA,EAAMia,MAAQja,EAAMga,iBACnD,GAAIoE,GAAmBpe,EAAiB,UAAG,CAEzC,QADIqe,EAASre,EAAMY,OACZyd,IAAWA,EAAOrE,iBAAmBqE,EAAOpE,MACjDoE,EAASA,EAAOzd,OAElBwd,GAAmBC,KAAYA,EAAOrE,gBAAkBqE,EAAOpE,MAG7DmE,GACF3d,EAAiBT,EAAOA,EAAM2D,cAIlC9F,KAAKygB,kBAAkBte,KAGjB0d,EAAA3f,UAAAugB,kBAAR,SAA0Bte,GACxBA,EAAMyF,SAAWzF,EAAMyF,UAAY,OAC7B8Y,EAAyBtgB,EAAA,CAC7B2H,WAAY,GACZC,YAAa,IACT7F,EAAMiM,gBAAgBtG,sBAAwB,IAGpD3F,EAAMyF,SAAW8K,EACZ1S,KAAK2L,aAAa7D,qBAAqBC,WAAW7C,IAAG,SAAC7D,GAAK,OAAAA,EAAEc,KAC7Due,EAA0B3Y,WAAW7C,IAAG,SAAC7D,GAAK,OAAAA,EAAEc,KAChDA,EAAMyF,SACN5H,KAAK2L,aAAa7D,qBAAqBE,YAAY9C,IAAG,SAAC7D,GAAK,OAAAA,EAAEc,KAC9Due,EAA0B1Y,YAAY9C,IAAG,SAAC7D,GAAK,OAAAA,EAAEc,MACpD2T,OAAM,SAAE6K,EAAIngB,EAAGogB,GAAM,OAAAD,GAAMngB,IAAMogB,EAAE5f,QAAQ2f,MAGvCd,EAAA3f,UAAA6f,0BAAR,SAAkC5d,OAC1BuI,EAAe1K,KAAK2L,aAAahB,oBAAoBxI,GACrDyI,EAA4BF,EAAeA,EAAqB,SAAU,GAEhF,MAAO,CACL2B,YAAW,WAAQ,OAAAzB,EAASyB,aAAezB,EAASyB,YAAYlK,IAChEmK,WAAU,WAAQ,OAAA1B,EAAS0B,YAAc1B,EAAS0B,WAAWnK,IAC7DqK,aAAY,WAAQ,OAAA5B,EAAS4B,cAAgB5B,EAAS4B,aAAarK,MAGzE0d,KClIA,SAAgBgB,EAAoBlV,GAClC,MAAO,CACLjE,MAAO,CACL,CAAE7C,KAAM,eAAgBgG,UAAW2O,GACnC,CAAE3U,KAAM,kBAAmBgG,UAAW0P,IAExC1R,WAAY,CACV,CAAEhE,KAAM,OAAQkF,UAAW,IAAI8V,EAAclU,IAC7C,CAAE9G,KAAM,mBAAoBkF,UAAW,IAAIyT,EAAyB7R,IACpE,CAAE9G,KAAM,aAAckF,UAAW,IAAIkV,EAAmBtT,IACxD,CAAE9G,KAAM,mBAAoBkF,UAAW,IAAImR,KAKjD,IAAA4F,EAAA,WAsCE,SAAAA,EACEC,EACmCC,QAAnC,IAAAA,IAAAA,EAAA,IAEKA,GAILA,EAAQ/c,QAAO,SAAC8E,GAAU,OAAAgY,EAAcjY,UAAUC,KAEtD,OAlCS+X,EAAAG,QAAP,SAAelY,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLmY,SAAUJ,EACV5N,UAAW,CACT,CAAEiO,QAAS5Z,EAAe6Z,OAAO,EAAMC,WAAYR,EAAqBS,KAAM,CAAC7Z,IAC/E,CAAE0Z,QAAS5Z,EAAega,SAAUxY,EAAQqY,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAUxY,EAAQqY,OAAO,GAClE3Z,EACAiE,KAKCoV,EAAAW,SAAP,SAAgB1Y,GACd,YADc,IAAAA,IAAAA,EAAA,IACP,CACLmY,SAAUJ,EACV5N,UAAW,CACT,CAAEiO,QAAS5Z,EAAega,SAAUxY,EAAQqY,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAUxY,EAAQqY,OAAO,GAClE1V,yBAjCPgW,EAAAA,SAAQ3d,KAAA,CAAC,CACR4d,aAAc,CACZzS,EACAyE,EACAyC,EACAoD,EACAE,EACAa,GAEFqH,gBAAiB,CAACpI,EAAae,GAC/BsH,QAAS,CAAC3S,EAAYyE,EAAayC,EAAkBoD,EAAaE,GAClEoI,QAAS,CAACC,EAAAA,2DArCHta,iCAkEJ8L,EAAAA,UAAQ,CAAAtK,KAAI0P,EAAAA,OAAM5U,KAAA,CAACwD,QAQxBuZ,EAhDA,iQlB2CA,SAAgBkB,EAAqB7f,GAGnC,YAFIV,EAAQU,EAAMqG,QAAuB,cACrC3F,EAAQX,EAAWC,GAChBA,EAAMY,QAEXF,EAAKb,EAAOE,EADZC,EAAQA,EAAMY,QACoBF,OAGpC,IAAmB,IAAAof,EAAAte,EAAAd,GAAKqf,EAAAD,EAAAzgB,QAAA0gB,EAAAxgB,KAAAwgB,EAAAD,EAAAzgB,OAAE,CAArB,IAAMc,EAAI4f,EAAAzgB,MACb,IAAKA,EACH,OAAOuB,UAETvB,EAAQA,EAAMa,wGAGhB,OAAOb","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    let path: string[] = [];\n    if (typeof field.key === 'string') {\n      const key = field.key.indexOf('[') === -1\n        ? field.key\n        : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n      path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n    } else if (Array.isArray(field.key)) {\n      path = field.key.slice(0);\n    } else {\n      path = [`${field.key}`];\n    }\n\n    field._keyPath = { key: field.key, path };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignFieldValue(field: FormlyFieldConfigCache, value: any) {\n  let paths = getKeyPath(field);\n  if (paths.length === 0) {\n    return;\n  }\n\n  let root = field;\n  while (root.parent) {\n    root = root.parent;\n    paths = [...getKeyPath(root), ...paths];\n  }\n\n  if (value === undefined && field['autoClear']) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, root.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(root.model, paths, value);\n}\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns: typeof setFn[] = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => fns.splice(fns.indexOf(setFn), 1);\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = { called: false, emitEvent: false };\n  form._updateTreeValidity = ({ emitEvent } = { emitEvent: true }) => updateValidityArgs = { called: true, emitEvent: emitEvent || updateValidityArgs.emitEvent };\n  action();\n\n  updateValidityArgs.called && updateValidity({ emitEvent: updateValidityArgs.emitEvent });\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { Observable } from 'rxjs';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: ValidationMessageOption['message'] } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    lazyRender: false,\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.parent.options;\n    const componentRef = _resolver\n      .resolveComponentFactory<FieldType>(type.component)\n      .create(_injector);\n\n    defineHiddenProp(type, '_componentRef', componentRef);\n    componentRef.destroy();\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: ValidationMessageOption['message']) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig, options?: { [id: string]: any; }): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n  options?: { [id: string]: any };\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string | Observable<string>);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes (Will be set by default in the next major version).\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n     *\n     * Defaults to `changeDetectionCheck`.\n     */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n\n    /**\n     * Whether to lazily render field components or not when marked as hidden.\n     * - `true`: lazily render field components (Will be set by default in the next major version).\n     * - `false`: render field components and use CSS to control their visibility.\n     *\n     * Defaults to `false`.\n     */\n    lazyRender?: boolean,\n\n    /**\n     * When true, reset the value of hidden fields.\n     *\n     * Defaults to `false`.\n     */\n    resetFieldOnHide?: boolean,\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n    reduceFormUpdateValidityCalls(formControl, () => this._buildForm(field));\n    field.options._checkField(field, true);\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => {\n            // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n          });\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    if (!options._buildField) {\n      options._buildField = (field: FormlyFieldConfig) => {\n        this.buildForm(field.form, field.fieldGroup, field.model, field.options);\n        return field;\n      };\n    }\n\n    return options;\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { EventEmitter } from '@angular/core';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  if (field['shareFormControl'] === false) {\n    return null;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent || !field.key) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      updateControl(\n        parent,\n        { emitEvent },\n        () => parent.setControl(path, new FormGroup({})),\n      );\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nexport function updateValidity(c: AbstractControl) {\n  const status = c.status;\n  c.updateValueAndValidity({ emitEvent: false });\n  if (status !== c.status) {\n    (c.statusChanges as EventEmitter<string>).emit(c.status);\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n\nexport function clearControl(form: AbstractControl) {\n  form['_fields'] && delete form['_fields'];\n  form.setValidators(null);\n  form.setAsyncValidators(null);\n\n  if (form instanceof FormGroup || form instanceof FormArray) {\n    Object.keys(form.controls)\n      .forEach((k) => clearControl(form.controls[k]));\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignFieldValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\nimport { clearControl } from '../extensions/field-form/utils';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() {\n    if (!this._model) {\n      this._model = {};\n    }\n\n    return this._model;\n  }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _modelChangeValue: any = {};\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => this.ngZone.runGuarded(() => {\n    // runGuarded is used to keep the expression changes in-sync\n    // https://github.com/ngx-formly/ngx-formly/issues/2095\n    this.checkExpressionChange();\n    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n  }));\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // https://github.com/ngx-formly/ngx-formly/issues/2294\n    if (changes.model && this.field) {\n      this.field.model = this.model;\n    }\n\n    if (changes.fields && this.form) {\n      clearControl(this.form);\n    }\n\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    assignFieldValue(field, value);\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n\n  private get field(): any {\n    return this.fields && this.fields[0] && this.fields[0].parent;\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\nimport { isObservable } from 'rxjs';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n  private componentRefs: any[] = [];\n  private hooksObservers: Function[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hooksObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[] = []) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n      wrappers = this.field ? this.field.wrappers : [];\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty<ViewContainerRef>(ref.instance, 'fieldComponent', ({ firstChange, previousValue, currentValue }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const { component } = this.formlyConfig.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.resetRefs(changes.field.previousValue);\n      this.render();\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private render() {\n    if (!this.field) {\n      return;\n    }\n\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!this.formlyConfig.extras.lazyRender) {\n          firstChange && this.renderField(this.containerRef, this.field);\n          if (!firstChange || (firstChange && currentValue)) {\n            this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n          }\n        } else {\n          if (currentValue) {\n            this.containerRef.clear();\n          } else {\n            this.renderField(this.containerRef, this.field);\n          }\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(change)': 'onChange($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements(): ElementRef[] { return (this.field && this.field['_elementRefs']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.to && this.to[eventName]) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => this.to[eventName](this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachElementRef(this.field);\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignFieldValue } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl, findControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  get formControl() {\n    return this.field.formControl as FormArray;\n  }\n\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl && field.key) {\n      const control = findControl(field);\n      registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any, { markAsDirty } = { markAsDirty: true }) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i: number, { markAsDirty } = { markAsDirty: true }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    markAsDirty && this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig, ValidationMessageOption } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable, isObservable, of } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      switchMap(() => isObservable(this.errorMessage)\n        ? this.errorMessage\n        : of(this.errorMessage),\n      ),\n    );\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: ValidationMessageOption['message'] = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {\n  get template() {\n    if (this.field && (this.field.template !== this.innerHtml.template)) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml\n          ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n          : this.field.template,\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n  private innerHtml = { content: null, template: null };\n  constructor(private sanitizer: DomSanitizer) {\n    super();\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isUndefined, isFunction, defineHiddenProp, wrapProperty, reduceFormUpdateValidityCalls, getFieldValue, assignFieldValue } from '../../utils';\nimport { evalExpression, evalStringExpression } from './utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl, updateValidity } from '../field-form/utils';\nimport { FormArray } from '@angular/forms';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    let checkLocked = false;\n    field.options._checkField = (f, ignoreCache) => {\n      if (!checkLocked) {\n        checkLocked = true;\n        reduceFormUpdateValidityCalls(\n          f.formControl,\n          () => this.checkField(f, ignoreCache),\n        );\n        checkLocked = false;\n      }\n    };\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key];\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              key,\n              expressionProperty,\n              key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscribe = () => (expressionProperty as Observable<any>)\n            .subscribe(v => {\n              this.setExprValue(field, key, v);\n              if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n              }\n            });\n\n          let subscription: Subscription = subscribe();\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit = () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      field.hideExpression = this._evalExpression(\n        'hide',\n        field.hideExpression,\n        () => {\n          let root = field.parent;\n          while (root.parent && !root.hide) {\n            root = root.parent;\n          }\n\n          return root.hide;\n        },\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  private _evalExpression(prop: string, expression, parentExpression?) {\n    return (model: any, formState: any, field: FormlyFieldConfig) => {\n      try {\n        if (typeof expression === 'string') {\n          expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n        }\n\n        if (typeof expression !== 'function') {\n          expression = () => !!expression;\n        }\n\n        return (parentExpression && parentExpression()) || expression(model, formState, field);\n      } catch (error) {\n        error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n        throw error;\n      }\n    };\n  }\n\n  private checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    this._checkField(field, ignoreCache);\n\n    field.options._hiddenFieldsForCheck\n      .sort(f => f.hide ? -1 : 1)\n      .forEach(f => this.toggleFormControl(f, !!f.hide, !ignoreCache));\n\n    field.options._hiddenFieldsForCheck = [];\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        this.setExprValue(field, key, expressionValue);\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean, resetOnHide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n\n      if (hide === true && c['_fields'].every(f => !!f._hide)) {\n        unregisterControl(field);\n        if (resetOnHide && field['autoClear']) {\n          field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n          if (field.fieldGroup) {\n            assignFieldValue(field, undefined);\n\n            if (field.formControl instanceof FormArray) {\n              field.fieldGroup.length = 0;\n            }\n          }\n        }\n      } else if (hide === false) {\n        if (field['autoClear'] && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n          assignFieldValue(field, field.defaultValue);\n        }\n        registerControl(field);\n        if (field['autoClear'] && field.fieldArray && (field.fieldGroup || []).length !== (field.model || []).length) {\n          (<any> field.options)._buildForm(true);\n        }\n      }\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide, resetOnHide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field, type: 'hidden', value: hide });\n    }\n  }\n\n  private setExprValue(field: FormlyFieldConfigCache, prop: string, value: any) {\n    try {\n      let target = field;\n      const paths = (prop.indexOf('[') === -1 ? prop : prop.replace(/\\[(\\w+)\\]/g, '.$1')).split('.');\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const path = prop.replace(/^model\\./, ''),\n        control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n\n      if (\n        control\n        && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n      ) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n\n    this.emitExpressionChanges(field, prop, value);\n  }\n\n  private emitExpressionChanges(field: FormlyFieldConfigCache, property: string, value: any) {\n    if (!field.options.fieldChanges) {\n      return;\n    }\n\n    field.options.fieldChanges.next({\n      field: field,\n      type: 'expressionChanges',\n      property,\n      value,\n    });\n  }\n}\n","import { FormlyExtension, FormlyConfig, ValidatorOption } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty, clone, isObject } from '../../utils';\nimport { updateValidity } from '../field-form/utils';\nimport { isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: any, validatorName?: string) {\n    let validatorOption: ValidatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.formlyConfig.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const { expression, ...options } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null,\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator,\n      };\n    }\n\n    return (control: AbstractControl) => {\n      const errors: any = validatorOption.validation(control, field, validatorOption.options);\n      if (isPromise(errors)) {\n        return errors.then(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n      }\n\n      if (isObservable(errors)) {\n        return errors.pipe(map(v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n      }\n\n      return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n    };\n  }\n\n  private handleAsyncResult(field: FormlyFieldConfigCache, errors: any, options: ValidatorOption) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    if (field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n\n    return this.handleResult(field, errors, options);\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, errors: any, { name, options }: ValidatorOption) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : { [name]: options ? options : true };\n    }\n\n    const ctrl = field.formControl;\n    ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n\n    if (isObject(errors)) {\n      Object.keys(errors).forEach(name => {\n        const errorPath = errors[name].errorPath\n          ? errors[name].errorPath\n          : (options || {}).errorPath;\n\n        const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n        if (childCtrl) {\n          const { errorPath, ...opts } = errors[name];\n          childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n\n          !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n          ctrl['_childrenErrors'][name] = () => {\n            const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};\n            childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n          };\n        }\n      });\n    }\n\n    return errors;\n  }\n}\n","import { FormlyExtension, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators, ValidatorFn, AsyncValidatorFn } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl, updateValidity as updateControlValidity } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) { }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent) {\n      return;\n    }\n\n    if (field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    } else {\n      this.addFormControl(field);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const fieldsToUpdate = this.setValidators(field);\n    if (fieldsToUpdate.length === 0) {\n      return;\n    }\n\n    if (fieldsToUpdate.length === 1) {\n      fieldsToUpdate[0].formControl.updateValueAndValidity();\n    } else {\n      (field.formControl as any)._updateTreeValidity();\n    }\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = field.key ? getFieldValue(field) : field.defaultValue;\n\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key || !field.parent || (!field.key && !field.fieldGroup)) {\n      const { formControl: c } = field;\n      const disabled = field.templateOptions ? field.templateOptions.disabled : false;\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const v = Validators.compose(this.mergeValidators<ValidatorFn>(field, '_validators'));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const v = Validators.composeAsync(this.mergeValidators<AsyncValidatorFn>(field, '_asyncValidators'));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    const fieldsToUpdate = updateValidity ? [field] : [];\n    (field.fieldGroup || []).forEach(f => {\n      const childrenToUpdate = this.setValidators(f);\n      if (!updateValidity) {\n        fieldsToUpdate.push(...childrenToUpdate);\n      }\n    });\n\n    return fieldsToUpdate;\n  }\n\n  private mergeValidators<T>(field: FormlyFieldConfigCache, type: '_validators' | '_asyncValidators'): T[] {\n    const validators: any = [];\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields']\n        .filter((f: FormlyFieldConfigCache) => !f._hide)\n        .forEach((f: FormlyFieldConfigCache) => validators.push(...f[type]));\n    } else {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.key && f.fieldGroup)\n        .forEach(f => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, isUndefined, getFieldValue, reverseDeepMerge, assignFieldValue } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (this.formlyConfig.extras.resetFieldOnHide) {\n      field['autoClear'] = true;\n    }\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.template\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (field.parent) {\n      let setDefaultValue = !isUndefined(field.key)\n        && !isUndefined(field.defaultValue)\n        && isUndefined(getFieldValue(field))\n        && (!field['autoClear'] || !(field.hide || field.hideExpression));\n      if (setDefaultValue && field['autoClear']) {\n        let parent = field.parent;\n        while (parent && !parent.hideExpression && !parent.hide) {\n          parent = parent.parent;\n        }\n        setDefaultValue = !parent || !(parent.hideExpression || parent.hide);\n      }\n\n      if (setDefaultValue) {\n        assignFieldValue(field, field.defaultValue);\n      }\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}