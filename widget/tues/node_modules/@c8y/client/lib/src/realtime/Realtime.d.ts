import { Observable } from 'rxjs';
import { IFetchClient } from '../core';
export interface ICometdConfig {
    url: string;
    logLevel?: string;
    requestHeaders?: any;
    appendMessageTypeToURL?: boolean;
    stickyReconnect?: boolean;
}
export declare class Realtime {
    private client;
    private url;
    private cometd;
    /**
     * Allows to set up a realtime (websocket or long-polling) connection to the platform.
     * @param client The fetch client instance to use
     * @param url The URL to connect to
     * @param handshakeCallback A function which is called on succeeded or failed handshake
     */
    constructor(client: IFetchClient, url?: string, handshakeCallback?: any);
    /**
     * Subscribes to a realtime channel to listen for data.
     * @param channel The channel to connect to
     * @param callback A function to call when data is received
     */
    subscribe(channel: string, callback: (data: any) => void): object;
    /**
     * Cancels the listening to a channel.
     * @param subscription The subscription object returned by subscribe()
     */
    unsubscribe(subscription: object): object;
    /**
     * Returns an observable which subscribes/unsubscribes automatically.
     * @param channel The name of the channel you want to connect to.
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use rxjs `new Observable()`, `defer()` or `from()`
     * to composite an observable on your own:
     * ```typescript
     * return new Observable<any>((observer) => {
     *   const subscription = this.subscribe(channel, (msg) => {
     *     const data = {
     *       channel: msg.channel,
     *       data: msg.data.data,
     *       id: msg.id,
     *       realtimeAction: msg.data.realtimeAction,
     *     };
     *     return observer.next(data);
     *   });
     *   return () => this.unsubscribe(subscription);
     * });
     * ```
     */
    observable(channel: string): Observable<any>;
    /**
     * Disconnects the current connection.
     */
    disconnect(): void;
    private checkConnection;
    private handshake;
    private metaHandshake;
}
