"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("../core");
/**
 * @description
 * This service allows for managing tenant's options.
 */
var TenantOptionsService = /** @class */ (function (_super) {
    __extends(TenantOptionsService, _super);
    function TenantOptionsService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseUrl = 'tenant';
        _this.listUrl = 'options';
        _this.propertyName = 'options';
        _this.securityOptionsCategories = ['password'];
        _this.securityOptionsListUrl = 'security-options';
        _this.systemOptions = 'system';
        return _this;
    }
    /**
     * Get a representation of a tenant's option.
     *
     * @param entity Tenant option object.
     * @param params Additional query parameters.
     *
     * @returns Returns promise object that is resolved with
     * the ITenantOption wrapped by IResult.
     *
     * **Example**
     * ```typescript
     * const option: ITenantOption = {
     *   category: 'access.control',
     *   key: 'allow.origin'
     * };
     * const params: ITenantOptionDetailParams = {
     *   evaluate: 'inherited'
     * };
     * (async () => {
     *   const { data, res } = await tenantService.detail(option);
     *   console.log('value inherited from parent tenant:', data.value);
     * })();
     * ```
     *
     * Required role: ROLE_OPTION_MANAGEMENT_READ
     */
    TenantOptionsService.prototype.detail = function (entity, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.detail.call(this, entity, params)];
            });
        });
    };
    /**
     * Creates a new tenant's option.
     *
     * @param {ITenantOption} entity Tenant's Option object.
     *
     * @returns {IResult<IIdentified>} Returns promise object that is resolved with
     * the details of newly created tenant option.
     *
     * **Example**
     * ```typescript
     *
     *  const tenantObject = {
     *    id: "sample_tenant",
     *    company: "sample_company",
     *    domain: "sample_domain.com",
     *    contactName: "Mr. Doe",
     *    ...
     *  };
     *
     *  (async () => {
     *    const {data, res} = await tenantService.create(tenantObject);
     *  })();
     * ```
     *
     * Required role: ROLE_OPTION_MANAGEMENT_ADMIN<br><br>
     * Options are category-key-value tuples, storing tenant configuration.Some categories of options
     * allow creation of new one, other are limited to predefined set of keys.<br><br>
     * Any option of any tenant can be defined as "non-editable" by "management" tenant. Afterwards, any PUT or DELETE
     * requests made on that option by the owner tenant, will result in 403 error (Unauthorized).
     */
    TenantOptionsService.prototype.create = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.create.call(this, entity)];
            });
        });
    };
    /**
     * Updates tenant's option data.
     *
     * @param {ITenantOption} entity Tenant option is partially updatable.
     *
     * @returns {IResult<ITenantOption>} Returns promise object that is resolved with the saved tenant option object.
     *
     * **Example**
     * ```typescript
     *
     *  const partialUpdateObject: IIdentified = {
     *     value : "http://developer.cumulocity.com"
     *     ...
     *   }
     *
     *  (async () => {
     *    const {data, res} = await tenantOptionsService.update(partialUpdateObject);
     *  })();
     * ```
     *
     * Required role: ROLE_OPTION_MANAGEMENT_ADMIN
     */
    TenantOptionsService.prototype.update = function (entity) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.update.call(this, entity)];
            });
        });
    };
    /**
     * Gets the list of tenant's options filtered by parameters.
     *
     * @param {object} filter Object containing filters for querying tenant options.
     *
     * @returns {IResultList<ITenantOption>} Returns promise object that is resolved
     * with the ITenantOption wrapped by IResultList.
     *
     * **Example**
     * ```typescript
     *
     *  const filter: object = {
     *     severity: Severity.MAJOR,
     *     pageSize: 100,
     *     withTotalPages: true
     *   };
     *
     *   (async () => {
     *     const {data, res, paging} = await tenantOptionsService.list(filter);
     *   })();
     * ```
     *
     * Required role: ROLE_OPTION_MANAGEMENT_READ
     */
    TenantOptionsService.prototype.list = function (filter) {
        if (filter === void 0) { filter = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.list.call(this, filter)];
            });
        });
    };
    /**
     * Gets a list as observable.
     *
     * @param {object} filter Object containing filters for querying
     * @param {object} options To configure the observable
     *
     * @returns Data wrapped as Observable.
     *
     * **Example**
     * ```typescript
     *
     *   const list$ = tenantOptionsService.list$();
     *   list$.subscribe((data) => console.log(data));
     * ```
     *
     * **Deprecated** This function will be removed soon in favor of decoupling
     * this library from rxjs. Use [[Realtime]] for realtime connection and
     * rxjs `defer()` or `from()` to composite an observable on your own.
     */
    TenantOptionsService.prototype.list$ = function (filter, options) {
        if (filter === void 0) { filter = {}; }
        if (options === void 0) { options = {}; }
        return _super.prototype.list$.call(this, filter, options);
    };
    /**
     * Delete a representation of a tenant's option.
     *
     * @param {string|number|IIdentified} entityOrId Tenant's option id or tenant's option object.
     *
     * @returns Returns promise object that is resolved with the IResult.
     *
     * **Example**
     * ```typescript
     *
     *    const tenantOptionId: string = "uniqueTenantId";
     *
     *    (async () => {
     *      const {data, res} = await tenantOptionsService.delete(tenantOptionId);
     *   })();
     * ```
     *
     * Required role: ROLE_TENANT_MANAGEMENT_ADMIN
     */
    TenantOptionsService.prototype.delete = function (entityOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.delete.call(this, entityOrId)];
            });
        });
    };
    TenantOptionsService.prototype.getDetailUrl = function (entity) {
        if (this.securityOptionsCategories.indexOf(entity.category) > -1) {
            return this.securityOptionsListUrl + "/" + entity.category + "/" + entity.key;
        }
        else {
            return this.listUrl + "/" + entity.category + "/" + entity.key;
        }
    };
    TenantOptionsService.prototype.onBeforeCreate = function (obj) {
        return obj;
    };
    return TenantOptionsService;
}(core_1.Service));
exports.TenantOptionsService = TenantOptionsService;
//# sourceMappingURL=TenantOptionsService.js.map