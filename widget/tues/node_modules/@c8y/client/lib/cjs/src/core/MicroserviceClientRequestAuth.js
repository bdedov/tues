"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Allows to use either Cookie-Auth or Basic-Auth
 * of a microservice client request header
 * for Authorization to the Cumulocity API.
 */
var MicroserviceClientRequestAuth = /** @class */ (function () {
    /**
     * Authenticates using the credentials which were
     * provided within the request headers of the
     * client call to the microservice.
     * @param headers
     */
    function MicroserviceClientRequestAuth(headers) {
        if (headers === void 0) { headers = {}; }
        this.xsrfToken = this.getCookieValue(headers, 'XSRF-TOKEN');
        this.authTokenFromCookie = this.getCookieValue(headers, 'authorization');
        this.authTokenFromHeader = headers.authorization;
    }
    MicroserviceClientRequestAuth.prototype.updateCredentials = function (credentials) {
        if (credentials === void 0) { credentials = {}; }
        return undefined;
    };
    MicroserviceClientRequestAuth.prototype.getFetchOptions = function (options) {
        var headers = __assign({ Authorization: this.authTokenFromCookie
                ? "Bearer " + this.authTokenFromCookie
                : this.authTokenFromHeader }, (this.xsrfToken ? { 'X-XSRF-TOKEN': this.xsrfToken } : undefined));
        options.headers = Object.assign(headers, options.headers);
        return options;
    };
    MicroserviceClientRequestAuth.prototype.getCometdHandshake = function (config) {
        if (config === void 0) { config = {}; }
        var KEY = 'com.cumulocity.authn';
        var xsrfToken = this.xsrfToken;
        var token = this.authTokenFromCookie;
        if (!token && this.authTokenFromHeader) {
            token = this.authTokenFromHeader.replace('Basic ', '').replace('Bearer ', '');
        }
        var ext = (config.ext = config.ext || {});
        ext[KEY] = Object.assign(ext[KEY] || {}, __assign({ token: token }, (xsrfToken ? { xsrfToken: xsrfToken } : undefined)));
        return config;
    };
    MicroserviceClientRequestAuth.prototype.logout = function () {
        if (this.authTokenFromCookie) {
            delete this.authTokenFromCookie;
        }
        if (this.authTokenFromHeader) {
            delete this.authTokenFromHeader;
        }
        if (this.xsrfToken) {
            delete this.xsrfToken;
        }
    };
    MicroserviceClientRequestAuth.prototype.getCookieValue = function (headers, name) {
        try {
            var value = headers && headers.cookie && headers.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
            return value ? value.pop() : undefined;
        }
        catch (ex) {
            return undefined;
        }
    };
    return MicroserviceClientRequestAuth;
}());
exports.MicroserviceClientRequestAuth = MicroserviceClientRequestAuth;
//# sourceMappingURL=MicroserviceClientRequestAuth.js.map