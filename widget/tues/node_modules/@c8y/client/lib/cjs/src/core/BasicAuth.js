"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var b2a_1 = require("b2a");
// this is var and not const to please typedoc https://github.com/TypeStrong/typedoc/issues/691
var secrets = new WeakMap(); // tslint:disable-line
/**
 * Allows to use Basic-Auth for Authorization to the
 * Cumulocity API.
 */
var BasicAuth = /** @class */ (function () {
    /**
     * Authenticates the given user against the given tenant.
     * @param name
     * @param password
     * @param tenant
     */
    function BasicAuth(credentials) {
        this.updateCredentials(credentials);
    }
    BasicAuth.prototype.updateCredentials = function (_a) {
        var _b = _a === void 0 ? {} : _a, tenant = _b.tenant, user = _b.user, password = _b.password, token = _b.token, tfa = _b.tfa;
        var secret = secrets.get(this) || {};
        if (user && tenant) {
            user = tenant + "/" + user;
        }
        user = user || this.user;
        password = password || secret.password;
        if (!token && user && password) {
            token = b2a_1.btoa(user + ":" + password);
        }
        if (user) {
            this.user = user;
        }
        token = token || secret.token;
        tfa = tfa || secret.tfa;
        secrets.set(this, { tfa: tfa, token: token, password: password });
        return token;
    };
    BasicAuth.prototype.getFetchOptions = function (options) {
        var secret = secrets.get(this);
        var token = secret.token, tfa = secret.tfa;
        var xsrfToken = this.getCookieValue('XSRF-TOKEN');
        var headers = __assign({ Authorization: "Basic " + (token || '') }, (xsrfToken ? { 'X-XSRF-TOKEN': xsrfToken } : undefined));
        if (tfa) {
            headers.tfatoken = tfa;
        }
        options.headers = Object.assign(headers, options.headers);
        return options;
    };
    BasicAuth.prototype.getCometdHandshake = function (config) {
        if (config === void 0) { config = {}; }
        var secret = secrets.get(this);
        var token = secret.token, tfa = secret.tfa;
        var KEY = 'com.cumulocity.authn';
        var ext = config.ext = config.ext || {};
        var auth = ext[KEY] = Object.assign(ext[KEY] || {}, { token: token, tfa: tfa });
        return config;
    };
    BasicAuth.prototype.logout = function () {
        delete this.user;
        secrets.set(this, {});
    };
    BasicAuth.prototype.getCookieValue = function (name) {
        try {
            var value = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
            return value ? value.pop() : undefined;
        }
        catch (ex) {
            return undefined;
        }
    };
    return BasicAuth;
}());
exports.BasicAuth = BasicAuth;
//# sourceMappingURL=BasicAuth.js.map