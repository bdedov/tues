var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Service } from '../core';
/**
 * @description
 * This service allows to get tenant login options.
 */
export class TenantLoginOptionsService extends Service {
    constructor() {
        super(...arguments);
        this.baseUrl = 'tenant';
        this.loginOptionsUrl = 'loginOptions';
    }
    /**
     * Gets the tenant's login options.
     *
     * **Example**
     * ```typescript
     *
     *    (async () => {
     *      const {data, res} = await tenantLoginOptionsService.detail();
     *   })();
     * ```
     */
    detail() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = this.loginOptionsUrl;
            if (this.client.tenant) {
                url = `${this.loginOptionsUrl}?tenantId=${this.client.tenant}`;
            }
            const res = yield this.fetch(url);
            const data = yield res.json();
            return { res, data };
        });
    }
}
//# sourceMappingURL=TenantLoginOptionsService.js.map