import { __awaiter, __decorate } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { HumanizeAppNamePipe, gettext, AlertService, TenantUiService, NavigatorNode, CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { sortBy, isUndefined } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { ApplicationType, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';

/** The context for evaluating default subscriptions configuration */
var DefaultSubscriptionsContext;
(function (DefaultSubscriptionsContext) {
    /** Current tenant context (only current tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["CURRENT_TENANT"] = 0] = "CURRENT_TENANT";
    /** Parent tenant context (only parent tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["PARENT_TENANT"] = 1] = "PARENT_TENANT";
})(DefaultSubscriptionsContext || (DefaultSubscriptionsContext = {}));

let DefaultSubscriptionsService = class DefaultSubscriptionsService {
    constructor(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    getSubscribableTenantApps() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentTenant = (yield this.tenantService.current()).data;
            const allApps = (yield this.applicationService.listByTenant(null, { pageSize: 2000 })).data;
            const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);
            const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);
            const filteredApps = [...ownApps];
            inheritedApps.forEach(inheritedApp => {
                if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {
                    filteredApps.push(inheritedApp);
                }
            });
            const filteredAppsWithHumanizedNames = yield Promise.all(filteredApps.map((app) => __awaiter(this, void 0, void 0, function* () {
                const humanizedName = yield this.humanizeAppNamePipe
                    .transform(app.name)
                    .pipe(debounceTime(250), take(1))
                    .toPromise();
                return { app, humanizedName };
            })));
            const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
            const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);
            return sortedApps;
        });
    }
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    getDefaultSubscriptionsEvaluatedFromParentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContext.PARENT_TENANT);
        });
    }
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    getDefaultSubscriptionsFromCurrentTenant() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDefaultSubscriptions(DefaultSubscriptionsContext.CURRENT_TENANT);
        });
    }
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveOnCreationSubscriptions(defaultSubscriptions);
            yield this.saveOnUpgradeSubscriptions(defaultSubscriptions);
        });
    }
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    getDefaultSubscriptions(contextTenant) {
        return __awaiter(this, void 0, void 0, function* () {
            let tenantOptionsParams;
            let overridable;
            switch (contextTenant) {
                case DefaultSubscriptionsContext.CURRENT_TENANT:
                    tenantOptionsParams = { evaluate: 'current' };
                    overridable = true;
                    break;
                case DefaultSubscriptionsContext.PARENT_TENANT:
                    tenantOptionsParams = { evaluate: 'inherited' };
                    overridable = false;
                    break;
            }
            const { onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices } = yield this.getTenantOptions(tenantOptionsParams);
            const onCreationSubscriptions = this.namesToPartialApps({
                appsNamesStr: onCreationApps,
                microservicesNamesStr: onCreationMicroservices
            });
            const onUpgradeAppsDefault = overridable ? null : onCreationApps;
            const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
            const onUpgradeSubscriptions = this.namesToPartialApps({
                appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                microservicesNamesStr: onUpgradeMicroservicesEnabled
                    ? onUpgradeMicroservices
                    : onUpgradeMicroservicesDefault
            });
            const defaultSubscriptions = {
                onCreationSubscriptions,
                onUpgradeSubscriptions
            };
            if (overridable) {
                defaultSubscriptions.overrideOnCreationSubscriptions =
                    onCreationApps !== null || onCreationMicroservices !== null;
                defaultSubscriptions.overrideOnUpgradeSubscriptions =
                    onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
            }
            return defaultSubscriptions;
        });
    }
    getTenantOptions(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                onCreationApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                }, null, params),
                onCreationMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                }, null, params),
                onUpgradeAppsEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                }, false, params),
                onUpgradeApps: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                }, null, params),
                onUpgradeMicroservicesEnabled: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                }, false, params),
                onUpgradeMicroservices: yield this.getTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                }, null, params)
            };
        });
    }
    saveOnCreationSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnCreationSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'default.tenant.microservices'
                });
            }
        });
    }
    saveOnUpgradeSubscriptions(defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled',
                    value: 'true'
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications',
                    value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
                yield this.setTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices',
                    value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                });
            }
            else {
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices.enabled'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.applications'
                });
                yield this.unsetTenantOption({
                    category: 'configuration',
                    key: 'on-update.tenant.microservices'
                });
            }
        });
    }
    getTenantOption(option, defaultValue = null, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let value;
            try {
                value = (yield this.tenantOptionsService.detail(option, params)).data.value;
                value = JSON.parse(value);
            }
            catch (ex) {
                value = !isUndefined(value) ? value : defaultValue;
            }
            return value;
        });
    }
    setTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.tenantOptionsService.update(option);
        });
    }
    unsetTenantOption(option) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.tenantOptionsService.delete(option);
            }
            catch (ex) {
                if (!ex || !ex.res || ex.res.status !== 404) {
                    throw ex;
                }
            }
        });
    }
    namesToPartialApps({ appsNamesStr, microservicesNamesStr }) {
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return [
            ...(appsNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({ name: name.trim() })),
            ...(microservicesNamesStr || '')
                .split(',')
                .filter(name => name.length)
                .map(name => ({
                name: name.trim(),
                type: ApplicationType.MICROSERVICE
            }))
        ];
    }
    partialAppsListToAppsNames(apps) {
        return apps
            .filter(app => app.type !== ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
    partialAppsToMicroservicesNames(apps) {
        return apps
            .filter(app => app.type === ApplicationType.MICROSERVICE)
            .map(app => app.name)
            .join(',');
    }
};
DefaultSubscriptionsService.ctorParameters = () => [
    { type: ApplicationService },
    { type: TenantService },
    { type: TenantOptionsService },
    { type: HumanizeAppNamePipe }
];
DefaultSubscriptionsService = __decorate([
    Injectable()
], DefaultSubscriptionsService);

/**
 * The component shows the main view for managing default subscriptions configuration.
 */
let DefaultSubscriptionsComponent = class DefaultSubscriptionsComponent {
    constructor(fb, defaultSubscriptionsService, alertService) {
        this.fb = fb;
        this.defaultSubscriptionsService = defaultSubscriptionsService;
        this.alertService = alertService;
    }
    /** Initializes the loading of the form and the current settings. */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            yield this.initForm();
            yield this.loadDefaultSubscriptions();
            this.loading = false;
        });
    }
    /** Loads the list of apps, builds the form and hooks value change events for override switches. */
    initForm() {
        return __awaiter(this, void 0, void 0, function* () {
            this.form = this.fb.group({
                overrideOnCreationSubscriptions: [''],
                overrideOnUpgradeSubscriptions: [''],
                appRows: this.fb.array([])
            });
            const apps = yield this.defaultSubscriptionsService.getSubscribableTenantApps();
            const appRows = this.form.controls.appRows;
            apps.forEach(app => {
                appRows.push(this.fb.group({
                    app: [app],
                    subscribedOnCreation: [''],
                    subscribedOnUpgrade: ['']
                }));
            });
            this.form
                .get('overrideOnCreationSubscriptions')
                .valueChanges.subscribe(value => this.onOverrideOnCreationSubscriptionsChange(value));
            this.form
                .get('overrideOnUpgradeSubscriptions')
                .valueChanges.subscribe(value => this.onOverrideOnUpgradeSubscriptionsChange(value));
        });
    }
    /**
     * Checks if given application row should be displayed.
     * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.
     */
    shouldShowAppRow(appRowRawValue) {
        const { subscribedOnCreation, subscribedOnUpgrade } = appRowRawValue;
        const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.form.value;
        return (subscribedOnCreation ||
            subscribedOnUpgrade ||
            overrideOnCreationSubscriptions ||
            overrideOnUpgradeSubscriptions);
    }
    /** Checks if there are no application rows to be displayed. */
    isEmptyView() {
        return !this.form
            .getRawValue()
            .appRows.some(appRowRawValue => this.shouldShowAppRow(appRowRawValue));
    }
    /**
     * Checks if given application is subscribed (present in the given list of applications).
     * @param app Application object to check.
     * @param subscribedApps The list of application objects to check against.
     * @returns True, if the application is present in the list.
     */
    isSubscribed(app, subscribedApps) {
        return subscribedApps && subscribedApps.some(subscribedApp => subscribedApp.name === app.name);
    }
    /** Saves the current value of form object to backend. */
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const defaultSubscriptions = this.getDefaultSubscriptionsForSave();
                yield this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions);
                this.alertService.success(gettext('Saved.'));
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    onOverrideOnCreationSubscriptionsChange(overrideOnCreationSubscriptions) {
        const appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnCreationSubscriptions) {
            this.enableSubscribeOnCreationCheckboxes();
            return;
        }
        this.disableSubscribeOnCreationCheckboxes();
        this.restoreSubscribeOnCreationFromParent();
    }
    enableSubscribeOnCreationCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });
        });
    }
    disableSubscribeOnCreationCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });
        });
    }
    restoreSubscribeOnCreationFromParent() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.patchValue({
                subscribedOnCreation: this.isSubscribed(appRowControl.value.app, this.parentDefaultSubscriptions.onCreationSubscriptions)
            });
        });
    }
    onOverrideOnUpgradeSubscriptionsChange(overrideOnUpgradeSubscriptions) {
        const appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnUpgradeSubscriptions) {
            this.enableSubscribeOnUpgradeCheckboxes();
            return;
        }
        this.disableSubscribeOnUpgradeCheckboxes();
        this.restoreSubscribeOnUpgradeFromParent();
    }
    enableSubscribeOnUpgradeCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });
        });
    }
    disableSubscribeOnUpgradeCheckboxes() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });
        });
    }
    restoreSubscribeOnUpgradeFromParent() {
        const appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(appRowControl => {
            appRowControl.patchValue({
                subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, this.parentDefaultSubscriptions.onUpgradeSubscriptions)
            });
        });
    }
    loadDefaultSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            this.parentDefaultSubscriptions = yield this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant();
            this.currentDefaultSubscriptions = yield this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant();
            const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.currentDefaultSubscriptions;
            const onCreationSubscriptions = overrideOnCreationSubscriptions
                ? this.currentDefaultSubscriptions.onCreationSubscriptions
                : this.parentDefaultSubscriptions.onCreationSubscriptions;
            const onUpgradeSubscriptions = overrideOnUpgradeSubscriptions
                ? this.currentDefaultSubscriptions.onUpgradeSubscriptions
                : this.parentDefaultSubscriptions.onUpgradeSubscriptions;
            this.form.patchValue({
                overrideOnCreationSubscriptions,
                overrideOnUpgradeSubscriptions
            });
            this.form.controls.appRows.controls.forEach(appRowControl => {
                appRowControl.patchValue({
                    subscribedOnCreation: this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),
                    subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)
                });
            });
        });
    }
    getDefaultSubscriptionsForSave() {
        const { value } = this.form;
        return {
            overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,
            onCreationSubscriptions: value.overrideOnCreationSubscriptions
                ? value.appRows.filter(app => app.subscribedOnCreation).map(app => app.app)
                : null,
            overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,
            onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions
                ? value.appRows.filter(app => app.subscribedOnUpgrade).map(app => app.app)
                : null
        };
    }
};
DefaultSubscriptionsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: DefaultSubscriptionsService },
    { type: AlertService }
];
DefaultSubscriptionsComponent = __decorate([
    Component({
        selector: 'c8y-default-subscriptions',
        template: "<c8y-title>{{ 'Default subscriptions' | translate }}</c8y-title>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"save()\">\n  <div class=\"card card--fullpage\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Default subscriptions</h4>\n    </div>\n    <div class=\"inner-scroll\">\n      <div class=\"card--grid grid__col--2-8-2--md grid__col--3-6-3\">\n        <div class=\"card-block large-padding bg-gray-white sticky-top separator-bottom p-b-0\">\n          <p><strong translate>Applications subscribed to a tenant on creation</strong></p>\n          <div class=\"text-center\">\n            <label class=\"c8y-switch\">\n              <input type=\"checkbox\" formControlName=\"overrideOnCreationSubscriptions\" />\n              <span></span> {{ 'Override inherited' | translate }}\n            </label>\n          </div>\n        </div>\n        <div class=\"card-block bg-white sticky-top separator-bottom\">\n          <p><b translate>Applications</b></p>\n          <p translate>\n            Configure default subscriptions in the platform, both for tenant creation\n            and for platform upgrade. To display a full list of available applications, override\n            inherited settings.\n          </p>\n        </div>\n        <div class=\"card-block large-padding bg-gray-white sticky-top separator-bottom p-b-0\">\n          <p><strong translate>Applications subscribed to a tenant on platform upgrade</strong></p>\n          <div class=\"text-center\">\n            <label class=\"c8y-switch\">\n              <input type=\"checkbox\" formControlName=\"overrideOnUpgradeSubscriptions\" />\n              <span></span> {{ 'Override inherited' | translate }}\n            </label>\n          </div>\n        </div>\n        <div class=\"card-block bg-gray-white\" *ngIf=\"loading\"></div>\n        <div class=\"card-block bg-white\" *ngIf=\"loading\">\n          <div class=\"p-r-48 p-b-24 d-inline-block\" style=\"position:relative;\">\n            <div class=\"spinner\">\n              <div class=\"rect1\"></div>\n              <div class=\"rect2\"></div>\n              <div class=\"rect3\"></div>\n              <div class=\"rect4\"></div>\n              <div class=\"rect5\"></div>\n            </div>\n          </div>\n          <span translate>Loading application subscriptions\u2026</span>\n        </div>\n        <div class=\"card-block bg-gray-white\" *ngIf=\"loading\"></div>\n        <ng-container formArrayName=\"appRows\" class=\"d-contents\">\n          <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n          <div class=\"card-block bg-white\" *ngIf=\"!loading && isEmptyView()\">\n            <div class=\"c8y-empty-state\">\n              <h1 class=\"c8y-icon c8y-icon-c8y-data c8y-icon-duocolor\"></h1>\n              <h3 translate>No application subscriptions yet.</h3>\n              <p translate>\n                Select \"Override inherited\" to define the list of subscribed applications.\n              </p>\n            </div>\n          </div>\n          <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n\n          <div\n            *ngFor=\"let appRowControl of form.get('appRows')['controls']; let i = index\"\n            class=\"d-contents\"\n          >\n            <ng-container\n              *ngIf=\"shouldShowAppRow(appRowControl.getRawValue())\"\n              formArrayName=\"{{ i }}\"\n              class=\"d-contents\"\n            >\n              <div class=\"c8y-list__item d-flex d-col bg-gray-white text-center\">\n                <div class=\"flex-item-middle\">\n                  <label\n                    class=\"c8y-checkbox d-inline-block\"\n                    [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnCreation.disabled }\"\n                  >\n                    <input type=\"checkbox\" formControlName=\"subscribedOnCreation\" />\n                    <span></span>\n                  </label>\n                </div>\n              </div>\n\n              <div class=\"c8y-list__item bg-white\">\n                <div class=\"c8y-list__item__block\">\n                  <div class=\"c8y-list__item__appicon\">\n                    <c8y-app-icon\n                      [app]=\"appRowControl.value.app\"\n                      [name]=\"appRowControl.value.app.name\"\n                      [contextPath]=\"appRowControl.value.app.contextPath\"\n                    ></c8y-app-icon>\n                  </div>\n                  <div class=\"c8y-list__item__body\">\n                    <div class=\"content-flex-50\">\n                      <div class=\"col-6\">\n                        <p\n                          class=\"text-truncate\"\n                          title=\"{{ appRowControl.value.app | humanizeAppName | async }}\"\n                        >\n                          {{ appRowControl.value.app | humanizeAppName | async }}\n                        </p>\n                        <small class=\"text-muted\">{{ appRowControl.value.app.contextPath }}</small>\n                      </div>\n                      <div class=\"col-6\">\n                        <p>\n                          <span class=\"text-label-small m-r-4\" translate>Tenant ID</span> \n                          {{ appRowControl.value.app.owner.tenant.id }}\n                        </p>\n                        <!-- TODO: uncomment when company name is available\n                          <p>\n                          <span class=\"text-label-small m-r-4\" translate>Company</span>\n                          <small class=\"text-muted\">company name</small>\n                        </p> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"c8y-list__item d-flex d-col bg-gray-white text-center\">\n                <div class=\"flex-item-middle\">\n                  <label\n                    class=\"c8y-checkbox d-inline-block\"\n                    [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnUpgrade.disabled }\"\n                  >\n                    <input type=\"checkbox\" formControlName=\"subscribedOnUpgrade\" />\n                    <span></span>\n                  </label>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"card-footer separator\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || form.pristine\"\n        title=\"{{ 'Save default subscriptions' | translate }}\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</form>\n"
    })
], DefaultSubscriptionsComponent);

let DefaultSubscriptionsGuard = class DefaultSubscriptionsGuard {
    constructor(tenantUiService) {
        this.tenantUiService = tenantUiService;
    }
    /**
     * Checks if default subscriptions feature should be active,
     * i.e. whether the current tenant is the management or an enterprise tenant.
     * **Note: the check is executed only once in the runtime.**
     *
     * @returns True, if the feature should be active.
     */
    canActivate() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.active === undefined) {
                this.active =
                    (yield this.tenantUiService.isManagementTenant()) ||
                        (yield this.tenantUiService.isEnterpriseTenant());
            }
            return this.active;
        });
    }
};
DefaultSubscriptionsGuard.ctorParameters = () => [
    { type: TenantUiService }
];
DefaultSubscriptionsGuard = __decorate([
    Injectable()
], DefaultSubscriptionsGuard);

let DefaultSubscriptionsNavigationFactory = class DefaultSubscriptionsNavigationFactory {
    constructor(defaultSubscriptionsGuard) {
        this.defaultSubscriptionsGuard = defaultSubscriptionsGuard;
        this.navNode = new NavigatorNode({
            label: gettext('Default subscriptions'),
            path: '/default-subscriptions',
            icon: 'c8y-c8y-data',
            parent: gettext('Applications'),
            priority: 1000
        });
    }
    /** Returns the navigation node if the feature is active. */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.defaultSubscriptionsGuard.canActivate()) {
                return this.navNode;
            }
        });
    }
};
DefaultSubscriptionsNavigationFactory.ctorParameters = () => [
    { type: DefaultSubscriptionsGuard }
];
DefaultSubscriptionsNavigationFactory = __decorate([
    Injectable()
], DefaultSubscriptionsNavigationFactory);

const ɵ0 = [
    {
        path: 'default-subscriptions',
        component: DefaultSubscriptionsComponent,
        canActivate: [DefaultSubscriptionsGuard]
    }
];
let DefaultSubscriptionsModule = class DefaultSubscriptionsModule {
};
DefaultSubscriptionsModule = __decorate([
    NgModule({
        imports: [CoreModule, ReactiveFormsModule],
        declarations: [DefaultSubscriptionsComponent],
        entryComponents: [DefaultSubscriptionsComponent],
        exports: [DefaultSubscriptionsComponent],
        providers: [
            DefaultSubscriptionsService,
            DefaultSubscriptionsGuard,
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: DefaultSubscriptionsNavigationFactory,
                multi: true
            },
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            }
        ]
    })
], DefaultSubscriptionsModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DefaultSubscriptionsComponent, DefaultSubscriptionsContext, DefaultSubscriptionsModule, DefaultSubscriptionsService, ɵ0, DefaultSubscriptionsGuard as ɵa, DefaultSubscriptionsNavigationFactory as ɵb };
//# sourceMappingURL=c8y-ngx-components-default-subscriptions.js.map
