import { __awaiter, __decorate, __param } from 'tslib';
import { InjectionToken, Inject, Injectable, NgModule } from '@angular/core';
import { Location } from '@angular/common';
import { isUndefined, has } from 'lodash-es';
import { Subject } from 'rxjs';
import { OperationBulkService, OperationService, InventoryService } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';

var BulkOperationType;
(function (BulkOperationType) {
    BulkOperationType["SOFTWARE"] = "software";
    BulkOperationType["FIRMWARE"] = "firmware";
    BulkOperationType["CONFIGURATION"] = "configuration";
    BulkOperationType["DEVICE_PROFILE"] = "device-profile";
})(BulkOperationType || (BulkOperationType = {}));

const baseUrl = 'devicecontrol/bulk/creation/';
const HOOK_LIST_BULK_TYPE = new InjectionToken('LIST_BULK_TYPE');
const C8Y_BULK_TYPES = [
    {
        type: BulkOperationType.CONFIGURATION,
        c8yIcon: 'cogs',
        name: gettext('Configuration update'),
        path: `${baseUrl}configuration`,
        component: undefined,
        fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],
        selected: false
    },
    {
        type: BulkOperationType.FIRMWARE,
        c8yIcon: 'c8y-firmware',
        name: gettext('Firmware update'),
        path: `${baseUrl}firmware`,
        component: undefined,
        fragments: ['c8y_Firmware'],
        selected: false
    },
    {
        type: BulkOperationType.SOFTWARE,
        c8yIcon: 'c8y-tools',
        name: gettext('Software update'),
        path: `${baseUrl}software`,
        component: undefined,
        fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
        selected: false
    },
    {
        type: BulkOperationType.DEVICE_PROFILE,
        c8yIcon: 'c8y-device-profile',
        name: gettext('Apply device profile'),
        path: `${baseUrl}device-profile`,
        component: undefined,
        fragments: ['c8y_DeviceProfile'],
        selected: false
    }
];
const ɵ0 = (flattened, current) => flattened.concat(current.fragments);
const C8Y_BULK_TYPE_FRAGMENTS = C8Y_BULK_TYPES.reduce(ɵ0, []);
let BulkOperationsService = class BulkOperationsService {
    constructor(operationBulkService, operationService, inventoryService, location, bulkTypes) {
        this.operationBulkService = operationBulkService;
        this.operationService = operationService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.bulkTypes = bulkTypes;
        this.DD_LOW_COUNT = 10;
        this.firmwareId = new Subject();
        if (bulkTypes && bulkTypes.length > 0) {
            this.bulkTypes = bulkTypes.map(type => {
                if (isUndefined(type.selected)) {
                    type.selected = false;
                }
                return type;
            });
        }
    }
    getBulkOperations(customFilter = {}) {
        const filter = Object.assign({ withTotalPages: true, withDeleted: true, pageSize: 50 }, customFilter);
        return this.operationBulkService.list(filter);
    }
    getBulkOperationById(bulkOperationId) {
        return this.operationBulkService.detail(bulkOperationId);
    }
    createBulkOperation(bulkOperation) {
        return this.operationBulkService.create(bulkOperation);
    }
    deleteBulkOperation(bulkOperationId) {
        return this.operationBulkService.delete(bulkOperationId);
    }
    updateBulkOperation(bulkOperation) {
        return this.operationBulkService.update(bulkOperation);
    }
    getOperation(id) {
        return this.operationService.detail(id);
    }
    returnToBulkOperationOverview() {
        this.location.back();
    }
    setBulkTypes(list) {
        this.bulkTypes = list;
    }
    getBulkTypes() {
        return this.bulkTypes;
    }
    setFirmwareId(id) {
        this.firmwareId.next(id);
    }
    createGroup(deviceQueryDataString) {
        const dynamicGroup = {
            name: 'Bulk operations group',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: { invisible: {} },
            c8y_DeviceQueryString: deviceQueryDataString
        };
        return this.inventoryService.create(dynamicGroup);
    }
    scheduleBulkOperation(deviceQueryString, details) {
        return __awaiter(this, void 0, void 0, function* () {
            const dynamicGroup = yield this.createGroup(deviceQueryString);
            const bulkOperation = {
                groupId: dynamicGroup.data.id,
                operationPrototype: details.prototype,
                creationRamp: details.schedule.delayInSeconds,
                startDate: details.schedule.scheduledDate.toISOString(),
                note: details.note
            };
            yield this.createBulkOperation(bulkOperation);
        });
    }
    getSingleOperationsByStatus(status, bulkOperationId) {
        const filter = {
            withTotalPages: true,
            bulkOperationId,
            status: (status && status.toUpperCase()) || ''
        };
        return this.operationService.list(filter);
    }
    createSingleOperation(operation) {
        return this.operationService.create(operation);
    }
    updateSingleOperation(partialUpdateObject) {
        return this.operationService.update(partialUpdateObject);
    }
    getManagedObject(deviceId) {
        return this.inventoryService.detail(deviceId);
    }
    retrieveBulkOperationType(operation) {
        let type;
        C8Y_BULK_TYPES.some(t => {
            if (t.fragments.some(fragment => has(operation, fragment))) {
                type = t.type;
                return true;
            }
        });
        return type;
    }
};
BulkOperationsService.ctorParameters = () => [
    { type: OperationBulkService },
    { type: OperationService },
    { type: InventoryService },
    { type: Location },
    { type: Array, decorators: [{ type: Inject, args: [HOOK_LIST_BULK_TYPE,] }] }
];
BulkOperationsService = __decorate([
    Injectable(),
    __param(4, Inject(HOOK_LIST_BULK_TYPE))
], BulkOperationsService);

const ɵ0$1 = C8Y_BULK_TYPES;
/**
 * This module provides a shared bulk operations service.
 */
let BulkOperationsServiceModule = class BulkOperationsServiceModule {
};
BulkOperationsServiceModule = __decorate([
    NgModule({
        imports: [],
        providers: [BulkOperationsService, { provide: HOOK_LIST_BULK_TYPE, useValue: ɵ0$1 }]
    })
], BulkOperationsServiceModule);

/**
 * Generated bundle index. Do not edit.
 */

export { BulkOperationType, BulkOperationsService, BulkOperationsServiceModule, C8Y_BULK_TYPES, C8Y_BULK_TYPE_FRAGMENTS, HOOK_LIST_BULK_TYPE, baseUrl, ɵ0$1 as ɵ0 };
//# sourceMappingURL=c8y-ngx-components-operations-bulk-operations-service.js.map
