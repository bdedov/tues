{"version":3,"file":"c8y-ngx-components-default-subscriptions.js","sources":["ng://@c8y/ngx-components/default-subscriptions/default-subscriptions.model.ts","ng://@c8y/ngx-components/default-subscriptions/default-subscriptions.service.ts","ng://@c8y/ngx-components/default-subscriptions/default-subscriptions.component.ts","ng://@c8y/ngx-components/default-subscriptions/default-subscriptions.guard.ts","ng://@c8y/ngx-components/default-subscriptions/default-subscriptions-navigation.factory.ts","ng://@c8y/ngx-components/default-subscriptions/default-subscriptions.module.ts","ng://@c8y/ngx-components/default-subscriptions/c8y-ngx-components-default-subscriptions.ts"],"sourcesContent":["import { IApplication } from '@c8y/client';\n\n/** The list of partial application objects. */\nexport type PartialAppsList = Array<Partial<IApplication>>;\n\n/** The interface for default subscriptions configuration. */\nexport interface DefaultSubscriptions {\n  /** Whether the list of on tenant creation subscriptions is overridden in the current tenant. Won't be defined for inherited configuration. */\n  overrideOnCreationSubscriptions?: boolean;\n  /** The list of applications subscribed to new tenants on creation. */\n  onCreationSubscriptions: PartialAppsList;\n  /** Whether the list of on platform upgrade subscriptions is overridden in the current tenant. Won't be defined for inherited configuration. */\n  overrideOnUpgradeSubscriptions?: boolean;\n  /** The list of applications subscribed to existing tenants on platform upgrade. */\n  onUpgradeSubscriptions: PartialAppsList;\n}\n\n/** The context for evaluating default subscriptions configuration */\nexport enum DefaultSubscriptionsContext {\n  /** Current tenant context (only current tenant options are taken into account). */\n  CURRENT_TENANT,\n  /** Parent tenant context (only parent tenant options are taken into account). */\n  PARENT_TENANT\n}\n","import { Injectable } from '@angular/core';\nimport { isUndefined, sortBy } from 'lodash-es';\nimport { debounceTime, take } from 'rxjs/operators';\n\nimport {\n  IApplication,\n  ApplicationType,\n  ApplicationService,\n  ISystemOption,\n  TenantService,\n  TenantOptionsService\n} from '@c8y/client';\nimport { HumanizeAppNamePipe } from '@c8y/ngx-components';\n\nimport {\n  PartialAppsList,\n  DefaultSubscriptions,\n  DefaultSubscriptionsContext as DefaultSubscriptionsContextTenant\n} from './default-subscriptions.model';\n\n@Injectable()\nexport class DefaultSubscriptionsService {\n  constructor(\n    private applicationService: ApplicationService,\n    private tenantService: TenantService,\n    private tenantOptionsService: TenantOptionsService,\n    private humanizeAppNamePipe: HumanizeAppNamePipe\n  ) {}\n\n  /**\n   * Gets the list of applications which can be used in default subscriptions, i.e.:\n   * - current tenant's all own applications,\n   * - inherited applications, which do not have the same names as current tenant's own apps.\n   * The list is sorted alphabetically by humanized app name and contains up to 2000 items.\n   * @returns The list of applications, which can be used in default subscriptions.\n   */\n  async getSubscribableTenantApps(): Promise<IApplication[]> {\n    const currentTenant = (await this.tenantService.current()).data;\n\n    const allApps = (await this.applicationService.listByTenant(null, { pageSize: 2000 })).data;\n    const ownApps = allApps.filter(app => app.owner.tenant.id === currentTenant.name);\n    const inheritedApps = allApps.filter(app => app.owner.tenant.id !== currentTenant.name);\n\n    const filteredApps: IApplication[] = [...ownApps];\n    inheritedApps.forEach(inheritedApp => {\n      if (!filteredApps.some(filteredApp => filteredApp.name === inheritedApp.name)) {\n        filteredApps.push(inheritedApp);\n      }\n    });\n\n    const filteredAppsWithHumanizedNames = await Promise.all(\n      filteredApps.map(async app => {\n        const humanizedName = await this.humanizeAppNamePipe\n          .transform(app.name)\n          .pipe(\n            debounceTime(250),\n            take(1)\n          )\n          .toPromise();\n        return { app, humanizedName };\n      })\n    );\n    const sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);\n    const sortedApps = sortedAppsWithHumanizedNames.map(({ app }) => app);\n\n    return sortedApps;\n  }\n\n  /**\n   * Gets the default subscriptions configuration inherited from parent tenant.\n   * @returns The default subscriptions object with settings from parent tenant.\n   */\n  async getDefaultSubscriptionsEvaluatedFromParentTenant(): Promise<DefaultSubscriptions> {\n    return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.PARENT_TENANT);\n  }\n\n  /**\n   * Gets the default subscriptions configuration from the current tenant.\n   * @returns The default subscriptions object with settings from the current tenant.\n   */\n  async getDefaultSubscriptionsFromCurrentTenant(): Promise<DefaultSubscriptions> {\n    return this.getDefaultSubscriptions(DefaultSubscriptionsContextTenant.CURRENT_TENANT);\n  }\n\n  /**\n   * Saves given default subscriptions configuration to the current tenant\n   * (either sets, updates, or deletes corresponding tenant options).\n   * @param defaultSubscriptions The default subscriptions configuration to be saved.\n   */\n  async saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions: DefaultSubscriptions) {\n    await this.saveOnCreationSubscriptions(defaultSubscriptions);\n    await this.saveOnUpgradeSubscriptions(defaultSubscriptions);\n  }\n\n  /**\n   * Gets default subscriptions in the context of current or parent tenant.\n   * @param contextTenant Tells whether to use current or parent tenant as context.\n   */\n  private async getDefaultSubscriptions(\n    contextTenant: DefaultSubscriptionsContextTenant\n  ): Promise<DefaultSubscriptions> {\n    let tenantOptionsParams: object;\n    let overridable: boolean;\n\n    switch (contextTenant) {\n      case DefaultSubscriptionsContextTenant.CURRENT_TENANT:\n        tenantOptionsParams = { evaluate: 'current' };\n        overridable = true;\n        break;\n\n      case DefaultSubscriptionsContextTenant.PARENT_TENANT:\n        tenantOptionsParams = { evaluate: 'inherited' };\n        overridable = false;\n        break;\n    }\n\n    const {\n      onCreationApps,\n      onCreationMicroservices,\n      onUpgradeAppsEnabled,\n      onUpgradeApps,\n      onUpgradeMicroservicesEnabled,\n      onUpgradeMicroservices\n    } = await this.getTenantOptions(tenantOptionsParams);\n\n    const onCreationSubscriptions = this.namesToPartialApps({\n      appsNamesStr: onCreationApps,\n      microservicesNamesStr: onCreationMicroservices\n    });\n\n    const onUpgradeAppsDefault = overridable ? null : onCreationApps;\n    const onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;\n    const onUpgradeSubscriptions = this.namesToPartialApps({\n      appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,\n      microservicesNamesStr: onUpgradeMicroservicesEnabled\n        ? onUpgradeMicroservices\n        : onUpgradeMicroservicesDefault\n    });\n\n    const defaultSubscriptions: DefaultSubscriptions = {\n      onCreationSubscriptions,\n      onUpgradeSubscriptions\n    };\n\n    if (overridable) {\n      defaultSubscriptions.overrideOnCreationSubscriptions =\n        onCreationApps !== null || onCreationMicroservices !== null;\n      defaultSubscriptions.overrideOnUpgradeSubscriptions =\n        onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;\n    }\n\n    return defaultSubscriptions;\n  }\n\n  private async getTenantOptions(params = {}) {\n    return {\n      onCreationApps: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'default.tenant.applications'\n        },\n        null,\n        params\n      ),\n      onCreationMicroservices: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'default.tenant.microservices'\n        },\n        null,\n        params\n      ),\n      onUpgradeAppsEnabled: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.applications.enabled'\n        },\n        false,\n        params\n      ),\n      onUpgradeApps: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.applications'\n        },\n        null,\n        params\n      ),\n      onUpgradeMicroservicesEnabled: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.microservices.enabled'\n        },\n        false,\n        params\n      ),\n      onUpgradeMicroservices: await this.getTenantOption(\n        {\n          category: 'configuration',\n          key: 'on-update.tenant.microservices'\n        },\n        null,\n        params\n      )\n    };\n  }\n\n  private async saveOnCreationSubscriptions(defaultSubscriptions: DefaultSubscriptions) {\n    if (defaultSubscriptions.overrideOnCreationSubscriptions) {\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.applications',\n        value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.microservices',\n        value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)\n      });\n    } else {\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.applications'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'default.tenant.microservices'\n      });\n    }\n  }\n\n  private async saveOnUpgradeSubscriptions(defaultSubscriptions: DefaultSubscriptions) {\n    if (defaultSubscriptions.overrideOnUpgradeSubscriptions) {\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications.enabled',\n        value: 'true'\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices.enabled',\n        value: 'true'\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications',\n        value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)\n      });\n      await this.setTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices',\n        value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)\n      });\n    } else {\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications.enabled'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices.enabled'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.applications'\n      });\n      await this.unsetTenantOption({\n        category: 'configuration',\n        key: 'on-update.tenant.microservices'\n      });\n    }\n  }\n\n  private async getTenantOption(option: ISystemOption, defaultValue = null, params = {}) {\n    let value;\n    try {\n      value = (await this.tenantOptionsService.detail(option, params)).data.value;\n      value = JSON.parse(value);\n    } catch (ex) {\n      value = !isUndefined(value) ? value : defaultValue;\n    }\n    return value;\n  }\n\n  private async setTenantOption(option: ISystemOption) {\n    return this.tenantOptionsService.update(option);\n  }\n\n  private async unsetTenantOption(option: ISystemOption) {\n    try {\n      await this.tenantOptionsService.delete(option);\n    } catch (ex) {\n      if (!ex || !ex.res || ex.res.status !== 404) {\n        throw ex;\n      }\n    }\n  }\n\n  private namesToPartialApps({\n    appsNamesStr,\n    microservicesNamesStr\n  }: {\n    appsNamesStr?: string;\n    microservicesNamesStr?: string;\n  }): PartialAppsList {\n    if (appsNamesStr === null && microservicesNamesStr === null) {\n      return null;\n    }\n\n    return [\n      ...(appsNamesStr || '')\n        .split(',')\n        .filter(name => name.length)\n        .map(name => ({ name: name.trim() })),\n      ...(microservicesNamesStr || '')\n        .split(',')\n        .filter(name => name.length)\n        .map(name => ({\n          name: name.trim(),\n          type: ApplicationType.MICROSERVICE\n        }))\n    ];\n  }\n\n  private partialAppsListToAppsNames(apps: PartialAppsList): string {\n    return apps\n      .filter(app => app.type !== ApplicationType.MICROSERVICE)\n      .map(app => app.name)\n      .join(',');\n  }\n\n  private partialAppsToMicroservicesNames(apps: PartialAppsList): string {\n    return apps\n      .filter(app => app.type === ApplicationType.MICROSERVICE)\n      .map(app => app.name)\n      .join(',');\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { IApplication } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { DefaultSubscriptions, PartialAppsList } from './default-subscriptions.model';\nimport { DefaultSubscriptionsService } from './default-subscriptions.service';\n\n/**\n * The component shows the main view for managing default subscriptions configuration.\n */\n@Component({\n  selector: 'c8y-default-subscriptions',\n  templateUrl: './default-subscriptions.component.html'\n})\nexport class DefaultSubscriptionsComponent {\n  /** Default subscriptions inherited from parent tenant. */\n  parentDefaultSubscriptions: DefaultSubscriptions;\n  /** Default subscriptions defined in the current tenant. */\n  currentDefaultSubscriptions: DefaultSubscriptions;\n  /** Form object. */\n  form: FormGroup;\n  /** Whether the configuration is being loaded. */\n  loading: boolean;\n\n  constructor(\n    private fb: FormBuilder,\n    private defaultSubscriptionsService: DefaultSubscriptionsService,\n    private alertService: AlertService\n  ) {}\n\n  /** Initializes the loading of the form and the current settings. */\n  async ngOnInit() {\n    this.loading = true;\n    await this.initForm();\n    await this.loadDefaultSubscriptions();\n    this.loading = false;\n  }\n\n  /** Loads the list of apps, builds the form and hooks value change events for override switches. */\n  async initForm() {\n    this.form = this.fb.group({\n      overrideOnCreationSubscriptions: [''],\n      overrideOnUpgradeSubscriptions: [''],\n      appRows: this.fb.array([])\n    });\n\n    const apps = await this.defaultSubscriptionsService.getSubscribableTenantApps();\n    const appRows = this.form.controls.appRows as FormArray;\n    apps.forEach(app => {\n      appRows.push(\n        this.fb.group({\n          app: [app],\n          subscribedOnCreation: [''],\n          subscribedOnUpgrade: ['']\n        })\n      );\n    });\n\n    this.form\n      .get('overrideOnCreationSubscriptions')\n      .valueChanges.subscribe(value => this.onOverrideOnCreationSubscriptionsChange(value));\n\n    this.form\n      .get('overrideOnUpgradeSubscriptions')\n      .valueChanges.subscribe(value => this.onOverrideOnUpgradeSubscriptionsChange(value));\n  }\n\n  /**\n   * Checks if given application row should be displayed.\n   * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.\n   */\n  shouldShowAppRow(appRowRawValue): boolean {\n    const { subscribedOnCreation, subscribedOnUpgrade } = appRowRawValue;\n    const { overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions } = this.form.value;\n\n    return (\n      subscribedOnCreation ||\n      subscribedOnUpgrade ||\n      overrideOnCreationSubscriptions ||\n      overrideOnUpgradeSubscriptions\n    );\n  }\n\n  /** Checks if there are no application rows to be displayed. */\n  isEmptyView(): boolean {\n    return !this.form\n      .getRawValue()\n      .appRows.some(appRowRawValue => this.shouldShowAppRow(appRowRawValue));\n  }\n\n  /**\n   * Checks if given application is subscribed (present in the given list of applications).\n   * @param app Application object to check.\n   * @param subscribedApps The list of application objects to check against.\n   * @returns True, if the application is present in the list.\n   */\n  isSubscribed(app: IApplication, subscribedApps: PartialAppsList): boolean {\n    return subscribedApps && subscribedApps.some(subscribedApp => subscribedApp.name === app.name);\n  }\n\n  /** Saves the current value of form object to backend. */\n  async save() {\n    try {\n      const defaultSubscriptions = this.getDefaultSubscriptionsForSave();\n      await this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(\n        defaultSubscriptions\n      );\n      this.alertService.success(gettext('Saved.'));\n    } catch (ex) {\n      this.alertService.addServerFailure(ex);\n    }\n  }\n\n  private onOverrideOnCreationSubscriptionsChange(overrideOnCreationSubscriptions: boolean) {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    if (overrideOnCreationSubscriptions) {\n      this.enableSubscribeOnCreationCheckboxes();\n      return;\n    }\n    this.disableSubscribeOnCreationCheckboxes();\n    this.restoreSubscribeOnCreationFromParent();\n  }\n\n  private enableSubscribeOnCreationCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });\n    });\n  }\n\n  private disableSubscribeOnCreationCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });\n    });\n  }\n\n  private restoreSubscribeOnCreationFromParent() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnCreation: this.isSubscribed(\n          appRowControl.value.app,\n          this.parentDefaultSubscriptions.onCreationSubscriptions\n        )\n      });\n    });\n  }\n\n  private onOverrideOnUpgradeSubscriptionsChange(overrideOnUpgradeSubscriptions: boolean) {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    if (overrideOnUpgradeSubscriptions) {\n      this.enableSubscribeOnUpgradeCheckboxes();\n      return;\n    }\n    this.disableSubscribeOnUpgradeCheckboxes();\n    this.restoreSubscribeOnUpgradeFromParent();\n  }\n\n  private enableSubscribeOnUpgradeCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });\n    });\n  }\n\n  private disableSubscribeOnUpgradeCheckboxes() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });\n    });\n  }\n\n  private restoreSubscribeOnUpgradeFromParent() {\n    const appRowsControls = (this.form.controls.appRows as FormArray).controls;\n    appRowsControls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnUpgrade: this.isSubscribed(\n          appRowControl.value.app,\n          this.parentDefaultSubscriptions.onUpgradeSubscriptions\n        )\n      });\n    });\n  }\n\n  private async loadDefaultSubscriptions() {\n    this.parentDefaultSubscriptions = await this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant();\n    this.currentDefaultSubscriptions = await this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant();\n\n    const {\n      overrideOnCreationSubscriptions,\n      overrideOnUpgradeSubscriptions\n    } = this.currentDefaultSubscriptions;\n    const onCreationSubscriptions = overrideOnCreationSubscriptions\n      ? this.currentDefaultSubscriptions.onCreationSubscriptions\n      : this.parentDefaultSubscriptions.onCreationSubscriptions;\n    const onUpgradeSubscriptions = overrideOnUpgradeSubscriptions\n      ? this.currentDefaultSubscriptions.onUpgradeSubscriptions\n      : this.parentDefaultSubscriptions.onUpgradeSubscriptions;\n\n    this.form.patchValue({\n      overrideOnCreationSubscriptions,\n      overrideOnUpgradeSubscriptions\n    });\n    (this.form.controls.appRows as FormArray).controls.forEach(appRowControl => {\n      appRowControl.patchValue({\n        subscribedOnCreation: this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),\n        subscribedOnUpgrade: this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)\n      });\n    });\n  }\n\n  private getDefaultSubscriptionsForSave(): DefaultSubscriptions {\n    const { value } = this.form;\n    return {\n      overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,\n      onCreationSubscriptions: value.overrideOnCreationSubscriptions\n        ? value.appRows.filter(app => app.subscribedOnCreation).map(app => app.app)\n        : null,\n      overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,\n      onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions\n        ? value.appRows.filter(app => app.subscribedOnUpgrade).map(app => app.app)\n        : null\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { TenantUiService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class DefaultSubscriptionsGuard implements CanActivate {\n  private active: boolean;\n\n  constructor(private tenantUiService: TenantUiService) {}\n\n  /**\n   * Checks if default subscriptions feature should be active,\n   * i.e. whether the current tenant is the management or an enterprise tenant.\n   * **Note: the check is executed only once in the runtime.**\n   *\n   * @returns True, if the feature should be active.\n   */\n  async canActivate(): Promise<boolean> {\n    if (this.active === undefined) {\n      this.active =\n        (await this.tenantUiService.isManagementTenant()) ||\n        (await this.tenantUiService.isEnterpriseTenant());\n    }\n    return this.active;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { DefaultSubscriptionsGuard } from './default-subscriptions.guard';\n\n@Injectable()\nexport class DefaultSubscriptionsNavigationFactory implements NavigatorNodeFactory {\n  private navNode = new NavigatorNode({\n    label: gettext('Default subscriptions'),\n    path: '/default-subscriptions',\n    icon: 'c8y-c8y-data',\n    parent: gettext('Applications'),\n    priority: 1000\n  });\n\n  constructor(private defaultSubscriptionsGuard: DefaultSubscriptionsGuard) {}\n\n  /** Returns the navigation node if the feature is active. */\n  async get(): Promise<NavigatorNode> {\n    if (await this.defaultSubscriptionsGuard.canActivate()) {\n      return this.navNode;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE, Route } from '@c8y/ngx-components';\n\nimport { DefaultSubscriptionsComponent } from './default-subscriptions.component';\nimport { DefaultSubscriptionsService } from './default-subscriptions.service';\nimport { DefaultSubscriptionsGuard } from './default-subscriptions.guard';\nimport { DefaultSubscriptionsNavigationFactory } from './default-subscriptions-navigation.factory';\n\n@NgModule({\n  imports: [CoreModule, ReactiveFormsModule],\n  declarations: [DefaultSubscriptionsComponent],\n  entryComponents: [DefaultSubscriptionsComponent],\n  exports: [DefaultSubscriptionsComponent],\n  providers: [\n    DefaultSubscriptionsService,\n    DefaultSubscriptionsGuard,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: DefaultSubscriptionsNavigationFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_ONCE_ROUTE,\n      useValue: [\n        {\n          path: 'default-subscriptions',\n          component: DefaultSubscriptionsComponent,\n          canActivate: [DefaultSubscriptionsGuard]\n        }\n      ] as Route[],\n      multi: true\n    }\n  ]\n})\nexport class DefaultSubscriptionsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DefaultSubscriptionsNavigationFactory as ɵb} from './default-subscriptions-navigation.factory';\nexport {DefaultSubscriptionsGuard as ɵa} from './default-subscriptions.guard';"],"names":["DefaultSubscriptionsContextTenant"],"mappings":"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"}