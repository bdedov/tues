import { __awaiter, __generator, __spread, __decorate } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { HumanizeAppNamePipe, gettext, AlertService, TenantUiService, NavigatorNode, CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { sortBy, isUndefined } from 'lodash-es';
import { debounceTime, take } from 'rxjs/operators';
import { ApplicationType, ApplicationService, TenantService, TenantOptionsService } from '@c8y/client';

/** The context for evaluating default subscriptions configuration */
var DefaultSubscriptionsContext;
(function (DefaultSubscriptionsContext) {
    /** Current tenant context (only current tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["CURRENT_TENANT"] = 0] = "CURRENT_TENANT";
    /** Parent tenant context (only parent tenant options are taken into account). */
    DefaultSubscriptionsContext[DefaultSubscriptionsContext["PARENT_TENANT"] = 1] = "PARENT_TENANT";
})(DefaultSubscriptionsContext || (DefaultSubscriptionsContext = {}));

var DefaultSubscriptionsService = /** @class */ (function () {
    function DefaultSubscriptionsService(applicationService, tenantService, tenantOptionsService, humanizeAppNamePipe) {
        this.applicationService = applicationService;
        this.tenantService = tenantService;
        this.tenantOptionsService = tenantOptionsService;
        this.humanizeAppNamePipe = humanizeAppNamePipe;
    }
    /**
     * Gets the list of applications which can be used in default subscriptions, i.e.:
     * - current tenant's all own applications,
     * - inherited applications, which do not have the same names as current tenant's own apps.
     * The list is sorted alphabetically by humanized app name and contains up to 2000 items.
     * @returns The list of applications, which can be used in default subscriptions.
     */
    DefaultSubscriptionsService.prototype.getSubscribableTenantApps = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentTenant, allApps, ownApps, inheritedApps, filteredApps, filteredAppsWithHumanizedNames, sortedAppsWithHumanizedNames, sortedApps;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tenantService.current()];
                    case 1:
                        currentTenant = (_a.sent()).data;
                        return [4 /*yield*/, this.applicationService.listByTenant(null, { pageSize: 2000 })];
                    case 2:
                        allApps = (_a.sent()).data;
                        ownApps = allApps.filter(function (app) { return app.owner.tenant.id === currentTenant.name; });
                        inheritedApps = allApps.filter(function (app) { return app.owner.tenant.id !== currentTenant.name; });
                        filteredApps = __spread(ownApps);
                        inheritedApps.forEach(function (inheritedApp) {
                            if (!filteredApps.some(function (filteredApp) { return filteredApp.name === inheritedApp.name; })) {
                                filteredApps.push(inheritedApp);
                            }
                        });
                        return [4 /*yield*/, Promise.all(filteredApps.map(function (app) { return __awaiter(_this, void 0, void 0, function () {
                                var humanizedName;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.humanizeAppNamePipe
                                                .transform(app.name)
                                                .pipe(debounceTime(250), take(1))
                                                .toPromise()];
                                        case 1:
                                            humanizedName = _a.sent();
                                            return [2 /*return*/, { app: app, humanizedName: humanizedName }];
                                    }
                                });
                            }); }))];
                    case 3:
                        filteredAppsWithHumanizedNames = _a.sent();
                        sortedAppsWithHumanizedNames = sortBy(filteredAppsWithHumanizedNames, ['humanizedName']);
                        sortedApps = sortedAppsWithHumanizedNames.map(function (_a) {
                            var app = _a.app;
                            return app;
                        });
                        return [2 /*return*/, sortedApps];
                }
            });
        });
    };
    /**
     * Gets the default subscriptions configuration inherited from parent tenant.
     * @returns The default subscriptions object with settings from parent tenant.
     */
    DefaultSubscriptionsService.prototype.getDefaultSubscriptionsEvaluatedFromParentTenant = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getDefaultSubscriptions(DefaultSubscriptionsContext.PARENT_TENANT)];
            });
        });
    };
    /**
     * Gets the default subscriptions configuration from the current tenant.
     * @returns The default subscriptions object with settings from the current tenant.
     */
    DefaultSubscriptionsService.prototype.getDefaultSubscriptionsFromCurrentTenant = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getDefaultSubscriptions(DefaultSubscriptionsContext.CURRENT_TENANT)];
            });
        });
    };
    /**
     * Saves given default subscriptions configuration to the current tenant
     * (either sets, updates, or deletes corresponding tenant options).
     * @param defaultSubscriptions The default subscriptions configuration to be saved.
     */
    DefaultSubscriptionsService.prototype.saveDefaultSubscriptionsToCurrentTenant = function (defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveOnCreationSubscriptions(defaultSubscriptions)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.saveOnUpgradeSubscriptions(defaultSubscriptions)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets default subscriptions in the context of current or parent tenant.
     * @param contextTenant Tells whether to use current or parent tenant as context.
     */
    DefaultSubscriptionsService.prototype.getDefaultSubscriptions = function (contextTenant) {
        return __awaiter(this, void 0, void 0, function () {
            var tenantOptionsParams, overridable, _a, onCreationApps, onCreationMicroservices, onUpgradeAppsEnabled, onUpgradeApps, onUpgradeMicroservicesEnabled, onUpgradeMicroservices, onCreationSubscriptions, onUpgradeAppsDefault, onUpgradeMicroservicesDefault, onUpgradeSubscriptions, defaultSubscriptions;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        switch (contextTenant) {
                            case DefaultSubscriptionsContext.CURRENT_TENANT:
                                tenantOptionsParams = { evaluate: 'current' };
                                overridable = true;
                                break;
                            case DefaultSubscriptionsContext.PARENT_TENANT:
                                tenantOptionsParams = { evaluate: 'inherited' };
                                overridable = false;
                                break;
                        }
                        return [4 /*yield*/, this.getTenantOptions(tenantOptionsParams)];
                    case 1:
                        _a = _b.sent(), onCreationApps = _a.onCreationApps, onCreationMicroservices = _a.onCreationMicroservices, onUpgradeAppsEnabled = _a.onUpgradeAppsEnabled, onUpgradeApps = _a.onUpgradeApps, onUpgradeMicroservicesEnabled = _a.onUpgradeMicroservicesEnabled, onUpgradeMicroservices = _a.onUpgradeMicroservices;
                        onCreationSubscriptions = this.namesToPartialApps({
                            appsNamesStr: onCreationApps,
                            microservicesNamesStr: onCreationMicroservices
                        });
                        onUpgradeAppsDefault = overridable ? null : onCreationApps;
                        onUpgradeMicroservicesDefault = overridable ? null : onCreationMicroservices;
                        onUpgradeSubscriptions = this.namesToPartialApps({
                            appsNamesStr: onUpgradeAppsEnabled ? onUpgradeApps : onUpgradeAppsDefault,
                            microservicesNamesStr: onUpgradeMicroservicesEnabled
                                ? onUpgradeMicroservices
                                : onUpgradeMicroservicesDefault
                        });
                        defaultSubscriptions = {
                            onCreationSubscriptions: onCreationSubscriptions,
                            onUpgradeSubscriptions: onUpgradeSubscriptions
                        };
                        if (overridable) {
                            defaultSubscriptions.overrideOnCreationSubscriptions =
                                onCreationApps !== null || onCreationMicroservices !== null;
                            defaultSubscriptions.overrideOnUpgradeSubscriptions =
                                onUpgradeAppsEnabled || onUpgradeMicroservicesEnabled;
                        }
                        return [2 /*return*/, defaultSubscriptions];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.getTenantOptions = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.applications'
                            }, null, params)];
                    case 1:
                        _a.onCreationApps = _b.sent();
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.microservices'
                            }, null, params)];
                    case 2:
                        _a.onCreationMicroservices = _b.sent();
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications.enabled'
                            }, false, params)];
                    case 3:
                        _a.onUpgradeAppsEnabled = _b.sent();
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications'
                            }, null, params)];
                    case 4:
                        _a.onUpgradeApps = _b.sent();
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices.enabled'
                            }, false, params)];
                    case 5:
                        _a.onUpgradeMicroservicesEnabled = _b.sent();
                        return [4 /*yield*/, this.getTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices'
                            }, null, params)];
                    case 6: return [2 /*return*/, (_a.onUpgradeMicroservices = _b.sent(),
                            _a)];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.saveOnCreationSubscriptions = function (defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!defaultSubscriptions.overrideOnCreationSubscriptions) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.applications',
                                value: this.partialAppsListToAppsNames(defaultSubscriptions.onCreationSubscriptions)
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.microservices',
                                value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onCreationSubscriptions)
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3: return [4 /*yield*/, this.unsetTenantOption({
                            category: 'configuration',
                            key: 'default.tenant.applications'
                        })];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'default.tenant.microservices'
                            })];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.saveOnUpgradeSubscriptions = function (defaultSubscriptions) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!defaultSubscriptions.overrideOnUpgradeSubscriptions) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications.enabled',
                                value: 'true'
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices.enabled',
                                value: 'true'
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications',
                                value: this.partialAppsListToAppsNames(defaultSubscriptions.onUpgradeSubscriptions)
                            })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.setTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices',
                                value: this.partialAppsToMicroservicesNames(defaultSubscriptions.onUpgradeSubscriptions)
                            })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 5: return [4 /*yield*/, this.unsetTenantOption({
                            category: 'configuration',
                            key: 'on-update.tenant.applications.enabled'
                        })];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices.enabled'
                            })];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.applications'
                            })];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.unsetTenantOption({
                                category: 'configuration',
                                key: 'on-update.tenant.microservices'
                            })];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.getTenantOption = function (option, defaultValue, params) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var value, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tenantOptionsService.detail(option, params)];
                    case 1:
                        value = (_a.sent()).data.value;
                        value = JSON.parse(value);
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        value = !isUndefined(value) ? value : defaultValue;
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, value];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.setTenantOption = function (option) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.tenantOptionsService.update(option)];
            });
        });
    };
    DefaultSubscriptionsService.prototype.unsetTenantOption = function (option) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tenantOptionsService.delete(option)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_2 = _a.sent();
                        if (!ex_2 || !ex_2.res || ex_2.res.status !== 404) {
                            throw ex_2;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsService.prototype.namesToPartialApps = function (_a) {
        var appsNamesStr = _a.appsNamesStr, microservicesNamesStr = _a.microservicesNamesStr;
        if (appsNamesStr === null && microservicesNamesStr === null) {
            return null;
        }
        return __spread((appsNamesStr || '')
            .split(',')
            .filter(function (name) { return name.length; })
            .map(function (name) { return ({ name: name.trim() }); }), (microservicesNamesStr || '')
            .split(',')
            .filter(function (name) { return name.length; })
            .map(function (name) { return ({
            name: name.trim(),
            type: ApplicationType.MICROSERVICE
        }); }));
    };
    DefaultSubscriptionsService.prototype.partialAppsListToAppsNames = function (apps) {
        return apps
            .filter(function (app) { return app.type !== ApplicationType.MICROSERVICE; })
            .map(function (app) { return app.name; })
            .join(',');
    };
    DefaultSubscriptionsService.prototype.partialAppsToMicroservicesNames = function (apps) {
        return apps
            .filter(function (app) { return app.type === ApplicationType.MICROSERVICE; })
            .map(function (app) { return app.name; })
            .join(',');
    };
    DefaultSubscriptionsService.ctorParameters = function () { return [
        { type: ApplicationService },
        { type: TenantService },
        { type: TenantOptionsService },
        { type: HumanizeAppNamePipe }
    ]; };
    DefaultSubscriptionsService = __decorate([
        Injectable()
    ], DefaultSubscriptionsService);
    return DefaultSubscriptionsService;
}());

/**
 * The component shows the main view for managing default subscriptions configuration.
 */
var DefaultSubscriptionsComponent = /** @class */ (function () {
    function DefaultSubscriptionsComponent(fb, defaultSubscriptionsService, alertService) {
        this.fb = fb;
        this.defaultSubscriptionsService = defaultSubscriptionsService;
        this.alertService = alertService;
    }
    /** Initializes the loading of the form and the current settings. */
    DefaultSubscriptionsComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.loading = true;
                        return [4 /*yield*/, this.initForm()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loadDefaultSubscriptions()];
                    case 2:
                        _a.sent();
                        this.loading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Loads the list of apps, builds the form and hooks value change events for override switches. */
    DefaultSubscriptionsComponent.prototype.initForm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var apps, appRows;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.form = this.fb.group({
                            overrideOnCreationSubscriptions: [''],
                            overrideOnUpgradeSubscriptions: [''],
                            appRows: this.fb.array([])
                        });
                        return [4 /*yield*/, this.defaultSubscriptionsService.getSubscribableTenantApps()];
                    case 1:
                        apps = _a.sent();
                        appRows = this.form.controls.appRows;
                        apps.forEach(function (app) {
                            appRows.push(_this.fb.group({
                                app: [app],
                                subscribedOnCreation: [''],
                                subscribedOnUpgrade: ['']
                            }));
                        });
                        this.form
                            .get('overrideOnCreationSubscriptions')
                            .valueChanges.subscribe(function (value) { return _this.onOverrideOnCreationSubscriptionsChange(value); });
                        this.form
                            .get('overrideOnUpgradeSubscriptions')
                            .valueChanges.subscribe(function (value) { return _this.onOverrideOnUpgradeSubscriptionsChange(value); });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if given application row should be displayed.
     * The row is displayed when any of its checkboxes is selected or any of the lists is being overridden.
     */
    DefaultSubscriptionsComponent.prototype.shouldShowAppRow = function (appRowRawValue) {
        var subscribedOnCreation = appRowRawValue.subscribedOnCreation, subscribedOnUpgrade = appRowRawValue.subscribedOnUpgrade;
        var _a = this.form.value, overrideOnCreationSubscriptions = _a.overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions = _a.overrideOnUpgradeSubscriptions;
        return (subscribedOnCreation ||
            subscribedOnUpgrade ||
            overrideOnCreationSubscriptions ||
            overrideOnUpgradeSubscriptions);
    };
    /** Checks if there are no application rows to be displayed. */
    DefaultSubscriptionsComponent.prototype.isEmptyView = function () {
        var _this = this;
        return !this.form
            .getRawValue()
            .appRows.some(function (appRowRawValue) { return _this.shouldShowAppRow(appRowRawValue); });
    };
    /**
     * Checks if given application is subscribed (present in the given list of applications).
     * @param app Application object to check.
     * @param subscribedApps The list of application objects to check against.
     * @returns True, if the application is present in the list.
     */
    DefaultSubscriptionsComponent.prototype.isSubscribed = function (app, subscribedApps) {
        return subscribedApps && subscribedApps.some(function (subscribedApp) { return subscribedApp.name === app.name; });
    };
    /** Saves the current value of form object to backend. */
    DefaultSubscriptionsComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var defaultSubscriptions, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        defaultSubscriptions = this.getDefaultSubscriptionsForSave();
                        return [4 /*yield*/, this.defaultSubscriptionsService.saveDefaultSubscriptionsToCurrentTenant(defaultSubscriptions)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Saved.'));
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsComponent.prototype.onOverrideOnCreationSubscriptionsChange = function (overrideOnCreationSubscriptions) {
        var appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnCreationSubscriptions) {
            this.enableSubscribeOnCreationCheckboxes();
            return;
        }
        this.disableSubscribeOnCreationCheckboxes();
        this.restoreSubscribeOnCreationFromParent();
    };
    DefaultSubscriptionsComponent.prototype.enableSubscribeOnCreationCheckboxes = function () {
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.get('subscribedOnCreation').enable({ emitEvent: false });
        });
    };
    DefaultSubscriptionsComponent.prototype.disableSubscribeOnCreationCheckboxes = function () {
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.get('subscribedOnCreation').disable({ emitEvent: false });
        });
    };
    DefaultSubscriptionsComponent.prototype.restoreSubscribeOnCreationFromParent = function () {
        var _this = this;
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.patchValue({
                subscribedOnCreation: _this.isSubscribed(appRowControl.value.app, _this.parentDefaultSubscriptions.onCreationSubscriptions)
            });
        });
    };
    DefaultSubscriptionsComponent.prototype.onOverrideOnUpgradeSubscriptionsChange = function (overrideOnUpgradeSubscriptions) {
        var appRowsControls = this.form.controls.appRows.controls;
        if (overrideOnUpgradeSubscriptions) {
            this.enableSubscribeOnUpgradeCheckboxes();
            return;
        }
        this.disableSubscribeOnUpgradeCheckboxes();
        this.restoreSubscribeOnUpgradeFromParent();
    };
    DefaultSubscriptionsComponent.prototype.enableSubscribeOnUpgradeCheckboxes = function () {
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.get('subscribedOnUpgrade').enable({ emitEvent: false });
        });
    };
    DefaultSubscriptionsComponent.prototype.disableSubscribeOnUpgradeCheckboxes = function () {
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.get('subscribedOnUpgrade').disable({ emitEvent: false });
        });
    };
    DefaultSubscriptionsComponent.prototype.restoreSubscribeOnUpgradeFromParent = function () {
        var _this = this;
        var appRowsControls = this.form.controls.appRows.controls;
        appRowsControls.forEach(function (appRowControl) {
            appRowControl.patchValue({
                subscribedOnUpgrade: _this.isSubscribed(appRowControl.value.app, _this.parentDefaultSubscriptions.onUpgradeSubscriptions)
            });
        });
    };
    DefaultSubscriptionsComponent.prototype.loadDefaultSubscriptions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions, onCreationSubscriptions, onUpgradeSubscriptions;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.defaultSubscriptionsService.getDefaultSubscriptionsEvaluatedFromParentTenant()];
                    case 1:
                        _a.parentDefaultSubscriptions = _d.sent();
                        _b = this;
                        return [4 /*yield*/, this.defaultSubscriptionsService.getDefaultSubscriptionsFromCurrentTenant()];
                    case 2:
                        _b.currentDefaultSubscriptions = _d.sent();
                        _c = this.currentDefaultSubscriptions, overrideOnCreationSubscriptions = _c.overrideOnCreationSubscriptions, overrideOnUpgradeSubscriptions = _c.overrideOnUpgradeSubscriptions;
                        onCreationSubscriptions = overrideOnCreationSubscriptions
                            ? this.currentDefaultSubscriptions.onCreationSubscriptions
                            : this.parentDefaultSubscriptions.onCreationSubscriptions;
                        onUpgradeSubscriptions = overrideOnUpgradeSubscriptions
                            ? this.currentDefaultSubscriptions.onUpgradeSubscriptions
                            : this.parentDefaultSubscriptions.onUpgradeSubscriptions;
                        this.form.patchValue({
                            overrideOnCreationSubscriptions: overrideOnCreationSubscriptions,
                            overrideOnUpgradeSubscriptions: overrideOnUpgradeSubscriptions
                        });
                        this.form.controls.appRows.controls.forEach(function (appRowControl) {
                            appRowControl.patchValue({
                                subscribedOnCreation: _this.isSubscribed(appRowControl.value.app, onCreationSubscriptions),
                                subscribedOnUpgrade: _this.isSubscribed(appRowControl.value.app, onUpgradeSubscriptions)
                            });
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsComponent.prototype.getDefaultSubscriptionsForSave = function () {
        var value = this.form.value;
        return {
            overrideOnCreationSubscriptions: value.overrideOnCreationSubscriptions,
            onCreationSubscriptions: value.overrideOnCreationSubscriptions
                ? value.appRows.filter(function (app) { return app.subscribedOnCreation; }).map(function (app) { return app.app; })
                : null,
            overrideOnUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions,
            onUpgradeSubscriptions: value.overrideOnUpgradeSubscriptions
                ? value.appRows.filter(function (app) { return app.subscribedOnUpgrade; }).map(function (app) { return app.app; })
                : null
        };
    };
    DefaultSubscriptionsComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: DefaultSubscriptionsService },
        { type: AlertService }
    ]; };
    DefaultSubscriptionsComponent = __decorate([
        Component({
            selector: 'c8y-default-subscriptions',
            template: "<c8y-title>{{ 'Default subscriptions' | translate }}</c8y-title>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"save()\">\n  <div class=\"card card--fullpage\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Default subscriptions</h4>\n    </div>\n    <div class=\"inner-scroll\">\n      <div class=\"card--grid grid__col--2-8-2--md grid__col--3-6-3\">\n        <div class=\"card-block large-padding bg-gray-white sticky-top separator-bottom p-b-0\">\n          <p><strong translate>Applications subscribed to a tenant on creation</strong></p>\n          <div class=\"text-center\">\n            <label class=\"c8y-switch\">\n              <input type=\"checkbox\" formControlName=\"overrideOnCreationSubscriptions\" />\n              <span></span> {{ 'Override inherited' | translate }}\n            </label>\n          </div>\n        </div>\n        <div class=\"card-block bg-white sticky-top separator-bottom\">\n          <p><b translate>Applications</b></p>\n          <p translate>\n            Configure default subscriptions in the platform, both for tenant creation\n            and for platform upgrade. To display a full list of available applications, override\n            inherited settings.\n          </p>\n        </div>\n        <div class=\"card-block large-padding bg-gray-white sticky-top separator-bottom p-b-0\">\n          <p><strong translate>Applications subscribed to a tenant on platform upgrade</strong></p>\n          <div class=\"text-center\">\n            <label class=\"c8y-switch\">\n              <input type=\"checkbox\" formControlName=\"overrideOnUpgradeSubscriptions\" />\n              <span></span> {{ 'Override inherited' | translate }}\n            </label>\n          </div>\n        </div>\n        <div class=\"card-block bg-gray-white\" *ngIf=\"loading\"></div>\n        <div class=\"card-block bg-white\" *ngIf=\"loading\">\n          <div class=\"p-r-48 p-b-24 d-inline-block\" style=\"position:relative;\">\n            <div class=\"spinner\">\n              <div class=\"rect1\"></div>\n              <div class=\"rect2\"></div>\n              <div class=\"rect3\"></div>\n              <div class=\"rect4\"></div>\n              <div class=\"rect5\"></div>\n            </div>\n          </div>\n          <span translate>Loading application subscriptions\u2026</span>\n        </div>\n        <div class=\"card-block bg-gray-white\" *ngIf=\"loading\"></div>\n        <ng-container formArrayName=\"appRows\" class=\"d-contents\">\n          <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n          <div class=\"card-block bg-white\" *ngIf=\"!loading && isEmptyView()\">\n            <div class=\"c8y-empty-state\">\n              <h1 class=\"c8y-icon c8y-icon-c8y-data c8y-icon-duocolor\"></h1>\n              <h3 translate>No application subscriptions yet.</h3>\n              <p translate>\n                Select \"Override inherited\" to define the list of subscribed applications.\n              </p>\n            </div>\n          </div>\n          <div class=\"bg-gray-white\" *ngIf=\"!loading && isEmptyView()\"></div>\n\n          <div\n            *ngFor=\"let appRowControl of form.get('appRows')['controls']; let i = index\"\n            class=\"d-contents\"\n          >\n            <ng-container\n              *ngIf=\"shouldShowAppRow(appRowControl.getRawValue())\"\n              formArrayName=\"{{ i }}\"\n              class=\"d-contents\"\n            >\n              <div class=\"c8y-list__item d-flex d-col bg-gray-white text-center\">\n                <div class=\"flex-item-middle\">\n                  <label\n                    class=\"c8y-checkbox d-inline-block\"\n                    [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnCreation.disabled }\"\n                  >\n                    <input type=\"checkbox\" formControlName=\"subscribedOnCreation\" />\n                    <span></span>\n                  </label>\n                </div>\n              </div>\n\n              <div class=\"c8y-list__item bg-white\">\n                <div class=\"c8y-list__item__block\">\n                  <div class=\"c8y-list__item__appicon\">\n                    <c8y-app-icon\n                      [app]=\"appRowControl.value.app\"\n                      [name]=\"appRowControl.value.app.name\"\n                      [contextPath]=\"appRowControl.value.app.contextPath\"\n                    ></c8y-app-icon>\n                  </div>\n                  <div class=\"c8y-list__item__body\">\n                    <div class=\"content-flex-50\">\n                      <div class=\"col-6\">\n                        <p\n                          class=\"text-truncate\"\n                          title=\"{{ appRowControl.value.app | humanizeAppName | async }}\"\n                        >\n                          {{ appRowControl.value.app | humanizeAppName | async }}\n                        </p>\n                        <small class=\"text-muted\">{{ appRowControl.value.app.contextPath }}</small>\n                      </div>\n                      <div class=\"col-6\">\n                        <p>\n                          <span class=\"text-label-small m-r-4\" translate>Tenant ID</span> \n                          {{ appRowControl.value.app.owner.tenant.id }}\n                        </p>\n                        <!-- TODO: uncomment when company name is available\n                          <p>\n                          <span class=\"text-label-small m-r-4\" translate>Company</span>\n                          <small class=\"text-muted\">company name</small>\n                        </p> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"c8y-list__item d-flex d-col bg-gray-white text-center\">\n                <div class=\"flex-item-middle\">\n                  <label\n                    class=\"c8y-checkbox d-inline-block\"\n                    [ngClass]=\"{ disabled: appRowControl.controls.subscribedOnUpgrade.disabled }\"\n                  >\n                    <input type=\"checkbox\" formControlName=\"subscribedOnUpgrade\" />\n                    <span></span>\n                  </label>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"card-footer separator\">\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary\"\n        [disabled]=\"form.invalid || form.pristine\"\n        title=\"{{ 'Save default subscriptions' | translate }}\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</form>\n"
        })
    ], DefaultSubscriptionsComponent);
    return DefaultSubscriptionsComponent;
}());

var DefaultSubscriptionsGuard = /** @class */ (function () {
    function DefaultSubscriptionsGuard(tenantUiService) {
        this.tenantUiService = tenantUiService;
    }
    /**
     * Checks if default subscriptions feature should be active,
     * i.e. whether the current tenant is the management or an enterprise tenant.
     * **Note: the check is executed only once in the runtime.**
     *
     * @returns True, if the feature should be active.
     */
    DefaultSubscriptionsGuard.prototype.canActivate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(this.active === undefined)) return [3 /*break*/, 4];
                        _a = this;
                        return [4 /*yield*/, this.tenantUiService.isManagementTenant()];
                    case 1:
                        _b = (_c.sent());
                        if (_b) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.tenantUiService.isEnterpriseTenant()];
                    case 2:
                        _b = (_c.sent());
                        _c.label = 3;
                    case 3:
                        _a.active = _b;
                        _c.label = 4;
                    case 4: return [2 /*return*/, this.active];
                }
            });
        });
    };
    DefaultSubscriptionsGuard.ctorParameters = function () { return [
        { type: TenantUiService }
    ]; };
    DefaultSubscriptionsGuard = __decorate([
        Injectable()
    ], DefaultSubscriptionsGuard);
    return DefaultSubscriptionsGuard;
}());

var DefaultSubscriptionsNavigationFactory = /** @class */ (function () {
    function DefaultSubscriptionsNavigationFactory(defaultSubscriptionsGuard) {
        this.defaultSubscriptionsGuard = defaultSubscriptionsGuard;
        this.navNode = new NavigatorNode({
            label: gettext('Default subscriptions'),
            path: '/default-subscriptions',
            icon: 'c8y-c8y-data',
            parent: gettext('Applications'),
            priority: 1000
        });
    }
    /** Returns the navigation node if the feature is active. */
    DefaultSubscriptionsNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.defaultSubscriptionsGuard.canActivate()];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, this.navNode];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DefaultSubscriptionsNavigationFactory.ctorParameters = function () { return [
        { type: DefaultSubscriptionsGuard }
    ]; };
    DefaultSubscriptionsNavigationFactory = __decorate([
        Injectable()
    ], DefaultSubscriptionsNavigationFactory);
    return DefaultSubscriptionsNavigationFactory;
}());

var ɵ0 = [
    {
        path: 'default-subscriptions',
        component: DefaultSubscriptionsComponent,
        canActivate: [DefaultSubscriptionsGuard]
    }
];
var DefaultSubscriptionsModule = /** @class */ (function () {
    function DefaultSubscriptionsModule() {
    }
    DefaultSubscriptionsModule = __decorate([
        NgModule({
            imports: [CoreModule, ReactiveFormsModule],
            declarations: [DefaultSubscriptionsComponent],
            entryComponents: [DefaultSubscriptionsComponent],
            exports: [DefaultSubscriptionsComponent],
            providers: [
                DefaultSubscriptionsService,
                DefaultSubscriptionsGuard,
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: DefaultSubscriptionsNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                }
            ]
        })
    ], DefaultSubscriptionsModule);
    return DefaultSubscriptionsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DefaultSubscriptionsComponent, DefaultSubscriptionsContext, DefaultSubscriptionsModule, DefaultSubscriptionsService, ɵ0, DefaultSubscriptionsGuard as ɵa, DefaultSubscriptionsNavigationFactory as ɵb };
//# sourceMappingURL=c8y-ngx-components-default-subscriptions.js.map
