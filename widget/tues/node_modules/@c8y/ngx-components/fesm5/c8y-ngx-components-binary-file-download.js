import { __awaiter, __generator, __decorate } from 'tslib';
import { Injectable, NgModule } from '@angular/core';
import { NavigationEnd, Router, ActivatedRoute, RouterModule } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { InventoryService, InventoryBinaryService } from '@c8y/client';
import { gettext, Status, AlertService, ModalService, CommonModule } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { isUndefined } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';

var BinaryFileDownloadService = /** @class */ (function () {
    function BinaryFileDownloadService(router, route, inventoryService, alertService, modalService, translate, inventoryBinary) {
        this.router = router;
        this.route = route;
        this.inventoryService = inventoryService;
        this.alertService = alertService;
        this.modalService = modalService;
        this.translate = translate;
        this.inventoryBinary = inventoryBinary;
    }
    BinaryFileDownloadService.prototype.run = function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (event) {
            return event instanceof NavigationEnd
                && _this.route.snapshot.queryParams.download;
        }), map(function () { return _this.route.snapshot.queryParams.download; }))
            .subscribe(function (downloadId) { return __awaiter(_this, void 0, void 0, function () {
            var data, alertMessage, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.inventoryService.detail(downloadId)];
                    case 1:
                        data = (_a.sent()).data;
                        if (!isUndefined(data.c8y_IsBinary)) {
                            this.showDownloadModal(data);
                        }
                        else {
                            alertMessage = this.translate.instant(gettext('Could not download the file: object with ID "{{ id }}" is not a valid binary.'), { id: data.id });
                            this.alertService.danger(alertMessage);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    BinaryFileDownloadService.prototype.showDownloadModal = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var modalBody, binary, fileBinary, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        modalBody = this.translate.instant(gettext('You are about to download file "{{ fileName }}". Do you want to proceed?'), { fileName: data.name });
                        return [4 /*yield*/, this.modalService.confirm(gettext('File download'), modalBody, Status.INFO, { ok: gettext('Download') })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getBinary(data.id)];
                    case 2:
                        binary = _a.sent();
                        fileBinary = new File([binary], data.name, { type: data.contentType });
                        saveAs(fileBinary);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BinaryFileDownloadService.prototype.getBinary = function (binaryId) {
        return __awaiter(this, void 0, void 0, function () {
            var binary, res, ex_2, msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.inventoryBinary.download(binaryId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        binary = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        msg = gettext('Could not get the binary.');
                        this.alertService.danger(msg);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, binary];
                }
            });
        });
    };
    BinaryFileDownloadService.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: InventoryService },
        { type: AlertService },
        { type: ModalService },
        { type: TranslateService },
        { type: InventoryBinaryService }
    ]; };
    BinaryFileDownloadService = __decorate([
        Injectable()
    ], BinaryFileDownloadService);
    return BinaryFileDownloadService;
}());

var BinaryFileDownloadModule = /** @class */ (function () {
    function BinaryFileDownloadModule(binaryFileDownloadService) {
        binaryFileDownloadService.run();
    }
    BinaryFileDownloadModule.ctorParameters = function () { return [
        { type: BinaryFileDownloadService }
    ]; };
    BinaryFileDownloadModule = __decorate([
        NgModule({
            imports: [CommonModule, RouterModule],
            providers: [BinaryFileDownloadService]
        })
    ], BinaryFileDownloadModule);
    return BinaryFileDownloadModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { BinaryFileDownloadModule, BinaryFileDownloadService };
//# sourceMappingURL=c8y-ngx-components-binary-file-download.js.map
