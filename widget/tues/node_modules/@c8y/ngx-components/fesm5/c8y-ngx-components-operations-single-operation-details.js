import { __decorate, __awaiter, __generator, __assign } from 'tslib';
import { Input, Component, Injectable, ViewChild, NgModule } from '@angular/core';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { operationStatusIcons, operationStatusClasses, gettext, AlertService, CoreModule } from '@c8y/ngx-components';
import { BulkOperationDetailsService, BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { OperationService, OperationStatus } from '@c8y/client';
import { Router } from '@angular/router';
import { get, assign } from 'lodash-es';

var SingleOperationModalComponent = /** @class */ (function () {
    function SingleOperationModalComponent(modalRef) {
        this.modalRef = modalRef;
        this.collapsed = false;
        this.readOnly = false;
    }
    SingleOperationModalComponent.ctorParameters = function () { return [
        { type: BsModalRef }
    ]; };
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "collapsed", void 0);
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "readOnly", void 0);
    SingleOperationModalComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-modal',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Single operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-single-operation-list-item\n      [operation]=\"operation\"\n      [collapsed]=\"collapsed\"\n      [readOnly]=\"readOnly\"\n    ></c8y-single-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], SingleOperationModalComponent);
    return SingleOperationModalComponent;
}());

var SingleOperationDetailsService = /** @class */ (function () {
    function SingleOperationDetailsService(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    SingleOperationDetailsService.prototype.openDetails = function (operationOrOperationId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, _a, initialState;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!operationOrOperationId.id) return [3 /*break*/, 1];
                        _a = operationOrOperationId;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.operationService.detail(operationOrOperationId)];
                    case 2:
                        _a = (_b.sent()).data;
                        _b.label = 3;
                    case 3:
                        operation = _a;
                        initialState = __assign({ operation: operation }, options);
                        this.modalService.show(SingleOperationModalComponent, {
                            initialState: initialState,
                            class: 'modal-lg'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationDetailsService.ctorParameters = function () { return [
        { type: OperationService },
        { type: BsModalService }
    ]; };
    SingleOperationDetailsService = __decorate([
        Injectable()
    ], SingleOperationDetailsService);
    return SingleOperationDetailsService;
}());

/**
 * Single operation component displays a single operation's status, description and creationTime.
 *
 * Example:
 *
 * ```html
 * <c8y-single-operation [operation]="operation"></c8y-single-operation>
 * ```
 */
var SingleOperationComponent = /** @class */ (function () {
    function SingleOperationComponent(singleOperationDetailsService) {
        this.singleOperationDetailsService = singleOperationDetailsService;
    }
    SingleOperationComponent.prototype.ngOnInit = function () {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
    };
    SingleOperationComponent.prototype.openDetails = function () {
        this.singleOperationDetailsService.openDetails(this.operation);
    };
    SingleOperationComponent.ctorParameters = function () { return [
        { type: SingleOperationDetailsService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationComponent.prototype, "operation", void 0);
    SingleOperationComponent = __decorate([
        Component({
            selector: 'c8y-single-operation',
            template: "<div class=\"c8y-list--group\" *ngIf=\"operation\">\n  <a class=\"c8y-list__item\">\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i\n          [c8yIcon]=\"statusIcons[operation.status]\"\n          [ngClass]=\"statusClasses[operation.status]\"\n          [tooltip]=\"operation.status?.toString() | translate\"\n          placement=\"right\"\n          container=\"body\"\n        ></i>\n      </div>\n      <div class=\"c8y-list__item__body p-r-16\">\n        <div class=\"content-flex-40\">\n          <div class=\"col-8\">\n            <button\n              class=\"btn-clean text-truncate\"\n              (click)=\"openDetails()\"\n              title=\"{{ operation.description | translate }}\"\n            >\n              {{ operation.description | translate }}\n            </button>\n          </div>\n          <div class=\"col-4 text-muted\">\n            <small class=\"icon-flex\">\n              <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n              <span>{{ operation.creationTime | c8yDate }}</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </a>\n</div>\n"
        })
    ], SingleOperationComponent);
    return SingleOperationComponent;
}());

var SingleOperationListItemComponent = /** @class */ (function () {
    function SingleOperationListItemComponent(router, operationService, alertService) {
        this.router = router;
        this.operationService = operationService;
        this.alertService = alertService;
        this.collapsed = true;
        this.readOnly = false;
        this.tabs = [];
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
        this.OperationStatus = OperationStatus;
    }
    Object.defineProperty(SingleOperationListItemComponent.prototype, "displayedDescription", {
        get: function () {
            var commandText = get(this.operation, 'c8y_Command.text');
            var opDescription = get(this.operation, 'description');
            return commandText || opDescription || gettext('(no command text or description available)');
        },
        enumerable: true,
        configurable: true
    });
    SingleOperationListItemComponent.prototype.ngOnInit = function () {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
        this.tabs = [
            {
                label: gettext('Details'),
                icon: 'asterisk',
                template: this.detailsTabTemplate
            },
            {
                label: gettext('History of changes'),
                icon: 'archive',
                template: this.historyOfChangesTabTemplate
            }
        ];
        this.selectedTab = this.tabs[0];
    };
    SingleOperationListItemComponent.prototype.scheduleAsBulkOperation = function () {
        this.router.navigateByUrl("/devicecontrol/single/create-bulk/" + this.operation.id);
    };
    SingleOperationListItemComponent.prototype.cancel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var operationAfterUpdate, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.operationService.update({
                                id: this.operation.id,
                                status: OperationStatus.FAILED,
                                failureReason: gettext('Operation cancelled by user.')
                            })];
                    case 1:
                        operationAfterUpdate = (_a.sent()).data;
                        assign(this.operation, operationAfterUpdate);
                        this.alertService.success(gettext('Operation cancelled.'));
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationListItemComponent.ctorParameters = function () { return [
        { type: Router },
        { type: OperationService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "collapsed", void 0);
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "readOnly", void 0);
    __decorate([
        ViewChild('listItem', { static: true })
    ], SingleOperationListItemComponent.prototype, "listItem", void 0);
    __decorate([
        ViewChild('details', { static: true })
    ], SingleOperationListItemComponent.prototype, "detailsTabTemplate", void 0);
    __decorate([
        ViewChild('historyOfChanges', { static: true })
    ], SingleOperationListItemComponent.prototype, "historyOfChangesTabTemplate", void 0);
    SingleOperationListItemComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-list-item',
            template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !collapsed }\"\n  [collapsed]=\"collapsed\"\n  #listItem\n  id=\"single-operation-{{ operation.id }}\"\n>\n  <c8y-li-icon>\n    <i [c8yIcon]=\"statusIcons[operation.status]\" [ngClass]=\"statusClasses[operation.status]\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-6\">\n      <span class=\"text-truncate\" title=\"{{ displayedDescription | translate }}\">\n        {{ displayedDescription | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\"></div>\n    <div class=\"col-3\">\n      <div class=\"m-r-16\">\n        <small class=\"icon-flex\">\n          <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n          <span>\n            {{ operation.creationTime | c8yDate }}\n          </span>\n        </small>\n      </div>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"exchange\" class=\"m-r-4\"></i>\n        <span>\n          <a href=\"#/device/{{ operation.deviceId }}\">{{ operation.deviceName }}</a>\n        </span>\n      </small>\n    </div>\n  </div>\n  <ng-container>\n    <c8y-li-action\n      label=\"{{ 'Schedule as bulk operation' | translate }}\"\n      (click)=\"scheduleAsBulkOperation()\"\n      icon=\"c8y-energy\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"!readOnly && operation.status === OperationStatus.PENDING\"\n      label=\"{{ 'Cancel`operation`' | translate }}\"\n      (click)=\"cancel()\"\n      icon=\"times\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li [ngClass]=\"{ active: selectedTab === tab }\" *ngFor=\"let tab of tabs\">\n          <button [title]=\"tab.label | translate\" (click)=\"selectedTab = tab\" class=\"btn-clean\">\n            <i [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.label | translate }}</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"selectedTab.template\"></ng-container>\n\n    <ng-template #details>\n      <c8y-single-operation-details [operation]=\"operation\" [readOnly]=\"readOnly\">\n      </c8y-single-operation-details>\n    </ng-template>\n\n    <ng-template #historyOfChanges>\n      <c8y-audit-log [source]=\"operation.id\"></c8y-audit-log>\n    </ng-template>\n  </c8y-li-collapse>\n</c8y-li>\n"
        })
    ], SingleOperationListItemComponent);
    return SingleOperationListItemComponent;
}());

var SingleOperationDetailsComponent = /** @class */ (function () {
    function SingleOperationDetailsComponent(bulkOperationDetailsService) {
        this.bulkOperationDetailsService = bulkOperationDetailsService;
        this.readOnly = false;
    }
    SingleOperationDetailsComponent.prototype.openBulkOperationDetails = function () {
        this.bulkOperationDetailsService.openDetails(this.operation.bulkOperationId);
    };
    SingleOperationDetailsComponent.ctorParameters = function () { return [
        { type: BulkOperationDetailsService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationDetailsComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationDetailsComponent.prototype, "readOnly", void 0);
    SingleOperationDetailsComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-details',
            template: "<div class=\"row\">\n  <div class=\"col-sm-3\">\n    <div class=\"legend form-block\" translate>\n      Details\n    </div>\n    <ul class=\"list-unstyled small\">\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\" *ngIf=\"operation.bulkOperationId\">\n        <label class=\"small m-0 m-r-4\" translate>Bulk operation</label>\n        <span class=\"flex-item-right\">\n          <a class=\"pointer\" role=\"button\" (click)=\"openBulkOperationDetails()\" translate\n            >See details</a\n          >\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small m-0 m-r-4\" translate>Status</label>\n        <span class=\"flex-item-right\">{{ operation.status.toString() | translate }}</span>\n      </li>\n      <li *ngIf=\"operation.failureReason\" class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small m-0 m-r-4\" translate>Failure reason</label>\n        <span class=\"flex-item-right\">{{ operation.failureReason | translate }}</span>\n      </li>\n      <li *ngIf=\"operation.c8y_Command\" class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small flex-item-top m-r-4\" translate>Result</label>\n        <span class=\"flex-item-right\">{{ operation.c8y_Command.result }}</span>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-9\">\n    <div class=\"legend form-block\" translate>\n      Operation\n    </div>\n    <pre class=\"p-16\">{{ operation | json }}</pre>\n  </div>\n</div>\n"
        })
    ], SingleOperationDetailsComponent);
    return SingleOperationDetailsComponent;
}());

/**
 * This module allows to display details of a single operation in a modal.
 */
var SingleOperationDetailsModule = /** @class */ (function () {
    function SingleOperationDetailsModule() {
    }
    SingleOperationDetailsModule = __decorate([
        NgModule({
            imports: [
                CoreModule,
                PopoverModule,
                TooltipModule,
                CollapseModule,
                BulkOperationsListModule,
                BulkOperationsServiceModule
            ],
            providers: [SingleOperationDetailsService],
            declarations: [
                SingleOperationComponent,
                SingleOperationModalComponent,
                SingleOperationListItemComponent,
                SingleOperationDetailsComponent
            ],
            entryComponents: [
                SingleOperationComponent,
                SingleOperationModalComponent,
                SingleOperationListItemComponent,
                SingleOperationDetailsComponent
            ],
            exports: [SingleOperationComponent]
        })
    ], SingleOperationDetailsModule);
    return SingleOperationDetailsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { SingleOperationComponent, SingleOperationDetailsComponent, SingleOperationDetailsModule, SingleOperationDetailsService, SingleOperationListItemComponent, SingleOperationModalComponent };
//# sourceMappingURL=c8y-ngx-components-operations-single-operation-details.js.map
