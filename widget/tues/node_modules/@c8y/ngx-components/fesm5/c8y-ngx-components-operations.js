import { __decorate, __awaiter, __generator, __extends, __read, __assign, __param } from 'tslib';
import { Input, Component, TemplateRef, Directive, EventEmitter, Output, ContentChildren, ViewChild, ComponentFactoryResolver, ChangeDetectorRef, ViewContainerRef, ViewChildren, Injectable, NgModule, forwardRef, HostBinding, InjectionToken, Inject } from '@angular/core';
import { Validators, FormBuilder, ReactiveFormsModule, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { BsDatepickerModule } from 'ngx-bootstrap/datepicker';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TimepickerModule } from 'ngx-bootstrap/timepicker';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { gettext, Status, ModalService, AlertService, C8yStepper, memoize, ListItemRadioComponent, FilteringActionType, CoreModule, FormsModule, HOOK_TABS, operationStatusIcons, operationStatusClasses, OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';
import { TypeDeviceGridColumn, StatusDeviceGridColumn, NameDeviceGridColumn, ModelDeviceGridColumn, GroupDeviceGridColumn, RegistrationDateDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridComponent, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { DeviceProfileService, DeviceProfileModule } from '@c8y/ngx-components/device-profile';
import { RepositoryType, RepositoryService, RepositoryModule } from '@c8y/ngx-components/repository';
import { SingleOperationDetailsModule as SingleOperationDetailsModule$1 } from '@c8y/ngx-components/operations/single-operation-details';
import { OperationSummaryModule as OperationSummaryModule$1 } from '@c8y/ngx-components/operations/operation-summary';
import { BulkOperationSchedulerModule as BulkOperationSchedulerModule$1 } from '@c8y/ngx-components/operations/bulk-operation-scheduler';
import { get, uniqWith, isEqual, property, uniq, has, isEmpty, assign, isUndefined, cloneDeep, flatten, omit } from 'lodash-es';
import { Subject, BehaviorSubject, combineLatest, from, of, pipe } from 'rxjs';
import { takeUntil, switchMap, shareReplay, debounceTime, distinctUntilChanged, tap, catchError, distinctUntilKeyChanged, map, throttleTime, withLatestFrom } from 'rxjs/operators';
import { BulkOperationType as BulkOperationType$1, BulkOperationsService as BulkOperationsService$1, BulkOperationsServiceModule as BulkOperationsServiceModule$1 } from '@c8y/ngx-components/operations/bulk-operations-service';
import { TranslateService } from '@ngx-translate/core';
import { InventoryService, OperationService, OperationStatus, OperationBulkService, OperationBulkGeneralStatus } from '@c8y/client';
import { BulkOperationDetailsService as BulkOperationDetailsService$1, BulkOperationsListModule as BulkOperationsListModule$1 } from '@c8y/ngx-components/operations/bulk-operations-list';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Location } from '@angular/common';
import { StatusFilterComponent as StatusFilterComponent$1, StatusFilterModule as StatusFilterModule$1 } from '@c8y/ngx-components/operations/status-filter';

var OperationDetailsComponent = /** @class */ (function () {
    function OperationDetailsComponent(formBuilder) {
        var _a;
        this.formBuilder = formBuilder;
        this.titlePlaceholder = gettext('e.g. Reset factory settings');
        this.descriptionPlaceholder = gettext('e.g. Reset factory settings of all devices of model XYZ');
        this.placeholders = (_a = {},
            _a[BulkOperationType$1.SOFTWARE] = {
                title: gettext('e.g. Cloud connectivity software'),
                description: gettext('e.g. Cloud connectivity software applied to devices with type c8y_Linux')
            },
            _a[BulkOperationType$1.FIRMWARE] = {
                title: gettext('e.g. Firmware for hardware revision b'),
                description: gettext('e.g. Firmware for hardware revision b applied to devices with type c8y_Linux')
            },
            _a[BulkOperationType$1.CONFIGURATION] = {
                title: gettext('e.g. Host configuration c8y_Linux'),
                description: gettext('e.g. Host configuration applied to devices with type c8y_Linux')
            },
            _a[BulkOperationType$1.DEVICE_PROFILE] = {
                title: gettext('e.g. Device profile for c8y_Linux devices'),
                description: gettext('e.g. Device profile applied to devices with type c8y_Linux')
            },
            _a);
    }
    Object.defineProperty(OperationDetailsComponent.prototype, "bulkOperationType", {
        set: function (bulkOperationType) {
            this.titlePlaceholder = get(this.placeholders[bulkOperationType], 'title');
            this.descriptionPlaceholder = get(this.placeholders[bulkOperationType], 'description');
        },
        enumerable: true,
        configurable: true
    });
    OperationDetailsComponent.prototype.ngOnInit = function () {
        var config = {
            description: ['', Validators.required],
            note: [''],
            schedule: []
        };
        this.fgOperationDescription = this.formBuilder.group(config);
    };
    OperationDetailsComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    __decorate([
        Input()
    ], OperationDetailsComponent.prototype, "bulkOperationType", null);
    OperationDetailsComponent = __decorate([
        Component({
            selector: 'c8y-operation-details',
            template: "<div [formGroup]=\"fgOperationDescription\">\n  <c8y-form-group>\n    <label translate>Title</label>\n    <input\n      formControlName=\"description\"\n      class=\"form-control\"\n      [placeholder]=\"titlePlaceholder | translate\"\n      required\n    />\n    <c8y-messages *ngIf=\"fgOperationDescription?.controls?.description?.errors\">\n      <c8y-message *ngIf=\"fgOperationDescription.controls.description.errors.required\" translate>\n        This field is required.\n      </c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n  <c8y-form-group>\n    <label translate>Description</label>\n    <textarea\n      formControlName=\"note\"\n      class=\"form-control\"\n      [placeholder]=\"descriptionPlaceholder | translate\"\n      rows=\"3\"\n    ></textarea>\n  </c8y-form-group>\n  <c8y-operation-scheduler formControlName=\"schedule\"></c8y-operation-scheduler>\n</div>\n"
        })
    ], OperationDetailsComponent);
    return OperationDetailsComponent;
}());

var CustomStep = /** @class */ (function () {
    function CustomStep(templateRef) {
        this.templateRef = templateRef;
        this.buttonsDisabled = false;
        this.onNext = function (_a) {
            var stepper = _a.stepper, step = _a.step;
            // steps without own `onNext` handler, e.g. preview steps need to mark themselves as `completed`,
            // otherwise stepper will not allow to move forth from them as soon as the user navigates back
            // and the `c8y-stepper-buttons` component marks the step as incomplete.
            step.completed = true;
            stepper.next();
        };
    }
    CustomStep.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    __decorate([
        Input('customStep')
    ], CustomStep.prototype, "label", void 0);
    __decorate([
        Input('customStepCompleted')
    ], CustomStep.prototype, "completed", void 0);
    __decorate([
        Input('customStepButtonsDisabled')
    ], CustomStep.prototype, "buttonsDisabled", void 0);
    __decorate([
        Input('customStepOnNext')
    ], CustomStep.prototype, "onNext", void 0);
    CustomStep = __decorate([
        Directive({ selector: '[customStep]' })
    ], CustomStep);
    return CustomStep;
}());

var BulkOperationStepper = /** @class */ (function () {
    function BulkOperationStepper(bulkOperationService, modal, alert) {
        this.bulkOperationService = bulkOperationService;
        this.modal = modal;
        this.alert = alert;
        this.selectionChange = new EventEmitter();
        this.steps = [];
        this.showStepper = false;
        this.showButtons = false;
        this.stepperButtonsLabels = { custom: gettext('Schedule bulk operation') };
        this.deviceTypesSubject$ = new Subject();
        this.endSubscriptions = new Subject();
        this.deviceTypes$ = this.deviceTypesSubject$.asObservable();
    }
    BulkOperationStepper.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            // wait for the next event loop turn as `steps` has already been checked in this CD cycle
            _this.steps = _this.customSteps.toArray();
            _this.showStepper = true;
            setTimeout(function () {
                // postpone rendering of buttons for custom steps to the point where custom steps have already been rendered
                _this.showButtons = true;
                if (_this.stepper) {
                    _this.stepper.selectionChange.pipe(takeUntil(_this.endSubscriptions)).subscribe(function (event) {
                        _this.selectionChange.next(event);
                    });
                    _this.operationDetailsForm = _this.operationDetailsComponent.fgOperationDescription;
                }
            });
        });
    };
    BulkOperationStepper.prototype.changeDeviceTypes = function (deviceTypes) {
        if (deviceTypes) {
            this.deviceTypesSubject$.next(Array.isArray(deviceTypes) ? deviceTypes : [deviceTypes]);
        }
        else {
            this.deviceTypesSubject$.next([]);
        }
    };
    BulkOperationStepper.prototype.confirmDeviceSelection = function ($event) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, ex_1, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!!this.deviceQueryString) return [3 /*break*/, 8];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, this.modal.confirm(gettext('All devices selected'), gettext('You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?'), Status.WARNING, { ok: gettext('Schedule for all devices'), cancel: gettext('Cancel and select devices') })];
                    case 2:
                        _e.sent();
                        $event.step.completed = true;
                        $event.stepper.next();
                        _a = this;
                        if (!this.retrieveOperationDetails) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.retrieveOperationDetails()];
                    case 3:
                        _b = _e.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _b = undefined;
                        _e.label = 5;
                    case 5:
                        _a.operationDetails = _b;
                        return [3 /*break*/, 7];
                    case 6:
                        ex_1 = _e.sent();
                        return [3 /*break*/, 7];
                    case 7: return [3 /*break*/, 12];
                    case 8:
                        $event.step.completed = true;
                        $event.stepper.next();
                        _c = this;
                        if (!this.retrieveOperationDetails) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.retrieveOperationDetails()];
                    case 9:
                        _d = _e.sent();
                        return [3 /*break*/, 11];
                    case 10:
                        _d = undefined;
                        _e.label = 11;
                    case 11:
                        _c.operationDetails = _d;
                        _e.label = 12;
                    case 12:
                        this.bulkOperationType = this.bulkOperationService.retrieveBulkOperationType(get(this.operationDetails, 'prototype'));
                        if (this.operationDetailsForm &&
                            get(this.operationDetailsForm, 'controls.description.pristine') &&
                            this.operationDetails) {
                            this.operationDetailsForm.patchValue({
                                description: get(this.operationDetails, 'prototype.description')
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationStepper.prototype.cancel = function () {
        this.close();
    };
    BulkOperationStepper.prototype.scheduleBulkOperation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pendingStatus = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.operationDetails.prototype.description = get(this.operationDetailsForm, 'controls.description.value');
                        this.operationDetails.note = get(this.operationDetailsForm, 'controls.note.value');
                        this.operationDetails.schedule = get(this.operationDetailsForm, 'controls.schedule.value');
                        return [4 /*yield*/, this.bulkOperationService.scheduleBulkOperation(this.deviceQueryString, this.operationDetails)];
                    case 2:
                        _a.sent();
                        this.alert.success(gettext('New bulk operation scheduled.'));
                        this.close();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.alert.addServerFailure(ex_2);
                        return [3 /*break*/, 4];
                    case 4:
                        this.pendingStatus = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationStepper.prototype.ngOnDestroy = function () {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    };
    BulkOperationStepper.prototype.close = function () {
        this.stepper.reset();
        this.bulkOperationService.returnToBulkOperationOverview();
    };
    BulkOperationStepper.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: ModalService },
        { type: AlertService }
    ]; };
    __decorate([
        Output()
    ], BulkOperationStepper.prototype, "selectionChange", void 0);
    __decorate([
        ContentChildren(CustomStep)
    ], BulkOperationStepper.prototype, "customSteps", void 0);
    __decorate([
        ViewChild(C8yStepper, { static: false })
    ], BulkOperationStepper.prototype, "stepper", void 0);
    __decorate([
        ViewChild(OperationDetailsComponent, { static: false })
    ], BulkOperationStepper.prototype, "operationDetailsComponent", void 0);
    BulkOperationStepper = __decorate([
        Component({
            selector: 'c8y-bulk-operation-stepper',
            template: "<div class=\"fit-v\">\n  <c8y-stepper\n    class=\"flex-col no-align-items fit-v c8y-stepper--no-btns\"\n    linear\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    [customClasses]=\"['col-md-6', 'col-md-offset-3', 'p-t-16', 'p-b-32', 'flex-no-shrink']\"\n    *ngIf=\"showStepper\"\n  >\n    <!-- CUSTOM STEPS 1 to N-2 -->\n    <cdk-step\n      *ngFor=\"let step of steps\"\n      [label]=\"step.label | translate\"\n      [completed]=\"step.completed\"\n    >\n      <ng-container *ngTemplateOutlet=\"step.templateRef\"></ng-container>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        *ngIf=\"showButtons\"\n        [disabled]=\"step.buttonsDisabled\"\n        (onNext)=\"step.onNext($event)\"\n        (onCancel)=\"cancel()\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <!-- STEP N-1 - Data-grid -->\n    <cdk-step [label]=\"'Select target devices' | translate\">\n      <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row p-b-16\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center m-b-16\">\n              {{ 'Select target devices' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <c8y-device-selector\n          [deviceTypes]=\"deviceTypes$\"\n          (onDeviceQueryStringChange)=\"deviceQueryString = $event\"\n        ></c8y-device-selector>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onNext)=\"confirmDeviceSelection($event)\"\n        (onCancel)=\"cancel()\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n\n    <!-- STEP N - Scheduler -->\n    <cdk-step [label]=\"'Confirm and schedule bulk operation' | translate\">\n      <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row p-b-16\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center m-b-16\">\n              {{ 'Confirm and schedule bulk operation' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <div class=\"card-inner-scroll fit-v\">\n          <div class=\"card-block p-b-0\">\n            <div class=\"text-center p-b-16\">\n              <c8y-operation-summary\n                [name]=\"operationDetails?.name | translate\"\n                [description]=\"operationDetails?.description | translate\"\n                [deviceQueryString]=\"deviceQueryString\"\n              ></c8y-operation-summary>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-4 col-md-offset-4\">\n                <c8y-operation-details\n                  [bulkOperationType]=\"bulkOperationType\"\n                ></c8y-operation-details>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        [labels]=\"stepperButtonsLabels\"\n        [pending]=\"pendingStatus\"\n        [disabled]=\"operationDetailsForm?.invalid\"\n        (onCancel)=\"cancel()\"\n        (onCustom)=\"scheduleBulkOperation()\"\n      >\n      </c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</div>\n"
        })
    ], BulkOperationStepper);
    return BulkOperationStepper;
}());

var BaseStepperComponent = /** @class */ (function () {
    function BaseStepperComponent() {
        /**
         * A map holding step data. The order of properties need to match the order of
         * the steps they hold data for as the index of the property is used to clear
         * step data when navigating forth after changing data at an earlier step.
         */
        this.stepData = {};
        this.endSubscriptions = new Subject();
    }
    Object.defineProperty(BaseStepperComponent.prototype, "deviceTypes", {
        set: function (deviceTypes) {
            if (this.operationStepper) {
                this.operationStepper.changeDeviceTypes(deviceTypes);
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseStepperComponent.prototype.ngOnInit = function () {
        this.operationStepper.retrieveOperationDetails = this.retrieveOperationPrototype.bind(this);
        this.operationStepper.selectionChange
            .pipe(takeUntil(this.endSubscriptions))
            .subscribe(this.onSelectionChange.bind(this));
    };
    BaseStepperComponent.prototype.ngOnDestroy = function () {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    };
    BaseStepperComponent.prototype.onSelectionChange = function (event) {
        var selectedIndex = event.selectedIndex, previouslySelectedIndex = event.previouslySelectedIndex;
        if (selectedIndex > previouslySelectedIndex &&
            selectedIndex < Object.keys(this.stepData).length) {
            // TODO clear step data only if previous step is "dirty"
            this.stepData[this.getStepDataKeyByIndex(selectedIndex)] = undefined;
        }
    };
    BaseStepperComponent.prototype.getStepDataKeyByIndex = function (index) {
        return Object.keys(this.stepData)[index];
    };
    __decorate([
        ViewChild(BulkOperationStepper, { static: true })
    ], BaseStepperComponent.prototype, "operationStepper", void 0);
    return BaseStepperComponent;
}());

var BulkOperationFromSingleComponent = /** @class */ (function (_super) {
    __extends(BulkOperationFromSingleComponent, _super);
    function BulkOperationFromSingleComponent(activatedRoute, bulkOperationService) {
        var _this = _super.call(this) || this;
        _this.activatedRoute = activatedRoute;
        _this.bulkOperationService = bulkOperationService;
        return _this;
    }
    BulkOperationFromSingleComponent.prototype.retrieveOperationPrototype = function () {
        return __awaiter(this, void 0, void 0, function () {
            var prototype;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bulkOperationService.getOperation(this.activatedRoute.snapshot.params.operationId)];
                    case 1:
                        prototype = (_a.sent()).data;
                        return [2 /*return*/, {
                                description: get(prototype, 'description'),
                                prototype: prototype
                            }];
                }
            });
        });
    };
    BulkOperationFromSingleComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: BulkOperationsService$1 }
    ]; };
    BulkOperationFromSingleComponent = __decorate([
        Component({
            selector: 'bulk-operation-from-single',
            template: "<c8y-bulk-operation-stepper> </c8y-bulk-operation-stepper>\n"
        })
    ], BulkOperationFromSingleComponent);
    return BulkOperationFromSingleComponent;
}(BaseStepperComponent));

var BulkOperationsStepperContainerComponent = /** @class */ (function () {
    function BulkOperationsStepperContainerComponent(activatedRoute, bulkOpsService, resolver, changeDetector) {
        this.activatedRoute = activatedRoute;
        this.bulkOpsService = bulkOpsService;
        this.resolver = resolver;
        this.changeDetector = changeDetector;
    }
    BulkOperationsStepperContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.activatedRoute.params.subscribe(function (params) {
            if (params && params.type) {
                _this.bulkOperationType = params.type;
                _this.component = _this.bulkOpsService
                    .getBulkTypes()
                    .find(function (element) { return element.path.includes(_this.bulkOperationType); }).component;
                _this.changeDetector.detectChanges();
                _this.createComponent(_this.component);
            }
        });
    };
    BulkOperationsStepperContainerComponent.prototype.createComponent = function (component) {
        if (component) {
            var factory = this.resolver.resolveComponentFactory(component);
            this.container.createComponent(factory);
        }
    };
    BulkOperationsStepperContainerComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: BulkOperationsService$1 },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ViewChild('container', { static: false, read: ViewContainerRef })
    ], BulkOperationsStepperContainerComponent.prototype, "container", void 0);
    BulkOperationsStepperContainerComponent = __decorate([
        Component({
            selector: 'bulk-operations-stepper-container',
            template: "<c8y-title>{{ 'New bulk operation' | translate }}</c8y-title>\n<div class=\"card card--grid--fullpage\">\n  <ng-container [ngSwitch]=\"bulkOperationType\">\n    <!-- Cases: software, firmware and configuration are default c8y-types -->\n    <div *ngSwitchCase=\"'software'\" class=\"d-contents\">\n      <c8y-stepper-bulk-type-software></c8y-stepper-bulk-type-software>\n    </div>\n    <div *ngSwitchCase=\"'firmware'\" class=\"d-contents\">\n      <c8y-stepper-firmware></c8y-stepper-firmware>\n    </div>\n    <div *ngSwitchCase=\"'configuration'\" class=\"d-contents\">\n      <c8y-stepper-bulk-type-configuration></c8y-stepper-bulk-type-configuration>\n    </div>\n    <div *ngSwitchCase=\"'device-profile'\" class=\"d-contents\">\n      <c8y-stepper-bulk-type-device-profile></c8y-stepper-bulk-type-device-profile>\n    </div>\n    <!-- This case is for 3rd-party-dev defined types -->\n    <div *ngSwitchDefault class=\"d-contents\">\n      <template #container></template>\n    </div>\n  </ng-container>\n</div>\n"
        })
    ], BulkOperationsStepperContainerComponent);
    return BulkOperationsStepperContainerComponent;
}());

var ConfirmDeviceProfileSelectionStepComponent = /** @class */ (function () {
    function ConfirmDeviceProfileSelectionStepComponent(translate) {
        this.translate = translate;
        this.DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');
    }
    Object.defineProperty(ConfirmDeviceProfileSelectionStepComponent.prototype, "softwares", {
        get: function () {
            return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'software'], []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmDeviceProfileSelectionStepComponent.prototype, "configurations", {
        get: function () {
            return get(this.selectedDeviceProfile, ['c8y_DeviceProfile', 'configuration'], []);
        },
        enumerable: true,
        configurable: true
    });
    ConfirmDeviceProfileSelectionStepComponent.prototype.getDeviceTypeTitle = function (deviceProfile) {
        return get(deviceProfile, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));
    };
    ConfirmDeviceProfileSelectionStepComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    __decorate([
        Input()
    ], ConfirmDeviceProfileSelectionStepComponent.prototype, "selectedDeviceProfile", void 0);
    ConfirmDeviceProfileSelectionStepComponent = __decorate([
        Component({
            selector: 'c8y-confirm-device-profile-selection-step',
            template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-gray\">{{ 'Confirm selection' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-v\">\n    <div class=\"card-block\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(selectedDeviceProfile) }}\">\n            <span class=\"legend form-block\" translate>Device type</span>\n            <ng-container *ngIf=\"selectedDeviceProfile?.c8y_Filter?.type; else noType\">\n              <span>{{ selectedDeviceProfile.c8y_Filter.type }}</span>\n            </ng-container>\n            <ng-template #noType>\n              ---\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedDeviceProfile?.c8y_DeviceProfile.firmware\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Firmware</span>\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-firmware\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"softwares.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Software</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let software of softwares\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ software.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"configurations.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Configuration</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let configuration of configurations\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-500\">\n                <div class=\"col-5\">\n                  {{ configuration.name }}\n                </div>\n                <div class=\"col-5\">\n                  <span class=\"label label-info\" *ngIf=\"configuration.type\">\n                    {{ configuration.type }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], ConfirmDeviceProfileSelectionStepComponent);
    return ConfirmDeviceProfileSelectionStepComponent;
}());

var SelectDeviceProfileStepComponent = /** @class */ (function () {
    function SelectDeviceProfileStepComponent(deviceProfileService, translate) {
        var _this = this;
        this.deviceProfileService = deviceProfileService;
        this.translate = translate;
        this.deviceProfile = new EventEmitter();
        this.textFilter$ = new BehaviorSubject('');
        this.deviceType$ = new BehaviorSubject('');
        this.DEVICE_TYPE_NOT_DEFINED = gettext('Device type not defined');
        this.deviceTypes = [];
        this.selectedDeviceType = { name: '' };
        this.deviceProfile$ = combineLatest(this.textFilter$, this.deviceType$).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), name = _b[0], deviceType = _b[1];
            return _this.getDeviceProfiles(name, deviceType);
        }), shareReplay(1));
        this.loadDeviceTypes();
    }
    SelectDeviceProfileStepComponent.prototype.loadDeviceTypes = function () {
        var _this = this;
        this.deviceTypeSubscription = this.deviceType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(function (searchStr) {
            var query = { 'c8y_Filter.type': "*" + searchStr + "*" };
            return from(_this.deviceProfileService.getDeviceProfiles(query));
        }))
            .subscribe(function (_a) {
            var data = _a.data;
            _this.deviceTypes = uniqWith(data.map(function (val) { return ({ name: val.c8y_Filter.type }); }).filter(function (val) { return val.name; }), isEqual);
        });
    };
    SelectDeviceProfileStepComponent.prototype.ngOnDestroy = function () {
        this.deviceTypeSubscription.unsubscribe();
    };
    SelectDeviceProfileStepComponent.prototype.selectDeviceProfile = function (deviceProfile) {
        this.deviceProfile.emit(deviceProfile);
    };
    SelectDeviceProfileStepComponent.prototype.getDeviceTypeTitle = function (deviceProfile) {
        return get(deviceProfile, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED));
    };
    SelectDeviceProfileStepComponent.prototype.getDeviceProfiles = function (name, deviceType) {
        var query = deviceType ? { 'c8y_Filter.type': deviceType } : {};
        if (name) {
            query.name = "*" + name + "*";
        }
        return this.deviceProfileService.getDeviceProfiles(query);
    };
    SelectDeviceProfileStepComponent.ctorParameters = function () { return [
        { type: DeviceProfileService },
        { type: TranslateService }
    ]; };
    __decorate([
        Output()
    ], SelectDeviceProfileStepComponent.prototype, "deviceProfile", void 0);
    SelectDeviceProfileStepComponent = __decorate([
        Component({
            selector: 'c8y-select-device-profile-step',
            template: "<div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select device profile' | translate }}</h4>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              type=\"search\"\n              class=\"form-control\"\n              title=\"{{ 'Filter device profiles\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter device profiles\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                c8yIcon=\"times\"\n                class=\"text-muted\"\n                *ngIf=\"(textFilter$ | async).length\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <c8y-form-group class=\"m-0\">\n            <c8y-typeahead\n              name=\"deviceType\"\n              [(ngModel)]=\"selectedDeviceType\"\n              placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n              (onSearch)=\"deviceType$.next($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = {name: ''}; deviceType$.next('')\"\n              >\n                <span>{{'All device types' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n                *ngFor=\"let deviceType of deviceTypes\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n                [active]=\"selectedDeviceType === deviceType\"\n              >\n                <c8y-highlight\n                  [text]=\"deviceType.name\"\n                  [pattern]=\"deviceType$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing device types.' | translate\"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-v\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group>\n        <c8y-li *c8yFor=\"let deviceProfile of deviceProfile$ | async; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectDeviceProfile(deviceProfile)\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-device-profile\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-5\">\n              <div class=\"text-truncate\" title=\"{{ deviceProfile.name }}\">\n                {{ deviceProfile.name }}\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(deviceProfile) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"deviceProfile.c8y_Filter?.type; else noType\">\n                  {{ deviceProfile.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class=\"text-muted\" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
        })
    ], SelectDeviceProfileStepComponent);
    return SelectDeviceProfileStepComponent;
}());

var SelectFirmwareComponent = /** @class */ (function () {
    function SelectFirmwareComponent(repositoryService, bulkOpsService, translate) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.bulkOpsService = bulkOpsService;
        this.translate = translate;
        this.firmware = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.textFilter$ = new BehaviorSubject('');
        this.firmwares$ = this.textFilter$
            .pipe(debounceTime(400), distinctUntilChanged())
            .pipe(switchMap(function (text) { return _this.getFirmwares(text); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available');
        this.DESCRIPTION_NOT_AVAILABLE = gettext('No description available');
    }
    SelectFirmwareComponent.prototype.ngOnInit = function () {
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    };
    SelectFirmwareComponent.prototype.selectFirmware = function (selected, fw) {
        if (selected) {
            this.firmware.emit(fw);
        }
    };
    SelectFirmwareComponent.prototype.getBaseVersionsCount$ = function (firmware) {
        var _this = this;
        return this.firmwares$.pipe(switchMap(function () { return _this.repositoryService.getBaseVersionsCount$(firmware); }), shareReplay(1));
    };
    SelectFirmwareComponent.prototype.getDescriptionTitle = function (firmware) {
        return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getDeviceTypeTitle = function (firmware) {
        return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getFirmwares = function (partialName) {
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName: partialName });
    };
    SelectFirmwareComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: BulkOperationsService$1 },
        { type: TranslateService }
    ]; };
    __decorate([
        Input()
    ], SelectFirmwareComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], SelectFirmwareComponent.prototype, "firmware", void 0);
    __decorate([
        memoize(property('id'))
    ], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);
    SelectFirmwareComponent = __decorate([
        Component({
            selector: 'c8y-select-firmware-step',
            template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select firmware' | translate }}</h4>\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          title=\"{{ 'Filter firmware\u2026' | translate }}\"\n          placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n          [ngModel]=\"textFilter$ | async\"\n          (ngModelChange)=\"textFilter$.next($event)\"\n        />\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n          <i\n            c8yIcon=\"times\"\n            class=\"text-muted\"\n            *ngIf=\"(textFilter$ | async).length > 0\"\n            (click)=\"textFilter$.next('')\"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf=\"(textFilter$ | async).length > 0 && elementCount===0\">\n</c8y-search-result-empty>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-v\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\">\n        <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectFirmware($event, firmware)\" [selected]=\"firmware === selected\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class=\"col-4\">\n              <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n                <small *ngIf=\"firmware.description; else noDesc\">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class=\"text-muted\" translate>No description available</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class=\"text-muted\" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning\">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf=\"!isLegacy(firmware)\">\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
        })
    ], SelectFirmwareComponent);
    return SelectFirmwareComponent;
}());

var VersionOrPatchComponent = /** @class */ (function () {
    function VersionOrPatchComponent(repositoryService, inventoryService, bulkOpsService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(function (id) { return _this.inventoryService.detail$(id).pipe(catchError(function (error) { return of(error); })); }), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) { return _this.repositoryService.listBaseVersions(firmware); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(function (firmware) { return _this.repositoryService.isLegacyEntry(firmware); }), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    VersionOrPatchComponent.prototype.getBinaryName$ = function (binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    };
    VersionOrPatchComponent.prototype.getBaseVersionAndPatches$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) {
            return _this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion);
        }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.getPatchVersionsCount$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function () { return _this.firmware$; }), switchMap(function (firmware) { return _this.repositoryService.getPatchVersionsCount$(firmware, baseVersion); }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.selectVersionOrPatch = function (selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    };
    VersionOrPatchComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: InventoryService },
        { type: BulkOperationsService$1 }
    ]; };
    __decorate([
        Input()
    ], VersionOrPatchComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], VersionOrPatchComponent.prototype, "versionOrPatch", void 0);
    __decorate([
        memoize()
    ], VersionOrPatchComponent.prototype, "getBinaryName$", null);
    __decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
    __decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);
    VersionOrPatchComponent = __decorate([
        Component({
            selector: 'c8y-version-or-patch-step',
            template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
        })
    ], VersionOrPatchComponent);
    return VersionOrPatchComponent;
}());

var ConfirmSoftwareSelectionStepComponent = /** @class */ (function () {
    function ConfirmSoftwareSelectionStepComponent() {
    }
    ConfirmSoftwareSelectionStepComponent.prototype.ngOnChanges = function (changes) {
        if (changes.selectedItems) {
            var deviceTypes = this.deviceTypes;
            this.title = deviceTypes && deviceTypes.length ? deviceTypes.join(', ') : gettext('Undefined`device type`');
        }
    };
    Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "selectedToInstall", {
        get: function () {
            return this.selectedItems.filter(function (software) { return software.action === 'install'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "selectedToDelete", {
        get: function () {
            return this.selectedItems.filter(function (software) { return software.action === 'delete'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmSoftwareSelectionStepComponent.prototype, "deviceTypes", {
        get: function () {
            return uniq(this.selectedItems
                .filter(function (val) { return has(val, ['software', 'c8y_Filter', 'type']); })
                .map(function (val) { return val.software.c8y_Filter.type; }));
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input()
    ], ConfirmSoftwareSelectionStepComponent.prototype, "selectedItems", void 0);
    ConfirmSoftwareSelectionStepComponent = __decorate([
        Component({
            selector: 'c8y-confirm-software-selection-step',
            template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-gray\">{{ 'Confirm selection' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-v\">\n    <div class=\"card-block\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <div class=\"text-truncate\" title=\"{{ this.title }}\">\n            <span class=\"legend form-block\" translate>Device type</span>\n            <ng-container *ngIf=\"deviceTypes.length > 0; else noType\">\n              <span *ngFor=\"let deviceType of deviceTypes; let last = last\">{{ deviceType }}{{ last ? '' : ', ' }}</span>\n            </ng-container>\n            <ng-template #noType>\n              <em class=\"text-muted\" translate>Undefined`device type`</em>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToInstall.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Installations/updates`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToInstall\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6 text-truncate\" title=\"{{ selectedItem.software.name }}\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-4\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class=\"row p-b-16\" *ngIf=\"selectedToDelete.length\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <span class=\"legend form-block\" translate>Removals`software`</span>\n          <c8y-list-group>\n            <c8y-li *ngFor=\"let selectedItem of selectedToDelete\">\n              <c8y-li-icon>\n                <i c8yIcon=\"c8y-tools\"></i>\n              </c8y-li-icon>\n              <c8y-li-body class=\"content-flex-10\">\n                <div class=\"col-6\">\n                  {{ selectedItem.software.name }}\n                </div>\n                <div class=\"col-6 text-right\">\n                  <span class=\"text-label-small m-r-8\" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedItem.version.c8y_Software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], ConfirmSoftwareSelectionStepComponent);
    return ConfirmSoftwareSelectionStepComponent;
}());

var SelectSoftwareStepComponent = /** @class */ (function () {
    function SelectSoftwareStepComponent(repositoryService, translate) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.translate = translate;
        this.software = new EventEmitter();
        this.textFilter$ = new BehaviorSubject('');
        this.deviceType$ = new BehaviorSubject('');
        this.deviceTypes = [];
        this.selectedDeviceType = { name: '' };
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.software$ = combineLatest(this.textFilter$, this.deviceType$).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), name = _b[0], deviceType = _b[1];
            return _this.getSoftware(name, deviceType);
        }), shareReplay(1));
        this.NO_DEVICE_TYPE_AVAILABLE = gettext('No device type available');
        this.loadDeviceTypes();
    }
    SelectSoftwareStepComponent.prototype.getBaseVersionsCount$ = function (software) {
        return this.repositoryService.getBaseVersionsCount$(software).pipe(shareReplay(1));
    };
    SelectSoftwareStepComponent.prototype.getVersions = function (software) {
        return this.repositoryService.listAllVersions(software);
    };
    SelectSoftwareStepComponent.prototype.getDeviceTypeTitle = function (software) {
        return get(software, 'c8y_Filter.type', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));
    };
    SelectSoftwareStepComponent.prototype.loadDeviceTypes = function () {
        var _this = this;
        this.deviceTypeSubscription = this.deviceType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(function (searchStr) {
            var query = { 'c8y_Filter.type': "*" + searchStr + "*" };
            return from(_this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query: query }));
        }))
            .subscribe(function (result) {
            var data = result.data;
            _this.deviceTypes = uniqWith(data.map(function (val) { return ({ name: val.c8y_Filter.type }); }), isEqual);
        });
    };
    SelectSoftwareStepComponent.prototype.ngOnDestroy = function () {
        this.deviceTypeSubscription.unsubscribe();
    };
    SelectSoftwareStepComponent.prototype.resetSelection = function () {
        this.radioButtons.map(function (radio) { return radio.reset(); });
    };
    SelectSoftwareStepComponent.prototype.selectSoftware = function (_a) {
        var option = _a.option, software = _a.software;
        software.selectedId = option.id;
        option.action = 'install';
        this.emitSoftware({ option: option, software: software });
    };
    SelectSoftwareStepComponent.prototype.emitSoftware = function (_a) {
        var option = _a.option, software = _a.software;
        var emitData = Object.assign({}, { software: software }, { version: option }, { action: option.action });
        this.software.emit(emitData);
    };
    SelectSoftwareStepComponent.prototype.getSoftware = function (name, deviceType) {
        var query = name ? { name: "*" + name + "*" } : {};
        if (deviceType) {
            query.__or = [{ 'c8y_Filter.type': deviceType }, { __not: { __has: "c8y_Filter.type" } }];
        }
        return this.repositoryService.listRepositoryEntries(RepositoryType.SOFTWARE, { query: query });
    };
    SelectSoftwareStepComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: TranslateService }
    ]; };
    __decorate([
        Output()
    ], SelectSoftwareStepComponent.prototype, "software", void 0);
    __decorate([
        ViewChildren(ListItemRadioComponent)
    ], SelectSoftwareStepComponent.prototype, "radioButtons", void 0);
    __decorate([
        memoize(property('id'))
    ], SelectSoftwareStepComponent.prototype, "getBaseVersionsCount$", null);
    __decorate([
        memoize(property('id'))
    ], SelectSoftwareStepComponent.prototype, "getVersions", null);
    SelectSoftwareStepComponent = __decorate([
        Component({
            selector: 'c8y-select-software-step',
            template: "<div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select software' | translate }}</h4>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              type=\"search\"\n              class=\"form-control\"\n              title=\"{{ 'Filter software\u2026' | translate }}\"\n              placeholder=\"{{ 'Filter software\u2026' | translate }}\"\n              [ngModel]=\"textFilter$ | async\"\n              (ngModelChange)=\"textFilter$.next($event)\"\n            />\n            <span class=\"input-group-addon\">\n              <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n              <i\n                c8yIcon=\"times\"\n                class=\"text-muted\"\n                *ngIf=\"(textFilter$ | async).length > 0\"\n                (click)=\"textFilter$.next('')\"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class=\"col-xs-12 p-b-8 visible-xs visible-sm\"></div>\n        <div class=\"col-md-6\">\n          <c8y-form-group class=\"m-0\">\n            <c8y-typeahead\n              name=\"deviceType\"\n              [(ngModel)]=\"selectedDeviceType\"\n              placeholder=\"{{ 'Type to filter device types\u2026' | translate }}\"\n              (onSearch)=\"deviceType$.next($event)\"\n              [allowFreeEntries]=\"false\"\n            >\n              <c8y-li\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"selectedDeviceType = {name: ''}; deviceType$.next('')\"\n              >\n                <span>{{'All device types' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n              *ngFor=\"let deviceType of deviceTypes\"\n              class=\"p-l-8 p-r-8 c8y-list__item--link\"\n              (click)=\"selectedDeviceType = deviceType; deviceType$.next(deviceType.name)\"\n              [active]=\"selectedDeviceType === deviceType\"\n              >\n              <c8y-highlight\n              [text]=\"deviceType.name\"\n              [pattern]=\"deviceType$ | async\"\n              ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name=\"notExisting\"\n              [text]=\"'Select one of the existing device types.' | translate\"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-v\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': (software$ | async)?.data.length < 10 }\">\n        <c8y-li *c8yFor=\"let software of software$ | async; loadMore: 'auto'\">\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-tools\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-5\">\n              <div class=\"text-truncate\" title=\"{{ software.name }}\">\n                {{ software.name }}\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(software) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"software.c8y_Filter?.type; else noType\">\n                  {{ software.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class=\"text-muted\" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(software)\" class=\"label label-warning flex-item-right-sm\">\n                <span translate>Legacy</span>\n              </span>\n              <span *ngIf=\"!isLegacy(software)\">\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"fa-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(software) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(software) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default flex-item-right-sm\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: (getBaseVersionsCount$(software) | async) || ''\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n          <c8y-li-collapse>\n            <c8y-list-group>\n              <c8y-li *c8yFor=\"let option of getVersions(software) | async\">\n                <c8y-li-radio\n                  [name]=\"software.id\"\n                  (onSelect)=\"selectSoftware({ option: option, software: software })\"\n                ></c8y-li-radio>\n                <c8y-li-body class=\"content-flex-40 p-r-16\">\n                  <div class=\"col-4\">\n                    {{ option.c8y_Software.version }}\n                  </div>\n                  <div class=\"col-5\">\n                    <div class=\"text-truncate\" title=\"{{ option.c8y_Software.url }}\">\n                      <span class=\"text-label-small m-r-4\" translate> File </span>\n                      <span>{{ option.c8y_Software.url }}</span>\n                    </div>\n                  </div>\n                  <div class=\"col-3\" *ngIf=\"option.id === software.selectedId\">\n                    <div class=\"c8y-select-wrapper d-inline-block\" style=\"margin: -4px 0;\">\n                      <select\n                        id=\"action\"\n                        class=\"form-control input-sm\"\n                        [(ngModel)]=\"option.action\"\n                        (change)=\"emitSoftware({ option: option, software: software })\"\n                      >\n                        <option [ngValue]=\"'install'\">{{ 'Install/update`software`' | translate }}</option>\n                        <option [ngValue]=\"'delete'\">{{ 'Remove`software`' | translate }}</option>\n                      </select>\n                      <span></span>\n                    </div>\n                  </div>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </c8y-li-collapse>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
        })
    ], SelectSoftwareStepComponent);
    return SelectSoftwareStepComponent;
}());

var StepperBulkTypeConfiguration = /** @class */ (function (_super) {
    __extends(StepperBulkTypeConfiguration, _super);
    function StepperBulkTypeConfiguration(bulkOperationService, repositoryService, translate) {
        var _this = _super.call(this) || this;
        _this.bulkOperationService = bulkOperationService;
        _this.repositoryService = repositoryService;
        _this.translate = translate;
        _this.NO_DEVICE_TYPE_AVAILABLE = gettext('Undefined`device type`');
        _this.elementCount = 0;
        _this.DD_LOW_COUNT = 10;
        _this.textFilter$ = new BehaviorSubject('');
        _this.configType$ = new BehaviorSubject('');
        _this.configTypes = [];
        _this.selectedConfigType = { name: '' };
        _this.configurations$ = combineLatest(_this.textFilter$, _this.configType$).pipe(switchMap(function (_a) {
            var _b = __read(_a, 2), name = _b[0], configType = _b[1];
            return _this.getConfiguration(name, configType);
        }), shareReplay(1));
        _this.DD_LOW_COUNT = _this.bulkOperationService.DD_LOW_COUNT;
        _this.loadConfigurationTypes();
        return _this;
    }
    StepperBulkTypeConfiguration.prototype.loadConfigurationTypes = function () {
        var _this = this;
        this.configTypeSubscription = this.configType$
            .pipe(debounceTime(300), distinctUntilChanged(), switchMap(function (searchStr) {
            var query = { configurationType: "*" + searchStr + "*" };
            return from(_this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query: query }));
        }))
            .subscribe(function (result) {
            var data = result.data;
            _this.configTypes = uniqWith(data.map(function (val) { return ({ name: val.configurationType }); }), isEqual);
        });
    };
    StepperBulkTypeConfiguration.prototype.ngOnDestroy = function () {
        this.configTypeSubscription.unsubscribe();
    };
    StepperBulkTypeConfiguration.prototype.selectConfiguration = function (configuration) {
        this.selectedConfiguration = configuration;
    };
    StepperBulkTypeConfiguration.prototype.goToSecondStep = function ($event) {
        $event.stepper.next();
        this.getConfigBinary();
        this.deviceTypes = this.selectedConfiguration.deviceType;
    };
    StepperBulkTypeConfiguration.prototype.getConfigBinary = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.selectedConfiguration.url) return [3 /*break*/, 2];
                        _a = this.selectedConfiguration;
                        return [4 /*yield*/, this.repositoryService.getBinaryText(this.selectedConfiguration.url, { allowExternal: true, noAlerts: true })];
                    case 1:
                        _a.binary = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    StepperBulkTypeConfiguration.prototype.getDeviceTypeTitle = function (configuration) {
        return get(configuration, 'deviceType', this.translate.instant(this.NO_DEVICE_TYPE_AVAILABLE));
    };
    StepperBulkTypeConfiguration.prototype.retrieveOperationPrototype = function () {
        var configuration = {
            type: this.selectedConfiguration.configurationType,
            url: this.selectedConfiguration.url
        };
        return {
            name: gettext('Configuration update'),
            description: get(this.selectedConfiguration, 'name'),
            prototype: {
                description: "Update configuration to: " + this.selectedConfiguration.name + ".",
                c8y_DownloadConfigFile: configuration
            }
        };
    };
    StepperBulkTypeConfiguration.prototype.getConfiguration = function (name, configurationType) {
        var query = name ? { name: "*" + name + "*" } : {};
        if (configurationType) {
            query.__or = [{ configurationType: configurationType }, { __not: { __has: "configurationType" } }];
        }
        return this.repositoryService.listRepositoryEntries(RepositoryType.CONFIGURATION, { query: query });
    };
    StepperBulkTypeConfiguration.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: RepositoryService },
        { type: TranslateService }
    ]; };
    StepperBulkTypeConfiguration = __decorate([
        Component({
            selector: 'c8y-stepper-bulk-type-configuration',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select configuration' | translate;\n      completed: !!selectedConfiguration;\n      buttonsDisabled: !selectedConfiguration;\n      onNext: goToSecondStep.bind(this)\"\n  >\n    <div class=\"card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row p-b-16\">\n        <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n          <h4 class=\"text-center m-b-16\">{{ 'Select configuration' | translate }}</h4>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"input-group input-group-search\">\n                <input\n                  type=\"search\"\n                  class=\"form-control\"\n                  title=\"{{ 'Filter\u2026' | translate }}\"\n                  placeholder=\"{{ 'Filter\u2026' | translate }}\"\n                  [ngModel]=\"textFilter$ | async\"\n                  (ngModelChange)=\"textFilter$.next($event)\"\n                />\n                <span class=\"input-group-addon\">\n                  <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n                  <i\n                    c8yIcon=\"times\"\n                    class=\"text-muted\"\n                    *ngIf=\"(textFilter$ | async).length > 0\"\n                    (click)=\"textFilter$.next('')\"\n                  ></i>\n                </span>\n              </div>\n            </div>\n            <div class=\"col-xs-12 p-b-8 visible-xs visible-sm\"></div>\n            <div class=\"col-md-6\">\n              <c8y-form-group class=\"m-0\">\n                <c8y-typeahead\n                  name=\"configType\"\n                  [(ngModel)]=\"selectedConfigType\"\n                  placeholder=\"{{ 'Type to filter configuration types\u2026' | translate }}\"\n                  (onSearch)=\"configType$.next($event)\"\n                >\n                  <c8y-li\n                    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                    (click)=\"selectedConfigType = { name: '' }; configType$.next('')\"\n                  >\n                    <span>{{ 'All configuration types' | translate }}</span>\n                  </c8y-li>\n                  <c8y-li\n                    *ngFor=\"let configType of configTypes\"\n                    class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                    (click)=\"selectedConfigType = configType; configType$.next(configType.name)\"\n                    [active]=\"selectedConfigType === configType\"\n                  >\n                    <c8y-highlight\n                      [text]=\"configType.name\"\n                      [pattern]=\"configType$ | async\"\n                    ></c8y-highlight>\n                  </c8y-li>\n                </c8y-typeahead>\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-v\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-list-group [ngClass]=\"{ 'dd-low': elementCount < DD_LOW_COUNT }\">\n            <c8y-li #listItem *c8yFor=\"let configuration of configurations$ | async\">\n              <c8y-li-radio (onSelect)=\"selectConfiguration(configuration)\"></c8y-li-radio>\n              <c8y-li-icon icon=\"gears\"></c8y-li-icon>\n              <c8y-li-body class=\"content-flex-60\">\n                <div class=\"col-5\">\n                  <div class=\"text-truncate\" title=\"{{ configuration.name || '-' }}\">\n                    <c8y-highlight\n                      [text]=\"configuration.name || '-'\"\n                      [pattern]=\"textFilter$ | async\"\n                    ></c8y-highlight>\n                  </div>\n                </div>\n                <div class=\"col-4\">\n                  <div\n                    class=\"text-truncate\"\n                    title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(configuration) }}\"\n                  >\n                    <span translate class=\"text-label-small m-r-4\">Device type</span>\n                    {{ configuration.deviceType }}\n                    <em class=\"text-muted\" *ngIf=\"!configuration.deviceType\">\n                      {{ 'Undefined`device type`' | translate }}\n                    </em>\n                  </div>\n                </div>\n                <div class=\"col-3\">\n                  <span\n                    class=\"label label-info\"\n                    *ngIf=\"configuration.configurationType\"\n                    title=\"{{ 'Configuration type' | translate }}: {{\n                      configuration.configurationType\n                    }}\"\n                  >\n                    <c8y-highlight\n                      [text]=\"configuration.configurationType\"\n                      elementClass=\"text-gray-lighter\"\n                      [pattern]=\"configType$ | async\"\n                    ></c8y-highlight>\n                  </span>\n                  <span\n                    class=\"label label-default\"\n                    *ngIf=\"!configuration.configurationType\"\n                    title=\"{{ 'Configuration type' | translate }}: {{ 'Undefined' | translate }}\"\n                  >\n                    {{ 'Undefined' | translate }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <ng-container *customStep=\"'Preview configuration' | translate\">\n    <div class=\"d-contents\">\n      <div class=\"card-block p-t-0 flex-no-shrink separator-bottom\">\n        <div class=\"row\">\n          <div class=\"col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3\">\n            <h4 class=\"text-center m-b-16\">\n              {{ 'Preview configuration' | translate }}\n            </h4>\n            <div class=\"row no-gutter\">\n              <div class=\"col-xs-6\">\n                <div class=\"text-right text-truncate\" title=\"{{ selectedConfiguration?.name }}\">\n                  <strong>{{ selectedConfiguration?.name }}</strong>\n                </div>\n                <span class=\"label label-primary\" *ngIf=\"selectedConfiguration?.configurationType\">\n                  {{ selectedConfiguration.configurationType }}\n                </span>\n                <span class=\"label label-default\" *ngIf=\"!selectedConfiguration?.configurationType\">\n                  {{ 'Undefined' | translate }}\n                </span>\n              </div>\n              <div class=\"col-xs-6 text-right\">\n                <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(selectedConfiguration) }}\">\n                  <span translate class=\"text-label-small m-r-4\">\n                    Device type\n                  </span>\n                  {{ selectedConfiguration?.deviceType }}\n                  <em class=\"text-muted\" *ngIf=\"!selectedConfiguration?.deviceType\" translate>\n                    Undefined`device type`\n                  </em>\n                </div>\n                <p>\n                  <span translate class=\"text-label-small m-r-4\">Updated</span>\n                  <small>{{ selectedConfiguration?.lastUpdated | c8yDate }}</small>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <div class=\"card-inner-scroll fit-v\">\n          <div class=\"card-block p-t-0\">\n            <div class=\"row\">\n              <div class=\"col-md-8 col-md-offset-2\">\n                <div class=\"legend form-block\" translate>Preview</div>\n                <div\n                  class=\"c8y-empty-state text-left\"\n                  *ngIf=\"!this.selectedConfiguration?.binary; else binaryPreview\"\n                >\n                  <h1 [c8yIcon]=\"'file-code-o'\"></h1>\n                  <p>\n                    <strong translate>No preview available.</strong><br />\n                    <small translate>Could not fetch the file.</small>\n                  </p>\n                </div>\n                <ng-template #binaryPreview>\n                  <pre\n                    style=\"min-height: 98px;\"\n                  ><code>{{ this.selectedConfiguration?.binary }}</code></pre>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperBulkTypeConfiguration);
    return StepperBulkTypeConfiguration;
}(BaseStepperComponent));

var StepperBulkTypeDeviceProfile = /** @class */ (function (_super) {
    __extends(StepperBulkTypeDeviceProfile, _super);
    function StepperBulkTypeDeviceProfile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StepperBulkTypeDeviceProfile.prototype.goToConfirmSelection = function ($event) {
        this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');
        $event.stepper.next();
    };
    StepperBulkTypeDeviceProfile.prototype.onDeviceProfileSelected = function (selectedItem) {
        this.selectedDeviceProfile = selectedItem;
    };
    StepperBulkTypeDeviceProfile.prototype.retrieveOperationPrototype = function () {
        return {
            name: gettext('Apply device profile'),
            description: get(this.selectedDeviceProfile, 'name'),
            prototype: {
                description: "Apply device profile: " + this.selectedDeviceProfile.name,
                profileId: this.selectedDeviceProfile.id,
                profileName: this.selectedDeviceProfile.name,
                c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile
            }
        };
    };
    StepperBulkTypeDeviceProfile = __decorate([
        Component({
            selector: 'c8y-stepper-bulk-type-device-profile',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select device profile' | translate; \n      completed: !!selectedDeviceProfile;\n      buttonsDisabled: !selectedDeviceProfile; \n      onNext: goToConfirmSelection.bind(this)\"\n  >\n    <c8y-select-device-profile-step\n      (deviceProfile)=\"onDeviceProfileSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-device-profile-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected device profile' | translate\">\n    <c8y-confirm-device-profile-selection-step\n      class=\"d-contents\"\n      [selectedDeviceProfile]=\"selectedDeviceProfile\"\n    ></c8y-confirm-device-profile-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperBulkTypeDeviceProfile);
    return StepperBulkTypeDeviceProfile;
}(BaseStepperComponent));

var StepperFirmware = /** @class */ (function (_super) {
    __extends(StepperFirmware, _super);
    function StepperFirmware(bulkOperationService, translate) {
        var _this = _super.call(this) || this;
        _this.bulkOperationService = bulkOperationService;
        _this.translate = translate;
        _this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        _this.textFilter$ = new BehaviorSubject('');
        _this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
        return _this;
    }
    StepperFirmware.prototype.goToVersionOrPatchStep = function (_a) {
        var stepper = _a.stepper;
        var selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    };
    StepperFirmware.prototype.onVersionOrPatchSelected = function (versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    };
    StepperFirmware.prototype.onFirmwareSelected = function (fw) {
        this.stepData.firmware = fw;
    };
    StepperFirmware.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    StepperFirmware.prototype.retrieveOperationPrototype = function () {
        var selectedFirmware = this.stepData.firmware;
        var selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        var firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        var name = selectedFirmware.name;
        var version = selectedVersionOrPatch.c8y_Firmware.version;
        var description = "Update firmware to: " + name + " (version: " + version + ").";
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description: description,
                c8y_Firmware: firmware
            }
        };
    };
    StepperFirmware.prototype.onSelectionChange = function (event) {
        this.textFilter$.next('');
        _super.prototype.onSelectionChange.call(this, event);
    };
    StepperFirmware.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: TranslateService }
    ]; };
    StepperFirmware = __decorate([
        Component({
            selector: 'c8y-stepper-firmware',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <h4 class=\"text-center m-b-16 text-gray\" translate>\n            Select version or patch\n          </h4>\n          <p class=\"text-center p-b-8 text-truncate\">\n            <strong [title]=\"stepData?.firmware?.name\">{{ stepData?.firmware?.name }}</strong\n            ><br />\n            <small [title]=\"stepData?.firmware?.description\">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-v\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-version-or-patch-step\n            [selected]=\"stepData?.versionOrPatch\"\n            (versionOrPatch)=\"onVersionOrPatchSelected($event)\">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperFirmware);
    return StepperFirmware;
}(BaseStepperComponent));

var StepperBulkTypeSoftware = /** @class */ (function (_super) {
    __extends(StepperBulkTypeSoftware, _super);
    function StepperBulkTypeSoftware(modal, translate) {
        var _this = _super.call(this) || this;
        _this.modal = modal;
        _this.translate = translate;
        _this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        _this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        _this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        _this.selectedSoftware = [];
        return _this;
    }
    StepperBulkTypeSoftware.prototype.onSoftwareSelected = function (selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(function (item) { return item.software.id !== selectedItem.software.id; });
        this.selectedSoftware.push(selectedItem);
    };
    StepperBulkTypeSoftware.prototype.confirmSoftwareSelection = function ($event) {
        return __awaiter(this, void 0, void 0, function () {
            var deviceTypes, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceTypes = this.getUniqueDeviceTypes();
                        this.deviceTypes = deviceTypes;
                        if (!(deviceTypes.length > 1)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') })];
                    case 2:
                        _a.sent();
                        $event.stepper.next();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.selectedSoftware = [];
                        this.selectSoftware.resetSelection();
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        $event.stepper.next();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    StepperBulkTypeSoftware.prototype.retrieveOperationPrototype = function () {
        var softwareList = this.selectedSoftware.map(function (item) { return ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }); });
        var interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        var description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description: description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    };
    StepperBulkTypeSoftware.prototype.getUniqueDeviceTypes = function () {
        return uniq(this.selectedSoftware
            .map(function (item) { return item.software.c8y_Filter && item.software.c8y_Filter.type; })
            .filter(function (type) { return !!type; }));
    };
    StepperBulkTypeSoftware.ctorParameters = function () { return [
        { type: ModalService },
        { type: TranslateService }
    ]; };
    __decorate([
        ViewChild(SelectSoftwareStepComponent, { static: false })
    ], StepperBulkTypeSoftware.prototype, "selectSoftware", void 0);
    StepperBulkTypeSoftware = __decorate([
        Component({
            selector: 'c8y-stepper-bulk-type-software',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperBulkTypeSoftware);
    return StepperBulkTypeSoftware;
}(BaseStepperComponent));

var DeviceSelectorComponent = /** @class */ (function () {
    function DeviceSelectorComponent() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    DeviceSelectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe(function (types) {
                _this.deviceGrid.updateFiltering([_this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types: types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    };
    DeviceSelectorComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    };
    __decorate([
        ViewChild(DeviceGridComponent, { static: true })
    ], DeviceSelectorComponent.prototype, "deviceGrid", void 0);
    __decorate([
        Input()
    ], DeviceSelectorComponent.prototype, "deviceTypes", void 0);
    __decorate([
        Output()
    ], DeviceSelectorComponent.prototype, "onDeviceQueryStringChange", void 0);
    DeviceSelectorComponent = __decorate([
        Component({
            selector: 'c8y-device-selector',
            template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n></c8y-device-grid>\n"
        })
    ], DeviceSelectorComponent);
    return DeviceSelectorComponent;
}());

var TabsFactory = /** @class */ (function () {
    function TabsFactory(router) {
        this.router = router;
    }
    TabsFactory.prototype.get = function () {
        var tabs = [];
        if (this.router.url.match(/devicecontrol/g)) {
            tabs.push({
                path: 'devicecontrol/single',
                label: gettext('Single operations'),
                icon: 'c8y-icon c8y-icon-device-control',
                priority: 1100,
                orientation: 'horizontal'
            });
            tabs.push({
                path: 'devicecontrol/bulk',
                label: gettext('Bulk operations'),
                icon: 'c8y-icon c8y-icon-energy',
                priority: 1050,
                orientation: 'horizontal'
            });
        }
        return tabs;
    };
    TabsFactory.ctorParameters = function () { return [
        { type: Router }
    ]; };
    TabsFactory = __decorate([
        Injectable()
    ], TabsFactory);
    return TabsFactory;
}());

var routes = [
    {
        path: 'devicecontrol',
        redirectTo: 'devicecontrol/single',
        pathMatch: 'full'
    },
    {
        path: 'devicecontrol/bulk/creation/:type',
        component: BulkOperationsStepperContainerComponent
    },
    {
        path: 'devicecontrol/single/create-bulk/:operationId',
        component: BulkOperationFromSingleComponent
    }
];
var OperationsModule = /** @class */ (function () {
    function OperationsModule() {
    }
    OperationsModule = __decorate([
        NgModule({
            declarations: [
                BulkOperationStepper,
                BulkOperationsStepperContainerComponent,
                BulkOperationFromSingleComponent,
                CustomStep,
                DeviceSelectorComponent,
                StepperBulkTypeSoftware,
                StepperFirmware,
                StepperBulkTypeConfiguration,
                StepperBulkTypeDeviceProfile,
                OperationDetailsComponent,
                VersionOrPatchComponent,
                SelectFirmwareComponent,
                ConfirmSoftwareSelectionStepComponent,
                SelectSoftwareStepComponent,
                SelectDeviceProfileStepComponent,
                ConfirmDeviceProfileSelectionStepComponent
            ],
            imports: [
                CoreModule,
                FormsModule,
                ReactiveFormsModule,
                RouterModule.forRoot(routes, { useHash: true }),
                TooltipModule.forRoot(),
                PopoverModule.forRoot(),
                CollapseModule.forRoot(),
                BsDropdownModule.forRoot(),
                BsDatepickerModule.forRoot(),
                TimepickerModule.forRoot(),
                RepositoryModule,
                DeviceProfileModule,
                DeviceGridModule,
                SingleOperationDetailsModule$1,
                OperationSummaryModule$1,
                BulkOperationSchedulerModule$1
            ],
            exports: [BulkOperationStepper, CustomStep],
            providers: [{ provide: HOOK_TABS, useClass: TabsFactory, multi: true }],
            entryComponents: [BulkOperationsStepperContainerComponent]
        })
    ], OperationsModule);
    return OperationsModule;
}());

var OperationSchedulerComponent = /** @class */ (function () {
    function OperationSchedulerComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.placeholder = gettext('Start date');
        this.delayErrors = null;
        this.pickerErrors = null;
        this.DELAY_SECONDS_DEFAULT = 1;
        this.DELAY_MILLISECONDS_DEFAULT = 1;
        this.MINUTES_AHEAD_DEFAULT = 5;
        this.delaySeconds = this.DELAY_SECONDS_DEFAULT;
        this.delayMilliseconds = this.DELAY_MILLISECONDS_DEFAULT;
        this.minutesAhead = this.MINUTES_AHEAD_DEFAULT;
        this.currentUnit = 'seconds';
    }
    OperationSchedulerComponent_1 = OperationSchedulerComponent;
    Object.defineProperty(OperationSchedulerComponent.prototype, "_minutesAhead", {
        set: function (minutes) {
            if (minutes && minutes > this.MINUTES_AHEAD_DEFAULT) {
                this.minutesAhead = minutes;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperationSchedulerComponent.prototype, "_delayConfig", {
        set: function (config) {
            if (config) {
                if (config.seconds > this.DELAY_SECONDS_DEFAULT) {
                    this.delaySeconds = config.seconds;
                }
                if (config.milliseconds > this.DELAY_MILLISECONDS_DEFAULT) {
                    this.delayMilliseconds = config.milliseconds;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    OperationSchedulerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.minDate = new Date();
        this.initialDate = new Date(this.minDate.setMinutes(this.minDate.getMinutes() + this.minutesAhead));
        this.minDelay = this.delaySeconds;
        this.fgOperationScheduler = this.formBuilder.group({
            picker: ['', [Validators.required, this.dateValidation]],
            time: ['', [Validators.required, this.timeValidation]],
            delay: ['', [Validators.required, Validators.min(this.minDelay)]],
            unit: ['seconds']
        });
        this.fgOperationScheduler.patchValue({
            picker: this.initialDate,
            time: this.initialDate,
            delay: this.minDelay
        });
        // Due to the validation of picker and time it could be possible that value changes
        // are emitted more than once. Therefore we throttle the emits.
        var valueChanges$ = this.fgOperationScheduler.valueChanges.pipe(throttleTime(100));
        this.subscription = valueChanges$.subscribe(function (data) {
            _this.delayErrors = _this.fgOperationScheduler.controls.delay.errors;
            _this.pickerErrors = _this.fgOperationScheduler.controls.picker.errors;
            _this.convertDelayHandler(data.unit);
            _this.emitData(data);
        });
    };
    OperationSchedulerComponent.prototype.ngOnDestroy = function () {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    };
    OperationSchedulerComponent.prototype.writeValue = function (value) {
        if (value) {
            this.fgOperationScheduler.patchValue({
                picker: value.scheduledDate,
                time: value.scheduledDate,
                delay: value.delayInSeconds > 1 ? value.delayInSeconds : value.delayInSeconds * 1000,
                unit: value.delayInSeconds > 1 ? 'seconds' : 'milliseconds'
            });
        }
    };
    OperationSchedulerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    OperationSchedulerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    OperationSchedulerComponent.prototype.setDisabledState = function (isDisabled) {
        isDisabled ? this.fgOperationScheduler.disable() : this.fgOperationScheduler.enable();
    };
    OperationSchedulerComponent.prototype.validate = function () {
        if (this.fgOperationScheduler.invalid) {
            return __assign({}, this.fgOperationScheduler.controls.picker.errors, this.fgOperationScheduler.controls.time.errors, this.fgOperationScheduler.controls.delay.errors);
        }
    };
    OperationSchedulerComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChanged = fn;
    };
    OperationSchedulerComponent.prototype.markAsTouched = function () {
        if (this.onTouched) {
            this.onTouched();
        }
    };
    OperationSchedulerComponent.prototype.convertDelayHandler = function (unit) {
        if (this.currentUnit === unit) {
            return;
        }
        this.currentUnit = unit;
        this.convertDelay(this.currentUnit);
        // update validator on delay control to make sure that
        // switching from minutes to seconds or vice versa does not harm validation.
        this.fgOperationScheduler.controls.delay.setValidators([Validators.required]);
        this.fgOperationScheduler.controls.delay.updateValueAndValidity();
    };
    OperationSchedulerComponent.prototype.emitData = function (data) {
        if (this.onValidatorChanged) {
            this.onValidatorChanged();
        }
        if (data.picker && data.time) {
            data.picker = this.combineDateAndTime(data.picker, data.time);
        }
        this.convertDelay(this.currentUnit);
        data.delayInSeconds = this.delayInSeconds;
        if (this.onChange) {
            this.onChange({
                delayInSeconds: data.delayInSeconds,
                scheduledDate: data.picker
            });
        }
    };
    OperationSchedulerComponent.prototype.convertDelay = function (unit) {
        if (unit && this.fgOperationScheduler.controls.delay.value) {
            this.delayMilliseconds = this.fgOperationScheduler.controls.delay.value;
            if (unit === 'milliseconds') {
                this.minDelay =
                    this.delayMilliseconds > this.DELAY_MILLISECONDS_DEFAULT
                        ? this.delayMilliseconds
                        : this.DELAY_MILLISECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value / 1000;
            }
            else {
                this.delaySeconds = this.fgOperationScheduler.controls.delay.value;
                this.minDelay =
                    this.delaySeconds > this.DELAY_SECONDS_DEFAULT
                        ? this.delaySeconds
                        : this.DELAY_SECONDS_DEFAULT;
                this.delayInSeconds = this.fgOperationScheduler.controls.delay.value;
            }
        }
    };
    OperationSchedulerComponent.prototype.combineDateAndTime = function (date, time) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
    };
    OperationSchedulerComponent.prototype.dateValidation = function (fControl) {
        if (fControl.value) {
            var date = fControl.value;
            fControl.parent.get('time').setValue(date);
            return date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
        }
        return { dateValidation: true };
    };
    OperationSchedulerComponent.prototype.timeValidation = function (fControl) {
        if (fControl.value) {
            var date = fControl.value;
            var result = date >= new Date()
                ? null
                : {
                    dateValidation: true
                };
            var picker = fControl.parent.get('picker');
            if (result) {
                picker.setErrors(result);
                picker.markAsTouched();
                return result;
            }
            if (picker && picker.errors && picker.errors.dateValidation) {
                delete picker.errors.dateValidation;
                if (isEmpty(picker.errors)) {
                    picker.setErrors(null);
                    return result;
                }
                picker.setErrors(picker.errors);
            }
            return result;
        }
        return { dateValidation: true };
    };
    var OperationSchedulerComponent_1;
    OperationSchedulerComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    __decorate([
        Input('minutesAhead')
    ], OperationSchedulerComponent.prototype, "_minutesAhead", null);
    __decorate([
        Input('delayConfig')
    ], OperationSchedulerComponent.prototype, "_delayConfig", null);
    OperationSchedulerComponent = OperationSchedulerComponent_1 = __decorate([
        Component({
            selector: 'c8y-operation-scheduler',
            template: "<div [formGroup]=\"fgOperationScheduler\">\n  <div class=\"form-group m-0\">\n    <label translate>Start date</label>\n    <div class=\"datetime-picker\">\n      <c8y-form-group class=\"datepicker\">\n        <input\n          formControlName=\"picker\"\n          class=\"form-control\"\n          placeholder=\"{{ placeholder | translate }}\"\n          [bsConfig]=\"{ customTodayClass: 'today' }\"\n          [minDate]=\"minDate\"\n          bsDatepicker\n          required\n          (blur)=\"markAsTouched()\"\n        />\n        <c8y-messages *ngIf=\"pickerErrors\">\n          <c8y-message *ngIf=\"pickerErrors.required\" translate>\n            This field is required.\n          </c8y-message>\n          <c8y-message *ngIf=\"pickerErrors.dateValidation && !pickerErrors.required\" translate>\n            Select time in the future.\n          </c8y-message>\n        </c8y-messages>\n      </c8y-form-group>\n      <timepicker\n        class=\"form-group\"\n        [showSpinners]=\"false\"\n        [showMeridian]=\"false\"\n        formControlName=\"time\"\n        (blur)=\"markAsTouched()\"\n      ></timepicker>\n    </div>\n  </div>\n  <div class=\"form-group m-0\">\n    <c8y-form-group [hasError]=\"delayErrors\">\n      <label translate>Delay</label>\n      <div class=\"input-group\">\n        <input\n          formControlName=\"delay\"\n          type=\"number\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 15\"\n          required\n          (blur)=\"markAsTouched()\"\n        />\n        <div class=\"input-group-btn\">\n          <div class=\"c8y-select-wrapper\">\n            <select formControlName=\"unit\" class=\"form-control\" (blur)=\"markAsTouched()\">\n              <option value=\"seconds\" translate>Seconds</option>\n              <option value=\"milliseconds\" translate>Milliseconds</option>\n            </select>\n            <span></span>\n          </div>\n        </div>\n      </div>\n      <c8y-messages *ngIf=\"delayErrors\">\n        <c8y-message *ngIf=\"delayErrors.required\" translate>\n          This field is required.\n        </c8y-message>\n        <c8y-message\n          *ngIf=\"delayErrors.min && !delayErrors.required\"\n          translate\n          ngNonBindable\n          [translateParams]=\"{ delay: minDelay }\"\n        >\n          Minimum value is {{ delay }}.\n        </c8y-message>\n      </c8y-messages>\n    </c8y-form-group>\n  </div>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return OperationSchedulerComponent_1; })
                },
                {
                    provide: NG_VALIDATORS,
                    multi: true,
                    useExisting: forwardRef(function () { return OperationSchedulerComponent_1; })
                }
            ]
        })
    ], OperationSchedulerComponent);
    return OperationSchedulerComponent;
}());

/**
 * This module provides components for scheduling bulk operations.
 */
var BulkOperationSchedulerModule = /** @class */ (function () {
    function BulkOperationSchedulerModule() {
    }
    BulkOperationSchedulerModule = __decorate([
        NgModule({
            imports: [CoreModule, ReactiveFormsModule, BsDatepickerModule, TimepickerModule],
            providers: [],
            declarations: [OperationSchedulerComponent],
            entryComponents: [OperationSchedulerComponent],
            exports: [OperationSchedulerComponent]
        })
    ], BulkOperationSchedulerModule);
    return BulkOperationSchedulerModule;
}());

var OperationSummaryComponent = /** @class */ (function () {
    function OperationSummaryComponent(inventoryService) {
        this.inventoryService = inventoryService;
        this.deviceCount = 0;
        this.displayDeviceCount = false;
    }
    Object.defineProperty(OperationSummaryComponent.prototype, "deviceQueryString", {
        set: function (query) {
            var _this = this;
            this.displayDeviceCount = true;
            var filters = {
                q: query || '',
                pageSize: 1,
                currentPage: 1,
                withTotalPages: true
            };
            this.inventoryService
                .list(filters)
                .then(function (result) { return (_this.deviceCount = result.paging.totalPages); });
        },
        enumerable: true,
        configurable: true
    });
    OperationSummaryComponent.ctorParameters = function () { return [
        { type: InventoryService }
    ]; };
    __decorate([
        Input()
    ], OperationSummaryComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], OperationSummaryComponent.prototype, "description", void 0);
    __decorate([
        Input()
    ], OperationSummaryComponent.prototype, "deviceQueryString", null);
    OperationSummaryComponent = __decorate([
        Component({
            selector: 'c8y-operation-summary',
            template: "<div class=\"row\">\n  <div class=\"col-md-12 text-center\">\n    <p>{{ name | translate }}</p>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-md-offset-4 text-center\">\n        <h4 class=\"m-t-16 m-b-8 text-truncate\" title=\"{{ description | translate }}\">{{ description | translate }}</h4>\n      </div>\n    </div>\n    <span\n      class=\"text-muted\"\n      [ngPlural]=\"deviceCount\"\n      *ngIf=\"displayDeviceCount && deviceCount !== undefined && deviceCount !== null\"\n    >\n      <ng-template ngPluralCase=\"=0\">\n        <span translate>No devices selected</span>\n      </ng-template>\n      <ng-template ngPluralCase=\"=1\">\n        <span translate>1 device selected</span>\n      </ng-template>\n      <ng-template ngPluralCase=\"other\">\n        <span translate ngNonBindable [translateParams]=\"{ deviceCount: deviceCount }\">\n          {{ deviceCount }} devices selected</span\n        >\n      </ng-template>\n    </span>\n  </div>\n</div>\n"
        })
    ], OperationSummaryComponent);
    return OperationSummaryComponent;
}());

/**
 * This module provides a component for displaying the summary of given bulk operation.
 */
var OperationSummaryModule = /** @class */ (function () {
    function OperationSummaryModule() {
    }
    OperationSummaryModule = __decorate([
        NgModule({
            imports: [CoreModule],
            declarations: [OperationSummaryComponent],
            entryComponents: [OperationSummaryComponent],
            exports: [OperationSummaryComponent]
        })
    ], OperationSummaryModule);
    return OperationSummaryModule;
}());

var SingleOperationModalComponent = /** @class */ (function () {
    function SingleOperationModalComponent(modalRef) {
        this.modalRef = modalRef;
        this.collapsed = false;
        this.readOnly = false;
    }
    SingleOperationModalComponent.ctorParameters = function () { return [
        { type: BsModalRef }
    ]; };
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "collapsed", void 0);
    __decorate([
        Input()
    ], SingleOperationModalComponent.prototype, "readOnly", void 0);
    SingleOperationModalComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-modal',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Single operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-single-operation-list-item\n      [operation]=\"operation\"\n      [collapsed]=\"collapsed\"\n      [readOnly]=\"readOnly\"\n    ></c8y-single-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], SingleOperationModalComponent);
    return SingleOperationModalComponent;
}());

var SingleOperationDetailsService = /** @class */ (function () {
    function SingleOperationDetailsService(operationService, modalService) {
        this.operationService = operationService;
        this.modalService = modalService;
    }
    /**
     * Opens a modal window with the details of given single operation.
     * @param operationOrOperationId Operation's object or id.
     * @param options Additional options:
     * - `collapsed`: boolean - whether the details pane should be initially collapsed
     * - `readOnly`: boolean - whether the details should be displayed in read-only mode
     */
    SingleOperationDetailsService.prototype.openDetails = function (operationOrOperationId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, _a, initialState;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!operationOrOperationId.id) return [3 /*break*/, 1];
                        _a = operationOrOperationId;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.operationService.detail(operationOrOperationId)];
                    case 2:
                        _a = (_b.sent()).data;
                        _b.label = 3;
                    case 3:
                        operation = _a;
                        initialState = __assign({ operation: operation }, options);
                        this.modalService.show(SingleOperationModalComponent, {
                            initialState: initialState,
                            class: 'modal-lg'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationDetailsService.ctorParameters = function () { return [
        { type: OperationService },
        { type: BsModalService }
    ]; };
    SingleOperationDetailsService = __decorate([
        Injectable()
    ], SingleOperationDetailsService);
    return SingleOperationDetailsService;
}());

/**
 * Single operation component displays a single operation's status, description and creationTime.
 *
 * Example:
 *
 * ```html
 * <c8y-single-operation [operation]="operation"></c8y-single-operation>
 * ```
 */
var SingleOperationComponent = /** @class */ (function () {
    function SingleOperationComponent(singleOperationDetailsService) {
        this.singleOperationDetailsService = singleOperationDetailsService;
    }
    SingleOperationComponent.prototype.ngOnInit = function () {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
    };
    SingleOperationComponent.prototype.openDetails = function () {
        this.singleOperationDetailsService.openDetails(this.operation);
    };
    SingleOperationComponent.ctorParameters = function () { return [
        { type: SingleOperationDetailsService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationComponent.prototype, "operation", void 0);
    SingleOperationComponent = __decorate([
        Component({
            selector: 'c8y-single-operation',
            template: "<div class=\"c8y-list--group\" *ngIf=\"operation\">\n  <a class=\"c8y-list__item\">\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i\n          [c8yIcon]=\"statusIcons[operation.status]\"\n          [ngClass]=\"statusClasses[operation.status]\"\n          [tooltip]=\"operation.status?.toString() | translate\"\n          placement=\"right\"\n          container=\"body\"\n        ></i>\n      </div>\n      <div class=\"c8y-list__item__body p-r-16\">\n        <div class=\"content-flex-40\">\n          <div class=\"col-8\">\n            <button\n              class=\"btn-clean text-truncate\"\n              (click)=\"openDetails()\"\n              title=\"{{ operation.description | translate }}\"\n            >\n              {{ operation.description | translate }}\n            </button>\n          </div>\n          <div class=\"col-4 text-muted\">\n            <small class=\"icon-flex\">\n              <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n              <span>{{ operation.creationTime | c8yDate }}</span>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  </a>\n</div>\n"
        })
    ], SingleOperationComponent);
    return SingleOperationComponent;
}());

var SingleOperationListItemComponent = /** @class */ (function () {
    function SingleOperationListItemComponent(router, operationService, alertService) {
        this.router = router;
        this.operationService = operationService;
        this.alertService = alertService;
        this.collapsed = true;
        this.readOnly = false;
        this.tabs = [];
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
        this.OperationStatus = OperationStatus;
    }
    Object.defineProperty(SingleOperationListItemComponent.prototype, "displayedDescription", {
        get: function () {
            var commandText = get(this.operation, 'c8y_Command.text');
            var opDescription = get(this.operation, 'description');
            return commandText || opDescription || gettext('(no command text or description available)');
        },
        enumerable: true,
        configurable: true
    });
    SingleOperationListItemComponent.prototype.ngOnInit = function () {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
        this.tabs = [
            {
                label: gettext('Details'),
                icon: 'asterisk',
                template: this.detailsTabTemplate
            },
            {
                label: gettext('History of changes'),
                icon: 'archive',
                template: this.historyOfChangesTabTemplate
            }
        ];
        this.selectedTab = this.tabs[0];
    };
    SingleOperationListItemComponent.prototype.scheduleAsBulkOperation = function () {
        this.router.navigateByUrl("/devicecontrol/single/create-bulk/" + this.operation.id);
    };
    SingleOperationListItemComponent.prototype.cancel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var operationAfterUpdate, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.operationService.update({
                                id: this.operation.id,
                                status: OperationStatus.FAILED,
                                failureReason: gettext('Operation cancelled by user.')
                            })];
                    case 1:
                        operationAfterUpdate = (_a.sent()).data;
                        assign(this.operation, operationAfterUpdate);
                        this.alertService.success(gettext('Operation cancelled.'));
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationListItemComponent.ctorParameters = function () { return [
        { type: Router },
        { type: OperationService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "collapsed", void 0);
    __decorate([
        Input()
    ], SingleOperationListItemComponent.prototype, "readOnly", void 0);
    __decorate([
        ViewChild('listItem', { static: true })
    ], SingleOperationListItemComponent.prototype, "listItem", void 0);
    __decorate([
        ViewChild('details', { static: true })
    ], SingleOperationListItemComponent.prototype, "detailsTabTemplate", void 0);
    __decorate([
        ViewChild('historyOfChanges', { static: true })
    ], SingleOperationListItemComponent.prototype, "historyOfChangesTabTemplate", void 0);
    SingleOperationListItemComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-list-item',
            template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !collapsed }\"\n  [collapsed]=\"collapsed\"\n  #listItem\n  id=\"single-operation-{{ operation.id }}\"\n>\n  <c8y-li-icon>\n    <i [c8yIcon]=\"statusIcons[operation.status]\" [ngClass]=\"statusClasses[operation.status]\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-6\">\n      <span class=\"text-truncate\" title=\"{{ displayedDescription | translate }}\">\n        {{ displayedDescription | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\"></div>\n    <div class=\"col-3\">\n      <div class=\"m-r-16\">\n        <small class=\"icon-flex\">\n          <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n          <span>\n            {{ operation.creationTime | c8yDate }}\n          </span>\n        </small>\n      </div>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"exchange\" class=\"m-r-4\"></i>\n        <span>\n          <a href=\"#/device/{{ operation.deviceId }}\">{{ operation.deviceName }}</a>\n        </span>\n      </small>\n    </div>\n  </div>\n  <ng-container>\n    <c8y-li-action\n      label=\"{{ 'Schedule as bulk operation' | translate }}\"\n      (click)=\"scheduleAsBulkOperation()\"\n      icon=\"c8y-energy\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"!readOnly && operation.status === OperationStatus.PENDING\"\n      label=\"{{ 'Cancel`operation`' | translate }}\"\n      (click)=\"cancel()\"\n      icon=\"times\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li [ngClass]=\"{ active: selectedTab === tab }\" *ngFor=\"let tab of tabs\">\n          <button [title]=\"tab.label | translate\" (click)=\"selectedTab = tab\" class=\"btn-clean\">\n            <i [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.label | translate }}</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n\n    <ng-container *ngTemplateOutlet=\"selectedTab.template\"></ng-container>\n\n    <ng-template #details>\n      <c8y-single-operation-details [operation]=\"operation\" [readOnly]=\"readOnly\">\n      </c8y-single-operation-details>\n    </ng-template>\n\n    <ng-template #historyOfChanges>\n      <c8y-audit-log [source]=\"operation.id\"></c8y-audit-log>\n    </ng-template>\n  </c8y-li-collapse>\n</c8y-li>\n"
        })
    ], SingleOperationListItemComponent);
    return SingleOperationListItemComponent;
}());

var SingleOperationDetailsComponent = /** @class */ (function () {
    function SingleOperationDetailsComponent(bulkOperationDetailsService) {
        this.bulkOperationDetailsService = bulkOperationDetailsService;
        this.readOnly = false;
    }
    SingleOperationDetailsComponent.prototype.openBulkOperationDetails = function () {
        this.bulkOperationDetailsService.openDetails(this.operation.bulkOperationId);
    };
    SingleOperationDetailsComponent.ctorParameters = function () { return [
        { type: BulkOperationDetailsService$1 }
    ]; };
    __decorate([
        Input()
    ], SingleOperationDetailsComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationDetailsComponent.prototype, "readOnly", void 0);
    SingleOperationDetailsComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-details',
            template: "<div class=\"row\">\n  <div class=\"col-sm-3\">\n    <div class=\"legend form-block\" translate>\n      Details\n    </div>\n    <ul class=\"list-unstyled small\">\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\" *ngIf=\"operation.bulkOperationId\">\n        <label class=\"small m-0 m-r-4\" translate>Bulk operation</label>\n        <span class=\"flex-item-right\">\n          <a class=\"pointer\" role=\"button\" (click)=\"openBulkOperationDetails()\" translate\n            >See details</a\n          >\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small m-0 m-r-4\" translate>Status</label>\n        <span class=\"flex-item-right\">{{ operation.status.toString() | translate }}</span>\n      </li>\n      <li *ngIf=\"operation.failureReason\" class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small m-0 m-r-4\" translate>Failure reason</label>\n        <span class=\"flex-item-right\">{{ operation.failureReason | translate }}</span>\n      </li>\n      <li *ngIf=\"operation.c8y_Command\" class=\"p-t-4 p-b-4 flex-row separator-bottom wrap\">\n        <label class=\"small flex-item-top m-r-4\" translate>Result</label>\n        <span class=\"flex-item-right\">{{ operation.c8y_Command.result }}</span>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-9\">\n    <div class=\"legend form-block\" translate>\n      Operation\n    </div>\n    <pre class=\"p-16\">{{ operation | json }}</pre>\n  </div>\n</div>\n"
        })
    ], SingleOperationDetailsComponent);
    return SingleOperationDetailsComponent;
}());

/**
 * This module allows to display details of a single operation in a modal.
 */
var SingleOperationDetailsModule = /** @class */ (function () {
    function SingleOperationDetailsModule() {
    }
    SingleOperationDetailsModule = __decorate([
        NgModule({
            imports: [
                CoreModule,
                PopoverModule,
                TooltipModule,
                CollapseModule,
                BulkOperationsListModule$1,
                BulkOperationsServiceModule$1
            ],
            providers: [SingleOperationDetailsService],
            declarations: [
                SingleOperationComponent,
                SingleOperationModalComponent,
                SingleOperationListItemComponent,
                SingleOperationDetailsComponent
            ],
            entryComponents: [
                SingleOperationComponent,
                SingleOperationModalComponent,
                SingleOperationListItemComponent,
                SingleOperationDetailsComponent
            ],
            exports: [SingleOperationComponent]
        })
    ], SingleOperationDetailsModule);
    return SingleOperationDetailsModule;
}());

var StatusFilterComponent = /** @class */ (function () {
    function StatusFilterComponent() {
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    Object.defineProperty(StatusFilterComponent.prototype, "options", {
        /** List of filter options to be displayed */
        set: function (options) {
            this.statusOptions = (options || []).map(function (option) { return ({ selected: false, option: option }); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "_multiple", {
        /**
         * Allows multiple options to be active simultaneosly.
         */
        set: function (multiple) {
            this.multiple = coerceBooleanProperty(multiple);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "_small", {
        /** Display the filter as a small button group */
        set: function (small) {
            this.small = coerceBooleanProperty(small);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "displaySmall", {
        get: function () {
            return this.small;
        },
        enumerable: true,
        configurable: true
    });
    StatusFilterComponent.prototype.changeFilter = function (option) {
        this.isAllButtonSelected = false;
        var emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(function (op) { return op !== option; }).forEach(function (op) { return (op.selected = false); });
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    };
    StatusFilterComponent.prototype.removeFilter = function () {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(function (op) { return (op.selected = false); });
        this.emitSelectedOptions();
    };
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `IStatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    StatusFilterComponent.prototype.preset = function (filters, emit) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        var firstSelected = false;
        this.statusOptions.forEach(function (option) { return (option.selected = false); });
        this.statusOptions
            .filter(function (option) { return (filters || []).map(function (o) { return o.label; }).includes(option.option.label); })
            .filter(function () {
            // only first option passed will be set in single selection mode
            var include = _this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(function (option) { return (option.selected = true); });
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    };
    StatusFilterComponent.prototype.reset = function () {
        this.removeFilter();
    };
    StatusFilterComponent.prototype.activeFilters = function () {
        return this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; });
    };
    StatusFilterComponent.prototype.isFilterApplied = function () {
        return this.statusOptions.some(function (option) { return option.selected; });
    };
    StatusFilterComponent.prototype.emitSelectedOptions = function () {
        this.onFilterChanged.emit(this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; }));
    };
    __decorate([
        Input()
    ], StatusFilterComponent.prototype, "options", null);
    __decorate([
        Input('multiple')
    ], StatusFilterComponent.prototype, "_multiple", null);
    __decorate([
        Input('small')
    ], StatusFilterComponent.prototype, "_small", null);
    __decorate([
        HostBinding('class.btn-group-sm')
    ], StatusFilterComponent.prototype, "displaySmall", null);
    __decorate([
        Output()
    ], StatusFilterComponent.prototype, "onFilterChanged", void 0);
    StatusFilterComponent = __decorate([
        Component({
            selector: 'c8y-status-filter',
            template: "<button\n  *ngFor=\"let option of statusOptions\"\n  class=\"btn btn-default\"\n  [ngClass]=\"{ active: option.selected }\"\n  tooltip=\"{{ option.option?.label | translate }}\"\n  container=\"body\"\n  (click)=\"changeFilter(option)\"\n>\n  <i [class]=\"option.option?.iconClass\"></i>\n  <span *ngIf=\"option.selected\" class=\"m-8\">{{ option.option?.label | translate }}</span>\n</button>\n<button\n  class=\"btn btn-default\"\n  title=\"{{ 'All' | translate }}\"\n  [ngClass]=\"{ active: isAllButtonSelected }\"\n  (click)=\"removeFilter()\"\n>\n  {{ 'All' | translate }}\n</button>\n",
            host: { class: 'btn-group' }
        })
    ], StatusFilterComponent);
    return StatusFilterComponent;
}());

/**
 * This module provides a component for selecting status filter.
 */
var StatusFilterModule = /** @class */ (function () {
    function StatusFilterModule() {
    }
    StatusFilterModule = __decorate([
        NgModule({
            imports: [CoreModule, TooltipModule],
            declarations: [StatusFilterComponent],
            entryComponents: [StatusFilterComponent],
            exports: [StatusFilterComponent]
        })
    ], StatusFilterModule);
    return StatusFilterModule;
}());

var BulkOperationType;
(function (BulkOperationType) {
    BulkOperationType["SOFTWARE"] = "software";
    BulkOperationType["FIRMWARE"] = "firmware";
    BulkOperationType["CONFIGURATION"] = "configuration";
    BulkOperationType["DEVICE_PROFILE"] = "device-profile";
})(BulkOperationType || (BulkOperationType = {}));

var baseUrl = 'devicecontrol/bulk/creation/';
var HOOK_LIST_BULK_TYPE = new InjectionToken('LIST_BULK_TYPE');
var C8Y_BULK_TYPES = [
    {
        type: BulkOperationType.CONFIGURATION,
        c8yIcon: 'cogs',
        name: gettext('Configuration update'),
        path: baseUrl + "configuration",
        component: undefined,
        fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],
        selected: false
    },
    {
        type: BulkOperationType.FIRMWARE,
        c8yIcon: 'c8y-firmware',
        name: gettext('Firmware update'),
        path: baseUrl + "firmware",
        component: undefined,
        fragments: ['c8y_Firmware'],
        selected: false
    },
    {
        type: BulkOperationType.SOFTWARE,
        c8yIcon: 'c8y-tools',
        name: gettext('Software update'),
        path: baseUrl + "software",
        component: undefined,
        fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
        selected: false
    },
    {
        type: BulkOperationType.DEVICE_PROFILE,
        c8yIcon: 'c8y-device-profile',
        name: gettext('Apply device profile'),
        path: baseUrl + "device-profile",
        component: undefined,
        fragments: ['c8y_DeviceProfile'],
        selected: false
    }
];
var ɵ0 = function (flattened, current) { return flattened.concat(current.fragments); };
var C8Y_BULK_TYPE_FRAGMENTS = C8Y_BULK_TYPES.reduce(ɵ0, []);
var BulkOperationsService = /** @class */ (function () {
    function BulkOperationsService(operationBulkService, operationService, inventoryService, location, bulkTypes) {
        this.operationBulkService = operationBulkService;
        this.operationService = operationService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.bulkTypes = bulkTypes;
        this.DD_LOW_COUNT = 10;
        this.firmwareId = new Subject();
        if (bulkTypes && bulkTypes.length > 0) {
            this.bulkTypes = bulkTypes.map(function (type) {
                if (isUndefined(type.selected)) {
                    type.selected = false;
                }
                return type;
            });
        }
    }
    BulkOperationsService.prototype.getBulkOperations = function (customFilter) {
        if (customFilter === void 0) { customFilter = {}; }
        var filter = __assign({ withTotalPages: true, withDeleted: true, pageSize: 50 }, customFilter);
        return this.operationBulkService.list(filter);
    };
    BulkOperationsService.prototype.getBulkOperationById = function (bulkOperationId) {
        return this.operationBulkService.detail(bulkOperationId);
    };
    BulkOperationsService.prototype.createBulkOperation = function (bulkOperation) {
        return this.operationBulkService.create(bulkOperation);
    };
    BulkOperationsService.prototype.deleteBulkOperation = function (bulkOperationId) {
        return this.operationBulkService.delete(bulkOperationId);
    };
    BulkOperationsService.prototype.updateBulkOperation = function (bulkOperation) {
        return this.operationBulkService.update(bulkOperation);
    };
    BulkOperationsService.prototype.getOperation = function (id) {
        return this.operationService.detail(id);
    };
    BulkOperationsService.prototype.returnToBulkOperationOverview = function () {
        this.location.back();
    };
    BulkOperationsService.prototype.setBulkTypes = function (list) {
        this.bulkTypes = list;
    };
    BulkOperationsService.prototype.getBulkTypes = function () {
        return this.bulkTypes;
    };
    BulkOperationsService.prototype.setFirmwareId = function (id) {
        this.firmwareId.next(id);
    };
    BulkOperationsService.prototype.createGroup = function (deviceQueryDataString) {
        var dynamicGroup = {
            name: 'Bulk operations group',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: { invisible: {} },
            c8y_DeviceQueryString: deviceQueryDataString
        };
        return this.inventoryService.create(dynamicGroup);
    };
    BulkOperationsService.prototype.scheduleBulkOperation = function (deviceQueryString, details) {
        return __awaiter(this, void 0, void 0, function () {
            var dynamicGroup, bulkOperation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createGroup(deviceQueryString)];
                    case 1:
                        dynamicGroup = _a.sent();
                        bulkOperation = {
                            groupId: dynamicGroup.data.id,
                            operationPrototype: details.prototype,
                            creationRamp: details.schedule.delayInSeconds,
                            startDate: details.schedule.scheduledDate.toISOString(),
                            note: details.note
                        };
                        return [4 /*yield*/, this.createBulkOperation(bulkOperation)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationsService.prototype.getSingleOperationsByStatus = function (status, bulkOperationId) {
        var filter = {
            withTotalPages: true,
            bulkOperationId: bulkOperationId,
            status: (status && status.toUpperCase()) || ''
        };
        return this.operationService.list(filter);
    };
    BulkOperationsService.prototype.createSingleOperation = function (operation) {
        return this.operationService.create(operation);
    };
    BulkOperationsService.prototype.updateSingleOperation = function (partialUpdateObject) {
        return this.operationService.update(partialUpdateObject);
    };
    BulkOperationsService.prototype.getManagedObject = function (deviceId) {
        return this.inventoryService.detail(deviceId);
    };
    BulkOperationsService.prototype.retrieveBulkOperationType = function (operation) {
        var type;
        C8Y_BULK_TYPES.some(function (t) {
            if (t.fragments.some(function (fragment) { return has(operation, fragment); })) {
                type = t.type;
                return true;
            }
        });
        return type;
    };
    BulkOperationsService.ctorParameters = function () { return [
        { type: OperationBulkService },
        { type: OperationService },
        { type: InventoryService },
        { type: Location },
        { type: Array, decorators: [{ type: Inject, args: [HOOK_LIST_BULK_TYPE,] }] }
    ]; };
    BulkOperationsService = __decorate([
        Injectable(),
        __param(4, Inject(HOOK_LIST_BULK_TYPE))
    ], BulkOperationsService);
    return BulkOperationsService;
}());

var ɵ0$1 = C8Y_BULK_TYPES;
/**
 * This module provides a shared bulk operations service.
 */
var BulkOperationsServiceModule = /** @class */ (function () {
    function BulkOperationsServiceModule() {
    }
    BulkOperationsServiceModule = __decorate([
        NgModule({
            imports: [],
            providers: [BulkOperationsService, { provide: HOOK_LIST_BULK_TYPE, useValue: ɵ0$1 }]
        })
    ], BulkOperationsServiceModule);
    return BulkOperationsServiceModule;
}());

var BulkOperationWrapperComponent = /** @class */ (function () {
    function BulkOperationWrapperComponent(bulkOperationDetailsService, modalRef) {
        this.bulkOperationDetailsService = bulkOperationDetailsService;
        this.modalRef = modalRef;
    }
    BulkOperationWrapperComponent.ctorParameters = function () { return [
        { type: BulkOperationDetailsService },
        { type: BsModalRef }
    ]; };
    __decorate([
        Input()
    ], BulkOperationWrapperComponent.prototype, "bulkOperation", void 0);
    BulkOperationWrapperComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operations-wrapper',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header\">\n    <h3>{{ 'Bulk operation details' | translate }}</h3>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      [detailsCollapsed]=\"false\"\n      [readOnly]=\"true\"\n      (showFailedOperation)=\"bulkOperationDetailsService.openDetails($event)\"\n    ></c8y-bulk-operation-list-item>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Close' | translate }}\" class=\"btn btn-default\" (click)=\"modalRef.hide()\">\n      {{ 'Close' | translate }}\n    </button>\n  </div>\n</div>\n"
        })
    ], BulkOperationWrapperComponent);
    return BulkOperationWrapperComponent;
}());

var BulkOperationDetailsService = /** @class */ (function () {
    function BulkOperationDetailsService(bulkOperationsService, modalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modalService = modalService;
    }
    BulkOperationDetailsService.prototype.openDetails = function (bulkOperationId) {
        return __awaiter(this, void 0, void 0, function () {
            var bulkOperation, initialState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bulkOperationsService.getBulkOperationById(bulkOperationId)];
                    case 1:
                        bulkOperation = (_a.sent()).data;
                        initialState = { bulkOperation: bulkOperation };
                        this.modalService.show(BulkOperationWrapperComponent, {
                            initialState: initialState,
                            class: 'modal-lg'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationDetailsService.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: BsModalService }
    ]; };
    BulkOperationDetailsService = __decorate([
        Injectable()
    ], BulkOperationDetailsService);
    return BulkOperationDetailsService;
}());

var BulkOperationsModalComponent = /** @class */ (function () {
    function BulkOperationsModalComponent(bsModalRef, resolver) {
        this.bsModalRef = bsModalRef;
        this.resolver = resolver;
        this.showComponent = false;
    }
    BulkOperationsModalComponent.prototype.cancel = function () {
        this.bsModalRef.hide();
    };
    BulkOperationsModalComponent.prototype.createComponent = function (item) {
        if (item && item.component) {
            this.showComponent = true;
            var factory = this.resolver.resolveComponentFactory(item.component);
            this.container.createComponent(factory);
        }
    };
    BulkOperationsModalComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        ViewChild('container', { static: false, read: ViewContainerRef })
    ], BulkOperationsModalComponent.prototype, "container", void 0);
    BulkOperationsModalComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operations-modal',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4 translate>New bulk operation</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body text-center\" [hidden]=\"showComponent\">\n      <h4 translate>Select one of the available options</h4>\n      <p c8y-guide-docs>\n        <small forceHtmlTranslate ngNonBindable>\n          Check the\n          <a c8y-guide-href=\"users-guide/device-management/#bulk-operation-wizard\"\n            >User guide`KEEP_ORIGINAL`</a\n          >\n          for more details.</small\n        >\n      </p>\n    </div>\n\n    <c8y-bulk-operation-type-list\n      (onCustomType)=\"createComponent($event)\"\n    ></c8y-bulk-operation-type-list>\n    <template #container></template>\n  </div>\n  <div class=\"modal-footer\" [hidden]=\"showComponent\">\n    <button\n      (click)=\"cancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n  </div>\n</div>\n"
        })
    ], BulkOperationsModalComponent);
    return BulkOperationsModalComponent;
}());

var BulkOperationModalsService = /** @class */ (function () {
    function BulkOperationModalsService(bsModalService) {
        this.bsModalService = bsModalService;
    }
    BulkOperationModalsService.prototype.showNewBulkOperationModal = function () {
        this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {
            backdrop: 'static',
            class: 'modal-sm'
        });
    };
    BulkOperationModalsService.prototype.hideNewBulkOperationModal = function () {
        if (this.bsModalRef) {
            this.bsModalRef.hide();
        }
    };
    BulkOperationModalsService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    BulkOperationModalsService = __decorate([
        Injectable()
    ], BulkOperationModalsService);
    return BulkOperationModalsService;
}());

var BulkOperationsRescheduleModalComponent = /** @class */ (function () {
    function BulkOperationsRescheduleModalComponent(bsModalRef, bulkOperationsService, alert) {
        this.bsModalRef = bsModalRef;
        this.bulkOperationsService = bulkOperationsService;
        this.alert = alert;
        this.closeSubject = new Subject();
    }
    BulkOperationsRescheduleModalComponent.prototype.ngOnInit = function () {
        this.modalTitle = this.getTitle();
    };
    BulkOperationsRescheduleModalComponent.prototype.onDateAndDelaySelect = function ($event) {
        this.dateAndDelay = $event;
    };
    BulkOperationsRescheduleModalComponent.prototype.getTitle = function () {
        return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');
    };
    BulkOperationsRescheduleModalComponent.prototype.onCancel = function () {
        this.bsModalRef.hide();
    };
    BulkOperationsRescheduleModalComponent.prototype.onSave = function () {
        return __awaiter(this, void 0, void 0, function () {
            var newBulkOperation, er_1, er_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();
                        this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;
                        if (!this.isRetryOperation) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.bulkOperationsService.createBulkOperation(this.bulkOperation)];
                    case 2:
                        newBulkOperation = _a.sent();
                        this.alert.success(gettext('Successfully rescheduled for a retry.'));
                        return [3 /*break*/, 4];
                    case 3:
                        er_1 = _a.sent();
                        this.alert.addServerFailure(er_1);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation(this.bulkOperation)];
                    case 6:
                        newBulkOperation = _a.sent();
                        this.alert.success(gettext('Successfully rescheduled.'));
                        return [3 /*break*/, 8];
                    case 7:
                        er_2 = _a.sent();
                        this.alert.addServerFailure(er_2);
                        return [3 /*break*/, 8];
                    case 8:
                        // send back to component from which modal was called
                        this.closeSubject.next(newBulkOperation.data);
                        this.bsModalRef.hide();
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationsRescheduleModalComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: BulkOperationsService$1 },
        { type: AlertService }
    ]; };
    BulkOperationsRescheduleModalComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operations-reschedule-modal',
            template: "<div class=\"viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <h1 class=\"c8y-icon c8y-icon-energy\"></h1>\n    <h4>{{ modalTitle | translate }}</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\">\n      <div class=\"text-center\">\n        <c8y-operation-summary\n          [description]=\"bulkOperation.operationPrototype.description\"\n        ></c8y-operation-summary>\n      </div>\n      <div class=\"p-t-16 center-block\" style=\"max-width: 300px;\">\n        <c8y-operation-scheduler\n          [(ngModel)]=\"dateAndDelay\"\n          #scheduler=\"ngModel\"\n        ></c8y-operation-scheduler>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button\n      (click)=\"onCancel()\"\n      type=\"button\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n    >\n      <span translate>Cancel</span>\n    </button>\n    <button\n      id=\"save-btn\"\n      (click)=\"onSave()\"\n      type=\"button\"\n      class=\"btn btn-primary\"\n      title=\"{{ 'Save' | translate }}\"\n      [disabled]=\"scheduler?.control?.errors\"\n    >\n      <span translate>Save</span>\n    </button>\n  </div>\n</div>\n"
        })
    ], BulkOperationsRescheduleModalComponent);
    return BulkOperationsRescheduleModalComponent;
}());

var BULK_OPERATION_STATUS_LABELS = {
    SCHEDULED: gettext('Scheduled'),
    EXECUTING: gettext('Executing'),
    CANCELED: gettext('Canceled'),
    FAILED: gettext('Completed with failures'),
    SUCCESSFUL: gettext('Completed successfully')
};
var BULK_OPERATION_STATUS_OPTIONS = [
    {
        label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,
        generalStatus: [OperationBulkGeneralStatus.SCHEDULED],
        iconClass: 'fa fa-calendar text-info'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.EXECUTING,
        generalStatus: [
            OperationBulkGeneralStatus.EXECUTING,
            OperationBulkGeneralStatus.EXECUTING_WITH_ERROR
        ],
        iconClass: 'fa fa-refresh text-primary'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.CANCELED,
        generalStatus: [OperationBulkGeneralStatus.CANCELED],
        iconClass: 'fa fa-ban text-muted'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.FAILED,
        generalStatus: [OperationBulkGeneralStatus.FAILED],
        iconClass: 'fa fa-exclamation-triangle text-danger'
    },
    {
        label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,
        generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],
        iconClass: 'fa fa-check text-success'
    }
];

var BulkOperationListItemComponent = /** @class */ (function () {
    function BulkOperationListItemComponent(bulkOperationsService, modal, alert, bsModalService) {
        this.bulkOperationsService = bulkOperationsService;
        this.modal = modal;
        this.alert = alert;
        this.bsModalService = bsModalService;
        this.detailsCollapsed = true;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
        this.reload = new EventEmitter();
        this.refreshLoading = false;
        this.bulkOperationGeneralStatus = OperationBulkGeneralStatus;
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.finishDatePopoverText = gettext('Approximate date, estimated based on the bulk operation settings.');
        this.progressBarClass = 'progress';
        this.progressBarStatus = 0;
    }
    BulkOperationListItemComponent.prototype.ngOnInit = function () {
        this.iconClass = this.getIconClass();
        this.finishDate = this.calculateFinishDateMs();
        this.setProgressBar();
    };
    BulkOperationListItemComponent.prototype.ngOnChanges = function (changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.iconClass = this.getIconClass();
            this.setProgressBar();
        }
    };
    BulkOperationListItemComponent.prototype.getIconClass = function () {
        var _this = this;
        return this.bulkOperationStatusOptions.find(function (statusOption) {
            return statusOption.generalStatus.includes(_this.bulkOperation.generalStatus);
        }).iconClass;
    };
    BulkOperationListItemComponent.prototype.calculateFinishDateMs = function () {
        var startDateMs = new Date(this.bulkOperation.startDate).getTime();
        var creationRampMs = this.bulkOperation.creationRamp * 1000;
        return startDateMs + creationRampMs * this.bulkOperation.progress.all;
    };
    BulkOperationListItemComponent.prototype.progressBarProgressFn = function () {
        return (((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /
            this.bulkOperation.progress.all) *
            100);
    };
    BulkOperationListItemComponent.prototype.setProgressBar = function () {
        var staticContentOfClass = 'progress-bar progress-striped active progress-bar';
        var progressBarState = {
            EXECUTING: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: staticContentOfClass + "-primary",
                progressBarStatus: this.progressBarProgressFn()
            },
            EXECUTING_WITH_ERROR: {
                progressBarClass: 'progress progress-striped active',
                progressBarColor: staticContentOfClass + "-danger",
                progressBarStatus: this.progressBarProgressFn()
            },
            FAILED: {
                progressBarClass: 'progress',
                progressBarColor: staticContentOfClass + "-danger",
                progressBarStatus: 100
            },
            SUCCESSFUL: {
                progressBarClass: 'progress',
                progressBarColor: staticContentOfClass + "-success",
                progressBarStatus: 100
            }
        };
        assign(this, progressBarState[this.bulkOperation.generalStatus]);
    };
    BulkOperationListItemComponent.prototype.editSchedule = function () {
        var rescheduledOperation = cloneDeep(this.bulkOperation);
        var initialState = {
            bulkOperation: rescheduledOperation
        };
        var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
    };
    BulkOperationListItemComponent.prototype.cancelBulkOperation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var er_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.modal.confirm(gettext('Cancel bulk operation'), gettext('You are about to cancel the bulk operation. Do you want to proceed?'), Status.DANGER)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id)];
                    case 2:
                        _a.sent();
                        this.reload.emit();
                        this.alert.success(gettext('Operation canceled.'));
                        return [3 /*break*/, 4];
                    case 3:
                        er_1 = _a.sent();
                        this.alert.addServerFailure(er_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationListItemComponent.prototype.retryFailedOperation = function () {
        var _this = this;
        var clonedBulk = cloneDeep(this.bulkOperation);
        // change the id to failedparentId similar to the logic in deviceBulkControl.service.js
        delete clonedBulk.groupId;
        clonedBulk.failedParentId = this.bulkOperation.id;
        // show reschdedule modal:
        var initialState = {
            bulkOperation: clonedBulk,
            isRetryOperation: true
        };
        var modalOptions = { initialState: initialState, class: 'modal-sm', backdrop: 'static' };
        this.bsModalRef = this.bsModalService.show(BulkOperationsRescheduleModalComponent, modalOptions);
        this.bsModalRef.content.closeSubject.subscribe(function () {
            _this.reload.emit();
        });
    };
    BulkOperationListItemComponent.prototype.setToSuccessful = function () {
        return __awaiter(this, void 0, void 0, function () {
            var er_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.modal.confirm(gettext('Set manually bulk operation to SUCCESSFUL'), gettext('You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'), Status.DANGER)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.bulkOperationsService.updateBulkOperation({
                                id: this.bulkOperation.id,
                                generalStatus: OperationBulkGeneralStatus.SUCCESSFUL
                            })];
                    case 2:
                        _a.sent();
                        this.reload.emit();
                        this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));
                        return [3 /*break*/, 4];
                    case 3:
                        er_2 = _a.sent();
                        this.alert.addServerFailure(er_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationListItemComponent.prototype.openFailedOperation = function (failedParentId) {
        this.showFailedOperation.emit(failedParentId);
    };
    BulkOperationListItemComponent.prototype.isStatusScheduled = function () {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;
    };
    BulkOperationListItemComponent.prototype.isStatusExecutingOrExecutingWithError = function () {
        return (this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||
            this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR);
    };
    BulkOperationListItemComponent.prototype.allOperationsCreated = function () {
        return (this.bulkOperation.progress.all ===
            this.bulkOperation.progress.executing +
                this.bulkOperation.progress.failed +
                this.bulkOperation.progress.pending +
                this.bulkOperation.progress.successful);
    };
    BulkOperationListItemComponent.prototype.isStatusCanceled = function () {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;
    };
    BulkOperationListItemComponent.prototype.isStatusFailed = function () {
        return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;
    };
    BulkOperationListItemComponent.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: ModalService },
        { type: AlertService },
        { type: BsModalService }
    ]; };
    __decorate([
        Input()
    ], BulkOperationListItemComponent.prototype, "bulkOperation", void 0);
    __decorate([
        Input()
    ], BulkOperationListItemComponent.prototype, "detailsCollapsed", void 0);
    __decorate([
        Input()
    ], BulkOperationListItemComponent.prototype, "readOnly", void 0);
    __decorate([
        Output()
    ], BulkOperationListItemComponent.prototype, "showFailedOperation", void 0);
    __decorate([
        Output()
    ], BulkOperationListItemComponent.prototype, "reload", void 0);
    __decorate([
        ViewChild('listItem', { static: true })
    ], BulkOperationListItemComponent.prototype, "listItem", void 0);
    BulkOperationListItemComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operation-list-item',
            template: "<c8y-li\n  class=\"c8y-list__item--double-actions\"\n  [ngClass]=\"{ 'c8y-list__item--no-expand': !detailsCollapsed }\"\n  [collapsed]=\"detailsCollapsed\"\n  #listItem\n  id=\"{{ bulkOperation.id }}\"\n>\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-58': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-5\">\n      <span\n        class=\"text-truncate\"\n        title=\"{{ bulkOperation.id }} - {{\n          bulkOperation.operationPrototype.description | translate\n        }}\"\n      >\n        <strong class=\"text-muted m-r-4\">{{ bulkOperation.id }}</strong>\n        {{ bulkOperation.operationPrototype.description | translate }}\n      </span>\n    </div>\n    <div class=\"flex-grow\">\n      <div class=\"m-t-8 visible-xs\"></div>\n      <hr *ngIf=\"isStatusCanceled(); else statusNotCanceled\" class=\"m-t-16 m-b-0\" />\n      <ng-template #statusNotCanceled>\n        <div [class]=\"progressBarClass\" title=\"{{ progressBarStatus | number: '1.0-0' }}%\">\n          <div\n            [class]=\"progressBarColor\"\n            role=\"progressbar\"\n            aria-valuenow=\"0\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            [style.width.%]=\"progressBarStatus\"\n          >\n            <span *ngIf=\"progressBarStatus !== 0\">{{ progressBarStatus | number: '1.0-0' }}%</span>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n    <div class=\"col-4\">\n      <div class=\"p-t-8 visible-xs\"></div>\n      <small *ngIf=\"bulkOperation.progress.successful > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-check-circle text-success m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountSuccessful: bulkOperation.progress.successful }\"\n        >\n          {{ bulkOperationsCountSuccessful }} successful\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.failed > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-warning text-danger m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n        >\n          {{ bulkOperationsCountFailed }} failed\n        </span>\n      </small>\n      <small *ngIf=\"bulkOperation.progress.pending > 0\" class=\"m-r-8 icon-flex\">\n        <i class=\"fa fw fa-clock-o text-primary m-r-4\"></i>\n        <span\n          ngNonBindable\n          translate\n          [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n        >\n          {{ bulkOperationsCountPending }} pending\n        </span>\n      </small>\n    </div>\n  </div>\n  <div class=\"c8y-list__item__footer\">\n    <div class=\"m-r-16\">\n      <span class=\"text-label-small m-r-4\" translate>Start</span>\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>\n          {{ bulkOperation.startDate | c8yDate }}\n        </span>\n      </small>\n    </div>\n    <div class=\"m-r-16\" *ngIf=\"bulkOperationGeneralStatus.CANCELED !== bulkOperation.generalStatus\">\n      <span class=\"text-label-small m-r-4\" translate>Finish</span>\n\n      <small class=\"icon-flex\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        <span>{{ finishDate | c8yDate }}</span>\n      </small>\n      <a\n        container=\"body\"\n        *ngIf=\"isStatusScheduled() || isStatusExecutingOrExecutingWithError()\"\n        class=\"btn-clean m-l-4\"\n        popover=\"{{ finishDatePopoverText | translate }}\"\n        placement=\"right\"\n        outsideClick=\"true\"\n      >\n        <i c8yIcon=\"question-circle-o text-primary\"></i>\n      </a>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!readOnly\">\n    <c8y-li-action\n      *ngIf=\"isStatusScheduled()\"\n      label=\"{{ 'Edit schedule' | translate }}\"\n      (click)=\"editSchedule()\"\n      icon=\"pencil\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"\n        isStatusScheduled() || (isStatusExecutingOrExecutingWithError() && !allOperationsCreated())\n      \"\n      label=\"{{ 'Cancel bulk operation' | translate }}\"\n      (click)=\"cancelBulkOperation()\"\n      icon=\"remove\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Retry failed operations' | translate }}\"\n      (click)=\"retryFailedOperation()\"\n      icon=\"repeat\"\n    >\n    </c8y-li-action>\n    <c8y-li-action\n      *ngIf=\"isStatusFailed()\"\n      label=\"{{ 'Set operation to SUCCESSFUL' | translate }}\"\n      (click)=\"setToSuccessful()\"\n      icon=\"check\"\n    >\n    </c8y-li-action>\n  </ng-container>\n  <c8y-li-collapse class=\"m-b-16\">\n    <c8y-bulk-operation-details-tabs\n      *ngIf=\"!listItem.collapsed\"\n      [bulkOperation]=\"bulkOperation\"\n      [readOnly]=\"readOnly\"\n      (onRetryFailedOperations)=\"retryFailedOperation()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n    >\n    </c8y-bulk-operation-details-tabs>\n  </c8y-li-collapse>\n</c8y-li>\n"
        })
    ], BulkOperationListItemComponent);
    return BulkOperationListItemComponent;
}());

var BulkOperationsListComponent = /** @class */ (function () {
    function BulkOperationsListComponent(realtime, bulkOperationsService, bulkOperationModalsService) {
        var _this = this;
        this.realtime = realtime;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.selectedTypeFilters = this.getTypeFilters();
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.typeFilter$ = new BehaviorSubject(null);
        this.timeFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.bulkOperations$ = combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(tap(function () {
            _this.refreshLoading = true;
        }), switchMap(function (_a) {
            var _b = __read(_a, 2), statusFilters = _b[0], timeFilters = _b[1];
            return _this.filter(statusFilters, timeFilters);
        }), withLatestFrom(this.typeFilter$), map(function (_a) {
            var _b = __read(_a, 2), result = _b[0], typeFilter = _b[1];
            _this.filterPipe = pipe(map(function (data) { return _this.filterByType(data, typeFilter); }));
            return __assign({}, result, { data: _this.filterByType(result.data, typeFilter) });
        }), tap(function () {
            _this.refreshLoading = false;
        }), shareReplay(1));
        this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
    }
    BulkOperationsListComponent.prototype.filterByType = function (bulkOperations, typeFilter) {
        var flattenedFragments = this.flattenFilterFragments(typeFilter);
        if (
        // return data unfiltered if no filters selected...
        !flattenedFragments.length ||
            // ...or when all filters are selected
            this.allFilterFragments.every(function (fragment) { return flattenedFragments.includes(fragment); })) {
            return bulkOperations;
        }
        var filteredData = bulkOperations.filter(function (item) {
            return Object.keys(item.operationPrototype).some(function (key) { return flattenedFragments.includes(key); });
        });
        return filteredData;
    };
    BulkOperationsListComponent.prototype.resetFilter = function () {
        this.statusFilter$.next(null);
        this.timeFilter$.next(null);
        this.typeFilter$.next(null);
        this.datePicker.clearFilter();
        this.selectedTypeFilters = this.getTypeFilters();
        this.statusFilter.statusOptions.map(function (option) {
            option.selected = false;
            return option;
        });
    };
    BulkOperationsListComponent.prototype.isFilterApplied = function () {
        return (this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue());
    };
    BulkOperationsListComponent.prototype.filter = function (statusFilters, timeFilter) {
        var status = statusFilters && statusFilters.length > 0
            ? {
                generalStatus: flatten(statusFilters.map(function (statusFilter) { return statusFilter.generalStatus; }))
            }
            : {};
        var time = timeFilter
            ? __assign({}, (timeFilter.dateFrom && {
                dateFrom: timeFilter.dateFrom.toISOString()
            }), (timeFilter.dateTo && {
                dateTo: timeFilter.dateTo.toISOString()
            })) : {};
        return this.getBulkOperations(__assign({}, status, time));
    };
    BulkOperationsListComponent.prototype.getBulkOperations = function (filter) {
        return this.bulkOperationsService.getBulkOperations(filter);
    };
    BulkOperationsListComponent.prototype.getTypeFilters = function () {
        return this.bulkOperationsService.getBulkTypes();
    };
    BulkOperationsListComponent.prototype.addBulkOperation = function () {
        this.bulkOperationModalsService.showNewBulkOperationModal();
    };
    BulkOperationsListComponent.prototype.openFailedOperation = function (failedParentId) {
        this.listItems.forEach(function (item) {
            if (item.bulkOperation.id === failedParentId) {
                item.listItem.collapsed = false;
                item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    };
    BulkOperationsListComponent.prototype.compareOperations = function (operationA, operationB) {
        return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
    };
    BulkOperationsListComponent.prototype.flattenFilterFragments = function (filters) {
        return (filters || []).reduce(function (flattened, current) { return flattened.concat(current.fragments); }, []);
    };
    BulkOperationsListComponent.ctorParameters = function () { return [
        { type: OperationBulkRealtimeService },
        { type: BulkOperationsService$1 },
        { type: BulkOperationModalsService }
    ]; };
    __decorate([
        ViewChildren(BulkOperationListItemComponent)
    ], BulkOperationsListComponent.prototype, "listItems", void 0);
    __decorate([
        ViewChild('statusFilter', { static: true })
    ], BulkOperationsListComponent.prototype, "statusFilter", void 0);
    __decorate([
        ViewChild(DatePickerComponent, { static: true })
    ], BulkOperationsListComponent.prototype, "datePicker", void 0);
    BulkOperationsListComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operations',
            template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate> Operation type</label>\n  <c8y-select\n    style=\"width: 180px;\"\n    [items]=\"getTypeFilters()\"\n    [selected]=\"selectedTypeFilters\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"btn-group\" [placement]=\"'left'\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n<c8y-action-bar-item itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n  >\n    <i class=\"fa fa-plus-circle\"></i> {{ 'New bulk operation' | translate }}\n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" title=\"{{ 'Reload' | translate }}\" (click)=\"reload$.next()\">\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': refreshLoading }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n<!-- Empty state  -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor\"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\n<!-- No results empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon fa fa-search c8y-icon-duocolor\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"fa\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto';\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
            providers: [OperationBulkRealtimeService]
        })
    ], BulkOperationsListComponent);
    return BulkOperationsListComponent;
}());

var BulkOperationDetailsTabsComponent = /** @class */ (function () {
    function BulkOperationDetailsTabsComponent() {
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.showFailedOperation = new EventEmitter();
        this.tabs = [];
    }
    BulkOperationDetailsTabsComponent.prototype.ngOnInit = function () {
        this.template = this.detailsTemplate;
        this.tabs = [
            {
                label: gettext('Details'),
                path: null,
                icon: 'asterisk',
                template: this.detailsTemplate
            },
            {
                label: gettext('History of changes'),
                path: null,
                icon: 'archive',
                template: this.auditTemplate
            }
        ];
    };
    __decorate([
        Input()
    ], BulkOperationDetailsTabsComponent.prototype, "bulkOperation", void 0);
    __decorate([
        Input()
    ], BulkOperationDetailsTabsComponent.prototype, "readOnly", void 0);
    __decorate([
        Output()
    ], BulkOperationDetailsTabsComponent.prototype, "onRetryFailedOperations", void 0);
    __decorate([
        Output()
    ], BulkOperationDetailsTabsComponent.prototype, "showFailedOperation", void 0);
    __decorate([
        ViewChild('details', { static: true })
    ], BulkOperationDetailsTabsComponent.prototype, "detailsTemplate", void 0);
    __decorate([
        ViewChild('audit', { static: true })
    ], BulkOperationDetailsTabsComponent.prototype, "auditTemplate", void 0);
    BulkOperationDetailsTabsComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operation-details-tabs',
            template: "<div #container class=\"tabContainer\">\n  <ul class=\"nav nav-tabs nav-tabsc8y\">\n    <li [ngClass]=\"{ active: tab.template === template }\" *ngFor=\"let tab of tabs\">\n      <button [title]=\"tab.label | translate\" class=\"btn-clean\" (click)=\"template = tab.template\">\n        <i [c8yIcon]=\"tab.icon\"></i>\n        <span class=\"txt\">{{ tab.label | translate }}</span>\n      </button>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n\n<ng-template #details>\n  <c8y-bulk-operation-details\n    [bulkOperation]=\"bulkOperation\"\n    [readOnly]=\"readOnly\"\n    (showFailedOperation)=\"showFailedOperation.emit($event)\"\n  >\n  </c8y-bulk-operation-details>\n</ng-template>\n\n<ng-template #audit>\n  <c8y-audit-log [source]=\"bulkOperation.id\"></c8y-audit-log>\n</ng-template>\n\n<c8y-single-operations-list\n  [bulkOperation]=\"bulkOperation\"\n  [readOnly]=\"readOnly\"\n  (onRetryFailedOperations)=\"onRetryFailedOperations.emit($event)\"\n  class=\"d-flex d-col\"\n></c8y-single-operations-list>\n"
        })
    ], BulkOperationDetailsTabsComponent);
    return BulkOperationDetailsTabsComponent;
}());

var BulkOperationDetailsComponent = /** @class */ (function () {
    function BulkOperationDetailsComponent() {
        this.allFilterIsSelected = false;
        this.readOnly = false;
        this.showFailedOperation = new EventEmitter();
    }
    BulkOperationDetailsComponent.prototype.scrollToRetriedFromOperation = function (failedOperationId) {
        this.showFailedOperation.emit(failedOperationId);
    };
    __decorate([
        Input()
    ], BulkOperationDetailsComponent.prototype, "bulkOperation", void 0);
    __decorate([
        Input()
    ], BulkOperationDetailsComponent.prototype, "readOnly", void 0);
    __decorate([
        Output()
    ], BulkOperationDetailsComponent.prototype, "showFailedOperation", void 0);
    BulkOperationDetailsComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operation-details',
            template: "<div class=\"row d-flex-md v-fit m-t-16\">\n  <div class=\"col-md-3 flex-item-top\">\n    <div class=\"legend form-block\" translate>\n      Details\n    </div>\n    <ul class=\"list-unstyled small\">\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Start date</label>\n        <span class=\"flex-item-right\">{{ bulkOperation.startDate | c8yDate }}</span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\">\n          {{ 'Delay' | translate }}\n          <a\n            class=\"text-primary\"\n            tooltip=\"{{ 'Delay before sending the operation to the next device.' | translate }}\"\n            container=\"body\"\n          >\n            <i [c8yIcon]=\"'info-circle'\"></i>\n          </a>\n        </label>\n        <span [ngPlural]=\"bulkOperation.creationRamp\" class=\"flex-item-right\">\n          <ng-template ngPluralCase=\"=1\">\n            {{ bulkOperation.creationRamp }} <span translate>second</span>\n          </ng-template>\n          <ng-template ngPluralCase=\"other\">\n            {{ bulkOperation.creationRamp }} <span translate>seconds</span>\n          </ng-template>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small m-0\" translate>Status</label>\n        <span class=\"flex-item-right text-uppercase\">\n          {{ bulkOperation.generalStatus.toString() | translate }}\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\">\n        <label class=\"small flex-item-top\" translate>Result</label>\n        <div class=\"flex-row flex-grow flex-item-right flex-end\">\n          <div class=\"flex-col\">\n            <div *ngIf=\"bulkOperation.progress.successful > 0\" class=\"icon-flex flex-item-left\">\n              <i class=\"fa fw fa-check-circle text-success m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{\n                  bulkOperationsCountSuccessful: bulkOperation.progress.successful\n                }\"\n              >\n                {{ bulkOperationsCountSuccessful }} successful\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left\" *ngIf=\"bulkOperation.progress.failed > 0\">\n              <i class=\"fa fw fa-warning text-danger m-r-4\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountFailed: bulkOperation.progress.failed }\"\n              >\n                {{ bulkOperationsCountFailed }} failed\n              </span>\n            </div>\n            <div class=\"icon-flex flex-item-left\" *ngIf=\"bulkOperation.progress.pending > 0\">\n              <i class=\"fa fw fa-clock-o m-r-4 text-info\"></i>\n              <span\n                ngNonBindable\n                translate\n                [translateParams]=\"{ bulkOperationsCountPending: bulkOperation.progress.pending }\"\n              >\n                {{ bulkOperationsCountPending }} pending\n              </span>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.failedParentId\">\n        <label class=\"small m-0\" translate>Retried from</label>\n        <span class=\"flex-item-right\">\n          <button\n            class=\"btn btn-default btn-xs\"\n            (click)=\"scrollToRetriedFromOperation(bulkOperation.failedParentId)\"\n          >\n            {{ bulkOperation.failedParentId }}\n          </button>\n        </span>\n      </li>\n      <li class=\"p-t-4 p-b-4 flex-row separator-bottom\" *ngIf=\"bulkOperation.note\">\n        <label class=\"small flex-item-top\" translate>Description</label>\n        <div class=\"flex-item-right text-right m-l-8\">\n          {{ bulkOperation.note }}\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-md-9 v-fit d-flex d-col\">\n    <div class=\"legend form-block\" translate>\n      Operation\n    </div>\n    <pre class=\"inner-scroll p-16 text-pre-wrap\">{{ bulkOperation.operationPrototype | json }}</pre>\n  </div>\n</div>\n"
        })
    ], BulkOperationDetailsComponent);
    return BulkOperationDetailsComponent;
}());

var SINGLE_OP_STATUS_NAMES = {
    PENDING: gettext('Pending'),
    EXECUTING: gettext('Executing'),
    FAILED: gettext('Failed'),
    SUCCESSFUL: gettext('Successful'),
    ALL: gettext('All')
};
var SINGLE_OP_STATUS_PROPERTIES = [
    {
        label: SINGLE_OP_STATUS_NAMES.PENDING,
        iconClass: 'fa fw fa-clock-o text-info',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.EXECUTING,
        iconClass: 'fa fw fa-refresh text-info',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,
        iconClass: 'fa fw fa-check-circle text-success',
        selected: false
    },
    {
        label: SINGLE_OP_STATUS_NAMES.FAILED,
        iconClass: 'fa fw fa-exclamation-circle text-danger',
        selected: false
    }
];

var SingleOperationsListComponent = /** @class */ (function () {
    function SingleOperationsListComponent(bulkOperationsService) {
        this.bulkOperationsService = bulkOperationsService;
        this.readOnly = false;
        this.onRetryFailedOperations = new EventEmitter();
        this.singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
    }
    SingleOperationsListComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.statusFilter) {
                    this.filterOperationsByType();
                }
                return [2 /*return*/];
            });
        });
    };
    SingleOperationsListComponent.prototype.ngOnChanges = function (changes) {
        if (changes.bulkOperation && !changes.bulkOperation.firstChange) {
            this.filterOperationsByType();
        }
    };
    SingleOperationsListComponent.prototype.filterOperationsByType = function () {
        if (this.statusFilter) {
            var typeFilter = this.getFilterTypeOfSingleOperations();
            this.statusFilter.preset(typeFilter === this.singleOperationStatusNames.ALL
                ? []
                : [{ label: typeFilter }]);
        }
        else {
            setTimeout(this.filterOperationsByType.bind(this));
        }
    };
    SingleOperationsListComponent.prototype.getFilterTypeOfSingleOperations = function () {
        var progress = this.bulkOperation.progress;
        if (progress.failed > 0) {
            return this.singleOperationStatusNames.FAILED;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {
            return this.singleOperationStatusNames.EXECUTING;
        }
        else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.PENDING;
        }
        else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {
            return this.singleOperationStatusNames.SUCCESSFUL;
        }
        return this.singleOperationStatusNames.ALL;
    };
    SingleOperationsListComponent.prototype.getOperationsByStatus = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.bulkOperationsService.getSingleOperationsByStatus(filter[0] && filter[0].label, this.bulkOperation.id)];
                    case 1:
                        _a.singleOperations = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationsListComponent.prototype.retryBulkOperation = function () {
        this.onRetryFailedOperations.emit(this.bulkOperation);
    };
    SingleOperationsListComponent.ctorParameters = function () { return [
        { type: BulkOperationsService$1 }
    ]; };
    __decorate([
        Input()
    ], SingleOperationsListComponent.prototype, "bulkOperation", void 0);
    __decorate([
        Input()
    ], SingleOperationsListComponent.prototype, "readOnly", void 0);
    __decorate([
        Output()
    ], SingleOperationsListComponent.prototype, "onRetryFailedOperations", void 0);
    __decorate([
        ViewChild(StatusFilterComponent$1, { static: false })
    ], SingleOperationsListComponent.prototype, "statusFilter", void 0);
    SingleOperationsListComponent = __decorate([
        Component({
            selector: 'c8y-single-operations-list',
            template: "<ng-container\n  *ngIf=\"\n    bulkOperation.progress.failed ||\n    bulkOperation.progress.executing ||\n    bulkOperation.progress.pending ||\n    bulkOperation.progress.successful\n  \"\n>\n  <div class=\"legend form-block\" translate>\n    Operations\n  </div>\n  <div class=\"flex-row p-b-8\">\n    <div class=\"flex-grow p-b-8\">\n      <span class=\"m-r-4\" translate>Filter by status</span>\n      <c8y-status-filter\n        small\n        [options]=\"singleOperationStatusProperties\"\n        (onFilterChanged)=\"getOperationsByStatus($event)\"\n      ></c8y-status-filter>\n    </div>\n    <div class=\"p-b-8\" *ngIf=\"!readOnly && bulkOperation.progress.failed > 0\">\n      <button\n        class=\"btn btn-navbar\"\n        (click)=\"retryBulkOperation()\"\n        title=\"{{ 'Retry failed operations' | translate }}\"\n      >\n        <i class=\"fa fa-repeat m-r-4\"></i> <span translate>Retry failed operations</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"inner-scroll\">\n    <c8y-list-group>\n      <div class=\"d-contents\" *c8yFor=\"let operation of singleOperations; loadMore: 'auto'\">\n        <c8y-single-operation-item\n          [operation]=\"operation\"\n          [readOnly]=\"readOnly\"\n          style=\"display: contents;\"\n        >\n        </c8y-single-operation-item>\n      </div>\n\n      <c8y-li *ngIf=\"singleOperations && singleOperations.data.length === 0\">\n        <c8y-li-body>\n          <div class=\"c8y-empty-state text-center\">\n            <h2 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor m-b-16\"></h2>\n            <div>\n              <h3 translate>No single operations of the selected status to display.</h3>\n              <p class=\"m-b-16\" translate>Single operations will be displayed here</p>\n            </div>\n          </div>\n        </c8y-li-body>\n      </c8y-li>\n    </c8y-list-group>\n  </div>\n</ng-container>\n"
        })
    ], SingleOperationsListComponent);
    return SingleOperationsListComponent;
}());

var SingleOperationItemComponent = /** @class */ (function () {
    function SingleOperationItemComponent(bulkOperationsService, alertService) {
        this.bulkOperationsService = bulkOperationsService;
        this.alertService = alertService;
        this.device = {};
        this.showIfTextTruncated = false;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
        this.singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.readOnly = false;
    }
    SingleOperationItemComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.iconClass = this.getIconClass();
                        _a = this;
                        return [4 /*yield*/, this.getDeviceMO(this.operation.deviceId)];
                    case 1:
                        _a.device = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.ngAfterViewInit = function () {
        this.isTextTruncated();
    };
    SingleOperationItemComponent.prototype.retrySingleOperation = function (singleOperation) {
        return __awaiter(this, void 0, void 0, function () {
            var operationToCreate, er_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationToCreate = omit(singleOperation, [
                            'id',
                            'self',
                            'status',
                            'failureReason',
                            'creationTime',
                            'delivery'
                        ]);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.bulkOperationsService.createSingleOperation(operationToCreate)];
                    case 2:
                        _a.sent();
                        this.alertService.success(gettext('Operation created.'));
                        return [3 /*break*/, 4];
                    case 3:
                        er_1 = _a.sent();
                        this.alertService.addServerFailure(er_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.getIconClass = function () {
        var _this = this;
        return this.singleOperationsStatusProperties.find(function (operationProperties) { return operationProperties.label.toUpperCase() === _this.operation.status; }).iconClass;
    };
    SingleOperationItemComponent.prototype.getDeviceMO = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            var inventoryMO;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bulkOperationsService.getManagedObject(deviceId)];
                    case 1:
                        inventoryMO = _a.sent();
                        if (inventoryMO) {
                            return [2 /*return*/, inventoryMO.data];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.isTextTruncated = function () {
        if (this.operation.failureReason) {
            var el = this.failureReasonRef.nativeElement;
            this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;
        }
    };
    SingleOperationItemComponent.ctorParameters = function () { return [
        { type: BulkOperationsService$1 },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], SingleOperationItemComponent.prototype, "operation", void 0);
    __decorate([
        Input()
    ], SingleOperationItemComponent.prototype, "readOnly", void 0);
    __decorate([
        ViewChild('failureReason', { static: true })
    ], SingleOperationItemComponent.prototype, "failureReasonRef", void 0);
    SingleOperationItemComponent = __decorate([
        Component({
            selector: 'c8y-single-operation-item',
            template: "<c8y-li class=\"c8y-list__item--double-actions\">\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{'content-flex-80': !readOnly, 'content-flex-50': readOnly}\">\n    <div class=\"col-4\">\n      <span class=\"m-r-4\">\n        <device-status [mo]=\"\"></device-status>\n      </span>\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class=\"col-5\">\n      <div class=\"flex-row\">\n        <span class=\"text-truncate\" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf=\"showIfTextTruncated\"\n          class=\"m-l-8\"\n          popover=\"{{ operation.failureReason | translate }}\"\n          placement=\"left\"\n          outsideClick=\"true\"\n        >\n          <i [c8yIcon]=\"'info-circle text-primary'\"></i>\n        </a>\n        <div\n          class=\"showOnHover p-l-8 p-r-8 v-fit-20 flex-item-right\"\n          *ngIf=\"!readOnly && operation.status == singleOperationStatusNames.FAILED.toUpperCase()\"\n        >\n          <a\n            class=\"btn btn-default btn-xs\"\n            (click)=\"retrySingleOperation(operation)\"\n            title=\"{{ 'Retry operation' | translate }}\"\n          >\n            <i [c8yIcon]=\"'repeat m-r-4'\"></i><span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n"
        })
    ], SingleOperationItemComponent);
    return SingleOperationItemComponent;
}());

var BulkOperationTypeListComponent = /** @class */ (function () {
    function BulkOperationTypeListComponent(router, bulkOperationsService, bulkOperationModalsService) {
        this.router = router;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.onCustomType = new EventEmitter();
        this.bulkList = [];
    }
    BulkOperationTypeListComponent.prototype.ngOnInit = function () {
        this.bulkList = this.bulkOperationsService.getBulkTypes();
    };
    BulkOperationTypeListComponent.prototype.handleClick = function (item) {
        if (item.path) {
            this.bulkOperationModalsService.hideNewBulkOperationModal();
            this.router.navigateByUrl(item.path);
        }
        else if (item.component) {
            this.onCustomType.emit(item);
        }
    };
    BulkOperationTypeListComponent.ctorParameters = function () { return [
        { type: Router },
        { type: BulkOperationsService$1 },
        { type: BulkOperationModalsService }
    ]; };
    __decorate([
        Output()
    ], BulkOperationTypeListComponent.prototype, "onCustomType", void 0);
    BulkOperationTypeListComponent = __decorate([
        Component({
            selector: 'c8y-bulk-operation-type-list',
            template: "<div class=\"list-group list-group-links\">\n  <button\n    *ngFor=\"let item of bulkList\"\n    type=\"button\"\n    class=\"list-group-item flex-row\"\n    (click)=\"handleClick(item)\"\n  >\n    <div *ngIf=\"item.c8yIcon; else icon\" class=\"list-item-icon\">\n      <i [c8yIcon]=\"item.c8yIcon\"></i>\n    </div>\n    <ng-template #icon>\n      <div class=\"list-item-icon\">\n        <i c8yIcon=\"cogs\"></i>\n      </div>\n    </ng-template>\n    <div title=\"{{ item.name | translate }}\" class=\"list-item-body text-truncate\">\n      {{ item.name | translate }}\n    </div>\n  </button>\n</div>\n"
        })
    ], BulkOperationTypeListComponent);
    return BulkOperationTypeListComponent;
}());

var bulkOperationListRoutes = [
    {
        path: 'devicecontrol/bulk',
        component: BulkOperationsListComponent
    }
];
/**
 * This module allows for displaying the list of bulk operations and their details.
 */
var BulkOperationsListModule = /** @class */ (function () {
    function BulkOperationsListModule() {
    }
    BulkOperationsListModule = __decorate([
        NgModule({
            imports: [
                CoreModule,
                PopoverModule,
                TooltipModule,
                StatusFilterModule$1,
                OperationSummaryModule$1,
                BulkOperationSchedulerModule$1,
                RouterModule.forChild(bulkOperationListRoutes)
            ],
            providers: [BulkOperationDetailsService, BulkOperationModalsService],
            declarations: [
                BulkOperationsListComponent,
                BulkOperationListItemComponent,
                BulkOperationDetailsTabsComponent,
                BulkOperationDetailsComponent,
                SingleOperationsListComponent,
                SingleOperationItemComponent,
                BulkOperationWrapperComponent,
                BulkOperationTypeListComponent,
                BulkOperationsModalComponent,
                BulkOperationsRescheduleModalComponent
            ],
            entryComponents: [
                BulkOperationsListComponent,
                BulkOperationListItemComponent,
                BulkOperationDetailsTabsComponent,
                BulkOperationDetailsComponent,
                SingleOperationsListComponent,
                SingleOperationItemComponent,
                BulkOperationWrapperComponent,
                BulkOperationTypeListComponent,
                BulkOperationsModalComponent,
                BulkOperationsRescheduleModalComponent
            ],
            exports: [
                BulkOperationsListComponent,
                BulkOperationListItemComponent,
                BulkOperationDetailsTabsComponent,
                BulkOperationDetailsComponent,
                SingleOperationsListComponent,
                SingleOperationItemComponent,
                BulkOperationWrapperComponent,
                BulkOperationTypeListComponent,
                BulkOperationsModalComponent,
                BulkOperationsRescheduleModalComponent
            ]
        })
    ], BulkOperationsListModule);
    return BulkOperationsListModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { BaseStepperComponent, BulkOperationDetailsComponent, BulkOperationDetailsService, BulkOperationDetailsTabsComponent, BulkOperationFromSingleComponent, BulkOperationListItemComponent, BulkOperationModalsService, BulkOperationSchedulerModule, BulkOperationStepper, BulkOperationType, BulkOperationTypeListComponent, BulkOperationWrapperComponent, BulkOperationsListComponent, BulkOperationsListModule, BulkOperationsModalComponent, BulkOperationsRescheduleModalComponent, BulkOperationsService, BulkOperationsServiceModule, BulkOperationsStepperContainerComponent, C8Y_BULK_TYPES, C8Y_BULK_TYPE_FRAGMENTS, ConfirmDeviceProfileSelectionStepComponent, ConfirmSoftwareSelectionStepComponent, CustomStep, DeviceSelectorComponent, HOOK_LIST_BULK_TYPE, OperationDetailsComponent, OperationSchedulerComponent, OperationSummaryComponent, OperationSummaryModule, OperationsModule, SelectDeviceProfileStepComponent, SelectFirmwareComponent, SelectSoftwareStepComponent, SingleOperationComponent, SingleOperationDetailsComponent, SingleOperationDetailsModule, SingleOperationDetailsService, SingleOperationItemComponent, SingleOperationListItemComponent, SingleOperationModalComponent, SingleOperationsListComponent, StatusFilterComponent, StatusFilterModule, StepperBulkTypeConfiguration, StepperBulkTypeDeviceProfile, StepperBulkTypeSoftware, StepperFirmware, TabsFactory, VersionOrPatchComponent, baseUrl, bulkOperationListRoutes, routes, ɵ0$1 as ɵ0 };
//# sourceMappingURL=c8y-ngx-components-operations.js.map
