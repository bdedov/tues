import { __awaiter, __generator, __decorate } from 'tslib';
import { Injectable, ViewChild, Component, NgModule } from '@angular/core';
import { gettext, AlertService, ViewContext, CoreModule, FormsModule, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { Router } from '@angular/router';
import { pipe } from 'rxjs';
import { map } from 'rxjs/operators';
import { isUndefined } from 'lodash-es';

var LoraSetDeviceProtocolService = /** @class */ (function () {
    function LoraSetDeviceProtocolService(inventoryService) {
        this.inventoryService = inventoryService;
    }
    LoraSetDeviceProtocolService.prototype.getCurrentProtocol = function (device) {
        return __awaiter(this, void 0, void 0, function () {
            var protocolId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        protocolId = device.c8y_LpwanDevice.type
                            ? device.c8y_LpwanDevice.type.split('/')[2]
                            : null;
                        if (!protocolId) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, this.inventoryService.detail(protocolId)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    LoraSetDeviceProtocolService.prototype.applyProtocol = function (device, selectedProtocol) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                device.c8y_LpwanDevice.type = 'inventory/managedObjects/' + selectedProtocol.id;
                device.type = selectedProtocol.name;
                return [2 /*return*/, this.inventoryService.update(device)];
            });
        });
    };
    LoraSetDeviceProtocolService.prototype.getAvailableProtocols = function () {
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                query = {
                    type: {
                        __in: ['c8y_ActilityDeviceType', 'c8y_LoraDeviceType']
                    }
                };
                return [2 /*return*/, this.inventoryService.listQuery(query)];
            });
        });
    };
    LoraSetDeviceProtocolService.ctorParameters = function () { return [
        { type: InventoryService }
    ]; };
    LoraSetDeviceProtocolService = __decorate([
        Injectable()
    ], LoraSetDeviceProtocolService);
    return LoraSetDeviceProtocolService;
}());

var LoraAssignDeviceProtocolComponent = /** @class */ (function () {
    function LoraAssignDeviceProtocolComponent(loraService, alertService, router, inventoryService) {
        var _this = this;
        this.loraService = loraService;
        this.alertService = alertService;
        this.router = router;
        this.inventoryService = inventoryService;
        this.filterCurrentProtocol = pipe(map(function (protocols) {
            return protocols.filter(function (protocol) { return !_this.currentProtocol || _this.currentProtocol.id !== protocol.id; });
        }));
    }
    LoraAssignDeviceProtocolComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reload()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    LoraAssignDeviceProtocolComponent.prototype.reload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, ex_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.loading = true;
                        this.newProtocol = null;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 5, 6, 7]);
                        return [4 /*yield*/, this.loadDevice()];
                    case 2:
                        _c.sent();
                        _a = this;
                        return [4 /*yield*/, this.loraService.getAvailableProtocols()];
                    case 3:
                        _a.availableProtocols = _c.sent();
                        _b = this;
                        return [4 /*yield*/, this.loraService.getCurrentProtocol(this.device)];
                    case 4:
                        _b.currentProtocol = _c.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        ex_1 = _c.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 7];
                    case 6:
                        this.loading = false;
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    LoraAssignDeviceProtocolComponent.prototype.loadDevice = function () {
        return __awaiter(this, void 0, void 0, function () {
            var deviceId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceId = this.router.routerState.snapshot.url.match(/\d+/)[0];
                        return [4 /*yield*/, this.inventoryService.detail(deviceId)];
                    case 1:
                        data = (_a.sent()).data;
                        this.device = data;
                        return [2 /*return*/];
                }
            });
        });
    };
    LoraAssignDeviceProtocolComponent.prototype.apply = function (selectedProtocol) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.loraService.applyProtocol(this.device, selectedProtocol)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.reload()];
                    case 2:
                        _a.sent();
                        this.alertService.success(gettext('Device protocol set.'));
                        this.loraSetDeviceProtocolForm.reset('dirty');
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.alertService.danger(gettext('Could not set device protocol.'));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    LoraAssignDeviceProtocolComponent.ctorParameters = function () { return [
        { type: LoraSetDeviceProtocolService },
        { type: AlertService },
        { type: Router },
        { type: InventoryService }
    ]; };
    __decorate([
        ViewChild('loraSetDeviceProtocolForm', { static: false })
    ], LoraAssignDeviceProtocolComponent.prototype, "loraSetDeviceProtocolForm", void 0);
    LoraAssignDeviceProtocolComponent = __decorate([
        Component({
            selector: 'set-device-protocol',
            template: "<form #loraSetDeviceProtocolForm=\"ngForm\" class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">{{ 'LoRa device protocol' | translate }}</h4>\n      </div>\n      <div *ngIf=\"loading\" class=\"card-block\">\n        <div style=\"position: relative; min-height: 40px;min-width: 55px;\">\n          <div class=\"spinner\">\n            <div class=\"rect1\"></div>\n            <div class=\"rect2\"></div>\n            <div class=\"rect3\"></div>\n            <div class=\"rect4\"></div>\n          </div>\n        </div>\n        <span translate>Loading</span>\n      </div>\n      <div *ngIf=\"!loading\">\n        <div class=\"card-block\">\n          <div class=\"form-group\">\n            <label translate>Current device protocol</label>\n            <p class=\"form-control-static\" *ngIf=\"!currentProtocol\">\n              {{ 'c8y_LoriotLora' }}\n            </p>\n            <p class=\"form-control-static\" *ngIf=\"currentProtocol\">\n              {{ currentProtocol.name }}\n            </p>\n          </div>\n          <div class=\"form-group\">\n            <label translate>New device protocol</label>\n            <div class=\"c8y-select-wrapper\">\n              <select class=\"form-control\" [(ngModel)]=\"newProtocol\" name=\"newProtocol\" required>\n                <option *ngIf=\"!newProtocol\" [ngValue]=\"null\">\n                  {{ 'Select device protocol' | translate }}\n                </option>\n                <option\n                  *c8yFor=\"let protocol of availableProtocols; pipe: filterCurrentProtocol\"\n                  [ngValue]=\"protocol\"\n                >\n                  {{ protocol.name }}\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div class=\"card-footer separator\">\n          <button\n            title=\"{{ 'Apply' | translate }}\"\n            class=\"btn btn-primary\"\n            (click)=\"apply(newProtocol)\"\n            translate\n            [disabled]=\"!loraSetDeviceProtocolForm.dirty\"\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n\u200C\n"
        })
    ], LoraAssignDeviceProtocolComponent);
    return LoraAssignDeviceProtocolComponent;
}());

var LoraAgentGuard = /** @class */ (function () {
    function LoraAgentGuard() {
    }
    LoraAgentGuard.prototype.canActivate = function (route) {
        var contextData = route.data.contextData || route.parent.data.contextData;
        return contextData && !isUndefined(contextData.c8y_LpwanDevice) && (contextData.c8y_LpwanDevice.lpwanDeviceType === 'Lora');
    };
    LoraAgentGuard = __decorate([
        Injectable()
    ], LoraAgentGuard);
    return LoraAgentGuard;
}());

var routes = [
    {
        context: ViewContext.Device,
        path: 'assign-protocol',
        component: LoraAssignDeviceProtocolComponent,
        label: gettext('LPWAN'),
        icon: 'c8y-device-protocols',
        canActivate: [LoraAgentGuard]
    }
];
var ɵ0 = routes;
var LoraProtocolModule = /** @class */ (function () {
    function LoraProtocolModule() {
    }
    LoraProtocolModule = __decorate([
        NgModule({
            declarations: [
                LoraAssignDeviceProtocolComponent
            ],
            imports: [
                CoreModule,
                FormsModule
            ],
            entryComponents: [LoraAssignDeviceProtocolComponent],
            providers: [
                LoraAgentGuard,
                LoraSetDeviceProtocolService,
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                }
            ]
        })
    ], LoraProtocolModule);
    return LoraProtocolModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { LoraAssignDeviceProtocolComponent, LoraProtocolModule, ɵ0, LoraSetDeviceProtocolService as ɵa, LoraAgentGuard as ɵb };
//# sourceMappingURL=c8y-ngx-components-protocol-lora.js.map
