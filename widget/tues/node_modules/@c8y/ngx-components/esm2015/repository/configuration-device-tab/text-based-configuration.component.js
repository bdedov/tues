import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { InventoryService, IManagedObject, OperationStatus, IOperation } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
import { RepositoryService } from '../repository.service';
import { AlertService } from '@c8y/ngx-components';
import { DeviceConfigurationOperation } from '../repository.model';
import { DeviceConfigurationService } from './device-configuration.service';
let TextBasedConfigurationComponent = class TextBasedConfigurationComponent {
    constructor(route, alertService, repositoryService, deviceConfigurationService, inventoryService) {
        this.route = route;
        this.alertService = alertService;
        this.repositoryService = repositoryService;
        this.deviceConfigurationService = deviceConfigurationService;
        this.inventoryService = inventoryService;
        this.reloadingConfig = false;
        this.savingConfig = false;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.device = this.route.snapshot.parent.data.contextData;
            yield this.loadOperation();
            this.showTextBasedConfigReload = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.SEND_CONFIG]);
            this.showTextBasedConfigSave = this.deviceConfigurationService.hasAnySupportedOperation(this.device, [DeviceConfigurationOperation.CONFIG]);
            if (this.device.c8y_Configuration && this.device.c8y_Configuration.config) {
                this.config = this.device.c8y_Configuration.config;
            }
        });
    }
    loadOperation() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const operation = yield this.repositoryService.getLastConfigUpdateOperation(this.device.id);
            if (operation !== null) {
                this.repositoryService.observeOperation(operation).subscribe(operationUpdate => {
                    this.latestOperation = operationUpdate;
                });
            }
        });
    }
    reloadConfiguration() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.reloadingConfig = true;
            const operationCfg = yield this.repositoryService.createTextBasedConfigurationReloadOperation(this.device);
            try {
                this.repositoryService
                    .createObservedOperation(operationCfg)
                    .subscribe(operationUpdate => this.onOperationReloadSuccess(operationUpdate), operationUpdate => this.onOperationReloadError(operationUpdate), () => this.onOperationReloadComplete());
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    updateConfiguration(config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.savingConfig = true;
            const operationCfg = yield this.repositoryService.createTextBasedConfigurationUpdateOperation(this.device, config);
            try {
                this.repositoryService
                    .createObservedOperation(operationCfg)
                    .subscribe(operationUpdate => this.onOperationUpdateSuccess(operationUpdate), operationUpdate => this.onOperationUpdateError(operationUpdate), () => this.onOperationUpdateComplete());
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
        });
    }
    onOperationReloadSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be reloaded.'));
        }
    }
    onOperationReloadError(operationUpdate) {
        this.latestOperation = operationUpdate;
        this.reloadingConfig = false;
    }
    onOperationReloadComplete() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.loadDevice();
            this.config = this.device.c8y_Configuration.config;
            this.reloadingConfig = false;
        });
    }
    onOperationUpdateSuccess(operationUpdate) {
        this.latestOperation = operationUpdate;
        if (operationUpdate.status === OperationStatus.PENDING) {
            this.alertService.success(gettext('Configuration will be updated.'));
        }
    }
    onOperationUpdateError(operationUpdate) {
        this.latestOperation = operationUpdate;
        this.savingConfig = false;
    }
    onOperationUpdateComplete() {
        this.device.c8y_Configuration.config = this.config;
        this.savingConfig = false;
    }
    loadDevice() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.device = (yield this.inventoryService.detail(this.device.id, { withChildren: false })).data;
        });
    }
};
TextBasedConfigurationComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService },
    { type: RepositoryService },
    { type: DeviceConfigurationService },
    { type: InventoryService }
];
TextBasedConfigurationComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-text-based-configuration',
        template: "<div class=\"d-flex d-col fit-v\">\n  <fieldset *ngIf=\"latestOperation !== undefined\" class=\"card-block bg-gray-white fit-h\">\n    <div class=\"content-flex-50\">\n      <c8y-single-operation [operation]=\"latestOperation\" class=\"flex-grow\"></c8y-single-operation>\n      <div class=\"flex-item-right d-flex\">\n        <button\n          title=\"{{ 'Get snapshot from device' | translate }}\"\n          type=\"button\"\n          class=\"btn btn-default btn-sm flex-item-v-center m-t-8 m-b-8\"\n          *ngIf=\"showTextBasedConfigReload\"\n          (click)=\"reloadConfiguration()\"\n          [disabled]=\"reloadingConfig || savingConfig\"\n        >\n          <i\n            c8yIcon=\"refresh\"\n            *ngIf=\"reloadingConfig\"\n            class=\"m-r-4\"\n            [ngClass]=\"{ 'fa-spin': reloadingConfig }\"\n          ></i>\n          <i c8yIcon=\"download\" *ngIf=\"!reloadingConfig\" class=\"m-r-4\"></i>\n\n          {{ 'Get snapshot from device' | translate }}\n        </button>\n      </div>\n    </div>\n  </fieldset>\n  <div class=\"card-block flex-grow\">\n    <textarea\n      [(ngModel)]=\"config\"\n      style=\"height: 100%;\"\n      class=\"form-control\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      c8y-spellcheck=\"false\"\n    ></textarea>\n  </div>\n  <div class=\"card-footer fit-h separator\" *ngIf=\"showTextBasedConfigSave\">\n    <button\n      type=\"button\"\n      (click)=\"updateConfiguration(config)\"\n      [disabled]=\"reloadingConfig || savingConfig\"\n      class=\"btn btn-primary\"\n      [ngClass]=\"{ 'btn-pending': savingConfig }\"\n    >\n      <span title=\"{{ 'Send' | translate }}\" *ngIf=\"!savingConfig\">\n        {{ 'Send configuration to device' | translate }}\n      </span>\n      <span title=\"{{ 'Sending' | translate }}\u2026\" *ngIf=\"savingConfig\">\n        {{ 'Sending' | translate }}\u2026</span\n      >\n    </button>\n  </div>\n</div>\n"
    })
], TextBasedConfigurationComponent);
export { TextBasedConfigurationComponent };
//# sourceMappingURL=data:application/json;base64,