import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { RepositoryService } from './../repository.service';
import { memoize } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { InventoryBinaryService } from '@c8y/client';
import { LinkRenderType } from './link-render-type.enum';
let FileDownloadComponent = class FileDownloadComponent {
    constructor(repositoryService, inventoryBinaryService) {
        this.repositoryService = repositoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.linkRenderType = LinkRenderType;
    }
    getBinaryName$(binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    }
    determineBehavior() {
        let result;
        if (this.inventoryBinaryService.getIdFromUrl(this.url)) {
            result = LinkRenderType.DOWNLOAD;
        }
        else if (this.url.match(/\/\//g)) {
            result = LinkRenderType.LINK;
        }
        else {
            result = LinkRenderType.TEXTONLY;
        }
        return result;
    }
    downloadFile() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const binary = yield this.repositoryService.getBinaryFile(this.url, {
                allowExternal: false
            });
            saveAs(binary);
        });
    }
};
FileDownloadComponent.ctorParameters = () => [
    { type: RepositoryService },
    { type: InventoryBinaryService }
];
tslib_1.__decorate([
    Input()
], FileDownloadComponent.prototype, "url", void 0);
tslib_1.__decorate([
    memoize()
], FileDownloadComponent.prototype, "getBinaryName$", null);
tslib_1.__decorate([
    memoize()
], FileDownloadComponent.prototype, "determineBehavior", null);
FileDownloadComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-file-download',
        template: "<a\n  *ngIf=\"determineBehavior() === linkRenderType.LINK\"\n  href=\"{{ url }}\"\n  class=\"pointer\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  {{ getBinaryName$(url) | async }}\n</a>\n\n<span *ngIf=\"determineBehavior() === linkRenderType.TEXTONLY\">{{ getBinaryName$(url) | async }}</span>\n\n<a *ngIf=\"determineBehavior() === linkRenderType.DOWNLOAD\" class=\"pointer\" (click)=\"downloadFile()\">\n    {{getBinaryName$(url) | async}}\n</a>\n"
    })
], FileDownloadComponent);
export { FileDownloadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1kb3dubG9hZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnkvIiwic291cmNlcyI6WyJmaWxlLWRvd25sb2FkL2ZpbGUtZG93bmxvYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTXpELElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBR2hDLFlBQ1UsaUJBQW9DLEVBQ3BDLHNCQUE4QztRQUQ5QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFIeEQsbUJBQWMsR0FBRyxjQUFjLENBQUM7SUFJN0IsQ0FBQztJQUdKLGNBQWMsQ0FBQyxTQUFTO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBR0QsaUJBQWlCO1FBQ2YsSUFBSSxNQUFzQixDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEQsTUFBTSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7U0FDbEM7YUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO1NBQzlCO2FBQU07WUFDTCxNQUFNLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUNsQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFSyxZQUFZOztZQUNoQixNQUFNLE1BQU0sR0FBUyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDeEUsYUFBYSxFQUFFLEtBQUs7YUFDckIsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pCLENBQUM7S0FBQTtDQUNGLENBQUE7O1lBNUI4QixpQkFBaUI7WUFDWixzQkFBc0I7O0FBSi9DO0lBQVIsS0FBSyxFQUFFO2tEQUFhO0FBUXJCO0lBREMsT0FBTyxFQUFFOzJEQUdUO0FBR0Q7SUFEQyxPQUFPLEVBQUU7OERBV1Q7QUF4QlUscUJBQXFCO0lBSmpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0IsMmRBQTZDO0tBQzlDLENBQUM7R0FDVyxxQkFBcUIsQ0FnQ2pDO1NBaENZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlIH0gZnJvbSAnLi8uLi9yZXBvc2l0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTGlua1JlbmRlclR5cGUgfSBmcm9tICcuL2xpbmstcmVuZGVyLXR5cGUuZW51bSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1maWxlLWRvd25sb2FkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbGUtZG93bmxvYWQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVEb3dubG9hZENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBsaW5rUmVuZGVyVHlwZSA9IExpbmtSZW5kZXJUeXBlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnlTZXJ2aWNlOiBSZXBvc2l0b3J5U2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeUJpbmFyeVNlcnZpY2U6IEludmVudG9yeUJpbmFyeVNlcnZpY2VcbiAgKSB7fVxuXG4gIEBtZW1vaXplKClcbiAgZ2V0QmluYXJ5TmFtZSQoYmluYXJ5VXJsKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeVNlcnZpY2UuZ2V0QmluYXJ5TmFtZSQoYmluYXJ5VXJsKTtcbiAgfVxuXG4gIEBtZW1vaXplKClcbiAgZGV0ZXJtaW5lQmVoYXZpb3IoKTogTGlua1JlbmRlclR5cGUge1xuICAgIGxldCByZXN1bHQ6IExpbmtSZW5kZXJUeXBlO1xuICAgIGlmICh0aGlzLmludmVudG9yeUJpbmFyeVNlcnZpY2UuZ2V0SWRGcm9tVXJsKHRoaXMudXJsKSkge1xuICAgICAgcmVzdWx0ID0gTGlua1JlbmRlclR5cGUuRE9XTkxPQUQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVybC5tYXRjaCgvXFwvXFwvL2cpKSB7XG4gICAgICByZXN1bHQgPSBMaW5rUmVuZGVyVHlwZS5MSU5LO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBMaW5rUmVuZGVyVHlwZS5URVhUT05MWTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIGRvd25sb2FkRmlsZSgpIHtcbiAgICBjb25zdCBiaW5hcnk6IEZpbGUgPSBhd2FpdCB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJpbmFyeUZpbGUodGhpcy51cmwsIHtcbiAgICAgIGFsbG93RXh0ZXJuYWw6IGZhbHNlXG4gICAgfSk7XG4gICAgc2F2ZUFzKGJpbmFyeSk7XG4gIH1cbn1cbiJdfQ==