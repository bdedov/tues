import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE, ViewContext } from '@c8y/ngx-components';
import { ContextDashboardModule } from '../context-dashboard.module';
import { ContextDashboardComponent } from '../context-dashboard.component';
import { ReportDashboardGuard } from './report-dashboard.guard';
import { ReportDashboardNavigationFactory } from './report-dashboard-navigation.factory';
import { ReportDashboardListComponent } from './report-dashboard-list.component';
import { ReportDashboardService } from './report-dashboard.service';
const ɵ0 = [
    {
        path: 'dashboard/:dashboardId',
        component: ContextDashboardComponent,
        canActivate: [ReportDashboardGuard],
        context: ViewContext.Report
    }
];
let ReportDashboardModule = class ReportDashboardModule {
};
ReportDashboardModule = tslib_1.__decorate([
    NgModule({
        declarations: [ReportDashboardListComponent],
        entryComponents: [],
        imports: [
            CoreModule,
            ContextDashboardModule,
            RouterModule.forChild([
                {
                    path: 'reports',
                    component: ReportDashboardListComponent
                }
            ])
        ],
        providers: [
            ReportDashboardGuard,
            ReportDashboardNavigationFactory,
            ReportDashboardService,
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            },
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: ReportDashboardNavigationFactory,
                multi: true
            }
        ]
    })
], ReportDashboardModule);
export { ReportDashboardModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkLyIsInNvdXJjZXMiOlsicmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUNMLFVBQVUsRUFDVixvQkFBb0IsRUFDcEIsZUFBZSxFQUNmLFdBQVcsRUFDWixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO1dBcUJwRDtJQUNSO1FBQ0UsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixTQUFTLEVBQUUseUJBQXlCO1FBQ3BDLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDO1FBQ25DLE9BQU8sRUFBRSxXQUFXLENBQUMsTUFBTTtLQUM1QjtDQUNGO0FBVVAsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7Q0FBRyxDQUFBO0FBQXhCLHFCQUFxQjtJQXBDakMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMsNEJBQTRCLENBQUM7UUFDNUMsZUFBZSxFQUFFLEVBQUU7UUFDbkIsT0FBTyxFQUFFO1lBQ1AsVUFBVTtZQUNWLHNCQUFzQjtZQUN0QixZQUFZLENBQUMsUUFBUSxDQUFDO2dCQUNwQjtvQkFDRSxJQUFJLEVBQUUsU0FBUztvQkFDZixTQUFTLEVBQUUsNEJBQTRCO2lCQUN4QzthQUNGLENBQUM7U0FDSDtRQUNELFNBQVMsRUFBRTtZQUNULG9CQUFvQjtZQUNwQixnQ0FBZ0M7WUFDaEMsc0JBQXNCO1lBQ3RCO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLElBT1A7Z0JBQ0QsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxvQkFBb0I7Z0JBQzdCLFFBQVEsRUFBRSxnQ0FBZ0M7Z0JBQzFDLEtBQUssRUFBRSxJQUFJO2FBQ1o7U0FDRjtLQUNGLENBQUM7R0FDVyxxQkFBcUIsQ0FBRztTQUF4QixxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIENvcmVNb2R1bGUsXG4gIEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICBIT09LX09OQ0VfUk9VVEUsXG4gIFZpZXdDb250ZXh0XG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29udGV4dERhc2hib2FyZE1vZHVsZSB9IGZyb20gJy4uL2NvbnRleHQtZGFzaGJvYXJkLm1vZHVsZSc7XG5cbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb250ZXh0LWRhc2hib2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkR3VhcmQgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQuZ3VhcmQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkTmF2aWdhdGlvbkZhY3RvcnkgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQtbmF2aWdhdGlvbi5mYWN0b3J5JztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZExpc3RDb21wb25lbnQgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlJztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUmVwb3J0RGFzaGJvYXJkTGlzdENvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW10sXG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIENvbnRleHREYXNoYm9hcmRNb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLmZvckNoaWxkKFtcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJ3JlcG9ydHMnLFxuICAgICAgICBjb21wb25lbnQ6IFJlcG9ydERhc2hib2FyZExpc3RDb21wb25lbnRcbiAgICAgIH1cbiAgICBdKVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBSZXBvcnREYXNoYm9hcmRHdWFyZCxcbiAgICBSZXBvcnREYXNoYm9hcmROYXZpZ2F0aW9uRmFjdG9yeSxcbiAgICBSZXBvcnREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfT05DRV9ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnZGFzaGJvYXJkLzpkYXNoYm9hcmRJZCcsXG4gICAgICAgICAgY29tcG9uZW50OiBDb250ZXh0RGFzaGJvYXJkQ29tcG9uZW50LFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbUmVwb3J0RGFzaGJvYXJkR3VhcmRdLFxuICAgICAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0LlJlcG9ydFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICAgICAgdXNlQ2xhc3M6IFJlcG9ydERhc2hib2FyZE5hdmlnYXRpb25GYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUmVwb3J0RGFzaGJvYXJkTW9kdWxlIHt9XG4iXX0=