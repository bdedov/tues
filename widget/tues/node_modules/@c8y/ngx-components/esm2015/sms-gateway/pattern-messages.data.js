import { gettext } from '@c8y/ngx-components';
export const MESSAGES = {
    '^Sender name$': {
        gettext: gettext('Sender name')
    },
    '^Sender name used for sent SMS$': {
        gettext: gettext('Sender name used for sent SMS')
    },
    '^Sender address$': {
        gettext: gettext('Sender address')
    },
    '^Sender address used for sent SMS$': {
        gettext: gettext('Sender address used for sent SMS')
    },
    '^Username$': {
        gettext: gettext('Username')
    },
    '^Password$': {
        gettext: gettext('Password')
    },
    '^Licence key$': {
        gettext: gettext('License key')
    },
    '^Key$': {
        gettext: gettext('Key')
    },
    '^API base URL$': {
        gettext: gettext('API base URL')
    },
    '^API URL$': {
        gettext: gettext('API URL')
    },
    '^oauth$': {
        gettext: gettext('OAuth')
    },
    '^basic$': {
        gettext: gettext('Basic')
    },
    '^Authentication method$': {
        gettext: gettext('Authentication method')
    },
    '^Defines which authentication method is used with the provider$': {
        gettext: gettext('Defines which authentication method is used with the provider')
    },
    '^Static headers$': {
        gettext: gettext('Static headers')
    },
    '^Static headers that should be added to requests towards the provider$': {
        gettext: gettext('Static headers that should be added to requests towards the provider')
    },
    '^OAuth token URL$': {
        gettext: gettext('OAuth token URL')
    },
    '^URL where the OAuth token is requested from (required if OAuth method is chosen)$': {
        gettext: gettext('URL where the OAuth token is requested from (required if OAuth method is chosen)')
    },
    '^OAuth toke mime type$': {
        gettext: gettext('OAuth token mime type')
    },
    '^Overrides the OAuth token response mime type$': {
        gettext: gettext('Overrides the OAuth token response mime type')
    },
    '^OAuth access toke type$': {
        gettext: gettext('OAuth access token type')
    },
    '^Overrides the OAuth access token type$': {
        gettext: gettext('Overrides the OAuth access token type')
    },
    '^Global configuration$': {
        gettext: gettext('Global configuration')
    },
    '^Enables or disables if the settings may be used globally for all tenants (Only possible in management tenant)$': {
        gettext: gettext('Enables or disables the settings globally for all tenants (only possible in management tenant)')
    },
    '^API key$': {
        gettext: gettext('API key')
    },
    '^Inherit to subtenants$': {
        gettext: gettext('Inherit to subtenants')
    },
    "^Enables or disables if this tenant's configuration may be inherited to subtenants$": {
        gettext: gettext('Enables or disables the option to inherit the tenant configuration to subtenants')
    },
    '^Login$': {
        gettext: gettext('Login')
    },
    '^Source business unit ID$': {
        gettext: gettext('Source business unit ID')
    },
    '^Client ID$': {
        gettext: gettext('Client ID')
    },
    '^Client secret$': {
        gettext: gettext('Client secret')
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi1tZXNzYWdlcy5kYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9zbXMtZ2F0ZXdheS8iLCJzb3VyY2VzIjpbInBhdHRlcm4tbWVzc2FnZXMuZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3RCLGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0tBQ2hDO0lBQ0QsaUNBQWlDLEVBQUU7UUFDakMsT0FBTyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztLQUNsRDtJQUNELGtCQUFrQixFQUFFO1FBQ2xCLE9BQU8sRUFBRSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7S0FDbkM7SUFDRCxvQ0FBb0MsRUFBRTtRQUNwQyxPQUFPLEVBQUUsT0FBTyxDQUFDLGtDQUFrQyxDQUFDO0tBQ3JEO0lBQ0QsWUFBWSxFQUFFO1FBQ1osT0FBTyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDN0I7SUFDRCxZQUFZLEVBQUU7UUFDWixPQUFPLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUM3QjtJQUNELGVBQWUsRUFBRTtRQUNmLE9BQU8sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0tBQ2hDO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDeEI7SUFDRCxnQkFBZ0IsRUFBRTtRQUNoQixPQUFPLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztLQUNqQztJQUNELFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQzVCO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUM7S0FDMUI7SUFDRCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUMxQjtJQUNELHlCQUF5QixFQUFFO1FBQ3pCLE9BQU8sRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUM7S0FDMUM7SUFDRCxpRUFBaUUsRUFBRTtRQUNqRSxPQUFPLEVBQUUsT0FBTyxDQUFDLCtEQUErRCxDQUFDO0tBQ2xGO0lBQ0Qsa0JBQWtCLEVBQUU7UUFDbEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztLQUNuQztJQUNELHdFQUF3RSxFQUFFO1FBQ3hFLE9BQU8sRUFBRSxPQUFPLENBQUMsc0VBQXNFLENBQUM7S0FDekY7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQixPQUFPLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0tBQ3BDO0lBQ0Qsb0ZBQW9GLEVBQUU7UUFDcEYsT0FBTyxFQUFFLE9BQU8sQ0FDZCxrRkFBa0YsQ0FDbkY7S0FDRjtJQUNELHdCQUF3QixFQUFFO1FBQ3hCLE9BQU8sRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUM7S0FDMUM7SUFDRCxnREFBZ0QsRUFBRTtRQUNoRCxPQUFPLEVBQUUsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0tBQ2pFO0lBQ0QsMEJBQTBCLEVBQUU7UUFDMUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztLQUM1QztJQUNELHlDQUF5QyxFQUFFO1FBQ3pDLE9BQU8sRUFBRSxPQUFPLENBQUMsdUNBQXVDLENBQUM7S0FDMUQ7SUFDRCx3QkFBd0IsRUFBRTtRQUN4QixPQUFPLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0tBQ3pDO0lBQ0QsaUhBQWlILEVBQUU7UUFDakgsT0FBTyxFQUFFLE9BQU8sQ0FDZCxnR0FBZ0csQ0FDakc7S0FDRjtJQUNELFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQzVCO0lBQ0QseUJBQXlCLEVBQUU7UUFDekIsT0FBTyxFQUFFLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztLQUMxQztJQUNELHFGQUFxRixFQUFFO1FBQ3JGLE9BQU8sRUFBRSxPQUFPLENBQ2Qsa0ZBQWtGLENBQ25GO0tBQ0Y7SUFDRCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUMxQjtJQUNELDJCQUEyQixFQUFFO1FBQzNCLE9BQU8sRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7S0FDNUM7SUFDRCxhQUFhLEVBQUU7UUFDYixPQUFPLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztLQUM5QjtJQUNELGlCQUFpQixFQUFFO1FBQ2pCLE9BQU8sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0tBQ2xDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuZXhwb3J0IGNvbnN0IE1FU1NBR0VTID0ge1xuICAnXlNlbmRlciBuYW1lJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTZW5kZXIgbmFtZScpXG4gIH0sXG4gICdeU2VuZGVyIG5hbWUgdXNlZCBmb3Igc2VudCBTTVMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NlbmRlciBuYW1lIHVzZWQgZm9yIHNlbnQgU01TJylcbiAgfSxcbiAgJ15TZW5kZXIgYWRkcmVzcyQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnU2VuZGVyIGFkZHJlc3MnKVxuICB9LFxuICAnXlNlbmRlciBhZGRyZXNzIHVzZWQgZm9yIHNlbnQgU01TJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTZW5kZXIgYWRkcmVzcyB1c2VkIGZvciBzZW50IFNNUycpXG4gIH0sXG4gICdeVXNlcm5hbWUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1VzZXJuYW1lJylcbiAgfSxcbiAgJ15QYXNzd29yZCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnUGFzc3dvcmQnKVxuICB9LFxuICAnXkxpY2VuY2Uga2V5JCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdMaWNlbnNlIGtleScpXG4gIH0sXG4gICdeS2V5JCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdLZXknKVxuICB9LFxuICAnXkFQSSBiYXNlIFVSTCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQVBJIGJhc2UgVVJMJylcbiAgfSxcbiAgJ15BUEkgVVJMJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBUEkgVVJMJylcbiAgfSxcbiAgJ15vYXV0aCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT0F1dGgnKVxuICB9LFxuICAnXmJhc2ljJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdCYXNpYycpXG4gIH0sXG4gICdeQXV0aGVudGljYXRpb24gbWV0aG9kJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBdXRoZW50aWNhdGlvbiBtZXRob2QnKVxuICB9LFxuICAnXkRlZmluZXMgd2hpY2ggYXV0aGVudGljYXRpb24gbWV0aG9kIGlzIHVzZWQgd2l0aCB0aGUgcHJvdmlkZXIkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0RlZmluZXMgd2hpY2ggYXV0aGVudGljYXRpb24gbWV0aG9kIGlzIHVzZWQgd2l0aCB0aGUgcHJvdmlkZXInKVxuICB9LFxuICAnXlN0YXRpYyBoZWFkZXJzJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdTdGF0aWMgaGVhZGVycycpXG4gIH0sXG4gICdeU3RhdGljIGhlYWRlcnMgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gcmVxdWVzdHMgdG93YXJkcyB0aGUgcHJvdmlkZXIkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1N0YXRpYyBoZWFkZXJzIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHJlcXVlc3RzIHRvd2FyZHMgdGhlIHByb3ZpZGVyJylcbiAgfSxcbiAgJ15PQXV0aCB0b2tlbiBVUkwkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ09BdXRoIHRva2VuIFVSTCcpXG4gIH0sXG4gICdeVVJMIHdoZXJlIHRoZSBPQXV0aCB0b2tlbiBpcyByZXF1ZXN0ZWQgZnJvbSAocmVxdWlyZWQgaWYgT0F1dGggbWV0aG9kIGlzIGNob3NlbikkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoXG4gICAgICAnVVJMIHdoZXJlIHRoZSBPQXV0aCB0b2tlbiBpcyByZXF1ZXN0ZWQgZnJvbSAocmVxdWlyZWQgaWYgT0F1dGggbWV0aG9kIGlzIGNob3NlbiknXG4gICAgKVxuICB9LFxuICAnXk9BdXRoIHRva2UgbWltZSB0eXBlJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPQXV0aCB0b2tlbiBtaW1lIHR5cGUnKVxuICB9LFxuICAnXk92ZXJyaWRlcyB0aGUgT0F1dGggdG9rZW4gcmVzcG9uc2UgbWltZSB0eXBlJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdPdmVycmlkZXMgdGhlIE9BdXRoIHRva2VuIHJlc3BvbnNlIG1pbWUgdHlwZScpXG4gIH0sXG4gICdeT0F1dGggYWNjZXNzIHRva2UgdHlwZSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnT0F1dGggYWNjZXNzIHRva2VuIHR5cGUnKVxuICB9LFxuICAnXk92ZXJyaWRlcyB0aGUgT0F1dGggYWNjZXNzIHRva2VuIHR5cGUkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ092ZXJyaWRlcyB0aGUgT0F1dGggYWNjZXNzIHRva2VuIHR5cGUnKVxuICB9LFxuICAnXkdsb2JhbCBjb25maWd1cmF0aW9uJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdHbG9iYWwgY29uZmlndXJhdGlvbicpXG4gIH0sXG4gICdeRW5hYmxlcyBvciBkaXNhYmxlcyBpZiB0aGUgc2V0dGluZ3MgbWF5IGJlIHVzZWQgZ2xvYmFsbHkgZm9yIGFsbCB0ZW5hbnRzIChPbmx5IHBvc3NpYmxlIGluIG1hbmFnZW1lbnQgdGVuYW50KSQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dChcbiAgICAgICdFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBzZXR0aW5ncyBnbG9iYWxseSBmb3IgYWxsIHRlbmFudHMgKG9ubHkgcG9zc2libGUgaW4gbWFuYWdlbWVudCB0ZW5hbnQpJ1xuICAgIClcbiAgfSxcbiAgJ15BUEkga2V5JCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdBUEkga2V5JylcbiAgfSxcbiAgJ15Jbmhlcml0IHRvIHN1YnRlbmFudHMkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0luaGVyaXQgdG8gc3VidGVuYW50cycpXG4gIH0sXG4gIFwiXkVuYWJsZXMgb3IgZGlzYWJsZXMgaWYgdGhpcyB0ZW5hbnQncyBjb25maWd1cmF0aW9uIG1heSBiZSBpbmhlcml0ZWQgdG8gc3VidGVuYW50cyRcIjoge1xuICAgIGdldHRleHQ6IGdldHRleHQoXG4gICAgICAnRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgb3B0aW9uIHRvIGluaGVyaXQgdGhlIHRlbmFudCBjb25maWd1cmF0aW9uIHRvIHN1YnRlbmFudHMnXG4gICAgKVxuICB9LFxuICAnXkxvZ2luJCc6IHtcbiAgICBnZXR0ZXh0OiBnZXR0ZXh0KCdMb2dpbicpXG4gIH0sXG4gICdeU291cmNlIGJ1c2luZXNzIHVuaXQgSUQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ1NvdXJjZSBidXNpbmVzcyB1bml0IElEJylcbiAgfSxcbiAgJ15DbGllbnQgSUQkJzoge1xuICAgIGdldHRleHQ6IGdldHRleHQoJ0NsaWVudCBJRCcpXG4gIH0sXG4gICdeQ2xpZW50IHNlY3JldCQnOiB7XG4gICAgZ2V0dGV4dDogZ2V0dGV4dCgnQ2xpZW50IHNlY3JldCcpXG4gIH1cbn07XG4iXX0=