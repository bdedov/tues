import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CollapseModule } from 'ngx-bootstrap/collapse';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { CoreModule } from '@c8y/ngx-components';
import { BulkOperationsListModule } from '@c8y/ngx-components/operations/bulk-operations-list';
import { BulkOperationsServiceModule } from '@c8y/ngx-components/operations/bulk-operations-service';
import { SingleOperationDetailsService } from './single-operation-details.service';
import { SingleOperationComponent } from './single-operation.component';
import { SingleOperationModalComponent } from './single-operation-modal.component';
import { SingleOperationListItemComponent } from './single-operation-list-item.component';
import { SingleOperationDetailsComponent } from './single-operation-details.component';
/**
 * This module allows to display details of a single operation in a modal.
 */
let SingleOperationDetailsModule = class SingleOperationDetailsModule {
};
SingleOperationDetailsModule = tslib_1.__decorate([
    NgModule({
        imports: [
            CoreModule,
            PopoverModule,
            TooltipModule,
            CollapseModule,
            BulkOperationsListModule,
            BulkOperationsServiceModule
        ],
        providers: [SingleOperationDetailsService],
        declarations: [
            SingleOperationComponent,
            SingleOperationModalComponent,
            SingleOperationListItemComponent,
            SingleOperationDetailsComponent
        ],
        entryComponents: [
            SingleOperationComponent,
            SingleOperationModalComponent,
            SingleOperationListItemComponent,
            SingleOperationDetailsComponent
        ],
        exports: [SingleOperationComponent]
    })
], SingleOperationDetailsModule);
export { SingleOperationDetailsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbInNpbmdsZS1vcGVyYXRpb24tZGV0YWlscy9zaW5nbGUtb3BlcmF0aW9uLWRldGFpbHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXRELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUMvRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUVyRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV2Rjs7R0FFRztBQXlCSCxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtDQUFHLENBQUE7QUFBL0IsNEJBQTRCO0lBeEJ4QyxRQUFRLENBQUM7UUFDUixPQUFPLEVBQUU7WUFDUCxVQUFVO1lBQ1YsYUFBYTtZQUNiLGFBQWE7WUFDYixjQUFjO1lBQ2Qsd0JBQXdCO1lBQ3hCLDJCQUEyQjtTQUM1QjtRQUNELFNBQVMsRUFBRSxDQUFDLDZCQUE2QixDQUFDO1FBQzFDLFlBQVksRUFBRTtZQUNaLHdCQUF3QjtZQUN4Qiw2QkFBNkI7WUFDN0IsZ0NBQWdDO1lBQ2hDLCtCQUErQjtTQUNoQztRQUNELGVBQWUsRUFBRTtZQUNmLHdCQUF3QjtZQUN4Qiw2QkFBNkI7WUFDN0IsZ0NBQWdDO1lBQ2hDLCtCQUErQjtTQUNoQztRQUNELE9BQU8sRUFBRSxDQUFDLHdCQUF3QixDQUFDO0tBQ3BDLENBQUM7R0FDVyw0QkFBNEIsQ0FBRztTQUEvQiw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sbGFwc2VNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2NvbGxhcHNlJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5cbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zTGlzdE1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtbGlzdCc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1NlcnZpY2VNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTaW5nbGVPcGVyYXRpb25EZXRhaWxzU2VydmljZSB9IGZyb20gJy4vc2luZ2xlLW9wZXJhdGlvbi1kZXRhaWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2luZ2xlT3BlcmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9zaW5nbGUtb3BlcmF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTaW5nbGVPcGVyYXRpb25Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vc2luZ2xlLW9wZXJhdGlvbi1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2luZ2xlT3BlcmF0aW9uTGlzdEl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3NpbmdsZS1vcGVyYXRpb24tbGlzdC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTaW5nbGVPcGVyYXRpb25EZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi9zaW5nbGUtb3BlcmF0aW9uLWRldGFpbHMuY29tcG9uZW50JztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBhbGxvd3MgdG8gZGlzcGxheSBkZXRhaWxzIG9mIGEgc2luZ2xlIG9wZXJhdGlvbiBpbiBhIG1vZGFsLlxuICovXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBQb3BvdmVyTW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGUsXG4gICAgQ29sbGFwc2VNb2R1bGUsXG4gICAgQnVsa09wZXJhdGlvbnNMaXN0TW9kdWxlLFxuICAgIEJ1bGtPcGVyYXRpb25zU2VydmljZU1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtTaW5nbGVPcGVyYXRpb25EZXRhaWxzU2VydmljZV0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNpbmdsZU9wZXJhdGlvbkNvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25Nb2RhbENvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25MaXN0SXRlbUNvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25EZXRhaWxzQ29tcG9uZW50XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFNpbmdsZU9wZXJhdGlvbkNvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25Nb2RhbENvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25MaXN0SXRlbUNvbXBvbmVudCxcbiAgICBTaW5nbGVPcGVyYXRpb25EZXRhaWxzQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtTaW5nbGVPcGVyYXRpb25Db21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFNpbmdsZU9wZXJhdGlvbkRldGFpbHNNb2R1bGUge31cbiJdfQ==