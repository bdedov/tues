import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
let StatusFilterComponent = class StatusFilterComponent {
    constructor() {
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    /** List of filter options to be displayed */
    set options(options) {
        this.statusOptions = (options || []).map(option => ({ selected: false, option }));
    }
    /**
     * Allows multiple options to be active simultaneosly.
     */
    set _multiple(multiple) {
        this.multiple = coerceBooleanProperty(multiple);
    }
    /** Display the filter as a small button group */
    set _small(small) {
        this.small = coerceBooleanProperty(small);
    }
    get displaySmall() {
        return this.small;
    }
    changeFilter(option) {
        this.isAllButtonSelected = false;
        let emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(op => op !== option).forEach(op => (op.selected = false));
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    }
    removeFilter() {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(op => (op.selected = false));
        this.emitSelectedOptions();
    }
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `IStatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    preset(filters, emit = true) {
        let firstSelected = false;
        this.statusOptions.forEach(option => (option.selected = false));
        this.statusOptions
            .filter(option => (filters || []).map(o => o.label).includes(option.option.label))
            .filter(() => {
            // only first option passed will be set in single selection mode
            const include = this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(option => (option.selected = true));
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    }
    reset() {
        this.removeFilter();
    }
    activeFilters() {
        return this.statusOptions.filter(option => option.selected).map(option => option.option);
    }
    isFilterApplied() {
        return this.statusOptions.some(option => option.selected);
    }
    emitSelectedOptions() {
        this.onFilterChanged.emit(this.statusOptions.filter(option => option.selected).map(option => option.option));
    }
};
tslib_1.__decorate([
    Input()
], StatusFilterComponent.prototype, "options", null);
tslib_1.__decorate([
    Input('multiple')
], StatusFilterComponent.prototype, "_multiple", null);
tslib_1.__decorate([
    Input('small')
], StatusFilterComponent.prototype, "_small", null);
tslib_1.__decorate([
    HostBinding('class.btn-group-sm')
], StatusFilterComponent.prototype, "displaySmall", null);
tslib_1.__decorate([
    Output()
], StatusFilterComponent.prototype, "onFilterChanged", void 0);
StatusFilterComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-status-filter',
        template: "<button\n  *ngFor=\"let option of statusOptions\"\n  class=\"btn btn-default\"\n  [ngClass]=\"{ active: option.selected }\"\n  tooltip=\"{{ option.option?.label | translate }}\"\n  container=\"body\"\n  (click)=\"changeFilter(option)\"\n>\n  <i [class]=\"option.option?.iconClass\"></i>\n  <span *ngIf=\"option.selected\" class=\"m-8\">{{ option.option?.label | translate }}</span>\n</button>\n<button\n  class=\"btn btn-default\"\n  title=\"{{ 'All' | translate }}\"\n  [ngClass]=\"{ active: isAllButtonSelected }\"\n  (click)=\"removeFilter()\"\n>\n  {{ 'All' | translate }}\n</button>\n",
        host: { class: 'btn-group' }
    })
], StatusFilterComponent);
export { StatusFilterComponent };
//# sourceMappingURL=data:application/json;base64,