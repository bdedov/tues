import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AssetNodeService } from '../asset-node.service';
import { GroupFragment } from '../group-fragment.model';
import { GroupNode } from './group-node';
let GroupNodeService = class GroupNodeService extends AssetNodeService {
    constructor() {
        super(...arguments);
        this.PAGE_SIZE = 5;
    }
    createGroupNode(config) {
        return new GroupNode(this, config);
    }
    createChildNode(managedObject) {
        const config = { mo: managedObject };
        return this.createGroupNode(config);
    }
    subassetsQueryFilter() {
        const { moduleConfig } = this;
        const groupFilter = [`(type eq '${GroupFragment.groupType}')`];
        if (moduleConfig.smartGroups) {
            groupFilter.push(`(has(${GroupFragment.groupFragmentType}))`);
            groupFilter.push(`(type eq '${GroupFragment.dynamicGroupType}' and has(${GroupFragment.dynamicGroupFragment}) and not(has(${GroupFragment.dynamicGroupFragment}.invisible)))`);
        }
        return `$filter=(${groupFilter.join(' or ')})$orderby=name`;
    }
    getGroupItems(moId) {
        return this.inventory.childAssetsList(moId, {
            query: this.subassetsQueryFilter(),
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            withTotalPages: true
        });
    }
};
GroupNodeService = tslib_1.__decorate([
    Injectable()
], GroupNodeService);
export { GroupNodeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtbm9kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yLyIsInNvdXJjZXMiOlsiYXNzZXQtc2VsZWN0b3IvZ3JvdXAtbm9kZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR3pDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWlCLFNBQVEsZ0JBQWdCO0lBRHREOztRQUlZLGNBQVMsR0FBRyxDQUFDLENBQUM7SUFpQzFCLENBQUM7SUEvQkMsZUFBZSxDQUFDLE1BQU07UUFDcEIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGVBQWUsQ0FBQyxhQUFhO1FBQzNCLE1BQU0sTUFBTSxHQUF1QixFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELG9CQUFvQjtRQUNsQixNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLENBQUMsYUFBYSxhQUFhLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQztRQUMvRCxJQUFJLFlBQVksQ0FBQyxXQUFXLEVBQUU7WUFDNUIsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLGFBQWEsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUM7WUFDOUQsV0FBVyxDQUFDLElBQUksQ0FDZCxhQUFhLGFBQWEsQ0FBQyxnQkFBZ0IsYUFDekMsYUFBYSxDQUFDLG9CQUNoQixpQkFBaUIsYUFBYSxDQUFDLG9CQUFvQixlQUFlLENBQ25FLENBQUM7U0FDSDtRQUNELE9BQU8sWUFBWSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5RCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVk7UUFDeEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDMUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUNsQyxZQUFZLEVBQUUsS0FBSztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDeEIsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFwQ1ksZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTtHQUNBLGdCQUFnQixDQW9DNUI7U0FwQ1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXNzZXROb2RlU2VydmljZSB9IGZyb20gJy4uL2Fzc2V0LW5vZGUuc2VydmljZSc7XG5pbXBvcnQgeyBHcm91cEZyYWdtZW50IH0gZnJvbSAnLi4vZ3JvdXAtZnJhZ21lbnQubW9kZWwnO1xuaW1wb3J0IHsgR3JvdXBOb2RlIH0gZnJvbSAnLi9ncm91cC1ub2RlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdyb3VwTm9kZVNlcnZpY2UgZXh0ZW5kcyBBc3NldE5vZGVTZXJ2aWNlIHtcbiAgcm9vdE5vZGU6IEdyb3VwTm9kZTtcbiAgZHJhZ2dlZERhdGE6IEdyb3VwTm9kZTtcbiAgcHJvdGVjdGVkIFBBR0VfU0laRSA9IDU7XG5cbiAgY3JlYXRlR3JvdXBOb2RlKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgR3JvdXBOb2RlKHRoaXMsIGNvbmZpZyk7XG4gIH1cblxuICBjcmVhdGVDaGlsZE5vZGUobWFuYWdlZE9iamVjdCk6IEdyb3VwTm9kZSB7XG4gICAgY29uc3QgY29uZmlnOiBQYXJ0aWFsPEdyb3VwTm9kZT4gPSB7IG1vOiBtYW5hZ2VkT2JqZWN0IH07XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlR3JvdXBOb2RlKGNvbmZpZyk7XG4gIH1cblxuICBzdWJhc3NldHNRdWVyeUZpbHRlcigpIHtcbiAgICBjb25zdCB7IG1vZHVsZUNvbmZpZyB9ID0gdGhpcztcbiAgICBjb25zdCBncm91cEZpbHRlciA9IFtgKHR5cGUgZXEgJyR7R3JvdXBGcmFnbWVudC5ncm91cFR5cGV9JylgXTtcbiAgICBpZiAobW9kdWxlQ29uZmlnLnNtYXJ0R3JvdXBzKSB7XG4gICAgICBncm91cEZpbHRlci5wdXNoKGAoaGFzKCR7R3JvdXBGcmFnbWVudC5ncm91cEZyYWdtZW50VHlwZX0pKWApO1xuICAgICAgZ3JvdXBGaWx0ZXIucHVzaChcbiAgICAgICAgYCh0eXBlIGVxICcke0dyb3VwRnJhZ21lbnQuZHluYW1pY0dyb3VwVHlwZX0nIGFuZCBoYXMoJHtcbiAgICAgICAgICBHcm91cEZyYWdtZW50LmR5bmFtaWNHcm91cEZyYWdtZW50XG4gICAgICAgIH0pIGFuZCBub3QoaGFzKCR7R3JvdXBGcmFnbWVudC5keW5hbWljR3JvdXBGcmFnbWVudH0uaW52aXNpYmxlKSkpYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGAkZmlsdGVyPSgke2dyb3VwRmlsdGVyLmpvaW4oJyBvciAnKX0pJG9yZGVyYnk9bmFtZWA7XG4gIH1cblxuICBnZXRHcm91cEl0ZW1zKG1vSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5LmNoaWxkQXNzZXRzTGlzdChtb0lkLCB7XG4gICAgICBxdWVyeTogdGhpcy5zdWJhc3NldHNRdWVyeUZpbHRlcigpLFxuICAgICAgd2l0aENoaWxkcmVuOiBmYWxzZSxcbiAgICAgIHBhZ2VTaXplOiB0aGlzLlBBR0VfU0laRSxcbiAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==