import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Action, ActionFactory, TabsService } from '@c8y/ngx-components';
import { BridgeService } from './bridge.service';
let Ng1ActionFactoryService = class Ng1ActionFactoryService {
    constructor(bridge, tabs) {
        this.bridge = bridge;
        this.tabs = tabs;
        this.routeChanges$ = bridge.$routeChanges;
        this.$location = bridge.injector.get('$location');
        this.tabs.items$.subscribe((newTabs) => this.handleTabsRedirect(newTabs));
    }
    handleTabsRedirect(tabs) {
        /**
         * This function is doing the same process as function redirect in the file
         * modules/core/ui/navigation/tabs.provider.js
         * That function  is not run because bridge.service.ts overrides the method addTab where the redirect() was called.
         */
        const redirectedTab = tabs.find((tab) => tab.redirectedTo);
        const [topPriorityTab] = tabs;
        if (redirectedTab && !topPriorityTab.redirectedTo) {
            this.$location.replace();
            this.$location.path(topPriorityTab.path);
            topPriorityTab.redirectedTo = true;
            redirectedTab.redirectedTo = false;
        }
    }
    get() {
        return this.bridge.getActions();
    }
};
Ng1ActionFactoryService.ctorParameters = () => [
    { type: BridgeService },
    { type: TabsService }
];
Ng1ActionFactoryService = tslib_1.__decorate([
    Injectable()
], Ng1ActionFactoryService);
export { Ng1ActionFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJhY3Rpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLakQsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFHbEMsWUFDVSxNQUFxQixFQUNyQixJQUFpQjtRQURqQixXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQ3JCLFNBQUksR0FBSixJQUFJLENBQWE7UUFFekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsa0JBQWtCLENBQUMsSUFBSTtRQUNyQjs7OztXQUlHO1FBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBRSxjQUFjLENBQUUsR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFO1lBQ2pELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ25DLGFBQWEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7O1lBM0JtQixhQUFhO1lBQ2YsV0FBVzs7QUFMaEIsdUJBQXVCO0lBRG5DLFVBQVUsRUFBRTtHQUNBLHVCQUF1QixDQStCbkM7U0EvQlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25GYWN0b3J5LCBUYWJzU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQnJpZGdlU2VydmljZSB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nMUFjdGlvbkZhY3RvcnlTZXJ2aWNlIGltcGxlbWVudHMgQWN0aW9uRmFjdG9yeSB7XG4gIHJvdXRlQ2hhbmdlcyQ6IE9ic2VydmFibGU8YW55PjtcbiAgJGxvY2F0aW9uOiBhbnk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnJpZGdlOiBCcmlkZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGFiczogVGFic1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5yb3V0ZUNoYW5nZXMkID0gYnJpZGdlLiRyb3V0ZUNoYW5nZXM7XG4gICAgdGhpcy4kbG9jYXRpb24gPSBicmlkZ2UuaW5qZWN0b3IuZ2V0KCckbG9jYXRpb24nKTtcbiAgICB0aGlzLnRhYnMuaXRlbXMkLnN1YnNjcmliZSgobmV3VGFicykgPT4gdGhpcy5oYW5kbGVUYWJzUmVkaXJlY3QobmV3VGFicykpO1xuICB9XG5cbiAgaGFuZGxlVGFic1JlZGlyZWN0KHRhYnMpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGRvaW5nIHRoZSBzYW1lIHByb2Nlc3MgYXMgZnVuY3Rpb24gcmVkaXJlY3QgaW4gdGhlIGZpbGVcbiAgICAgKiBtb2R1bGVzL2NvcmUvdWkvbmF2aWdhdGlvbi90YWJzLnByb3ZpZGVyLmpzXG4gICAgICogVGhhdCBmdW5jdGlvbiAgaXMgbm90IHJ1biBiZWNhdXNlIGJyaWRnZS5zZXJ2aWNlLnRzIG92ZXJyaWRlcyB0aGUgbWV0aG9kIGFkZFRhYiB3aGVyZSB0aGUgcmVkaXJlY3QoKSB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGNvbnN0IHJlZGlyZWN0ZWRUYWIgPSB0YWJzLmZpbmQoKHRhYikgPT4gdGFiLnJlZGlyZWN0ZWRUbyk7XG4gICAgY29uc3QgWyB0b3BQcmlvcml0eVRhYiBdID0gdGFicztcbiAgICBpZiAocmVkaXJlY3RlZFRhYiAmJiAhdG9wUHJpb3JpdHlUYWIucmVkaXJlY3RlZFRvKSB7XG4gICAgICB0aGlzLiRsb2NhdGlvbi5yZXBsYWNlKCk7XG4gICAgICB0aGlzLiRsb2NhdGlvbi5wYXRoKHRvcFByaW9yaXR5VGFiLnBhdGgpO1xuICAgICAgdG9wUHJpb3JpdHlUYWIucmVkaXJlY3RlZFRvID0gdHJ1ZTtcbiAgICAgIHJlZGlyZWN0ZWRUYWIucmVkaXJlY3RlZFRvID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLmJyaWRnZS5nZXRBY3Rpb25zKCk7XG4gIH1cbn1cbiJdfQ==