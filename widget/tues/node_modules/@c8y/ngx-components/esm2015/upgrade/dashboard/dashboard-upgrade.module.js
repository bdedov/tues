import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule, NgZone, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { ActionBarService, HOOK_ACTION_BAR, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { TranslateModule } from '@ngx-translate/core';
import { Ng1ComponentFactoryService } from './component.factory';
import { CopyActionComponent } from './copy-action.component';
import { Ng1DashboardActionFactoryService } from './dashboard-actions.factory';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
let DashboardUpgradeModule = class DashboardUpgradeModule {
};
DashboardUpgradeModule = tslib_1.__decorate([
    NgModule({
        declarations: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
        entryComponents: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
        imports: [CommonModule, TranslateModule],
        providers: [
            {
                provide: DashboardBridgeService,
                useFactory: dashboardBridgeFactory,
                deps: ['$injector', NgZone, Router, [new Optional(), ContextDashboardService], ActionBarService]
            },
            { provide: HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true },
            { provide: HOOK_ACTION_BAR, useClass: Ng1DashboardActionFactoryService, multi: true }
        ]
    })
], DashboardUpgradeModule);
export { DashboardUpgradeModule };
export function dashboardBridgeFactory(injector, ngZone, router, contextDashboardService, actionBarService) {
    return new DashboardBridgeService(injector, ngZone, router, contextDashboardService, actionBarService);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLXVwZ3JhZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy91cGdyYWRlLyIsInNvdXJjZXMiOlsiZGFzaGJvYXJkL2Rhc2hib2FyZC11cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBZ0J0RSxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtDQUFHLENBQUE7QUFBekIsc0JBQXNCO0lBZGxDLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRSxDQUFDLHVCQUF1QixFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQztRQUNuRyxlQUFlLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLENBQUM7UUFDdEcsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQztRQUN4QyxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixVQUFVLEVBQUUsc0JBQXNCO2dCQUNsQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQzthQUNqRztZQUNELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUMvRSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7U0FDdEY7S0FDRixDQUFDO0dBQ1csc0JBQXNCLENBQUc7U0FBekIsc0JBQXNCO0FBRW5DLE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0I7SUFDeEcsT0FBTyxJQUFJLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDekcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgTmdab25lLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFjdGlvbkJhclNlcnZpY2UsIEhPT0tfQUNUSU9OX0JBUiwgSE9PS19DT01QT05FTlRTfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9jb250ZXh0LWRhc2hib2FyZCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE5nMUNvbXBvbmVudEZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9jb21wb25lbnQuZmFjdG9yeSc7XG5pbXBvcnQgeyBDb3B5QWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb3B5LWFjdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmcxRGFzaGJvYXJkQWN0aW9uRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1hY3Rpb25zLmZhY3RvcnknO1xuaW1wb3J0IHsgRGFzaGJvYXJkQnJpZGdlU2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWJyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3RlQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9wYXN0ZS1hY3Rpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZXZpY2VTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0RldmljZVNlbGVjdG9yQ29tcG9uZW50LCBXaWRnZXRDb21wb25lbnQsIENvcHlBY3Rpb25Db21wb25lbnQsIFBhc3RlQWN0aW9uQ29tcG9uZW50XSxcbiAgZW50cnlDb21wb25lbnRzOiBbRGV2aWNlU2VsZWN0b3JDb21wb25lbnQsIFdpZGdldENvbXBvbmVudCwgQ29weUFjdGlvbkNvbXBvbmVudCwgUGFzdGVBY3Rpb25Db21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBUcmFuc2xhdGVNb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLFxuICAgICAgdXNlRmFjdG9yeTogZGFzaGJvYXJkQnJpZGdlRmFjdG9yeSxcbiAgICAgIGRlcHM6IFsnJGluamVjdG9yJywgTmdab25lLCBSb3V0ZXIsIFtuZXcgT3B0aW9uYWwoKSwgQ29udGV4dERhc2hib2FyZFNlcnZpY2VdLCBBY3Rpb25CYXJTZXJ2aWNlXVxuICAgIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0NPTVBPTkVOVFMsIHVzZUNsYXNzOiBOZzFDb21wb25lbnRGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQUNUSU9OX0JBUiwgdXNlQ2xhc3M6IE5nMURhc2hib2FyZEFjdGlvbkZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkVXBncmFkZU1vZHVsZSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZGFzaGJvYXJkQnJpZGdlRmFjdG9yeShpbmplY3Rvciwgbmdab25lLCByb3V0ZXIsIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLCBhY3Rpb25CYXJTZXJ2aWNlKSB7XG4gIHJldHVybiBuZXcgRGFzaGJvYXJkQnJpZGdlU2VydmljZShpbmplY3Rvciwgbmdab25lLCByb3V0ZXIsIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLCBhY3Rpb25CYXJTZXJ2aWNlKTtcbn1cbiJdfQ==