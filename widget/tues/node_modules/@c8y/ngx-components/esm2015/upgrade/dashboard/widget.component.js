import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, OnInit, OnDestroy, Optional } from '@angular/core';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { WidgetsDashboardComponent } from '@c8y/ngx-components';
let WidgetComponent = class WidgetComponent {
    constructor(dashboard, dashboardBridgeService, el) {
        this.dashboard = dashboard;
        this.dashboardBridgeService = dashboardBridgeService;
        this.el = el;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.ng1Scope = yield this.dashboardBridgeService.instantiateComponent(this.config, this.el.nativeElement);
            if (this.dashboard) {
                this.resizeSubscription = this.dashboard.onChangeDashboard.subscribe(() => {
                    this.ng1Scope.$broadcast('dashboardResize');
                });
            }
        });
    }
    ngOnDestroy() {
        if (this.ng1Scope) {
            this.ng1Scope.$destroy();
        }
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    }
};
WidgetComponent.ctorParameters = () => [
    { type: WidgetsDashboardComponent, decorators: [{ type: Optional }] },
    { type: DashboardBridgeService },
    { type: ElementRef }
];
WidgetComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-widget-legacy',
        template: '',
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__param(0, Optional())
], WidgetComponent);
export { WidgetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvdXBncmFkZS8iLCJzb3VyY2VzIjpbImRhc2hib2FyZC93aWRnZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVFoRSxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBSTFCLFlBQ3NCLFNBQW9DLEVBQ2hELHNCQUE4QyxFQUM5QyxFQUFjO1FBRkYsY0FBUyxHQUFULFNBQVMsQ0FBMkI7UUFDaEQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQ3JCLENBQUM7SUFFRSxRQUFROztZQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNHLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtvQkFDeEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDOUMsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUM7S0FBQTtJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjtRQUNELElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN2QztJQUNILENBQUM7Q0FDRixDQUFBOztZQXRCa0MseUJBQXlCLHVCQUF2RCxRQUFRO1lBQ3VCLHNCQUFzQjtZQUMxQyxVQUFVOztBQVBiLGVBQWU7SUFMM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QixRQUFRLEVBQUUsRUFBRTtRQUNaLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7SUFNRyxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtHQUxGLGVBQWUsQ0EyQjNCO1NBM0JZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRzRGFzaGJvYXJkQ29tcG9uZW50IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXdpZGdldC1sZWdhY3knLFxuICB0ZW1wbGF0ZTogJycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgbmcxU2NvcGU7XG4gIGNvbmZpZztcbiAgcHJpdmF0ZSByZXNpemVTdWJzY3JpcHRpb24/OiBTdWJzY3JpcHRpb247XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZGFzaGJvYXJkOiBXaWRnZXRzRGFzaGJvYXJkQ29tcG9uZW50LFxuICAgIHByaXZhdGUgZGFzaGJvYXJkQnJpZGdlU2VydmljZTogRGFzaGJvYXJkQnJpZGdlU2VydmljZSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5nMVNjb3BlID0gYXdhaXQgdGhpcy5kYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlLmluc3RhbnRpYXRlQ29tcG9uZW50KHRoaXMuY29uZmlnLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIGlmICh0aGlzLmRhc2hib2FyZCkge1xuICAgICAgdGhpcy5yZXNpemVTdWJzY3JpcHRpb24gPSB0aGlzLmRhc2hib2FyZC5vbkNoYW5nZURhc2hib2FyZC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLm5nMVNjb3BlLiRicm9hZGNhc3QoJ2Rhc2hib2FyZFJlc2l6ZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubmcxU2NvcGUpIHtcbiAgICAgIHRoaXMubmcxU2NvcGUuJGRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVzaXplU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnJlc2l6ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19