import * as tslib_1 from "tslib";
import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_SEARCH, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1SearchFactoryService } from './search.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
let UpgradeModule = class UpgradeModule {
};
UpgradeModule = tslib_1.__decorate([
    NgModule({
        imports: [RouterModule],
        exports: [],
        providers: [
            bridgeServiceProvider,
            authBridgeServiceProvider,
            { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
            { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
            { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
            { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
            { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
            { provide: HOOK_SEARCH, useClass: Ng1SearchFactoryService, multi: true },
            { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
        ]
    })
], UpgradeModule);
export { UpgradeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJ1cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBaUJsRSxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0NBQUcsQ0FBQTtBQUFoQixhQUFhO0lBZnpCLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztRQUN2QixPQUFPLEVBQUUsRUFBRTtRQUNYLFNBQVMsRUFBRTtZQUNULHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDaEYsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ3BFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUMvRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDeEUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ2hGLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUN4RSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7U0FDckU7S0FDRixDQUFDO0dBQ1csYUFBYSxDQUFHO1NBQWhCLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2JyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEhPT0tfQUNUSU9OLFxuICBIT09LX0FDVElPTl9CQVIsXG4gIEhPT0tfQlJFQURDUlVNQixcbiAgSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gIEhPT0tfU0VBUkNILFxuICBIT09LX1RBQlMsXG4gIEhPT0tfRE9DUyxcbiAgUm91dGVyTW9kdWxlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTmcxQWN0aW9uQmFyRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi1iYXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFBY3Rpb25GYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYWN0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9icmVhZGNydW1iLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxTm9kZXNGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vbm9kZXMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFTZWFyY2hGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vc2VhcmNoLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxVGFic0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi90YWJzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nMURvY3NGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZG9jcy5mYWN0b3J5JztcbmltcG9ydCB7IGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2F1dGgtYnJpZGdlLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlXSxcbiAgZXhwb3J0czogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIGJyaWRnZVNlcnZpY2VQcm92aWRlcixcbiAgICBhdXRoQnJpZGdlU2VydmljZVByb3ZpZGVyLFxuICAgIHsgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsIHVzZUNsYXNzOiBOZzFOb2Rlc0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19UQUJTLCB1c2VDbGFzczogTmcxVGFic0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19BQ1RJT05fQkFSLCB1c2VDbGFzczogTmcxQWN0aW9uQmFyRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTiwgdXNlQ2xhc3M6IE5nMUFjdGlvbkZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19CUkVBRENSVU1CLCB1c2VDbGFzczogTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19TRUFSQ0gsIHVzZUNsYXNzOiBOZzFTZWFyY2hGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfRE9DUywgdXNlQ2xhc3M6IE5nMURvY3NGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFVwZ3JhZGVNb2R1bGUge31cbiJdfQ==