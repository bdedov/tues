import { AppStateService, } from '@c8y/ngx-components';
import { BasicAuth, FetchClient } from '@c8y/client';
export class AuthBridgeService {
    constructor(injector, basicAuth, fetchClient, appState) {
        this.injector = injector;
        this.basicAuth = basicAuth;
        this.fetchClient = fetchClient;
        this.appState = appState;
        this.hookAuth();
    }
    updateBasicAuth(credentials) {
        const { headers } = this.fetchClient.getFetchOptions({});
        if (headers.Authorization) {
            const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
            if (token) {
                this.basicAuth.updateCredentials(credentials);
                this.fetchClient.setAuth(this.basicAuth);
            }
        }
    }
    hookAuth() {
        this.appState.currentUser.subscribe(u => {
            if (u) {
                this.injector.get('c8yAuth').headers = () => this.fetchClient.getFetchOptions({}).headers;
                const { headers } = this.fetchClient.getFetchOptions({});
                if (headers.Authorization) {
                    const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                    if (token) {
                        this.setToken(token, headers.tfatoken);
                    }
                }
                else {
                    this.setToken(undefined, headers.tfatoken, 'Oauth');
                }
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
            }
            else {
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
            }
        });
    }
    setToken(token, tfa, type = 'Basic') {
        const c8yAuth = this.injector.get('c8yAuth');
        if (type === 'Basic') {
            c8yAuth.onSetToken({ token, type });
            if (tfa) {
                c8yAuth.setTFAToken(tfa);
            }
        }
        else {
            c8yAuth.authReady();
        }
    }
}
export function authBridgeServiceFactory(injector, basicAuth, fetchClient, appState) {
    return new AuthBridgeService(injector, basicAuth, fetchClient, appState);
}
export const authBridgeServiceProvider = {
    provide: AuthBridgeService,
    useFactory: authBridgeServiceFactory,
    deps: ['$injector', BasicAuth, FetchClient, AppStateService]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1icmlkZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvdXBncmFkZS8iLCJzb3VyY2VzIjpbImF1dGgtYnJpZGdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGVBQWUsR0FDaEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxhQUFhLENBQUM7QUFFbkUsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUNTLFFBQWEsRUFDWixTQUFvQixFQUNwQixXQUF3QixFQUN4QixRQUF5QjtRQUgxQixhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQ1osY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUVqQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUF5QjtRQUN2QyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3pCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksS0FBSyxFQUFFO2dCQUNULElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMxQztTQUNGO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEVBQUU7Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDMUYsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUU7b0JBQ3pCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLEtBQUssRUFBRTt3QkFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ3hDO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ3JEO2dCQUNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzdFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQzlFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWMsRUFBRSxHQUFZLEVBQUUsSUFBSSxHQUFHLE9BQU87UUFDbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNwQyxJQUFJLEdBQUcsRUFBRTtnQkFDUCxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzFCO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsUUFBYSxFQUNiLFNBQW9CLEVBQ3BCLFdBQXdCLEVBQ3hCLFFBQXlCO0lBRXpCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkMsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixVQUFVLEVBQUUsd0JBQXdCO0lBQ3BDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQztDQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwU3RhdGVTZXJ2aWNlLFxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEJhc2ljQXV0aCwgRmV0Y2hDbGllbnQsIElDcmVkZW50aWFscyB9IGZyb20gJ0BjOHkvY2xpZW50JztcblxuZXhwb3J0IGNsYXNzIEF1dGhCcmlkZ2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGluamVjdG9yOiBhbnksXG4gICAgcHJpdmF0ZSBiYXNpY0F1dGg6IEJhc2ljQXV0aCxcbiAgICBwcml2YXRlIGZldGNoQ2xpZW50OiBGZXRjaENsaWVudCxcbiAgICBwcml2YXRlIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5ob29rQXV0aCgpO1xuICB9XG5cbiAgdXBkYXRlQmFzaWNBdXRoKGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHRoaXMuZmV0Y2hDbGllbnQuZ2V0RmV0Y2hPcHRpb25zKHt9KTtcbiAgICBpZiAoaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGhlYWRlcnMuQXV0aG9yaXphdGlvbi5tYXRjaCgvYmFzaWNcXHMoLiopJC9pKVsxXTtcbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICB0aGlzLmJhc2ljQXV0aC51cGRhdGVDcmVkZW50aWFscyhjcmVkZW50aWFscyk7XG4gICAgICAgIHRoaXMuZmV0Y2hDbGllbnQuc2V0QXV0aCh0aGlzLmJhc2ljQXV0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaG9va0F1dGgoKSB7XG4gICAgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VXNlci5zdWJzY3JpYmUodSA9PiB7XG4gICAgICBpZiAodSkge1xuICAgICAgICB0aGlzLmluamVjdG9yLmdldCgnYzh5QXV0aCcpLmhlYWRlcnMgPSAoKSA9PiB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSkuaGVhZGVycztcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSk7XG4gICAgICAgIGlmIChoZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IGhlYWRlcnMuQXV0aG9yaXphdGlvbi5tYXRjaCgvYmFzaWNcXHMoLiopJC9pKVsxXTtcbiAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4odG9rZW4sIGhlYWRlcnMudGZhdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFRva2VuKHVuZGVmaW5lZCwgaGVhZGVycy50ZmF0b2tlbiwgJ09hdXRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFRva2VuKHRva2VuPzogc3RyaW5nLCB0ZmE/OiBzdHJpbmcsIHR5cGUgPSAnQmFzaWMnKSB7XG4gICAgY29uc3QgYzh5QXV0aCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlBdXRoJyk7XG4gICAgaWYgKHR5cGUgPT09ICdCYXNpYycpIHtcbiAgICAgIGM4eUF1dGgub25TZXRUb2tlbih7IHRva2VuLCB0eXBlIH0pO1xuICAgICAgaWYgKHRmYSkge1xuICAgICAgICBjOHlBdXRoLnNldFRGQVRva2VuKHRmYSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGM4eUF1dGguYXV0aFJlYWR5KCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRoQnJpZGdlU2VydmljZUZhY3RvcnkoXG4gIGluamVjdG9yOiBhbnksXG4gIGJhc2ljQXV0aDogQmFzaWNBdXRoLFxuICBmZXRjaENsaWVudDogRmV0Y2hDbGllbnQsXG4gIGFwcFN0YXRlOiBBcHBTdGF0ZVNlcnZpY2Vcbikge1xuICByZXR1cm4gbmV3IEF1dGhCcmlkZ2VTZXJ2aWNlKGluamVjdG9yLCBiYXNpY0F1dGgsIGZldGNoQ2xpZW50LCBhcHBTdGF0ZSk7XG59XG5cbmV4cG9ydCBjb25zdCBhdXRoQnJpZGdlU2VydmljZVByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBBdXRoQnJpZGdlU2VydmljZSxcbiAgdXNlRmFjdG9yeTogYXV0aEJyaWRnZVNlcnZpY2VGYWN0b3J5LFxuICBkZXBzOiBbJyRpbmplY3RvcicsIEJhc2ljQXV0aCwgRmV0Y2hDbGllbnQsIEFwcFN0YXRlU2VydmljZV1cbn07XG4iXX0=