import * as tslib_1 from "tslib";
import { Component, forwardRef, Inject } from '@angular/core';
import { CellRendererContext } from '@c8y/ngx-components';
import { DeviceGridService } from '../device-grid.service';
let AlarmsCellRendererComponent = class AlarmsCellRendererComponent {
    constructor(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
};
AlarmsCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(() => DeviceGridService),] }] }
];
AlarmsCellRendererComponent = tslib_1.__decorate([
    Component({
        template: "<a [href]=\"deviceGridService.getAlarmsHref(context.item)\" class=\"listLink\">\n  <small\n    class=\"status critical\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.critical\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.critical }} <i [c8yIcon]=\"'warning'\"></i>\n  </small>\n  <small\n    class=\"status major\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.major\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.major }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status minor\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.minor\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.minor }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status warning\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.warning\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.warning }} <i [c8yIcon]=\"'circle'\"></i>\n  </small>\n</a>\n"
    }),
    tslib_1.__param(1, Inject(forwardRef(() => DeviceGridService)))
], AlarmsCellRendererComponent);
export { AlarmsCellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZC8iLCJzb3VyY2VzIjpbImNvbHVtbnMvYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLM0QsSUFBYSwyQkFBMkIsR0FBeEMsTUFBYSwyQkFBMkI7SUFDdEMsWUFDUyxPQUE0QixFQUNpQixpQkFBb0M7UUFEakYsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDaUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUN2RixDQUFDO0NBQ0wsQ0FBQTs7WUFIbUIsbUJBQW1CO1lBQ29DLGlCQUFpQix1QkFBdkYsTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzs7QUFIbEMsMkJBQTJCO0lBSHZDLFNBQVMsQ0FBQztRQUNULDZqQ0FBb0Q7S0FDckQsQ0FBQztJQUlHLG1CQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0dBSG5DLDJCQUEyQixDQUt2QztTQUxZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZWxsUmVuZGVyZXJDb250ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkU2VydmljZSB9IGZyb20gJy4uL2RldmljZS1ncmlkLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL2FsYXJtcy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gRGV2aWNlR3JpZFNlcnZpY2UpKSBwdWJsaWMgZGV2aWNlR3JpZFNlcnZpY2U6IERldmljZUdyaWRTZXJ2aWNlXG4gICkge31cbn1cbiJdfQ==