import * as tslib_1 from "tslib";
import { Component, OnInit, ViewChildren, QueryList, Input, Output, EventEmitter, ViewChild, OnChanges, ChangeDetectorRef } from '@angular/core';
import { Router } from '@angular/router';
import { OpcuaService } from './opcuaService';
import { AlertService, gettext } from '@c8y/ngx-components';
import { find, assign, omit, findIndex, pick, get } from 'lodash';
import { OpcuaDeviceProtocolMapping } from './opcua-device-protocol-mapping.component';
let OpcuaDeviceProtocolDetailComponent = class OpcuaDeviceProtocolDetailComponent {
    constructor(changeDetectorRef, opcuaService, alertService, router) {
        this.changeDetectorRef = changeDetectorRef;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.router = router;
        this.initialModel = {
            id: '',
            fieldbusType: 'opcuaV2',
            description: '',
            unit: '',
            fieldbusVersion: 4,
            name: '',
            referencedServerId: '',
            referencedRootNodeId: '',
            subscriptionType: {
                type: 'None'
            },
            mappings: [],
            overriddenSubscriptions: [],
            applyConstraints: {
                browsePathMatchesRegex: '',
                matchesNodeIds: [],
                serverObjectHasFragment: '',
                matchesServerIds: []
            },
            enabled: ''
        };
        this.isLoaded = true;
        this.getParentAttr = key => get(this.model, key);
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    getMapping() {
        return this.model.mappings;
    }
    getEmptyMappingObject() {
        return {
            id: 'new',
            browsePath: []
        };
    }
    getOverriddenSubscriptionsByPath(browsePath) {
        return find(this.model.overriddenSubscriptions, { browsePath });
    }
    getStructuredResource(resource) {
        const overriddenSubscriptions = this.getOverriddenSubscriptionsByPath(resource.browsePath);
        let result = assign({}, resource);
        if (overriddenSubscriptions) {
            result = assign({}, resource, { subscriptionType: overriddenSubscriptions.subscriptionType });
        }
        return result;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = this.opcuaService.getId();
            if (id) {
                const res = yield this.opcuaService.getDeviceProtocol(id);
                if (res && res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.isLoaded = false;
                }
                else {
                    const data = yield res.json();
                    if (data && data.applyConstraints === null) {
                        delete data.applyConstraints;
                    }
                    if (data && data.subscriptionType === null) {
                        delete data.subscriptionType;
                    }
                    this.model = assign(this.initialModel, data);
                    if (!this.model.mappings) {
                        this.model.mappings = [];
                    }
                    this.model = assign(this.initialModel, this.updateViableMapping(data));
                    this.isLoaded = false;
                }
            }
        });
    }
    updateViableMapping(model) {
        const { mappings } = model;
        let result = [];
        if (mappings) {
            result = mappings.map((item, i) => {
                return assign(item, { id: i });
            });
        }
        return assign(model, { mappings: result });
    }
    trackByIndex(index) {
        return index;
    }
    addVariable() {
        this.model.mappings.push(this.getEmptyMappingObject());
    }
    updateVariable(mappingObject) {
        const { mappings } = this.model;
        const index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
        if (mappingObject.id === 'new') {
            mappingObject.id = mappings.length;
        }
        mappings.push(mappingObject);
    }
    removeVariable(mappingObject) {
        const { mappings } = this.model;
        const index = findIndex(mappings, { id: mappingObject.id });
        mappings.splice(index, 1);
    }
    actionHandler(actionObject) {
        switch (actionObject.action) {
            case 'save':
                this.updateVariable(actionObject.data);
                break;
            case 'delete':
                this.removeVariable(actionObject.data);
                break;
        }
    }
    extractOverridSubscriptionType(_mapping) {
        const overriddenSubscriptions = [];
        const variableMapping = [];
        _mapping.forEach(element => {
            if (element.id !== 'new') {
                if (element.subscriptionType) {
                    overriddenSubscriptions.push(assign({ browsePath: element.browsePath }, { subscriptionType: element.subscriptionType }));
                }
                variableMapping.push(omit(element, ['subscriptionType']));
            }
        });
        return [variableMapping, overriddenSubscriptions];
    }
    prepareRequestJson(_model) {
        let requestJson = {};
        const [mappings, overriddenSubscriptions] = this.extractOverridSubscriptionType(_model.mappings);
        requestJson = assign(requestJson, pick(_model, Object.keys(this.initialModel)), {
            mappings,
            overriddenSubscriptions
        });
        return requestJson;
    }
    save() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield this.opcuaService.updateDeviceProtocol(this.prepareRequestJson(this.model));
                if (res && res.status === 200) {
                    this.router.navigate(['deviceprotocols']);
                    this.alertService.success(gettext('Device protocol saved.'));
                }
                else {
                    this.alertService.addServerFailure({ res });
                }
            }
            catch (ex) {
                this.alertService.danger(gettext('Failed to save. Try again.'));
            }
        });
    }
    canSave(deviceTypeForm) {
        if (this.instanceList) {
            const activeInstances = this.instanceList.filter(item => item.isActive());
            if (activeInstances.length > 0) {
                return true;
            }
        }
        return !deviceTypeForm.form.valid;
    }
};
OpcuaDeviceProtocolDetailComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: OpcuaService },
    { type: AlertService },
    { type: Router }
];
tslib_1.__decorate([
    ViewChildren(OpcuaDeviceProtocolMapping)
], OpcuaDeviceProtocolDetailComponent.prototype, "instanceList", void 0);
OpcuaDeviceProtocolDetailComponent = tslib_1.__decorate([
    Component({
        selector: 'opcua-device-protocol-detail',
        template: "<c8y-title *ngIf=\"!isLoaded\">{{ model.name }}</c8y-title>\n<div>\n  <form #deviceTypeForm=\"ngForm\" name=\"detailForm\" *ngIf=\"!isLoaded\">\n    <opcua-device-protocol-description [model]=\"model\"></opcua-device-protocol-description>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Variables</h4>\n      </div>\n      <div class=\"list-group\" *ngIf=\"model.mappings.length > 0\" ngModelGroup=\"variable\">\n        <opcua-device-protocol-mapping\n          *ngFor=\"let resource of getMapping(); trackBy: trackByIndex; let i = index\"\n          [index]=\"i\"\n          [referencedServerId]=\"model.referencedServerId\"\n          [referencedRootNodeId]=\"model.referencedRootNodeId\"\n          [resource]=\"getStructuredResource(resource)\"\n          [getParentAttr]=\"getParentAttr\"\n          (onAction)=\"actionHandler($event)\"\n        >\n        </opcua-device-protocol-mapping>\n      </div>\n      <div class=\"card-block\">\n        <div class=\"c8y-empty-state text-left\" *ngIf=\"model.mappings.length === 0\">\n          <h1 c8yIcon=\"sliders\"></h1>\n          <p translate>No variables to display. Click below to add.</p>\n        </div>\n        <button\n          title=\"{{ 'Add variable' | translate }}\"\n          class=\"btn-add-block addVariableBtn\"\n          (click)=\"addVariable()\"\n        >\n          <i c8yIcon=\"plus-circle\"></i> {{ 'Add variable' | translate }}\n        </button>\n      </div>\n    </div>\n    <div class=\"card m-b-4\">\n      <div class=\"card-header separator\">\n        <h4 translate>Data reporting</h4>\n      </div>\n      <div class=\"card-block\" ngModelGroup=\"subscription\">\n        <opcua-device-protocol-data-reporting\n          [groupName]=\"'subscription'\"\n          [model]=\"model\"\n        ></opcua-device-protocol-data-reporting>\n      </div>\n    </div>\n    <div class=\"card\">\n      <div class=\"card-header separator\">\n        <h4 translate>Auto apply constraints</h4>\n      </div>\n      <div class=\"card-block overflow-visible\" ngModelGroup=\"autoApply\">\n        <opcua-auto-apply [model]=\"model\"></opcua-auto-apply>\n      </div>\n    </div>\n\n    <span>\n      <div class=\"text-center page-footer m-t-16\">\n        <div class=\"btn-save-wrapper animated\">\n          <button\n            title=\"{{ 'Save' | translate }}\"\n            id=\"deviceTypeSave\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"canSave(deviceTypeForm)\"\n            translate\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </span>\n  </form>\n</div>\n"
    })
], OpcuaDeviceProtocolDetailComponent);
export { OpcuaDeviceProtocolDetailComponent };
//# sourceMappingURL=data:application/json;base64,