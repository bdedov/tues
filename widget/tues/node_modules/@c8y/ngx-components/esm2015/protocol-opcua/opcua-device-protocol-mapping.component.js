import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ControlContainer, NgModelGroup } from '@angular/forms';
import { AlertService, gettext } from '@c8y/ngx-components';
import { isEmpty, assign, unset, get, set, cloneDeep, isEqual } from 'lodash-es';
import { OpcuaDeviceProtocolObjectMapping } from './opcua-device-protocol-object-mapping.component';
import { AddressSpaceService } from './address-space.service';
let OpcuaDeviceProtocolMapping = class OpcuaDeviceProtocolMapping {
    constructor(alertService, addressSpaceService) {
        this.alertService = alertService;
        this.addressSpaceService = addressSpaceService;
        this.onAction = new EventEmitter();
        this.isPathFocused = false;
        this.isBrowsePathUniq = true;
        this.dataReporting = 'default';
        this.isTreeOpen = false;
        this.isNew = false;
        this.resetModel = false;
        this.moId = '';
        this.getMappings = () => this.getParentAttr('mappings');
    }
    toggleDetail() {
        this.isDetailOpen = !this.isDetailOpen;
        if (this.resetModel) {
            this.initialFormSetup();
        }
    }
    ngOnInit() {
        this.dataReportingName = 'ReportingMode' + this.index;
        this.initialFormSetup();
    }
    ngOnChanges(changes) {
        if (changes._model.previousValue &&
            !isEqual(this._model, changes._model.previousValue.SimpleChange)) {
            if (this.mapping && this.mapping.name === this._model.name) {
                this.mapping.id = this._model.id;
            }
        }
    }
    initialFormSetup() {
        const mapping = {
            id: '',
            browsePath: [],
            name: '',
            subscriptionType: {
                type: 'None'
            }
        };
        const customAction = {
            headers: [{ key: 'Authorization', value: '' }, { key: 'Content-Type', value: '' }],
            bodyTemplate: '',
            type: 'HttpPost',
            endpoint: ''
        };
        this.mapping = assign({}, mapping, cloneDeep(this._model));
        if (isEmpty(this.mapping.browsePath)) {
            this.isNew = true;
            this.isDetailOpen = true;
        }
        else {
            this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
            this.nodeDisplayName = this.mapping.name;
        }
        if (this.referencedRootNodeId) {
            this.referencedNode = { nodeId: this.referencedRootNodeId };
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
        else {
            this.referencedNode = { nodeId: '' };
        }
        if (get(this.mapping, 'customAction')) {
            this.customAction = assign(customAction, get(this.mapping, 'customAction'));
            this.customAction.headers = this.mapHeadersObjectToList(get(this.customAction, 'headers'));
        }
        else {
            this.customAction = assign({}, customAction);
        }
        unset(this.mapping, 'customAction');
        if (get(this._model, 'subscriptionType')) {
            this.dataReporting = 'custom';
        }
        else {
            this.dataReporting = 'default';
        }
        this.resetModel = false;
    }
    showAddressSpaceTree() {
        return !isEmpty(this.referencedServerId);
    }
    ngAfterViewInit() {
        if (get(this.mapping, 'subscriptionType') &&
            get(this.mapping, 'subscriptionType.type') !== 'None') {
            this.dataReporting = 'custom';
        }
    }
    mapHeadersObjectToList(headers) {
        if (Object.keys(headers).length > 0) {
            return Object.keys(headers).map(item => {
                return { key: item, value: headers[item] };
            });
        }
    }
    stringfyBrowsePath(path) {
        return JSON.stringify(path);
    }
    updateBrowsePath(node) {
        this.mapping.browsePath = node.relativePath;
        this.nodeDisplayName = node.displayName;
        this.mapping.name = this.nodeDisplayName;
        this.browsePath = this.stringfyBrowsePath(this.mapping.browsePath);
        this.browsePathModel.control.markAsDirty();
    }
    updateDisplayname() {
        this.mapping.name = this.nodeDisplayName;
    }
    updateBrowsePathInput() {
        if (this.browsePath) {
            try {
                this.mapping.browsePath = JSON.parse(this.browsePath);
            }
            catch (error) {
                return;
            }
        }
    }
    save() {
        if (this.dataReporting === 'default') {
            unset(this.mapping, 'subscriptionType');
        }
        if (get(this.mapping, 'measurementCreation')) {
            const { measurementCreation } = this.mapping;
            set(measurementCreation, 'fragmentName', get(measurementCreation, 'type'));
        }
        const { customAction } = this.subFormRef.value;
        let modifiedCustomAction;
        if (customAction.hasCustomAction) {
            const reducedHeaders = this.customAction.headers.reduce((result, item) => {
                result[item.key] = item.value;
                return result;
            }, {});
            modifiedCustomAction = assign({}, this.customAction, { headers: reducedHeaders });
        }
        this.onAction.emit({
            action: 'save',
            data: assign({}, this.mapping, { customAction: modifiedCustomAction })
        });
        this.isDetailOpen = false;
    }
    cancel() {
        this.isDetailOpen = false;
        this.resetModel = true;
        if (this.mapping.id === 'new') {
            this.onAction.emit({ action: 'delete', data: assign({}, this.mapping) });
        }
    }
    onDelete() {
        this.onAction.emit({ action: 'delete', data: this.mapping });
    }
    canSave(variableForm) {
        const areValid = () => variableForm.valid && this.objectMappingForm.$componentScope.mappingForm.$valid;
        const areDirty = () => variableForm.dirty || this.objectMappingForm.$componentScope.mappingForm.$dirty;
        return areValid() && areDirty();
    }
    isActive() {
        return this.isDetailOpen;
    }
    setTreeFromRefNode() {
        if (this.referencedRootNodeId) {
            this.addressSpaceService.triggerNodeToOpen({
                node: {
                    nodeId: this.referencedRootNodeId,
                    children: [],
                    expanded: false,
                    absolutePaths: [[]]
                },
                selectedAncestorIds: []
            });
        }
    }
};
OpcuaDeviceProtocolMapping.ctorParameters = () => [
    { type: AlertService },
    { type: AddressSpaceService }
];
tslib_1.__decorate([
    ViewChild(OpcuaDeviceProtocolObjectMapping, { static: false })
], OpcuaDeviceProtocolMapping.prototype, "objectMappingForm", void 0);
tslib_1.__decorate([
    ViewChild('variableForm', { static: false })
], OpcuaDeviceProtocolMapping.prototype, "subFormRef", void 0);
tslib_1.__decorate([
    ViewChild('browsePathModel', { static: false })
], OpcuaDeviceProtocolMapping.prototype, "browsePathModel", void 0);
tslib_1.__decorate([
    Input('resource')
], OpcuaDeviceProtocolMapping.prototype, "_model", void 0);
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolMapping.prototype, "index", void 0);
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolMapping.prototype, "getParentAttr", void 0);
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolMapping.prototype, "referencedServerId", void 0);
tslib_1.__decorate([
    Input()
], OpcuaDeviceProtocolMapping.prototype, "referencedRootNodeId", void 0);
tslib_1.__decorate([
    Output()
], OpcuaDeviceProtocolMapping.prototype, "onAction", void 0);
OpcuaDeviceProtocolMapping = tslib_1.__decorate([
    Component({
        selector: 'opcua-device-protocol-mapping',
        template: "<div class=\"list-group-item collapsible\" [ngClass]=\"{ expanded: isDetailOpen }\">\n  <div class=\"flex-row\" (click)=\"toggleDetail()\">\n    <div class=\"list-item-actions\">\n      <button class=\"btn btn-clean showOnHover flex-item-right\" title=\"{{ 'Delete' | translate }}\">\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\" (click)=\"onDelete()\"></i>\n      </button>\n      <button\n        type=\"button\"\n        title=\"{{ 'Expand' | translate }}\"\n        class=\"collapse-btn\"\n        [ngClass]=\"{ active: isDetailOpen }\"\n      >\n        <i class=\"fa fw fa-chevron-down\"></i>\n      </button>\n    </div>\n\n    <div class=\"list-item-icon\">\n      <i c8yIcon=\"sliders\"></i>\n    </div>\n\n    <div class=\"list-item-body\">\n      <div class=\"row flex-row\">\n        <div class=\"col-sm-7 col-xs-12\">\n          <p>\n            {{ nodeDisplayName }}<br />\n            <small\n              *ngIf=\"mapping.browsePath.length > 0\"\n              class=\"text-muted text-truncate\"\n              title=\"{{ mapping.browsePath | json }}\"\n              >{{ mapping.browsePath | json }}</small\n            >\n          </p>\n          <p></p>\n        </div>\n        <div class=\"col-sm-4 col-xs-10\">\n          <div class=\"list-functionalities\">\n            <label class=\"small right-m hidden-xs\" translate>Functionalities</label>&nbsp;\n            <c8y-object-mapping-status-icons [mapping]=\"mapping\"></c8y-object-mapping-status-icons>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"detail\" [collapse]=\"!isDetailOpen\" [isAnimated]=\"true\">\n    <div class=\"form\" [ngModelGroup]=\"index\" #variableForm=\"ngModelGroup\" *ngIf=\"isDetailOpen\">\n      <div class=\"row top-p-sm\">\n        <c8y-form-group class=\"col-md-4\" [status]=\"!isBrowsePathUniq ? 'error' : ''\">\n          <label translate>Path</label>\n          <div\n            class=\"dropdown\"\n            dropdown\n            #dropdown=\"bs-dropdown\"\n            [insideClick]=\"true\"\n            style=\"width:100%;\"\n          >\n            <input\n              class=\"form-control\"\n              c8yBrowsePathValidator\n              [getMappings]=\"getMappings\"\n              [model]=\"mapping\"\n              type=\"text\"\n              name=\"browsePath\"\n              dropdownToggle\n              placeholder=\"{{ 'e.g.' | translate }} {{ ['2:Node1', '2:SubNode1'] | json }}\"\n              [(ngModel)]=\"browsePath\"\n              (change)=\"updateBrowsePathInput()\"\n              (focus)=\"setTreeFromRefNode()\"\n              required\n              #browsePathModel=\"ngModel\"\n            />\n            <div\n              *dropdownMenu\n              class=\"dropdown-menu panel-inner-scroll\"\n              style=\"max-height:200px; width: 100%;\"\n            >\n              <opcua-address-space-tree\n                *ngIf=\"showAddressSpaceTree()\"\n                [node]=\"referencedNode\"\n                [moId]=\"referencedServerId\"\n                (selectedNode)=\"updateBrowsePath($event); dropdown.hide()\"\n              ></opcua-address-space-tree>\n            </div>\n          </div>\n          <c8y-messages>\n            <c8y-message\n              name=\"invalidBrowsePathNotation\"\n              text=\"{{ 'Must be a valid array of strings.' | translate }}\"\n            ></c8y-message>\n            <c8y-message\n              name=\"browsePathNotUnique\"\n              text=\"{{ 'Variable with this path is already added.' | translate }}\"\n            ></c8y-message>\n          </c8y-messages>\n        </c8y-form-group>\n\n        <c8y-form-group class=\"col-md-4\">\n          <label translate>Name</label>\n          <div class=\"input-group\">\n            <input\n              class=\"form-control\"\n              type=\"test\"\n              name=\"displayName\"\n              placeholder=\"{{ 'e.g. childDevice2' | translate }} \"\n              required\n              [(ngModel)]=\"nodeDisplayName\"\n              (change)=\"updateDisplayname()\"\n            />\n          </div>\n        </c8y-form-group>\n      </div>\n      <div class=\"row\" ngModelGroup=\"dataReportingSection\">\n        <c8y-form-group class=\"col-sm-4 col-md-3 col-lg-2\">\n          <label>\n            <span translate>Data reporting</span>\n          </label>\n          <div class=\"input-group\">\n            <label title=\"{{ 'Default' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"default\"\n              />\n              <span></span>\n              <span>{{ 'Default' | translate }}</span>\n            </label>\n            <label title=\"{{ 'Custom' | translate }}\" class=\"c8y-radio radio-inline\">\n              <input\n                type=\"radio\"\n                [(ngModel)]=\"dataReporting\"\n                name=\"{{ dataReportingName }}\"\n                value=\"custom\"\n              />\n              <span></span>\n              <span>{{ 'Custom' | translate }}</span>\n            </label>\n          </div>\n        </c8y-form-group>\n        <div\n          class=\"col-sm-8 col-md-9 col-lg-10\"\n          *ngIf=\"dataReporting === 'custom'\"\n          ngModelGroup=\"overriddenSubscription\"\n        >\n          <opcua-device-protocol-data-reporting\n            [model]=\"mapping\"\n          ></opcua-device-protocol-data-reporting>\n        </div>\n      </div>\n\n      <c8y-object-mapping [mapping]=\"mapping\" [hideAutoObserve]=\"true\"></c8y-object-mapping>\n      <div ngModelGroup=\"customAction\">\n        <opcua-device-protocol-mapping-customaction\n          [customAction]=\"customAction\"\n        ></opcua-device-protocol-mapping-customaction>\n      </div>\n      <button\n        title=\"{{ 'Cancel' | translate }}\"\n        id=\"cancelBtn\"\n        class=\"btn btn-default top-m-md bottom-m-lg\"\n        style=\"min-width: 100px;\"\n        (click)=\"cancel()\"\n      >\n        {{ 'Cancel' | translate }}\n      </button>\n      <button\n        title=\"{{ 'Save' | translate }}\"\n        id=\"saveBtn\"\n        class=\"btn btn-primary top-m-md bottom-m-lg\"\n        style=\"min-width: 100px;\"\n        (click)=\"save()\"\n        [disabled]=\"!canSave(variableForm)\"\n      >\n        {{ 'Save' | translate }}\n      </button>\n    </div>\n  </div>\n</div>\n",
        viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }]
    })
], OpcuaDeviceProtocolMapping);
export { OpcuaDeviceProtocolMapping };
//# sourceMappingURL=data:application/json;base64,