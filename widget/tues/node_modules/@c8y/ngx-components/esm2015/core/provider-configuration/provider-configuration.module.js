var ProviderConfigurationModule_1;
import * as tslib_1 from "tslib";
import { forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '../common/common.module';
import { CoreModule } from '../core.module';
import { DynamicFormsModule } from '../dynamic-forms/dynamic-forms.module';
import { HOOK_NAVIGATOR_NODES } from '../navigator';
import { HOOK_ONCE_ROUTE } from '../router';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationNodeFactory } from './provider-configuration-node.factory';
import { ProviderConfigurationRouteFactory } from './provider-configuration-route.factory';
import { ProviderConfigurationComponent } from './provider-configuration.component';
let ProviderConfigurationModule = ProviderConfigurationModule_1 = class ProviderConfigurationModule {
    static config(config) {
        return {
            ngModule: ProviderConfigurationModule_1,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    }
};
ProviderConfigurationModule = ProviderConfigurationModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [ProviderConfigurationComponent],
        exports: [ProviderConfigurationComponent],
        imports: [CoreModule, CommonModule, DynamicFormsModule],
        entryComponents: [ProviderConfigurationComponent],
        providers: [
            {
                provide: HOOK_ONCE_ROUTE,
                useClass: forwardRef(() => ProviderConfigurationRouteFactory),
                multi: true
            },
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: forwardRef(() => ProviderConfigurationNodeFactory),
                multi: true
            }
        ]
    })
], ProviderConfigurationModule);
export { ProviderConfigurationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFNUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDekYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFvQnBGLElBQWEsMkJBQTJCLG1DQUF4QyxNQUFhLDJCQUEyQjtJQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQStCO1FBQzNDLE9BQU87WUFDTCxRQUFRLEVBQUUsNkJBQTJCO1lBQ3JDLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3RGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQVBZLDJCQUEyQjtJQWxCdkMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMsOEJBQThCLENBQUM7UUFDOUMsT0FBTyxFQUFFLENBQUMsOEJBQThCLENBQUM7UUFDekMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztRQUN2RCxlQUFlLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztRQUNqRCxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztnQkFDN0QsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxvQkFBb0I7Z0JBQzdCLFFBQVEsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7Z0JBQzVELEtBQUssRUFBRSxJQUFJO2FBQ1o7U0FDRjtLQUNGLENBQUM7R0FDVywyQkFBMkIsQ0FPdkM7U0FQWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3J3YXJkUmVmLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vY29tbW9uL2NvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJy4uL2NvcmUubW9kdWxlJztcbmltcG9ydCB7IER5bmFtaWNGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2R5bmFtaWMtZm9ybXMvZHluYW1pYy1mb3Jtcy5tb2R1bGUnO1xuaW1wb3J0IHsgSE9PS19OQVZJR0FUT1JfTk9ERVMgfSBmcm9tICcuLi9uYXZpZ2F0b3InO1xuaW1wb3J0IHsgSE9PS19PTkNFX1JPVVRFIH0gZnJvbSAnLi4vcm91dGVyJztcbmltcG9ydCB7IER5bmFtaWNQcm92aWRlckNvbmZpZyB9IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRyB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLW5vZGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tcm91dGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Db21wb25lbnQgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1Byb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBDb21tb25Nb2R1bGUsIER5bmFtaWNGb3Jtc01vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1Byb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfT05DRV9ST1VURSxcbiAgICAgIHVzZUNsYXNzOiBmb3J3YXJkUmVmKCgpID0+IFByb3ZpZGVyQ29uZmlndXJhdGlvblJvdXRlRmFjdG9yeSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogZm9yd2FyZFJlZigoKSA9PiBQcm92aWRlckNvbmZpZ3VyYXRpb25Ob2RlRmFjdG9yeSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25Nb2R1bGUge1xuICBzdGF0aWMgY29uZmlnKGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZywgbXVsdGk6IHRydWUgfV1cbiAgICB9O1xuICB9XG59XG4iXX0=