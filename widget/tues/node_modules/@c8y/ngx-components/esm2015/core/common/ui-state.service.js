import * as tslib_1 from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { keys } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { scan, distinctUntilChanged, map, filter } from 'rxjs/operators';
import { StateService } from './state-service.abstract';
import { OptionsService } from './options.service';
import { FetchClient, TenantLoginOptionsService } from '@c8y/client';
import { ApplicationService, IUser, ICurrentTenant } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { throttle } from './throttle.decorator';
let AppStateService = class AppStateService extends StateService {
    constructor(applicationService, apiService, options, fetchClient, tenantLoginOptionsService) {
        super();
        this.applicationService = applicationService;
        this.apiService = apiService;
        this.options = options;
        this.fetchClient = fetchClient;
        this.tenantLoginOptionsService = tenantLoginOptionsService;
        this.state$ = new BehaviorSubject({
            app: {
                name: this.options.name,
                contextPath: this.getCurrentContextPath() || this.options.contextPath
            },
            supportUrl: this.options.supportUrl,
            lang: this.options.get('defaultLanguage', 'en'),
            langs: this.getLangs(),
            langsDetail: this.options.languages,
            loginOptions: this.options.loginOptions,
            activateSupportUserAvailable: undefined,
            versions: {
                backend: undefined,
                ui: this.options.versions || { ngx: undefined }
            },
            hidePowered: this.options.hidePowered,
            isLoading: false,
            showRightDrawer: this.options.rightDrawer,
            loginExtraLink: this.options.get('login_extra_link'),
            newsletter: this.options.newsletter
        });
        this.currentSupportUserName = new BehaviorSubject(null);
        this.currentUser = new BehaviorSubject(null);
        this.currentTenant = new BehaviorSubject(null);
        this.apiService.calls
            .pipe(filter(({ url }) => !/notification\/realtime/.test(url)), map(({ phase }) => (phase === 'start' ? 1 : -1)), scan((count, item) => count + item, 0), map(count => count > 0), distinctUntilChanged())
            .subscribe(isLoading => (this.state.isLoading = isLoading));
        this.assignApplicationKeyToDefaultHeaders();
    }
    assignApplicationKeyToDefaultHeaders() {
        if (!isDevMode()) {
            this.fetchClient.defaultHeaders = Object.assign({}, (this.fetchClient.defaultHeaders || {}), { 'X-Cumulocity-Application-Key': this.options.key });
        }
    }
    /**
     * Returns the current state.
     */
    get state() {
        return this.state$.value;
    }
    getLangs() {
        const { languages } = this.options;
        return languages ? keys(languages).filter(k => languages[k]) : [];
    }
    /**
     * Returns the correct UI version. In hybrid mode for angular and ngx.
     */
    get uiVersion() {
        const version = this.state.versions.ui;
        return version.ngx || version.ng1;
    }
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    loadManifest() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { application } = (yield this.applicationService.detail(`${this.state.app.contextPath}/manifest`)).data;
                this.state.app.manifest = application;
                this.loadDefaultOptions();
            }
            catch (ex) {
                throw ex;
            }
        });
    }
    /**
     * When this function called, it refreshes the values of loginOptions stored within ui state object.
     * Function is throttled to execute the refresh once in a time specified by params of @throttled decorator,
     * it should be called on leading edge of the timeout.
     */
    refreshLoginOptions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data: { loginOptions } } = yield this.tenantLoginOptionsService.detail();
            this.state$.next(Object.assign({}, this.state, { loginOptions }));
        });
    }
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    isApplicationAvailable(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser(undefined, { pageSize: 100 });
            return data.some(app => app.name === name);
        });
    }
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    setUser(userInfo) {
        this.currentSupportUserName.next(userInfo.supportUserName || null);
        this.currentUser.next(userInfo.user);
    }
    getCurrentContextPath() {
        const match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
        return match && match[2];
    }
    loadDefaultOptions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.state.supportUrl = yield this.options.getSupportUrl();
            this.state.activateSupportUserAvailable = yield this.options.getActivateSupportUser();
            this.state.versions.backend = yield this.options.getSystemOption('system', 'version');
            try {
                this.showIncompatibleVersionsError();
            }
            catch (ex) {
                // ignore this
            }
            this.emitNewState();
        });
    }
    showIncompatibleVersionsError() {
        const uiVersion = this.state.versions.ui.ngx;
        const backendVersion = this.state.versions.backend;
        const uiVersionArray = uiVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const beVersionArray = backendVersion
            .replace(/[^\d.]/g, '')
            .split('.')
            .map(Number);
        const multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max(...uiVersionArray, ...beVersionArray) + 1)));
        const sumReducer = (acc, cur) => acc + cur;
        const calculateVersionMapper = (curr, idx) => curr * (multiplier / Math.pow(10, idx));
        const uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
        const showError = uiVersionNumber > beVersionNumber;
        if (showError) {
            const errorContent = `You are running version ${uiVersion} of the UI and version ${backendVersion} of backend!`;
            console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
        }
    }
};
AppStateService.ctorParameters = () => [
    { type: ApplicationService },
    { type: ApiService },
    { type: OptionsService },
    { type: FetchClient },
    { type: TenantLoginOptionsService }
];
tslib_1.__decorate([
    throttle(600, { trailing: false })
], AppStateService.prototype, "refreshLoginOptions", null);
AppStateService = tslib_1.__decorate([
    Injectable()
], AppStateService);
export { AppStateService };
//# sourceMappingURL=data:application/json;base64,