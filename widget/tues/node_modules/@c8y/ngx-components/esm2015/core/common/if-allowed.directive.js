import * as tslib_1 from "tslib";
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { Permissions } from './permissions.service';
/**
 * A structural directive that conditionally includes a template only if the user has
 * all or any of the roles passed as an input. By default the directive checks all roles:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * To check if the user has any of the required roles to view the element you need to use the `allowAny` input:
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny: true" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 *
 * or use the shorter version
 *
 * ```
 * <button *c8yIfAllowed="['ROLE_RECORD_DELETE', 'ROLE_ENTRY_DELETE']; allowAny" (click)="delete()" title="Delete">
 *   Delete
 * </button>
 * ```
 */
let IfAllowedDirective = class IfAllowedDirective {
    constructor(template, container, permissions) {
        this.template = template;
        this.container = container;
        this.permissions = permissions;
        this.allowAny = false;
    }
    /**
     * One or many roles required for the element to be rendered
     */
    set c8yIfAllowed(roleIds) {
        this.rolesIds = Array.isArray(roleIds) ? roleIds : !!roleIds ? [roleIds] : [];
    }
    /**
     * Switches to the mode where at least one of the provided roles is sufficient for the element to be rendered
     */
    set c8yIfAllowedAllowAny(allowAny) {
        this.allowAny = allowAny === null || allowAny;
    }
    ngOnInit() {
        if (!this.rolesIds ||
            !this.rolesIds.length ||
            (this.allowAny
                ? this.permissions.hasAnyRole(this.rolesIds)
                : this.permissions.hasAllRoles(this.rolesIds))) {
            this.container.createEmbeddedView(this.template);
        }
    }
};
IfAllowedDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: Permissions }
];
tslib_1.__decorate([
    Input()
], IfAllowedDirective.prototype, "c8yIfAllowed", null);
tslib_1.__decorate([
    Input()
], IfAllowedDirective.prototype, "c8yIfAllowedAllowAny", null);
IfAllowedDirective = tslib_1.__decorate([
    Directive({
        selector: '[c8yIfAllowed]'
    })
], IfAllowedDirective);
export { IfAllowedDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtYWxsb3dlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9jb21tb24vaWYtYWxsb3dlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Qkc7QUFJSCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQW9CN0IsWUFDVSxRQUEwQixFQUMxQixTQUEyQixFQUMzQixXQUF3QjtRQUZ4QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUwxQixhQUFRLEdBQVksS0FBSyxDQUFDO0lBTS9CLENBQUM7SUF2Qko7O09BRUc7SUFFSCxJQUFJLFlBQVksQ0FBQyxPQUEwQjtRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7T0FFRztJQUVILElBQUksb0JBQW9CLENBQUMsUUFBaUI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQztJQUNoRCxDQUFDO0lBV0QsUUFBUTtRQUNOLElBQ0UsQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUNkLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQ3JCLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ1osQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDaEQ7WUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7Q0FDRixDQUFBOztZQWhCcUIsV0FBVztZQUNWLGdCQUFnQjtZQUNkLFdBQVc7O0FBbEJsQztJQURDLEtBQUssRUFBRTtzREFHUDtBQU1EO0lBREMsS0FBSyxFQUFFOzhEQUdQO0FBZlUsa0JBQWtCO0lBSDlCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxnQkFBZ0I7S0FDM0IsQ0FBQztHQUNXLGtCQUFrQixDQXFDOUI7U0FyQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBlcm1pc3Npb25zIH0gZnJvbSAnLi9wZXJtaXNzaW9ucy5zZXJ2aWNlJztcblxuLyoqXG4gKiBBIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHRoYXQgY29uZGl0aW9uYWxseSBpbmNsdWRlcyBhIHRlbXBsYXRlIG9ubHkgaWYgdGhlIHVzZXIgaGFzXG4gKiBhbGwgb3IgYW55IG9mIHRoZSByb2xlcyBwYXNzZWQgYXMgYW4gaW5wdXQuIEJ5IGRlZmF1bHQgdGhlIGRpcmVjdGl2ZSBjaGVja3MgYWxsIHJvbGVzOlxuICpcbiAqIGBgYFxuICogPGJ1dHRvbiAqYzh5SWZBbGxvd2VkPVwiWydST0xFX1JFQ09SRF9ERUxFVEUnLCAnUk9MRV9FTlRSWV9ERUxFVEUnXVwiIChjbGljayk9XCJkZWxldGUoKVwiIHRpdGxlPVwiRGVsZXRlXCI+XG4gKiAgIERlbGV0ZVxuICogPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBUbyBjaGVjayBpZiB0aGUgdXNlciBoYXMgYW55IG9mIHRoZSByZXF1aXJlZCByb2xlcyB0byB2aWV3IHRoZSBlbGVtZW50IHlvdSBuZWVkIHRvIHVzZSB0aGUgYGFsbG93QW55YCBpbnB1dDpcbiAqXG4gKiBgYGBcbiAqIDxidXR0b24gKmM4eUlmQWxsb3dlZD1cIlsnUk9MRV9SRUNPUkRfREVMRVRFJywgJ1JPTEVfRU5UUllfREVMRVRFJ107IGFsbG93QW55OiB0cnVlXCIgKGNsaWNrKT1cImRlbGV0ZSgpXCIgdGl0bGU9XCJEZWxldGVcIj5cbiAqICAgRGVsZXRlXG4gKiA8L2J1dHRvbj5cbiAqIGBgYFxuICpcbiAqIG9yIHVzZSB0aGUgc2hvcnRlciB2ZXJzaW9uXG4gKlxuICogYGBgXG4gKiA8YnV0dG9uICpjOHlJZkFsbG93ZWQ9XCJbJ1JPTEVfUkVDT1JEX0RFTEVURScsICdST0xFX0VOVFJZX0RFTEVURSddOyBhbGxvd0FueVwiIChjbGljayk9XCJkZWxldGUoKVwiIHRpdGxlPVwiRGVsZXRlXCI+XG4gKiAgIERlbGV0ZVxuICogPC9idXR0b24+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2M4eUlmQWxsb3dlZF0nXG59KVxuZXhwb3J0IGNsYXNzIElmQWxsb3dlZERpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBPbmUgb3IgbWFueSByb2xlcyByZXF1aXJlZCBmb3IgdGhlIGVsZW1lbnQgdG8gYmUgcmVuZGVyZWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBjOHlJZkFsbG93ZWQocm9sZUlkczogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICB0aGlzLnJvbGVzSWRzID0gQXJyYXkuaXNBcnJheShyb2xlSWRzKSA/IHJvbGVJZHMgOiAhIXJvbGVJZHMgPyBbcm9sZUlkc10gOiBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hlcyB0byB0aGUgbW9kZSB3aGVyZSBhdCBsZWFzdCBvbmUgb2YgdGhlIHByb3ZpZGVkIHJvbGVzIGlzIHN1ZmZpY2llbnQgZm9yIHRoZSBlbGVtZW50IHRvIGJlIHJlbmRlcmVkXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgYzh5SWZBbGxvd2VkQWxsb3dBbnkoYWxsb3dBbnk6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmFsbG93QW55ID0gYWxsb3dBbnkgPT09IG51bGwgfHwgYWxsb3dBbnk7XG4gIH1cblxuICBwcml2YXRlIHJvbGVzSWRzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBhbGxvd0FueTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnNcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLnJvbGVzSWRzIHx8XG4gICAgICAhdGhpcy5yb2xlc0lkcy5sZW5ndGggfHxcbiAgICAgICh0aGlzLmFsbG93QW55XG4gICAgICAgID8gdGhpcy5wZXJtaXNzaW9ucy5oYXNBbnlSb2xlKHRoaXMucm9sZXNJZHMpXG4gICAgICAgIDogdGhpcy5wZXJtaXNzaW9ucy5oYXNBbGxSb2xlcyh0aGlzLnJvbGVzSWRzKSlcbiAgICApIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==