import * as tslib_1 from "tslib";
import { assign } from 'lodash-es';
import { ComponentFactory, ComponentFactoryResolver, Directive, ElementRef, Input, Renderer2, TemplateRef, Type, ViewContainerRef } from '@angular/core';
/**
 * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
 * @example
 * <div *c8yOutlet="template"></div>
 * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
 * <div *c8yOutlet="nodes"></div>
 */
let OutletDirective = class OutletDirective {
    constructor(viewContainer, resolver, renderer, el) {
        this.viewContainer = viewContainer;
        this.resolver = resolver;
        this.renderer = renderer;
        this.el = el;
        this.properties = {};
    }
    /**
     * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
     * @example
     * <div *c8yOutlet="template"></div>
     * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
     * <div *c8yOutlet="nodes"></div>
     */
    set c8yOutlet(template) {
        if (!template) {
            return;
        }
        if (this._element instanceof Element) {
            this.renderer.removeChild(this._element.parentElement, this._element);
        }
        this.viewContainer.clear();
        // case TemplateRef -> <div *c8yOutlet="template"></div>
        if (template instanceof TemplateRef) {
            this.viewContainer.createEmbeddedView(template);
            // case DOM Element -> <div *c8yOutlet="nodes"></div>
        }
        else if (template instanceof Element) {
            const parent = this.renderer.parentNode(this.el.nativeElement);
            this.destroy();
            this._element = template;
            this.renderer.insertBefore(parent, this._element, this.el.nativeElement);
            // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
        }
        else {
            const factory = this.resolver.resolveComponentFactory(template);
            const component = this.viewContainer.createComponent(factory);
            assign(component.instance, this.properties);
        }
    }
    set c8yOutletProperties(value) {
        this.properties = value;
    }
    ngOnDestroy() {
        this.destroy();
    }
    destroy() {
        if (this._element) {
            const _parent = this.renderer.parentNode(this._element);
            this.renderer.removeChild(_parent, this._element);
        }
    }
};
OutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], OutletDirective.prototype, "c8yOutlet", null);
tslib_1.__decorate([
    Input()
], OutletDirective.prototype, "c8yOutletProperties", null);
OutletDirective = tslib_1.__decorate([
    Directive({
        selector: '[c8yOutlet]',
    })
], OutletDirective);
export { OutletDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2NvbW1vbi9vdXRsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsd0JBQXdCLEVBQ3hCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsSUFBSSxFQUNKLGdCQUFnQixFQUNmLE1BQU0sZUFBZSxDQUFDO0FBRXpCOzs7Ozs7R0FNRztBQUlILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFJMUIsWUFDVSxhQUErQixFQUMvQixRQUFrQyxFQUNsQyxRQUFtQixFQUNuQixFQUFjO1FBSGQsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQVBoQixlQUFVLEdBQUcsRUFBRSxDQUFDO0lBUXBCLENBQUM7SUFFTDs7Ozs7O09BTUc7SUFDTSxJQUFJLFNBQVMsQ0FBQyxRQUFnRDtRQUNyRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsT0FBTztTQUNSO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxZQUFZLE9BQU8sRUFBRTtZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEU7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTNCLHdEQUF3RDtRQUN4RCxJQUFJLFFBQVEsWUFBWSxXQUFXLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVsRCxxREFBcUQ7U0FDcEQ7YUFBTSxJQUFJLFFBQVEsWUFBWSxPQUFPLEVBQUU7WUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTNFLHlGQUF5RjtTQUN4RjthQUFNO1lBQ0wsTUFBTSxPQUFPLEdBQTBCLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVRLElBQUksbUJBQW1CLENBQUMsS0FBSztRQUNwQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sT0FBTztRQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Q0FDRixDQUFBOztZQXZEMEIsZ0JBQWdCO1lBQ3JCLHdCQUF3QjtZQUN4QixTQUFTO1lBQ2YsVUFBVTs7QUFVZjtJQUFSLEtBQUssRUFBRTtnREEwQlA7QUFFUTtJQUFSLEtBQUssRUFBRTswREFFUDtBQWhEVSxlQUFlO0lBSDNCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxhQUFhO0tBQ3hCLENBQUM7R0FDVyxlQUFlLENBNEQzQjtTQTVEWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7XG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZlxuICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0byBzZXQgYSBET00gbm9kZSwgYSBUZW1wbGF0ZVJlZiBvciBhbnkgQ29tcG9uZW50IHRvIGEgY29udGFpbmVyIG9yIGFueSBub2RlLlxuICogQGV4YW1wbGVcbiAqIDxkaXYgKmM4eU91dGxldD1cInRlbXBsYXRlXCI+PC9kaXY+XG4gKiA8ZGl2ICpjOHlPdXRsZXQ9XCJEZXZpY2VTdGF0dXNDb21wb25lbnQ7IHByb3BlcnRpZXM6IHsgbm9kZSB9XCI+PC9kaXY+XG4gKiA8ZGl2ICpjOHlPdXRsZXQ9XCJub2Rlc1wiPjwvZGl2PlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYzh5T3V0bGV0XScsXG59KVxuZXhwb3J0IGNsYXNzIE91dGxldERpcmVjdGl2ZSB7XG4gIHByaXZhdGUgcHJvcGVydGllcyA9IHt9O1xuICBwcml2YXRlIF9lbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7IH1cblxuICAvKipcbiAgICogRGlyZWN0aXZlIHRvIHNldCBhIERPTSBub2RlLCBhIFRlbXBsYXRlUmVmIG9yIGFueSBDb21wb25lbnQgdG8gYSBjb250YWluZXIgb3IgYW55IG5vZGUuXG4gICAqIEBleGFtcGxlXG4gICAqIDxkaXYgKmM4eU91dGxldD1cInRlbXBsYXRlXCI+PC9kaXY+XG4gICAqIDxkaXYgKmM4eU91dGxldD1cIkRldmljZVN0YXR1c0NvbXBvbmVudDsgcHJvcGVydGllczogeyBub2RlIH1cIj48L2Rpdj5cbiAgICogPGRpdiAqYzh5T3V0bGV0PVwibm9kZXNcIj48L2Rpdj5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBjOHlPdXRsZXQodGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gfCBUeXBlPGFueT4gfCBFbGVtZW50KSB7XG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQodGhpcy5fZWxlbWVudC5wYXJlbnRFbGVtZW50LCAgdGhpcy5fZWxlbWVudCk7XG4gICAgfVxuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuXG4gICAgLy8gY2FzZSBUZW1wbGF0ZVJlZiAtPiA8ZGl2ICpjOHlPdXRsZXQ9XCJ0ZW1wbGF0ZVwiPjwvZGl2PlxuICAgIGlmICh0ZW1wbGF0ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRlbXBsYXRlKTtcblxuICAgIC8vIGNhc2UgRE9NIEVsZW1lbnQgLT4gPGRpdiAqYzh5T3V0bGV0PVwibm9kZXNcIj48L2Rpdj5cbiAgICB9IGVsc2UgaWYgKHRlbXBsYXRlIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5yZW5kZXJlci5wYXJlbnROb2RlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSB0ZW1wbGF0ZTtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0QmVmb3JlKHBhcmVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcblxuICAgIC8vIGNhc2UgQ29tcG9uZW50IC0+IDxkaXYgKmM4eU91dGxldD1cIkRldmljZVN0YXR1c0NvbXBvbmVudDsgcHJvcGVydGllczogeyBub2RlIH1cIj48L2Rpdj5cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxhbnk+ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0ZW1wbGF0ZSk7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgICAgYXNzaWduKGNvbXBvbmVudC5pbnN0YW5jZSwgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgYzh5T3V0bGV0UHJvcGVydGllcyh2YWx1ZSkge1xuICAgIHRoaXMucHJvcGVydGllcyA9IHZhbHVlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICBwcml2YXRlIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IF9wYXJlbnQgPSB0aGlzLnJlbmRlcmVyLnBhcmVudE5vZGUodGhpcy5fZWxlbWVudCk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKF9wYXJlbnQsIHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuIl19