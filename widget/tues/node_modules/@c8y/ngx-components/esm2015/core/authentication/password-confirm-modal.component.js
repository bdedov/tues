import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, ViewChild } from '@angular/core';
import { UserService, ICredentials, FetchClient, Client, IAuthentication } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { LoginService } from '../login/login.service';
import { clone } from 'lodash-es';
import { gettext } from '../i18n/gettext';
let PasswordConfirmModalComponent = class PasswordConfirmModalComponent {
    constructor(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    passwordConfirm() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.password) {
                const supportUserName = this.ui.currentSupportUserName.value;
                const userId = this.ui.currentUser.value.id;
                const credentials = {
                    password: this.password,
                    user: `${supportUserName ? `${supportUserName}$` : ''}${userId}`,
                    tenant: this.client.tenant
                };
                try {
                    this.loading = true;
                    const strategy = clone(this.loginService.useBasicAuth({}));
                    delete credentials.tfa;
                    strategy.updateCredentials(credentials);
                    const newClient = this.createNewClient(strategy, this.client.baseUrl);
                    yield newClient.user.current();
                    this.emitSuccessAndClose();
                }
                catch (e) {
                    if (e.res && e.res.status === 401 && e.data && /pin|totp/i.test(e.data.message)) {
                        this.emitSuccessAndClose();
                    }
                    else {
                        this.alert.danger(gettext("Provided password doesn't match your current one."));
                    }
                }
                finally {
                    this.loading = false;
                }
            }
        });
    }
    cancel() {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    }
    createNewClient(strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    }
    emitSuccessAndClose() {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    }
};
PasswordConfirmModalComponent.ctorParameters = () => [
    { type: UserService },
    { type: AppStateService },
    { type: FetchClient },
    { type: AlertService },
    { type: LoginService }
];
tslib_1.__decorate([
    Output()
], PasswordConfirmModalComponent.prototype, "passwordConfirmedEmitter", void 0);
tslib_1.__decorate([
    ViewChild('modal', { static: false })
], PasswordConfirmModalComponent.prototype, "modal", void 0);
PasswordConfirmModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-password-confirm-modal',
        template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group>\r\n      <label translate for=\"currentPassword\">Current password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Current password' | translate }}\"\r\n        required\r\n      />\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Save' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
    })
], PasswordConfirmModalComponent);
export { PasswordConfirmModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0xQyxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtJQU94QyxZQUNTLElBQWlCLEVBQ2pCLEVBQW1CLEVBQ2xCLE1BQW1CLEVBQ25CLEtBQW1CLEVBQ25CLFlBQTBCO1FBSjNCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWDFCLDZCQUF3QixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDakUsWUFBTyxHQUFHLEtBQUssQ0FBQztJQVdiLENBQUM7SUFFRSxlQUFlOztZQUNuQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDO2dCQUM3RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUM1QyxNQUFNLFdBQVcsR0FBaUI7b0JBQ2hDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtvQkFDdkIsSUFBSSxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFO29CQUNoRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO2lCQUMzQixDQUFDO2dCQUNGLElBQUk7b0JBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ3BCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMzRCxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUM7b0JBQ3ZCLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDeEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDdEUsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUMvQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztpQkFDNUI7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTt3QkFDL0UsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7cUJBQzVCO3lCQUFNO3dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtREFBbUQsQ0FBQyxDQUFDLENBQUM7cUJBQ2pGO2lCQUNGO3dCQUFTO29CQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2lCQUN0QjthQUNGO1FBQ0gsQ0FBQztLQUFBO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQXlCLEVBQUUsT0FBZTtRQUN4RCxPQUFPLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0YsQ0FBQTs7WUFqRGdCLFdBQVc7WUFDYixlQUFlO1lBQ1YsV0FBVztZQUNaLFlBQVk7WUFDTCxZQUFZOztBQVgxQjtJQUFULE1BQU0sRUFBRTsrRUFBd0Q7QUFJMUI7SUFBdEMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQzs0REFBK0I7QUFMMUQsNkJBQTZCO0lBSnpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsMG9DQUFzRDtLQUN2RCxDQUFDO0dBQ1csNkJBQTZCLENBeUR6QztTQXpEWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlLCBJQ3JlZGVudGlhbHMsIEZldGNoQ2xpZW50LCBDbGllbnQsIElBdXRoZW50aWNhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9tb2RhbC9tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXBhc3N3b3JkLWNvbmZpcm0tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQge1xuICBAT3V0cHV0KCkgcGFzc3dvcmRDb25maXJtZWRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBsb2FkaW5nID0gZmFsc2U7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgnbW9kYWwnLCB7IHN0YXRpYzogZmFsc2UgfSkgcHJpdmF0ZSBtb2RhbDogTW9kYWxDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHVzZXI6IFVzZXJTZXJ2aWNlLFxuICAgIHB1YmxpYyB1aTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2xpZW50OiBGZXRjaENsaWVudCxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgcGFzc3dvcmRDb25maXJtKCkge1xuICAgIGlmICh0aGlzLnBhc3N3b3JkKSB7XG4gICAgICBjb25zdCBzdXBwb3J0VXNlck5hbWUgPSB0aGlzLnVpLmN1cnJlbnRTdXBwb3J0VXNlck5hbWUudmFsdWU7XG4gICAgICBjb25zdCB1c2VySWQgPSB0aGlzLnVpLmN1cnJlbnRVc2VyLnZhbHVlLmlkO1xuICAgICAgY29uc3QgY3JlZGVudGlhbHM6IElDcmVkZW50aWFscyA9IHtcbiAgICAgICAgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmQsXG4gICAgICAgIHVzZXI6IGAke3N1cHBvcnRVc2VyTmFtZSA/IGAke3N1cHBvcnRVc2VyTmFtZX0kYCA6ICcnfSR7dXNlcklkfWAsXG4gICAgICAgIHRlbmFudDogdGhpcy5jbGllbnQudGVuYW50XG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc3RyYXRlZ3kgPSBjbG9uZSh0aGlzLmxvZ2luU2VydmljZS51c2VCYXNpY0F1dGgoe30pKTtcbiAgICAgICAgZGVsZXRlIGNyZWRlbnRpYWxzLnRmYTtcbiAgICAgICAgc3RyYXRlZ3kudXBkYXRlQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBuZXdDbGllbnQgPSB0aGlzLmNyZWF0ZU5ld0NsaWVudChzdHJhdGVneSwgdGhpcy5jbGllbnQuYmFzZVVybCk7XG4gICAgICAgIGF3YWl0IG5ld0NsaWVudC51c2VyLmN1cnJlbnQoKTtcbiAgICAgICAgdGhpcy5lbWl0U3VjY2Vzc0FuZENsb3NlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnJlcyAmJiBlLnJlcy5zdGF0dXMgPT09IDQwMSAmJiBlLmRhdGEgJiYgL3Bpbnx0b3RwL2kudGVzdChlLmRhdGEubWVzc2FnZSkpIHtcbiAgICAgICAgICB0aGlzLmVtaXRTdWNjZXNzQW5kQ2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFsZXJ0LmRhbmdlcihnZXR0ZXh0KFwiUHJvdmlkZWQgcGFzc3dvcmQgZG9lc24ndCBtYXRjaCB5b3VyIGN1cnJlbnQgb25lLlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5lbWl0KGZhbHNlKTtcbiAgICB0aGlzLm1vZGFsLl9kaXNtaXNzKCk7XG4gIH1cblxuICBjcmVhdGVOZXdDbGllbnQoc3RyYXRlZ3k6IElBdXRoZW50aWNhdGlvbiwgYmFzZVVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBDbGllbnQoc3RyYXRlZ3ksIGJhc2VVcmwpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0U3VjY2Vzc0FuZENsb3NlKCkge1xuICAgIHRoaXMucGFzc3dvcmRDb25maXJtZWRFbWl0dGVyLmVtaXQodHJ1ZSk7XG4gICAgdGhpcy5tb2RhbC5fZGlzbWlzcygpO1xuICB9XG59XG4iXX0=