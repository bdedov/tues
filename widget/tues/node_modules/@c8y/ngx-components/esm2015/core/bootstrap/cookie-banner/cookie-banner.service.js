import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { OptionsService } from '../../common/options.service';
import { gettext } from '../../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../../common/options.service";
let CookieBannerService = class CookieBannerService {
    constructor(options) {
        this.options = options;
        this.STORAGE_KEY = 'acceptCookieNotice';
        this.COOKIE_BANNER = 'cookieBanner';
        this.isCookieBannerShowed$ = new Subject();
        this.cookieDescriptions = {
            required: gettext("These cookies are required to enable core site functionality. They perform a task or operation without which a site's functionality would not be possible."),
            functional: gettext('These cookies are used to track site usage and to process my personal data to measure and improve usability and performance. We will neither forward this data to any third party nor use this data for direct marketing purposes. I recognize that I can opt in and out of these cookies at any time.'),
            marketing: gettext('These cookies are used to target advertising to a user.')
        };
    }
    getCookiePreferencesConfig() {
        const settings = this.getCookieBannerSettings();
        return settings && settings.configuration;
    }
    getCookieBannerSettings() {
        return this.options.get(this.COOKIE_BANNER) || {};
    }
    setCookies(cookiePreferences) {
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(cookiePreferences));
    }
    shouldShowCookieBanner() {
        const settings = this.getCookieBannerSettings();
        return !!settings.cookieBannerText && !this.getUserCookiePreferences();
    }
    getUserCookiePreferences() {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY));
    }
    isConfigCookiePreferencesDefined() {
        return !!this.getCookiePreferencesConfig();
    }
    isFunctionalCookieDisabled() {
        const { functional } = this.getUserCookiePreferences() || {};
        /**
         * We want this check, as we should stop loading Gainsight tag only when functional cookie is explicitly set to false.
         * In the USA there is no need for the functional cookies when tracking users.
         * This is why we want to allow undefined to pass the check.
         * @ignore
         */
        return functional === false;
    }
    getCookieDescription(cookieType) {
        return this.cookieDescriptions[cookieType];
    }
    transformCookiePreferencesToList(cookiePreferences) {
        return Object.entries(cookiePreferences).map(([name, value]) => {
            const isReadonly = name === 'required';
            return { name, value, isReadonly };
        });
    }
    transformCookiePreferencesListToCookiePreferences(cookiePreferencesList) {
        return cookiePreferencesList.reduce((cookiePref, cookie) => {
            const key = cookie.name;
            cookiePref[key] = cookie.value;
            return cookiePref;
        }, {});
    }
};
CookieBannerService.ctorParameters = () => [
    { type: OptionsService }
];
CookieBannerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function CookieBannerService_Factory() { return new CookieBannerService(i0.ɵɵinject(i1.OptionsService)); }, token: CookieBannerService, providedIn: "root" });
CookieBannerService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], CookieBannerService);
export { CookieBannerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhbm5lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYm9vdHN0cmFwL2Nvb2tpZS1iYW5uZXIvY29va2llLWJhbm5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBSzdDLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBZTlCLFlBQW9CLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBZGxDLGdCQUFXLEdBQVcsb0JBQW9CLENBQUM7UUFDM0Msa0JBQWEsR0FBRyxjQUFjLENBQUM7UUFDeEMsMEJBQXFCLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7UUFFdkMsdUJBQWtCLEdBQUc7WUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FDZiw0SkFBNEosQ0FDN0o7WUFDRCxVQUFVLEVBQUUsT0FBTyxDQUNqQix3U0FBd1MsQ0FDelM7WUFDRCxTQUFTLEVBQUUsT0FBTyxDQUFDLHlEQUF5RCxDQUFDO1NBQzlFLENBQUM7SUFFNEMsQ0FBQztJQUUvQywwQkFBMEI7UUFDeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDaEQsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQztJQUM1QyxDQUFDO0lBRUQsdUJBQXVCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsVUFBVSxDQUFDLGlCQUFvQztRQUM3QyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNoRCxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRUQsd0JBQXdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxnQ0FBZ0M7UUFDOUIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELDBCQUEwQjtRQUN4QixNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQXNCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNoRjs7Ozs7V0FLRztRQUNILE9BQU8sVUFBVSxLQUFLLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsb0JBQW9CLENBQUMsVUFBa0I7UUFDckMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGdDQUFnQyxDQUFDLGlCQUFvQztRQUNuRSxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQzdELE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxVQUFVLENBQUM7WUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsaURBQWlELENBQy9DLHFCQUErQjtRQUUvQixPQUFPLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQTZCLEVBQUUsTUFBYyxFQUFFLEVBQUU7WUFDcEYsTUFBTSxHQUFHLEdBQVcsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUUvQixPQUFPLFVBQVUsQ0FBQztRQUNwQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDVCxDQUFDO0NBQ0YsQ0FBQTs7WUE1RDhCLGNBQWM7OztBQWZoQyxtQkFBbUI7SUFIL0IsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLG1CQUFtQixDQTJFL0I7U0EzRVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi8uLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgQ29va2llLCBDb29raWVCYW5uZXJTZXR0aW5ncywgQ29va2llUHJlZmVyZW5jZXMgfSBmcm9tICcuL2Nvb2tpZS1iYW5uZXIubW9kZWwnO1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29va2llQmFubmVyU2VydmljZSB7XG4gIHJlYWRvbmx5IFNUT1JBR0VfS0VZOiBzdHJpbmcgPSAnYWNjZXB0Q29va2llTm90aWNlJztcbiAgcmVhZG9ubHkgQ09PS0lFX0JBTk5FUiA9ICdjb29raWVCYW5uZXInO1xuICBpc0Nvb2tpZUJhbm5lclNob3dlZCQ6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgY29va2llRGVzY3JpcHRpb25zID0ge1xuICAgIHJlcXVpcmVkOiBnZXR0ZXh0KFxuICAgICAgXCJUaGVzZSBjb29raWVzIGFyZSByZXF1aXJlZCB0byBlbmFibGUgY29yZSBzaXRlIGZ1bmN0aW9uYWxpdHkuIFRoZXkgcGVyZm9ybSBhIHRhc2sgb3Igb3BlcmF0aW9uIHdpdGhvdXQgd2hpY2ggYSBzaXRlJ3MgZnVuY3Rpb25hbGl0eSB3b3VsZCBub3QgYmUgcG9zc2libGUuXCJcbiAgICApLFxuICAgIGZ1bmN0aW9uYWw6IGdldHRleHQoXG4gICAgICAnVGhlc2UgY29va2llcyBhcmUgdXNlZCB0byB0cmFjayBzaXRlIHVzYWdlIGFuZCB0byBwcm9jZXNzIG15IHBlcnNvbmFsIGRhdGEgdG8gbWVhc3VyZSBhbmQgaW1wcm92ZSB1c2FiaWxpdHkgYW5kIHBlcmZvcm1hbmNlLiBXZSB3aWxsIG5laXRoZXIgZm9yd2FyZCB0aGlzIGRhdGEgdG8gYW55IHRoaXJkIHBhcnR5IG5vciB1c2UgdGhpcyBkYXRhIGZvciBkaXJlY3QgbWFya2V0aW5nIHB1cnBvc2VzLiBJIHJlY29nbml6ZSB0aGF0IEkgY2FuIG9wdCBpbiBhbmQgb3V0IG9mIHRoZXNlIGNvb2tpZXMgYXQgYW55IHRpbWUuJ1xuICAgICksXG4gICAgbWFya2V0aW5nOiBnZXR0ZXh0KCdUaGVzZSBjb29raWVzIGFyZSB1c2VkIHRvIHRhcmdldCBhZHZlcnRpc2luZyB0byBhIHVzZXIuJylcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnNTZXJ2aWNlKSB7fVxuXG4gIGdldENvb2tpZVByZWZlcmVuY2VzQ29uZmlnKCk6IENvb2tpZVByZWZlcmVuY2VzIHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMuZ2V0Q29va2llQmFubmVyU2V0dGluZ3MoKTtcbiAgICByZXR1cm4gc2V0dGluZ3MgJiYgc2V0dGluZ3MuY29uZmlndXJhdGlvbjtcbiAgfVxuXG4gIGdldENvb2tpZUJhbm5lclNldHRpbmdzKCk6IENvb2tpZUJhbm5lclNldHRpbmdzIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldCh0aGlzLkNPT0tJRV9CQU5ORVIpIHx8IHt9O1xuICB9XG5cbiAgc2V0Q29va2llcyhjb29raWVQcmVmZXJlbmNlczogQ29va2llUHJlZmVyZW5jZXMpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShjb29raWVQcmVmZXJlbmNlcykpO1xuICB9XG5cbiAgc2hvdWxkU2hvd0Nvb2tpZUJhbm5lcigpOiBib29sZWFuIHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMuZ2V0Q29va2llQmFubmVyU2V0dGluZ3MoKTtcbiAgICByZXR1cm4gISFzZXR0aW5ncy5jb29raWVCYW5uZXJUZXh0ICYmICF0aGlzLmdldFVzZXJDb29raWVQcmVmZXJlbmNlcygpO1xuICB9XG5cbiAgZ2V0VXNlckNvb2tpZVByZWZlcmVuY2VzKCk6IENvb2tpZVByZWZlcmVuY2VzIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLlNUT1JBR0VfS0VZKSk7XG4gIH1cblxuICBpc0NvbmZpZ0Nvb2tpZVByZWZlcmVuY2VzRGVmaW5lZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLmdldENvb2tpZVByZWZlcmVuY2VzQ29uZmlnKCk7XG4gIH1cblxuICBpc0Z1bmN0aW9uYWxDb29raWVEaXNhYmxlZCgpIHtcbiAgICBjb25zdCB7IGZ1bmN0aW9uYWwgfTogQ29va2llUHJlZmVyZW5jZXMgPSB0aGlzLmdldFVzZXJDb29raWVQcmVmZXJlbmNlcygpIHx8IHt9O1xuICAgIC8qKlxuICAgICAqIFdlIHdhbnQgdGhpcyBjaGVjaywgYXMgd2Ugc2hvdWxkIHN0b3AgbG9hZGluZyBHYWluc2lnaHQgdGFnIG9ubHkgd2hlbiBmdW5jdGlvbmFsIGNvb2tpZSBpcyBleHBsaWNpdGx5IHNldCB0byBmYWxzZS5cbiAgICAgKiBJbiB0aGUgVVNBIHRoZXJlIGlzIG5vIG5lZWQgZm9yIHRoZSBmdW5jdGlvbmFsIGNvb2tpZXMgd2hlbiB0cmFja2luZyB1c2Vycy5cbiAgICAgKiBUaGlzIGlzIHdoeSB3ZSB3YW50IHRvIGFsbG93IHVuZGVmaW5lZCB0byBwYXNzIHRoZSBjaGVjay5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uYWwgPT09IGZhbHNlO1xuICB9XG5cbiAgZ2V0Q29va2llRGVzY3JpcHRpb24oY29va2llVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWVEZXNjcmlwdGlvbnNbY29va2llVHlwZV07XG4gIH1cblxuICB0cmFuc2Zvcm1Db29raWVQcmVmZXJlbmNlc1RvTGlzdChjb29raWVQcmVmZXJlbmNlczogQ29va2llUHJlZmVyZW5jZXMpOiBDb29raWVbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGNvb2tpZVByZWZlcmVuY2VzKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IGlzUmVhZG9ubHkgPSBuYW1lID09PSAncmVxdWlyZWQnO1xuICAgICAgcmV0dXJuIHsgbmFtZSwgdmFsdWUsIGlzUmVhZG9ubHkgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHRyYW5zZm9ybUNvb2tpZVByZWZlcmVuY2VzTGlzdFRvQ29va2llUHJlZmVyZW5jZXMoXG4gICAgY29va2llUHJlZmVyZW5jZXNMaXN0OiBDb29raWVbXVxuICApOiBDb29raWVQcmVmZXJlbmNlcyB7XG4gICAgcmV0dXJuIGNvb2tpZVByZWZlcmVuY2VzTGlzdC5yZWR1Y2UoKGNvb2tpZVByZWY6IENvb2tpZVByZWZlcmVuY2VzLCBjb29raWU6IENvb2tpZSkgPT4ge1xuICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBjb29raWUubmFtZTtcbiAgICAgIGNvb2tpZVByZWZba2V5XSA9IGNvb2tpZS52YWx1ZTtcblxuICAgICAgcmV0dXJuIGNvb2tpZVByZWY7XG4gICAgfSwge30pO1xuICB9XG59XG4iXX0=