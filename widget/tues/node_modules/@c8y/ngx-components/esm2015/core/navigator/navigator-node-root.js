import { NavigatorNode } from './navigator-node';
export class NavigatorNodeRoot extends NavigatorNode {
    addRoot(nodeData) {
        const { parent } = nodeData;
        const node = this.createNode(nodeData);
        let localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find((n) => localParent === n)) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    }
    createNode(nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode(Object.assign({}, nodeData, { parent: undefined }));
        }
        throw new Error('Wrong type of node data');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL25hdmlnYXRvci9uYXZpZ2F0b3Itbm9kZS1yb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUlqRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQUNsRCxPQUFPLENBQUMsUUFBb0M7UUFDMUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxDQUFDO1FBRWhCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzlCLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDNUI7YUFDRjtpQkFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ3JFLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pDO1lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQ3ZCO2FBQ0Y7U0FDRjtRQUVELENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBUTtRQUNqQixJQUFJLFFBQVEsWUFBWSxhQUFhLEVBQUU7WUFDckMsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLElBQUksYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLElBQUksYUFBYSxtQkFBTSxRQUFRLElBQUUsTUFBTSxFQUFFLFNBQVMsSUFBRyxDQUFDO1NBQzlEO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdmlnYXRvck5vZGUgfSBmcm9tICcuL25hdmlnYXRvci1ub2RlJztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGVEYXRhIH0gZnJvbSAnLi9uYXZpZ2F0b3Itbm9kZS1kYXRhJztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0b3JOb2RlUm9vdCBleHRlbmRzIE5hdmlnYXRvck5vZGUge1xuICBhZGRSb290KG5vZGVEYXRhOiBQYXJ0aWFsPE5hdmlnYXRvck5vZGVEYXRhPikge1xuICAgIGNvbnN0IHsgcGFyZW50IH0gPSBub2RlRGF0YTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5jcmVhdGVOb2RlKG5vZGVEYXRhKTtcbiAgICBsZXQgbG9jYWxQYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAodHlwZW9mIHBhcmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYWxQYXJlbnQgPSB0aGlzLmZpbmQocGFyZW50LmxhYmVsKTtcbiAgICAgICAgaWYgKGxvY2FsUGFyZW50KSB7XG4gICAgICAgICAgbG9jYWxQYXJlbnQudXBkYXRlKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcmVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHBhcmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsb2NhbFBhcmVudCA9IHRoaXMuZmluZChwYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxvY2FsUGFyZW50KSB7XG4gICAgICAgIGxvY2FsUGFyZW50ID0gdGhpcy5jcmVhdGVOb2RlKHBhcmVudCk7XG4gICAgICAgIGlmICghdGhpcy5maW5kKChuKSA9PiBsb2NhbFBhcmVudCA9PT0gbikpIHtcbiAgICAgICAgICB0aGlzLmFkZChsb2NhbFBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAobG9jYWxQYXJlbnQgfHwgdGhpcykuYWRkKG5vZGUpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgY3JlYXRlTm9kZShub2RlRGF0YSkge1xuICAgIGlmIChub2RlRGF0YSBpbnN0YW5jZW9mIE5hdmlnYXRvck5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlRGF0YTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBub2RlRGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuZXcgTmF2aWdhdG9yTm9kZSh7IGxhYmVsOiBub2RlRGF0YSB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBub2RlRGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBuZXcgTmF2aWdhdG9yTm9kZSh7IC4uLm5vZGVEYXRhLCBwYXJlbnQ6IHVuZGVmaW5lZCB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyB0eXBlIG9mIG5vZGUgZGF0YScpO1xuICB9XG59XG4iXX0=