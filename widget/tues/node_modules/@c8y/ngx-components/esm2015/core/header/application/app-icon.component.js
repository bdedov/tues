import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { find, keys, get, assign, isEmpty } from 'lodash-es';
import { OptionsService } from '../../common/options.service';
let AppIconComponent = class AppIconComponent {
    constructor(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    ngOnChanges(changes) {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        const iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.model.appIcon,
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(c => !!c);
        this.model.appNameAbbr = this.name.substr(0, 2);
    }
    findStaticIcon() {
        const contextPath = this.contextPath || this.name;
        const appContextPathNormalized = find(keys(this.c8yAppIconsList), cp => {
            return contextPath.indexOf(cp) > -1;
        });
        const appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? `c8y-icon-${appIcon}` : undefined;
    }
    iconFromAppDefinition() {
        const app = this.app || this.options;
        const iconClassProperty = ['icon', 'class'];
        const iconClass = get(app, iconClassProperty) || get(app, ['manifest', ...iconClassProperty]);
        return iconClass;
    }
    iconUrlFromAppDefinition() {
        const app = this.app || this.options;
        const iconUrlProperty = ['icon', 'url'];
        const iconUrl = get(app, iconUrlProperty) || get(app, ['manifest', ...iconUrlProperty]);
        return iconUrl;
    }
};
AppIconComponent.ctorParameters = () => [
    { type: OptionsService }
];
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "contextPath", void 0);
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "app", void 0);
AppIconComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-app-icon',
        template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
        host: { class: 'c8y-app-icon' }
    })
], AppIconComponent);
export { AppIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvaGVhZGVyL2FwcGxpY2F0aW9uL2FwcC1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQU85RCxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQStCM0IsWUFBb0IsT0FBdUI7UUFBdkIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUE3QmxDLFNBQUksR0FBVyxFQUFFLENBQUM7UUFHM0IsVUFBSyxHQUFHO1lBQ04sT0FBTyxFQUFFLEVBQUU7WUFDWCxRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUN2QixXQUFXLEVBQUUsRUFBRTtZQUNmLFNBQVMsRUFBRSxFQUFFO1NBQ2QsQ0FBQztRQUVNLG9CQUFlLEdBQUc7WUFDeEIsZ0JBQWdCLEVBQUUsbUJBQW1CO1lBQ3JDLG1CQUFtQixFQUFFLG1CQUFtQjtZQUN4QyxPQUFPLEVBQUUsU0FBUztZQUNsQixnQkFBZ0IsRUFBRSxtQkFBbUI7WUFDckMsY0FBYyxFQUFFLGdCQUFnQjtZQUNoQyxRQUFRLEVBQUUsV0FBVztTQUN0QixDQUFDO1FBRU0sVUFBSyxHQUFZLEtBQUssQ0FBQztRQUV2QixxQkFBZ0IsR0FBRztZQUN6QixtQkFBbUIsRUFBRSxXQUFXO1lBQ2hDLGlCQUFpQixFQUFFLFNBQVM7WUFDNUIsTUFBTSxFQUFFLE1BQU07WUFDZCxLQUFLLEVBQUUsTUFBTTtTQUNkLENBQUM7SUFF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UUFBUSxFQUFFLGNBQWM7UUFDeEIsOExBQXdDO1FBQ3hDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUU7S0FDaEMsQ0FBQztHQUNXLGdCQUFnQixDQXdFNUI7U0F4RVksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaW5kLCBrZXlzLCBnZXQsIGFzc2lnbiwgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYXBwLWljb24uY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7IGNsYXNzOiAnYzh5LWFwcC1pY29uJyB9XG59KVxuZXhwb3J0IGNsYXNzIEFwcEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBjb250ZXh0UGF0aDogc3RyaW5nO1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgYXBwOiBhbnk7XG5cbiAgbW9kZWwgPSB7XG4gICAgYXBwSWNvbjogJycsXG4gICAgc2hvd0ljb246IHRydWUsXG4gICAgaWNvbkNsYXNzOiBbJ2M4eS1pY29uJ10sXG4gICAgYXBwTmFtZUFiYnI6ICcnLFxuICAgIGljb25TdHlsZToge31cbiAgfTtcblxuICBwcml2YXRlIGM4eUFwcEljb25zTGlzdCA9IHtcbiAgICBhbmFseXRpY3NidWlsZGVyOiAnYW5hbHl0aWNzLWJ1aWxkZXInLFxuICAgICdhbmFseXRpY3MtYnVpbGRlcic6ICdhbmFseXRpY3MtYnVpbGRlcicsXG4gICAgY29ja3BpdDogJ2NvY2twaXQnLFxuICAgIGRldmljZW1hbmFnZW1lbnQ6ICdkZXZpY2UtbWFuYWdlbWVudCcsXG4gICAgYWRtaW5pc3RyYXRpb246ICdhZG1pbmlzdHJhdGlvbicsXG4gICAgYXBhbWFlcGw6ICdhcGFtYS1lcGwnXG4gIH07XG5cbiAgcHJpdmF0ZSB3aGl0ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgZGVmYXVsdEljb25TdHlsZSA9IHtcbiAgICAnYmFja2dyb3VuZC1yZXBlYXQnOiAnbm8tcmVwZWF0JyxcbiAgICAnYmFja2dyb3VuZC1zaXplJzogJ2NvbnRhaW4nLFxuICAgIGhlaWdodDogJzM2cHgnLFxuICAgIHdpZHRoOiAnMzZweCdcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnNTZXJ2aWNlKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLm1vZGVsLmFwcEljb24gPSB0aGlzLmljb25Gcm9tQXBwRGVmaW5pdGlvbigpIHx8IHRoaXMuZmluZFN0YXRpY0ljb24oKTtcbiAgICBjb25zdCBpY29uVXJsID0gdGhpcy5pY29uVXJsRnJvbUFwcERlZmluaXRpb24oKTtcbiAgICBpZiAoaWNvblVybCkge1xuICAgICAgdGhpcy5tb2RlbC5pY29uU3R5bGUgPSBhc3NpZ24odGhpcy5kZWZhdWx0SWNvblN0eWxlLCB7XG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogaWNvblVybFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwuc2hvd0ljb24gPSAhIXRoaXMubW9kZWwuYXBwSWNvbiB8fCAhaXNFbXB0eSh0aGlzLm1vZGVsLmljb25TdHlsZSk7XG4gICAgdGhpcy5tb2RlbC5pY29uQ2xhc3MgPSBbXG4gICAgICAnYzh5LWljb24nLFxuICAgICAgdGhpcy5tb2RlbC5hcHBJY29uLFxuICAgICAgdGhpcy53aGl0ZSA/ICdjOHktaWNvbi13aGl0ZScgOiAnYzh5LWljb24tZHVvY29sb3InXG4gICAgXS5maWx0ZXIoYyA9PiAhIWMpO1xuICAgIHRoaXMubW9kZWwuYXBwTmFtZUFiYnIgPSB0aGlzLm5hbWUuc3Vic3RyKDAsIDIpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kU3RhdGljSWNvbigpIHtcbiAgICBjb25zdCBjb250ZXh0UGF0aCA9IHRoaXMuY29udGV4dFBhdGggfHwgdGhpcy5uYW1lO1xuICAgIGNvbnN0IGFwcENvbnRleHRQYXRoTm9ybWFsaXplZCA9IGZpbmQoa2V5cyh0aGlzLmM4eUFwcEljb25zTGlzdCksIGNwID0+IHtcbiAgICAgIHJldHVybiBjb250ZXh0UGF0aC5pbmRleE9mKGNwKSA+IC0xO1xuICAgIH0pO1xuICAgIGNvbnN0IGFwcEljb24gPSB0aGlzLmM4eUFwcEljb25zTGlzdFthcHBDb250ZXh0UGF0aE5vcm1hbGl6ZWRdO1xuICAgIHJldHVybiBhcHBJY29uID8gYGM4eS1pY29uLSR7YXBwSWNvbn1gIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBpY29uRnJvbUFwcERlZmluaXRpb24oKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHAgfHwgdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGljb25DbGFzc1Byb3BlcnR5ID0gWydpY29uJywgJ2NsYXNzJ107XG4gICAgY29uc3QgaWNvbkNsYXNzID0gZ2V0KGFwcCwgaWNvbkNsYXNzUHJvcGVydHkpIHx8IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uQ2xhc3NQcm9wZXJ0eV0pO1xuICAgIHJldHVybiBpY29uQ2xhc3M7XG4gIH1cblxuICBwcml2YXRlIGljb25VcmxGcm9tQXBwRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcCB8fCB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaWNvblVybFByb3BlcnR5ID0gWydpY29uJywgJ3VybCddO1xuICAgIGNvbnN0IGljb25VcmwgPSBnZXQoYXBwLCBpY29uVXJsUHJvcGVydHkpIHx8IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uVXJsUHJvcGVydHldKTtcbiAgICByZXR1cm4gaWNvblVybDtcbiAgfVxufVxuIl19