import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ApplicationService, IApplication, ICurrentTenant, IUser } from '@c8y/client';
import { get, includes, orderBy } from 'lodash-es';
import { combineLatest } from 'rxjs';
import { first } from 'rxjs/operators';
import { AppStateService } from '../../common/ui-state.service';
let AppSwitcherComponent = class AppSwitcherComponent {
    constructor(ui, applications) {
        this.ui = ui;
        this.applications = applications;
        const { currentUser, currentTenant } = this.ui;
        combineLatest(currentUser, currentTenant)
            .pipe(first())
            .subscribe(([user, tenant]) => {
            this.tenant = tenant;
            this.listAppsForUser(user);
        });
    }
    get hideCloudApps() {
        return false; // this should be configurable from outside
    }
    isActive(app) {
        return app.contextPath === this.ui.state.app.contextPath;
    }
    getHref(app) {
        return this.applications.getHref(app);
    }
    listAppsForUser(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (user) {
                const { data } = yield this.applications.listByUser(user, { pageSize: 1000 });
                this.apps = this.orderApps(this.filterApps(data));
            }
        });
    }
    filterApps(apps) {
        apps = this.filterVisible(apps);
        apps = this.filterCloud(apps);
        apps = this.filterDuplicates(apps);
        return apps;
    }
    filterVisible(apps) {
        const visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        return apps.filter(app => includes(visibleApplicationTypes, app.type) &&
            !app.noAppSwitcher &&
            !get(app, 'manifest.noAppSwitcher'));
    }
    filterCloud(apps) {
        const { hideCloudApps } = this;
        const filterFn = app => !!app.cloud;
        if (!hideCloudApps) {
            this.oneCloudApps = this.orderApps(apps.filter(filterFn));
        }
        return apps.filter(app => !filterFn(app));
    }
    filterDuplicates(apps) {
        // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
        const filterFn = app => !apps.some(otherApp => app !== otherApp &&
            (app.contextPath && app.contextPath === otherApp.contextPath) &&
            app.owner.tenant.id !== this.tenant.name);
        return apps.filter(filterFn);
    }
    orderApps(apps) {
        return orderBy(apps, ({ name }) => name.toLowerCase());
    }
};
AppSwitcherComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: ApplicationService }
];
AppSwitcherComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-app-switcher',
        template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n  >\n    <i class=\"fa-2x fa fw fa-th\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
    })
], AppSwitcherComponent);
export { AppSwitcherComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN3aXRjaGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2hlYWRlci9hcHBsaWNhdGlvbi9hcHAtc3dpdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0RixPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS2hFLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBUy9CLFlBQW9CLEVBQW1CLEVBQVUsWUFBZ0M7UUFBN0QsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBb0I7UUFDL0UsTUFBTSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQy9DLGFBQWEsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDO2FBQ3RDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNiLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFaRCxJQUFZLGFB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QTs7WUFsRXlCLGVBQWU7WUFBd0Isa0JBQWtCOztBQVR0RSxvQkFBb0I7SUFKaEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QiwrOUNBQTRDO0tBQzdDLENBQUM7R0FDVyxvQkFBb0IsQ0EyRWhDO1NBM0VZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25TZXJ2aWNlLCBJQXBwbGljYXRpb24sIElDdXJyZW50VGVuYW50LCBJVXNlciB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldCwgaW5jbHVkZXMsIG9yZGVyQnkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLXN3aXRjaGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FwcC1zd2l0Y2hlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwU3dpdGNoZXJDb21wb25lbnQge1xuICBvbmVDbG91ZEFwcHM/OiBBcnJheTxJQXBwbGljYXRpb24gJiB7IFtrZXk6IHN0cmluZ106IGFueSB9PjtcbiAgYXBwczogQXJyYXk8SUFwcGxpY2F0aW9uICYgeyBba2V5OiBzdHJpbmddOiBhbnkgfT47XG4gIG9wZW46IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBnZXQgaGlkZUNsb3VkQXBwcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIHRoaXMgc2hvdWxkIGJlIGNvbmZpZ3VyYWJsZSBmcm9tIG91dHNpZGVcbiAgfVxuICBwcml2YXRlIHRlbmFudDogSUN1cnJlbnRUZW5hbnQ7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSwgcHJpdmF0ZSBhcHBsaWNhdGlvbnM6IEFwcGxpY2F0aW9uU2VydmljZSkge1xuICAgIGNvbnN0IHsgY3VycmVudFVzZXIsIGN1cnJlbnRUZW5hbnQgfSA9IHRoaXMudWk7XG4gICAgY29tYmluZUxhdGVzdChjdXJyZW50VXNlciwgY3VycmVudFRlbmFudClcbiAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAuc3Vic2NyaWJlKChbdXNlciwgdGVuYW50XSkgPT4ge1xuICAgICAgICB0aGlzLnRlbmFudCA9IHRlbmFudDtcbiAgICAgICAgdGhpcy5saXN0QXBwc0ZvclVzZXIodXNlcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGlzQWN0aXZlKGFwcDogSUFwcGxpY2F0aW9uKSB7XG4gICAgcmV0dXJuIGFwcC5jb250ZXh0UGF0aCA9PT0gdGhpcy51aS5zdGF0ZS5hcHAuY29udGV4dFBhdGg7XG4gIH1cblxuICBnZXRIcmVmKGFwcDogSUFwcGxpY2F0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwbGljYXRpb25zLmdldEhyZWYoYXBwKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbGlzdEFwcHNGb3JVc2VyKHVzZXI6IElVc2VyIHwgbnVsbCkge1xuICAgIGlmICh1c2VyKSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBwbGljYXRpb25zLmxpc3RCeVVzZXIodXNlciwgeyBwYWdlU2l6ZTogMTAwMCB9KTtcbiAgICAgIHRoaXMuYXBwcyA9IHRoaXMub3JkZXJBcHBzKHRoaXMuZmlsdGVyQXBwcyhkYXRhKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJBcHBzKGFwcHMpIHtcbiAgICBhcHBzID0gdGhpcy5maWx0ZXJWaXNpYmxlKGFwcHMpO1xuICAgIGFwcHMgPSB0aGlzLmZpbHRlckNsb3VkKGFwcHMpO1xuICAgIGFwcHMgPSB0aGlzLmZpbHRlckR1cGxpY2F0ZXMoYXBwcyk7XG4gICAgcmV0dXJuIGFwcHM7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlclZpc2libGUoYXBwcykge1xuICAgIGNvbnN0IHZpc2libGVBcHBsaWNhdGlvblR5cGVzID0gWydIT1NURUQnLCAnRVhURVJOQUwnXTtcbiAgICByZXR1cm4gYXBwcy5maWx0ZXIoXG4gICAgICBhcHAgPT5cbiAgICAgICAgaW5jbHVkZXModmlzaWJsZUFwcGxpY2F0aW9uVHlwZXMsIGFwcC50eXBlKSAmJlxuICAgICAgICAhYXBwLm5vQXBwU3dpdGNoZXIgJiZcbiAgICAgICAgIWdldChhcHAsICdtYW5pZmVzdC5ub0FwcFN3aXRjaGVyJylcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJDbG91ZChhcHBzKSB7XG4gICAgY29uc3QgeyBoaWRlQ2xvdWRBcHBzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGZpbHRlckZuID0gYXBwID0+ICEhYXBwLmNsb3VkO1xuICAgIGlmICghaGlkZUNsb3VkQXBwcykge1xuICAgICAgdGhpcy5vbmVDbG91ZEFwcHMgPSB0aGlzLm9yZGVyQXBwcyhhcHBzLmZpbHRlcihmaWx0ZXJGbikpO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcy5maWx0ZXIoYXBwID0+ICFmaWx0ZXJGbihhcHApKTtcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyRHVwbGljYXRlcyhhcHBzKSB7XG4gICAgLy8gRmlsdGVyIG91dCBhcHBzIHRoYXQgaGF2ZSBkdXBsaWNhdGUgY29udGV4dHBhdGhzIGFuZCBhcmUgbm90IG93biBvd25lZCBidXQgdGhlIGN1cnJlbnQgdGVuYW50O1xuICAgIGNvbnN0IGZpbHRlckZuID0gYXBwID0+XG4gICAgICAhYXBwcy5zb21lKFxuICAgICAgICBvdGhlckFwcCA9PlxuICAgICAgICAgIGFwcCAhPT0gb3RoZXJBcHAgJiZcbiAgICAgICAgICAoYXBwLmNvbnRleHRQYXRoICYmIGFwcC5jb250ZXh0UGF0aCA9PT0gb3RoZXJBcHAuY29udGV4dFBhdGgpICYmXG4gICAgICAgICAgYXBwLm93bmVyLnRlbmFudC5pZCAhPT0gdGhpcy50ZW5hbnQubmFtZVxuICAgICAgKTtcbiAgICByZXR1cm4gYXBwcy5maWx0ZXIoZmlsdGVyRm4pO1xuICB9XG5cbiAgcHJpdmF0ZSBvcmRlckFwcHMoYXBwcykge1xuICAgIHJldHVybiBvcmRlckJ5KGFwcHMsICh7IG5hbWUgfSkgPT4gbmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuIl19