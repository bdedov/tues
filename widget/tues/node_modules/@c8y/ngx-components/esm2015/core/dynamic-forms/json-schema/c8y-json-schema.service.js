import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FormlyJsonschema } from '@ngx-formly/core/json-schema';
let C8yJSONSchema = class C8yJSONSchema extends FormlyJsonschema {
    toFieldConfig(schema, options) {
        return super.toFieldConfig(schema, this.c8yOptions((options || {}).map));
    }
    c8yOptions(map) {
        return {
            map(mappedField, mapSource) {
                let result = mappedField;
                /** `const` type is represented as hidden input */
                if (mapSource.const) {
                    result = Object.assign({}, result, { defaultValue: mapSource.const, templateOptions: Object.assign({}, result.templateOptions, { type: 'hidden' }) });
                }
                /** `writeOnly` field represented as password input */
                if (mapSource.writeOnly) {
                    result = Object.assign({}, result, { templateOptions: Object.assign({}, result.templateOptions, { type: 'password', autocomplete: 'off' }) });
                }
                /** `examples` values used as placeholder */
                if (mapSource.examples) {
                    result = Object.assign({}, result, { templateOptions: Object.assign({}, result.templateOptions, { placeholder: mapSource.examples.join(', ') }) });
                }
                /** `enum` field represented as radio button group */
                if (mapSource.enum) {
                    result = Object.assign({}, result, { type: 'radio' });
                }
                return map ? map(result, mapSource) : result;
            }
        };
    }
};
C8yJSONSchema = tslib_1.__decorate([
    Injectable()
], C8yJSONSchema);
export { C8yJSONSchema };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzh5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2pzb24tc2NoZW1hL2M4eS1qc29uLXNjaGVtYS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBS2hFLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWMsU0FBUSxnQkFBZ0I7SUFDakQsYUFBYSxDQUFDLE1BQW1CLEVBQUUsT0FBaUM7UUFDbEUsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVPLFVBQVUsQ0FDaEIsR0FBa0Y7UUFFbEYsT0FBTztZQUNMLEdBQUcsQ0FBQyxXQUE4QixFQUFFLFNBQXNCO2dCQUN4RCxJQUFJLE1BQU0sR0FBc0IsV0FBVyxDQUFDO2dCQUU1QyxrREFBa0Q7Z0JBQ2xELElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtvQkFDbkIsTUFBTSxxQkFDRCxNQUFNLElBQ1QsWUFBWSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQzdCLGVBQWUsb0JBQU8sTUFBTSxDQUFDLGVBQWUsSUFBRSxJQUFJLEVBQUUsUUFBUSxNQUM3RCxDQUFDO2lCQUNIO2dCQUVELHNEQUFzRDtnQkFDdEQsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO29CQUN2QixNQUFNLHFCQUNELE1BQU0sSUFDVCxlQUFlLG9CQUFPLE1BQU0sQ0FBQyxlQUFlLElBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxNQUNwRixDQUFDO2lCQUNIO2dCQUVELDRDQUE0QztnQkFDNUMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO29CQUN0QixNQUFNLHFCQUNELE1BQU0sSUFDVCxlQUFlLG9CQUNWLE1BQU0sQ0FBQyxlQUFlLElBQ3pCLFdBQVcsRUFBRyxTQUFTLENBQUMsUUFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BRTNELENBQUM7aUJBQ0g7Z0JBRUQscURBQXFEO2dCQUNyRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0scUJBQ0QsTUFBTSxJQUNULElBQUksRUFBRSxPQUFPLEdBQ2QsQ0FBQztpQkFDSDtnQkFFRCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQy9DLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUFwRFksYUFBYTtJQUR6QixVQUFVLEVBQUU7R0FDQSxhQUFhLENBb0R6QjtTQXBEWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seUpzb25zY2hlbWEgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hJztcbmltcG9ydCB7IEZvcm1seUpzb25zY2hlbWFPcHRpb25zIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZS9qc29uLXNjaGVtYS9mb3JtbHktanNvbi1zY2hlbWEuc2VydmljZSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hNyB9IGZyb20gJ2pzb24tc2NoZW1hJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEM4eUpTT05TY2hlbWEgZXh0ZW5kcyBGb3JtbHlKc29uc2NoZW1hIHtcbiAgdG9GaWVsZENvbmZpZyhzY2hlbWE6IEpTT05TY2hlbWE3LCBvcHRpb25zPzogRm9ybWx5SnNvbnNjaGVtYU9wdGlvbnMpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgcmV0dXJuIHN1cGVyLnRvRmllbGRDb25maWcoc2NoZW1hLCB0aGlzLmM4eU9wdGlvbnMoKG9wdGlvbnMgfHwge30pLm1hcCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjOHlPcHRpb25zKFxuICAgIG1hcDogKG1hcHBlZEZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZywgbWFwU291cmNlOiBKU09OU2NoZW1hNykgPT4gRm9ybWx5RmllbGRDb25maWdcbiAgKTogRm9ybWx5SnNvbnNjaGVtYU9wdGlvbnMge1xuICAgIHJldHVybiB7XG4gICAgICBtYXAobWFwcGVkRmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBtYXBTb3VyY2U6IEpTT05TY2hlbWE3KSB7XG4gICAgICAgIGxldCByZXN1bHQ6IEZvcm1seUZpZWxkQ29uZmlnID0gbWFwcGVkRmllbGQ7XG5cbiAgICAgICAgLyoqIGBjb25zdGAgdHlwZSBpcyByZXByZXNlbnRlZCBhcyBoaWRkZW4gaW5wdXQgKi9cbiAgICAgICAgaWYgKG1hcFNvdXJjZS5jb25zdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogbWFwU291cmNlLmNvbnN0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7IC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsIHR5cGU6ICdoaWRkZW4nIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIGB3cml0ZU9ubHlgIGZpZWxkIHJlcHJlc2VudGVkIGFzIHBhc3N3b3JkIGlucHV0ICovXG4gICAgICAgIGlmIChtYXBTb3VyY2Uud3JpdGVPbmx5KSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7IC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsIHR5cGU6ICdwYXNzd29yZCcsIGF1dG9jb21wbGV0ZTogJ29mZicgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKiogYGV4YW1wbGVzYCB2YWx1ZXMgdXNlZCBhcyBwbGFjZWhvbGRlciAqL1xuICAgICAgICBpZiAobWFwU291cmNlLmV4YW1wbGVzKSB7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgIC4uLnJlc3VsdC50ZW1wbGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAobWFwU291cmNlLmV4YW1wbGVzIGFzIHN0cmluZ1tdKS5qb2luKCcsICcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBgZW51bWAgZmllbGQgcmVwcmVzZW50ZWQgYXMgcmFkaW8gYnV0dG9uIGdyb3VwICovXG4gICAgICAgIGlmIChtYXBTb3VyY2UuZW51bSkge1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIHR5cGU6ICdyYWRpbydcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcCA/IG1hcChyZXN1bHQsIG1hcFNvdXJjZSkgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19