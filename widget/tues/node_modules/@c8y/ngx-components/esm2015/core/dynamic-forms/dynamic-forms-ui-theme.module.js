import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { TranslateModule } from '@ngx-translate/core';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { FormsModule } from '../forms/index';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
export const FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(type => type['CONFIG']).reduce((formlyConfig, typeConfig) => (Object.assign({}, formlyConfig, { types: [...formlyConfig.types, ...(typeConfig.types || [])], wrappers: [...formlyConfig.wrappers, ...(typeConfig.wrappers || [])] })), { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
let DynamicFormsUIThemeModule = class DynamicFormsUIThemeModule {
};
DynamicFormsUIThemeModule = tslib_1.__decorate([
    NgModule({
        declarations: [...FIELD_TYPES],
        entryComponents: [...FIELD_TYPES],
        imports: [
            CommonModule,
            PopoverModule,
            ReactiveFormsModule,
            TranslateModule,
            FormsModule,
            FormlyModule,
            FormlySelectModule
        ],
        providers: [
            {
                provide: FORMLY_CONFIG,
                useFactory: fieldTypeFactory,
                multi: true
            }
        ]
    })
], DynamicFormsUIThemeModule);
export { DynamicFormsUIThemeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMtdWktdGhlbWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQTJCLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUxRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQTJCO0lBQ2pELGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixVQUFVO0lBQ1YsbUJBQW1CO0NBQ3BCLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLDZDQUE2QztJQUM3QyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQ25ELENBQUMsWUFBMEIsRUFBRSxVQUF3QixFQUFFLEVBQUUsQ0FDdkQsQ0FBQyxrQkFDSSxZQUFZLElBQ2YsS0FBSyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQzNELFFBQVEsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUNwRCxDQUFBLEVBQ3BCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQzVCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQXFCSCxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtDQUFHLENBQUE7QUFBNUIseUJBQXlCO0lBcEJyQyxRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUM5QixlQUFlLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUNqQyxPQUFPLEVBQUU7WUFDUCxZQUFZO1lBQ1osYUFBYTtZQUNiLG1CQUFtQjtZQUNuQixlQUFlO1lBQ2YsV0FBVztZQUNYLFlBQVk7WUFDWixrQkFBa0I7U0FDbkI7UUFDRCxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsVUFBVSxFQUFFLGdCQUFnQjtnQkFDNUIsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztHQUNXLHlCQUF5QixDQUFHO1NBQTVCLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbmZpZ09wdGlvbiwgRmllbGRUeXBlLCBGb3JtbHlNb2R1bGUsIEZPUk1MWV9DT05GSUcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seVNlbGVjdE1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0JztcbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2Zvcm1zL2luZGV4JztcbmltcG9ydCB7IEFycmF5VHlwZUNvbXBvbmVudCB9IGZyb20gJy4vYXJyYXkvYXJyYXkudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRDaGVja2JveCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3gudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgV3JhcHBlckZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZC9mb3JtLWZpZWxkLndyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkSW5wdXQgfSBmcm9tICcuL2lucHV0L2lucHV0LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9iamVjdFR5cGVDb21wb25lbnQgfSBmcm9tICcuL29iamVjdC9vYmplY3QudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRSYWRpbyB9IGZyb20gJy4vcmFkaW8vcmFkaW8udHlwZS5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgRklFTERfVFlQRVM6IEFycmF5PFR5cGU8RmllbGRUeXBlPj4gPSBbXG4gIEZpZWxkQ2hlY2tib3gsXG4gIEFycmF5VHlwZUNvbXBvbmVudCxcbiAgV3JhcHBlckZvcm1GaWVsZCxcbiAgRmllbGRJbnB1dCxcbiAgRmllbGRSYWRpbyxcbiAgT2JqZWN0VHlwZUNvbXBvbmVudFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkVHlwZUZhY3RvcnkoKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICByZXR1cm4gRklFTERfVFlQRVMubWFwKHR5cGUgPT4gdHlwZVsnQ09ORklHJ10pLnJlZHVjZShcbiAgICAoZm9ybWx5Q29uZmlnOiBDb25maWdPcHRpb24sIHR5cGVDb25maWc6IENvbmZpZ09wdGlvbikgPT5cbiAgICAgICh7XG4gICAgICAgIC4uLmZvcm1seUNvbmZpZyxcbiAgICAgICAgdHlwZXM6IFsuLi5mb3JtbHlDb25maWcudHlwZXMsIC4uLih0eXBlQ29uZmlnLnR5cGVzIHx8IFtdKV0sXG4gICAgICAgIHdyYXBwZXJzOiBbLi4uZm9ybWx5Q29uZmlnLndyYXBwZXJzLCAuLi4odHlwZUNvbmZpZy53cmFwcGVycyB8fCBbXSldXG4gICAgICB9IGFzIENvbmZpZ09wdGlvbiksXG4gICAgeyB0eXBlczogW10sIHdyYXBwZXJzOiBbXSB9XG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVjbGFyZXMgZmllbGQgdHlwZSBjb21wb25lbnRzIGZvciBkeW5hbWljIGZvcm1zIHRoYXQgbWF0Y2ggQzhZIHN0eWxlZ3VpZGUuXG4gKlxuICogQGR5bmFtaWNcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbLi4uRklFTERfVFlQRVNdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsuLi5GSUVMRF9UWVBFU10sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUG9wb3Zlck1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBGb3JtbHlNb2R1bGUsXG4gICAgRm9ybWx5U2VsZWN0TW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEZPUk1MWV9DT05GSUcsXG4gICAgICB1c2VGYWN0b3J5OiBmaWVsZFR5cGVGYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1zVUlUaGVtZU1vZHVsZSB7fVxuIl19