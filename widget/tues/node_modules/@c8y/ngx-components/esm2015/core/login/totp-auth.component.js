import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ICredentials, UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { LoginService } from './login.service';
import { LoginViews } from './login.model';
import { gettext } from '../i18n/gettext';
let TotpAuthComponent = class TotpAuthComponent {
    constructor(loginService, userService, alert) {
        this.loginService = loginService;
        this.userService = userService;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.loading = false;
        this.hasError = false;
    }
    get isSetup() {
        return this.view === LoginViews.TotpSetup;
    }
    /**
     * In case of a setup we need the user to be authorized
     * first.
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.view === this.LOGIN_VIEWS.TotpSetup) {
                yield this.loginService.switchLoginMode(this.credentials);
            }
        });
    }
    onTotpSuccess(code) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                this.credentials.tfa = code;
                if (this.isSetup) {
                    yield this.userService.activateTotp();
                }
                yield this.loginService.switchLoginMode(this.credentials);
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                this.alert.removeLastDanger();
                if (e.data && e.data.message === 'Access is denied') {
                    this.alert.addServerFailure(e);
                }
                if (e.data && e.data.message === 'Authentication failed! : User account is locked') {
                    this.alert.warning(gettext('Authentication failed due to: user account is locked.'));
                }
                else {
                    this.hasError = true;
                }
            }
            finally {
                this.loading = false;
            }
        });
    }
};
TotpAuthComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], TotpAuthComponent.prototype, "credentials", void 0);
tslib_1.__decorate([
    Input()
], TotpAuthComponent.prototype, "view", void 0);
tslib_1.__decorate([
    Output()
], TotpAuthComponent.prototype, "onCancel", void 0);
TotpAuthComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-totp-auth',
        template: "<div\n  class=\"legend form-block center\"\n  translate\n>Two-factor authentication</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\"></c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n></c8y-totp-challenge>\n\n<div class=\"top-m-sm text-center\">\n  <a\n    title=\"{{ 'Cancel' | translate }}\"\n    class=\"btn btn-link btn-sm\"\n    (click)=\"onCancel.emit()\"\n    translate\n  >Cancel</a>\n</div>\n"
    })
], TotpAuthComponent);
export { TotpAuthComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1hdXRoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xvZ2luL3RvdHAtYXV0aC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0xQyxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQVk1QixZQUNTLFlBQTBCLEVBQ3pCLFdBQXdCLEVBQ3hCLEtBQW1CO1FBRnBCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ3pCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLFVBQUssR0FBTCxLQUFLLENBQWM7UUFabkIsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDeEMsZ0JBQVcsR0FBRyxVQUFVLENBQUM7UUFDekIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixhQUFRLEdBQUcsS0FBSyxDQUFDO0lBVWQsQ0FBQztJQVJKLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsU0FBUyxDQUFDO0lBQzVDLENBQUM7SUFRRDs7O09BR0c7SUFDRyxRQUFROztZQUNaLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRTtnQkFDNUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDM0Q7UUFDSCxDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsSUFBSTs7WUFDdEIsSUFBSTtnQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztnQkFDNUIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQ3ZDO2dCQUNELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzFDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN6QztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGtCQUFrQixFQUFFO29CQUNuRCxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztnQkFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssaURBQWlELEVBQUU7b0JBQ2xGLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDLENBQUM7aUJBQ3RGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUN0QjthQUNGO29CQUFTO2dCQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUF4Q3dCLFlBQVk7WUFDWixXQUFXO1lBQ2pCLFlBQVk7O0FBZHBCO0lBQVIsS0FBSyxFQUFFO3NEQUEyQjtBQUMxQjtJQUFSLEtBQUssRUFBRTsrQ0FBa0I7QUFDaEI7SUFBVCxNQUFNLEVBQUU7bURBQStCO0FBSDdCLGlCQUFpQjtJQUo3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZUFBZTtRQUN6Qix5aEJBQXlDO0tBQzFDLENBQUM7R0FDVyxpQkFBaUIsQ0FxRDdCO1NBckRZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDcmVkZW50aWFscywgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi9sb2dpbi5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXRvdHAtYXV0aCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLWF1dGguY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRvdHBBdXRoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY3JlZGVudGlhbHM6IElDcmVkZW50aWFscztcbiAgQElucHV0KCkgdmlldzogTG9naW5WaWV3cztcbiAgQE91dHB1dCgpIG9uQ2FuY2VsID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBMT0dJTl9WSUVXUyA9IExvZ2luVmlld3M7XG4gIGxvYWRpbmcgPSBmYWxzZTtcbiAgaGFzRXJyb3IgPSBmYWxzZTtcblxuICBnZXQgaXNTZXR1cCgpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3ID09PSBMb2dpblZpZXdzLlRvdHBTZXR1cDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0OiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBJbiBjYXNlIG9mIGEgc2V0dXAgd2UgbmVlZCB0aGUgdXNlciB0byBiZSBhdXRob3JpemVkXG4gICAqIGZpcnN0LlxuICAgKi9cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudmlldyA9PT0gdGhpcy5MT0dJTl9WSUVXUy5Ub3RwU2V0dXApIHtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnN3aXRjaExvZ2luTW9kZSh0aGlzLmNyZWRlbnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBvblRvdHBTdWNjZXNzKGNvZGUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMudGZhID0gY29kZTtcbiAgICAgIGlmICh0aGlzLmlzU2V0dXApIHtcbiAgICAgICAgYXdhaXQgdGhpcy51c2VyU2VydmljZS5hY3RpdmF0ZVRvdHAoKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnN3aXRjaExvZ2luTW9kZSh0aGlzLmNyZWRlbnRpYWxzKTtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnZlcmlmeUFwcEFjY2VzcygpO1xuICAgICAgYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuYXV0aEZ1bGZpbGxlZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuYWxlcnQucmVtb3ZlTGFzdERhbmdlcigpO1xuICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEubWVzc2FnZSA9PT0gJ0FjY2VzcyBpcyBkZW5pZWQnKSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgIH1cbiAgICAgIGlmIChlLmRhdGEgJiYgZS5kYXRhLm1lc3NhZ2UgPT09ICdBdXRoZW50aWNhdGlvbiBmYWlsZWQhIDogVXNlciBhY2NvdW50IGlzIGxvY2tlZCcpIHtcbiAgICAgICAgdGhpcy5hbGVydC53YXJuaW5nKGdldHRleHQoJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZCBkdWUgdG86IHVzZXIgYWNjb3VudCBpcyBsb2NrZWQuJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19