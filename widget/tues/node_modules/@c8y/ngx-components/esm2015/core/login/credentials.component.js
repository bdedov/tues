import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { LoginService } from './login.service';
import { AlertService } from '../alert/alert.service';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { LoginViews } from './login.model';
let CredentialsComponent = class CredentialsComponent {
    constructor(loginService, alert, ui) {
        this.loginService = loginService;
        this.alert = alert;
        this.ui = ui;
        this.onChangeView = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.model = {};
        this.isLoading = false;
        this.showLoginForm = false;
        this.showBasicAuth = false;
        this.oauthOptions = {};
        this.PASSWORD_RESET_HEADER_NAME = 'passwordresettoken';
        this.NO_PHONE_HEADER_NAME = 'NoPhoneHeader';
    }
    ngOnInit() {
        const { oauthOptions, loginMode } = this.loginService;
        this.model.tenant = this.loginService.getTenant();
        this.showLoginForm =
            typeof loginMode.visibleOnLoginPage === 'undefined' || loginMode.visibleOnLoginPage;
        this.showBasicAuth = loginMode.type === 'BASIC';
        this.oauthOptions = oauthOptions;
    }
    redirectToOauth() {
        this.loginService.redirectToOauth();
    }
    /**
     * Allows to login into the application using basic auth.
     * If successful logged in the client is set in shared/cumulocity.service.ts
     */
    login() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.isLoading = true;
                const basicAuth = this.loginService.useBasicAuth(this.model);
                yield this.loginService.login(basicAuth, this.model);
            }
            catch (e) {
                if (e.res && e.res.headers && e.res.headers.get(this.PASSWORD_RESET_HEADER_NAME)) {
                    this.handlePasswordReset(e.res);
                }
                else if (e.res && e.res.status === 401 && /pin/i.test(e.data.message)) {
                    this.handleSmsChallenge(e.data.message);
                }
                else if (e.res && e.res.status === 401 && /TOTP/i.test(e.data.message)) {
                    this.handleTotpChallenge(e.data.message);
                }
                else if (e.res &&
                    e.res.headers &&
                    e.res.headers.get(this.NO_PHONE_HEADER_NAME) &&
                    !this.loginService.isSupportUser(this.model)) {
                    this.handleNoPhoneNumberProvided();
                }
                else {
                    this.loginService.reset();
                    this.alert.addServerFailure(e);
                }
            }
            finally {
                this.isLoading = false;
            }
        });
    }
    handlePasswordReset(e) {
        this.alert.removeLastDanger();
        this.model.token = e.headers.get(this.PASSWORD_RESET_HEADER_NAME);
        this.onChangeView.emit({ view: LoginViews.ChangePassword, credentials: this.model });
    }
    handleTotpChallenge(message) {
        if (/TOTP setup required/i.test(message)) {
            this.onChangeView.emit({ view: LoginViews.TotpSetup, credentials: this.model });
        }
        else {
            this.onChangeView.emit({ view: LoginViews.TotpChallenge, credentials: this.model });
        }
    }
    handleSmsChallenge(message) {
        if (/pin has already been generated/i.test(message)) {
            this.alert.warning(gettext('The verification code was already sent. For a new verification code, please click on the link above.'));
        }
        this.alert.removeLastDanger();
        this.onChangeView.emit({ view: LoginViews.SmsChallenge, credentials: this.model });
    }
    handleNoPhoneNumberProvided() {
        this.onChangeView.emit({ view: LoginViews.ProvidePhoneNumber, credentials: this.model });
        this.alert.warning(gettext('Two-factor authentication has been turned on for this account. Provide your phone number above to save it in your user profile and start receiving verification codes via SMS.'));
    }
};
CredentialsComponent.ctorParameters = () => [
    { type: LoginService },
    { type: AlertService },
    { type: AppStateService }
];
tslib_1.__decorate([
    Output()
], CredentialsComponent.prototype, "onChangeView", void 0);
CredentialsComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-credentials',
        template: "<div id=\"oauth\" *ngIf=\"oauthOptions.initRequest && oauthOptions.visibleOnLoginPage\">\n  <button\n    title=\"{{ oauthOptions.buttonName | translate }}\"\n    (click)=\"redirectToOauth()\"\n    class=\"btn btn-block btn-lg form-group\"\n  >\n    <i [c8yIcon]=\"'sign-in'\" class=\"pull-left\"></i>\n    {{ oauthOptions.buttonName | translate }}\n  </button>\n</div>\n\n<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"login()\"\n  #loginForm=\"ngForm\"\n  *ngIf=\"showLoginForm\"\n  novalidate\n>\n  <div\n    class=\"legend form-block center\"\n    *ngIf=\"!(oauthOptions.initRequest && oauthOptions.visibleOnLoginPage); else orLegend\"\n    translate\n  >\n    Login\n  </div>\n  <ng-template #orLegend>\n    <div class=\"legend form-block center\" translate>or</div>\n  </ng-template>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g.' | translate }} t12345\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"user\" translate>Username</label>\n    <input\n      [(ngModel)]=\"model.user\"\n      #user=\"ngModel\"\n      type=\"text\"\n      name=\"user\"\n      id=\"user\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. joe or joe.doe@example.com`LOCALIZE`' | translate }}\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"password\" translate>Password</label>\n    <input\n      [(ngModel)]=\"model.password\"\n      #password=\"ngModel\"\n      type=\"password\"\n      name=\"password\"\n      id=\"password\"\n      class=\"form-control\"\n      placeholder-no-required-hint\n      required\n    />\n  </c8y-form-group>\n  <div class=\"form-group\" *ngIf=\"showBasicAuth\">\n    <label title=\"{{ 'Remember me' | translate }}\" class=\"c8y-checkbox\">\n      <input type=\"checkbox\" name=\"remember\" [(ngModel)]=\"loginService.rememberMe\" />\n      <span></span>\n      <span>{{ 'Remember me' | translate }}</span>\n    </label>\n  </div>\n  <button\n    title=\"{{ 'Log in' | translate }}\"\n    [disabled]=\"!loginForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Log in' | translate }}\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <a\n      title=\"{{ 'Forgot password?' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.RecoverPassword })\"\n      >{{ 'Forgot password?' | translate }}</a\n    >\n  </div>\n  <div class=\"text-center top-m-sm\" *ngIf=\"!!(ui.state$ | async).loginExtraLink\">\n    <a\n      title=\"{{ (ui.state$ | async).loginExtraLink.label }}\"\n      [href]=\"(ui.state$ | async).loginExtraLink.url\"\n      class=\"btn btn-link btn-sm\"\n    >\n      {{ (ui.state$ | async).loginExtraLink.label }}</a\n    >\n  </div>\n</form>\n"
    })
], CredentialsComponent);
export { CredentialsComponent };
//# sourceMappingURL=data:application/json;base64,