import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { AppStateService } from '../common/ui-state.service';
import { GainsightService } from './gainsight.service';
import { ProductExperienceDirective } from './product-experience.directive';
/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
let ProductExperienceModule = class ProductExperienceModule {
    constructor(appState, gainsightService, cookieBannerService) {
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(([currentTenant, isCookieBannerShowed]) => {
            if (isCookieBannerShowed) {
                return;
            }
            const { customProperties, name } = currentTenant;
            if (this.gainsightService.shouldLoadGainsightTag(customProperties)) {
                this.gainsightService.loadTag(name);
            }
        });
    }
};
ProductExperienceModule.ctorParameters = () => [
    { type: AppStateService },
    { type: GainsightService },
    { type: CookieBannerService }
];
ProductExperienceModule = tslib_1.__decorate([
    NgModule({
        declarations: [ProductExperienceDirective],
        exports: [ProductExperienceDirective],
        providers: [GainsightService]
    })
], ProductExperienceModule);
export { ProductExperienceModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3Byb2R1Y3QtZXhwZXJpZW5jZS9wcm9kdWN0LWV4cGVyaWVuY2UubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RTs7Ozs7R0FLRztBQU1ILElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBQ2xDLFlBQ1UsUUFBeUIsRUFDekIsZ0JBQWtDLEVBQ2xDLG1CQUF3QztRQUZ4QyxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFFaEQsYUFBYSxDQUFDO1lBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBaUIsT0FBTyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQjtTQUMvQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxFQUFFO1lBQ3JELElBQUksb0JBQW9CLEVBQUU7Z0JBQ3hCLE9BQU87YUFDUjtZQUNELE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsR0FBRyxhQUFhLENBQUM7WUFFakQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtnQkFDbEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNyQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O1lBbEJxQixlQUFlO1lBQ1AsZ0JBQWdCO1lBQ2IsbUJBQW1COztBQUp2Qyx1QkFBdUI7SUFMbkMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7UUFDMUMsT0FBTyxFQUFFLENBQUMsMEJBQTBCLENBQUM7UUFDckMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7S0FDOUIsQ0FBQztHQUNXLHVCQUF1QixDQW9CbkM7U0FwQlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDdXJyZW50VGVuYW50IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29va2llQmFubmVyU2VydmljZSB9IGZyb20gJy4uL2Jvb3RzdHJhcC9jb29raWUtYmFubmVyL2Nvb2tpZS1iYW5uZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBHYWluc2lnaHRTZXJ2aWNlIH0gZnJvbSAnLi9nYWluc2lnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9kdWN0RXhwZXJpZW5jZURpcmVjdGl2ZSB9IGZyb20gJy4vcHJvZHVjdC1leHBlcmllbmNlLmRpcmVjdGl2ZSc7XG4vKipcbiAqIFRoaXMgbW9kdWxlIGVuYWJsZXMgYW4gdGVuYW50IHRvIGFjdGl2YXRlIHRoZSBwcm9kdWN0IGV4cGVyaWVuY2VcbiAqIHNvZnR3YXJlIFtHYWluc2lnaHRdKGh0dHBzOi8vd3d3LmdhaW5zaWdodC5jb20vcHJvZHVjdC1leHBlcmllbmNlLykgdG8gaGVscFxuICogYW5kIHRyYWNrIHVzZXIgYWN0aW9ucy4gR2FpbnNpZ2h0IGlzIG9ubHkgYWN0aXZhdGVkLCBpZiB0aGUgdGVuYW50IGN1c3RvbVxuICogcHJvcGVydHkgYGdhaW5zaWdodEVuYWJsZWRgIGlzIHNldCB0byB0cnVlLlxuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtQcm9kdWN0RXhwZXJpZW5jZURpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtQcm9kdWN0RXhwZXJpZW5jZURpcmVjdGl2ZV0sXG4gIHByb3ZpZGVyczogW0dhaW5zaWdodFNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RFeHBlcmllbmNlTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZ2FpbnNpZ2h0U2VydmljZTogR2FpbnNpZ2h0U2VydmljZSxcbiAgICBwcml2YXRlIGNvb2tpZUJhbm5lclNlcnZpY2U6IENvb2tpZUJhbm5lclNlcnZpY2VcbiAgKSB7XG4gICAgY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLmFwcFN0YXRlLmN1cnJlbnRUZW5hbnQucGlwZShmaWx0ZXI8SUN1cnJlbnRUZW5hbnQ+KEJvb2xlYW4pKSxcbiAgICAgIHRoaXMuY29va2llQmFubmVyU2VydmljZS5pc0Nvb2tpZUJhbm5lclNob3dlZCRcbiAgICBdKS5zdWJzY3JpYmUoKFtjdXJyZW50VGVuYW50LCBpc0Nvb2tpZUJhbm5lclNob3dlZF0pID0+IHtcbiAgICAgIGlmIChpc0Nvb2tpZUJhbm5lclNob3dlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IGN1c3RvbVByb3BlcnRpZXMsIG5hbWUgfSA9IGN1cnJlbnRUZW5hbnQ7XG5cbiAgICAgIGlmICh0aGlzLmdhaW5zaWdodFNlcnZpY2Uuc2hvdWxkTG9hZEdhaW5zaWdodFRhZyhjdXN0b21Qcm9wZXJ0aWVzKSkge1xuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UubG9hZFRhZyhuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19