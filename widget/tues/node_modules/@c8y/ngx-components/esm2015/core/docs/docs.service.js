import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { OptionsService } from '../common/options.service';
import { documentationItems } from './defaults.items';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { HOOK_DOCS } from './docs.models';
import { fromTrigger } from '../common/extension-hooks';
import { Router } from '@angular/router';
import { shareReplay, startWith, first, filter } from 'rxjs/operators';
import { isUndefined } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "./docs.models";
import * as i4 from "@angular/router";
let DocsService = class DocsService {
    constructor(options, app, factories = [], router) {
        this.options = options;
        this.app = app;
        if (!factories) {
            factories = [];
        }
        factories.push(this);
        const refreshTrigger = this.app.map(({ supportUrl }) => supportUrl);
        this.items$ = fromTrigger(router, refreshTrigger, factories).pipe(startWith([]), shareReplay(1));
    }
    getBaseUrl() {
        return this.options.get('docsBaseUrl', 'https://www.cumulocity.com/guides');
    }
    get templateStr() {
        return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
    }
    getUserGuideLink(link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    }
    list() {
        return this.items$
            .pipe(filter(i => !!i.length), first())
            .toPromise();
    }
    refresh() {
        // no op
    }
    get() {
        // use the function as a factory
        const { links, noDefault, excludeDefault = [] } = this.options.get('docs', {});
        const { supportUrl } = this.app.state;
        let staticLinks = noDefault
            ? []
            : documentationItems
                .map((item) => (Object.assign({}, item, { url: this.getUserGuideLink(item.url) })))
                .filter(({ url }) => !excludeDefault.some(e => new RegExp(e).test(url)));
        if (links) {
            // backwards compatibility
            links.map((lnk) => {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    }
    getLink(templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    }
    prefixWithSlash(partialLink = '') {
        const shouldPrefix = !(partialLink && /^\//.test(partialLink));
        const prefix = shouldPrefix ? '/' : '';
        return `${prefix}${partialLink}`;
    }
};
DocsService.ctorParameters = () => [
    { type: OptionsService },
    { type: AppStateService },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DOCS,] }] },
    { type: Router }
];
DocsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i3.HOOK_DOCS, 8), i0.ɵɵinject(i4.Router)); }, token: DocsService, providedIn: "root" });
DocsService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(HOOK_DOCS))
], DocsService);
export { DocsService };
//# sourceMappingURL=data:application/json;base64,