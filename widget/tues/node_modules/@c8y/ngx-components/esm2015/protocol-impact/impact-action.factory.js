var ImpactActionFactory_1;
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';
import { RefreshActionComponent } from './refresh-action.component';
let ImpactActionFactory = ImpactActionFactory_1 = class ImpactActionFactory {
    constructor(applicationService) {
        this.applicationService = applicationService;
    }
    get(activeRoute) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const data = !activeRoute.parent || activeRoute.snapshot.data.context
                ? activeRoute.snapshot.data
                : activeRoute.parent.snapshot.data;
            const { contextData } = data;
            const isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
            const showRefreshActionButton = isDeviceInfoTab &&
                contextData &&
                contextData.c8y_ImpactResourceInfo &&
                /* call application service only for relevant devices to reduce number of service calls! */
                (yield this.applicationService.isAvailable(ImpactActionFactory_1.applicationName)).data;
            if (showRefreshActionButton) {
                actions.push({
                    priority: 500,
                    placement: 'right',
                    template: RefreshActionComponent
                });
            }
            return actions;
        });
    }
};
ImpactActionFactory.applicationName = 'impact';
ImpactActionFactory.ctorParameters = () => [
    { type: ApplicationService }
];
ImpactActionFactory = ImpactActionFactory_1 = tslib_1.__decorate([
    Injectable()
], ImpactActionFactory);
export { ImpactActionFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWFjdGlvbi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1pbXBhY3QvIiwic291cmNlcyI6WyJpbXBhY3QtYWN0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3BFLElBQWEsbUJBQW1CLDJCQUFoQyxNQUFhLG1CQUFtQjtJQUc5QixZQUFvQixrQkFBc0M7UUFBdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUFHLENBQUM7SUFFeEQsR0FBRyxDQUFDLFdBQTRCOztZQUNwQyxNQUFNLE9BQU8sR0FBb0IsRUFBRSxDQUFDO1lBRXBDLE1BQU0sSUFBSSxHQUNSLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPO2dCQUN0RCxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUMzQixDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFFN0IsTUFBTSxlQUFlLEdBQVksR0FBRyxDQUFDLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxLQUFLLGFBQWEsQ0FBQztZQUU1RixNQUFNLHVCQUF1QixHQUMzQixlQUFlO2dCQUNmLFdBQVc7Z0JBQ1gsV0FBVyxDQUFDLHNCQUFzQjtnQkFDbEMsMkZBQTJGO2dCQUMzRixDQUFDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxxQkFBbUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUV4RixJQUFJLHVCQUF1QixFQUFFO2dCQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNYLFFBQVEsRUFBRSxHQUFHO29CQUNiLFNBQVMsRUFBRSxPQUFPO29CQUNsQixRQUFRLEVBQUUsc0JBQXNCO2lCQUNoQixDQUFDLENBQUM7YUFDckI7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO0tBQUE7Q0FDRixDQUFBO0FBaEN5QixtQ0FBZSxHQUFHLFFBQVEsQ0FBQzs7WUFFWCxrQkFBa0I7O0FBSC9DLG1CQUFtQjtJQUQvQixVQUFVLEVBQUU7R0FDQSxtQkFBbUIsQ0FpQy9CO1NBakNZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFjdGlvbkJhckZhY3RvcnksIEFjdGlvbkJhckl0ZW0gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9yZWZyZXNoLWFjdGlvbi5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1wYWN0QWN0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhcHBsaWNhdGlvbk5hbWUgPSAnaW1wYWN0JztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIGdldChhY3RpdmVSb3V0ZT86IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgY29uc3QgYWN0aW9uczogQWN0aW9uQmFySXRlbVtdID0gW107XG5cbiAgICBjb25zdCBkYXRhID1cbiAgICAgICFhY3RpdmVSb3V0ZS5wYXJlbnQgfHwgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5jb250ZXh0XG4gICAgICAgID8gYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YVxuICAgICAgICA6IGFjdGl2ZVJvdXRlLnBhcmVudC5zbmFwc2hvdC5kYXRhO1xuICAgIGNvbnN0IHsgY29udGV4dERhdGEgfSA9IGRhdGE7XG5cbiAgICBjb25zdCBpc0RldmljZUluZm9UYWI6IGJvb2xlYW4gPSBnZXQoYWN0aXZlUm91dGUsICdzbmFwc2hvdC51cmxbMF0ucGF0aCcpID09PSAnZGV2aWNlLWluZm8nO1xuXG4gICAgY29uc3Qgc2hvd1JlZnJlc2hBY3Rpb25CdXR0b246IGJvb2xlYW4gPVxuICAgICAgaXNEZXZpY2VJbmZvVGFiICYmXG4gICAgICBjb250ZXh0RGF0YSAmJlxuICAgICAgY29udGV4dERhdGEuYzh5X0ltcGFjdFJlc291cmNlSW5mbyAmJlxuICAgICAgLyogY2FsbCBhcHBsaWNhdGlvbiBzZXJ2aWNlIG9ubHkgZm9yIHJlbGV2YW50IGRldmljZXMgdG8gcmVkdWNlIG51bWJlciBvZiBzZXJ2aWNlIGNhbGxzISAqL1xuICAgICAgKGF3YWl0IHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlLmlzQXZhaWxhYmxlKEltcGFjdEFjdGlvbkZhY3RvcnkuYXBwbGljYXRpb25OYW1lKSkuZGF0YTtcblxuICAgIGlmIChzaG93UmVmcmVzaEFjdGlvbkJ1dHRvbikge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDUwMCxcbiAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgICAgICB0ZW1wbGF0ZTogUmVmcmVzaEFjdGlvbkNvbXBvbmVudFxuICAgICAgfSBhcyBBY3Rpb25CYXJJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxufVxuIl19