{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-wrapper.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operation-modals.service.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/modals/bulk-operations-reschedule-modal.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-list-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details-tabs.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operation-details.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.model.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operations-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/single-operation-item.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/type-list/bulk-operation-type-list.component.ts","ng://@c8y/ngx-components/operations/bulk-operations-list/bulk-operations-list.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","BulkOperationWrapperComponent","bulkOperationDetailsService","modalRef","BulkOperationDetailsService","BsModalRef","tslib_1.__decorate","Input","Component","selector","template","bulkOperationsService","modalService","openDetails","bulkOperationId","getBulkOperationById","bulkOperation","_a","data","initialState","show","class","BulkOperationsService","BsModalService","Injectable","BulkOperationsModalComponent","bsModalRef","resolver","showComponent","cancel","hide","createComponent","item","component","factory","resolveComponentFactory","container","ComponentFactoryResolver","ViewChild","static","read","ViewContainerRef","BulkOperationModalsService","bsModalService","showNewBulkOperationModal","backdrop","hideNewBulkOperationModal","BulkOperationsRescheduleModalComponent","alert","closeSubject","Subject","ngOnInit","modalTitle","getTitle","onDateAndDelaySelect","$event","dateAndDelay","isRetryOperation","gettext","onCancel","onSave","startDate","scheduledDate","toISOString","creationRamp","delayInSeconds","createBulkOperation","newBulkOperation","success","addServerFailure","er_1","updateBulkOperation","er_2","AlertService","BULK_OPERATION_STATUS_LABELS","SCHEDULED","EXECUTING","CANCELED","FAILED","SUCCESSFUL","BULK_OPERATION_STATUS_OPTIONS","generalStatus","OperationBulkGeneralStatus","iconClass","EXECUTING_WITH_ERROR","BulkOperationListItemComponent","modal","detailsCollapsed","readOnly","showFailedOperation","EventEmitter","reload","refreshLoading","bulkOperationGeneralStatus","bulkOperationStatusOptions","finishDatePopoverText","progressBarClass","progressBarStatus","getIconClass","finishDate","calculateFinishDateMs","setProgressBar","ngOnChanges","changes","firstChange","_this","find","statusOption","includes","Date","getTime","progress","all","progressBarProgressFn","successful","failed","staticContentOfClass","progressBarState","progressBarColor","editSchedule","modalOptions","cloneDeep","cancelBulkOperation","confirm","Status","DANGER","deleteBulkOperation","id","emit","retryFailedOperation","clonedBulk","groupId","failedParentId","content","subscribe","setToSuccessful","openFailedOperation","isStatusScheduled","isStatusExecutingOrExecutingWithError","allOperationsCreated","executing","pending","isStatusCanceled","isStatusFailed","ModalService","Output","BulkOperationsListComponent","realtime","bulkOperationModalsService","selectedTypeFilters","getTypeFilters","statusFilter$","BehaviorSubject","typeFilter$","timeFilter$","reload$","bulkOperations$","combineLatest","pipe","tap","switchMap","_b","statusFilters","timeFilters","filter","withLatestFrom","map","typeFilter","filterPipe","filterByType","shareReplay","allFilterFragments","flattenFilterFragments","bulkOperations","flattenedFragments","every","fragment","keys","operationPrototype","some","resetFilter","datePicker","clearFilter","statusFilter","statusOptions","option","selected","isFilterApplied","getValue","timeFilter","status","flatten","time","dateFrom","dateTo","getBulkOperations","getBulkTypes","addBulkOperation","listItems","forEach","listItem","collapsed","element","nativeElement","scrollIntoView","behavior","block","compareOperations","operationA","operationB","filters","reduce","flattened","current","concat","fragments","OperationBulkRealtimeService","ViewChildren","DatePickerComponent","providers","BulkOperationDetailsTabsComponent","onRetryFailedOperations","tabs","detailsTemplate","path","icon","auditTemplate","BulkOperationDetailsComponent","allFilterIsSelected","scrollToRetriedFromOperation","failedOperationId","SINGLE_OP_STATUS_NAMES","PENDING","ALL","SINGLE_OP_STATUS_PROPERTIES","SingleOperationsListComponent","singleOperationStatusProperties","singleOperationStatusNames","ngAfterViewInit","filterOperationsByType","getFilterTypeOfSingleOperations","preset","setTimeout","bind","getOperationsByStatus","getSingleOperationsByStatus","singleOperations","retryBulkOperation","StatusFilterComponent","SingleOperationItemComponent","alertService","device","showIfTextTruncated","singleOperationsStatusProperties","getDeviceMO","operation","deviceId","isTextTruncated","retrySingleOperation","singleOperation","operationToCreate","omit","createSingleOperation","operationProperties","toUpperCase","getManagedObject","inventoryMO","failureReason","el","failureReasonRef","offsetWidth","scrollWidth","BulkOperationTypeListComponent","router","onCustomType","bulkList","handleClick","navigateByUrl","Router","bulkOperationListRoutes","BulkOperationsListModule","NgModule","imports","CoreModule","PopoverModule","TooltipModule","StatusFilterModule","OperationSummaryModule","BulkOperationSchedulerModule","RouterModule","forChild","declarations","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, Input } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\n\n@Component({\n  selector: 'c8y-bulk-operations-wrapper',\n  templateUrl: './bulk-operation-wrapper.component.html'\n})\nexport class BulkOperationWrapperComponent {\n  @Input() bulkOperation: Partial<IOperationBulk>;\n\n  constructor(\n    public bulkOperationDetailsService: BulkOperationDetailsService,\n    public modalRef: BsModalRef\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\n\n@Injectable()\nexport class BulkOperationDetailsService {\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modalService: BsModalService\n  ) {}\n\n  async openDetails(bulkOperationId) {\n    const bulkOperation: IOperationBulk = (await this.bulkOperationsService.getBulkOperationById(\n      bulkOperationId\n    )).data;\n    const initialState = { bulkOperation };\n    this.modalService.show(BulkOperationWrapperComponent, {\n      initialState,\n      class: 'modal-lg'\n    });\n  }\n}\n","import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-modal',\n  templateUrl: 'bulk-operations-modal.component.html'\n})\nexport class BulkOperationsModalComponent {\n  @ViewChild('container', { static: false, read: ViewContainerRef }) container;\n  showComponent: boolean = false;\n  constructor(private bsModalRef: BsModalRef, private resolver: ComponentFactoryResolver) {}\n\n  cancel() {\n    this.bsModalRef.hide();\n  }\n\n  createComponent(item: OperationType) {\n    if (item && item.component) {\n      this.showComponent = true;\n      const factory = this.resolver.resolveComponentFactory(item.component);\n      this.container.createComponent(factory);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BulkOperationsModalComponent } from './bulk-operations-modal.component';\n\n@Injectable()\nexport class BulkOperationModalsService {\n  private bsModalRef: BsModalRef;\n\n  constructor(private bsModalService: BsModalService) {}\n\n  showNewBulkOperationModal() {\n    this.bsModalRef = this.bsModalService.show(BulkOperationsModalComponent, {\n      backdrop: 'static',\n      class: 'modal-sm'\n    });\n  }\n\n  hideNewBulkOperationModal() {\n    if (this.bsModalRef) {\n      this.bsModalRef.hide();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { OperationSchedule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-bulk-operations-reschedule-modal',\n  templateUrl: 'bulk-operations-reschedule-modal.component.html'\n})\nexport class BulkOperationsRescheduleModalComponent implements OnInit {\n  closeSubject: Subject<IOperationBulk> = new Subject();\n  dateAndDelay: OperationSchedule;\n  bulkOperation: Partial<IOperationBulk>;\n  isRetryOperation: boolean;\n  modalTitle: string;\n\n  constructor(\n    public bsModalRef: BsModalRef,\n    private bulkOperationsService: BulkOperationsService,\n    private alert: AlertService\n  ) {}\n\n  ngOnInit() {\n    this.modalTitle = this.getTitle();\n  }\n\n  onDateAndDelaySelect($event) {\n    this.dateAndDelay = $event;\n  }\n\n  getTitle() {\n    return this.isRetryOperation ? gettext('Retry operation') : gettext('Edit schedule');\n  }\n\n  onCancel() {\n    this.bsModalRef.hide();\n  }\n\n  async onSave() {\n    let newBulkOperation;\n    this.bulkOperation.startDate = this.dateAndDelay.scheduledDate.toISOString();\n    this.bulkOperation.creationRamp = this.dateAndDelay.delayInSeconds;\n\n    if (this.isRetryOperation) {\n      try {\n        newBulkOperation = await this.bulkOperationsService.createBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled for a retry.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    } else {\n      try {\n        newBulkOperation = await this.bulkOperationsService.updateBulkOperation(this.bulkOperation);\n        this.alert.success(gettext('Successfully rescheduled.'));\n      } catch (er) {\n        this.alert.addServerFailure(er);\n      }\n    }\n\n    // send back to component from which modal was called\n    this.closeSubject.next(newBulkOperation.data);\n    this.bsModalRef.hide();\n  }\n}\n","import { OperationBulkGeneralStatus } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\n\nexport const BULK_OPERATION_STATUS_LABELS = {\n  SCHEDULED: gettext('Scheduled'),\n  EXECUTING: gettext('Executing'),\n  CANCELED: gettext('Canceled'),\n  FAILED: gettext('Completed with failures'),\n  SUCCESSFUL: gettext('Completed successfully')\n};\n\nexport const BULK_OPERATION_STATUS_OPTIONS: IStatusOption[] = [\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SCHEDULED,\n    generalStatus: [OperationBulkGeneralStatus.SCHEDULED],\n    iconClass: 'fa fa-calendar text-info'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.EXECUTING,\n    generalStatus: [\n      OperationBulkGeneralStatus.EXECUTING,\n      OperationBulkGeneralStatus.EXECUTING_WITH_ERROR\n    ],\n    iconClass: 'fa fa-refresh text-primary'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.CANCELED,\n    generalStatus: [OperationBulkGeneralStatus.CANCELED],\n    iconClass: 'fa fa-ban text-muted'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.FAILED,\n    generalStatus: [OperationBulkGeneralStatus.FAILED],\n    iconClass: 'fa fa-exclamation-triangle text-danger'\n  },\n  {\n    label: BULK_OPERATION_STATUS_LABELS.SUCCESSFUL,\n    generalStatus: [OperationBulkGeneralStatus.SUCCESSFUL],\n    iconClass: 'fa fa-check text-success'\n  }\n];\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperationBulk, OperationBulkGeneralStatus } from '@c8y/client';\nimport {\n  AlertService,\n  gettext,\n  ListItemComponent,\n  ModalService,\n  Status\n} from '@c8y/ngx-components';\nimport { assign, cloneDeep } from 'lodash-es';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n\n@Component({\n  selector: 'c8y-bulk-operation-list-item',\n  templateUrl: './bulk-operation-list-item.component.html'\n})\nexport class BulkOperationListItemComponent implements OnInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  detailsCollapsed: boolean = true;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation = new EventEmitter();\n  @Output() reload: EventEmitter<any> = new EventEmitter();\n  @ViewChild('listItem', { static: true }) listItem: ListItemComponent;\n  iconClass: string;\n  finishDate: number;\n  refreshLoading = false;\n  bulkOperationGeneralStatus = OperationBulkGeneralStatus;\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n  bsModalRef: BsModalRef;\n  finishDatePopoverText: string = gettext(\n    'Approximate date, estimated based on the bulk operation settings.'\n  );\n  progressBarClass: string = 'progress';\n  progressBarColor: string;\n  progressBarStatus: number = 0;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private modal: ModalService,\n    private alert: AlertService,\n    private bsModalService: BsModalService\n  ) {}\n\n  ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.finishDate = this.calculateFinishDateMs();\n    this.setProgressBar();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.iconClass = this.getIconClass();\n      this.setProgressBar();\n    }\n  }\n\n  getIconClass() {\n    return this.bulkOperationStatusOptions.find(statusOption =>\n      statusOption.generalStatus.includes(this.bulkOperation.generalStatus)\n    ).iconClass;\n  }\n\n  calculateFinishDateMs(): number {\n    const startDateMs: number = new Date(this.bulkOperation.startDate).getTime();\n    const creationRampMs: number = this.bulkOperation.creationRamp * 1000;\n\n    return startDateMs + creationRampMs * this.bulkOperation.progress.all;\n  }\n\n  progressBarProgressFn() {\n    return (\n      ((this.bulkOperation.progress.successful + this.bulkOperation.progress.failed) /\n        this.bulkOperation.progress.all) *\n      100\n    );\n  }\n\n  setProgressBar() {\n    const staticContentOfClass = 'progress-bar progress-striped active progress-bar';\n\n    const progressBarState = {\n      EXECUTING: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-primary`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      EXECUTING_WITH_ERROR: {\n        progressBarClass: 'progress progress-striped active',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: this.progressBarProgressFn()\n      },\n      FAILED: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-danger`,\n        progressBarStatus: 100\n      },\n      SUCCESSFUL: {\n        progressBarClass: 'progress',\n        progressBarColor: `${staticContentOfClass}-success`,\n        progressBarStatus: 100\n      }\n    };\n\n    assign(this, progressBarState[this.bulkOperation.generalStatus]);\n  }\n\n  editSchedule() {\n    const rescheduledOperation = cloneDeep(this.bulkOperation);\n    const initialState = {\n      bulkOperation: rescheduledOperation\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n  }\n\n  async cancelBulkOperation() {\n    try {\n      await this.modal.confirm(\n        gettext('Cancel bulk operation'),\n        gettext('You are about to cancel the bulk operation. Do you want to proceed?'),\n        Status.DANGER\n      );\n      await this.bulkOperationsService.deleteBulkOperation(this.bulkOperation.id);\n      this.reload.emit();\n      this.alert.success(gettext('Operation canceled.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  retryFailedOperation() {\n    const clonedBulk = cloneDeep(this.bulkOperation);\n\n    // change the id to failedparentId similar to the logic in deviceBulkControl.service.js\n    delete clonedBulk.groupId;\n    clonedBulk.failedParentId = this.bulkOperation.id;\n\n    // show reschdedule modal:\n    const initialState = {\n      bulkOperation: clonedBulk,\n      isRetryOperation: true\n    };\n    const modalOptions = { initialState, class: 'modal-sm', backdrop: 'static' } as ModalOptions;\n    this.bsModalRef = this.bsModalService.show(\n      BulkOperationsRescheduleModalComponent,\n      modalOptions\n    );\n    this.bsModalRef.content.closeSubject.subscribe(() => {\n      this.reload.emit();\n    });\n  }\n\n  async setToSuccessful() {\n    try {\n      await this.modal.confirm(\n        gettext('Set manually bulk operation to SUCCESSFUL'),\n        gettext(\n          'You are about to change the bulk operation status to SUCCESSFUL. Do you want to proceed?'\n        ),\n        Status.DANGER\n      );\n\n      await this.bulkOperationsService.updateBulkOperation({\n        id: this.bulkOperation.id,\n        generalStatus: OperationBulkGeneralStatus.SUCCESSFUL\n      });\n      this.reload.emit();\n      this.alert.success(gettext('Operation status changed to SUCCESSFUL.'));\n    } catch (er) {\n      this.alert.addServerFailure(er);\n    }\n  }\n\n  openFailedOperation(failedParentId) {\n    this.showFailedOperation.emit(failedParentId);\n  }\n\n  isStatusScheduled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.SCHEDULED;\n  }\n\n  isStatusExecutingOrExecutingWithError() {\n    return (\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING ||\n      this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.EXECUTING_WITH_ERROR\n    );\n  }\n\n  allOperationsCreated() {\n    return (\n      this.bulkOperation.progress.all ===\n      this.bulkOperation.progress.executing +\n        this.bulkOperation.progress.failed +\n        this.bulkOperation.progress.pending +\n        this.bulkOperation.progress.successful\n    );\n  }\n\n  isStatusCanceled() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.CANCELED;\n  }\n\n  isStatusFailed() {\n    return this.bulkOperation.generalStatus === this.bulkOperationGeneralStatus.FAILED;\n  }\n}\n","import { Component, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { IOperationBulk, IResultList } from '@c8y/client';\nimport { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';\nimport { flatten } from 'lodash-es';\nimport { BehaviorSubject, Observable, combineLatest, pipe } from 'rxjs';\nimport { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';\n@Component({\n  selector: 'c8y-bulk-operations',\n  templateUrl: './bulk-operations-list.component.html',\n  providers: [OperationBulkRealtimeService]\n})\nexport class BulkOperationsListComponent {\n  selectedTypeFilters = this.getTypeFilters();\n  bulkOperationStatusOptions: IStatusOption[] = BULK_OPERATION_STATUS_OPTIONS;\n\n  filterPipe;\n  refreshLoading: boolean = false;\n  statusFilter$: BehaviorSubject<IStatusOption[]> = new BehaviorSubject(null);\n  typeFilter$: BehaviorSubject<OperationType[]> = new BehaviorSubject(null);\n  timeFilter$: BehaviorSubject<any> = new BehaviorSubject(null);\n  reload$: BehaviorSubject<void> = new BehaviorSubject(null);\n  @ViewChildren(BulkOperationListItemComponent) listItems: QueryList<\n    BulkOperationListItemComponent\n  >;\n  @ViewChild('statusFilter', { static: true }) statusFilter: StatusFilterComponent;\n  @ViewChild(DatePickerComponent, { static: true }) datePicker: DatePickerComponent;\n\n  bulkOperations$: Observable<IResultList<IOperationBulk>> = combineLatest(\n    this.statusFilter$,\n    this.timeFilter$,\n    this.typeFilter$,\n    this.reload$\n  ).pipe(\n    tap(() => {\n      this.refreshLoading = true;\n    }),\n    switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)),\n    withLatestFrom(this.typeFilter$),\n    map(([result, typeFilter]: [IResultList<IOperationBulk>, OperationType[]]) => {\n      this.filterPipe = pipe(map((data: []) => this.filterByType(data, typeFilter)));\n      return { ...result, data: this.filterByType(result.data, typeFilter) };\n    }),\n    tap(() => {\n      this.refreshLoading = false;\n    }),\n    shareReplay(1)\n  );\n\n  private allFilterFragments: string[];\n\n  constructor(\n    public realtime: OperationBulkRealtimeService,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {\n    this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());\n  }\n\n  filterByType(bulkOperations: IOperationBulk[], typeFilter) {\n    const flattenedFragments: string[] = this.flattenFilterFragments(typeFilter);\n    if (\n      // return data unfiltered if no filters selected...\n      !flattenedFragments.length ||\n      // ...or when all filters are selected\n      this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))\n    ) {\n      return bulkOperations;\n    }\n\n    const filteredData = bulkOperations.filter(item => {\n      return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));\n    });\n\n    return filteredData;\n  }\n\n  resetFilter() {\n    this.statusFilter$.next(null);\n    this.timeFilter$.next(null);\n    this.typeFilter$.next(null);\n\n    this.datePicker.clearFilter();\n    this.selectedTypeFilters = this.getTypeFilters();\n    this.statusFilter.statusOptions.map(option => {\n      option.selected = false;\n      return option;\n    });\n  }\n\n  isFilterApplied() {\n    return (\n      this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue()\n    );\n  }\n\n  filter(statusFilters, timeFilter) {\n    const status =\n      statusFilters && statusFilters.length > 0\n        ? {\n            generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))\n          }\n        : {};\n\n    const time = timeFilter\n      ? {\n          ...(timeFilter.dateFrom && {\n            dateFrom: timeFilter.dateFrom.toISOString()\n          }),\n          ...(timeFilter.dateTo && {\n            dateTo: timeFilter.dateTo.toISOString()\n          })\n        }\n      : {};\n    return this.getBulkOperations({ ...status, ...time });\n  }\n\n  getBulkOperations(filter?) {\n    return this.bulkOperationsService.getBulkOperations(filter);\n  }\n\n  getTypeFilters() {\n    return this.bulkOperationsService.getBulkTypes();\n  }\n\n  addBulkOperation() {\n    this.bulkOperationModalsService.showNewBulkOperationModal();\n  }\n\n  openFailedOperation(failedParentId) {\n    this.listItems.forEach(item => {\n      if (item.bulkOperation.id === failedParentId) {\n        item.listItem.collapsed = false;\n        item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    });\n  }\n\n  compareOperations(operationA: IOperationBulk, operationB: IOperationBulk): number {\n    return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();\n  }\n\n  private flattenFilterFragments(filters: OperationType[]): string[] {\n    return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { IOperationBulk } from '@c8y/client';\nimport { gettext, Tab } from '@c8y/ngx-components';\n\n@Component({\n  selector: 'c8y-bulk-operation-details-tabs',\n  templateUrl: './bulk-operation-details-tabs.component.html'\n})\nexport class BulkOperationDetailsTabsComponent implements OnInit {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('details', { static: true }) detailsTemplate: any;\n  @ViewChild('audit', { static: true }) auditTemplate: any;\n\n  tabs: Tab[] = [];\n  template: ViewContainerRef;\n\n  ngOnInit(): void {\n    this.template = this.detailsTemplate;\n\n    this.tabs = [\n      {\n        label: gettext('Details'),\n        path: null,\n        icon: 'asterisk',\n        template: this.detailsTemplate\n      },\n      {\n        label: gettext('History of changes'),\n        path: null,\n        icon: 'archive',\n        template: this.auditTemplate\n      }\n    ];\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IManagedObject, IOperationBulk } from '@c8y/client';\n\n@Component({\n  selector: 'c8y-bulk-operation-details',\n  templateUrl: './bulk-operation-details.component.html'\n})\nexport class BulkOperationDetailsComponent {\n  allFilterIsSelected: boolean = false;\n  collapsed: boolean;\n  device: IManagedObject;\n\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() showFailedOperation: EventEmitter<number> = new EventEmitter();\n\n  scrollToRetriedFromOperation(failedOperationId) {\n    this.showFailedOperation.emit(failedOperationId);\n  }\n}\n","import { gettext } from '@c8y/ngx-components';\n\nexport const SINGLE_OP_STATUS_NAMES = {\n  PENDING: gettext('Pending'),\n  EXECUTING: gettext('Executing'),\n  FAILED: gettext('Failed'),\n  SUCCESSFUL: gettext('Successful'),\n  ALL: gettext('All')\n};\n\nexport const SINGLE_OP_STATUS_PROPERTIES = [\n  {\n    label: SINGLE_OP_STATUS_NAMES.PENDING,\n    iconClass: 'fa fw fa-clock-o text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.EXECUTING,\n    iconClass: 'fa fw fa-refresh text-info',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.SUCCESSFUL,\n    iconClass: 'fa fw fa-check-circle text-success',\n    selected: false\n  },\n  {\n    label: SINGLE_OP_STATUS_NAMES.FAILED,\n    iconClass: 'fa fw fa-exclamation-circle text-danger',\n    selected: false\n  }\n];\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { IOperation, IOperationBulk, IResultList } from '@c8y/client';\nimport { StatusFilterComponent, IStatusOption } from '@c8y/ngx-components/operations/status-filter';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operations-list',\n  templateUrl: './single-operations-list.component.html'\n})\nexport class SingleOperationsListComponent implements AfterViewInit, OnChanges {\n  @Input()\n  bulkOperation: Partial<IOperationBulk>;\n  @Input()\n  readOnly: boolean = false;\n  @Output() onRetryFailedOperations: EventEmitter<Partial<IOperationBulk>> = new EventEmitter();\n\n  @ViewChild(StatusFilterComponent, { static: false })\n  statusFilter: StatusFilterComponent;\n\n  singleOperationStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperations: IResultList<IOperation>;\n\n  constructor(private bulkOperationsService: BulkOperationsService) {}\n\n  async ngAfterViewInit() {\n    if (this.statusFilter) {\n      this.filterOperationsByType();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.bulkOperation && !changes.bulkOperation.firstChange) {\n      this.filterOperationsByType();\n    }\n  }\n\n  filterOperationsByType() {\n    if (this.statusFilter) {\n      const typeFilter = this.getFilterTypeOfSingleOperations();\n\n      this.statusFilter.preset(\n        typeFilter === this.singleOperationStatusNames.ALL\n          ? []\n          : [{ label: typeFilter } as IStatusOption]\n      );\n    } else {\n      setTimeout(this.filterOperationsByType.bind(this));\n    }\n  }\n\n  getFilterTypeOfSingleOperations() {\n    const progress = this.bulkOperation.progress;\n\n    if (progress.failed > 0) {\n      return this.singleOperationStatusNames.FAILED;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.pending === 0) {\n      return this.singleOperationStatusNames.EXECUTING;\n    } else if (progress.failed === 0 && progress.successful === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.PENDING;\n    } else if (progress.failed === 0 && progress.pending === 0 && progress.executing === 0) {\n      return this.singleOperationStatusNames.SUCCESSFUL;\n    }\n\n    return this.singleOperationStatusNames.ALL;\n  }\n\n  async getOperationsByStatus(filter: IStatusOption[]) {\n    this.singleOperations = await this.bulkOperationsService.getSingleOperationsByStatus(\n      filter[0] && filter[0].label,\n      this.bulkOperation.id\n    );\n  }\n\n  retryBulkOperation() {\n    this.onRetryFailedOperations.emit(this.bulkOperation);\n  }\n}\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IOperation } from '@c8y/client';\nimport { AlertService, gettext } from '@c8y/ngx-components';\nimport {\n  BulkOperationsService,\n  C8Y_BULK_TYPE_FRAGMENTS\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { omit } from 'lodash-es';\nimport { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';\n\n@Component({\n  selector: 'c8y-single-operation-item',\n  templateUrl: './single-operation-item.component.html'\n})\nexport class SingleOperationItemComponent {\n  device = {};\n  showIfTextTruncated = false;\n  singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;\n  singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;\n  iconClass: string;\n  @Input()\n  operation: IOperation;\n  @Input()\n  readOnly: boolean = false;\n  @ViewChild('failureReason', { static: true }) failureReasonRef: ElementRef;\n\n  constructor(\n    private bulkOperationsService: BulkOperationsService,\n    private alertService: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.iconClass = this.getIconClass();\n    this.device = await this.getDeviceMO(this.operation.deviceId);\n  }\n\n  ngAfterViewInit() {\n    this.isTextTruncated();\n  }\n\n  async retrySingleOperation(singleOperation) {\n    const operationToCreate = omit(singleOperation, [\n      'id',\n      'self',\n      'status',\n      'failureReason',\n      'creationTime',\n      'delivery'\n    ]);\n\n    try {\n      await this.bulkOperationsService.createSingleOperation(operationToCreate);\n      this.alertService.success(gettext('Operation created.'));\n    } catch (er) {\n      this.alertService.addServerFailure(er);\n    }\n  }\n\n  getIconClass() {\n    return this.singleOperationsStatusProperties.find(\n      operationProperties => operationProperties.label.toUpperCase() === this.operation.status\n    ).iconClass;\n  }\n\n  private async getDeviceMO(deviceId) {\n    const inventoryMO = await this.bulkOperationsService.getManagedObject(deviceId);\n    if (inventoryMO) {\n      return inventoryMO.data;\n    }\n  }\n\n  private isTextTruncated() {\n    if (this.operation.failureReason) {\n      const el = this.failureReasonRef.nativeElement;\n      this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;\n    }\n  }\n}\n","import { Component, EventEmitter, Output, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  BulkOperationsService,\n  OperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { BulkOperationModalsService } from '../modals/bulk-operation-modals.service';\n\n@Component({\n  selector: 'c8y-bulk-operation-type-list',\n  templateUrl: './bulk-operation-type-list.component.html'\n})\nexport class BulkOperationTypeListComponent implements OnInit {\n  @Output() onCustomType: EventEmitter<OperationType> = new EventEmitter();\n  bulkList: OperationType[] = [];\n\n  constructor(\n    private router: Router,\n    private bulkOperationsService: BulkOperationsService,\n    private bulkOperationModalsService: BulkOperationModalsService\n  ) {}\n\n  ngOnInit() {\n    this.bulkList = this.bulkOperationsService.getBulkTypes();\n  }\n\n  handleClick(item: OperationType) {\n    if (item.path) {\n      this.bulkOperationModalsService.hideNewBulkOperationModal();\n      this.router.navigateByUrl(item.path);\n    } else if (item.component) {\n      this.onCustomType.emit(item);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\nimport { CoreModule, Route } from '@c8y/ngx-components';\nimport { StatusFilterModule } from '@c8y/ngx-components/operations/status-filter';\nimport { OperationSummaryModule } from '@c8y/ngx-components/operations/operation-summary';\nimport { BulkOperationSchedulerModule } from '@c8y/ngx-components/operations/bulk-operation-scheduler';\n\nimport { BulkOperationDetailsService } from './bulk-operation-details.service';\nimport { BulkOperationsListComponent } from './bulk-operations-list.component';\nimport { BulkOperationListItemComponent } from './bulk-operation-list-item.component';\nimport { BulkOperationDetailsTabsComponent } from './bulk-operation-details-tabs.component';\nimport { BulkOperationDetailsComponent } from './bulk-operation-details.component';\nimport { SingleOperationsListComponent } from './single-operations-list.component';\nimport { SingleOperationItemComponent } from './single-operation-item.component';\nimport { BulkOperationWrapperComponent } from './bulk-operation-wrapper.component';\nimport { BulkOperationTypeListComponent } from './type-list/bulk-operation-type-list.component';\nimport { BulkOperationModalsService } from './modals/bulk-operation-modals.service';\nimport { BulkOperationsModalComponent } from './modals/bulk-operations-modal.component';\nimport { BulkOperationsRescheduleModalComponent } from './modals/bulk-operations-reschedule-modal.component';\n\nexport const bulkOperationListRoutes: Route[] = [\n  {\n    path: 'devicecontrol/bulk',\n    component: BulkOperationsListComponent\n  }\n];\n\n/**\n * This module allows for displaying the list of bulk operations and their details.\n */\n@NgModule({\n  imports: [\n    CoreModule,\n    PopoverModule,\n    TooltipModule,\n    StatusFilterModule,\n    OperationSummaryModule,\n    BulkOperationSchedulerModule,\n    RouterModule.forChild(bulkOperationListRoutes)\n  ],\n  providers: [BulkOperationDetailsService, BulkOperationModalsService],\n  declarations: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  entryComponents: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ],\n  exports: [\n    BulkOperationsListComponent,\n    BulkOperationListItemComponent,\n    BulkOperationDetailsTabsComponent,\n    BulkOperationDetailsComponent,\n    SingleOperationsListComponent,\n    SingleOperationItemComponent,\n    BulkOperationWrapperComponent,\n    BulkOperationTypeListComponent,\n    BulkOperationsModalComponent,\n    BulkOperationsRescheduleModalComponent\n  ]\n})\nexport class BulkOperationsListModule {}\n"]}