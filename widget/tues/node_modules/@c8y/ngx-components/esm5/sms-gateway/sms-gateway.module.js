import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { gettext, HOOK_PATTERN_MESSAGES, ProviderConfigurationModule } from '@c8y/ngx-components';
import { MESSAGES } from './pattern-messages.data';
import { SmsGatewayGuard } from './sms-gateway.guard';
var ɵ0 = MESSAGES;
var SmsGatewayModule = /** @class */ (function () {
    function SmsGatewayModule() {
    }
    SmsGatewayModule = tslib_1.__decorate([
        NgModule({
            imports: [
                ProviderConfigurationModule.config([
                    {
                        navigation: {
                            label: gettext('SMS provider'),
                            path: 'smsgateway',
                            icon: 'envelope-o',
                            parent: gettext('Settings'),
                            priority: 1000,
                            canActivate: [SmsGatewayGuard]
                        },
                        layout: {
                            pageTitle: gettext('SMS provider'),
                            cardTitle: gettext('Credentials'),
                            description: gettext('Enter your credentials from your SMS provider. This enables platform features that utilize SMS services (e.g. two-factor authentication and user notifications).'),
                            providerName: gettext('SMS provider'),
                            providerNamePlaceholder: gettext('Select or type to filter providers'),
                            providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                            deleteRoles: ['ROLE_SMS_ADMIN'],
                            deleteBtnLabel: gettext('Delete'),
                            saveRoles: ['ROLE_SMS_ADMIN'],
                            saveBtnLabel: gettext('Save'),
                            configurationUpdatedSuccessMsg: gettext('Credentials updated.'),
                            deleteConfigurationModalTitle: gettext('Delete credentials'),
                            deleteConfigurationModalBody: gettext("You are about to delete SMS provider credentials. Deleting credentials will lock out any users with SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication. Do you want to proceed?"),
                            deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                            configurationDeletedSuccessMsg: gettext('Credentials deleted.')
                        },
                        endpoint: {
                            definitionsEndpoint: {
                                baseUrl: 'service/messaging/providers',
                                listUrl: 'definitions'
                            },
                            configurationEndpoint: {
                                baseUrl: 'service/messaging/providers',
                                listUrl: 'configuration'
                            }
                        }
                    }
                ])
            ],
            providers: [SmsGatewayGuard, { provide: HOOK_PATTERN_MESSAGES, useValue: ɵ0, multi: true }]
        })
    ], SmsGatewayModule);
    return SmsGatewayModule;
}());
export { SmsGatewayModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21zLWdhdGV3YXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9zbXMtZ2F0ZXdheS8iLCJzb3VyY2VzIjpbInNtcy1nYXRld2F5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztTQWdEcUIsUUFBUTtBQUVuRjtJQUFBO0lBQStCLENBQUM7SUFBbkIsZ0JBQWdCO1FBaEQ1QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1AsMkJBQTJCLENBQUMsTUFBTSxDQUFDO29CQUNqQzt3QkFDRSxVQUFVLEVBQUU7NEJBQ1YsS0FBSyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7NEJBQzlCLElBQUksRUFBRSxZQUFZOzRCQUNsQixJQUFJLEVBQUUsWUFBWTs0QkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7NEJBQzNCLFFBQVEsRUFBRSxJQUFJOzRCQUNkLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQzt5QkFDL0I7d0JBQ0QsTUFBTSxFQUFFOzRCQUNOLFNBQVMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDOzRCQUNsQyxTQUFTLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQzs0QkFDakMsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsa0tBQWtLLENBQ25LOzRCQUNELFlBQVksRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDOzRCQUNyQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsb0NBQW9DLENBQUM7NEJBQ3RFLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQzs0QkFDM0UsV0FBVyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7NEJBQy9CLGNBQWMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDOzRCQUNqQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs0QkFDN0IsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7NEJBQzdCLDhCQUE4QixFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQzs0QkFDL0QsNkJBQTZCLEVBQUUsT0FBTyxDQUFDLG9CQUFvQixDQUFDOzRCQUM1RCw0QkFBNEIsRUFBRSxPQUFPLENBQ25DLG9PQUFvTyxDQUNyTzs0QkFDRCxrQ0FBa0MsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDOzRCQUNyRCw4QkFBOEIsRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUM7eUJBQ2hFO3dCQUNELFFBQVEsRUFBRTs0QkFDUixtQkFBbUIsRUFBRTtnQ0FDbkIsT0FBTyxFQUFFLDZCQUE2QjtnQ0FDdEMsT0FBTyxFQUFFLGFBQWE7NkJBQ3ZCOzRCQUNELHFCQUFxQixFQUFFO2dDQUNyQixPQUFPLEVBQUUsNkJBQTZCO2dDQUN0QyxPQUFPLEVBQUUsZUFBZTs2QkFDekI7eUJBQ0Y7cUJBQ0Y7aUJBQ0YsQ0FBQzthQUNIO1lBQ0QsU0FBUyxFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsSUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNsRyxDQUFDO09BQ1csZ0JBQWdCLENBQUc7SUFBRCx1QkFBQztDQUFBLEFBQWhDLElBQWdDO1NBQW5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBIT09LX1BBVFRFUk5fTUVTU0FHRVMsIFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTUVTU0FHRVMgfSBmcm9tICcuL3BhdHRlcm4tbWVzc2FnZXMuZGF0YSc7XG5pbXBvcnQgeyBTbXNHYXRld2F5R3VhcmQgfSBmcm9tICcuL3Ntcy1nYXRld2F5Lmd1YXJkJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZS5jb25maWcoW1xuICAgICAge1xuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1NNUyBwcm92aWRlcicpLFxuICAgICAgICAgIHBhdGg6ICdzbXNnYXRld2F5JyxcbiAgICAgICAgICBpY29uOiAnZW52ZWxvcGUtbycsXG4gICAgICAgICAgcGFyZW50OiBnZXR0ZXh0KCdTZXR0aW5ncycpLFxuICAgICAgICAgIHByaW9yaXR5OiAxMDAwLFxuICAgICAgICAgIGNhbkFjdGl2YXRlOiBbU21zR2F0ZXdheUd1YXJkXVxuICAgICAgICB9LFxuICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICBwYWdlVGl0bGU6IGdldHRleHQoJ1NNUyBwcm92aWRlcicpLFxuICAgICAgICAgIGNhcmRUaXRsZTogZ2V0dGV4dCgnQ3JlZGVudGlhbHMnKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dChcbiAgICAgICAgICAgICdFbnRlciB5b3VyIGNyZWRlbnRpYWxzIGZyb20geW91ciBTTVMgcHJvdmlkZXIuIFRoaXMgZW5hYmxlcyBwbGF0Zm9ybSBmZWF0dXJlcyB0aGF0IHV0aWxpemUgU01TIHNlcnZpY2VzIChlLmcuIHR3by1mYWN0b3IgYXV0aGVudGljYXRpb24gYW5kIHVzZXIgbm90aWZpY2F0aW9ucykuJ1xuICAgICAgICAgICksXG4gICAgICAgICAgcHJvdmlkZXJOYW1lOiBnZXR0ZXh0KCdTTVMgcHJvdmlkZXInKSxcbiAgICAgICAgICBwcm92aWRlck5hbWVQbGFjZWhvbGRlcjogZ2V0dGV4dCgnU2VsZWN0IG9yIHR5cGUgdG8gZmlsdGVyIHByb3ZpZGVycycpLFxuICAgICAgICAgIHByb3ZpZGVyTmFtZU5vTWF0Y2hlc0hpbnQ6IGdldHRleHQoJ1NlbGVjdCBvbmUgb2YgdGhlIGV4aXN0aW5nIHByb3ZpZGVycy4nKSxcbiAgICAgICAgICBkZWxldGVSb2xlczogWydST0xFX1NNU19BRE1JTiddLFxuICAgICAgICAgIGRlbGV0ZUJ0bkxhYmVsOiBnZXR0ZXh0KCdEZWxldGUnKSxcbiAgICAgICAgICBzYXZlUm9sZXM6IFsnUk9MRV9TTVNfQURNSU4nXSxcbiAgICAgICAgICBzYXZlQnRuTGFiZWw6IGdldHRleHQoJ1NhdmUnKSxcbiAgICAgICAgICBjb25maWd1cmF0aW9uVXBkYXRlZFN1Y2Nlc3NNc2c6IGdldHRleHQoJ0NyZWRlbnRpYWxzIHVwZGF0ZWQuJyksXG4gICAgICAgICAgZGVsZXRlQ29uZmlndXJhdGlvbk1vZGFsVGl0bGU6IGdldHRleHQoJ0RlbGV0ZSBjcmVkZW50aWFscycpLFxuICAgICAgICAgIGRlbGV0ZUNvbmZpZ3VyYXRpb25Nb2RhbEJvZHk6IGdldHRleHQoXG4gICAgICAgICAgICBgWW91IGFyZSBhYm91dCB0byBkZWxldGUgU01TIHByb3ZpZGVyIGNyZWRlbnRpYWxzLiBEZWxldGluZyBjcmVkZW50aWFscyB3aWxsIGxvY2sgb3V0IGFueSB1c2VycyB3aXRoIFNNUy1iYXNlZCB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIGFuZCBkZWFjdGl2YXRlIHRoZSBTTVMtYmFzZWQgc21hcnQgcnVsZXMgYW5kIGRldmljZSBjb21tdW5pY2F0aW9uLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkP2BcbiAgICAgICAgICApLFxuICAgICAgICAgIGRlbGV0ZUNvbmZpZ3VyYXRpb25Nb2RhbE9rQnRuTGFiZWw6IGdldHRleHQoJ0RlbGV0ZScpLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb25EZWxldGVkU3VjY2Vzc01zZzogZ2V0dGV4dCgnQ3JlZGVudGlhbHMgZGVsZXRlZC4nKVxuICAgICAgICB9LFxuICAgICAgICBlbmRwb2ludDoge1xuICAgICAgICAgIGRlZmluaXRpb25zRW5kcG9pbnQ6IHtcbiAgICAgICAgICAgIGJhc2VVcmw6ICdzZXJ2aWNlL21lc3NhZ2luZy9wcm92aWRlcnMnLFxuICAgICAgICAgICAgbGlzdFVybDogJ2RlZmluaXRpb25zJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhdGlvbkVuZHBvaW50OiB7XG4gICAgICAgICAgICBiYXNlVXJsOiAnc2VydmljZS9tZXNzYWdpbmcvcHJvdmlkZXJzJyxcbiAgICAgICAgICAgIGxpc3RVcmw6ICdjb25maWd1cmF0aW9uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0pXG4gIF0sXG4gIHByb3ZpZGVyczogW1Ntc0dhdGV3YXlHdWFyZCwgeyBwcm92aWRlOiBIT09LX1BBVFRFUk5fTUVTU0FHRVMsIHVzZVZhbHVlOiBNRVNTQUdFUywgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgU21zR2F0ZXdheU1vZHVsZSB7fVxuIl19