import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { SensorPhoneModalComponent } from './sensor-phone-modal.component';
import { AppStateService } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { head } from 'lodash-es';
import { gettext } from '@c8y/ngx-components';
var SensorPhoneService = /** @class */ (function () {
    function SensorPhoneService(bsModalService, ui, inventoryService) {
        var _this = this;
        this.bsModalService = bsModalService;
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(function (data) {
            if (data) {
                _this.domainName = data.domainName;
                _this.tenantId = data.name;
            }
        });
    }
    SensorPhoneService.prototype.createModal = function () {
        this.bsModalService.show(SensorPhoneModalComponent, {
            backdrop: 'static',
            class: 'lg'
        });
    };
    SensorPhoneService.prototype.getHost = function () {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    };
    SensorPhoneService.prototype.getTenantName = function () {
        return this.domainName.split('.')[0];
    };
    SensorPhoneService.prototype.getTenantId = function () {
        return this.tenantId;
    };
    SensorPhoneService.prototype.checkPhoneGroupExists = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, data, res;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.inventoryService.list({
                            fragmentType: this.PHONE_GROUP_FRAGMENT
                        })];
                    case 1:
                        _a = _b.sent(), data = _a.data, res = _a.res;
                        if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                            return [2 /*return*/, head(data)];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    SensorPhoneService.prototype.addPhoneGroup = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var group;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.checkPhoneGroupExists()];
                    case 1:
                        group = _a.sent();
                        if (group) {
                            return [2 /*return*/, group];
                        }
                        return [4 /*yield*/, this.createPhoneGroup()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SensorPhoneService.prototype.createPhoneGroup = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var newPhoneGroup, _a, data, res;
            var _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        newPhoneGroup = (_b = {
                                c8y_Global: {},
                                c8y_IsDeviceGroup: {},
                                type: 'c8y_DeviceGroup',
                                name: this.PHONE_GROUP_NAME
                            },
                            _b[this.PHONE_GROUP_FRAGMENT] = {},
                            _b);
                        return [4 /*yield*/, this.inventoryService.create(newPhoneGroup)];
                    case 1:
                        _a = _c.sent(), data = _a.data, res = _a.res;
                        if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                            return [2 /*return*/, data];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    SensorPhoneService.prototype.generateRegistrationData = function (deviceId) {
        var res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    };
    SensorPhoneService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: AppStateService },
        { type: InventoryService }
    ]; };
    SensorPhoneService = tslib_1.__decorate([
        Injectable()
    ], SensorPhoneService);
    return SensorPhoneService;
}());
export { SensorPhoneService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3NlbnNvci1waG9uZS8iLCJzb3VyY2VzIjpbInNlbnNvci1waG9uZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzlDO0lBVUUsNEJBQ1UsY0FBOEIsRUFDOUIsRUFBbUIsRUFDbkIsZ0JBQWtDO1FBSDVDLGlCQVdDO1FBVlMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBQ25CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFabkMscUJBQWdCLEdBQUc7WUFDMUIsRUFBRSxFQUFFLEdBQUc7WUFDUCxPQUFPLEVBQUUsR0FBRztTQUNiLENBQUM7UUFHTSx5QkFBb0IsR0FBRyx3QkFBd0IsQ0FBQztRQUN2QyxxQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFPcEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUNsQyxJQUFJLElBQUksRUFBRTtnQkFDUixLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ2xDLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFB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cmUnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IFNlbnNvclBob25lTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3NlbnNvci1waG9uZS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgaGVhZCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZW5zb3JQaG9uZVNlcnZpY2Uge1xuICByZWFkb25seSBIVFRQX1NUQVRVU19DT0RFID0ge1xuICAgIE9LOiAyMDAsXG4gICAgQ1JFQVRFRDogMjAxXG4gIH07XG4gIHByaXZhdGUgZG9tYWluTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHRlbmFudElkOiBzdHJpbmc7XG4gIHByaXZhdGUgUEhPTkVfR1JPVVBfRlJBR01FTlQgPSAnYzh5X0lzU2Vuc29yUGhvbmVHcm91cCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgUEhPTkVfR1JPVVBfTkFNRSA9IGdldHRleHQoJ1Bob25lcycpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy51aS5jdXJyZW50VGVuYW50LnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHRoaXMuZG9tYWluTmFtZSA9IGRhdGEuZG9tYWluTmFtZTtcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IGRhdGEubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZU1vZGFsKCkge1xuICAgIHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhTZW5zb3JQaG9uZU1vZGFsQ29tcG9uZW50LCB7XG4gICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICBjbGFzczogJ2xnJ1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SG9zdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW5OYW1lLnN1YnN0cmluZyh0aGlzLmRvbWFpbk5hbWUuaW5kZXhPZignLicpICsgMSk7XG4gIH1cblxuICBnZXRUZW5hbnROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3BsaXQoJy4nKVswXTtcbiAgfVxuXG4gIGdldFRlbmFudElkKCkge1xuICAgIHJldHVybiB0aGlzLnRlbmFudElkO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tQaG9uZUdyb3VwRXhpc3RzKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgcmVzIH0gPSBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdCh7XG4gICAgICBmcmFnbWVudFR5cGU6IHRoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRcbiAgICB9KTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLk9LKSB7XG4gICAgICByZXR1cm4gaGVhZChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBhZGRQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5jaGVja1Bob25lR3JvdXBFeGlzdHMoKTtcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlUGhvbmVHcm91cCgpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGhvbmVHcm91cCgpIHtcbiAgICBjb25zdCBuZXdQaG9uZUdyb3VwID0ge1xuICAgICAgYzh5X0dsb2JhbDoge30sXG4gICAgICBjOHlfSXNEZXZpY2VHcm91cDoge30sXG4gICAgICB0eXBlOiAnYzh5X0RldmljZUdyb3VwJyxcbiAgICAgIG5hbWU6IHRoaXMuUEhPTkVfR1JPVVBfTkFNRSxcbiAgICAgIFt0aGlzLlBIT05FX0dST1VQX0ZSQUdNRU5UXToge31cbiAgICB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5jcmVhdGUobmV3UGhvbmVHcm91cCk7XG4gICAgaWYgKGRhdGEgJiYgcmVzICYmIHJlcy5zdGF0dXMgPT09IHRoaXMuSFRUUF9TVEFUVVNfQ09ERS5DUkVBVEVEKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZW5lcmF0ZVJlZ2lzdHJhdGlvbkRhdGEoZGV2aWNlSWQpIHtcbiAgICBjb25zdCByZXMgPSAnYzh5Oi8vJyArIHRoaXMuZ2V0VGVuYW50TmFtZSgpICsgJy4nICsgdGhpcy5nZXRIb3N0KCkgKyAnLz9kZXZpY2VJZD0nICsgZGV2aWNlSWQ7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuIl19