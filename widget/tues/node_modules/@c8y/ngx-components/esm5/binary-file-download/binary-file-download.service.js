import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { filter, map } from 'rxjs/operators';
import { InventoryBinaryService, InventoryService } from '@c8y/client';
import { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';
import { saveAs } from 'file-saver';
import { isUndefined } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
var BinaryFileDownloadService = /** @class */ (function () {
    function BinaryFileDownloadService(router, route, inventoryService, alertService, modalService, translate, inventoryBinary) {
        this.router = router;
        this.route = route;
        this.inventoryService = inventoryService;
        this.alertService = alertService;
        this.modalService = modalService;
        this.translate = translate;
        this.inventoryBinary = inventoryBinary;
    }
    BinaryFileDownloadService.prototype.run = function () {
        var _this = this;
        this.router.events
            .pipe(filter(function (event) {
            return event instanceof NavigationEnd
                && _this.route.snapshot.queryParams.download;
        }), map(function () { return _this.route.snapshot.queryParams.download; }))
            .subscribe(function (downloadId) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var data, alertMessage, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.inventoryService.detail(downloadId)];
                    case 1:
                        data = (_a.sent()).data;
                        if (!isUndefined(data.c8y_IsBinary)) {
                            this.showDownloadModal(data);
                        }
                        else {
                            alertMessage = this.translate.instant(gettext('Could not download the file: object with ID "{{ id }}" is not a valid binary.'), { id: data.id });
                            this.alertService.danger(alertMessage);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    BinaryFileDownloadService.prototype.showDownloadModal = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modalBody, binary, fileBinary, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        modalBody = this.translate.instant(gettext('You are about to download file "{{ fileName }}". Do you want to proceed?'), { fileName: data.name });
                        return [4 /*yield*/, this.modalService.confirm(gettext('File download'), modalBody, Status.INFO, { ok: gettext('Download') })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getBinary(data.id)];
                    case 2:
                        binary = _a.sent();
                        fileBinary = new File([binary], data.name, { type: data.contentType });
                        saveAs(fileBinary);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BinaryFileDownloadService.prototype.getBinary = function (binaryId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, res, ex_2, msg;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.inventoryBinary.download(binaryId)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 2:
                        binary = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        msg = gettext('Could not get the binary.');
                        this.alertService.danger(msg);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, binary];
                }
            });
        });
    };
    BinaryFileDownloadService.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: InventoryService },
        { type: AlertService },
        { type: ModalService },
        { type: TranslateService },
        { type: InventoryBinaryService }
    ]; };
    BinaryFileDownloadService = tslib_1.__decorate([
        Injectable()
    ], BinaryFileDownloadService);
    return BinaryFileDownloadService;
}());
export { BinaryFileDownloadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LWZpbGUtZG93bmxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvYmluYXJ5LWZpbGUtZG93bmxvYWQvIiwic291cmNlcyI6WyJiaW5hcnktZmlsZS1kb3dubG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQ7SUFFRSxtQ0FBb0IsTUFBYyxFQUNkLEtBQXFCLEVBQ3JCLGdCQUFrQyxFQUNsQyxZQUEwQixFQUMxQixZQUEwQixFQUMxQixTQUEyQixFQUMzQixlQUF1QztRQU52QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7SUFDM0QsQ0FBQztJQUVE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O0lBQUQsZ0NBQUM7Q0FBQSxBQXBFRCxJQW9FQztTQXBFWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSW52ZW50b3J5QmluYXJ5U2VydmljZSwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSwgZ2V0dGV4dCwgTW9kYWxTZXJ2aWNlLCBTdGF0dXMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmluYXJ5RmlsZURvd25sb2FkU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgICAgICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IE1vZGFsU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgaW52ZW50b3J5QmluYXJ5OiBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlKSB7XG4gIH1cblxuICBydW4oKSB7XG4gICAgdGhpcy5yb3V0ZXIuZXZlbnRzXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKChldmVudCkgPT4geyByZXR1cm4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kXG4gICAgICAgICAgJiYgdGhpcy5yb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtcy5kb3dubG9hZDsgfSksXG4gICAgICAgIG1hcCgoKSA9PiB0aGlzLnJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zLmRvd25sb2FkKSlcbiAgICAgIC5zdWJzY3JpYmUoYXN5bmMgKGRvd25sb2FkSWQpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwoZG93bmxvYWRJZCk7XG4gICAgICAgICAgaWYgKCAhaXNVbmRlZmluZWQoZGF0YS5jOHlfSXNCaW5hcnkpICkge1xuICAgICAgICAgICAgdGhpcy5zaG93RG93bmxvYWRNb2RhbChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYWxlcnRNZXNzYWdlID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudChcbiAgICAgICAgICAgICAgZ2V0dGV4dCgnQ291bGQgbm90IGRvd25sb2FkIHRoZSBmaWxlOiBvYmplY3Qgd2l0aCBJRCBcInt7IGlkIH19XCIgaXMgbm90IGEgdmFsaWQgYmluYXJ5LicpLFxuICAgICAgICAgICAgICB7IGlkOiBkYXRhLmlkIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5kYW5nZXIoYWxlcnRNZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2hvd0Rvd25sb2FkTW9kYWwoZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb2RhbEJvZHkgPSB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KFxuICAgICAgICBnZXR0ZXh0KCdZb3UgYXJlIGFib3V0IHRvIGRvd25sb2FkIGZpbGUgXCJ7eyBmaWxlTmFtZSB9fVwiLiBEbyB5b3Ugd2FudCB0byBwcm9jZWVkPycpLFxuICAgICAgICB7IGZpbGVOYW1lOiBkYXRhLm5hbWUgfVxuICAgICAgKTtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWxTZXJ2aWNlLmNvbmZpcm0oXG4gICAgICAgIGdldHRleHQoJ0ZpbGUgZG93bmxvYWQnKSxcbiAgICAgICAgbW9kYWxCb2R5LFxuICAgICAgICBTdGF0dXMuSU5GTyxcbiAgICAgICAgeyBvazogZ2V0dGV4dCgnRG93bmxvYWQnKSB9XG4gICAgICApO1xuICAgICAgY29uc3QgYmluYXJ5ID0gYXdhaXQgdGhpcy5nZXRCaW5hcnkoZGF0YS5pZCk7XG4gICAgICBjb25zdCBmaWxlQmluYXJ5ID0gbmV3IEZpbGUoW2JpbmFyeV0sIGRhdGEubmFtZSwgeyB0eXBlOiBkYXRhLmNvbnRlbnRUeXBlIH0pO1xuICAgICAgc2F2ZUFzKGZpbGVCaW5hcnkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVtcHR5IGJvZHkgOihcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldEJpbmFyeShiaW5hcnlJZCkge1xuICAgIGxldCBiaW5hcnk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaW52ZW50b3J5QmluYXJ5LmRvd25sb2FkKGJpbmFyeUlkKTtcbiAgICAgIGJpbmFyeSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnN0IG1zZyA9IGdldHRleHQoJ0NvdWxkIG5vdCBnZXQgdGhlIGJpbmFyeS4nKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmRhbmdlcihtc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBiaW5hcnk7XG4gIH1cblxufVxuIl19