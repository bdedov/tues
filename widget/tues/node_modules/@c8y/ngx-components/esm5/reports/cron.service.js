import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Base } from './export-schedules.interface';
import { TranslateService } from '@ngx-translate/core';
import { formatDate } from '@angular/common';
import { gettext } from '@c8y/ngx-components';
var CronService = /** @class */ (function () {
    function CronService(translateService) {
        this.translateService = translateService;
        this.daysOfWeekPosix = [];
        this.daysOfMonth = [
            { value: '1', label: '1.' },
            { value: '2', label: '2.' },
            { value: '3', label: '3.' },
            { value: '4', label: '4.' },
            { value: '5', label: '5.' },
            { value: '6', label: '6.' },
            { value: '7', label: '7.' },
            { value: '8', label: '8.' },
            { value: '9', label: '9.' },
            { value: '10', label: '10.' },
            { value: '11', label: '11.' },
            { value: '12', label: '12.' },
            { value: '13', label: '13.' },
            { value: '14', label: '14.' },
            { value: '15', label: '15.' },
            { value: '16', label: '16.' },
            { value: '17', label: '17.' },
            { value: '18', label: '18.' },
            { value: '19', label: '19.' },
            { value: '20', label: '20.' },
            { value: '21', label: '21.' },
            { value: '22', label: '22.' },
            { value: '23', label: '23.' },
            { value: '24', label: '24.' },
            { value: '25', label: '25.' },
            { value: '26', label: '26.' },
            { value: '27', label: '27.' },
            { value: '28', label: '28.' },
            { value: '29', label: '29.' },
            { value: '30', label: '30.' },
            { value: '31', label: '31.' }
        ];
        this.months = [];
        this.hours = [];
        this.minutes = [];
        this.intervals = [
            { value: 2, label: gettext('Hour') },
            { value: 3, label: gettext('Day') },
            { value: 4, label: gettext('Week') },
            { value: 5, label: gettext('Month') },
            { value: 6, label: gettext('Year') }
        ];
        for (var x = 0; x < 24; x++) {
            this.hours.push({ value: x.toString(), label: "" + x });
        }
        for (var x = 0; x < 60; x = x + 5) {
            this.minutes.push({ value: x.toString(), label: "" + x });
        }
        for (var x = 0; x < 7; x++) {
            this.daysOfWeekPosix.push({
                value: x.toString(),
                label: this.getWeekDayName({ weekday: x })
            });
        }
        for (var x = 1; x < 13; x++) {
            this.months.push({
                value: x.toString(),
                label: this.getMonthName({ month: x })
            });
        }
    }
    CronService.prototype.generateCron = function (cronConfig) {
        var cron = '';
        cron = cronConfig.minute ? "" + cronConfig.minute : '*';
        cron += cronConfig.hour ? " " + cronConfig.hour : ' *';
        cron += cronConfig.day ? " " + cronConfig.day : ' *';
        cron += cronConfig.month ? " " + cronConfig.month : ' *';
        cron += cronConfig.weekday ? " " + cronConfig.weekday : ' *';
        return cron;
    };
    CronService.prototype.generateCronConfig = function (cron) {
        var parts = cron.split(/\s+/);
        var cronConfig = {
            minute: parts[0],
            hour: parts[1],
            day: parts[2],
            month: parts[3],
            weekday: parts[4]
        };
        return cronConfig;
    };
    CronService.prototype.getBase = function (cronConfig) {
        var base = Base.Initial;
        if (cronConfig.minute !== '*' &&
            cronConfig.hour === '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Hour;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Day;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday !== '*') {
            base = Base.Week;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Month;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month !== '*' &&
            cronConfig.weekday === '*') {
            base = Base.Year;
        }
        else {
            // cronConfig invalid
        }
        return base;
    };
    CronService.prototype.validateModels = function (base, cronConfig) {
        var valid;
        switch (base) {
            case Base.Initial: // Please select
                valid = false;
                break;
            case Base.Hour:
                if (cronConfig.minute !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Day:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Week:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Month:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Year:
                if (cronConfig.minute !== '*' &&
                    cronConfig.hour !== '*' &&
                    cronConfig.day !== '*' &&
                    cronConfig.month !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            default:
                valid = false;
        }
        return valid;
    };
    CronService.prototype.clearNextModels = function (base, cronConfig) {
        if (base === Base.Initial) {
            // please select, delete all
            // cron expression: every minute at second 0
            cronConfig.minute = '*';
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Hour) {
            // hour, don't delete minutes
            // cron expression: every hour, at whatever minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Day) {
            // day, don't delete minutes and hours
            // cron expression: every day of every month, at whatever hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Week) {
            // week, delete month and day
            // cron expression: every month, at whatever weekday, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.weekday = cronConfig.weekday === '*' || cronConfig.weekday === '?' ? this.daysOfWeekPosix[0].value : cronConfig.weekday;
        }
        else if (base === Base.Month) {
            // month, delete month and weekday
            // cron expression: every month, at whatever day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = '*';
            cronConfig.weekday = '*';
        }
        else if (base === Base.Year) {
            // year, delete weekday
            // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
            cronConfig.minute = cronConfig.minute === '*' ? this.minutes[0].value : cronConfig.minute;
            cronConfig.hour = cronConfig.hour === '*' ? this.hours[0].value : cronConfig.hour;
            cronConfig.day = cronConfig.day === '*' ? this.daysOfMonth[0].value : cronConfig.day;
            cronConfig.month = cronConfig.month === '*' ? this.months[0].value : cronConfig.month;
            cronConfig.weekday = '*';
        }
    };
    CronService.prototype.getWeekDayName = function (cronConfig) {
        var date = new Date(0);
        var firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
        date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
        return formatDate(date, 'EEEE', this.translateService.currentLang);
    };
    CronService.prototype.getMonthDayName = function (cronConfig) {
        var name = '';
        this.daysOfMonth.forEach(function (item) {
            if (item.value === cronConfig.day) {
                name = item.label;
            }
        });
        return name;
    };
    CronService.prototype.getMonthName = function (cronConfig) {
        var date = new Date(0);
        date.setMonth(parseInt(cronConfig.month, 10) - 1);
        return formatDate(date, 'LLLL', this.translateService.currentLang);
    };
    CronService.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    CronService = tslib_1.__decorate([
        Injectable()
    ], CronService);
    return CronService;
}());
export { CronService };
//# sourceMappingURL=data:application/json;base64,