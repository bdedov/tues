import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter } from '@angular/core';
import { GroupNodeService } from './group-node.service';
/**
 * Displays a hierarchical tree selector for assets.
 */
var AssetSelectorComponent = /** @class */ (function () {
    /**
     * @ignore only DI
     */
    function AssetSelectorComponent(groupNodeService) {
        this.groupNodeService = groupNodeService;
        /**
         * An array of predefined nodes.
         */
        this.selected = [];
        /**
         * Emits if one item was selected (all currently selected nodes).
         */
        this.onChange = new EventEmitter();
    }
    /**
     * @ignore
     */
    AssetSelectorComponent.prototype.ngOnInit = function () {
        this.rootNode = this.groupNodeService.createGroupNode({ root: true });
    };
    /**
     * Adds an managed object to the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    AssetSelectorComponent.prototype.select = function (selectedMo) {
        var index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index === -1) {
            this.selected.push(selectedMo);
        }
        this.onChange.emit(this.selected);
    };
    /**
     * Removes a managed object from the selected array and emits the change.
     * @param selectedMo The selected asset.
     */
    AssetSelectorComponent.prototype.deselect = function (selectedMo) {
        var index = this.getIndexOfSelected(this.selected, selectedMo);
        if (index > -1) {
            this.selected.splice(index, 1);
        }
        this.onChange.emit(this.selected);
    };
    AssetSelectorComponent.prototype.getIndexOfSelected = function (selected, selectedMo) {
        return selected.findIndex(function (mo) { return mo.id === selectedMo.id; });
    };
    AssetSelectorComponent.ctorParameters = function () { return [
        { type: GroupNodeService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], AssetSelectorComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output()
    ], AssetSelectorComponent.prototype, "onChange", void 0);
    AssetSelectorComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-asset-selector',
            template: "<c8y-asset-selector-node [node]=\"rootNode\" [preselected]=\"selected\"></c8y-asset-selector-node>\n"
        })
    ], AssetSelectorComponent);
    return AssetSelectorComponent;
}());
export { AssetSelectorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yLyIsInNvdXJjZXMiOlsiYXNzZXQtc2VsZWN0b3IvYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhEOztHQUVHO0FBS0g7SUFjRTs7T0FFRztJQUNILGdDQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWhCdEQ7O1dBRUc7UUFDTSxhQUFRLEdBQXFCLEVBQUUsQ0FBQztRQUN6Qzs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztJQVNELENBQUM7SUFFMUQ7O09BRUc7SUFDSCx5Q0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7T0FHRztJQUNILHVDQUFNLEdBQU4sVUFBTyxVQUEwQjtRQUMvQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNoQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gseUNBQVEsR0FBUixVQUFTLFVBQTBCO1FBQ2pDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxtREFBa0IsR0FBbEIsVUFBbUIsUUFBd0MsRUFBRSxVQUEwQjtRQUNyRixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFLEVBQXZCLENBQXVCLENBQUMsQ0FBQztJQUMzRCxDQUFDOztnQkFuQ3FDLGdCQUFnQjs7SUFiN0M7UUFBUixLQUFLLEVBQUU7NERBQWlDO0lBSS9CO1FBQVQsTUFBTSxFQUFFOzREQUFpRDtJQVIvQyxzQkFBc0I7UUFKbEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixnSEFBOEM7U0FDL0MsQ0FBQztPQUNXLHNCQUFzQixDQXFEbEM7SUFBRCw2QkFBQztDQUFBLEFBckRELElBcURDO1NBckRZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyb3VwTm9kZVNlcnZpY2UgfSBmcm9tICcuL2dyb3VwLW5vZGUuc2VydmljZSc7XG5pbXBvcnQgeyBHcm91cE5vZGUgfSBmcm9tICcuL2dyb3VwLW5vZGUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbi8qKlxuICogRGlzcGxheXMgYSBoaWVyYXJjaGljYWwgdHJlZSBzZWxlY3RvciBmb3IgYXNzZXRzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXNzZXQtc2VsZWN0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vYXNzZXQtc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFzc2V0U2VsZWN0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogQW4gYXJyYXkgb2YgcHJlZGVmaW5lZCBub2Rlcy5cbiAgICovXG4gIEBJbnB1dCgpIHNlbGVjdGVkOiBJTWFuYWdlZE9iamVjdFtdID0gW107XG4gIC8qKlxuICAgKiBFbWl0cyBpZiBvbmUgaXRlbSB3YXMgc2VsZWN0ZWQgKGFsbCBjdXJyZW50bHkgc2VsZWN0ZWQgbm9kZXMpLlxuICAgKi9cbiAgQE91dHB1dCgpIG9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxJTWFuYWdlZE9iamVjdFtdPigpO1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9vdE5vZGU6IEdyb3VwTm9kZTtcblxuICAvKipcbiAgICogQGlnbm9yZSBvbmx5IERJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdyb3VwTm9kZVNlcnZpY2U6IEdyb3VwTm9kZVNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucm9vdE5vZGUgPSB0aGlzLmdyb3VwTm9kZVNlcnZpY2UuY3JlYXRlR3JvdXBOb2RlKHsgcm9vdDogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIG1hbmFnZWQgb2JqZWN0IHRvIHRoZSBzZWxlY3RlZCBhcnJheSBhbmQgZW1pdHMgdGhlIGNoYW5nZS5cbiAgICogQHBhcmFtIHNlbGVjdGVkTW8gVGhlIHNlbGVjdGVkIGFzc2V0LlxuICAgKi9cbiAgc2VsZWN0KHNlbGVjdGVkTW86IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldEluZGV4T2ZTZWxlY3RlZCh0aGlzLnNlbGVjdGVkLCBzZWxlY3RlZE1vKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkLnB1c2goc2VsZWN0ZWRNbyk7XG4gICAgfVxuICAgIHRoaXMub25DaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgbWFuYWdlZCBvYmplY3QgZnJvbSB0aGUgc2VsZWN0ZWQgYXJyYXkgYW5kIGVtaXRzIHRoZSBjaGFuZ2UuXG4gICAqIEBwYXJhbSBzZWxlY3RlZE1vIFRoZSBzZWxlY3RlZCBhc3NldC5cbiAgICovXG4gIGRlc2VsZWN0KHNlbGVjdGVkTW86IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldEluZGV4T2ZTZWxlY3RlZCh0aGlzLnNlbGVjdGVkLCBzZWxlY3RlZE1vKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gIH1cblxuICBnZXRJbmRleE9mU2VsZWN0ZWQoc2VsZWN0ZWQ6IEFycmF5PFBhcnRpYWw8SU1hbmFnZWRPYmplY3Q+Piwgc2VsZWN0ZWRNbzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICByZXR1cm4gc2VsZWN0ZWQuZmluZEluZGV4KG1vID0+IG1vLmlkID09PSBzZWxlY3RlZE1vLmlkKTtcbiAgfVxufVxuIl19