import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
import { BehaviorSubject } from 'rxjs';
import { BaseStepperComponent } from '../base-stepper.component';
import { BulkOperationsService, OperationDetails } from '@c8y/ngx-components/operations/bulk-operations-service';
var StepperFirmware = /** @class */ (function (_super) {
    tslib_1.__extends(StepperFirmware, _super);
    function StepperFirmware(bulkOperationService, translate) {
        var _this = _super.call(this) || this;
        _this.bulkOperationService = bulkOperationService;
        _this.translate = translate;
        _this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        _this.textFilter$ = new BehaviorSubject('');
        _this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
        return _this;
    }
    StepperFirmware.prototype.goToVersionOrPatchStep = function (_a) {
        var stepper = _a.stepper;
        var selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    };
    StepperFirmware.prototype.onVersionOrPatchSelected = function (versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    };
    StepperFirmware.prototype.onFirmwareSelected = function (fw) {
        this.stepData.firmware = fw;
    };
    StepperFirmware.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    StepperFirmware.prototype.retrieveOperationPrototype = function () {
        var selectedFirmware = this.stepData.firmware;
        var selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        var firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        var name = selectedFirmware.name;
        var version = selectedVersionOrPatch.c8y_Firmware.version;
        var description = "Update firmware to: " + name + " (version: " + version + ").";
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description: description,
                c8y_Firmware: firmware
            }
        };
    };
    StepperFirmware.prototype.onSelectionChange = function (event) {
        this.textFilter$.next('');
        _super.prototype.onSelectionChange.call(this, event);
    };
    StepperFirmware.ctorParameters = function () { return [
        { type: BulkOperationsService },
        { type: TranslateService }
    ]; };
    StepperFirmware = tslib_1.__decorate([
        Component({
            selector: 'c8y-stepper-firmware',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <h4 class=\"text-center m-b-16 text-gray\" translate>\n            Select version or patch\n          </h4>\n          <p class=\"text-center p-b-8 text-truncate\">\n            <strong [title]=\"stepData?.firmware?.name\">{{ stepData?.firmware?.name }}</strong\n            ><br />\n            <small [title]=\"stepData?.firmware?.description\">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-v\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-version-or-patch-step\n            [selected]=\"stepData?.versionOrPatch\"\n            (versionOrPatch)=\"onVersionOrPatchSelected($event)\">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperFirmware);
    return StepperFirmware;
}(BaseStepperComponent));
export { StepperFirmware };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zLyIsInNvdXJjZXMiOlsiYnVsay9jcmVhdGlvbi9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLGVBQWUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixnQkFBZ0IsRUFDakIsTUFBTSx3REFBd0QsQ0FBQztBQU1oRTtJQUFxQywyQ0FBb0I7SUFldkQseUJBQ1Usb0JBQTJDLEVBQzNDLFNBQTJCO1FBRnJDLFlBSUUsaUJBQU8sU0FDUjtRQUpTLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBdUI7UUFDM0MsZUFBUyxHQUFULFNBQVMsQ0FBa0I7UUFoQjVCLHlCQUFtQixHQUFXLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBRXJGLGlCQUFXLEdBQTRCLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRS9ELGNBQVEsR0FBaUU7WUFDdkUsUUFBUSxFQUFFLFNBQVM7WUFDbkIsY0FBYyxFQUFFLFNBQVM7U0FDMUIsQ0FBQzs7SUFZRixDQUFDO0lBRUQsZ0RBQXNCLEdBQXRCLFVBQXVCLEVBQVc7WUFBVCxvQkFBTztRQUM5QixJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ2hELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDNUQsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCxrREFBd0IsR0FBeEIsVUFBeUIsY0FBOEI7UUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQ2hELENBQUM7SUFFRCw0Q0FBa0IsR0FBbEIsVUFBbUIsRUFBa0I7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRVMsb0RBQTBCLEdBQXBDO1FBQ0UsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNoRCxJQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBRTVELElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQ2hELE9BQU87U0FDUjtRQUVELElBQU0sUUFBUSxHQUFvQjtZQUNoQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsSUFBSTtZQUMzQixPQUFPLEVBQUUsc0JBQXNCLENBQUMsWUFBWSxDQUFDLE9BQU87WUFDcEQsR0FBRyxFQUFFLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxHQUFHO1NBQ2YsQ0FBQztRQUVoQyxJQUFJLHNCQUFzQixDQUFDLFNBQVMsRUFBRTtZQUNwQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUN4QixRQUFRLENBQUMsVUFBVSxHQUFHLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7U0FDbkU7UUFFRCxJQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBTSxPQUFPLEdBQUcsc0JBQXNCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUM1RCxJQUFNLFdBQVcsR0FBVyx5QkFBdUIsSUFBSSxtQkFBYyxPQUFPLE9BQUksQ0FBQztRQUVqRixPQUFPO1lBQ0wsSUFBSSxFQUFFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUM1RCxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDO2dCQUN6QyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUscUNBQXFDLENBQUM7YUFDbkUsQ0FBQztZQUNGLFNBQVMsRUFBRztnQkFDVixXQUFXLGFBQUE7Z0JBQ1gsWUFBWSxFQUFFLFFBQVE7YUFDRztTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVTLDJDQUFpQixHQUEzQixVQUE0QixLQUE0QjtRQUN0RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQixpQkFBTSxpQkFBaUIsWUFBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOztnQkFsRStCLHFCQUFxQjtnQkFDaEMsZ0JBQWdCOztJQWpCMUIsZUFBZTtRQUozQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLHV1REFBd0Q7U0FDekQsQ0FBQztPQUNXLGVBQWUsQ0FtRjNCO0lBQUQsc0JBQUM7Q0FBQSxBQW5GRCxDQUFxQyxvQkFBb0IsR0FtRnhEO1NBbkZZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGVwcGVyU2VsZWN0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIElPcGVyYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJhc2VTdGVwcGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS1zdGVwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBCdWxrT3BlcmF0aW9uc1NlcnZpY2UsXG4gIE9wZXJhdGlvbkRldGFpbHNcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXN0ZXBwZXItZmlybXdhcmUnLFxuICB0ZW1wbGF0ZVVybDogJ3N0ZXBwZXItYnVsay10eXBlLWZpcm13YXJlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTdGVwcGVyRmlybXdhcmUgZXh0ZW5kcyBCYXNlU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uVGVtcGxhdGU6IHN0cmluZyA9IGdldHRleHQoJ3t7IG5hbWUgfX0gKHZlcnNpb24ge3sgdmVyc2lvbiB9fSknKTtcblxuICB0ZXh0RmlsdGVyJDogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KCcnKTtcblxuICBzdGVwRGF0YTogeyBmaXJtd2FyZTogSU1hbmFnZWRPYmplY3Q7IHZlcnNpb25PclBhdGNoOiBJTWFuYWdlZE9iamVjdCB9ID0ge1xuICAgIGZpcm13YXJlOiB1bmRlZmluZWQsXG4gICAgdmVyc2lvbk9yUGF0Y2g6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHNlbGVjdGVkRmlybXdhcmU6IElNYW5hZ2VkT2JqZWN0O1xuICBzZWxlY3RlZFZlcnNpb25PclBhdGNoOiBJTWFuYWdlZE9iamVjdDtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnVsa09wZXJhdGlvblNlcnZpY2U6IEJ1bGtPcGVyYXRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZVxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZ29Ub1ZlcnNpb25PclBhdGNoU3RlcCh7IHN0ZXBwZXIgfSkge1xuICAgIGNvbnN0IHNlbGVjdGVkRmlybXdhcmUgPSB0aGlzLnN0ZXBEYXRhLmZpcm13YXJlO1xuICAgIHRoaXMuYnVsa09wZXJhdGlvblNlcnZpY2Uuc2V0RmlybXdhcmVJZChzZWxlY3RlZEZpcm13YXJlLmlkKTtcbiAgICB0aGlzLmRldmljZVR5cGVzID0gKHNlbGVjdGVkRmlybXdhcmUuYzh5X0ZpbHRlciB8fCB7fSkudHlwZTtcbiAgICBzdGVwcGVyLm5leHQoKTtcbiAgfVxuXG4gIG9uVmVyc2lvbk9yUGF0Y2hTZWxlY3RlZCh2ZXJzaW9uT3JQYXRjaDogSU1hbmFnZWRPYmplY3QpIHtcbiAgICB0aGlzLnN0ZXBEYXRhLnZlcnNpb25PclBhdGNoID0gdmVyc2lvbk9yUGF0Y2g7XG4gIH1cblxuICBvbkZpcm13YXJlU2VsZWN0ZWQoZnc6IElNYW5hZ2VkT2JqZWN0KSB7XG4gICAgdGhpcy5zdGVwRGF0YS5maXJtd2FyZSA9IGZ3O1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCByZXRyaWV2ZU9wZXJhdGlvblByb3RvdHlwZSgpOiBPcGVyYXRpb25EZXRhaWxzIHtcbiAgICBjb25zdCBzZWxlY3RlZEZpcm13YXJlID0gdGhpcy5zdGVwRGF0YS5maXJtd2FyZTtcbiAgICBjb25zdCBzZWxlY3RlZFZlcnNpb25PclBhdGNoID0gdGhpcy5zdGVwRGF0YS52ZXJzaW9uT3JQYXRjaDtcblxuICAgIGlmICghc2VsZWN0ZWRGaXJtd2FyZSB8fCAhc2VsZWN0ZWRWZXJzaW9uT3JQYXRjaCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZpcm13YXJlOiBJTWFuYWdlZE9iamVjdCA9ICh7XG4gICAgICBuYW1lOiBzZWxlY3RlZEZpcm13YXJlLm5hbWUsXG4gICAgICB2ZXJzaW9uOiBzZWxlY3RlZFZlcnNpb25PclBhdGNoLmM4eV9GaXJtd2FyZS52ZXJzaW9uLFxuICAgICAgdXJsOiBzZWxlY3RlZFZlcnNpb25PclBhdGNoLmM4eV9GaXJtd2FyZS51cmxcbiAgICB9IGFzIHVua25vd24pIGFzIElNYW5hZ2VkT2JqZWN0O1xuXG4gICAgaWYgKHNlbGVjdGVkVmVyc2lvbk9yUGF0Y2guYzh5X1BhdGNoKSB7XG4gICAgICBmaXJtd2FyZS5pc1BhdGNoID0gdHJ1ZTtcbiAgICAgIGZpcm13YXJlLmRlcGVuZGVuY3kgPSBzZWxlY3RlZFZlcnNpb25PclBhdGNoLmM4eV9QYXRjaC5kZXBlbmRlbmN5O1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWUgPSBzZWxlY3RlZEZpcm13YXJlLm5hbWU7XG4gICAgY29uc3QgdmVyc2lvbiA9IHNlbGVjdGVkVmVyc2lvbk9yUGF0Y2guYzh5X0Zpcm13YXJlLnZlcnNpb247XG4gICAgY29uc3QgZGVzY3JpcHRpb246IHN0cmluZyA9IGBVcGRhdGUgZmlybXdhcmUgdG86ICR7bmFtZX0gKHZlcnNpb246ICR7dmVyc2lvbn0pLmA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogZ2V0dGV4dCgnRmlybXdhcmUgdXBkYXRlJyksXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy50cmFuc2xhdGUuaW5zdGFudCh0aGlzLmRlc2NyaXB0aW9uVGVtcGxhdGUsIHtcbiAgICAgICAgbmFtZTogZ2V0KHRoaXMuc3RlcERhdGEsICdmaXJtd2FyZS5uYW1lJyksXG4gICAgICAgIHZlcnNpb246IGdldCh0aGlzLnN0ZXBEYXRhLCAndmVyc2lvbk9yUGF0Y2guYzh5X0Zpcm13YXJlLnZlcnNpb24nKVxuICAgICAgfSksXG4gICAgICBwcm90b3R5cGU6ICh7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBjOHlfRmlybXdhcmU6IGZpcm13YXJlXG4gICAgICB9IGFzIHVua25vd24pIGFzIElPcGVyYXRpb25cbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50OiBTdGVwcGVyU2VsZWN0aW9uRXZlbnQpIHtcbiAgICB0aGlzLnRleHRGaWx0ZXIkLm5leHQoJycpO1xuICAgIHN1cGVyLm9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50KTtcbiAgfVxufVxuIl19