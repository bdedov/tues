import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { uniq } from 'lodash-es';
import { BaseStepperComponent } from '../base-stepper.component';
import { SelectSoftwareStepComponent } from './software-update-stepper/select-software-step.component';
var StepperBulkTypeSoftware = /** @class */ (function (_super) {
    tslib_1.__extends(StepperBulkTypeSoftware, _super);
    function StepperBulkTypeSoftware(modal, translate) {
        var _this = _super.call(this) || this;
        _this.modal = modal;
        _this.translate = translate;
        _this.descriptionTemplateSingle = gettext('Update software to: {{ name }} (version {{ version }})');
        _this.descriptionTemplateOneOther = gettext('Update software to: {{ name }} (version {{ version }}) and one other');
        _this.descriptionTemplateMultiple = gettext('Update software to: {{ name }} (version {{ version }}) and {{ count }} others');
        _this.selectedSoftware = [];
        return _this;
    }
    StepperBulkTypeSoftware.prototype.onSoftwareSelected = function (selectedItem) {
        this.selectedSoftware = this.selectedSoftware.filter(function (item) { return item.software.id !== selectedItem.software.id; });
        this.selectedSoftware.push(selectedItem);
    };
    StepperBulkTypeSoftware.prototype.confirmSoftwareSelection = function ($event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var deviceTypes, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceTypes = this.getUniqueDeviceTypes();
                        this.deviceTypes = deviceTypes;
                        if (!(deviceTypes.length > 1)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.modal.confirm(gettext('Selected software for various device types'), gettext('Operation may fail due to unsupported software. Do you want to proceed?'), Status.WARNING, { ok: gettext('Confirm'), cancel: gettext('Cancel') })];
                    case 2:
                        _a.sent();
                        $event.stepper.next();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        this.selectedSoftware = [];
                        this.selectSoftware.resetSelection();
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        $event.stepper.next();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    StepperBulkTypeSoftware.prototype.retrieveOperationPrototype = function () {
        var softwareList = this.selectedSoftware.map(function (item) { return ({
            name: item.software.name,
            version: item.version.c8y_Software.version,
            url: item.version.c8y_Software.url,
            action: item.action
        }); });
        var interpolationParams = {
            name: softwareList[0].name,
            version: softwareList[0].version,
            count: softwareList.length - 1
        };
        var description;
        switch (softwareList.length) {
            case 1:
                description = this.translate.instant(this.descriptionTemplateSingle, interpolationParams);
                break;
            case 2:
                description = this.translate.instant(this.descriptionTemplateOneOther, interpolationParams);
                break;
            default:
                description = this.translate.instant(this.descriptionTemplateMultiple, interpolationParams);
        }
        return {
            name: gettext('Software update'),
            prototype: {
                description: description,
                c8y_SoftwareUpdate: softwareList
            }
        };
    };
    StepperBulkTypeSoftware.prototype.getUniqueDeviceTypes = function () {
        return uniq(this.selectedSoftware
            .map(function (item) { return item.software.c8y_Filter && item.software.c8y_Filter.type; })
            .filter(function (type) { return !!type; }));
    };
    StepperBulkTypeSoftware.ctorParameters = function () { return [
        { type: ModalService },
        { type: TranslateService }
    ]; };
    tslib_1.__decorate([
        ViewChild(SelectSoftwareStepComponent, { static: false })
    ], StepperBulkTypeSoftware.prototype, "selectSoftware", void 0);
    StepperBulkTypeSoftware = tslib_1.__decorate([
        Component({
            selector: 'c8y-stepper-bulk-type-software',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select software' | translate; \n      completed: !!selectedSoftware.length;\n      buttonsDisabled: !selectedSoftware.length; \n      onNext: confirmSoftwareSelection.bind(this)\"\n  >\n    <c8y-select-software-step\n      (software)=\"onSoftwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-software-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected software' | translate\">\n    <c8y-confirm-software-selection-step\n      class=\"d-contents\"\n      [selectedItems]=\"selectedSoftware\"\n    ></c8y-confirm-software-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperBulkTypeSoftware);
    return StepperBulkTypeSoftware;
}(BaseStepperComponent));
export { StepperBulkTypeSoftware };
//# sourceMappingURL=data:application/json;base64,