import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AlarmsDeviceGridColumn, DeviceGridComponent, GroupDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, StatusDeviceGridColumn, TypeDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { FilteringActionType } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
var DeviceSelectorComponent = /** @class */ (function () {
    function DeviceSelectorComponent() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    DeviceSelectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe(function (types) {
                _this.deviceGrid.updateFiltering([_this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types: types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    };
    DeviceSelectorComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    };
    tslib_1.__decorate([
        ViewChild(DeviceGridComponent, { static: true })
    ], DeviceSelectorComponent.prototype, "deviceGrid", void 0);
    tslib_1.__decorate([
        Input()
    ], DeviceSelectorComponent.prototype, "deviceTypes", void 0);
    tslib_1.__decorate([
        Output()
    ], DeviceSelectorComponent.prototype, "onDeviceQueryStringChange", void 0);
    DeviceSelectorComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-device-selector',
            template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n></c8y-device-grid>\n"
        })
    ], DeviceSelectorComponent);
    return DeviceSelectorComponent;
}());
export { DeviceSelectorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy8iLCJzb3VyY2VzIjpbImRldmljZS1zZWxlY3Rvci9kZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG9CQUFvQixFQUNwQixnQ0FBZ0MsRUFDaEMsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNyQixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBVSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTWpFO0lBSkE7UUFXRSxlQUFVLEdBQVcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBR2hELDhCQUF5QixHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBRTdFLFlBQU8sR0FBYTtZQUNsQixJQUFJLHNCQUFzQixFQUFFO1lBQzVCLElBQUksb0JBQW9CLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFVBQVU7WUFDZixJQUFJLHFCQUFxQixFQUFFO1lBQzNCLElBQUkscUJBQXFCLEVBQUU7WUFDM0IsSUFBSSxnQ0FBZ0MsRUFBRTtZQUN0QyxJQUFJLHNCQUFzQixFQUFFO1NBQzdCLENBQUM7UUFFTSxpQkFBWSxHQUFxQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBaUN6RCxDQUFDO0lBL0JDLDBDQUFRLEdBQVI7UUFBQSxpQkF5QkM7UUF4QkMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXO2lCQUNiLElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUM3QjtpQkFDQSxTQUFTLENBQUMsVUFBQyxLQUFlO2dCQUN6QixLQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3RELElBQUksRUFDRixLQUFLLElBQUksS0FBSyxDQUFDLE1BQU07d0JBQ25CLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO3dCQUNqQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsV0FBVztvQkFDckMsT0FBTyxFQUFFLEtBQUs7d0JBQ1osQ0FBQyxDQUFDOzRCQUNFLGlCQUFpQixFQUFFO2dDQUNqQixtQkFBbUIsRUFBRTtvQ0FDbkIsS0FBSyxPQUFBO2lDQUNOOzZCQUNGO3lCQUNGO3dCQUNILENBQUMsQ0FBQyxTQUFTO2lCQUNkLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRUQsNkNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQXBERDtRQURDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzsrREFDakI7SUFHaEM7UUFEQyxLQUFLLEVBQUU7Z0VBQzBCO0lBS2xDO1FBREMsTUFBTSxFQUFFOzhFQUNvRTtJQVZsRSx1QkFBdUI7UUFKbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixtUUFBNkM7U0FDOUMsQ0FBQztPQUNXLHVCQUF1QixDQXVEbkM7SUFBRCw4QkFBQztDQUFBLEFBdkRELElBdURDO1NBdkRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWxhcm1zRGV2aWNlR3JpZENvbHVtbixcbiAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgR3JvdXBEZXZpY2VHcmlkQ29sdW1uLFxuICBNb2RlbERldmljZUdyaWRDb2x1bW4sXG4gIE5hbWVEZXZpY2VHcmlkQ29sdW1uLFxuICBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbixcbiAgU3RhdHVzRGV2aWNlR3JpZENvbHVtbixcbiAgVHlwZURldmljZUdyaWRDb2x1bW5cbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBDb2x1bW4sIEZpbHRlcmluZ0FjdGlvblR5cGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1kZXZpY2Utc2VsZWN0b3InLFxuICB0ZW1wbGF0ZVVybDogJ2RldmljZS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlU2VsZWN0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoRGV2aWNlR3JpZENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSlcbiAgZGV2aWNlR3JpZDogRGV2aWNlR3JpZENvbXBvbmVudDtcblxuICBASW5wdXQoKVxuICBkZXZpY2VUeXBlczogT2JzZXJ2YWJsZTxzdHJpbmdbXT47XG5cbiAgdHlwZUNvbHVtbjogQ29sdW1uID0gbmV3IFR5cGVEZXZpY2VHcmlkQ29sdW1uKCk7XG5cbiAgQE91dHB1dCgpXG4gIG9uRGV2aWNlUXVlcnlTdHJpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgY29sdW1uczogQ29sdW1uW10gPSBbXG4gICAgbmV3IFN0YXR1c0RldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgTmFtZURldmljZUdyaWRDb2x1bW4oKSxcbiAgICB0aGlzLnR5cGVDb2x1bW4sXG4gICAgbmV3IE1vZGVsRGV2aWNlR3JpZENvbHVtbigpLFxuICAgIG5ldyBHcm91cERldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgUmVnaXN0cmF0aW9uRGF0ZURldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgQWxhcm1zRGV2aWNlR3JpZENvbHVtbigpXG4gIF07XG5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSQ6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRldmljZVR5cGVzKSB7XG4gICAgICB0aGlzLmRldmljZVR5cGVzXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgdGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKHR5cGVzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICAgIHRoaXMuZGV2aWNlR3JpZC51cGRhdGVGaWx0ZXJpbmcoW3RoaXMudHlwZUNvbHVtbi5uYW1lXSwge1xuICAgICAgICAgICAgdHlwZTpcbiAgICAgICAgICAgICAgdHlwZXMgJiYgdHlwZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyBGaWx0ZXJpbmdBY3Rpb25UeXBlLkFwcGx5RmlsdGVyXG4gICAgICAgICAgICAgICAgOiBGaWx0ZXJpbmdBY3Rpb25UeXBlLlJlc2V0RmlsdGVyLFxuICAgICAgICAgICAgcGF5bG9hZDogdHlwZXNcbiAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBmaWx0ZXJpbmdNb2RpZmllcjoge1xuICAgICAgICAgICAgICAgICAgICBleHRlcm5hbEZpbHRlclF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51bnN1YnNjcmliZSQubmV4dCh0cnVlKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=