import * as tslib_1 from "tslib";
import { Component, OnInit, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { AlertService, gettext } from '@c8y/ngx-components';
import { ImpactSubscriptionService } from './impact-subscription.service';
var RefreshActionComponent = /** @class */ (function () {
    function RefreshActionComponent(vcRef, router, impactService, alert) {
        this.vcRef = vcRef;
        this.router = router;
        this.impactService = impactService;
        this.alert = alert;
    }
    RefreshActionComponent.prototype.ngOnInit = function () {
        this.vcRef.createEmbeddedView(this.templateCopy);
    };
    RefreshActionComponent.prototype.refresh = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url, deviceId, res, data, _a, ex_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = this.router &&
                            this.router.routerState &&
                            this.router.routerState.snapshot &&
                            this.router.routerState.snapshot.url;
                        deviceId = url && (/^\/device\/(\d+)\/.*$/gi.exec(url) || [])[1];
                        if (!deviceId) return [3 /*break*/, 10];
                        this.requestInProgress = true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 8, , 9]);
                        return [4 /*yield*/, this.impactService.refreshDeviceResources(deviceId)];
                    case 2:
                        res = _b.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 6];
                        if (!res.json) return [3 /*break*/, 4];
                        return [4 /*yield*/, res.json()];
                    case 3:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = undefined;
                        _b.label = 5;
                    case 5:
                        data = _a;
                        this.alert.addServerFailure({ data: data, res: res });
                        return [3 /*break*/, 7];
                    case 6:
                        this.alert.success(gettext('Device resource refresh scheduled.'));
                        _b.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        ex_1 = _b.sent();
                        this.alert.addServerFailure(ex_1);
                        return [3 /*break*/, 9];
                    case 9:
                        this.requestInProgress = false;
                        return [3 /*break*/, 11];
                    case 10:
                        this.alert.danger(gettext('Could not find device ID in URL.'));
                        _b.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    RefreshActionComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Router },
        { type: ImpactSubscriptionService },
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        ViewChild('templateCopy', { read: TemplateRef, static: true })
    ], RefreshActionComponent.prototype, "templateCopy", void 0);
    RefreshActionComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-impact-refresh-action',
            template: "<ng-template #templateCopy>\n  <li>\n    <button\n      class=\"btn btn-link\"\n      title=\"{{ 'Refresh device resources' | translate }}\"\n      (click)=\"refresh()\"\n    >\n      <i class=\"fa fa-refresh\" [ngClass]=\"{ 'fa-spin': requestInProgress }\"></i>&nbsp;<span\n        translate\n        >Refresh device resources</span\n      >\n    </button>\n  </li>\n</ng-template>\n"
        })
    ], RefreshActionComponent);
    return RefreshActionComponent;
}());
export { RefreshActionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmcmVzaC1hY3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1pbXBhY3QvIiwic291cmNlcyI6WyJyZWZyZXNoLWFjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNMUU7SUFJRSxnQ0FDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsYUFBd0MsRUFDeEMsS0FBbUI7UUFIbkIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQzFCLENBQUM7SUFFSix5Q0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVLLHdDQUFPLEdBQWI7Ozs7Ozt3QkFHUSxHQUFHLEdBQ1AsSUFBSSxDQUFDLE1BQU07NEJBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXOzRCQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFROzRCQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO3dCQUNqQyxRQUFRLEdBQVcsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzZCQUUzRSxRQUFRLEVBQVIseUJBQVE7d0JBQ1YsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQzs7Ozt3QkFFQSxxQkFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxFQUFBOzt3QkFBL0UsR0FBRyxHQUFtQixTQUF5RDs2QkFDakYsQ0FBQSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUEsRUFBekIsd0JBQXlCOzZCQUNkLEdBQUcsQ0FBQyxJQUFJLEVBQVIsd0JBQVE7d0JBQUcscUJBQU0sR0FBRyxDQUFDLElBQUksRUFBRSxFQUFBOzt3QkFBaEIsS0FBQSxTQUFnQixDQUFBOzs7d0JBQUcsS0FBQSxTQUFTLENBQUE7Ozt3QkFBOUMsSUFBSSxLQUEwQzt3QkFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQzs7O3dCQUUzQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDOzs7Ozt3QkFHcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFFLENBQUMsQ0FBQzs7O3dCQUVsQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDOzs7d0JBRS9CLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7Ozs7OztLQUVsRTs7Z0JBckNnQixnQkFBZ0I7Z0JBQ2YsTUFBTTtnQkFDQyx5QkFBeUI7Z0JBQ2pDLFlBQVk7O0lBUG1DO1FBQS9ELFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztnRUFBYztJQURsRSxzQkFBc0I7UUFKbEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyw0WUFBOEM7U0FDL0MsQ0FBQztPQUNXLHNCQUFzQixDQTJDbEM7SUFBRCw2QkFBQztDQUFBLEFBM0NELElBMkNDO1NBM0NZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSUZldGNoUmVzcG9uc2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEltcGFjdFN1YnNjcmlwdGlvblNlcnZpY2UgfSBmcm9tICcuL2ltcGFjdC1zdWJzY3JpcHRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1pbXBhY3QtcmVmcmVzaC1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcmVmcmVzaC1hY3Rpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFJlZnJlc2hBY3Rpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZUNvcHknLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSkgdGVtcGxhdGVDb3B5O1xuICByZXF1ZXN0SW5Qcm9ncmVzczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBpbXBhY3RTZXJ2aWNlOiBJbXBhY3RTdWJzY3JpcHRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy52Y1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZUNvcHkpO1xuICB9XG5cbiAgYXN5bmMgcmVmcmVzaCgpIHtcbiAgICAvLyBUT0RPIFRoaXMgaXMgb25seSBhIGRpcnR5IGhhY2sgdG8gcmV0cmlldmUgZGV2aWNlSWQgZnJvbSBVUkw7XG4gICAgLy8gSW4gZmFjdCBjb250ZXh0RGF0YSBzaG91bGQgYmUgcHJvdmlkZWQgZm9yIHRoaXMgY29tcG9uZW50IGJ5IGEgcmVzb2x2ZXI/XG4gICAgY29uc3QgdXJsOiBzdHJpbmcgPVxuICAgICAgdGhpcy5yb3V0ZXIgJiZcbiAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlICYmXG4gICAgICB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdCAmJlxuICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3QudXJsO1xuICAgIGNvbnN0IGRldmljZUlkOiBzdHJpbmcgPSB1cmwgJiYgKC9eXFwvZGV2aWNlXFwvKFxcZCspXFwvLiokL2dpLmV4ZWModXJsKSB8fCBbXSlbMV07XG5cbiAgICBpZiAoZGV2aWNlSWQpIHtcbiAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzOiBJRmV0Y2hSZXNwb25zZSA9IGF3YWl0IHRoaXMuaW1wYWN0U2VydmljZS5yZWZyZXNoRGV2aWNlUmVzb3VyY2VzKGRldmljZUlkKTtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gcmVzLmpzb24gPyBhd2FpdCByZXMuanNvbigpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlcyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFsZXJ0LnN1Y2Nlc3MoZ2V0dGV4dCgnRGV2aWNlIHJlc291cmNlIHJlZnJlc2ggc2NoZWR1bGVkLicpKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgdGhpcy5hbGVydC5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbGVydC5kYW5nZXIoZ2V0dGV4dCgnQ291bGQgbm90IGZpbmQgZGV2aWNlIElEIGluIFVSTC4nKSk7XG4gICAgfVxuICB9XG59XG4iXX0=