import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ApplicationService } from '@c8y/client';
import { get } from 'lodash-es';
import { RefreshActionComponent } from './refresh-action.component';
var ImpactActionFactory = /** @class */ (function () {
    function ImpactActionFactory(applicationService) {
        this.applicationService = applicationService;
    }
    ImpactActionFactory_1 = ImpactActionFactory;
    ImpactActionFactory.prototype.get = function (activeRoute) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var actions, data, contextData, isDeviceInfoTab, showRefreshActionButton, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        actions = [];
                        data = !activeRoute.parent || activeRoute.snapshot.data.context
                            ? activeRoute.snapshot.data
                            : activeRoute.parent.snapshot.data;
                        contextData = data.contextData;
                        isDeviceInfoTab = get(activeRoute, 'snapshot.url[0].path') === 'device-info';
                        _a = isDeviceInfoTab &&
                            contextData &&
                            contextData.c8y_ImpactResourceInfo;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.applicationService.isAvailable(ImpactActionFactory_1.applicationName)];
                    case 1:
                        /* call application service only for relevant devices to reduce number of service calls! */
                        _a = (_b.sent()).data;
                        _b.label = 2;
                    case 2:
                        showRefreshActionButton = _a;
                        if (showRefreshActionButton) {
                            actions.push({
                                priority: 500,
                                placement: 'right',
                                template: RefreshActionComponent
                            });
                        }
                        return [2 /*return*/, actions];
                }
            });
        });
    };
    var ImpactActionFactory_1;
    ImpactActionFactory.applicationName = 'impact';
    ImpactActionFactory.ctorParameters = function () { return [
        { type: ApplicationService }
    ]; };
    ImpactActionFactory = ImpactActionFactory_1 = tslib_1.__decorate([
        Injectable()
    ], ImpactActionFactory);
    return ImpactActionFactory;
}());
export { ImpactActionFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LWFjdGlvbi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9wcm90b2NvbC1pbXBhY3QvIiwic291cmNlcyI6WyJpbXBhY3QtYWN0aW9uLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHcEU7SUFHRSw2QkFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDOzRCQUhuRCxtQkFBbUI7SUFLeEIsaUNBQUcsR0FBVCxVQUFVLFdBQTRCOzs7Ozs7d0JBQzlCLE9BQU8sR0FBb0IsRUFBRSxDQUFDO3dCQUU5QixJQUFJLEdBQ1IsQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87NEJBQ3RELENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUk7NEJBQzNCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7d0JBQy9CLFdBQVcsR0FBSyxJQUFJLFlBQVQsQ0FBVTt3QkFFdkIsZUFBZSxHQUFZLEdBQUcsQ0FBQyxXQUFXLEVBQUUsc0JBQXNCLENBQUMsS0FBSyxhQUFhLENBQUM7d0JBRzFGLEtBQUEsZUFBZTs0QkFDZixXQUFXOzRCQUNYLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQTtpQ0FGbEMsd0JBRWtDO3dCQUVqQyxxQkFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLHFCQUFtQixDQUFDLGVBQWUsQ0FBQyxFQUFBOzt3QkFEL0UsMkZBQTJGO3dCQUMzRixLQUFBLENBQUMsU0FBOEUsQ0FBQyxDQUFDLElBQUksQ0FBQTs7O3dCQUxqRix1QkFBdUIsS0FLMEQ7d0JBRXZGLElBQUksdUJBQXVCLEVBQUU7NEJBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0NBQ1gsUUFBUSxFQUFFLEdBQUc7Z0NBQ2IsU0FBUyxFQUFFLE9BQU87Z0NBQ2xCLFFBQVEsRUFBRSxzQkFBc0I7NkJBQ2hCLENBQUMsQ0FBQzt5QkFDckI7d0JBRUQsc0JBQU8sT0FBTyxFQUFDOzs7O0tBQ2hCOztJQS9CdUIsbUNBQWUsR0FBRyxRQUFRLENBQUM7O2dCQUVYLGtCQUFrQjs7SUFIL0MsbUJBQW1CO1FBRC9CLFVBQVUsRUFBRTtPQUNBLG1CQUFtQixDQWlDL0I7SUFBRCwwQkFBQztDQUFBLEFBakNELElBaUNDO1NBakNZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFjdGlvbkJhckZhY3RvcnksIEFjdGlvbkJhckl0ZW0gfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSZWZyZXNoQWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9yZWZyZXNoLWFjdGlvbi5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1wYWN0QWN0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhcHBsaWNhdGlvbk5hbWUgPSAnaW1wYWN0JztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcGxpY2F0aW9uU2VydmljZTogQXBwbGljYXRpb25TZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIGdldChhY3RpdmVSb3V0ZT86IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgY29uc3QgYWN0aW9uczogQWN0aW9uQmFySXRlbVtdID0gW107XG5cbiAgICBjb25zdCBkYXRhID1cbiAgICAgICFhY3RpdmVSb3V0ZS5wYXJlbnQgfHwgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5jb250ZXh0XG4gICAgICAgID8gYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YVxuICAgICAgICA6IGFjdGl2ZVJvdXRlLnBhcmVudC5zbmFwc2hvdC5kYXRhO1xuICAgIGNvbnN0IHsgY29udGV4dERhdGEgfSA9IGRhdGE7XG5cbiAgICBjb25zdCBpc0RldmljZUluZm9UYWI6IGJvb2xlYW4gPSBnZXQoYWN0aXZlUm91dGUsICdzbmFwc2hvdC51cmxbMF0ucGF0aCcpID09PSAnZGV2aWNlLWluZm8nO1xuXG4gICAgY29uc3Qgc2hvd1JlZnJlc2hBY3Rpb25CdXR0b246IGJvb2xlYW4gPVxuICAgICAgaXNEZXZpY2VJbmZvVGFiICYmXG4gICAgICBjb250ZXh0RGF0YSAmJlxuICAgICAgY29udGV4dERhdGEuYzh5X0ltcGFjdFJlc291cmNlSW5mbyAmJlxuICAgICAgLyogY2FsbCBhcHBsaWNhdGlvbiBzZXJ2aWNlIG9ubHkgZm9yIHJlbGV2YW50IGRldmljZXMgdG8gcmVkdWNlIG51bWJlciBvZiBzZXJ2aWNlIGNhbGxzISAqL1xuICAgICAgKGF3YWl0IHRoaXMuYXBwbGljYXRpb25TZXJ2aWNlLmlzQXZhaWxhYmxlKEltcGFjdEFjdGlvbkZhY3RvcnkuYXBwbGljYXRpb25OYW1lKSkuZGF0YTtcblxuICAgIGlmIChzaG93UmVmcmVzaEFjdGlvbkJ1dHRvbikge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDUwMCxcbiAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgICAgICB0ZW1wbGF0ZTogUmVmcmVzaEFjdGlvbkNvbXBvbmVudFxuICAgICAgfSBhcyBBY3Rpb25CYXJJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxufVxuIl19