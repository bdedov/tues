import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { assign, isEmpty } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, combineLatest, from, of } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, switchMap, take } from 'rxjs/operators';
import { ModalSelectionMode, gettext } from '@c8y/ngx-components';
import { IManagedObject, IOperation, InventoryService, OperationStatus } from '@c8y/client';
import { RepositoryService } from '../repository.service';
import { RepositoryType } from '../repository.model';
import { RepositorySelectModalComponent } from '../select-modal/repository-select-modal.component';
var FirmwareDeviceTabComponent = /** @class */ (function () {
    function FirmwareDeviceTabComponent(route, repository, inventory, bsModal) {
        var _this = this;
        this.route = route;
        this.repository = repository;
        this.inventory = inventory;
        this.bsModal = bsModal;
        this.isEmpty = isEmpty;
        this.reloading = false;
        this.device$ = new BehaviorSubject(this.route.parent.snapshot.data.contextData);
        this.deviceFirmwareFragment$ = this.device$.pipe(map(function (device) { return device.c8y_Firmware; }));
        this.firmwareBinary$ = this.deviceFirmwareFragment$.pipe(filter(function (deviceFirmwareFragment) { return !isEmpty(deviceFirmwareFragment); }), switchMap(function (deviceFirmwareFragment) {
            return from(_this.repository.getRepositoryBinaryMoByVersion(deviceFirmwareFragment, RepositoryType.FIRMWARE));
        }), shareReplay(1));
        this.repositoryEntry$ = this.firmwareBinary$.pipe(switchMap(function (mo) { return _this.repository.getRepositoryEntryMO$(mo); }), shareReplay(1));
        this.patches$ = combineLatest(this.firmwareBinary$, this.repositoryEntry$).pipe(switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), firmwareBinary = _b[0], repositoryEntry = _b[1];
            if (repositoryEntry && firmwareBinary) {
                var version = _this.repository.getBaseVersionFromMO(firmwareBinary);
                return from(_this.repository.listPatchVersions(repositoryEntry, version)).pipe(map(function (_a) {
                    var data = _a.data;
                    return data;
                }));
            }
            else {
                return of([]);
            }
        }), shareReplay(1));
        this.changesOperation$ = new BehaviorSubject(null);
        this.changesInProgress$ = this.changesOperation$.pipe(map(function (operation) { return _this.isInProgress(operation); }));
    }
    FirmwareDeviceTabComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // TODO check route snapshot, why is not refreshing device.
                    // Scanario: missing deviceFirmwareFragment => install new version => switch tabs.
                    // Expected: device should be set.
                    return [4 /*yield*/, this.loadDevice()];
                    case 1:
                        // TODO check route snapshot, why is not refreshing device.
                        // Scanario: missing deviceFirmwareFragment => install new version => switch tabs.
                        // Expected: device should be set.
                        _a.sent();
                        return [4 /*yield*/, this.loadOperation()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FirmwareDeviceTabComponent.prototype.installFirmware = function () {
        var _this = this;
        var initialState = {
            repositoryEntriesWithVersions$: of([]),
            repositoryEntriesWithVersionsFn$: function (modal) {
                return _this.getRepositoryEntriesWithVersions$(modal.content.searchTerm);
            },
            repositoryType: RepositoryType.FIRMWARE,
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(function (deviceFirmwareFragment) {
            if (deviceFirmwareFragment) {
                var name_1 = deviceFirmwareFragment.name, version = deviceFirmwareFragment.version;
                var selected = [{ name: name_1, version: version }];
                assign(initialState, { selected: selected });
            }
            var modal = _this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            if (initialState.repositoryEntriesWithVersionsFn$) {
                modal.content.repositoryEntriesWithVersions$ = initialState.repositoryEntriesWithVersionsFn$(modal);
            }
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 1), selectedFirmware = _b[0];
            _this.handleOperation(selectedFirmware);
        });
    };
    FirmwareDeviceTabComponent.prototype.getRepositoryEntriesWithVersions$ = function (searchTerm$) {
        var _this = this;
        return searchTerm$.pipe(distinctUntilChanged(), switchMap(function (searchTerm) {
            return _this.repository.listRepositoryEntries(RepositoryType.FIRMWARE, {
                query: _this.repository.getDeviceTypeQuery(RepositoryType.FIRMWARE, _this.device$.value),
                partialName: searchTerm,
                params: { pageSize: 100 }
            });
        }), map(function (_a) {
            var data = _a.data;
            return data;
        }), map(function (mos) { return _this.getAndAssignRepositoryBinaries(mos); }), shareReplay(1));
    };
    FirmwareDeviceTabComponent.prototype.getAndAssignRepositoryBinaries = function (mos) {
        var _this = this;
        mos.forEach(function (mo) {
            mo.versions = _this.repository.listBaseVersions(mo);
        });
        return mos;
    };
    FirmwareDeviceTabComponent.prototype.addPatch = function () {
        var _this = this;
        var initialState = {
            repositoryType: RepositoryType.FIRMWARE,
            repositoryEntriesWithVersions$: this.getRepositoryEntryWithPatches$(),
            title: gettext('Install firmware'),
            subTitle: gettext('Available firmwares matching the device type'),
            icon: 'c8y-firmware',
            mode: ModalSelectionMode.SINGLE,
            labels: { ok: gettext('Install') },
            disableSelected: false
        };
        this.deviceFirmwareFragment$
            .pipe(take(1), switchMap(function (deviceFirmwareFragment) {
            if (deviceFirmwareFragment) {
                var name_2 = deviceFirmwareFragment.name, version = deviceFirmwareFragment.version;
                var selected = [{ name: name_2, version: version }];
                assign(initialState, { selected: selected });
            }
            var modal = _this.bsModal.show(RepositorySelectModalComponent, {
                ignoreBackdropClick: true,
                initialState: initialState
            });
            modal.content.load.next();
            return modal.content.resultEmitter;
        }))
            .subscribe(function (selectedOption) {
            _this.handleOperation(selectedOption);
        });
    };
    FirmwareDeviceTabComponent.prototype.getRepositoryEntryWithPatches$ = function () {
        return combineLatest(this.repositoryEntry$, this.patches$).pipe(map(function (_a) {
            var _b = tslib_1.__read(_a, 2), repositoryEntry = _b[0], patches = _b[1];
            return [tslib_1.__assign({}, repositoryEntry, { versions: patches })];
        }));
    };
    FirmwareDeviceTabComponent.prototype.loadDevice = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var deviceId, device;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.reloading = true;
                        deviceId = this.device$.value.id;
                        return [4 /*yield*/, this.inventory.detail(deviceId, { withChildren: false })];
                    case 1:
                        device = (_a.sent()).data;
                        this.device$.next(device);
                        this.reloading = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    FirmwareDeviceTabComponent.prototype.handleOperation = function (selectedFirmware) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repository.createFirmwareUpdateOperation(this.device$.value, selectedFirmware)];
                    case 1:
                        operation = _a.sent();
                        this.trackOperation(operation);
                        return [2 /*return*/];
                }
            });
        });
    };
    FirmwareDeviceTabComponent.prototype.loadOperation = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var deviceId, operation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deviceId = this.device$.value.id;
                        return [4 /*yield*/, this.repository.getLastFirmwareUpdateOperation(deviceId)];
                    case 1:
                        operation = _a.sent();
                        this.trackOperation(operation);
                        return [2 /*return*/];
                }
            });
        });
    };
    FirmwareDeviceTabComponent.prototype.trackOperation = function (operation) {
        var _this = this;
        this.changesOperation$.next(operation);
        if (this.isInProgress(operation)) {
            this.repository.observeOperation(operation).subscribe(function (operationUpdate) {
                _this.changesOperation$.next(operationUpdate);
                if (operationUpdate.status === OperationStatus.SUCCESSFUL) {
                    _this.loadDevice();
                }
            }, function (operationUpdate) {
                _this.changesOperation$.next(operationUpdate);
            });
        }
    };
    FirmwareDeviceTabComponent.prototype.isInProgress = function (operation) {
        return (operation && [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(operation.status));
    };
    FirmwareDeviceTabComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: RepositoryService },
        { type: InventoryService },
        { type: BsModalService }
    ]; };
    FirmwareDeviceTabComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-firmware-device-tab',
            template: "<div class=\"row\">\n  <div class=\"col-lg-10\">\n    <div class=\"card card--fullpage\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\" translate>Current firmware</h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <fieldset *ngIf=\"changesOperation$ | async\" class=\"card-block bg-gray-white\">\n          <c8y-single-operation [operation]=\"changesOperation$ | async\"></c8y-single-operation>\n        </fieldset>\n        <div class=\"card-block p-t-0 p-b-0\">\n          <!-- EMPTY STATE -->\n          <ng-container *ngIf=\"isEmpty(deviceFirmwareFragment$ | async); else firmwareBlock\">\n            <div class=\"c8y-empty-state text-center\">\n              <h1 c8yIcon=\"c8y-firmware\" class=\"c8y-icon-duocolor\"></h1>\n              <p>\n                <strong translate>No firmware installed.</strong> <br />\n                <small translate>Click below to install firmware into this device.</small>\n              </p>\n            </div>\n          </ng-container>\n\n          <!-- FIRMWARE -->\n          <ng-template #firmwareBlock>\n            <c8y-list-group class=\"no-border-last \">\n              <c8y-li>\n                <c8y-li-icon>\n                  <i c8yIcon=\"c8y-firmware\"></i>\n                </c8y-li-icon>\n\n                <c8y-li-body *ngIf=\"deviceFirmwareFragment$ | async as deviceFirmwareFragment\">\n                  <!-- Firmware title -->\n                  <p class=\"m-b-16 text-medium\">\n                    {{ deviceFirmwareFragment.name }}\n                  </p>\n                  <!-- Firmware description -->\n                  <div *ngIf=\"repositoryEntry$ | async as repositoryEntry\">\n                    <p class=\"text-label-small\" translate>\n                      Description\n                    </p>\n                    <p>\n                      {{ repositoryEntry.description }}\n                    </p>\n                  </div>\n                  <!-- BASE/PATCH VERSION -->\n                  <div class=\"m-b-16\">\n                    <p class=\"text-label-small\" translate>\n                      Version\n                    </p>\n                    <p *ngIf=\"deviceFirmwareFragment.version; else versionNotSpecified\">\n                      {{ deviceFirmwareFragment.version }}\n                    </p>\n                    <ng-template #versionNotSpecified>\n                      <p>\n                        <em class=\"text-muted\"> ({{ 'not specified`version`' | translate }}) </em>\n                      </p>\n                    </ng-template>\n                  </div>\n               \n                  <!-- ADD PATCH -->\n                  <button\n                    *ngIf=\"(this.patches$ | async)?.length > 0\"\n                    (click)=\"addPatch()\"\n                    class=\"btn btn-xs btn-primary\"\n                    [disabled]=\"changesInProgress$ | async\"\n                    translate\n                  >\n                    Patches available\n                  </button>\n                </c8y-li-body>\n              </c8y-li>\n            </c8y-list-group>\n          </ng-template>\n        </div>\n      </div>\n      <div class=\"card-footer separator-top\">\n        <!-- INSTALL FIRMWARE -->\n        <button\n          *ngIf=\"isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          translate\n        >\n          Install firmware\n        </button>\n\n        <!-- REPLACE FIRMWARE -->\n        <button\n          *ngIf=\"!isEmpty(deviceFirmwareFragment$ | async)\"\n          class=\"btn btn-primary\"\n          (click)=\"installFirmware()\"\n          [disabled]=\"changesInProgress$ | async\"\n          translate\n        >\n          Replace firmware\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], FirmwareDeviceTabComponent);
    return FirmwareDeviceTabComponent;
}());
export { FirmwareDeviceTabComponent };
//# sourceMappingURL=data:application/json;base64,