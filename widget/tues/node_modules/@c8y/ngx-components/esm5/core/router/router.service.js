import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { fromFactories } from '../common/extension-hooks';
import { TabsService } from '../tabs/tabs.service';
import { ContextRouteService } from './context-route.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../tabs/tabs.service";
import * as i3 from "./context-route.service";
/**
 * A hook to use for Multi Provider extension.
 */
export var HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A service which defines routes
 */
var RouterService = /** @class */ (function () {
    function RouterService(factories, router, tabsService, contextRouteService) {
        var _this = this;
        this.router = router;
        this.tabsService = tabsService;
        this.contextRouteService = contextRouteService;
        fromFactories(factories).subscribe(function (routes) {
            _this.addRoute(routes);
        });
    }
    /**
     * Refresh the current context
     */
    RouterService.prototype.refresh = function () {
        this.contextRouteService.refreshContext();
    };
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    RouterService.prototype.addRoute = function (route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    };
    RouterService.prototype.addRoutes = function (routes) {
        var _this = this;
        var emptyRoute = this.router.config.find(function (r) { return r.path === '**'; });
        this.router.resetConfig(tslib_1.__spread(this.router.config.filter(function (r) { return r.path !== '**'; }), routes.map(function (r) { return _this.convertRoute(_this.router.config, r); }), [
            emptyRoute
        ]).filter(Boolean));
    };
    RouterService.prototype.convertRoute = function (initialConfig, route) {
        if (route.context) {
            initialConfig.forEach(function (r) {
                if (r.data && r.data.context === route.context) {
                    r.children = tslib_1.__spread([route], (r.children || []));
                }
            });
            return;
        }
        return route;
    };
    RouterService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_ONCE_ROUTE,] }] },
        { type: Router },
        { type: TabsService },
        { type: ContextRouteService }
    ]; };
    RouterService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.ɵɵinject(HOOK_ONCE_ROUTE, 8), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.TabsService), i0.ɵɵinject(i3.ContextRouteService)); }, token: RouterService, providedIn: "root" });
    RouterService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(HOOK_ONCE_ROUTE))
    ], RouterService);
    return RouterService;
}());
export { RouterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9yb3V0ZXIvcm91dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7O0FBRTlEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFHLElBQUksY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRWxFOztHQUVHO0FBSUg7SUFDRSx1QkFDdUMsU0FBeUIsRUFDdEQsTUFBYyxFQUNmLFdBQXdCLEVBQ3ZCLG1CQUF3QztRQUpsRCxpQkFTQztRQVBTLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN2Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBRWhELGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUFlO1lBQ2pELEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCwrQkFBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQ0FBUSxHQUFSLFVBQVMsS0FBc0I7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8saUNBQVMsR0FBakIsVUFBa0IsTUFBTTtRQUF4QixpQkFTQztRQVJDLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFmLENBQWUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUNyQixpQkFDSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBZixDQUFlLENBQUMsRUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQVEsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQXhDLENBQXdDLENBQUM7WUFDckUsVUFBVTtXQUNWLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFTyxvQ0FBWSxHQUFwQixVQUFxQixhQUFhLEVBQUUsS0FBWTtRQUM5QyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDakIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQVE7Z0JBQzdCLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsT0FBTyxFQUFFO29CQUM5QyxDQUFDLENBQUMsUUFBUSxxQkFBSSxLQUFLLEdBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzdDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPO1NBQ1I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OzRDQTlDRSxRQUFRLFlBQUksTUFBTSxTQUFDLGVBQWU7Z0JBQ25CLE1BQU07Z0JBQ0YsV0FBVztnQkFDRixtQkFBbUI7OztJQUx2QyxhQUFhO1FBSHpCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7UUFHRyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtPQUYzQixhQUFhLENBaUR6Qjt3QkFuRUQ7Q0FtRUMsQUFqREQsSUFpREM7U0FqRFksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZnJvbUZhY3RvcmllcyB9IGZyb20gJy4uL2NvbW1vbi9leHRlbnNpb24taG9va3MnO1xuaW1wb3J0IHsgUm91dGVGYWN0b3J5LCBSb3V0ZSB9IGZyb20gJy4vcm91dGVyLm1vZGVscyc7XG5pbXBvcnQgeyBUYWJzU2VydmljZSB9IGZyb20gJy4uL3RhYnMvdGFicy5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRleHRSb3V0ZVNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtcm91dGUuc2VydmljZSc7XG5cbi8qKlxuICogQSBob29rIHRvIHVzZSBmb3IgTXVsdGkgUHJvdmlkZXIgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgY29uc3QgSE9PS19PTkNFX1JPVVRFID0gbmV3IEluamVjdGlvblRva2VuKCdSb3V0ZUZhY3RvcnknKTtcblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggZGVmaW5lcyByb3V0ZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUm91dGVyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoSE9PS19PTkNFX1JPVVRFKSBmYWN0b3JpZXM6IFJvdXRlRmFjdG9yeVtdLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHVibGljIHRhYnNTZXJ2aWNlOiBUYWJzU2VydmljZSxcbiAgICBwcml2YXRlIGNvbnRleHRSb3V0ZVNlcnZpY2U6IENvbnRleHRSb3V0ZVNlcnZpY2VcbiAgKSB7XG4gICAgZnJvbUZhY3RvcmllcyhmYWN0b3JpZXMpLnN1YnNjcmliZSgocm91dGVzOiBSb3V0ZVtdKSA9PiB7XG4gICAgICB0aGlzLmFkZFJvdXRlKHJvdXRlcyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaCB0aGUgY3VycmVudCBjb250ZXh0XG4gICAqL1xuICByZWZyZXNoKCkge1xuICAgIHRoaXMuY29udGV4dFJvdXRlU2VydmljZS5yZWZyZXNoQ29udGV4dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyByb3V0ZSB0byB0aGUgcm91dGVyIGNvbmZpZ3VyYXRpb24gb3IgYSBjb250ZXh0LlxuICAgKiBAcGFyYW0gcm91dGUgVGhlIHJvdXRlIHRvIGFkZFxuICAgKi9cbiAgYWRkUm91dGUocm91dGU6IFJvdXRlIHwgUm91dGVbXSkge1xuICAgIHRoaXMuYWRkUm91dGVzKEFycmF5LmlzQXJyYXkocm91dGUpID8gcm91dGUgOiBbcm91dGVdKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkUm91dGVzKHJvdXRlcykge1xuICAgIGNvbnN0IGVtcHR5Um91dGUgPSB0aGlzLnJvdXRlci5jb25maWcuZmluZChyID0+IHIucGF0aCA9PT0gJyoqJyk7XG4gICAgdGhpcy5yb3V0ZXIucmVzZXRDb25maWcoXG4gICAgICBbXG4gICAgICAgIC4uLnRoaXMucm91dGVyLmNvbmZpZy5maWx0ZXIociA9PiByLnBhdGggIT09ICcqKicpLFxuICAgICAgICAuLi5yb3V0ZXMubWFwKChyOiBSb3V0ZSkgPT4gdGhpcy5jb252ZXJ0Um91dGUodGhpcy5yb3V0ZXIuY29uZmlnLCByKSksXG4gICAgICAgIGVtcHR5Um91dGVcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFJvdXRlKGluaXRpYWxDb25maWcsIHJvdXRlOiBSb3V0ZSkge1xuICAgIGlmIChyb3V0ZS5jb250ZXh0KSB7XG4gICAgICBpbml0aWFsQ29uZmlnLmZvckVhY2goKHI6IFJvdXRlKSA9PiB7XG4gICAgICAgIGlmIChyLmRhdGEgJiYgci5kYXRhLmNvbnRleHQgPT09IHJvdXRlLmNvbnRleHQpIHtcbiAgICAgICAgICByLmNoaWxkcmVuID0gW3JvdXRlLCAuLi4oci5jaGlsZHJlbiB8fCBbXSldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG59XG4iXX0=