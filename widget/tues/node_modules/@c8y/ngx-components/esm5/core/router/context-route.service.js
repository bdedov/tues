import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { ActivatedRoute, NavigationEnd, PRIMARY_OUTLET, Router, UrlSegmentGroup, UrlTree } from '@angular/router';
import { ApiService, ApiCall } from '@c8y/ngx-components/api';
import { NEVER, Subject } from 'rxjs';
import { filter, merge, switchMap } from 'rxjs/operators';
import { TabsService } from '../tabs/tabs.service';
import { RouterTabsResolver } from './router-tabs.resolver';
import { ViewContextServices } from './view-context.service';
import * as i0 from "@angular/core";
import * as i1 from "./router-tabs.resolver";
import * as i2 from "../tabs/tabs.service";
import * as i3 from "@angular/router";
import * as i4 from "@c8y/ngx-components/api";
var ContextRouteService = /** @class */ (function () {
    function ContextRouteService(tabsResolver, tabsService, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
    }
    ContextRouteService.prototype.init = function (route) {
        var _this = this;
        this.routerSubscription = this.router.events
            .pipe(filter(function (e) { return e instanceof NavigationEnd; }))
            .subscribe(function () { return _this.redirectToFirstTab(); });
        this.dataSubscription = route.data
            .pipe(merge(this.updatedContext(route), this.refreshTrigger), switchMap(function () { return _this.tabsResolver.resolve(route.snapshot); }))
            .subscribe(function (tabs) { return _this.updateTabs(tabs); });
    };
    ContextRouteService.prototype.destroy = function () {
        var _this = this;
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
    };
    ContextRouteService.prototype.refreshContext = function () {
        this.refreshTrigger.next();
    };
    ContextRouteService.prototype.updatedContext = function (route) {
        var data = route.snapshot.data;
        var serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            var service = this.injector.get(serviceInstance);
            var detailsUrlRegex = service.getDetailUrl(data.contextData).replace(/\d+/g, '?\\d*');
            var contextRegex_1 = new RegExp(detailsUrlRegex, 'i');
            var childrenRegex_1 = new RegExp(detailsUrlRegex + "/child", 'i');
            var filterResponse = function (_a) {
                var url = _a.url, method = _a.method;
                var contextChanged = contextRegex_1.test(url) && ['POST', 'PUT'].includes(method);
                var childrenAffected = childrenRegex_1.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    };
    ContextRouteService.prototype.updateTabs = function (tabs) {
        var _this = this;
        if (tabs === void 0) { tabs = []; }
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
        this.lastAddedTabs = tabs;
        tabs.forEach(function (t) { return _this.tabsService.add(t); });
        this.redirectToFirstTab();
    };
    ContextRouteService.prototype.redirectToFirstTab = function () {
        var _this = this;
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.subscribe(function (tab) {
                if (tab) {
                    _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    };
    ContextRouteService.prototype.needsRedirect = function () {
        var tree = this.router.parseUrl(this.router.url);
        var groups = tree.root.children[PRIMARY_OUTLET];
        var isContextRoute = groups.segments.length === 2;
        return isContextRoute;
    };
    ContextRouteService.ctorParameters = function () { return [
        { type: RouterTabsResolver },
        { type: TabsService },
        { type: Router },
        { type: ApiService },
        { type: Injector }
    ]; };
    ContextRouteService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ContextRouteService_Factory() { return new ContextRouteService(i0.ɵɵinject(i1.RouterTabsResolver), i0.ɵɵinject(i2.TabsService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.ApiService), i0.ɵɵinject(i0.INJECTOR)); }, token: ContextRouteService, providedIn: "root" });
    ContextRouteService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ContextRouteService);
    return ContextRouteService;
}());
export { ContextRouteService };
//# sourceMappingURL=data:application/json;base64,