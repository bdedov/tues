import * as tslib_1 from "tslib";
import { Component, OnInit, ContentChildren, QueryList, ContentChild, AfterContentInit, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ForceHtmlTranslateDirective } from '../i18n/force-html-translate.directive';
var GuideDocsComponent = /** @class */ (function () {
    function GuideDocsComponent(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    GuideDocsComponent.prototype.ngOnInit = function () {
        this.baseUrl = this.docs.getBaseUrl();
    };
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    GuideDocsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
    };
    /**
     * Find and modify anchor elements
     */
    GuideDocsComponent.prototype.replaceAnchorAttributes = function () {
        var _this = this;
        var anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(function (a) {
            var guideHref = _this.baseUrl + "/" + a.getAttribute('c8y-guide-href');
            _this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                _this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    };
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    GuideDocsComponent.prototype.findGuideAnchors = function (el) {
        var _this = this;
        var isAnchor = function () { return el.nodeName === 'A'; };
        var hasGuideHrefAttr = function () { return !!el.attributes.getNamedItem('c8y-guide-href'); };
        var hasChildren = function () { return el.childNodes && el.childNodes.length > 0; };
        var result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach(function (node) {
                var searchResult = _this.findGuideAnchors(node);
                if (searchResult) {
                    result = tslib_1.__spread(result, searchResult);
                }
            });
        }
        return result;
    };
    GuideDocsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.links.forEach(function (guide) {
            guide.baseHref = _this.baseUrl;
        });
    };
    GuideDocsComponent.prototype.ngOnDestroy = function () {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    };
    GuideDocsComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        ContentChildren(GuideHrefDirective, { descendants: true })
    ], GuideDocsComponent.prototype, "links", void 0);
    tslib_1.__decorate([
        ContentChild(ForceHtmlTranslateDirective, { static: false })
    ], GuideDocsComponent.prototype, "translateDirective", void 0);
    GuideDocsComponent = tslib_1.__decorate([
        Component({
            selector: '[c8y-guide-docs]',
            template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
        })
    ], GuideDocsComponent);
    return GuideDocsComponent;
}());
export { GuideDocsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUtZG9jcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kb2NzL2d1aWRlLWRvY3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixlQUFlLEVBQ2YsU0FBUyxFQUNULFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLFNBQVMsRUFBRSxTQUFTLEVBQ3JCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQU1yRjtJQVlFLDRCQUFvQixJQUFpQixFQUFVLEVBQWMsRUFBVSxRQUFtQjtRQUF0RSxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGbEYsZUFBVSxHQUEyQixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUyQixDQUFDO0lBRTlGLHFDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILCtDQUFrQixHQUFsQjtRQUFBLGlCQVVDO1FBVEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWU7aUJBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMs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O1lBQ1QsUUFBUSxFQUFFLGtCQUFrQjtZQUM1Qiw4RkFBMEM7U0FDM0MsQ0FBQztPQUNXLGtCQUFrQixDQWlGOUI7SUFBRCx5QkFBQztDQUFBLEFBakZELElBaUZDO1NBakZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgQ29udGVudENoaWxkLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEd1aWRlSHJlZkRpcmVjdGl2ZSB9IGZyb20gJy4vZ3VpZGUtaHJlZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRG9jc1NlcnZpY2UgfSBmcm9tICcuL2RvY3Muc2VydmljZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGb3JjZUh0bWxUcmFuc2xhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9pMThuL2ZvcmNlLWh0bWwtdHJhbnNsYXRlLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tjOHktZ3VpZGUtZG9jc10nLFxuICB0ZW1wbGF0ZVVybDogJy4vZ3VpZGUtZG9jcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgR3VpZGVEb2NzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBiYXNlVXJsOiBzdHJpbmc7XG4gIEBDb250ZW50Q2hpbGRyZW4oR3VpZGVIcmVmRGlyZWN0aXZlLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIGxpbmtzOiBRdWVyeUxpc3Q8R3VpZGVIcmVmRGlyZWN0aXZlPjtcblxuICAvKipcbiAgICogUHJvdmlkZXMgYWNjZXNzIHRvIHRyYW5zbGF0ZSBkaXJlY3RpdmUsIHNvIGl0IGlzIHBvc3NpYmxlIHRvIGFkanVzdCBhbmNob3IgaHRtbCB0YWdzLCBhZnRlclxuICAgKiBjb250ZW50IGlzIHRyYW5zbGF0ZWQuXG4gICAqL1xuICBAQ29udGVudENoaWxkKEZvcmNlSHRtbFRyYW5zbGF0ZURpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIHRyYW5zbGF0ZURpcmVjdGl2ZTtcblxuICBwcml2YXRlIGRlc3Ryb3llZCQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvY3M6IERvY3NTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5iYXNlVXJsID0gdGhpcy5kb2NzLmdldEJhc2VVcmwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBjb250ZW50IGlzIGluaXRpYWxpemVkIHdlIHN1YnNjcmliZSBmb3IgdHJhbnNsYXRpb24gZXZlbnRzLCB0aGVuIHdlIGFyZSBhYmxlIHRvIG1vZGlmeVxuICAgKiBhbmNob3IganVzdCBhcyBDOHlHdWlkZUhyZWZEaXJlY3RpdmUgZG9lcy5cbiAgICovXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy50cmFuc2xhdGVEaXJlY3RpdmUpIHtcbiAgICAgIHRoaXMudHJhbnNsYXRlRGlyZWN0aXZlLmh0bWxVcGRhdGVFdmVudFxuICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFuZCBtb2RpZnkgYW5jaG9yIGVsZW1lbnRzXG4gICAqL1xuICByZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhbmNob3JzID0gdGhpcy5maW5kR3VpZGVBbmNob3JzKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgYW5jaG9ycy5mb3JFYWNoKGEgPT4ge1xuICAgICAgY29uc3QgZ3VpZGVIcmVmID0gYCR7dGhpcy5iYXNlVXJsfS8ke2EuZ2V0QXR0cmlidXRlKCdjOHktZ3VpZGUtaHJlZicpfWA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAnaHJlZicsIGd1aWRlSHJlZik7XG4gICAgICBpZiAoIWEuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZSBmdW5jdGlvbiwgcmV0dXJucyBhcnJheSBvZiBBbmNob3IgZWxlbWVudHMgaW5zaWRlIEhUTUxFbGVtZW50LlxuICAgKi9cbiAgZmluZEd1aWRlQW5jaG9ycyhlbDogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudFtdIHtcbiAgICBjb25zdCBpc0FuY2hvciA9ICgpID0+IGVsLm5vZGVOYW1lID09PSAnQSc7XG4gICAgY29uc3QgaGFzR3VpZGVIcmVmQXR0ciA9ICgpID0+ICEhZWwuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2M4eS1ndWlkZS1ocmVmJyk7XG4gICAgY29uc3QgaGFzQ2hpbGRyZW4gPSAoKSA9PiBlbC5jaGlsZE5vZGVzICYmIGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMDtcblxuICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgIGlmIChpc0FuY2hvcigpICYmIGhhc0d1aWRlSHJlZkF0dHIoKSkge1xuICAgICAgcmVzdWx0LnB1c2goZWwpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2hpbGRyZW4oKSkge1xuICAgICAgZWwuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSB0aGlzLmZpbmRHdWlkZUFuY2hvcnMobm9kZSk7XG4gICAgICAgIGlmIChzZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSBbLi4ucmVzdWx0LCAuLi5zZWFyY2hSZXN1bHRdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmxpbmtzLmZvckVhY2goZ3VpZGUgPT4ge1xuICAgICAgZ3VpZGUuYmFzZUhyZWYgPSB0aGlzLmJhc2VVcmw7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCh0cnVlKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19