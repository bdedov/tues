import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { InventoryService, UserService } from '@c8y/client';
import { from } from 'rxjs';
import { switchMap, first } from 'rxjs/operators';
import { UserPreferencesStorageLocal } from './user-preferences-storage-local';
import { UserPreferencesStorageInventory } from './user-preferences-store-inventory';
import { AppStateService } from '../ui-state.service';
var UserPreferencesService = /** @class */ (function () {
    function UserPreferencesService(user, inventory, appState) {
        this.user = user;
        this.inventory = inventory;
        this.appState = appState;
        this.LOCAL_STORAGE_KEY = 'userPreferences';
        this.storage = {
            local: new UserPreferencesStorageLocal(),
            inventory: new UserPreferencesStorageInventory(this.inventory)
        };
        this.currentUser = this.appState.currentUser;
    }
    UserPreferencesService.prototype.get = function (key) {
        var _this = this;
        return this.currentUser.pipe(first(), switchMap(function (user) { return _this.getForUser(key, user); }));
    };
    UserPreferencesService.prototype.set = function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.currentUser.pipe(first()).subscribe(function (user) {
                resolve(_this.setForUser(key, value, user));
            }, reject);
        });
    };
    UserPreferencesService.prototype.getForUser = function (key, user) {
        var rawKey = this.getRawKey(key, user);
        var storage = this.getStorage(user);
        return from(storage.get(rawKey));
    };
    UserPreferencesService.prototype.setForUser = function (key, value, user) {
        var rawKey = this.getRawKey(key, user);
        var storage = this.getStorage(user);
        return Promise.resolve(storage.set(rawKey, value));
    };
    UserPreferencesService.prototype.getRawKey = function (key, user) {
        var username = user.userName.replace(/\./g, '__');
        return "" + key + username;
    };
    UserPreferencesService.prototype.getStorage = function (user) {
        return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
            this.storage.inventory : this.storage.local;
    };
    UserPreferencesService.ctorParameters = function () { return [
        { type: UserService },
        { type: InventoryService },
        { type: AppStateService }
    ]; };
    UserPreferencesService = tslib_1.__decorate([
        Injectable()
    ], UserPreferencesService);
    return UserPreferencesService;
}());
export { UserPreferencesService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvY29tbW9uL3VzZXItcHJlZmVyZW5jZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUQsT0FBTyxFQUFjLElBQUksRUFBUyxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd0RDtJQU9FLGdDQUNVLElBQWlCLEVBQ2pCLFNBQTJCLEVBQzNCLFFBQXlCO1FBRnpCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFSM0Isc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFVNUMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLDJCQUEyQixFQUFFO1lBQ3hDLFNBQVMsRUFBRSxJQUFJLCtCQUErQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDL0QsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7SUFDL0MsQ0FBQztJQUVELG9DQUFHLEdBQUgsVUFBSSxHQUFHO1FBQVAsaUJBS0M7UUFKQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUMxQixLQUFLLEVBQUUsRUFDUCxTQUFTLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUNoRCxDQUFDO0lBQ0osQ0FBQztJQUVELG9DQUFHLEdBQUgsVUFBSSxHQUFHLEVBQUUsS0FBSztRQUFkLGlCQVFDO1FBUEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUNuQixLQUFLLEVBQUUsQ0FDUixDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQUk7Z0JBQ2YsT0FBTyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzdDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDJDQUFVLEdBQVYsVUFBVyxHQUFHLEVBQUUsSUFBSTtRQUNsQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsMkNBQVUsR0FBVixVQUFXLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUN6QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTywwQ0FBUyxHQUFqQixVQUFrQixHQUFHLEVBQUUsSUFBSTtRQUN6QixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxLQUFHLEdBQUcsR0FBRyxRQUFVLENBQUM7SUFDN0IsQ0FBQztJQUVPLDJDQUFVLEdBQWxCLFVBQW1CLElBQUk7UUFDckIsT0FBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDaEQsQ0FBQzs7Z0JBaERlLFdBQVc7Z0JBQ04sZ0JBQWdCO2dCQUNqQixlQUFlOztJQVZ4QixzQkFBc0I7UUFEbEMsVUFBVSxFQUFFO09BQ0Esc0JBQXNCLENBMERsQztJQUFELDZCQUFDO0NBQUEsQUExREQsSUEwREM7U0ExRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW52ZW50b3J5U2VydmljZSwgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBJVXNlciB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIG5ldmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU3RvcmFnZUxvY2FsIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLXN0b3JhZ2UtbG9jYWwnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU3RvcmFnZUludmVudG9yeSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy1zdG9yZS1pbnZlbnRvcnknO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdWktc3RhdGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIHtcbiAgY3VycmVudFVzZXI6IE9ic2VydmFibGU8SVVzZXI+O1xuICBwcml2YXRlIExPQ0FMX1NUT1JBR0VfS0VZID0gJ3VzZXJQcmVmZXJlbmNlcyc7XG4gIHByaXZhdGUgc3RvcmFnZToge1xuICAgIGxvY2FsOiBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlTG9jYWwsXG4gICAgaW52ZW50b3J5OiBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlSW52ZW50b3J5XG4gIH07XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdXNlcjogVXNlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnk6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHtcbiAgICAgIGxvY2FsOiBuZXcgVXNlclByZWZlcmVuY2VzU3RvcmFnZUxvY2FsKCksXG4gICAgICBpbnZlbnRvcnk6IG5ldyBVc2VyUHJlZmVyZW5jZXNTdG9yYWdlSW52ZW50b3J5KHRoaXMuaW52ZW50b3J5KVxuICAgIH07XG4gICAgdGhpcy5jdXJyZW50VXNlciA9IHRoaXMuYXBwU3RhdGUuY3VycmVudFVzZXI7XG4gIH1cblxuICBnZXQoa2V5KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VXNlci5waXBlKFxuICAgICAgZmlyc3QoKSxcbiAgICAgIHN3aXRjaE1hcCgodXNlcikgPT4gdGhpcy5nZXRGb3JVc2VyKGtleSwgdXNlcikpXG4gICAgKTtcbiAgfVxuXG4gIHNldChrZXksIHZhbHVlKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jdXJyZW50VXNlci5waXBlKFxuICAgICAgICBmaXJzdCgpXG4gICAgICApLnN1YnNjcmliZSgodXNlcikgPT4ge1xuICAgICAgICByZXNvbHZlKHRoaXMuc2V0Rm9yVXNlcihrZXksIHZhbHVlLCB1c2VyKSk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Rm9yVXNlcihrZXksIHVzZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJhd0tleSA9IHRoaXMuZ2V0UmF3S2V5KGtleSwgdXNlcik7XG4gICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSh1c2VyKTtcbiAgICByZXR1cm4gZnJvbShzdG9yYWdlLmdldChyYXdLZXkpKTtcbiAgfVxuXG4gIHNldEZvclVzZXIoa2V5LCB2YWx1ZSwgdXNlcik6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgcmF3S2V5ID0gdGhpcy5nZXRSYXdLZXkoa2V5LCB1c2VyKTtcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKHVzZXIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RvcmFnZS5zZXQocmF3S2V5LCB2YWx1ZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSYXdLZXkoa2V5LCB1c2VyKSB7XG4gICAgY29uc3QgdXNlcm5hbWUgPSB1c2VyLnVzZXJOYW1lLnJlcGxhY2UoL1xcLi9nLCAnX18nKTtcbiAgICByZXR1cm4gYCR7a2V5fSR7dXNlcm5hbWV9YDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RvcmFnZSh1c2VyKSB7XG4gICAgcmV0dXJuICB0aGlzLnVzZXIuaGFzQWxsUm9sZXModXNlciwgWydST0xFX0lOVkVOVE9SWV9SRUFEJywgJ1JPTEVfSU5WRU5UT1JZX0FETUlOJ10pID9cbiAgICAgIHRoaXMuc3RvcmFnZS5pbnZlbnRvcnkgOiB0aGlzLnN0b3JhZ2UubG9jYWw7XG4gIH1cblxufVxuIl19