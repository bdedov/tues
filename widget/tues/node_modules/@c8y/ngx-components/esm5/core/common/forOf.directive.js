import * as tslib_1 from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ComponentFactory, ComponentFactoryResolver, Directive, EmbeddedViewRef, Input, SimpleChanges, TemplateRef, ViewContainerRef, ViewRef } from '@angular/core';
import { assign, get } from 'lodash-es';
import { isObservable, of, pipe, Subject } from 'rxjs';
import { map, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from './load-more.component';
/**
 * A directive to iterate over IResultList<T> data from @c8y/client.
 * Depending on the [c8yForLoadMore] a load more button is:
 *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
 *          change with maxIterations settings).
 *  - show: Shows a load more button for the user to decide
 *  - none: Doesn't perform any load more action.
 *  - hidden: Loads more data automatically but with no visible button for the user.
 *
 * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
 * filter the data displayed currently as well as the data loaded by subsequent requests.
 *
 * Example:
 * ```html
 * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
 *  {{ i + 1 }}. {{device.name}}
 * </div>
 * ```
 * The above example will list all entities that are applied to `devices`:
 * ```typescript
 * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
 * ```
 * It will display the first 10 items, if there is more space left on the screen, and there are more
 * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
 * it will stop and switch to `show` mode.
 *
 * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
 * request done by the load more component:
 * ```typescript
 * this.filterPipe = pipe(
 *    map((data: []) => {
 *     return data.filter(
 *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
 *    );
 *  })
 * );
 * ```
 * The pipe must be an rxjs pipe and can take any operator.
 */
var ForOfDirective = /** @class */ (function () {
    function ForOfDirective(tpl, vcr, componentFactoryResolver) {
        this.tpl = tpl;
        this.vcr = vcr;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cachedData = [];
        this.loadMoreMode = 'auto';
        this.dataPipe = pipe(tap());
        this.maxIterations = 10;
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(ForOfDirective.prototype, "shouldUseLoadMoreButton", {
        get: function () {
            return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "hasMoreData", {
        get: function () {
            return this.loadMore && this.loadMore.hasMore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "length", {
        get: function () {
            return this.cachedData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForOf", {
        /**
         * The data setter. Must be a response from @c8y/data or an observable.
         * You can pass an observable with null to explicitly clear the list.
         */
        set: function (fetchData) {
            var _this = this;
            if (fetchData) {
                this.obs$ = (isObservable(fetchData) ? fetchData : of(fetchData)).pipe(map(function (result) {
                    if (result === null) {
                        _this.paging = null;
                        return [];
                    }
                    var paging = result.paging, data = result.data;
                    _this.paging = paging;
                    return data;
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForLoadMore", {
        /**
         * The mode setter:
         *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
         *          change with maxIterations settings).
         *  - show: Shows a load more button for the user to decide
         *  - none: Doesn't perform any load more action.
         *  - hidden: Loads more data automatically but with no visible button for the user.
         */
        set: function (type) {
            this.loadMoreMode = type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForPipe", {
        /**
         * The pipe setter to attach any rxjs pipe to the current and more loaded data.
         */
        set: function (dataPipe) {
            if (dataPipe) {
                this.dataPipe = dataPipe;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForNotFound", {
        /**
         * A template to use if no data is found at all (e.g. if you apply a filter pipe).
         */
        set: function (notFoundTemplate) {
            this.notFoundTemplate = notFoundTemplate;
            if (this.loadMore) {
                this.loadMore.noMoreDataHint = notFoundTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForMaxIterations", {
        /**
         * The maximum numbers of iterations to call data from the api.
         */
        set: function (maxIterations) {
            this.maxIterations = maxIterations;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForRealtime", {
        /**
         * A RealtimeService instance.
         */
        set: function (source) {
            this.realtime = source;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ForOfDirective.prototype, "c8yForComparator", {
        /**
         * A comparator function for comparing list items. Used to determine
         * the position at which a new element should be added to the list.
         */
        set: function (comparator) {
            this.comparator = comparator;
        },
        enumerable: true,
        configurable: true
    });
    ForOfDirective.prototype.ngOnInit = function () {
        this.handleRealtime();
    };
    ForOfDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
            this.unsubscribePaging();
            // only re-rendering  on filtering if all data is already loaded
            // from the backend
            var reRender_1 = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
            if (reRender_1) {
                this.obs$ = of(this.cachedData);
            }
            this.pagingSub = this.obs$
                .pipe(tap(function (data) {
                if (!reRender_1) {
                    _this.cachedData = data;
                }
            }))
                .pipe(function (src) { return _this.dataPipe(src); })
                .subscribe(function (data) {
                _this.render(data, reRender_1);
            });
        }
    };
    ForOfDirective.prototype.ngOnDestroy = function () {
        this.unsubscribePaging();
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    ForOfDirective.prototype.handleRealtime = function () {
        var _this = this;
        if (this.realtime) {
            this.realtime
                .onCreate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (item) { return _this.insert(item); });
            this.realtime
                .onUpdate$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (item) { return _this.update(item); });
            this.realtime
                .onDelete$()
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (id) { return _this.remove(coerceNumberProperty(id)); });
        }
    };
    ForOfDirective.prototype.render = function (data, reRender) {
        var _this = this;
        if (reRender === void 0) { reRender = false; }
        this.vcr.clear();
        data.forEach(function (item, index) {
            var context = {
                $implicit: item,
                index: index,
                length: _this.length,
                hasMore: _this.hasMoreData
            };
            _this.vcr.createEmbeddedView(_this.tpl, context);
        });
        if (this.shouldUseLoadMoreButton) {
            this.loadMore = this.createLoadMoreButtonComponent(reRender);
        }
    };
    ForOfDirective.prototype.append = function (data) {
        var _this = this;
        data.forEach(function (item) {
            var index = _this.shouldUseLoadMoreButton ? _this.vcr.length - 1 : _this.vcr.length;
            var context = {
                $implicit: item,
                index: index,
                length: _this.length,
                hasMore: _this.hasMoreData
            };
            _this.vcr.createEmbeddedView(_this.tpl, context, index);
        });
    };
    ForOfDirective.prototype.loadMoreData = function (data) {
        if (data.length > 0) {
            this.append(data);
        }
    };
    ForOfDirective.prototype.createLoadMoreButtonComponent = function (reRender) {
        var _this = this;
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
        var componentRef = this.vcr.createComponent(componentFactory);
        var instance = componentRef.instance;
        instance.paging = this.paging;
        instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
        instance.hidden = this.loadMoreMode === 'hidden';
        instance.maxIterations = this.maxIterations;
        instance.noMoreDataHint = this.notFoundTemplate;
        this.pagingSub = instance.onLoad
            .pipe(map(function (data) { return _this.checkForDuplicates(data); }), tap(function (data) {
            _this.cachedData = _this.cachedData.concat(data);
        }))
            .pipe(function (src) { return _this.dataPipe(src); })
            .subscribe(function (data) { return _this.loadMoreData(data); });
        if (reRender) {
            assign(instance, this.loadMore);
        }
        return instance;
    };
    ForOfDirective.prototype.insert = function (item) {
        var index = 0;
        if (this.comparator && this.cachedData.length) {
            var comparisionResult = void 0;
            do {
                var view = this.vcr.get(index);
                var itemB = get(view, 'context.$implicit');
                comparisionResult = item && itemB ? this.comparator(item, itemB) : 0;
                if (comparisionResult <= 0) {
                    index++;
                }
            } while (comparisionResult <= 0 && index < this.cachedData.length);
        }
        // Do not append elements after the last one currently loaded,
        // as it may belong further down there on the list and will
        // be eventually loaded with one of the next pages.
        if (index < this.cachedData.length || this.cachedData.length === 0) {
            var context = {
                $implicit: item,
                index: index,
                length: this.length,
                hasMore: this.hasMoreData
            };
            this.cachedData.splice(index, 0, item);
            var viewRef = this.tpl.createEmbeddedView(context);
            this.vcr.insert(viewRef, index);
        }
    };
    ForOfDirective.prototype.update = function (updatedItem) {
        this.forMatchingEmbeddedViewRef(function (item) { return item && updatedItem && item.id === updatedItem.id; }, function (view) {
            view.context.$implicit = updatedItem;
            view.markForCheck();
        });
    };
    ForOfDirective.prototype.remove = function (idToRemove) {
        this.forMatchingEmbeddedViewRef(function (item) { return item && coerceNumberProperty(item.id, NaN) === idToRemove; }, function (view) { return view.destroy(); });
    };
    ForOfDirective.prototype.forMatchingEmbeddedViewRef = function (filter, callback) {
        for (var i = 0; i < this.vcr.length; i++) {
            var view = this.vcr.get(i);
            var item = get(view, 'context.$implicit');
            if (filter(item)) {
                callback(view);
            }
        }
    };
    ForOfDirective.prototype.checkForDuplicates = function (data) {
        var _this = this;
        return this.realtime
            ? data.filter(function (item) { return !_this.cachedData.some(function (cached) { return cached.id === item.id; }); })
            : data;
    };
    ForOfDirective.prototype.unsubscribePaging = function () {
        if (this.pagingSub) {
            this.pagingSub.unsubscribe();
        }
    };
    ForOfDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForOf", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForLoadMore", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForPipe", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForNotFound", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForMaxIterations", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForRealtime", null);
    tslib_1.__decorate([
        Input()
    ], ForOfDirective.prototype, "c8yForComparator", null);
    ForOfDirective = tslib_1.__decorate([
        Directive({
            selector: '[c8yFor]'
        })
    ], ForOfDirective);
    return ForOfDirective;
}());
export { ForOfDirective };
//# sourceMappingURL=data:application/json;base64,