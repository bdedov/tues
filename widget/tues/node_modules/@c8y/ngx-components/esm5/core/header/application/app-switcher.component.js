import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ApplicationService, IApplication, ICurrentTenant, IUser } from '@c8y/client';
import { get, includes, orderBy } from 'lodash-es';
import { combineLatest } from 'rxjs';
import { first } from 'rxjs/operators';
import { AppStateService } from '../../common/ui-state.service';
var AppSwitcherComponent = /** @class */ (function () {
    function AppSwitcherComponent(ui, applications) {
        var _this = this;
        this.ui = ui;
        this.applications = applications;
        var _a = this.ui, currentUser = _a.currentUser, currentTenant = _a.currentTenant;
        combineLatest(currentUser, currentTenant)
            .pipe(first())
            .subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), user = _b[0], tenant = _b[1];
            _this.tenant = tenant;
            _this.listAppsForUser(user);
        });
    }
    Object.defineProperty(AppSwitcherComponent.prototype, "hideCloudApps", {
        get: function () {
            return false; // this should be configurable from outside
        },
        enumerable: true,
        configurable: true
    });
    AppSwitcherComponent.prototype.isActive = function (app) {
        return app.contextPath === this.ui.state.app.contextPath;
    };
    AppSwitcherComponent.prototype.getHref = function (app) {
        return this.applications.getHref(app);
    };
    AppSwitcherComponent.prototype.listAppsForUser = function (user) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.applications.listByUser(user, { pageSize: 1000 })];
                    case 1:
                        data = (_a.sent()).data;
                        this.apps = this.orderApps(this.filterApps(data));
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    AppSwitcherComponent.prototype.filterApps = function (apps) {
        apps = this.filterVisible(apps);
        apps = this.filterCloud(apps);
        apps = this.filterDuplicates(apps);
        return apps;
    };
    AppSwitcherComponent.prototype.filterVisible = function (apps) {
        var visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        return apps.filter(function (app) {
            return includes(visibleApplicationTypes, app.type) &&
                !app.noAppSwitcher &&
                !get(app, 'manifest.noAppSwitcher');
        });
    };
    AppSwitcherComponent.prototype.filterCloud = function (apps) {
        var hideCloudApps = this.hideCloudApps;
        var filterFn = function (app) { return !!app.cloud; };
        if (!hideCloudApps) {
            this.oneCloudApps = this.orderApps(apps.filter(filterFn));
        }
        return apps.filter(function (app) { return !filterFn(app); });
    };
    AppSwitcherComponent.prototype.filterDuplicates = function (apps) {
        var _this = this;
        // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
        var filterFn = function (app) {
            return !apps.some(function (otherApp) {
                return app !== otherApp &&
                    (app.contextPath && app.contextPath === otherApp.contextPath) &&
                    app.owner.tenant.id !== _this.tenant.name;
            });
        };
        return apps.filter(filterFn);
    };
    AppSwitcherComponent.prototype.orderApps = function (apps) {
        return orderBy(apps, function (_a) {
            var name = _a.name;
            return name.toLowerCase();
        });
    };
    AppSwitcherComponent.ctorParameters = function () { return [
        { type: AppStateService },
        { type: ApplicationService }
    ]; };
    AppSwitcherComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-app-switcher',
            template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n  >\n    <i class=\"fa-2x fa fw fa-th\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n        c8yProductExperience\n        [actionName]=\"'appSwitched'\"\n        [actionData]=\"{ applicationName: app && app.name }\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
        })
    ], AppSwitcherComponent);
    return AppSwitcherComponent;
}());
export { AppSwitcherComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN3aXRjaGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2hlYWRlci9hcHBsaWNhdGlvbi9hcHAtc3dpdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0RixPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS2hFO0lBU0UsOEJBQW9CLEVBQW1CLEVBQVUsWUFBZ0M7UUFBakYsaUJBUUM7UUFSbUIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBb0I7UUFDekUsSUFBQSxZQUF3QyxFQUF0Qyw0QkFBVyxFQUFFLGdDQUF5QixDQUFDO1FBQy9DLGFBQWEsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDO2FBQ3RDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNiLFNBQVMsQ0FBQyxVQUFDLEVBQWM7Z0JBQWQsMEJBQWMsRUFBYixZQUFJLEVBQUUsY0FBTTtZQUN2QixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUNyQixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQVpELHNCQUFZLCtDQUFhO2FBQXpCO1lBQ0UsT0FBTyxLQUFLLENBQUMs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QUFPLENBQUMsSUFBSSxFQUFFLFVBQUMsRUFBUTtnQkFBTixjQUFJO1lBQU8sT0FBQSxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQWxCLENBQWtCLENBQUMsQ0FBQztJQUN6RCxDQUFDOztnQkFqRXVCLGVBQWU7Z0JBQXdCLGtCQUFrQjs7SUFUdEUsb0JBQW9CO1FBSmhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsKzlDQUE0QztTQUM3QyxDQUFDO09BQ1csb0JBQW9CLENBMkVoQztJQUFELDJCQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0EzRVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblNlcnZpY2UsIElBcHBsaWNhdGlvbiwgSUN1cnJlbnRUZW5hbnQsIElVc2VyIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgZ2V0LCBpbmNsdWRlcywgb3JkZXJCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hcHAtc3dpdGNoZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vYXBwLXN3aXRjaGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBcHBTd2l0Y2hlckNvbXBvbmVudCB7XG4gIG9uZUNsb3VkQXBwcz86IEFycmF5PElBcHBsaWNhdGlvbiAmIHsgW2tleTogc3RyaW5nXTogYW55IH0+O1xuICBhcHBzOiBBcnJheTxJQXBwbGljYXRpb24gJiB7IFtrZXk6IHN0cmluZ106IGFueSB9PjtcbiAgb3BlbjogYm9vbGVhbjtcblxuICBwcml2YXRlIGdldCBoaWRlQ2xvdWRBcHBzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTsgLy8gdGhpcyBzaG91bGQgYmUgY29uZmlndXJhYmxlIGZyb20gb3V0c2lkZVxuICB9XG4gIHByaXZhdGUgdGVuYW50OiBJQ3VycmVudFRlbmFudDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1aTogQXBwU3RhdGVTZXJ2aWNlLCBwcml2YXRlIGFwcGxpY2F0aW9uczogQXBwbGljYXRpb25TZXJ2aWNlKSB7XG4gICAgY29uc3QgeyBjdXJyZW50VXNlciwgY3VycmVudFRlbmFudCB9ID0gdGhpcy51aTtcbiAgICBjb21iaW5lTGF0ZXN0KGN1cnJlbnRVc2VyLCBjdXJyZW50VGVuYW50KVxuICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgIC5zdWJzY3JpYmUoKFt1c2VyLCB0ZW5hbnRdKSA9PiB7XG4gICAgICAgIHRoaXMudGVuYW50ID0gdGVuYW50O1xuICAgICAgICB0aGlzLmxpc3RBcHBzRm9yVXNlcih1c2VyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaXNBY3RpdmUoYXBwOiBJQXBwbGljYXRpb24pIHtcbiAgICByZXR1cm4gYXBwLmNvbnRleHRQYXRoID09PSB0aGlzLnVpLnN0YXRlLmFwcC5jb250ZXh0UGF0aDtcbiAgfVxuXG4gIGdldEhyZWYoYXBwOiBJQXBwbGljYXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbnMuZ2V0SHJlZihhcHApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsaXN0QXBwc0ZvclVzZXIodXNlcjogSVVzZXIgfCBudWxsKSB7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hcHBsaWNhdGlvbnMubGlzdEJ5VXNlcih1c2VyLCB7IHBhZ2VTaXplOiAxMDAwIH0pO1xuICAgICAgdGhpcy5hcHBzID0gdGhpcy5vcmRlckFwcHModGhpcy5maWx0ZXJBcHBzKGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckFwcHMoYXBwcykge1xuICAgIGFwcHMgPSB0aGlzLmZpbHRlclZpc2libGUoYXBwcyk7XG4gICAgYXBwcyA9IHRoaXMuZmlsdGVyQ2xvdWQoYXBwcyk7XG4gICAgYXBwcyA9IHRoaXMuZmlsdGVyRHVwbGljYXRlcyhhcHBzKTtcbiAgICByZXR1cm4gYXBwcztcbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyVmlzaWJsZShhcHBzKSB7XG4gICAgY29uc3QgdmlzaWJsZUFwcGxpY2F0aW9uVHlwZXMgPSBbJ0hPU1RFRCcsICdFWFRFUk5BTCddO1xuICAgIHJldHVybiBhcHBzLmZpbHRlcihcbiAgICAgIGFwcCA9PlxuICAgICAgICBpbmNsdWRlcyh2aXNpYmxlQXBwbGljYXRpb25UeXBlcywgYXBwLnR5cGUpICYmXG4gICAgICAgICFhcHAubm9BcHBTd2l0Y2hlciAmJlxuICAgICAgICAhZ2V0KGFwcCwgJ21hbmlmZXN0Lm5vQXBwU3dpdGNoZXInKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckNsb3VkKGFwcHMpIHtcbiAgICBjb25zdCB7IGhpZGVDbG91ZEFwcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgZmlsdGVyRm4gPSBhcHAgPT4gISFhcHAuY2xvdWQ7XG4gICAgaWYgKCFoaWRlQ2xvdWRBcHBzKSB7XG4gICAgICB0aGlzLm9uZUNsb3VkQXBwcyA9IHRoaXMub3JkZXJBcHBzKGFwcHMuZmlsdGVyKGZpbHRlckZuKSk7XG4gICAgfVxuICAgIHJldHVybiBhcHBzLmZpbHRlcihhcHAgPT4gIWZpbHRlckZuKGFwcCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJEdXBsaWNhdGVzKGFwcHMpIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGFwcHMgdGhhdCBoYXZlIGR1cGxpY2F0ZSBjb250ZXh0cGF0aHMgYW5kIGFyZSBub3Qgb3duIG93bmVkIGJ1dCB0aGUgY3VycmVudCB0ZW5hbnQ7XG4gICAgY29uc3QgZmlsdGVyRm4gPSBhcHAgPT5cbiAgICAgICFhcHBzLnNvbWUoXG4gICAgICAgIG90aGVyQXBwID0+XG4gICAgICAgICAgYXBwICE9PSBvdGhlckFwcCAmJlxuICAgICAgICAgIChhcHAuY29udGV4dFBhdGggJiYgYXBwLmNvbnRleHRQYXRoID09PSBvdGhlckFwcC5jb250ZXh0UGF0aCkgJiZcbiAgICAgICAgICBhcHAub3duZXIudGVuYW50LmlkICE9PSB0aGlzLnRlbmFudC5uYW1lXG4gICAgICApO1xuICAgIHJldHVybiBhcHBzLmZpbHRlcihmaWx0ZXJGbik7XG4gIH1cblxuICBwcml2YXRlIG9yZGVyQXBwcyhhcHBzKSB7XG4gICAgcmV0dXJuIG9yZGVyQnkoYXBwcywgKHsgbmFtZSB9KSA9PiBuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG4iXX0=