import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { PopoverDirective } from 'ngx-bootstrap/popover';
import { gettext } from '../i18n/gettext';
/**
 * A component to show a popover right next to the
 * user action. Add this component where the confirm modal
 * should be shown and toggle isOpen to display it. You
 * can use `await isShow()` to wait for a result on the
 * click action.
 */
var PopoverConfirmComponent = /** @class */ (function () {
    function PopoverConfirmComponent() {
        this.buttons = [{ label: gettext('cancel'), action: function () { return Promise.reject(); } }];
        this.isOpen = false;
        this.containerClass = '';
        this.placement = 'right';
        this.outsideClick = false;
    }
    /**
     * Show the popover. Wait until an action is performed on it.
     */
    PopoverConfirmComponent.prototype.show = function (buttons) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, ex_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.buttons = buttons || this.buttons;
                        this.isOpen = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                return _this.click = function (action) { return action().then(resolve).catch(reject); };
                            })];
                    case 2:
                        result = _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        ex_1 = _a.sent();
                        throw (ex_1);
                    case 4:
                        this.isOpen = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/, result];
                }
            });
        });
    };
    PopoverConfirmComponent.prototype.buttonStatus = function (status) {
        if (status) {
            return "btn-" + status;
        }
        return 'btn-link btn-clean';
    };
    PopoverConfirmComponent.prototype.handleOutsideClick = function () {
        this.click(function () { return Promise.reject(); });
    };
    tslib_1.__decorate([
        ViewChild(PopoverDirective, { static: false })
    ], PopoverConfirmComponent.prototype, "popover", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "buttons", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "message", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "isOpen", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "containerClass", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "placement", void 0);
    tslib_1.__decorate([
        Input()
    ], PopoverConfirmComponent.prototype, "outsideClick", void 0);
    PopoverConfirmComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-popover-confirm',
            template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"bottom-m\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm right-m-md\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
        })
    ], PopoverConfirmComponent);
    return PopoverConfirmComponent;
}());
export { PopoverConfirmComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL21vZGFsL3BvcG92ZXItY29uZmlybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFpQjFDOzs7Ozs7R0FNRztBQUtIO0lBSkE7UUFNVyxZQUFPLEdBQTRCLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxjQUFNLE9BQUEsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFoQixDQUFnQixFQUFDLENBQUMsQ0FBQztRQUdqRyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2YsbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFDcEIsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUNwQixpQkFBWSxHQUFHLEtBQUssQ0FBQztJQWlDaEMsQ0FBQztJQTdCQzs7T0FFRztJQUNHLHNDQUFJLEdBQVYsVUFBVyxPQUFpQzs7Ozs7Ozt3QkFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQzt3QkFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Ozs7d0JBR1IscUJBQU0sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQ0FDekMsT0FBTyxLQUFJLENBQUMsS0FBSyxHQUFHLFVBQUMsTUFBMEIsSUFBSyxPQUFBLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQXBDLENBQW9DLENBQUM7NEJBQzNGLENBQUMsQ0FBQyxFQUFBOzt3QkFGRixNQUFNLEdBQUcsU0FFUCxDQUFDOzs7O3dCQUVILE1BQUssQ0FBQyxJQUFFLENBQUMsQ0FBQzs7d0JBRVYsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7OzRCQUV0QixzQkFBTyxNQUFNLEVBQUM7Ozs7S0FDZjtJQUVELDhDQUFZLEdBQVosVUFBYSxNQUFNO1FBQ2pCLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxTQUFPLE1BQVEsQ0FBQztTQUN4QjtRQUNELE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztJQUVELG9EQUFrQixHQUFsQjtRQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUF2QzZDO1FBQTdDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQzs0REFBMkI7SUFDL0Q7UUFBUixLQUFLLEVBQUU7NERBQWtHO0lBQ2pHO1FBQVIsS0FBSyxFQUFFOzREQUFpQjtJQUNoQjtRQUFSLEtBQUssRUFBRTswREFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFOzJEQUFnQjtJQUNmO1FBQVIsS0FBSyxFQUFFO21FQUFxQjtJQUNwQjtRQUFSLEtBQUssRUFBRTs4REFBcUI7SUFDcEI7UUFBUixLQUFLLEVBQUU7aUVBQXNCO0lBUm5CLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLGl3QkFBK0M7U0FDaEQsQ0FBQztPQUNXLHVCQUF1QixDQXlDbkM7SUFBRCw4QkFBQztDQUFBLEFBekNELElBeUNDO1NBekNZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb3BvdmVyRGlyZWN0aXZlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9wb3BvdmVyJztcbmltcG9ydCB7IFN0YXR1c1R5cGUgfSBmcm9tICcuLi9jb21tb24vc3RhdHVzLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvcG92ZXJDb25maXJtQnV0dG9ucyB7XG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGJ1dHRvblxuICAgKi9cbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIFdoaWNoIGFjdGlvbiB0byBwZXJmb3JtLlxuICAgKi9cbiAgYWN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT47XG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIGNsYXNzIGF0dGFjaGVkIHRvIHRoZSBidXR0b24uXG4gICAqL1xuICBzdGF0dXM/OiBTdGF0dXNUeXBlIHwgJ3ByaW1hcnknO1xufVxuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHNob3cgYSBwb3BvdmVyIHJpZ2h0IG5leHQgdG8gdGhlXG4gKiB1c2VyIGFjdGlvbi4gQWRkIHRoaXMgY29tcG9uZW50IHdoZXJlIHRoZSBjb25maXJtIG1vZGFsXG4gKiBzaG91bGQgYmUgc2hvd24gYW5kIHRvZ2dsZSBpc09wZW4gdG8gZGlzcGxheSBpdC4gWW91XG4gKiBjYW4gdXNlIGBhd2FpdCBpc1Nob3coKWAgdG8gd2FpdCBmb3IgYSByZXN1bHQgb24gdGhlXG4gKiBjbGljayBhY3Rpb24uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wb3BvdmVyLWNvbmZpcm0nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG9wb3Zlci1jb25maXJtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb3BvdmVyQ29uZmlybUNvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoUG9wb3ZlckRpcmVjdGl2ZSwge3N0YXRpYzogZmFsc2V9KSBwb3BvdmVyOiBQb3BvdmVyRGlyZWN0aXZlO1xuICBASW5wdXQoKSBidXR0b25zOiBQb3BvdmVyQ29uZmlybUJ1dHRvbnNbXSA9IFt7IGxhYmVsOiBnZXR0ZXh0KCdjYW5jZWwnKSwgYWN0aW9uOiAoKSA9PiBQcm9taXNlLnJlamVjdCgpfV07XG4gIEBJbnB1dCgpIG1lc3NhZ2U6IHN0cmluZztcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgaXNPcGVuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNvbnRhaW5lckNsYXNzID0gJyc7XG4gIEBJbnB1dCgpIHBsYWNlbWVudCA9ICdyaWdodCc7XG4gIEBJbnB1dCgpIG91dHNpZGVDbGljayA9IGZhbHNlO1xuXG4gIGNsaWNrOiAoYWN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT4pID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIHBvcG92ZXIuIFdhaXQgdW50aWwgYW4gYWN0aW9uIGlzIHBlcmZvcm1lZCBvbiBpdC5cbiAgICovXG4gIGFzeW5jIHNob3coYnV0dG9ucz86IFBvcG92ZXJDb25maXJtQnV0dG9uc1tdKSB7XG4gICAgdGhpcy5idXR0b25zID0gYnV0dG9ucyB8fCB0aGlzLmJ1dHRvbnM7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpY2sgPSAoYWN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT4pID0+IGFjdGlvbigpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aHJvdyhleCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBidXR0b25TdGF0dXMoc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgcmV0dXJuIGBidG4tJHtzdGF0dXN9YDtcbiAgICB9XG4gICAgcmV0dXJuICdidG4tbGluayBidG4tY2xlYW4nO1xuICB9XG5cbiAgaGFuZGxlT3V0c2lkZUNsaWNrKCkge1xuICAgIHRoaXMuY2xpY2soKCkgPT4gUHJvbWlzZS5yZWplY3QoKSk7XG4gIH1cbn1cbiJdfQ==