import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { filter, mergeMap, take } from 'rxjs/operators';
import { fromFactories } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { HOOK_COMPONENT, HOOK_COMPONENTS } from './dynamic-component.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
var DynamicComponentService = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicComponentService, _super);
    function DynamicComponentService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.refreshTrigger = new Subject();
        _this.state$ = new BehaviorSubject(new Set());
        _this.items$ = fromFactories([function () { return _this.injector.get(HOOK_COMPONENTS, []); }, function () { return _this.getComponentsViaDeprecatedHook(); }], router, false);
        _this.items$.subscribe(function (cmps) {
            cmps.forEach(function (cmp) {
                _this.state.add(cmp);
            });
            _this.emitNewState();
        });
        return _this;
    }
    DynamicComponentService.prototype.getComponentsViaDeprecatedHook = function () {
        var componentsViaDeprecatedHook = this.injector.get(HOOK_COMPONENT, []);
        if (componentsViaDeprecatedHook &&
            componentsViaDeprecatedHook.length &&
            __MODE__ !== 'production') {
            console.warn('HOOK_COMPONENT is now deprecated. Use HOOK_COMPONENTS instead.');
        }
        return componentsViaDeprecatedHook;
    };
    DynamicComponentService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    Object.defineProperty(DynamicComponentService.prototype, "state", {
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a component by it's id as an observable.
     * @param id The id of the component.
     */
    DynamicComponentService.prototype.getById$ = function (id) {
        return this.state$.pipe(filter(function (cmps) { return cmps.size > 0; }), mergeMap(function (cmps) {
            return of(Array.from(cmps).find(function (cmp) { return cmp.id === id; }));
        }), take(1));
    };
    DynamicComponentService.prototype.add = function (component) {
        this.state.add(component);
        this.emitNewState();
    };
    DynamicComponentService.prototype.remove = function (component) {
        this.state.delete(component);
        this.emitNewState();
    };
    DynamicComponentService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    DynamicComponentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: DynamicComponentService, providedIn: "root" });
    DynamicComponentService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], DynamicComponentService);
    return DynamicComponentService;
}(StateService));
export { DynamicComponentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2R5bmFtaWMtY29tcG9uZW50L2R5bmFtaWMtY29tcG9uZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFrQixhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEUsT0FBTyxFQUVMLGNBQWMsRUFDZCxlQUFlLEVBQ2hCLE1BQU0sMkJBQTJCLENBQUM7OztBQU9uQztJQUE2QyxtREFBWTtJQVF2RCxpQ0FBb0IsUUFBa0IsRUFBRSxNQUFjO1FBQXRELFlBQ0UsaUJBQU8sU0FhUjtRQWRtQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBTDdCLG9CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMvQixZQUFNLEdBQUcsSUFBSSxlQUFlLENBQ25DLElBQUksR0FBRyxFQUE4QixDQUN0QyxDQUFDO1FBS0EsS0FBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQ3pCLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsRUFBdEMsQ0FBc0MsRUFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLDhCQUE4QixFQUFFLEVBQXJDLENBQXFDLENBQUMsRUFDM0YsTUFBTSxFQUNOLEtBQUssQ0FDTixDQUFDO1FBQ0YsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQSxJQUFJO1lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO2dCQUNkLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDOztJQUNMLENBQUM7SUFFRCxnRUFBOEIsR0FBOUI7UUFDRSxJQUFNLDJCQUEyQixHQUFpQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDakYsY0FBYyxFQUNkLEVBQUUsQ0FDNkIsQ0FBQztRQUNsQyxJQUNFLDJCQUEyQjtZQUMzQiwyQkFBMkIsQ0FBQyxNQUFNO1lBQ2xDLFFBQVEsS0FBSyxZQUFZLEVBQ3pCO1lBQ0EsT0FBTyxDQUFDLElBQUksQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsT0FBTywyQkFBMkIsQ0FBQztJQUNyQyxDQUFDO0lBRUQseUNBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxzQkFBSSwwQ0FBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQUVEOzs7T0FHRztJQUNILDBDQUFRLEdBQVIsVUFBUyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsTUFBTSxDQUFDLFVBQUMsSUFBcUMsSUFBSyxPQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFiLENBQWEsQ0FBQyxFQUNoRSxRQUFRLENBQUMsVUFBQyxJQUFxQztZQUM3QyxPQUFBLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFiLENBQWEsQ0FBQyxDQUFDO1FBQS9DLENBQStDLENBQ2hELEVBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQscUNBQUcsR0FBSCxVQUFJLFNBQXFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsd0NBQU0sR0FBTixVQUFPLFNBQXFDO1FBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDOztnQkE5RDZCLFFBQVE7Z0JBQVUsTUFBTTs7O0lBUjNDLHVCQUF1QjtRQUhuQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csdUJBQXVCLENBdUVuQztrQ0F4RkQ7Q0F3RkMsQUF2RUQsQ0FBNkMsWUFBWSxHQXVFeEQ7U0F2RVksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1lcmdlTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uUG9pbnQsIGZyb21GYWN0b3JpZXMgfSBmcm9tICcuLi9jb21tb24vZXh0ZW5zaW9uLWhvb2tzJztcbmltcG9ydCB7IFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zdGF0ZS1zZXJ2aWNlLmFic3RyYWN0JztcbmltcG9ydCB7XG4gIER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uLFxuICBIT09LX0NPTVBPTkVOVCxcbiAgSE9PS19DT01QT05FTlRTXG59IGZyb20gJy4vZHluYW1pYy1jb21wb25lbnQubW9kZWwnO1xuXG5kZWNsYXJlIGNvbnN0IF9fTU9ERV9fOiBzdHJpbmc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnRTZXJ2aWNlIGV4dGVuZHMgU3RhdGVTZXJ2aWNlXG4gIGltcGxlbWVudHMgRXh0ZW5zaW9uUG9pbnQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+IHtcbiAgaXRlbXMkOiBPYnNlcnZhYmxlPER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uW10+O1xuICByZWFkb25seSByZWZyZXNoVHJpZ2dlciA9IG5ldyBTdWJqZWN0KCk7XG4gIHJlYWRvbmx5IHN0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8U2V0PER5bmFtaWNDb21wb25lbnREZWZpbml0aW9uPj4oXG4gICAgbmV3IFNldDxEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbj4oKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCByb3V0ZXI6IFJvdXRlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLml0ZW1zJCA9IGZyb21GYWN0b3JpZXMoXG4gICAgICBbKCkgPT4gdGhpcy5pbmplY3Rvci5nZXQoSE9PS19DT01QT05FTlRTLCBbXSksICgpID0+IHRoaXMuZ2V0Q29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rKCldLFxuICAgICAgcm91dGVyLFxuICAgICAgZmFsc2VcbiAgICApO1xuICAgIHRoaXMuaXRlbXMkLnN1YnNjcmliZShjbXBzID0+IHtcbiAgICAgIGNtcHMuZm9yRWFjaChjbXAgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlLmFkZChjbXApO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXROZXdTdGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudHNWaWFEZXByZWNhdGVkSG9vazogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFxuICAgICAgSE9PS19DT01QT05FTlQsXG4gICAgICBbXVxuICAgICkgYXMgRHluYW1pY0NvbXBvbmVudERlZmluaXRpb25bXTtcbiAgICBpZiAoXG4gICAgICBjb21wb25lbnRzVmlhRGVwcmVjYXRlZEhvb2sgJiZcbiAgICAgIGNvbXBvbmVudHNWaWFEZXByZWNhdGVkSG9vay5sZW5ndGggJiZcbiAgICAgIF9fTU9ERV9fICE9PSAncHJvZHVjdGlvbidcbiAgICApIHtcbiAgICAgIGNvbnNvbGUud2FybignSE9PS19DT01QT05FTlQgaXMgbm93IGRlcHJlY2F0ZWQuIFVzZSBIT09LX0NPTVBPTkVOVFMgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50c1ZpYURlcHJlY2F0ZWRIb29rO1xuICB9XG5cbiAgcmVmcmVzaCgpIHtcbiAgICB0aGlzLnJlZnJlc2hUcmlnZ2VyLm5leHQoMSk7XG4gIH1cblxuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUkLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBjb21wb25lbnQgYnkgaXQncyBpZCBhcyBhbiBvYnNlcnZhYmxlLlxuICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBnZXRCeUlkJChpZCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlJC5waXBlKFxuICAgICAgZmlsdGVyKChjbXBzOiBTZXQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+KSA9PiBjbXBzLnNpemUgPiAwKSxcbiAgICAgIG1lcmdlTWFwKChjbXBzOiBTZXQ8RHluYW1pY0NvbXBvbmVudERlZmluaXRpb24+KSA9PlxuICAgICAgICBvZihBcnJheS5mcm9tKGNtcHMpLmZpbmQoY21wID0+IGNtcC5pZCA9PT0gaWQpKVxuICAgICAgKSxcbiAgICAgIHRha2UoMSlcbiAgICApO1xuICB9XG5cbiAgYWRkKGNvbXBvbmVudDogRHluYW1pY0NvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICB0aGlzLnN0YXRlLmFkZChjb21wb25lbnQpO1xuICAgIHRoaXMuZW1pdE5ld1N0YXRlKCk7XG4gIH1cblxuICByZW1vdmUoY29tcG9uZW50OiBEeW5hbWljQ29tcG9uZW50RGVmaW5pdGlvbikge1xuICAgIHRoaXMuc3RhdGUuZGVsZXRlKGNvbXBvbmVudCk7XG4gICAgdGhpcy5lbWl0TmV3U3RhdGUoKTtcbiAgfVxufVxuIl19