import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ContentChild } from '@angular/core';
import { AlertService } from './alert.service';
import { AlertDetailsComponent } from './alert-details.component';
/**
 * Alert component allows creating alert with complex view.
 */
var AlertComponent = /** @class */ (function () {
    /**
     * @ignore
     */
    function AlertComponent(alertService) {
        this.alertService = alertService;
    }
    /**
     * AlertComponent adds new alert to collection stored in alertService after view init.
     */
    AlertComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.containDetailsComponent) {
            this.detailedData = null;
        }
        this.viewInitTimeout = setTimeout(function () {
            return _this.alertService.add(_this);
        });
    };
    /**
     * AlertComponent removes alert from collection stored in alertService on destroy component.
     */
    AlertComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.viewInitTimeout);
        this.alertService.remove(this);
    };
    AlertComponent.ctorParameters = function () { return [
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], AlertComponent.prototype, "type", void 0);
    tslib_1.__decorate([
        Input()
    ], AlertComponent.prototype, "onDetail", void 0);
    tslib_1.__decorate([
        Input()
    ], AlertComponent.prototype, "onClose", void 0);
    tslib_1.__decorate([
        ViewChild('detailedData', { static: false })
    ], AlertComponent.prototype, "detailedData", void 0);
    tslib_1.__decorate([
        ViewChild('text', { static: false })
    ], AlertComponent.prototype, "text", void 0);
    tslib_1.__decorate([
        ContentChild(AlertDetailsComponent, { static: false })
    ], AlertComponent.prototype, "containDetailsComponent", void 0);
    AlertComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-alert',
            template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
        })
    ], AlertComponent);
    return AlertComponent;
}());
export { AlertComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYWxlcnQvYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRTs7R0FFRztBQU9IO0lBK0JFOztPQUVHO0lBQ0gsd0JBQW1CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUcsQ0FBQztJQUVqRDs7T0FFRztJQUNILHdDQUFlLEdBQWY7UUFBQSxpQkFPQztRQU5DLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDMUI7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQztZQUNoQyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQztRQUEzQixDQUEyQixDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0NBQVcsR0FBWDtRQUNFLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0JBcEJnQyxZQUFZOztJQTdCcEM7UUFBUixLQUFLLEVBQUU7Z0RBQTREO0lBSTNEO1FBQVIsS0FBSyxFQUFFO29EQUFzQjtJQUlyQjtRQUFSLEtBQUssRUFBRTttREFBcUI7SUFJZTtRQUEzQyxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDO3dEQUFjO0lBSXJCO1FBQW5DLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7Z0RBQU07SUFJYTtRQUFyRCxZQUFZLENBQUMscUJBQXFCLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7bUVBQWdEO0lBekIxRixjQUFjO1FBTDFCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxXQUFXO1lBQ3JCLHNQQUFxQztTQUN0QyxDQUFDO09BRVcsY0FBYyxDQXVEMUI7SUFBRCxxQkFBQztDQUFBLEFBdkRELElBdURDO1NBdkRZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgSW5wdXQsIFZpZXdDaGlsZCwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJy4vYWxlcnQubW9kZWwnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0RGV0YWlsc0NvbXBvbmVudCB9IGZyb20gJy4vYWxlcnQtZGV0YWlscy5jb21wb25lbnQnO1xuXG4vKipcbiAqIEFsZXJ0IGNvbXBvbmVudCBhbGxvd3MgY3JlYXRpbmcgYWxlcnQgd2l0aCBjb21wbGV4IHZpZXcuXG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFsZXJ0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FsZXJ0LmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIEFsZXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBBbGVydCB7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBhbGVydC5cbiAgICovXG4gIEBJbnB1dCgpIHR5cGU6ICdzdWNjZXNzJyB8ICd3YXJuaW5nJyB8ICdkYW5nZXInIHwgJ2luZm8nIHwgJ3N5c3RlbSc7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBjYWxsIGlmIHVzZXIgY2xpY2tzIG9uIHRoZSBkZXRhaWwgYnV0dG9uLlxuICAgKi9cbiAgQElucHV0KCkgb25EZXRhaWw6ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBjYWxsIGlmIHVzZXIgY2xpY2tzIG9uIHRoZSBjbG9zZSBidXR0b24uXG4gICAqL1xuICBASW5wdXQoKSBvbkNsb3NlOiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogRGV0YWlsZWQgaW5mb3JtYXRpb24gdG8gZGlzcGxheS5cbiAgICovXG4gIEBWaWV3Q2hpbGQoJ2RldGFpbGVkRGF0YScsIHtzdGF0aWM6IGZhbHNlfSkgZGV0YWlsZWREYXRhO1xuICAvKipcbiAgICogVGhlIHRleHQgdGVtcGxhdGVSZWYgdG8gZGlzcGxheSBtZXNzYWdlLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgndGV4dCcsIHtzdGF0aWM6IGZhbHNlfSkgdGV4dDtcbiAgLyoqXG4gICAqIENvbnRlbnQgb2YgQWxlcnREZXRhaWxzQ29tcG9uZW50IGlzIGRpc3BsYXllZCBhcyBhbGVydERldGFpbHMuXG4gICAqL1xuICBAQ29udGVudENoaWxkKEFsZXJ0RGV0YWlsc0NvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBjb250YWluRGV0YWlsc0NvbXBvbmVudDogQWxlcnREZXRhaWxzQ29tcG9uZW50O1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHJpdmF0ZSB2aWV3SW5pdFRpbWVvdXQ7XG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhbGVydFNlcnZpY2U6IEFsZXJ0U2VydmljZSkge31cblxuICAvKipcbiAgICogQWxlcnRDb21wb25lbnQgYWRkcyBuZXcgYWxlcnQgdG8gY29sbGVjdGlvbiBzdG9yZWQgaW4gYWxlcnRTZXJ2aWNlIGFmdGVyIHZpZXcgaW5pdC5cbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuY29udGFpbkRldGFpbHNDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuZGV0YWlsZWREYXRhID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy52aWV3SW5pdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGQodGhpcylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsZXJ0Q29tcG9uZW50IHJlbW92ZXMgYWxlcnQgZnJvbSBjb2xsZWN0aW9uIHN0b3JlZCBpbiBhbGVydFNlcnZpY2Ugb24gZGVzdHJveSBjb21wb25lbnQuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy52aWV3SW5pdFRpbWVvdXQpO1xuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgfVxufVxuIl19