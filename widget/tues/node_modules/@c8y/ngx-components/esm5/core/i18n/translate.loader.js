import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';
import { Inject, Injectable } from '@angular/core';
import { LOCALE_PATH } from './locale.path';
import { LANGUAGES } from './languages';
import { OptionsService } from '../common/options.service';
import { mapKeys } from 'lodash-es';
import { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';
var TranslateCustomLoader = /** @class */ (function () {
    function TranslateCustomLoader(http, optionsService, cachedLocaleDictionaryService, path, languages) {
        if (path === void 0) { path = null; }
        if (languages === void 0) { languages = null; }
        this.http = http;
        this.optionsService = optionsService;
        this.cachedLocaleDictionaryService = cachedLocaleDictionaryService;
        this.path = path;
        this.languages = languages;
    }
    TranslateCustomLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        var path = this.path || '';
        var url = "" + path + lang + ".json";
        if (this.languages && this.languages[lang] && this.languages[lang].url) {
            url = this.languages[lang].url;
        }
        return this.http.get(url).pipe(map(function (d) {
            if (_this.optionsService.langsDetails && _this.optionsService.langsDetails[lang]) {
                return tslib_1.__assign({}, d[lang], _this.optionsService.langsDetails[lang]);
            }
            return d[lang];
        }), tap(function (dictionary) {
            _this.cachedLocaleDictionaryService.cachedDictionary[lang] = dictionary;
        }), map(function (dictionary) { return _this.getDictionaryWithTrimmedKeys(dictionary); }), catchError(function () { return of({}); }));
    };
    /**
     * We want to have translation keys unified, so they don't contain unnecessary spaces and line breaks.
     * This way we can dynamically build keys from HTML, and match them to extracted string, that might be HTML as well.
     */
    TranslateCustomLoader.prototype.getDictionaryWithTrimmedKeys = function (dictionary) {
        return mapKeys(dictionary, function (value, key) {
            return trimTranslationKey(key);
        });
    };
    TranslateCustomLoader.ctorParameters = function () { return [
        { type: HttpClient },
        { type: OptionsService },
        { type: CachedLocaleDictionaryService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_PATH,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LANGUAGES,] }] }
    ]; };
    TranslateCustomLoader = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(3, Inject(LOCALE_PATH)),
        tslib_1.__param(4, Inject(LANGUAGES))
    ], TranslateCustomLoader);
    return TranslateCustomLoader;
}());
export { TranslateCustomLoader };
export function trimTranslationKey(key) {
    return key.replace(/(\r\n|\n|\r)/gm, '').replace(/\s{2,}/g, ' ').trim();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2kxOG4vdHJhbnNsYXRlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBR25GO0lBQ0UsK0JBQ1UsSUFBZ0IsRUFDaEIsY0FBOEIsRUFDOUIsNkJBQTRELEVBQ3ZDLElBQW1CLEVBQ3JCLFNBQXFCO1FBRG5CLHFCQUFBLEVBQUEsV0FBbUI7UUFDckIsMEJBQUEsRUFBQSxnQkFBcUI7UUFKeEMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUErQjtRQUN2QyxTQUFJLEdBQUosSUFBSSxDQUFlO1FBQ3JCLGNBQVMsR0FBVCxTQUFTLENBQVk7SUFDL0MsQ0FBQztJQUVKLDhDQUFjLEdBQWQsVUFBZSxJQUFZO1FBQTNCLGlCQW9CQztRQW5CQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxLQUFHLElBQUksR0FBRyxJQUFJLFVBQU8sQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUN0RSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7U0FDaEM7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLFVBQUEsQ0FBQztZQUNILElBQUksS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLElBQUksS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzlFLDRCQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBSyxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRzthQUNsRTtZQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxVQUFBLFVBQVU7WUFDWixLQUFJLENBQUMsNkJBQTZCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxVQUFBLFVBQVUsSUFBSSxPQUFBLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQyxVQUFVLENBQUMsRUFBN0MsQ0FBNkMsQ0FBQyxFQUNoRSxVQUFVLENBQUMsY0FBTSxPQUFBLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBTixDQUFNLENBQUMsQ0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCw0REFBNEIsR0FBNUIsVUFBNkIsVUFBa0I7UUFDN0MsT0FBTyxPQUFPLENBQUMsVUFBVSxFQUFFLFVBQUMsS0FBSyxFQUFFLEdBQUc7WUFDcEMsT0FBQSxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7UUFBdkIsQ0FBdUIsQ0FDeEIsQ0FBQztJQUNKLENBQUM7O2dCQXJDZSxVQUFVO2dCQUNBLGNBQWM7Z0JBQ0MsNkJBQTZCOzZDQUNuRSxNQUFNLFNBQUMsV0FBVztnREFDbEIsTUFBTSxTQUFDLFNBQVM7O0lBTlIscUJBQXFCO1FBRGpDLFVBQVUsRUFBRTtRQU1SLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNuQixtQkFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7T0FOVCxxQkFBcUIsQ0F5Q2pDO0lBQUQsNEJBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXpDWSxxQkFBcUI7QUEyQ2xDLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxHQUFHO0lBQ3BDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTG9hZGVyIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExPQ0FMRV9QQVRIIH0gZnJvbSAnLi9sb2NhbGUucGF0aCc7XG5pbXBvcnQgeyBMQU5HVUFHRVMgfSBmcm9tICcuL2xhbmd1YWdlcyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgbWFwS2V5cyB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBDYWNoZWRMb2NhbGVEaWN0aW9uYXJ5U2VydmljZSB9IGZyb20gJy4vY2FjaGVkLWxvY2FsZS1kaWN0aW9uYXJ5LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlQ3VzdG9tTG9hZGVyIGltcGxlbWVudHMgVHJhbnNsYXRlTG9hZGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgb3B0aW9uc1NlcnZpY2U6IE9wdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgY2FjaGVkTG9jYWxlRGljdGlvbmFyeVNlcnZpY2U6IENhY2hlZExvY2FsZURpY3Rpb25hcnlTZXJ2aWNlLFxuICAgIEBJbmplY3QoTE9DQUxFX1BBVEgpIHByaXZhdGUgcGF0aDogc3RyaW5nID0gbnVsbCxcbiAgICBASW5qZWN0KExBTkdVQUdFUykgcHJpdmF0ZSBsYW5ndWFnZXM6IGFueSA9IG51bGxcbiAgKSB7fVxuXG4gIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMucGF0aCB8fCAnJztcbiAgICBsZXQgdXJsID0gYCR7cGF0aH0ke2xhbmd9Lmpzb25gO1xuICAgIGlmICh0aGlzLmxhbmd1YWdlcyAmJiB0aGlzLmxhbmd1YWdlc1tsYW5nXSAmJiB0aGlzLmxhbmd1YWdlc1tsYW5nXS51cmwpIHtcbiAgICAgIHVybCA9IHRoaXMubGFuZ3VhZ2VzW2xhbmddLnVybDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUoXG4gICAgICBtYXAoZCA9PiB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNTZXJ2aWNlLmxhbmdzRGV0YWlscyAmJiB0aGlzLm9wdGlvbnNTZXJ2aWNlLmxhbmdzRGV0YWlsc1tsYW5nXSkge1xuICAgICAgICAgIHJldHVybiB7IC4uLmRbbGFuZ10sIC4uLnRoaXMub3B0aW9uc1NlcnZpY2UubGFuZ3NEZXRhaWxzW2xhbmddIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRbbGFuZ107XG4gICAgICB9KSxcbiAgICAgIHRhcChkaWN0aW9uYXJ5ID0+IHtcbiAgICAgICAgdGhpcy5jYWNoZWRMb2NhbGVEaWN0aW9uYXJ5U2VydmljZS5jYWNoZWREaWN0aW9uYXJ5W2xhbmddID0gZGljdGlvbmFyeTtcbiAgICAgIH0pLFxuICAgICAgbWFwKGRpY3Rpb25hcnkgPT4gdGhpcy5nZXREaWN0aW9uYXJ5V2l0aFRyaW1tZWRLZXlzKGRpY3Rpb25hcnkpKSxcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4gb2Yoe30pKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogV2Ugd2FudCB0byBoYXZlIHRyYW5zbGF0aW9uIGtleXMgdW5pZmllZCwgc28gdGhleSBkb24ndCBjb250YWluIHVubmVjZXNzYXJ5IHNwYWNlcyBhbmQgbGluZSBicmVha3MuXG4gICAqIFRoaXMgd2F5IHdlIGNhbiBkeW5hbWljYWxseSBidWlsZCBrZXlzIGZyb20gSFRNTCwgYW5kIG1hdGNoIHRoZW0gdG8gZXh0cmFjdGVkIHN0cmluZywgdGhhdCBtaWdodCBiZSBIVE1MIGFzIHdlbGwuXG4gICAqL1xuICBnZXREaWN0aW9uYXJ5V2l0aFRyaW1tZWRLZXlzKGRpY3Rpb25hcnk6IG9iamVjdCkge1xuICAgIHJldHVybiBtYXBLZXlzKGRpY3Rpb25hcnksICh2YWx1ZSwga2V5KSA9PlxuICAgICAgdHJpbVRyYW5zbGF0aW9uS2V5KGtleSlcbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1UcmFuc2xhdGlvbktleShrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC8oXFxyXFxufFxcbnxcXHIpL2dtLCAnJykucmVwbGFjZSgvXFxzezIsfS9nLCAnICcpLnRyaW0oKTtcbn1cbiJdfQ==