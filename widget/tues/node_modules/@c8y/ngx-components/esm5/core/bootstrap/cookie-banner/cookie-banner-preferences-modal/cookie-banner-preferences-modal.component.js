import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { Status } from '../../../common/status.model';
import { gettext } from '../../../i18n/gettext';
import { CookieBannerService } from '../cookie-banner.service';
var CookieBannerPreferencesModalComponent = /** @class */ (function () {
    function CookieBannerPreferencesModalComponent(cookieBannerService) {
        this.cookieBannerService = cookieBannerService;
        this.closeSubject = new Subject();
        this.title = gettext('Cookie preferences');
        this.labels = { ok: gettext('Save settings'), cancel: gettext('Cancel') };
        this.status = Status.INFO;
    }
    CookieBannerPreferencesModalComponent.prototype.ngOnInit = function () {
        this.configCookiePreferencesList = this.cookieBannerService.transformCookiePreferencesToList(this.configCookiePreferences);
    };
    CookieBannerPreferencesModalComponent.prototype.ngAfterViewInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.modalRef.result];
                    case 1:
                        _a.sent();
                        this.onClose();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.onDismiss();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CookieBannerPreferencesModalComponent.prototype.onClose = function () {
        var cookiePref = this.cookieBannerService.transformCookiePreferencesListToCookiePreferences(this.configCookiePreferencesList);
        this.closeSubject.next(cookiePref);
        this.closeSubject.complete();
    };
    CookieBannerPreferencesModalComponent.prototype.onDismiss = function () {
        this.closeSubject.next(undefined);
        this.closeSubject.complete();
    };
    CookieBannerPreferencesModalComponent.prototype.getCookieDescription = function (cookieType) {
        return this.cookieBannerService.getCookieDescription(cookieType);
    };
    CookieBannerPreferencesModalComponent.ctorParameters = function () { return [
        { type: CookieBannerService }
    ]; };
    tslib_1.__decorate([
        ViewChild('modalRef', { static: false })
    ], CookieBannerPreferencesModalComponent.prototype, "modalRef", void 0);
    CookieBannerPreferencesModalComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-cookie-banner-preferences-modal',
            template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n\n  <div *ngFor=\"let item of configCookiePreferencesList\" class=\"row p-t-8 p-b-8 separator-top\">\n    <div class=\"col-xs-2\">\n      <div class=\"text-center\">\n        <label class=\"c8y-switch\">\n          <input\n            name=\"{{ item.name }}\"\n            type=\"checkbox\"\n            [(ngModel)]=\"item.value\"\n            [disabled]=\"item.isReadonly\"\n          />\n          <span></span>\n        </label>\n      </div>\n    </div>\n    <div class=\"col-xs-10\">\n      <h4 class=\"text-medium\">\n        {{ item.name | translate | humanize }}\n      </h4>\n      <p>\n        {{ getCookieDescription(item.name) | translate }}\n      </p>\n    </div>\n  </div>\n</c8y-confirm-modal>\n"
        })
    ], CookieBannerPreferencesModalComponent);
    return CookieBannerPreferencesModalComponent;
}());
export { CookieBannerPreferencesModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhbm5lci1wcmVmZXJlbmNlcy1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9ib290c3RyYXAvY29va2llLWJhbm5lci9jb29raWUtYmFubmVyLXByZWZlcmVuY2VzLW1vZGFsL2Nvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQWMsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFNL0Q7SUFTRSwrQ0FBb0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFQNUQsaUJBQVksR0FBK0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN6RCxVQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdEMsV0FBTSxHQUFnQixFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ2xGLFdBQU0sR0FBZSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBSThCLENBQUM7SUFFaEUsd0RBQVEsR0FBUjtRQUNFLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0NBQWdDLENBQzFGLElBQUksQ0FBQyx1QkFBdUIsQ0FDN0IsQ0FBQztJQUNKLENBQUM7SUFFSywrREFBZSxHQUFyQjs7Ozs7Ozt3QkFFSSxxQkFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBQTs7d0JBQTFCLFNBQTBCLENBQUM7d0JBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Ozt3QkFFZixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Ozs7OztLQUVwQjtJQUVELHVEQUFPLEdBQVA7UUFDRSxJQUFNLFVBQVUsR0FBc0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlEQUFpRCxDQUM5RyxJQUFJLENBQUMsMkJBQTJCLENBQ2pDLENBQUM7UUFFRixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCx5REFBUyxHQUFUO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsb0VBQW9CLEdBQXBCLFVBQXFCLFVBQWtCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7O2dCQWpDd0MsbUJBQW1COztJQVJsQjtRQUF6QyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDOzJFQUFpQztJQUQvRCxxQ0FBcUM7UUFKakQsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHFDQUFxQztZQUMvQyw0eUJBQStEO1NBQ2hFLENBQUM7T0FDVyxxQ0FBcUMsQ0EyQ2pEO0lBQUQsNENBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3RhdHVzLCBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IENvbmZpcm1Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL21vZGFsL21vZGFsLWNvbmZpcm0uY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGFsTGFiZWxzIH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0LW1vZGFsL3NlbGVjdC1tb2RhbC5tb2RlbCc7XG5pbXBvcnQgeyBDb29raWUsIENvb2tpZVByZWZlcmVuY2VzIH0gZnJvbSAnLi4vY29va2llLWJhbm5lci5tb2RlbCc7XG5pbXBvcnQgeyBDb29raWVCYW5uZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29va2llLWJhbm5lci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNvb2tpZS1iYW5uZXItcHJlZmVyZW5jZXMtbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29va2llLWJhbm5lci1wcmVmZXJlbmNlcy1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ29va2llQmFubmVyUHJlZmVyZW5jZXNNb2RhbENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ21vZGFsUmVmJywgeyBzdGF0aWM6IGZhbHNlIH0pIG1vZGFsUmVmOiBDb25maXJtTW9kYWxDb21wb25lbnQ7XG4gIGNsb3NlU3ViamVjdDogU3ViamVjdDxDb29raWVQcmVmZXJlbmNlcz4gPSBuZXcgU3ViamVjdCgpO1xuICB0aXRsZSA9IGdldHRleHQoJ0Nvb2tpZSBwcmVmZXJlbmNlcycpO1xuICBsYWJlbHM6IE1vZGFsTGFiZWxzID0geyBvazogZ2V0dGV4dCgnU2F2ZSBzZXR0aW5ncycpLCBjYW5jZWw6IGdldHRleHQoJ0NhbmNlbCcpIH07XG4gIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5JTkZPO1xuICBjb25maWdDb29raWVQcmVmZXJlbmNlczogQ29va2llUHJlZmVyZW5jZXM7XG4gIGNvbmZpZ0Nvb2tpZVByZWZlcmVuY2VzTGlzdDogQ29va2llW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb29raWVCYW5uZXJTZXJ2aWNlOiBDb29raWVCYW5uZXJTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY29uZmlnQ29va2llUHJlZmVyZW5jZXNMaXN0ID0gdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLnRyYW5zZm9ybUNvb2tpZVByZWZlcmVuY2VzVG9MaXN0KFxuICAgICAgdGhpcy5jb25maWdDb29raWVQcmVmZXJlbmNlc1xuICAgICk7XG4gIH1cblxuICBhc3luYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubW9kYWxSZWYucmVzdWx0O1xuICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMub25EaXNtaXNzKCk7XG4gICAgfVxuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICBjb25zdCBjb29raWVQcmVmOiBDb29raWVQcmVmZXJlbmNlcyA9IHRoaXMuY29va2llQmFubmVyU2VydmljZS50cmFuc2Zvcm1Db29raWVQcmVmZXJlbmNlc0xpc3RUb0Nvb2tpZVByZWZlcmVuY2VzKFxuICAgICAgdGhpcy5jb25maWdDb29raWVQcmVmZXJlbmNlc0xpc3RcbiAgICApO1xuXG4gICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dChjb29raWVQcmVmKTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgb25EaXNtaXNzKCkge1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodW5kZWZpbmVkKTtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgZ2V0Q29va2llRGVzY3JpcHRpb24oY29va2llVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWVCYW5uZXJTZXJ2aWNlLmdldENvb2tpZURlc2NyaXB0aW9uKGNvb2tpZVR5cGUpO1xuICB9XG59XG4iXX0=