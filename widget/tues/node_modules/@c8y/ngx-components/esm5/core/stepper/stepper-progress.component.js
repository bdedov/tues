import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
var C8yStepperProgress = /** @class */ (function () {
    function C8yStepperProgress() {
        /** Emits the index: number of the step which was clicked */
        this.onStepClicked = new EventEmitter();
    }
    /** Called on click and emits the step index */
    C8yStepperProgress.prototype.stepSelected = function () {
        this.onStepClicked.emit(this.index);
    };
    tslib_1.__decorate([
        Input()
    ], C8yStepperProgress.prototype, "iconOverrides", void 0);
    tslib_1.__decorate([
        Input()
    ], C8yStepperProgress.prototype, "index", void 0);
    tslib_1.__decorate([
        Input()
    ], C8yStepperProgress.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input()
    ], C8yStepperProgress.prototype, "state", void 0);
    tslib_1.__decorate([
        Output()
    ], C8yStepperProgress.prototype, "onStepClicked", void 0);
    C8yStepperProgress = tslib_1.__decorate([
        Component({
            selector: 'c8y-stepper-progress',
            template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{ active: selected, 'step-done': state === 'done' || state === '_done' }\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
        })
    ], C8yStepperProgress);
    return C8yStepperProgress;
}());
export { C8yStepperProgress };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1wcm9ncmVzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9zdGVwcGVyL3N0ZXBwZXItcHJvZ3Jlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3BGO0lBSkE7UUFzQkUsNERBQTREO1FBQ2xELGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQU12RCxDQUFDO0lBSkMsK0NBQStDO0lBQy9DLHlDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQWRRO1FBQVIsS0FBSyxFQUFFOzZEQUFvRDtJQUVuRDtRQUFSLEtBQUssRUFBRTtxREFBZTtJQUVkO1FBQVIsS0FBSyxFQUFFO3dEQUFtQjtJQUVsQjtRQUFSLEtBQUssRUFBRTtxREFBa0I7SUFHaEI7UUFBVCxNQUFNLEVBQUU7NkRBQTRDO0lBbkIxQyxrQkFBa0I7UUFKOUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyw2cEJBQWdEO1NBQ2pELENBQUM7T0FDVyxrQkFBa0IsQ0F5QjlCO0lBQUQseUJBQUM7Q0FBQSxBQXpCRCxJQXlCQztTQXpCWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0ZXBTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXN0ZXBwZXItcHJvZ3Jlc3MnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcHBlci1wcm9ncmVzcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQzh5U3RlcHBlclByb2dyZXNzIHtcbiAgLyoqIExpc3Qgb2Ygb3ZlcnJpZGVuIGljb25zIGFzIFRlbXBsYXRlUmVmLiBBbHNvIGRlZmF1bHQgaWNvbnMgY291bGQgYmUgb3ZlcnJpZGVuLlxuICAgKiAgVGhlIGdpdmVuIG92ZXJyaWRlbiBpY29ucyB3aWxsIHJlcGxhY2UgYW4gaWNvbiB3aXRoIG1hdGNoaW5nIHN0YXRlOiBTdGVwU3RhdGVcbiAgICpcbiAgICogPG5nLWNvbnRhaW5lclxuICAgKiAqbmdTd2l0Y2hDYXNlPVwidHJ1ZVwiXG4gICAqIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImljb25PdmVycmlkZXNbc3RhdGVdXCJcbiAgICogPjwvbmctY29udGFpbmVyPlxuICAgKlxuICAgKi9cbiAgQElucHV0KCkgaWNvbk92ZXJyaWRlczogeyBba2V5OiBzdHJpbmddOiBUZW1wbGF0ZVJlZjxhbnk+IH07XG4gIC8qKiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgc3RlcCAqL1xuICBASW5wdXQoKSBpbmRleDogbnVtYmVyO1xuICAvKiogV2hldGhlciB0aGUgc3RlcCBpcyBjdXVyZW50bHkgc2VsZWN0ZWQgb3Igbm90ICAqL1xuICBASW5wdXQoKSBzZWxlY3RlZDogYm9vbGVhbjtcbiAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzdGVwICovXG4gIEBJbnB1dCgpIHN0YXRlOiBTdGVwU3RhdGU7XG5cbiAgLyoqIEVtaXRzIHRoZSBpbmRleDogbnVtYmVyIG9mIHRoZSBzdGVwIHdoaWNoIHdhcyBjbGlja2VkICovXG4gIEBPdXRwdXQoKSBvblN0ZXBDbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgLyoqIENhbGxlZCBvbiBjbGljayBhbmQgZW1pdHMgdGhlIHN0ZXAgaW5kZXggKi9cbiAgc3RlcFNlbGVjdGVkKCkge1xuICAgIHRoaXMub25TdGVwQ2xpY2tlZC5lbWl0KHRoaXMuaW5kZXgpO1xuICB9XG59XG4iXX0=