import * as tslib_1 from "tslib";
import { NavigatorNode } from './navigator-node';
var NavigatorNodeRoot = /** @class */ (function (_super) {
    tslib_1.__extends(NavigatorNodeRoot, _super);
    function NavigatorNodeRoot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NavigatorNodeRoot.prototype.addRoot = function (nodeData) {
        var parent = nodeData.parent;
        var node = this.createNode(nodeData);
        var localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find(function (n) { return localParent === n; })) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    };
    NavigatorNodeRoot.prototype.createNode = function (nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode(tslib_1.__assign({}, nodeData, { parent: undefined }));
        }
        throw new Error('Wrong type of node data');
    };
    return NavigatorNodeRoot;
}(NavigatorNode));
export { NavigatorNodeRoot };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL25hdmlnYXRvci9uYXZpZ2F0b3Itbm9kZS1yb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFJakQ7SUFBdUMsNkNBQWE7SUFBcEQ7O0lBd0NBLENBQUM7SUF2Q0MsbUNBQU8sR0FBUCxVQUFRLFFBQW9DO1FBQ2xDLElBQUEsd0JBQU0sQ0FBYztRQUM1QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxDQUFDO1FBRWhCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzlCLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDNUI7YUFDRjtpQkFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ3JFLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pDO1lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsV0FBVyxLQUFLLENBQUMsRUFBakIsQ0FBaUIsQ0FBQyxFQUFFO29CQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUN2QjthQUNGO1NBQ0Y7UUFFRCxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsc0NBQVUsR0FBVixVQUFXLFFBQVE7UUFDakIsSUFBSSxRQUFRLFlBQVksYUFBYSxFQUFFO1lBQ3JDLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxJQUFJLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxJQUFJLGFBQWEsc0JBQU0sUUFBUSxJQUFFLE1BQU0sRUFBRSxTQUFTLElBQUcsQ0FBQztTQUM5RDtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBeENELENBQXVDLGFBQWEsR0F3Q25EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSB9IGZyb20gJy4vbmF2aWdhdG9yLW5vZGUnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZURhdGEgfSBmcm9tICcuL25hdmlnYXRvci1ub2RlLWRhdGEnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuZXhwb3J0IGNsYXNzIE5hdmlnYXRvck5vZGVSb290IGV4dGVuZHMgTmF2aWdhdG9yTm9kZSB7XG4gIGFkZFJvb3Qobm9kZURhdGE6IFBhcnRpYWw8TmF2aWdhdG9yTm9kZURhdGE+KSB7XG4gICAgY29uc3QgeyBwYXJlbnQgfSA9IG5vZGVEYXRhO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUobm9kZURhdGEpO1xuICAgIGxldCBsb2NhbFBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhbFBhcmVudCA9IHRoaXMuZmluZChwYXJlbnQubGFiZWwpO1xuICAgICAgICBpZiAobG9jYWxQYXJlbnQpIHtcbiAgICAgICAgICBsb2NhbFBhcmVudC51cGRhdGUocGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcGFyZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvY2FsUGFyZW50ID0gdGhpcy5maW5kKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbG9jYWxQYXJlbnQpIHtcbiAgICAgICAgbG9jYWxQYXJlbnQgPSB0aGlzLmNyZWF0ZU5vZGUocGFyZW50KTtcbiAgICAgICAgaWYgKCF0aGlzLmZpbmQoKG4pID0+IGxvY2FsUGFyZW50ID09PSBuKSkge1xuICAgICAgICAgIHRoaXMuYWRkKGxvY2FsUGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIChsb2NhbFBhcmVudCB8fCB0aGlzKS5hZGQobm9kZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBjcmVhdGVOb2RlKG5vZGVEYXRhKSB7XG4gICAgaWYgKG5vZGVEYXRhIGluc3RhbmNlb2YgTmF2aWdhdG9yTm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGVEYXRhO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5vZGVEYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG5ldyBOYXZpZ2F0b3JOb2RlKHsgbGFiZWw6IG5vZGVEYXRhIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5vZGVEYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG5ldyBOYXZpZ2F0b3JOb2RlKHsgLi4ubm9kZURhdGEsIHBhcmVudDogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHR5cGUgb2Ygbm9kZSBkYXRhJyk7XG4gIH1cbn1cbiJdfQ==