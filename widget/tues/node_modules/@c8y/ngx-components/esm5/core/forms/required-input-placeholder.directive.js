import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, AfterViewChecked } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '@ngx-translate/core';
var RequiredInputPlaceholderDirective = /** @class */ (function () {
    function RequiredInputPlaceholderDirective(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
        this.shouldSkipRequiredHint = false;
        this.shouldSkipRequiredHint = !!this.el.nativeElement.closest('[placeholder-no-required-hint]');
    }
    RequiredInputPlaceholderDirective.prototype.ngAfterViewChecked = function () {
        if (this.el && this.el.nativeElement && this.el.nativeElement.required !== undefined) {
            var required = this.el.nativeElement.required && !this.shouldSkipRequiredHint;
            var placeholder = this.el.nativeElement.placeholder;
            if (this.placeholder !== placeholder || this.req !== required) {
                this.updatePlaceholder(this.getTextForPlaceholder(placeholder, required));
            }
        }
    };
    RequiredInputPlaceholderDirective.prototype.getTextForPlaceholder = function (placeholder, required) {
        if (placeholder === void 0) { placeholder = ''; }
        if (required === void 0) { required = false; }
        this.req = required;
        var requiredText = "(" + this.translationService.instant(gettext('required')) + ")";
        var requiredTextIndex = placeholder.lastIndexOf(requiredText);
        if (requiredTextIndex > 0) {
            placeholder = placeholder.slice(0, requiredTextIndex - 1);
        }
        if (requiredTextIndex === 0) {
            placeholder = '';
        }
        if (!required) {
            return placeholder;
        }
        return placeholder.trim() ? placeholder + " " + requiredText : requiredText;
    };
    RequiredInputPlaceholderDirective.prototype.updatePlaceholder = function (placeholder) {
        this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        this.placeholder = placeholder;
    };
    RequiredInputPlaceholderDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: TranslateService }
    ]; };
    RequiredInputPlaceholderDirective = tslib_1.__decorate([
        Directive({
            selector: 'input[required]'
        })
    ], RequiredInputPlaceholderDirective);
    return RequiredInputPlaceholderDirective;
}());
export { RequiredInputPlaceholderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvcmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3ZEO0lBSUUsMkNBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLGtCQUFvQztRQUZwQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWtCO1FBTnRDLDJCQUFzQixHQUFZLEtBQUssQ0FBQztRQVE3QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRCw4REFBa0IsR0FBbEI7UUFDRSxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUNwRixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUM7WUFDaEYsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBRXRELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxRQUFRLEVBQUU7Z0JBQzdELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDM0U7U0FDRjtJQUNILENBQUM7SUFFTyxpRUFBcUIsR0FBN0IsVUFBOEIsV0FBZ0IsRUFBRSxRQUFnQjtRQUFsQyw0QkFBQSxFQUFBLGdCQUFnQjtRQUFFLHlCQUFBLEVBQUEsZ0JBQWdCO1FBQzlELElBQUksQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO1FBQ3BCLElBQU0sWUFBWSxHQUFHLE1BQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBRyxDQUFDO1FBQ2pGLElBQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoRSxJQUFJLGlCQUFpQixHQUFHLENBQUMsRUFBRTtZQUN6QixXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLGlCQUFpQixLQUFLLENBQUMsRUFBRTtZQUMzQixXQUFXLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFJLFdBQVcsU0FBSSxZQUFjLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUM5RSxDQUFDO0lBRU8sNkRBQWlCLEdBQXpCLFVBQTBCLFdBQVc7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7O2dCQXJDYSxVQUFVO2dCQUNKLFNBQVM7Z0JBQ0MsZ0JBQWdCOztJQVBuQyxpQ0FBaUM7UUFIN0MsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlCQUFpQjtTQUM1QixDQUFDO09BQ1csaUNBQWlDLENBMkM3QztJQUFELHdDQUFDO0NBQUEsQUEzQ0QsSUEyQ0M7U0EzQ1ksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyVmlld0NoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtyZXF1aXJlZF0nXG59KVxuZXhwb3J0IGNsYXNzIFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQge1xuICBwcml2YXRlIHNob3VsZFNraXBSZXF1aXJlZEhpbnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBwcml2YXRlIHJlcTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgIHRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludCA9ICEhdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsb3Nlc3QoJ1twbGFjZWhvbGRlci1uby1yZXF1aXJlZC1oaW50XScpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmVsICYmIHRoaXMuZWwubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcmVxdWlyZWQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQgJiYgIXRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludDtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBsYWNlaG9sZGVyO1xuXG4gICAgICBpZiAodGhpcy5wbGFjZWhvbGRlciAhPT0gcGxhY2Vob2xkZXIgfHwgdGhpcy5yZXEgIT09IHJlcXVpcmVkKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUGxhY2Vob2xkZXIodGhpcy5nZXRUZXh0Rm9yUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIsIHJlcXVpcmVkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0Rm9yUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIgPSAnJywgcmVxdWlyZWQgPSBmYWxzZSkge1xuICAgIHRoaXMucmVxID0gcmVxdWlyZWQ7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0ID0gYCgke3RoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoZ2V0dGV4dCgncmVxdWlyZWQnKSl9KWA7XG4gICAgY29uc3QgcmVxdWlyZWRUZXh0SW5kZXggPSBwbGFjZWhvbGRlci5sYXN0SW5kZXhPZihyZXF1aXJlZFRleHQpO1xuICAgIGlmIChyZXF1aXJlZFRleHRJbmRleCA+IDApIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXIuc2xpY2UoMCwgcmVxdWlyZWRUZXh0SW5kZXggLSAxKTtcbiAgICB9XG4gICAgaWYgKHJlcXVpcmVkVGV4dEluZGV4ID09PSAwKSB7XG4gICAgICBwbGFjZWhvbGRlciA9ICcnO1xuICAgIH1cbiAgICBpZiAoIXJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIHJldHVybiBwbGFjZWhvbGRlci50cmltKCkgPyBgJHtwbGFjZWhvbGRlcn0gJHtyZXF1aXJlZFRleHR9YCA6IHJlcXVpcmVkVGV4dDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIH1cbn1cbiJdfQ==