import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, ViewChild } from '@angular/core';
import { UserService, ICredentials, FetchClient, Client, IAuthentication } from '@c8y/client';
import { AppStateService } from '../common/ui-state.service';
import { AlertService } from '../alert/alert.service';
import { LoginService } from '../login/login.service';
import { clone } from 'lodash-es';
import { gettext } from '../i18n/gettext';
var PasswordConfirmModalComponent = /** @class */ (function () {
    function PasswordConfirmModalComponent(user, ui, client, alert, loginService) {
        this.user = user;
        this.ui = ui;
        this.client = client;
        this.alert = alert;
        this.loginService = loginService;
        this.passwordConfirmedEmitter = new EventEmitter();
        this.loading = false;
    }
    PasswordConfirmModalComponent.prototype.passwordConfirm = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var supportUserName, userId, credentials, strategy, newClient, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.password) return [3 /*break*/, 5];
                        supportUserName = this.ui.currentSupportUserName.value;
                        userId = this.ui.currentUser.value.id;
                        credentials = {
                            password: this.password,
                            user: "" + (supportUserName ? supportUserName + "$" : '') + userId,
                            tenant: this.client.tenant
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        this.loading = true;
                        strategy = clone(this.loginService.useBasicAuth({}));
                        delete credentials.tfa;
                        strategy.updateCredentials(credentials);
                        newClient = this.createNewClient(strategy, this.client.baseUrl);
                        return [4 /*yield*/, newClient.user.current()];
                    case 2:
                        _a.sent();
                        this.emitSuccessAndClose();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1.res && e_1.res.status === 401 && e_1.data && /pin|totp/i.test(e_1.data.message)) {
                            this.emitSuccessAndClose();
                        }
                        else {
                            this.alert.danger(gettext("Provided password doesn't match your current one."));
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        this.loading = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PasswordConfirmModalComponent.prototype.cancel = function () {
        this.passwordConfirmedEmitter.emit(false);
        this.modal._dismiss();
    };
    PasswordConfirmModalComponent.prototype.createNewClient = function (strategy, baseUrl) {
        return new Client(strategy, baseUrl);
    };
    PasswordConfirmModalComponent.prototype.emitSuccessAndClose = function () {
        this.passwordConfirmedEmitter.emit(true);
        this.modal._dismiss();
    };
    PasswordConfirmModalComponent.ctorParameters = function () { return [
        { type: UserService },
        { type: AppStateService },
        { type: FetchClient },
        { type: AlertService },
        { type: LoginService }
    ]; };
    tslib_1.__decorate([
        Output()
    ], PasswordConfirmModalComponent.prototype, "passwordConfirmedEmitter", void 0);
    tslib_1.__decorate([
        ViewChild('modal', { static: false })
    ], PasswordConfirmModalComponent.prototype, "modal", void 0);
    PasswordConfirmModalComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-password-confirm-modal',
            template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group>\r\n      <label translate for=\"currentPassword\">Current password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Current password' | translate }}\"\r\n        required\r\n      />\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Save' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
        })
    ], PasswordConfirmModalComponent);
    return PasswordConfirmModalComponent;
}());
export { PasswordConfirmModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY29uZmlybS1tb2RhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU0xQztJQU9FLHVDQUNTLElBQWlCLEVBQ2pCLEVBQW1CLEVBQ2xCLE1BQW1CLEVBQ25CLEtBQW1CLEVBQ25CLFlBQTBCO1FBSjNCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFjO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWDFCLDZCQUF3QixHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDakUsWUFBTyxHQUFHLEtBQUssQ0FBQztJQVdiLENBQUM7SUFFRSx1REFBZSxHQUFyQjs7Ozs7OzZCQUNNLElBQUksQ0FBQyxRQUFRLEVBQWIsd0JBQWE7d0JBQ1QsZUFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDO3dCQUN2RCxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzt3QkFDdEMsV0FBVyxHQUFpQjs0QkFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFROzRCQUN2QixJQUFJLEVBQUUsTUFBRyxlQUFlLENBQUMsQ0FBQyxDQUFJLGVBQWUsTUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUcsTUFBUTs0QkFDaEUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTt5QkFDM0IsQ0FBQzs7Ozt3QkFFQSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzt3QkFDZCxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQzNELE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQzt3QkFDdkIsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUNsQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDdEUscUJBQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQTs7d0JBQTlCLFNBQThCLENBQUM7d0JBQy9CLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDOzs7O3dCQUUzQixJQUFJLEdBQUMsQ0FBQyxHQUFHLElBQUksR0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUMsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFOzRCQUMvRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzt5QkFDNUI7NkJBQU07NEJBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG1EQUFtRCxDQUFDLENBQUMsQ0FBQzt5QkFDakY7Ozt3QkFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzs7Ozs7O0tBRzFCO0lBRUQsOENBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsdURBQWUsR0FBZixVQUFnQixRQUF5QixFQUFFLE9BQWU7UUFDeEQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLDJEQUFtQixHQUEzQjtRQUNFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDOztnQkFoRGMsV0FBVztnQkFDYixlQUFlO2dCQUNWLFdBQVc7Z0JBQ1osWUFBWTtnQkFDTCxZQUFZOztJQVgxQjtRQUFULE1BQU0sRUFBRTttRkFBd0Q7SUFJMUI7UUFBdEMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztnRUFBK0I7SUFMMUQsNkJBQTZCO1FBSnpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw0QkFBNEI7WUFDdEMsMG9DQUFzRDtTQUN2RCxDQUFDO09BQ1csNkJBQTZCLENBeUR6QztJQUFELG9DQUFDO0NBQUEsQUF6REQsSUF5REM7U0F6RFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSwgSUNyZWRlbnRpYWxzLCBGZXRjaENsaWVudCwgQ2xpZW50LCBJQXV0aGVudGljYXRpb24gfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vbW9kYWwvbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4uL2xvZ2luL2xvZ2luLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1wYXNzd29yZC1jb25maXJtLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50IHtcbiAgQE91dHB1dCgpIHBhc3N3b3JkQ29uZmlybWVkRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgbG9hZGluZyA9IGZhbHNlO1xuICBwYXNzd29yZDogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsJywgeyBzdGF0aWM6IGZhbHNlIH0pIHByaXZhdGUgbW9kYWw6IE1vZGFsQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB1c2VyOiBVc2VyU2VydmljZSxcbiAgICBwdWJsaWMgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsXG4gICAgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHBhc3N3b3JkQ29uZmlybSgpIHtcbiAgICBpZiAodGhpcy5wYXNzd29yZCkge1xuICAgICAgY29uc3Qgc3VwcG9ydFVzZXJOYW1lID0gdGhpcy51aS5jdXJyZW50U3VwcG9ydFVzZXJOYW1lLnZhbHVlO1xuICAgICAgY29uc3QgdXNlcklkID0gdGhpcy51aS5jdXJyZW50VXNlci52YWx1ZS5pZDtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICB1c2VyOiBgJHtzdXBwb3J0VXNlck5hbWUgPyBgJHtzdXBwb3J0VXNlck5hbWV9JGAgOiAnJ30ke3VzZXJJZH1gLFxuICAgICAgICB0ZW5hbnQ6IHRoaXMuY2xpZW50LnRlbmFudFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gY2xvbmUodGhpcy5sb2dpblNlcnZpY2UudXNlQmFzaWNBdXRoKHt9KSk7XG4gICAgICAgIGRlbGV0ZSBjcmVkZW50aWFscy50ZmE7XG4gICAgICAgIHN0cmF0ZWd5LnVwZGF0ZUNyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgbmV3Q2xpZW50ID0gdGhpcy5jcmVhdGVOZXdDbGllbnQoc3RyYXRlZ3ksIHRoaXMuY2xpZW50LmJhc2VVcmwpO1xuICAgICAgICBhd2FpdCBuZXdDbGllbnQudXNlci5jdXJyZW50KCk7XG4gICAgICAgIHRoaXMuZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS5yZXMgJiYgZS5yZXMuc3RhdHVzID09PSA0MDEgJiYgZS5kYXRhICYmIC9waW58dG90cC9pLnRlc3QoZS5kYXRhLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgdGhpcy5lbWl0U3VjY2Vzc0FuZENsb3NlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGVydC5kYW5nZXIoZ2V0dGV4dChcIlByb3ZpZGVkIHBhc3N3b3JkIGRvZXNuJ3QgbWF0Y2ggeW91ciBjdXJyZW50IG9uZS5cIikpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5wYXNzd29yZENvbmZpcm1lZEVtaXR0ZXIuZW1pdChmYWxzZSk7XG4gICAgdGhpcy5tb2RhbC5fZGlzbWlzcygpO1xuICB9XG5cbiAgY3JlYXRlTmV3Q2xpZW50KHN0cmF0ZWd5OiBJQXV0aGVudGljYXRpb24sIGJhc2VVcmw6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgQ2xpZW50KHN0cmF0ZWd5LCBiYXNlVXJsKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdFN1Y2Nlc3NBbmRDbG9zZSgpIHtcbiAgICB0aGlzLnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5lbWl0KHRydWUpO1xuICAgIHRoaXMubW9kYWwuX2Rpc21pc3MoKTtcbiAgfVxufVxuIl19