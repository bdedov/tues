import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, HostBinding, Input, AfterContentInit, QueryList, forwardRef, Output, EventEmitter, HostListener, ChangeDetectionStrategy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DashboardChildComponent } from './dashboard-child.component';
/**
 * Displays a CSS grid which is customizable by the customer. You can set
 * `c8y-dashboard-child`-components on it or position any element on it by
 * setting the grid CSS properties. On change (resize, or rearrange) the
 * component emits an change event.
 *
 * ## Example:
 *
 * ```html
 * <c8y-title>Hello from outlet</c8y-title>
 *
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
 * </c8y-action-bar-item>
 * <c8y-action-bar-item [placement]="'right'">
 *   <button class="btn btn-link" (click)="isFrozen = !isFrozen">
 *     <i [c8yIcon]="isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *   </button>
 * </c8y-action-bar-item>
 *
 * <c8y-dashboard (dashboardChange)="dashboardChange($event)">
 *   <c8y-dashboard-child
 *     [isFrozen]="isFrozen"
 *     title="dynamic"
 *     *ngFor="let widget of widgets"
 *     #current
 *   >
 *     x: {{ current.x }}<br />
 *     y: {{ current.y }}<br />
 *     width: {{ current.width }}<br />
 *     height: {{ current.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="1"
 *     [width]="3"
 *     [height]="2"
 *     [data]="widget"
 *     [class]="'card card-dashboard panel-title-regular panel-content-branded panel-title-overlay'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>World!</span>
 *     </c8y-dashboard-child-title>
 *     x: {{ cpWidget.x }}<br />
 *     y: {{ cpWidget.y }}<br />
 *     width: {{ cpWidget.width }}<br />
 *     height: {{ cpWidget.height }}<br />
 *   </c8y-dashboard-child>
 *   <c8y-dashboard-child
 *     #cpWidget2
 *     [isFrozen]="isFrozen"
 *     [x]="8"
 *     [y]="1"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card card-dashboard panel-content-dark'"
 *   >
 *     <c8y-dashboard-child-title>
 *       <span>Hello!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget2.isFrozen = !cpWidget2.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget2.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget2.x }}<br />
 *     y: {{ cpWidget2.y }}<br />
 *     width: {{ cpWidget2.width }}<br />
 *     height: {{ cpWidget2.height }}<br />
 *   </c8y-dashboard-child>
 *
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * </c8y-dashboard>
 * ```
 */
var DashboardComponent = /** @class */ (function () {
    function DashboardComponent(element, sanitizer) {
        this.element = element;
        this.sanitizer = sanitizer;
        /**
         * The amount of columns on that dashboard.
         */
        this.columns = 12;
        /**
         * The spacing between each children in pixel.
         */
        this.gap = 12;
        /**
         * The amount of rows to dusplay. Set to auto to
         * auto extend the rows.
         */
        this.rows = 'auto';
        /**
         * An event fired if the dashboard was changed.
         */
        this.dashboardChange = new EventEmitter();
        this.lastRow = 1;
        this.DEFAULT_ROW_SIZE = 68;
    }
    Object.defineProperty(DashboardComponent.prototype, "columnSize", {
        /**
         * The current column size.
         */
        get: function () {
            return this.dashboardRect.width / this.columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardComponent.prototype, "rowSize", {
        /**
         * The current row size.
         */
        get: function () {
            return this.rows === 'auto' ? this.DEFAULT_ROW_SIZE : this.calculateRowSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardComponent.prototype, "inlineStyle", {
        /**
         * Returns all positioning styles. Nasty workaround for that issue:
         * https://github.com/angular/angular/issues/9343
         */
        get: function () {
            return this.sanitizer.bypassSecurityTrustStyle("\n        -ms-grid-columns: (1fr)[" + this.columns + "];\n        grid-template-columns: repeat(" + this.columns + ", 1fr);\n        " + (this.rows !== 'auto' ? "grid-template-rows: repeat(" + this.rows + ", 1fr);" : '') + "\n        grid-auto-rows: " + (this.rowSize + this.gap) + "px;\n        -ms-grid-rows: (" + (this.rowSize + this.gap) + "px)[" + (this.rows === 'auto' ? this.lastRow : this.rows) + "];\n        margin: -" + this.gap + "px;\n      ");
        },
        enumerable: true,
        configurable: true
    });
    DashboardComponent.prototype.ngAfterContentInit = function () {
        this.onResize();
        this.getLastRow();
    };
    DashboardComponent.prototype.onResize = function () {
        this.updateRectSize();
    };
    /**
     * Gets the last row
     * (mainly for IE11 which doesn't support grid-auto-rows CSS property)
     */
    DashboardComponent.prototype.getLastRow = function () {
        var lastRow = 1;
        this.children.forEach(function (widget) {
            if (lastRow < widget.y + widget.width) {
                lastRow = widget.y + widget.width;
            }
        });
        this.lastRow = lastRow + 1;
    };
    /**
     * Updates the current rect size of the dashboard.
     */
    DashboardComponent.prototype.updateRectSize = function () {
        var ele = this.element.nativeElement;
        this.dashboardRect = ele.getBoundingClientRect();
    };
    DashboardComponent.prototype.emitChange = function (widget) {
        this.dashboardChange.emit({ source: widget, children: this.children.toArray() });
    };
    DashboardComponent.prototype.calculateRowSize = function () {
        return this.dashboardRect.height / this.rows;
    };
    DashboardComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer }
    ]; };
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DashboardChildComponent; }))
    ], DashboardComponent.prototype, "children", void 0);
    tslib_1.__decorate([
        Input()
    ], DashboardComponent.prototype, "columns", void 0);
    tslib_1.__decorate([
        Input()
    ], DashboardComponent.prototype, "gap", void 0);
    tslib_1.__decorate([
        Input()
    ], DashboardComponent.prototype, "rows", void 0);
    tslib_1.__decorate([
        Output()
    ], DashboardComponent.prototype, "dashboardChange", void 0);
    tslib_1.__decorate([
        HostBinding('attr.style')
    ], DashboardComponent.prototype, "inlineStyle", null);
    tslib_1.__decorate([
        HostListener('window:resize')
    ], DashboardComponent.prototype, "onResize", null);
    DashboardComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-dashboard',
            template: "<ng-content></ng-content>\n",
            host: {
                class: 'c8y-grid-dashboard dashboard-grid'
            },
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], DashboardComponent);
    return DashboardComponent;
}());
export { DashboardComponent };
//# sourceMappingURL=data:application/json;base64,